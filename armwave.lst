   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0050A0E1 		mov	r5, r0	@ slice_y, slice_y
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 40429FE5 		ldr	r4, .L25	@ tmp209,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 4CD04DE2 		sub	sp, sp, #76	@,,
 255              		.cfi_def_cfa_offset 112
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 82 view .LVU34
 258 00ac 240094E5 		ldr	r0, [r4, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 259              	.LVL7:
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 147 view .LVU35
 262 00b0 403094E5 		ldr	r3, [r4, #64]	@ _5, g_armwave_state.bitdepth_height
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 40 view .LVU36
 265 00b4 04A094E5 		ldr	r10, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 65 view .LVU37
 268 00b8 950002E0 		mul	r2, r5, r0	@ tmp212, slice_y, _2
 269              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 270              		.loc 1 73 5 view .LVU38
 271 00bc 10308DE5 		str	r3, [sp, #16]	@ _5,
 272 00c0 0C008DE5 		str	r0, [sp, #12]	@ _2,
 273              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 274              		.loc 1 71 105 view .LVU39
 275 00c4 2228A0E1 		lsr	r2, r2, #16	@ tmp213, tmp212,
 276              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 277              		.loc 1 63 1 view .LVU40
 278 00c8 28108DE5 		str	r1, [sp, #40]	@ height, %sfp
 279              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 280              		.loc 1 71 52 view .LVU41
 281 00cc 930202E0 		mul	r2, r3, r2	@ tmp214, _5, tmp213
 282              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 283              		.loc 1 73 5 view .LVU42
 284 00d0 0A30A0E1 		mov	r3, r10	@, _1
 285 00d4 04508DE5 		str	r5, [sp, #4]	@ slice_y,
 286              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 287              		.loc 1 71 52 view .LVU43
 288 00d8 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp214,
 289              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 290              		.loc 1 71 23 view .LVU44
 291 00dc 02A08AE0 		add	r10, r10, r2	@ write_buffer_base, _1, _8
 292              	.LVL8:
 293              		.loc 1 73 5 is_stmt 1 view .LVU45
 294 00e0 C220A0E1 		asr	r2, r2, #1	@ tmp219, _8,
 295 00e4 00208DE5 		str	r2, [sp]	@ tmp219,
 296 00e8 08108DE5 		str	r1, [sp, #8]	@ height,
 297 00ec 0A20A0E1 		mov	r2, r10	@, write_buffer_base
 298 00f0 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 299              	.LVL9:
 300              		.loc 1 73 5 is_stmt 0 view .LVU46
 301 00f4 F4019FE5 		ldr	r0, .L25+4	@,
 302 00f8 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 is_stmt 1 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00fc 383094E5 		ldr	r3, [r4, #56]	@ _84, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 0100 000053E3 		cmp	r3, #0	@ _84,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0104 38308DE5 		str	r3, [sp, #56]	@ _84, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0108 710000DA 		ble	.L12		@,
 317              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
  87:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d word=0x%08x\n", w, g_armwave_sta
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 // BUG:  waves 3/4/5 seem to be all zeroes; this kinda ignores them but obviously n
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 318              		.loc 1 102 51 view .LVU52
 319 010c 242094E5 		ldr	r2, [r4, #36]	@ _88, g_armwave_state.cmp_x_bitdepth_scale
 320              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 321              		.loc 1 102 116 view .LVU53
 322 0110 403094E5 		ldr	r3, [r4, #64]	@ _92, g_armwave_state.bitdepth_height
 323              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 324              		.loc 1 80 36 view .LVU54
 325 0114 140094E5 		ldr	r0, [r4, #20]	@ _15, g_armwave_state.wave_buffer
 326 0118 821F62E0 		rsb	r1, r2, r2, lsl #31	@ tmp231, _88, _88,
 327 011c 82C0A0E1 		lsl	ip, r2, #1	@ tmp227, _88,
 328 0120 8110A0E1 		lsl	r1, r1, #1	@ tmp232, tmp231,
 329 0124 8390A0E1 		lsl	r9, r3, #1	@ _234, _92,
 330 0128 055080E0 		add	r5, r0, r5	@ tmp225, _15, slice_y
 331              	.LVL11:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 332              		.loc 1 80 36 view .LVU55
 333 012c 2C108DE5 		str	r1, [sp, #44]	@ tmp232, %sfp
 334 0130 340094E5 		ldr	r0, [r4, #52]	@ _181, g_armwave_state.wave_stride
 335 0134 02108CE0 		add	r1, ip, r2	@ ivtmp.46, tmp227, _88
 336              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 337              		.loc 1 79 11 view .LVU56
 338 0138 0980A0E1 		mov	r8, r9	@ _234, _234
 339 013c 0221A0E1 		lsl	r2, r2, #2	@ _225, _88,
 340 0140 18208DE5 		str	r2, [sp, #24]	@ _225, %sfp
 341 0144 0030A0E3 		mov	r3, #0	@ w,
 342 0148 002065E2 		rsb	r2, r5, #0	@ ivtmp.52, tmp225
 343 014c 44C08DE5 		str	ip, [sp, #68]	@ tmp227, %sfp
 344 0150 3C008DE5 		str	r0, [sp, #60]	@ _181, %sfp
 345 0154 40108DE5 		str	r1, [sp, #64]	@ ivtmp.46, %sfp
 346 0158 24208DE5 		str	r2, [sp, #36]	@ ivtmp.52, %sfp
 347 015c 30508DE5 		str	r5, [sp, #48]	@ tmp225, %sfp
 348 0160 34308DE5 		str	r3, [sp, #52]	@ w, %sfp
 349              	.LVL12:
 350              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 351              		.loc 1 80 9 is_stmt 1 view .LVU57
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 352              		.loc 1 84 9 view .LVU58
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 353              		.loc 1 84 9 is_stmt 0 view .LVU59
 354 0164 28309DE5 		ldr	r3, [sp, #40]	@ height, %sfp
 355 0168 000053E3 		cmp	r3, #0	@ height,
 356 016c 4B00000A 		beq	.L13		@,
 357 0170 44009DE5 		ldr	r0, [sp, #68]	@ ivtmp.47, %sfp
 358 0174 40709DE5 		ldr	r7, [sp, #64]	@ ivtmp.46, %sfp
 359 0178 30909DE5 		ldr	r9, [sp, #48]	@ ivtmp.45, %sfp
 360              	.LVL13:
 361              	.L17:
  85:armwave.c     **** 
 362              		.loc 1 85 13 is_stmt 1 view .LVU60
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 363              		.loc 1 101 17 view .LVU61
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 364              		.loc 1 101 17 view .LVU62
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 365              		.loc 1 101 17 view .LVU63
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 366              		.loc 1 101 17 view .LVU64
 367              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 368              		.loc 1 102 34 is_stmt 0 view .LVU65
 369 017c 2C309DE5 		ldr	r3, [sp, #44]	@ tmp232, %sfp
 370 0180 18209DE5 		ldr	r2, [sp, #24]	@ _225, %sfp
 371 0184 03C087E0 		add	ip, r7, r3	@ tmp255, ivtmp.46, tmp232
 372 0188 03E080E0 		add	lr, r0, r3	@ tmp240, ivtmp.47, tmp232
 373              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 374              		.loc 1 85 18 view .LVU66
 375 018c 043099E4 		ldr	r3, [r9], #4	@ word, MEM[base: _231, offset: 0B]
 376              	.LVL14:
  89:armwave.c     ****                 scale_value = word & 0xff;
 377              		.loc 1 89 13 is_stmt 1 view .LVU67
  90:armwave.c     ****                 
 378              		.loc 1 90 17 view .LVU68
  94:armwave.c     ****                     continue;
 379              		.loc 1 94 17 view .LVU69
 380              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 381              		.loc 1 102 74 is_stmt 0 view .LVU70
 382 0190 2718A0E1 		lsr	r1, r7, #16	@ tmp283, ivtmp.46,
 383              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 384              		.loc 1 94 20 view .LVU71
 385 0194 FF6013E2 		ands	r6, r3, #255	@ scale_value, word,
 386 0198 0140A003 		moveq	r4, #1	@ tmp234,
 387 019c 0040A013 		movne	r4, #0	@ tmp234,
 388              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 389              		.loc 1 94 19 view .LVU72
 390 01a0 FF0056E3 		cmp	r6, #255	@ scale_value,
 391 01a4 01408403 		orreq	r4, r4, #1	@,, tmp239, tmp234
 392              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 393              		.loc 1 106 47 view .LVU73
 394 01a8 8650A0E1 		lsl	r5, r6, #1	@ tmp243, scale_value,
 395              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 396              		.loc 1 84 9 view .LVU74
 397 01ac 24609DE5 		ldr	r6, [sp, #36]	@ ivtmp.52, %sfp
 398              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 399              		.loc 1 94 19 view .LVU75
 400 01b0 000054E3 		cmp	r4, #0	@ tmp239,
 401              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 402              		.loc 1 84 9 view .LVU76
 403 01b4 066089E0 		add	r6, r9, r6	@ tmp289, ivtmp.45, ivtmp.52
 404              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 405              		.loc 1 102 74 view .LVU77
 406 01b8 20108DE5 		str	r1, [sp, #32]	@ tmp283, %sfp
 407 01bc 027087E0 		add	r7, r7, r2	@ ivtmp.46, ivtmp.46, _225
 408 01c0 2EE8A0E1 		lsr	lr, lr, #16	@ tmp241, tmp240,
 409 01c4 2CC8A0E1 		lsr	ip, ip, #16	@ tmp256, tmp255,
 410              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 411              		.loc 1 107 22 view .LVU78
 412 01c8 2314A0E1 		lsr	r1, r3, #8	@ word, word,
 413 01cc 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 414              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 415              		.loc 1 84 9 view .LVU79
 416 01d0 1C608DE5 		str	r6, [sp, #28]	@ tmp289, %sfp
 417              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 418              		.loc 1 94 19 view .LVU80
 419 01d4 2B00001A 		bne	.L16		@,
 420              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 421              		.loc 1 101 30 view .LVU81
 422 01d8 98AE2BE0 		mla	fp, r8, lr, r10	@ write_buffer, _234, tmp241, write_buffer_base
 423              	.LVL15:
 106:armwave.c     ****                 word >>= 8;
 424              		.loc 1 106 17 is_stmt 1 view .LVU82
 425              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 426              		.loc 1 94 20 is_stmt 0 view .LVU83
 427 01dc FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 428 01e0 0140A003 		moveq	r4, #1	@ tmp249,
 429              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 430              		.loc 1 106 47 view .LVU84
 431 01e4 B5E09BE1 		ldrh	lr, [fp, r5]	@ *_98, *_98
 432              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 433              		.loc 1 94 20 view .LVU85
 434 01e8 0040A013 		movne	r4, #0	@ tmp249,
 435              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 436              		.loc 1 106 47 view .LVU86
 437 01ec 8160A0E1 		lsl	r6, r1, #1	@ tmp258, scale_value,
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU87
 440 01f0 FF0051E3 		cmp	r1, #255	@ scale_value,
 441 01f4 0410A011 		movne	r1, r4	@, tmp254, tmp249
 442 01f8 01108403 		orreq	r1, r4, #1	@,, tmp254, tmp249
 443              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 444              		.loc 1 106 47 view .LVU88
 445 01fc 01E08EE2 		add	lr, lr, #1	@ tmp246, *_98,
 446              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 447              		.loc 1 94 19 view .LVU89
 448 0200 000051E3 		cmp	r1, #0	@ tmp254,
 449              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 450              		.loc 1 106 47 view .LVU90
 451 0204 B5E08BE1 		strh	lr, [fp, r5]	@ movhi	@ tmp246, *_98
 452              		.loc 1 107 17 is_stmt 1 view .LVU91
 453              	.LVL16:
  90:armwave.c     ****                 
 454              		.loc 1 90 17 view .LVU92
  94:armwave.c     ****                     continue;
 455              		.loc 1 94 17 view .LVU93
 456              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 19 is_stmt 0 view .LVU94
 458 0208 1E00001A 		bne	.L16		@,
 459              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 460              		.loc 1 101 30 view .LVU95
 461 020c 98AC2BE0 		mla	fp, r8, ip, r10	@ write_buffer, _234, tmp256, write_buffer_base
 462              	.LVL17:
 106:armwave.c     ****                 word >>= 8;
 463              		.loc 1 106 17 is_stmt 1 view .LVU96
 464              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 465              		.loc 1 94 20 is_stmt 0 view .LVU97
 466 0210 FF2012E2 		ands	r2, r2, #255	@ scale_value, word,
 467 0214 01C0A003 		moveq	ip, #1	@ tmp264,
 468              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 469              		.loc 1 106 47 view .LVU98
 470 0218 B6109BE1 		ldrh	r1, [fp, r6]	@ *_132, *_132
 471              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 472              		.loc 1 94 20 view .LVU99
 473 021c 00C0A013 		movne	ip, #0	@ tmp264,
 474              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 475              		.loc 1 106 47 view .LVU100
 476 0220 82E0A0E1 		lsl	lr, r2, #1	@ tmp272, scale_value,
 477              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 478              		.loc 1 94 19 view .LVU101
 479 0224 FF0052E3 		cmp	r2, #255	@ scale_value,
 480 0228 0C20A011 		movne	r2, ip	@, tmp269, tmp264
 481 022c 01208C03 		orreq	r2, ip, #1	@,, tmp269, tmp264
 482              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 483              		.loc 1 106 47 view .LVU102
 484 0230 011081E2 		add	r1, r1, #1	@ tmp261, *_132,
 485              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 486              		.loc 1 94 19 view .LVU103
 487 0234 000052E3 		cmp	r2, #0	@ tmp269,
 488              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 489              		.loc 1 106 47 view .LVU104
 490 0238 B6108BE1 		strh	r1, [fp, r6]	@ movhi	@ tmp261, *_132
 491              		.loc 1 107 17 is_stmt 1 view .LVU105
 492              	.LVL18:
  90:armwave.c     ****                 
 493              		.loc 1 90 17 view .LVU106
  94:armwave.c     ****                     continue;
 494              		.loc 1 94 17 view .LVU107
 495              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 496              		.loc 1 94 19 is_stmt 0 view .LVU108
 497 023c 1100001A 		bne	.L16		@,
 498              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 499              		.loc 1 101 30 view .LVU109
 500 0240 2028A0E1 		lsr	r2, r0, #16	@ tmp270, ivtmp.47,
 501              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 502              		.loc 1 94 20 view .LVU110
 503 0244 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 504              	.LVL19:
 505              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 506              		.loc 1 101 30 view .LVU111
 507 0248 98A22BE0 		mla	fp, r8, r2, r10	@ write_buffer, _234, tmp270, write_buffer_base
 508              	.LVL20:
 106:armwave.c     ****                 word >>= 8;
 509              		.loc 1 106 17 is_stmt 1 view .LVU112
 510              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 511              		.loc 1 94 20 is_stmt 0 view .LVU113
 512 024c 0110A003 		moveq	r1, #1	@ tmp277,
 513 0250 0010A013 		movne	r1, #0	@ tmp277,
 514              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 515              		.loc 1 106 47 view .LVU114
 516 0254 83C0A0E1 		lsl	ip, r3, #1	@ tmp285, word,
 517              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 518              		.loc 1 94 19 view .LVU115
 519 0258 FF0053E3 		cmp	r3, #255	@ word,
 520 025c 0130A011 		movne	r3, r1	@, tmp282, tmp277
 521 0260 01308103 		orreq	r3, r1, #1	@,, tmp282, tmp277
 522 0264 000053E3 		cmp	r3, #0	@ tmp282,
 523              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 524              		.loc 1 106 47 view .LVU116
 525 0268 BE209BE1 		ldrh	r2, [fp, lr]	@ *_166, *_166
 526              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 527              		.loc 1 101 30 view .LVU117
 528 026c 20109D05 		ldreq	r1, [sp, #32]	@ tmp283, %sfp
 529              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 530              		.loc 1 106 47 view .LVU118
 531 0270 012082E2 		add	r2, r2, #1	@ tmp275, *_166,
 532 0274 BE208BE1 		strh	r2, [fp, lr]	@ movhi	@ tmp275, *_166
 533              		.loc 1 107 17 is_stmt 1 view .LVU119
 534              	.LVL21:
  90:armwave.c     ****                 
 535              		.loc 1 90 17 view .LVU120
  94:armwave.c     ****                     continue;
 536              		.loc 1 94 17 view .LVU121
 537              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 538              		.loc 1 101 30 is_stmt 0 view .LVU122
 539 0278 98A12B00 		mlaeq	fp, r8, r1, r10	@ write_buffer, _234, tmp283, write_buffer_base
 540              	.LVL22:
 106:armwave.c     ****                 word >>= 8;
 541              		.loc 1 106 17 is_stmt 1 view .LVU123
 542              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 543              		.loc 1 106 47 is_stmt 0 view .LVU124
 544 027c BC309B01 		ldrheq	r3, [fp, ip]	@ *_200, *_200
 545 0280 01308302 		addeq	r3, r3, #1	@ tmp288, *_200,
 546 0284 BC308B01 		strheq	r3, [fp, ip]	@ movhi	@ tmp288, *_200
 547              		.loc 1 107 17 is_stmt 1 view .LVU125
 548              	.LVL23:
 549              	.L16:
 550              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 551              		.loc 1 84 9 is_stmt 0 view .LVU126
 552 0288 28309DE5 		ldr	r3, [sp, #40]	@ height, %sfp
 553 028c 1C209DE5 		ldr	r2, [sp, #28]	@ tmp289, %sfp
 554 0290 020053E1 		cmp	r3, r2	@ height, tmp289
 555 0294 18309DE5 		ldr	r3, [sp, #24]	@ _225, %sfp
 556 0298 030080E0 		add	r0, r0, r3	@ ivtmp.47, ivtmp.47, _225
 557 029c B6FFFF8A 		bhi	.L17		@,
 558              	.L13:
 559              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 560              		.loc 1 79 44 discriminator 2 view .LVU127
 561 02a0 34309DE5 		ldr	r3, [sp, #52]	@ w, %sfp
 562              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 563              		.loc 1 79 5 discriminator 2 view .LVU128
 564 02a4 38209DE5 		ldr	r2, [sp, #56]	@ _84, %sfp
 565              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 566              		.loc 1 79 44 discriminator 2 view .LVU129
 567 02a8 013083E2 		add	r3, r3, #1	@ w, w,
 568              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 569              		.loc 1 79 5 discriminator 2 view .LVU130
 570 02ac 020053E1 		cmp	r3, r2	@ w, _84
 571              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 572              		.loc 1 79 44 discriminator 2 view .LVU131
 573 02b0 34308DE5 		str	r3, [sp, #52]	@ w, %sfp
 574              	.LVL24:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 575              		.loc 1 79 44 discriminator 2 view .LVU132
 576 02b4 24209DE5 		ldr	r2, [sp, #36]	@ ivtmp.52, %sfp
 577 02b8 3C309DE5 		ldr	r3, [sp, #60]	@ _181, %sfp
 578              	.LVL25:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 579              		.loc 1 79 44 discriminator 2 view .LVU133
 580 02bc 032042E0 		sub	r2, r2, r3	@ ivtmp.52, ivtmp.52, _181
 581 02c0 24208DE5 		str	r2, [sp, #36]	@ ivtmp.52, %sfp
 582 02c4 30209DE5 		ldr	r2, [sp, #48]	@ ivtmp.53, %sfp
 583 02c8 033082E0 		add	r3, r2, r3	@ ivtmp.53, ivtmp.53, _181
 584 02cc 30308DE5 		str	r3, [sp, #48]	@ ivtmp.53, %sfp
 585              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 586              		.loc 1 79 5 discriminator 2 view .LVU134
 587 02d0 A3FFFF1A 		bne	.L18		@,
 588              	.LVL26:
 589              	.L12:
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** 
 112:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 590              		.loc 1 112 5 is_stmt 1 view .LVU135
 591              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 592              		.loc 1 112 40 is_stmt 0 view .LVU136
 593 02d4 0A104BE0 		sub	r1, fp, r10	@ tmp290, write_buffer, write_buffer_base
 594              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 595              		.loc 1 112 5 view .LVU137
 596 02d8 14009FE5 		ldr	r0, .L25+8	@,
 597 02dc C110A0E1 		asr	r1, r1, #1	@, tmp290,
 598              	@ armwave.c:113: }
 113:armwave.c     **** }
 599              		.loc 1 113 1 view .LVU138
 600 02e0 4CD08DE2 		add	sp, sp, #76	@,,
 601              		.cfi_def_cfa_offset 36
 602              		@ sp needed	@
 603 02e4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 604              		.cfi_restore 14
 605              		.cfi_restore 11
 606              		.cfi_restore 10
 607              		.cfi_restore 9
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 614              	.LVL27:
 615              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 616              		.loc 1 112 5 view .LVU139
 617 02e8 FEFFFFEA 		b	printf		@
 618              	.LVL28:
 619              	.L26:
 620              		.align	2
 621              	.L25:
 622 02ec 00000000 		.word	g_armwave_state
 623 02f0 20000000 		.word	.LC2
 624 02f4 78000000 		.word	.LC3
 625              		.cfi_endproc
 626              	.LFE59:
 628              		.align	2
 629              		.global	armwave_fill_pixbuf_scaled
 630              		.syntax unified
 631              		.arm
 632              		.fpu vfp
 634              	armwave_fill_pixbuf_scaled:
 635              	.LVL29:
 636              	.LFB60:
 114:armwave.c     **** 
 115:armwave.c     **** /*
 116:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 117:armwave.c     ****  * Rows are repeated as necessary.
 118:armwave.c     ****  */
 119:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 120:armwave.c     **** {
 637              		.loc 1 120 1 is_stmt 1 view -0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 32
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 641              		.loc 1 121 5 view .LVU141
 122:armwave.c     ****     // uint32_t ysub;
 123:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 642              		.loc 1 123 5 view .LVU142
 124:armwave.c     ****     uint8_t r, g, b;
 643              		.loc 1 124 5 view .LVU143
 125:armwave.c     ****     int value; 
 644              		.loc 1 125 5 view .LVU144
 126:armwave.c     ****     // uint8_t row;
 127:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 645              		.loc 1 127 5 view .LVU145
 646              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 647              		.loc 1 120 1 is_stmt 0 view .LVU146
 648 02f8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 649              		.cfi_def_cfa_offset 36
 650              		.cfi_offset 4, -36
 651              		.cfi_offset 5, -32
 652              		.cfi_offset 6, -28
 653              		.cfi_offset 7, -24
 654              		.cfi_offset 8, -20
 655              		.cfi_offset 9, -16
 656              		.cfi_offset 10, -12
 657              		.cfi_offset 11, -8
 658              		.cfi_offset 14, -4
 659 02fc 3CD04DE2 		sub	sp, sp, #60	@,,
 660              		.cfi_def_cfa_offset 96
 661              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 662              		.loc 1 127 15 view .LVU147
 663 0300 2C729FE5 		ldr	r7, .L49	@ tmp241,
 664              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 665              		.loc 1 120 1 view .LVU148
 666 0304 00A0A0E1 		mov	r10, r0	@ out_buffer, out_buffer
 667              	@ armwave.c:131:     printf("output buffer: 0x%08x\n", out_buffer);
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 129:armwave.c     ****     uint32_t offset;
 130:armwave.c     **** 
 131:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 668              		.loc 1 131 5 view .LVU149
 669 0308 0010A0E1 		mov	r1, r0	@, out_buffer
 670              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 671              		.loc 1 127 15 view .LVU150
 672 030c 045097E5 		ldr	r5, [r7, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 673              	@ armwave.c:131:     printf("output buffer: 0x%08x\n", out_buffer);
 674              		.loc 1 131 5 view .LVU151
 675 0310 20029FE5 		ldr	r0, .L49+4	@,
 676              	.LVL30:
 677              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 678              		.loc 1 127 15 view .LVU152
 679 0314 18508DE5 		str	r5, [sp, #24]	@ base_32ptr, %sfp
 680              	.LVL31:
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 681              		.loc 1 128 5 is_stmt 1 view .LVU153
 129:armwave.c     **** 
 682              		.loc 1 129 5 view .LVU154
 683              		.loc 1 131 5 view .LVU155
 684 0318 FEFFFFEB 		bl	printf		@
 685              	.LVL32:
 132:armwave.c     **** 
 133:armwave.c     ****     if(out_buffer == NULL)
 686              		.loc 1 133 5 view .LVU156
 687              	@ armwave.c:133:     if(out_buffer == NULL)
 688              		.loc 1 133 7 is_stmt 0 view .LVU157
 689 031c 00005AE3 		cmp	r10, #0	@ out_buffer,
 690 0320 2600000A 		beq	.L27		@,
 134:armwave.c     ****         return;
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 691              		.loc 1 136 5 is_stmt 1 view .LVU158
 692              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 693              		.loc 1 136 27 is_stmt 0 view .LVU159
 694 0324 583097E5 		ldr	r3, [r7, #88]	@ _1, g_armwave_state.target_width
 695              	@ armwave.c:139:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 137:armwave.c     ****     
 138:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack ~0
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 696              		.loc 1 139 38 view .LVU160
 697 0328 5C1097E5 		ldr	r1, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 698              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 699              		.loc 1 136 10 view .LVU161
 700 032c 402097E5 		ldr	r2, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 701              	@ armwave.c:138:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 138:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 702              		.loc 1 138 5 view .LVU162
 703 0330 34008DE2 		add	r0, sp, #52	@ tmp190,,
 704              	@ armwave.c:139:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 705              		.loc 1 139 38 view .LVU163
 706 0334 910301E0 		mul	r1, r1, r3	@ tmp186, g_armwave_state.target_height, _1
 707              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 708              		.loc 1 136 10 view .LVU164
 709 0338 920304E0 		mul	r4, r2, r3	@ npix, g_armwave_state.bitdepth_height, _1
 710              	@ armwave.c:138:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 138:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 711              		.loc 1 138 5 view .LVU165
 712 033c 0111A0E1 		lsl	r1, r1, #2	@, tmp186,
 713 0340 0420A0E1 		mov	r2, r4	@, npix
 714 0344 08008DE5 		str	r0, [sp, #8]	@ tmp190,
 715 0348 503097E5 		ldr	r3, [r7, #80]	@, g_armwave_state.ch_buff_size
 716 034c 20048DE8 		stm	sp, {r5, r10}	@,,
 717 0350 E4019FE5 		ldr	r0, .L49+8	@,
 718              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 719              		.loc 1 136 10 view .LVU166
 720 0354 1C408DE5 		str	r4, [sp, #28]	@ npix, %sfp
 721              	.LVL33:
 138:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 722              		.loc 1 138 5 is_stmt 1 view .LVU167
 723 0358 FEFFFFEB 		bl	printf		@
 724              	.LVL34:
 140:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 141:armwave.c     **** 
 142:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 143:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 725              		.loc 1 143 5 view .LVU168
 726              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 727              		.loc 1 143 59 is_stmt 0 view .LVU169
 728 035c 583097E5 		ldr	r3, [r7, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 729 0360 5C2097E5 		ldr	r2, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 730              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 731              		.loc 1 143 5 view .LVU170
 732 0364 0010A0E3 		mov	r1, #0	@,
 733 0368 0A00A0E1 		mov	r0, r10	@, out_buffer
 734              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 735              		.loc 1 143 59 view .LVU171
 736 036c 920302E0 		mul	r2, r2, r3	@ tmp193, g_armwave_state.target_height, g_armwave_state.target_width
 737              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 738              		.loc 1 143 5 view .LVU172
 739 0370 0221A0E1 		lsl	r2, r2, #2	@, tmp193,
 740 0374 FEFFFFEB 		bl	memset		@
 741              	.LVL35:
 144:armwave.c     **** 
 145:armwave.c     ****     printf("iter...\n");
 742              		.loc 1 145 5 is_stmt 1 view .LVU173
 743 0378 C0019FE5 		ldr	r0, .L49+12	@,
 744 037c FEFFFFEB 		bl	puts		@
 745              	.LVL36:
 146:armwave.c     **** 
 147:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 746              		.loc 1 147 5 view .LVU174
 747              		.loc 1 147 5 is_stmt 0 view .LVU175
 748 0380 000054E3 		cmp	r4, #0	@ npix,
 749 0384 670000DA 		ble	.L37		@,
 750              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 751              		.loc 1 147 11 view .LVU176
 752 0388 00B0A0E3 		mov	fp, #0	@ n,
 753              	@ armwave.c:121:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 121:armwave.c     ****     // uint32_t ysub;
 754              		.loc 1 121 46 view .LVU177
 755 038c 20B08DE5 		str	fp, [sp, #32]	@ n, %sfp
 756              	.LVL37:
 757              	.L36:
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 149:armwave.c     ****         //wave_word = 0x12345678;
 150:armwave.c     ****         wave_word = *base_32ptr++;
 758              		.loc 1 150 9 is_stmt 1 view .LVU178
 759              	@ armwave.c:150:         wave_word = *base_32ptr++;
 760              		.loc 1 150 19 is_stmt 0 view .LVU179
 761 0390 18309DE5 		ldr	r3, [sp, #24]	@ base_32ptr, %sfp
 762 0394 049093E4 		ldr	r9, [r3], #4	@ wave_word, MEM[base: base_32ptr_80, offset: 4294967292B]
 763              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 151:armwave.c     **** 
 152:armwave.c     ****         /*
 153:armwave.c     ****         if(n % 200 == 0) {
 154:armwave.c     ****            printf("%d\n", n);
 155:armwave.c     ****         }
 156:armwave.c     ****         */
 157:armwave.c     **** 
 158:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 764              		.loc 1 158 11 view .LVU180
 765 0398 000059E3 		cmp	r9, #0	@ wave_word,
 766              	@ armwave.c:150:         wave_word = *base_32ptr++;
 150:armwave.c     **** 
 767              		.loc 1 150 19 view .LVU181
 768 039c 18308DE5 		str	r3, [sp, #24]	@ base_32ptr, %sfp
 769              	.LVL38:
 770              		.loc 1 158 9 is_stmt 1 view .LVU182
 771              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 772              		.loc 1 158 11 is_stmt 0 view .LVU183
 773 03a0 0800001A 		bne	.L47		@,
 774              	.LVL39:
 775              	.L31:
 776              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 777              		.loc 1 147 5 discriminator 2 view .LVU184
 778 03a4 1C309DE5 		ldr	r3, [sp, #28]	@ npix, %sfp
 779              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 780              		.loc 1 147 28 discriminator 2 view .LVU185
 781 03a8 02B08BE2 		add	fp, fp, #2	@ n, n,
 782              	.LVL40:
 783              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 784              		.loc 1 147 5 discriminator 2 view .LVU186
 785 03ac 0B0053E1 		cmp	r3, fp	@ npix, n
 786 03b0 F6FFFFCA 		bgt	.L36		@,
 787              	.LVL41:
 788              	.L30:
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 162:armwave.c     **** 
 163:armwave.c     ****                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 168:armwave.c     ****                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 171:armwave.c     **** 
 172:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 173:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 175:armwave.c     ****                     // Plot the pixels
 176:armwave.c     ****                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 181:armwave.c     ****                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 186:armwave.c     ****                     }
 187:armwave.c     ****                 }
 188:armwave.c     ****             }
 189:armwave.c     ****         }
 190:armwave.c     ****     }
 191:armwave.c     **** 
 192:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 789              		.loc 1 192 5 is_stmt 1 view .LVU187
 790 03b4 20109DE5 		ldr	r1, [sp, #32]	@, %sfp
 791 03b8 84019FE5 		ldr	r0, .L49+16	@,
 792 03bc FEFFFFEB 		bl	printf		@
 793              	.LVL42:
 794              	.L27:
 795              	@ armwave.c:193: }
 193:armwave.c     **** }
 796              		.loc 1 193 1 is_stmt 0 view .LVU188
 797 03c0 3CD08DE2 		add	sp, sp, #60	@,,
 798              		.cfi_remember_state
 799              		.cfi_def_cfa_offset 36
 800              		@ sp needed	@
 801 03c4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 802              	.LVL43:
 803              	.L47:
 804              		.cfi_restore_state
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 805              		.loc 1 159 13 is_stmt 1 view .LVU189
 806              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 807              		.loc 1 159 26 is_stmt 0 view .LVU190
 808 03c8 0020A0E3 		mov	r2, #0	@ _53,
 809              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 810              		.loc 1 159 19 view .LVU191
 811 03cc 34208DE5 		str	r2, [sp, #52]	@ tmp266, w
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 812              		.loc 1 159 19 view .LVU192
 813 03d0 28B08DE5 		str	fp, [sp, #40]	@ n, %sfp
 814 03d4 030000EA 		b	.L35		@
 815              	.LVL44:
 816              	.L32:
 817              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 818              		.loc 1 159 32 discriminator 2 view .LVU193
 819 03d8 012082E2 		add	r2, r2, #1	@ _53, _53,
 820              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 821              		.loc 1 159 13 discriminator 2 view .LVU194
 822 03dc 010052E3 		cmp	r2, #1	@ _53,
 823              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 824              		.loc 1 159 32 discriminator 2 view .LVU195
 825 03e0 34208DE5 		str	r2, [sp, #52]	@ _53, w
 826              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 827              		.loc 1 159 13 discriminator 2 view .LVU196
 828 03e4 4D0000CA 		bgt	.L48		@,
 829              	.L35:
 160:armwave.c     ****                 wave_word >>= 16;
 830              		.loc 1 160 17 is_stmt 1 view .LVU197
 831              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 832              		.loc 1 160 23 is_stmt 0 view .LVU198
 833 03e8 7930FFE6 		uxth	r3, r9	@ value, wave_word
 834              	.LVL45:
 161:armwave.c     **** 
 835              		.loc 1 161 17 is_stmt 1 view .LVU199
 836              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 837              		.loc 1 163 19 is_stmt 0 view .LVU200
 838 03ec 000053E3 		cmp	r3, #0	@ value,
 839              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 840              		.loc 1 161 27 view .LVU201
 841 03f0 2998A0E1 		lsr	r9, r9, #16	@ wave_word, wave_word,
 842              	.LVL46:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 843              		.loc 1 163 17 is_stmt 1 view .LVU202
 844              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 845              		.loc 1 163 19 is_stmt 0 view .LVU203
 846 03f4 F7FFFF0A 		beq	.L32		@,
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 847              		.loc 1 164 21 is_stmt 1 view .LVU204
 848              	.LVL47:
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 849              		.loc 1 165 21 view .LVU205
 166:armwave.c     **** 
 850              		.loc 1 166 21 view .LVU206
 168:armwave.c     ****                     g = MIN(gg, 255);
 851              		.loc 1 168 21 view .LVU207
 169:armwave.c     ****                     b = MIN(bb, 255);
 852              		.loc 1 169 21 view .LVU208
 170:armwave.c     **** 
 853              		.loc 1 170 21 view .LVU209
 173:armwave.c     **** 
 854              		.loc 1 173 21 view .LVU210
 855              	@ armwave.c:176:                     nsub = n + w;
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 856              		.loc 1 176 26 is_stmt 0 view .LVU211
 857 03f8 28C09DE5 		ldr	ip, [sp, #40]	@ n, %sfp
 858              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 859              		.loc 1 177 57 view .LVU212
 860 03fc 0A7A97ED 		vldr.32	s14, [r7, #40]	@ pretmp_169, g_armwave_state.vscale_frac
 861              	@ armwave.c:176:                     nsub = n + w;
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 862              		.loc 1 176 26 view .LVU213
 863 0400 0C5082E0 		add	r5, r2, ip	@ nsub, _53, n
 864              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 865              		.loc 1 165 52 view .LVU214
 866 0404 FE66D7E1 		ldrsh	r6, [r7, #110]	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 867              	.LVL48:
 868              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 869              		.loc 1 177 32 view .LVU215
 870 0408 7510EFE6 		uxtb	r1, r5	@ _36, nsub
 871              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 872              		.loc 1 178 41 view .LVU216
 873 040c 010081E2 		add	r0, r1, #1	@ tmp227, _36,
 874              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 875              		.loc 1 177 40 view .LVU217
 876 0410 901A07EE 		vmov	s15, r1	@ int	@ _36, _36
 877              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 878              		.loc 1 178 41 view .LVU218
 879 0414 900A06EE 		vmov	s13, r0	@ int	@ tmp227, tmp227
 880              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 881              		.loc 1 166 52 view .LVU219
 882 0418 F017D7E1 		ldrsh	r1, [r7, #112]	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 883              	.LVL49:
 884              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 885              		.loc 1 164 52 view .LVU220
 886 041c FC06D7E1 		ldrsh	r0, [r7, #108]	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 887              	.LVL50:
 888              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 889              		.loc 1 177 40 view .LVU221
 890 0420 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, _36
 891              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 892              		.loc 1 178 46 view .LVU222
 893 0424 E66AF8EE 		vcvt.f32.s32	s13, s13	@ tmp228, tmp227
 894              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 895              		.loc 1 166 55 view .LVU223
 896 0428 930101E0 		mul	r1, r3, r1	@ tmp207, value, g_armwave_state.ch1_color.b
 897              	.LVL51:
 898              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 899              		.loc 1 165 55 view .LVU224
 900 042c 930606E0 		mul	r6, r3, r6	@ tmp213, value, g_armwave_state.ch1_color.g
 901              	.LVL52:
 902              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 903              		.loc 1 166 24 view .LVU225
 904 0430 4114A0E1 		asr	r1, r1, #8	@ bb, tmp207,
 905              	.LVL53:
 906              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 907              		.loc 1 164 55 view .LVU226
 908 0434 930003E0 		mul	r3, r3, r0	@ tmp221, value, g_armwave_state.ch1_color.r
 909              	.LVL54:
 910              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 911              		.loc 1 177 40 view .LVU227
 912 0438 877A67EE 		vmul.f32	s15, s15, s14	@ tmp226, tmp225, pretmp_169
 913              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 914              		.loc 1 178 46 view .LVU228
 915 043c 876A66EE 		vmul.f32	s13, s13, s14	@ tmp229, tmp228, pretmp_169
 916              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 917              		.loc 1 165 24 view .LVU229
 918 0440 4664A0E1 		asr	r6, r6, #8	@ gg, tmp213,
 919              	.LVL55:
 920              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 921              		.loc 1 170 25 view .LVU230
 922 0444 FF0051E3 		cmp	r1, #255	@ bb,
 923 0448 FF10A0A3 		movge	r1, #255	@ bb,
 924              	.LVL56:
 925              	@ armwave.c:169:                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 926              		.loc 1 169 25 view .LVU231
 927 044c FF0056E3 		cmp	r6, #255	@ gg,
 928 0450 FF60A0A3 		movge	r6, #255	@ gg,
 929              	.LVL57:
 930              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 931              		.loc 1 164 24 view .LVU232
 932 0454 4334A0E1 		asr	r3, r3, #8	@ rr, tmp221,
 933              	.LVL58:
 934              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 935              		.loc 1 177 24 view .LVU233
 936 0458 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp226
 937              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 938              		.loc 1 178 24 view .LVU234
 939 045c E66AFCEE 		vcvt.u32.f32	s13, s13	@ ye, tmp229
 940              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 941              		.loc 1 168 25 view .LVU235
 942 0460 FF0053E3 		cmp	r3, #255	@ rr,
 943              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 944              		.loc 1 173 56 view .LVU236
 945 0464 0604A0E1 		lsl	r0, r6, #8	@ tmp214, gg,
 946              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 947              		.loc 1 168 25 view .LVU237
 948 0468 FF30A0A3 		movge	r3, #255	@ rr,
 949              	.LVL59:
 950              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 951              		.loc 1 173 44 view .LVU238
 952 046c 0168A0E1 		lsl	r6, r1, #16	@ tmp208, bb,
 953              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 954              		.loc 1 179 32 view .LVU239
 955 0470 4554A0E1 		asr	r5, r5, #8	@ tmp230, nsub,
 956              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 957              		.loc 1 173 44 view .LVU240
 958 0474 FF6806E2 		and	r6, r6, #16711680	@ tmp209, tmp208,
 959              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 960              		.loc 1 181 21 view .LVU241
 961 0478 904A17EE 		vmov	r4, s15	@ int	@ yy,
 962              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 963              		.loc 1 178 24 view .LVU242
 964 047c 90BA16EE 		vmov	fp, s13	@ int	@ ye, ye
 965              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 966              		.loc 1 173 56 view .LVU243
 967 0480 7010FFE6 		uxth	r1, r0	@ tmp215, tmp214
 968              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 969              		.loc 1 173 51 view .LVU244
 970 0484 016086E1 		orr	r6, r6, r1	@ tmp217, tmp209, tmp215
 971              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 972              		.loc 1 173 62 view .LVU245
 973 0488 7330EFE6 		uxtb	r3, r3	@ rr, rr
 974              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 975              		.loc 1 179 38 view .LVU246
 976 048c A55F85E0 		add	r5, r5, r5, lsr #31	@ tmp232, tmp230, tmp230,
 977              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 978              		.loc 1 173 62 view .LVU247
 979 0490 036086E1 		orr	r6, r6, r3	@ tmp223, tmp217, rr
 980              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 981              		.loc 1 181 21 view .LVU248
 982 0494 0B0054E1 		cmp	r4, fp	@ yy, ye
 983              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 984              		.loc 1 177 24 view .LVU249
 985 0498 097ACDED 		vstr.32	s15, [sp, #36]	@ int	@ yy, %sfp
 986              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 987              		.loc 1 173 26 view .LVU250
 988 049c FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp223,
 989              	.LVL60:
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 990              		.loc 1 176 21 is_stmt 1 view .LVU251
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 991              		.loc 1 177 21 view .LVU252
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 992              		.loc 1 178 21 view .LVU253
 179:armwave.c     **** 
 993              		.loc 1 179 21 view .LVU254
 994              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 995              		.loc 1 179 38 is_stmt 0 view .LVU255
 996 04a0 C550A0E1 		asr	r5, r5, #1	@ xx, tmp232,
 997              	.LVL61:
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 998              		.loc 1 181 21 is_stmt 1 view .LVU256
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 999              		.loc 1 181 21 is_stmt 0 view .LVU257
 1000 04a4 CBFFFF2A 		bcs	.L32		@,
 1001 04a8 2C908DE5 		str	r9, [sp, #44]	@ wave_word, %sfp
 1002 04ac 0C90A0E1 		mov	r9, ip	@ n, n
 1003              	.LVL62:
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1004              		.loc 1 181 21 view .LVU258
 1005 04b0 000000EA 		b	.L34		@
 1006              	.LVL63:
 1007              	.L33:
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1008              		.loc 1 181 21 view .LVU259
 1009 04b4 0A7A97ED 		vldr.32	s14, [r7, #40]	@ pretmp_169, g_armwave_state.vscale_frac
 1010              	.LVL64:
 1011              	.L34:
 182:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 1012              		.loc 1 182 25 is_stmt 1 discriminator 3 view .LVU260
 1013              	@ armwave.c:183:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 183:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1014              		.loc 1 183 25 is_stmt 0 discriminator 3 view .LVU261
 1015 04b8 C77AB7EE 		vcvt.f64.f32	d7, s14	@ tmp237, pretmp_169
 1016              	@ armwave.c:182:                         offset = (xx + (y * g_armwave_state.target_width)); 
 182:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 1017              		.loc 1 182 60 discriminator 3 view .LVU262
 1018 04bc 583097E5 		ldr	r3, [r7, #88]	@ _45, g_armwave_state.target_width
 1019              	@ armwave.c:183:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 183:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1020              		.loc 1 183 25 discriminator 3 view .LVU263
 1021 04c0 10028DE8 		stm	sp, {r4, r9}	@,,
 1022 04c4 08308DE5 		str	r3, [sp, #8]	@ _45,
 1023              	@ armwave.c:182:                         offset = (xx + (y * g_armwave_state.target_width)); 
 182:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 1024              		.loc 1 182 32 discriminator 3 view .LVU264
 1025 04c8 945328E0 		mla	r8, r4, r3, r5	@ offset, y, _45, xx
 1026              	.LVL65:
 183:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1027              		.loc 1 183 25 is_stmt 1 discriminator 3 view .LVU265
 1028 04cc 0A10A0E1 		mov	r1, r10	@, out_buffer
 1029              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1030              		.loc 1 181 42 is_stmt 0 discriminator 3 view .LVU266
 1031 04d0 014084E2 		add	r4, r4, #1	@ y, y,
 1032              	.LVL66:
 1033              	@ armwave.c:183:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 183:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1034              		.loc 1 183 25 discriminator 3 view .LVU267
 1035 04d4 0820A0E1 		mov	r2, r8	@, offset
 1036 04d8 047B8DED 		vstr.64	d7, [sp, #16]	@ tmp237,
 1037 04dc 0530A0E1 		mov	r3, r5	@, xx
 1038 04e0 60009FE5 		ldr	r0, .L49+20	@,
 1039 04e4 FEFFFFEB 		bl	printf		@
 1040              	.LVL67:
 184:armwave.c     ****                         painted++;
 1041              		.loc 1 184 25 is_stmt 1 discriminator 3 view .LVU268
 1042              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1043              		.loc 1 181 21 is_stmt 0 discriminator 3 view .LVU269
 1044 04e8 04005BE1 		cmp	fp, r4	@ ye, y
 1045              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 1046              		.loc 1 184 53 discriminator 3 view .LVU270
 1047 04ec 08618AE7 		str	r6, [r10, r8, lsl #2]	@ word, *_51
 185:armwave.c     ****                     }
 1048              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU271
 1049              	.LVL68:
 1050              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1051              		.loc 1 181 21 is_stmt 0 discriminator 3 view .LVU272
 1052 04f0 EFFFFF1A 		bne	.L33		@,
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1053              		.loc 1 181 21 discriminator 3 view .LVU273
 1054 04f4 24309DE5 		ldr	r3, [sp, #36]	@ yy, %sfp
 1055 04f8 34209DE5 		ldr	r2, [sp, #52]	@ _53, w
 1056              	.LVL69:
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1057              		.loc 1 181 21 discriminator 3 view .LVU274
 1058 04fc 03B04BE0 		sub	fp, fp, r3	@ tmp238, ye, yy
 1059              	.LVL70:
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1060              		.loc 1 181 21 discriminator 3 view .LVU275
 1061 0500 20309DE5 		ldr	r3, [sp, #32]	@ painted, %sfp
 1062              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 1063              		.loc 1 159 32 view .LVU276
 1064 0504 012082E2 		add	r2, r2, #1	@ _53, _53,
 1065 0508 0B3083E0 		add	r3, r3, fp	@ painted, painted, tmp238
 1066              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 1067              		.loc 1 159 13 view .LVU277
 1068 050c 010052E3 		cmp	r2, #1	@ _53,
 1069 0510 2C909DE5 		ldr	r9, [sp, #44]	@ wave_word, %sfp
 1070 0514 20308DE5 		str	r3, [sp, #32]	@ painted, %sfp
 1071              	.LVL71:
 1072              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 1073              		.loc 1 159 32 view .LVU278
 1074 0518 34208DE5 		str	r2, [sp, #52]	@ _53, w
 1075              	.LVL72:
 1076              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 1077              		.loc 1 159 13 view .LVU279
 1078 051c B1FFFFDA 		ble	.L35		@,
 1079              	.LVL73:
 1080              	.L48:
 159:armwave.c     ****                 value = wave_word & 0xffff;
 1081              		.loc 1 159 13 view .LVU280
 1082 0520 28B09DE5 		ldr	fp, [sp, #40]	@ n, %sfp
 1083 0524 9EFFFFEA 		b	.L31		@
 1084              	.LVL74:
 1085              	.L37:
 1086              	@ armwave.c:121:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 121:armwave.c     ****     // uint32_t ysub;
 1087              		.loc 1 121 46 view .LVU281
 1088 0528 0030A0E3 		mov	r3, #0	@ painted,
 1089 052c 20308DE5 		str	r3, [sp, #32]	@ painted, %sfp
 1090 0530 9FFFFFEA 		b	.L30		@
 1091              	.L50:
 1092              		.align	2
 1093              	.L49:
 1094 0534 00000000 		.word	g_armwave_state
 1095 0538 84000000 		.word	.LC4
 1096 053c 9C000000 		.word	.LC5
 1097 0540 FC000000 		.word	.LC6
 1098 0544 28010000 		.word	.LC8
 1099 0548 04010000 		.word	.LC7
 1100              		.cfi_endproc
 1101              	.LFE60:
 1103              		.global	__aeabi_idiv
 1104              		.align	2
 1105              		.global	armwave_generate
 1106              		.syntax unified
 1107              		.arm
 1108              		.fpu vfp
 1110              	armwave_generate:
 1111              	.LFB61:
 194:armwave.c     **** 
 195:armwave.c     **** /*
 196:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_generate()
 199:armwave.c     **** {
 1112              		.loc 1 199 1 is_stmt 1 view -0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     uint32_t yy;
 1116              		.loc 1 200 5 view .LVU283
 201:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 1117              		.loc 1 201 5 view .LVU284
 1118              	.LVL75:
 202:armwave.c     **** 
 203:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1119              		.loc 1 203 5 view .LVU285
 1120              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 1121              		.loc 1 199 1 is_stmt 0 view .LVU286
 1122 054c F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 1123              		.cfi_def_cfa_offset 20
 1124              		.cfi_offset 4, -20
 1125              		.cfi_offset 5, -16
 1126              		.cfi_offset 6, -12
 1127              		.cfi_offset 7, -8
 1128              		.cfi_offset 14, -4
 1129              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1130              		.loc 1 203 5 view .LVU287
 1131 0550 0010A0E3 		mov	r1, #0	@,
 1132              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1133              		.loc 1 203 58 view .LVU288
 1134 0554 84509FE5 		ldr	r5, .L59	@ tmp154,
 1135              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 1136              		.loc 1 199 1 view .LVU289
 1137 0558 0CD04DE2 		sub	sp, sp, #12	@,,
 1138              		.cfi_def_cfa_offset 32
 1139              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1140              		.loc 1 203 5 view .LVU290
 1141 055c 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 1142 0560 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 1143 0564 FEFFFFEB 		bl	memset		@
 1144              	.LVL76:
 204:armwave.c     **** 
 205:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 1145              		.loc 1 205 5 is_stmt 1 view .LVU291
 1146              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1147              		.loc 1 205 68 is_stmt 0 view .LVU292
 1148 0568 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1149              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1150              		.loc 1 205 51 view .LVU293
 1151 056c 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1152 0570 0610A0E1 		mov	r1, r6	@, _13
 1153 0574 FEFFFFEB 		bl	__aeabi_idiv		@
 1154              	.LVL77:
 1155              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1156              		.loc 1 205 5 view .LVU294
 1157 0578 000050E3 		cmp	r0, #0	@,
 1158 057c 1500000A 		beq	.L51		@,
 1159              	@ armwave.c:207:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 207:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 1160              		.loc 1 207 9 view .LVU295
 1161 0580 5C709FE5 		ldr	r7, .L59+4	@ tmp155,
 1162              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1163              		.loc 1 205 12 view .LVU296
 1164 0584 0040A0E3 		mov	r4, #0	@ yy,
 1165              	.LVL78:
 1166              	.L53:
 1167              		.loc 1 207 9 is_stmt 1 discriminator 3 view .LVU297
 1168 0588 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 1169              	@ armwave.c:209:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 209:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1170              		.loc 1 209 48 is_stmt 0 discriminator 3 view .LVU298
 1171 058c 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1172              	@ armwave.c:207:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1173              		.loc 1 207 9 discriminator 3 view .LVU299
 1174 0590 0630A0E1 		mov	r3, r6	@, _13
 1175 0594 0120A0E1 		mov	r2, r1	@, _5
 1176              	@ armwave.c:209:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1177              		.loc 1 209 48 discriminator 3 view .LVU300
 1178 0598 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 1179              	@ armwave.c:207:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1180              		.loc 1 207 9 discriminator 3 view .LVU301
 1181 059c 0700A0E1 		mov	r0, r7	@, tmp155
 1182 05a0 0410A0E1 		mov	r1, r4	@, yy
 1183 05a4 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 1184 05a8 00C08DE5 		str	ip, [sp]	@ tmp145,
 1185 05ac FEFFFFEB 		bl	printf		@
 1186              	.LVL79:
 210:armwave.c     **** 
 211:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1187              		.loc 1 211 9 is_stmt 1 discriminator 3 view .LVU302
 1188              	@ armwave.c:211:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1189              		.loc 1 211 62 is_stmt 0 discriminator 3 view .LVU303
 1190 05b0 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 1191              	@ armwave.c:211:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1192              		.loc 1 211 9 discriminator 3 view .LVU304
 1193 05b4 940100E0 		mul	r0, r4, r1	@, yy,
 1194 05b8 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1195              	.LVL80:
 212:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1196              		.loc 1 212 9 is_stmt 1 discriminator 3 view .LVU305
 213:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1197              		.loc 1 213 9 discriminator 3 view .LVU306
 1198              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1199              		.loc 1 205 68 is_stmt 0 discriminator 3 view .LVU307
 1200 05bc 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1201              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1202              		.loc 1 205 51 discriminator 3 view .LVU308
 1203 05c0 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1204 05c4 0610A0E1 		mov	r1, r6	@, _13
 1205 05c8 FEFFFFEB 		bl	__aeabi_idiv		@
 1206              	.LVL81:
 1207              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1208              		.loc 1 205 86 discriminator 3 view .LVU309
 1209 05cc 014084E2 		add	r4, r4, #1	@ yy, yy,
 1210              	.LVL82:
 1211              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1212              		.loc 1 205 5 discriminator 3 view .LVU310
 1213 05d0 040050E1 		cmp	r0, r4	@, yy
 1214 05d4 EBFFFF8A 		bhi	.L53		@,
 1215              	.LVL83:
 1216              	.L51:
 1217              	@ armwave.c:222: }
 214:armwave.c     ****     }
 215:armwave.c     **** 
 216:armwave.c     ****     /*
 217:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 218:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 219:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 220:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 221:armwave.c     ****     */
 222:armwave.c     **** }
 1218              		.loc 1 222 1 view .LVU311
 1219 05d8 0CD08DE2 		add	sp, sp, #12	@,,
 1220              		.cfi_def_cfa_offset 20
 1221              		@ sp needed	@
 1222 05dc F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1223              	.L60:
 1224              		.align	2
 1225              	.L59:
 1226 05e0 00000000 		.word	g_armwave_state
 1227 05e4 44010000 		.word	.LC9
 1228              		.cfi_endproc
 1229              	.LFE61:
 1231              		.align	2
 1232              		.global	armwave_setup_render
 1233              		.syntax unified
 1234              		.arm
 1235              		.fpu vfp
 1237              	armwave_setup_render:
 1238              	.LVL84:
 1239              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** /*
 225:armwave.c     ****  * Setup the renderer with passed parameters.
 226:armwave.c     ****  */
 227:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 228:armwave.c     **** {
 1240              		.loc 1 228 1 is_stmt 1 view -0
 1241              		.cfi_startproc
 1242              		@ args = 12, pretend = 0, frame = 0
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 229:armwave.c     ****     uint32_t length, xx;
 1244              		.loc 1 229 5 view .LVU313
 230:armwave.c     ****     float points_per_pixel;
 1245              		.loc 1 230 5 view .LVU314
 231:armwave.c     **** 
 232:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1246              		.loc 1 232 5 view .LVU315
 1247              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1248              		.loc 1 228 1 is_stmt 0 view .LVU316
 1249 05e8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1250              		.cfi_def_cfa_offset 28
 1251              		.cfi_offset 4, -28
 1252              		.cfi_offset 5, -24
 1253              		.cfi_offset 6, -20
 1254              		.cfi_offset 7, -16
 1255              		.cfi_offset 8, -12
 1256              		.cfi_offset 9, -8
 1257              		.cfi_offset 14, -4
 1258 05ec 14D04DE2 		sub	sp, sp, #20	@,,
 1259              		.cfi_def_cfa_offset 48
 1260              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1261              		.loc 1 228 1 view .LVU317
 1262 05f0 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1263 05f4 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1264 05f8 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1265 05fc 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1266              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1267              		.loc 1 232 5 view .LVU318
 1268 0600 00308DE5 		str	r3, [sp]	@ wave_stride,
 1269              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1270              		.loc 1 228 1 view .LVU319
 1271 0604 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1272 0608 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1273              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1274              		.loc 1 232 5 view .LVU320
 1275 060c F460CDE1 		strd	r6, [sp, #4]	@,,
 1276 0610 0230A0E1 		mov	r3, r2	@, waves_max
 1277              	.LVL85:
 1278              		.loc 1 232 5 view .LVU321
 1279 0614 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1280 0618 0120A0E1 		mov	r2, r1	@, end_point
 1281              	.LVL86:
 1282              		.loc 1 232 5 view .LVU322
 1283 061c 0010A0E1 		mov	r1, r0	@, start_point
 1284              	.LVL87:
 1285              		.loc 1 232 5 view .LVU323
 1286 0620 8C019FE5 		ldr	r0, .L71+12	@,
 1287              	.LVL88:
 1288              		.loc 1 232 5 view .LVU324
 1289 0624 FEFFFFEB 		bl	printf		@
 1290              	.LVL89:
 233:armwave.c     **** 
 234:armwave.c     ****     // TODO these asserts should instead raise PyExc
 235:armwave.c     ****     assert(start_point < end_point);
 1291              		.loc 1 235 5 is_stmt 1 view .LVU325
 1292 0628 050054E1 		cmp	r4, r5	@ start_point, end_point
 1293 062c 5100002A 		bcs	.L69		@,
 236:armwave.c     **** 
 237:armwave.c     ****     /*
 238:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 239:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 1294              		.loc 1 256 5 view .LVU326
 1295              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1296              		.loc 1 267 45 is_stmt 0 view .LVU327
 1297 0630 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1298              	.LVL90:
 1299              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1300              		.loc 1 271 48 view .LVU328
 1301 0634 5B5A9FED 		vldr.32	s10, .L71	@ tmp187,
 1302 0638 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1303              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1304              		.loc 1 257 49 view .LVU329
 1305 063c 5A7A9FED 		vldr.32	s14, .L71+4	@ tmp165,
 1306              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1307              		.loc 1 271 81 view .LVU330
 1308 0640 5A6A9FED 		vldr.32	s12, .L71+8	@ tmp191,
 1309              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1310              		.loc 1 264 90 view .LVU331
 1311 0644 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1312              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1313              		.loc 1 271 48 view .LVU332
 1314 0648 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1315              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1316              		.loc 1 257 49 view .LVU333
 1317 064c 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1318              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1319              		.loc 1 256 29 view .LVU334
 1320 0650 60419FE5 		ldr	r4, .L71+16	@ tmp222,
 1321              	.LVL91:
 1322              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1323              		.loc 1 262 42 view .LVU335
 1324 0654 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1325              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1326              		.loc 1 257 49 view .LVU336
 1327 0658 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1328              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1329              		.loc 1 264 95 view .LVU337
 1330 065c 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1331              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 272:armwave.c     **** 
 273:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1332              		.loc 1 273 5 view .LVU338
 1333 0660 0128A0E3 		mov	r2, #65536	@ tmp194,
 1334              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1335              		.loc 1 271 48 view .LVU339
 1336 0664 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1337              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1338              		.loc 1 273 5 view .LVU340
 1339 0668 04508DE5 		str	r5, [sp, #4]	@ _13,
 1340 066c 00608DE5 		str	r6, [sp]	@ target_width,
 1341              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1342              		.loc 1 264 95 view .LVU341
 1343 0670 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1344              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1345              		.loc 1 256 29 view .LVU342
 1346 0674 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1347              		.loc 1 257 5 is_stmt 1 view .LVU343
 1348              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1349              		.loc 1 259 33 is_stmt 0 view .LVU344
 1350 0678 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1351              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1352              		.loc 1 260 31 view .LVU345
 1353 067c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1354              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1355              		.loc 1 261 27 view .LVU346
 1356 0680 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1357              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1358              		.loc 1 266 35 view .LVU347
 1359 0684 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1360              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1361              		.loc 1 273 5 view .LVU348
 1362 0688 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1363              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1364              		.loc 1 263 37 view .LVU349
 1365 068c 022CA0E3 		mov	r2, #512	@ tmp175,
 1366              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1367              		.loc 1 262 26 view .LVU350
 1368 0690 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1369              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1370              		.loc 1 263 37 view .LVU351
 1371 0694 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1372              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1373              		.loc 1 273 5 view .LVU352
 1374 0698 0310A0E1 		mov	r1, r3	@, tmp180
 1375              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1376              		.loc 1 264 34 view .LVU353
 1377 069c 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1378              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1379              		.loc 1 257 49 view .LVU354
 1380 06a0 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1381              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1382              		.loc 1 271 40 view .LVU355
 1383 06a4 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1384              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 1385              		.loc 1 267 33 view .LVU356
 1386 06a8 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1387              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1388              		.loc 1 273 5 view .LVU357
 1389 06ac 08019FE5 		ldr	r0, .L71+20	@,
 1390              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1391              		.loc 1 271 40 view .LVU358
 1392 06b0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1393 06b4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1394              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1395              		.loc 1 258 30 view .LVU359
 1396 06b8 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1397              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1398              		.loc 1 257 33 view .LVU360
 1399 06bc 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1400              		.loc 1 258 5 is_stmt 1 view .LVU361
 1401              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1402              		.loc 1 271 81 is_stmt 0 view .LVU362
 1403 06c0 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1404              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1405              		.loc 1 258 30 view .LVU363
 1406 06c4 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1407              		.loc 1 259 5 is_stmt 1 view .LVU364
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1408              		.loc 1 260 5 view .LVU365
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1409              		.loc 1 261 5 view .LVU366
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1410              		.loc 1 262 5 view .LVU367
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1411              		.loc 1 263 5 view .LVU368
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1412              		.loc 1 264 5 view .LVU369
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 1413              		.loc 1 265 5 view .LVU370
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1414              		.loc 1 266 5 view .LVU371
 267:armwave.c     **** 
 1415              		.loc 1 267 5 view .LVU372
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1416              		.loc 1 270 5 view .LVU373
 1417              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1418              		.loc 1 270 42 is_stmt 0 view .LVU374
 1419 06c8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1420 06cc 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1421              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1422              		.loc 1 273 5 view .LVU375
 1423 06d0 903A17EE 		vmov	r3, s15	@ int	@, _20
 1424              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1425              		.loc 1 270 42 view .LVU376
 1426 06d4 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1427              		.loc 1 273 5 is_stmt 1 view .LVU377
 1428 06d8 0C20A0E1 		mov	r2, ip	@, tmp3
 1429 06dc FEFFFFEB 		bl	printf		@
 1430              	.LVL92:
 274:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 275:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 276:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 277:armwave.c     **** 
 278:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 279:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 280:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1431              		.loc 1 281 5 view .LVU378
 1432              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 282:armwave.c     **** 
 283:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1433              		.loc 1 283 23 is_stmt 0 view .LVU379
 1434 06e0 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1435              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1436              		.loc 1 281 34 view .LVU380
 1437 06e4 4030A0E3 		mov	r3, #64	@ tmp196,
 1438              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1439              		.loc 1 283 7 view .LVU381
 1440 06e8 000050E3 		cmp	r0, #0	@ _21,
 1441              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1442              		.loc 1 281 34 view .LVU382
 1443 06ec 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1444              		.loc 1 283 5 is_stmt 1 view .LVU383
 1445              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1446              		.loc 1 283 7 is_stmt 0 view .LVU384
 1447 06f0 0000000A 		beq	.L63		@,
 284:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1448              		.loc 1 284 9 is_stmt 1 view .LVU385
 1449 06f4 FEFFFFEB 		bl	free		@
 1450              	.LVL93:
 1451              	.L63:
 285:armwave.c     **** 
 286:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1452              		.loc 1 286 5 view .LVU386
 1453              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1454              		.loc 1 286 56 is_stmt 0 view .LVU387
 1455 06f8 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1456              	.LVL94:
 1457              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1458              		.loc 1 286 34 view .LVU388
 1459 06fc 0110A0E3 		mov	r1, #1	@,
 1460 0700 0800A0E1 		mov	r0, r8	@, _22
 1461 0704 FEFFFFEB 		bl	calloc		@
 1462              	.LVL95:
 1463              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 287:armwave.c     **** 
 288:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1464              		.loc 1 288 7 view .LVU389
 1465 0708 000050E3 		cmp	r0, #0	@ tmp199,
 1466              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1467              		.loc 1 286 34 view .LVU390
 1468 070c 0070A0E1 		mov	r7, r0	@ tmp199,
 1469              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1470              		.loc 1 286 32 view .LVU391
 1471 0710 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1472              		.loc 1 288 5 is_stmt 1 view .LVU392
 1473              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 1474              		.loc 1 288 7 is_stmt 0 view .LVU393
 1475 0714 1C00000A 		beq	.L70		@,
 289:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 290:armwave.c     ****         exit(-1);
 291:armwave.c     ****     }
 292:armwave.c     **** 
 293:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 294:armwave.c     ****     length = end_point - start_point;
 1476              		.loc 1 294 5 is_stmt 1 view .LVU394
 1477              	.LVL96:
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1478              		.loc 1 295 5 view .LVU395
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1479              		.loc 1 296 5 view .LVU396
 1480              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1481              		.loc 1 295 31 is_stmt 0 view .LVU397
 1482 0718 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1483              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1484              		.loc 1 295 34 view .LVU398
 1485 071c 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1486              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1487              		.loc 1 296 60 view .LVU399
 1488 0720 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1489              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     **** 
 301:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305:armwave.c     **** 
 306:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 307:armwave.c     ****     }
 308:armwave.c     ****     */
 309:armwave.c     **** 
 310:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1490              		.loc 1 310 34 view .LVU400
 1491 0724 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1492              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1493              		.loc 1 295 31 view .LVU401
 1494 0728 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1495              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1496              		.loc 1 295 34 view .LVU402
 1497 072c 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1498              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1499              		.loc 1 296 60 view .LVU403
 1500 0730 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1501              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1502              		.loc 1 310 34 view .LVU404
 1503 0734 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1504              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1505              		.loc 1 295 22 view .LVU405
 1506 0738 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1507              	.LVL97:
 1508              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1509              		.loc 1 296 60 view .LVU406
 1510 073c 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1511              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1512              		.loc 1 296 41 view .LVU407
 1513 0740 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1514 0744 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1515              		.loc 1 310 5 is_stmt 1 view .LVU408
 1516              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1517              		.loc 1 310 34 is_stmt 0 view .LVU409
 1518 0748 FEFFFFEB 		bl	malloc		@
 1519              	.LVL98:
 1520              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1521              		.loc 1 312 5 view .LVU410
 1522 074c 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1523 0750 0710A0E1 		mov	r1, r7	@, tmp199
 1524 0754 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1525 0758 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1526              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1527              		.loc 1 310 34 view .LVU411
 1528 075c 00C0A0E1 		mov	ip, r0	@ tmp215,
 1529              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1530              		.loc 1 312 5 view .LVU412
 1531 0760 0030A0E1 		mov	r3, r0	@, tmp215
 1532              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1533              		.loc 1 310 32 view .LVU413
 1534 0764 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1535              		.loc 1 312 5 is_stmt 1 view .LVU414
 1536 0768 50009FE5 		ldr	r0, .L71+24	@,
 1537              	@ armwave.c:319: }
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 317:armwave.c     **** 
 318:armwave.c     ****      //malloc_stats();
 319:armwave.c     **** }
 1538              		.loc 1 319 1 is_stmt 0 view .LVU415
 1539 076c 14D08DE2 		add	sp, sp, #20	@,,
 1540              		.cfi_remember_state
 1541              		.cfi_def_cfa_offset 28
 1542              		@ sp needed	@
 1543 0770 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1544              		.cfi_restore 14
 1545              		.cfi_restore 9
 1546              		.cfi_restore 8
 1547              		.cfi_restore 7
 1548              		.cfi_restore 6
 1549              		.cfi_restore 5
 1550              		.cfi_restore 4
 1551              		.cfi_def_cfa_offset 0
 1552              	.LVL99:
 1553              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1554              		.loc 1 312 5 view .LVU416
 1555 0774 FEFFFFEA 		b	printf		@
 1556              	.LVL100:
 1557              	.L69:
 1558              		.cfi_restore_state
 235:armwave.c     **** 
 1559              		.loc 1 235 5 is_stmt 1 discriminator 1 view .LVU417
 1560 0778 44309FE5 		ldr	r3, .L71+28	@,
 1561 077c EB20A0E3 		mov	r2, #235	@,
 1562 0780 40109FE5 		ldr	r1, .L71+32	@,
 1563 0784 40009FE5 		ldr	r0, .L71+36	@,
 1564 0788 FEFFFFEB 		bl	__assert_fail		@
 1565              	.LVL101:
 1566              	.L70:
 289:armwave.c     ****         exit(-1);
 1567              		.loc 1 289 9 view .LVU418
 1568 078c 3C309FE5 		ldr	r3, .L71+40	@ tmp202,
 1569 0790 0820A0E1 		mov	r2, r8	@, _22
 1570 0794 38109FE5 		ldr	r1, .L71+44	@,
 1571 0798 000093E5 		ldr	r0, [r3]	@, stderr
 1572 079c FEFFFFEB 		bl	fprintf		@
 1573              	.LVL102:
 290:armwave.c     ****     }
 1574              		.loc 1 290 9 view .LVU419
 1575 07a0 0000E0E3 		mvn	r0, #0	@,
 1576 07a4 FEFFFFEB 		bl	exit		@
 1577              	.LVL103:
 1578              	.L72:
 1579              		.align	2
 1580              	.L71:
 1581 07a8 0000803F 		.word	1065353216
 1582 07ac 00007F43 		.word	1132396544
 1583 07b0 00008047 		.word	1199570944
 1584 07b4 78010000 		.word	.LC10
 1585 07b8 00000000 		.word	g_armwave_state
 1586 07bc C8010000 		.word	.LC13
 1587 07c0 6C020000 		.word	.LC15
 1588 07c4 00000000 		.word	.LANCHOR0
 1589 07c8 A4010000 		.word	.LC11
 1590 07cc B0010000 		.word	.LC12
 1591 07d0 00000000 		.word	stderr
 1592 07d4 28020000 		.word	.LC14
 1593              		.cfi_endproc
 1594              	.LFE62:
 1596              		.align	2
 1597              		.global	armwave_set_wave_pointer
 1598              		.syntax unified
 1599              		.arm
 1600              		.fpu vfp
 1602              	armwave_set_wave_pointer:
 1603              	.LVL104:
 1604              	.LFB63:
 320:armwave.c     **** 
 321:armwave.c     **** /*
 322:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 323:armwave.c     ****  * in the future.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 326:armwave.c     **** {
 1605              		.loc 1 326 1 view -0
 1606              		.cfi_startproc
 1607              		@ args = 0, pretend = 0, frame = 0
 1608              		@ frame_needed = 0, uses_anonymous_args = 0
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1609              		.loc 1 327 5 view .LVU421
 1610 07d8 000050E3 		cmp	r0, #0	@ wave_buffer
 1611              		.loc 1 327 5 is_stmt 0 view .LVU422
 1612 07dc 0200000A 		beq	.L78		@,
 328:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1613              		.loc 1 328 5 is_stmt 1 view .LVU423
 1614              	@ armwave.c:328:     g_armwave_state.wave_buffer = wave_buffer;
 1615              		.loc 1 328 33 is_stmt 0 view .LVU424
 1616 07e0 1C309FE5 		ldr	r3, .L79	@ tmp116,
 1617 07e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1618 07e8 1EFF2FE1 		bx	lr	@
 1619              	.L78:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1620              		.loc 1 327 5 is_stmt 1 discriminator 1 view .LVU425
 1621              	@ armwave.c:326: {
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1622              		.loc 1 326 1 is_stmt 0 discriminator 1 view .LVU426
 1623 07ec 10402DE9 		push	{r4, lr}	@
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 4, -8
 1626              		.cfi_offset 14, -4
 1627              	@ armwave.c:327:     assert(wave_buffer != NULL);
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1628              		.loc 1 327 5 discriminator 1 view .LVU427
 1629 07f0 10309FE5 		ldr	r3, .L79+4	@,
 1630 07f4 10209FE5 		ldr	r2, .L79+8	@,
 1631 07f8 10109FE5 		ldr	r1, .L79+12	@,
 1632 07fc 10009FE5 		ldr	r0, .L79+16	@,
 1633              	.LVL105:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1634              		.loc 1 327 5 discriminator 1 view .LVU428
 1635 0800 FEFFFFEB 		bl	__assert_fail		@
 1636              	.LVL106:
 1637              	.L80:
 1638              		.align	2
 1639              	.L79:
 1640 0804 00000000 		.word	g_armwave_state
 1641 0808 18000000 		.word	.LANCHOR0+24
 1642 080c 47010000 		.word	327
 1643 0810 A4010000 		.word	.LC11
 1644 0814 90020000 		.word	.LC16
 1645              		.cfi_endproc
 1646              	.LFE63:
 1648              		.align	2
 1649              		.global	armwave_set_wave_pointer_as_testbuf
 1650              		.syntax unified
 1651              		.arm
 1652              		.fpu vfp
 1654              	armwave_set_wave_pointer_as_testbuf:
 1655              	.LVL107:
 1656              	.LFB64:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 333:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 334:armwave.c     ****  */
 335:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 336:armwave.c     **** {
 1657              		.loc 1 336 1 is_stmt 1 view -0
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 0
 1660              		@ frame_needed = 0, uses_anonymous_args = 0
 1661              		@ link register save eliminated.
 337:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1662              		.loc 1 337 5 view .LVU430
 1663              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1664              		.loc 1 337 29 is_stmt 0 view .LVU431
 1665 0818 24309FE5 		ldr	r3, .L84	@ tmp117,
 1666              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1667              		.loc 1 337 7 view .LVU432
 1668 081c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1669 0820 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1670 0824 0400003A 		bcc	.L83		@,
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 339:armwave.c     ****         return;
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1671              		.loc 1 342 5 is_stmt 1 view .LVU433
 1672              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1673              		.loc 1 342 111 is_stmt 0 view .LVU434
 1674 0828 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1675              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1676              		.loc 1 342 68 view .LVU435
 1677 082c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1678 0830 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1679              	.LVL108:
 1680              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1681              		.loc 1 342 33 view .LVU436
 1682 0834 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1683              	@ armwave.c:343: }
 343:armwave.c     **** }
 1684              		.loc 1 343 1 view .LVU437
 1685 0838 1EFF2FE1 		bx	lr	@
 1686              	.LVL109:
 1687              	.L83:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1688              		.loc 1 338 9 is_stmt 1 view .LVU438
 1689 083c 04009FE5 		ldr	r0, .L84+4	@,
 1690              	.LVL110:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1691              		.loc 1 338 9 is_stmt 0 view .LVU439
 1692 0840 FEFFFFEA 		b	puts		@
 1693              	.LVL111:
 1694              	.L85:
 1695              		.align	2
 1696              	.L84:
 1697 0844 00000000 		.word	g_armwave_state
 1698 0848 A4020000 		.word	.LC17
 1699              		.cfi_endproc
 1700              	.LFE64:
 1702              		.align	2
 1703              		.global	armwave_set_wave_pointer_u32
 1704              		.syntax unified
 1705              		.arm
 1706              		.fpu vfp
 1708              	armwave_set_wave_pointer_u32:
 1709              	.LVL112:
 1710              	.LFB65:
 344:armwave.c     **** 
 345:armwave.c     **** /*
 346:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 347:armwave.c     ****  * disjointed buffers in the future.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 350:armwave.c     **** {
 1711              		.loc 1 350 1 is_stmt 1 view -0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 0
 1714              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1715              		.loc 1 351 5 view .LVU441
 1716 084c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1717              		.loc 1 351 5 is_stmt 0 view .LVU442
 1718 0850 0200000A 		beq	.L91		@,
 352:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1719              		.loc 1 352 5 is_stmt 1 view .LVU443
 1720              	@ armwave.c:352:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1721              		.loc 1 352 33 is_stmt 0 view .LVU444
 1722 0854 1C309FE5 		ldr	r3, .L92	@ tmp117,
 1723 0858 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1724 085c 1EFF2FE1 		bx	lr	@
 1725              	.L91:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1726              		.loc 1 351 5 is_stmt 1 discriminator 1 view .LVU445
 1727              	@ armwave.c:350: {
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1728              		.loc 1 350 1 is_stmt 0 discriminator 1 view .LVU446
 1729 0860 10402DE9 		push	{r4, lr}	@
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 4, -8
 1732              		.cfi_offset 14, -4
 1733              	@ armwave.c:351:     assert(wave_buffer_ptr != 0);
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1734              		.loc 1 351 5 discriminator 1 view .LVU447
 1735 0864 10309FE5 		ldr	r3, .L92+4	@,
 1736 0868 10209FE5 		ldr	r2, .L92+8	@,
 1737 086c 10109FE5 		ldr	r1, .L92+12	@,
 1738 0870 10009FE5 		ldr	r0, .L92+16	@,
 1739              	.LVL113:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1740              		.loc 1 351 5 discriminator 1 view .LVU448
 1741 0874 FEFFFFEB 		bl	__assert_fail		@
 1742              	.LVL114:
 1743              	.L93:
 1744              		.align	2
 1745              	.L92:
 1746 0878 00000000 		.word	g_armwave_state
 1747 087c 34000000 		.word	.LANCHOR0+52
 1748 0880 5F010000 		.word	351
 1749 0884 A4010000 		.word	.LC11
 1750 0888 E0020000 		.word	.LC18
 1751              		.cfi_endproc
 1752              	.LFE65:
 1754              		.align	2
 1755              		.global	armwave_clear_buffer
 1756              		.syntax unified
 1757              		.arm
 1758              		.fpu vfp
 1760              	armwave_clear_buffer:
 1761              	.LVL115:
 1762              	.LFB66:
 353:armwave.c     **** }
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 359:armwave.c     **** {
 1763              		.loc 1 359 1 is_stmt 1 view -0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 360:armwave.c     ****     // Flags ignored, only one buffer cleared
 361:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1768              		.loc 1 361 5 view .LVU450
 1769              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1770              		.loc 1 361 58 is_stmt 0 view .LVU451
 1771 088c 0C309FE5 		ldr	r3, .L95	@ tmp114,
 1772              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1773              		.loc 1 361 5 view .LVU452
 1774 0890 0010A0E3 		mov	r1, #0	@,
 1775 0894 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1776 0898 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1777              	.LVL116:
 1778              		.loc 1 361 5 view .LVU453
 1779 089c FEFFFFEA 		b	memset		@
 1780              	.LVL117:
 1781              	.L96:
 1782              		.align	2
 1783              	.L95:
 1784 08a0 00000000 		.word	g_armwave_state
 1785              		.cfi_endproc
 1786              	.LFE66:
 1788              		.align	2
 1789              		.global	armwave_set_channel_colour
 1790              		.syntax unified
 1791              		.arm
 1792              		.fpu vfp
 1794              	armwave_set_channel_colour:
 1795              	.LVL118:
 1796              	.LFB67:
 362:armwave.c     **** }
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 368:armwave.c     **** {
 1797              		.loc 1 368 1 is_stmt 1 view -0
 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 0
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 1801              		@ link register save eliminated.
 369:armwave.c     ****     // Only 1ch supported for now
 370:armwave.c     ****     switch(ch) {
 1802              		.loc 1 370 5 view .LVU455
 1803 08a4 010050E3 		cmp	r0, #1	@ ch,
 371:armwave.c     ****         case 1:
 372:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1804              		.loc 1 372 13 view .LVU456
 1805              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 1806              		.loc 1 372 41 is_stmt 0 view .LVU457
 1807 08a8 0C009F05 		ldreq	r0, .L99	@ tmp117,
 1808              	.LVL119:
 1809              		.loc 1 372 41 view .LVU458
 1810 08ac BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1811              		.loc 1 373 13 is_stmt 1 view .LVU459
 1812              	@ armwave.c:373:             g_armwave_state.ch1_color.g = g;
 1813              		.loc 1 373 41 is_stmt 0 view .LVU460
 1814 08b0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1815              		.loc 1 374 13 is_stmt 1 view .LVU461
 1816              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 1817              		.loc 1 374 41 is_stmt 0 view .LVU462
 1818 08b4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 375:armwave.c     ****             break;
 1819              		.loc 1 375 13 is_stmt 1 view .LVU463
 1820              	@ armwave.c:377: }
 376:armwave.c     ****     }
 377:armwave.c     **** }
 1821              		.loc 1 377 1 is_stmt 0 view .LVU464
 1822 08b8 1EFF2FE1 		bx	lr	@
 1823              	.L100:
 1824              		.align	2
 1825              	.L99:
 1826 08bc 00000000 		.word	g_armwave_state
 1827              		.cfi_endproc
 1828              	.LFE67:
 1830              		.align	2
 1831              		.global	armwave_dump_ppm_debug
 1832              		.syntax unified
 1833              		.arm
 1834              		.fpu vfp
 1836              	armwave_dump_ppm_debug:
 1837              	.LVL120:
 1838              	.LFB68:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Dump a ppm of a buffer to a file.
 381:armwave.c     ****  */
 382:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 383:armwave.c     **** {
 1839              		.loc 1 383 1 is_stmt 1 view -0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1843              		.loc 1 384 5 view .LVU466
 1844              	@ armwave.c:383: {
 383:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1845              		.loc 1 383 1 is_stmt 0 view .LVU467
 1846 08c0 0130A0E1 		mov	r3, r1	@ fn, fn
 1847 08c4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1848              		.cfi_def_cfa_offset 28
 1849              		.cfi_offset 4, -28
 1850              		.cfi_offset 5, -24
 1851              		.cfi_offset 6, -20
 1852              		.cfi_offset 7, -16
 1853              		.cfi_offset 8, -12
 1854              		.cfi_offset 9, -8
 1855              		.cfi_offset 14, -4
 1856 08c8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1857 08cc 0CD04DE2 		sub	sp, sp, #12	@,,
 1858              		.cfi_def_cfa_offset 40
 1859              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 1860              		.loc 1 384 16 view .LVU468
 1861 08d0 C4109FE5 		ldr	r1, .L109	@,
 1862              	.LVL121:
 1863              		.loc 1 384 16 view .LVU469
 1864 08d4 0300A0E1 		mov	r0, r3	@, fn
 1865              	.LVL122:
 1866              		.loc 1 384 16 view .LVU470
 1867 08d8 FEFFFFEB 		bl	fopen64		@
 1868              	.LVL123:
 1869              	@ armwave.c:391:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 385:armwave.c     ****     uint32_t data;
 386:armwave.c     ****     int xx, yy;
 387:armwave.c     **** 
 388:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 389:armwave.c     **** 
 390:armwave.c     ****     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1870              		.loc 1 391 5 view .LVU471
 1871 08dc BC609FE5 		ldr	r6, .L109+4	@ tmp150,
 1872              	@ armwave.c:390:     fputs("P3\n", fp);
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1873              		.loc 1 390 5 view .LVU472
 1874 08e0 0320A0E3 		mov	r2, #3	@,
 1875 08e4 0110A0E3 		mov	r1, #1	@,
 1876              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 384:armwave.c     ****     uint32_t data;
 1877              		.loc 1 384 16 view .LVU473
 1878 08e8 0070A0E1 		mov	r7, r0	@ fp,
 1879              	.LVL124:
 385:armwave.c     ****     uint32_t data;
 1880              		.loc 1 385 5 is_stmt 1 view .LVU474
 386:armwave.c     **** 
 1881              		.loc 1 386 5 view .LVU475
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1882              		.loc 1 390 5 view .LVU476
 1883 08ec 0030A0E1 		mov	r3, r0	@, fp
 1884 08f0 AC009FE5 		ldr	r0, .L109+8	@,
 1885              	.LVL125:
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1886              		.loc 1 390 5 is_stmt 0 view .LVU477
 1887 08f4 FEFFFFEB 		bl	fwrite		@
 1888              	.LVL126:
 1889              		.loc 1 391 5 is_stmt 1 view .LVU478
 1890 08f8 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1891 08fc A4109FE5 		ldr	r1, .L109+12	@,
 1892 0900 0700A0E1 		mov	r0, r7	@, fp
 1893 0904 FEFFFFEB 		bl	fprintf		@
 1894              	.LVL127:
 392:armwave.c     ****     fputs("255\n", fp);
 1895              		.loc 1 392 5 view .LVU479
 1896 0908 0420A0E3 		mov	r2, #4	@,
 1897 090c 0730A0E1 		mov	r3, r7	@, fp
 1898 0910 0110A0E3 		mov	r1, #1	@,
 1899 0914 90009FE5 		ldr	r0, .L109+16	@,
 1900 0918 FEFFFFEB 		bl	fwrite		@
 1901              	.LVL128:
 393:armwave.c     **** 
 394:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1902              		.loc 1 394 5 view .LVU480
 1903              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1904              		.loc 1 394 37 is_stmt 0 view .LVU481
 1905 091c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1906              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1907              		.loc 1 394 5 view .LVU482
 1908 0920 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1909 0924 180000DA 		ble	.L102		@,
 1910 0928 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1911              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 398:armwave.c     **** 
 399:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1912              		.loc 1 399 13 view .LVU483
 1913 092c 7C909FE5 		ldr	r9, .L109+20	@ tmp152,
 1914              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1915              		.loc 1 394 12 view .LVU484
 1916 0930 0050A0E3 		mov	r5, #0	@ yy,
 1917              	.LVL129:
 1918              	.L103:
 1919              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1920              		.loc 1 395 9 view .LVU485
 1921 0934 000053E3 		cmp	r3, #0	@ _13,
 1922              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1923              		.loc 1 395 16 view .LVU486
 1924 0938 0040A0C3 		movgt	r4, #0	@ xx,
 1925              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1926              		.loc 1 395 9 view .LVU487
 1927 093c 0F0000DA 		ble	.L105		@,
 1928              	.LVL130:
 1929              	.L104:
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1930              		.loc 1 396 13 is_stmt 1 discriminator 3 view .LVU488
 1931              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1932              		.loc 1 396 29 is_stmt 0 discriminator 3 view .LVU489
 1933 0940 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1934              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1935              		.loc 1 399 13 discriminator 3 view .LVU490
 1936 0944 0910A0E1 		mov	r1, r9	@, tmp152
 1937 0948 0700A0E1 		mov	r0, r7	@, fp
 1938              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1939              		.loc 1 396 18 discriminator 3 view .LVU491
 1940 094c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1941              	.LVL131:
 1942              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU492
 1943              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1944              		.loc 1 395 58 is_stmt 0 discriminator 3 view .LVU493
 1945 0950 014084E2 		add	r4, r4, #1	@ xx, xx,
 1946              	.LVL132:
 1947              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1948              		.loc 1 399 81 discriminator 3 view .LVU494
 1949 0954 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1950              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1951              		.loc 1 399 61 discriminator 3 view .LVU495
 1952 0958 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1953              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1954              		.loc 1 399 13 discriminator 3 view .LVU496
 1955 095c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1956 0960 7330EFE6 		uxtb	r3, r3	@, tmp142
 1957 0964 00C08DE5 		str	ip, [sp]	@ tmp147,
 1958 0968 7220EFE6 		uxtb	r2, r2	@, data
 1959              	.LVL133:
 1960              		.loc 1 399 13 discriminator 3 view .LVU497
 1961 096c FEFFFFEB 		bl	fprintf		@
 1962              	.LVL134:
 1963              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1964              		.loc 1 395 41 discriminator 3 view .LVU498
 1965 0970 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1966              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1967              		.loc 1 395 9 discriminator 3 view .LVU499
 1968 0974 040053E1 		cmp	r3, r4	@ _13, xx
 1969 0978 F0FFFFCA 		bgt	.L104		@,
 1970 097c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1971              	.LVL135:
 1972              	.L105:
 1973              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1974              		.loc 1 394 55 discriminator 2 view .LVU500
 1975 0980 015085E2 		add	r5, r5, #1	@ yy, yy,
 1976              	.LVL136:
 1977              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1978              		.loc 1 394 5 discriminator 2 view .LVU501
 1979 0984 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1980 0988 E9FFFFBA 		blt	.L103		@,
 1981              	.LVL137:
 1982              	.L102:
 400:armwave.c     ****         }
 401:armwave.c     ****     }
 402:armwave.c     **** 
 403:armwave.c     ****     fclose(fp);
 1983              		.loc 1 403 5 is_stmt 1 view .LVU502
 1984 098c 0700A0E1 		mov	r0, r7	@, fp
 1985              	@ armwave.c:404: }
 404:armwave.c     **** }
 1986              		.loc 1 404 1 is_stmt 0 view .LVU503
 1987 0990 0CD08DE2 		add	sp, sp, #12	@,,
 1988              		.cfi_def_cfa_offset 28
 1989              		@ sp needed	@
 1990 0994 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1991              		.cfi_restore 14
 1992              		.cfi_restore 9
 1993              		.cfi_restore 8
 1994              		.cfi_restore 7
 1995              		.cfi_restore 6
 1996              		.cfi_restore 5
 1997              		.cfi_restore 4
 1998              		.cfi_def_cfa_offset 0
 1999              	.LVL138:
 2000              	@ armwave.c:403:     fclose(fp);
 403:armwave.c     **** }
 2001              		.loc 1 403 5 view .LVU504
 2002 0998 FEFFFFEA 		b	fclose		@
 2003              	.LVL139:
 2004              	.L110:
 403:armwave.c     **** }
 2005              		.loc 1 403 5 view .LVU505
 2006              		.align	2
 2007              	.L109:
 2008 099c F8020000 		.word	.LC19
 2009 09a0 00000000 		.word	g_armwave_state
 2010 09a4 FC020000 		.word	.LC20
 2011 09a8 00030000 		.word	.LC21
 2012 09ac 08030000 		.word	.LC22
 2013 09b0 10030000 		.word	.LC23
 2014              		.cfi_endproc
 2015              	.LFE68:
 2017              		.align	2
 2018              		.global	armwave_test_init
 2019              		.syntax unified
 2020              		.arm
 2021              		.fpu vfp
 2023              	armwave_test_init:
 2024              	.LVL140:
 2025              	.LFB69:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Initialise some test functionry.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 410:armwave.c     **** {
 2026              		.loc 1 410 1 is_stmt 1 view -0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 411:armwave.c     ****     test_create_gamma();
 2030              		.loc 1 411 5 view .LVU507
 2031              	.LBB12:
 2032              	.LBI12:
  34:armwave.c     **** {
 2033              		.loc 1 34 6 view .LVU508
  34:armwave.c     **** {
 2034              		.loc 1 34 6 is_stmt 0 view .LVU509
 2035              	.LBE12:
 2036              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2037              		.loc 1 410 1 view .LVU510
 2038 09b4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2039              		.cfi_def_cfa_offset 32
 2040              		.cfi_offset 4, -32
 2041              		.cfi_offset 5, -28
 2042              		.cfi_offset 6, -24
 2043              		.cfi_offset 7, -20
 2044              		.cfi_offset 8, -16
 2045              		.cfi_offset 9, -12
 2046              		.cfi_offset 10, -8
 2047              		.cfi_offset 14, -4
 2048 09b8 068B2DED 		vpush.64	{d8, d9, d10}	@
 2049              		.cfi_def_cfa_offset 56
 2050              		.cfi_offset 80, -56
 2051              		.cfi_offset 81, -52
 2052              		.cfi_offset 82, -48
 2053              		.cfi_offset 83, -44
 2054              		.cfi_offset 84, -40
 2055              		.cfi_offset 85, -36
 2056 09bc C0409FE5 		ldr	r4, .L115+20	@ ivtmp.82,
 2057              	.LBB15:
 2058              	.LBB13:
 2059              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2060              		.loc 1 40 32 view .LVU511
 2061 09c0 2EAA9FED 		vldr.32	s20, .L115+16	@ tmp136,
 2062              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2063              		.loc 1 40 26 view .LVU512
 2064 09c4 299B9FED 		vldr.64	d9, .L115	@ tmp151,
 2065              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2066              		.loc 1 40 49 view .LVU513
 2067 09c8 2A8B9FED 		vldr.64	d8, .L115+8	@ tmp139,
 2068 09cc 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 2069              	.LBE13:
 2070              	.LBE15:
 2071              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2072              		.loc 1 410 1 view .LVU514
 2073 09d0 10D04DE2 		sub	sp, sp, #16	@,,
 2074              		.cfi_def_cfa_offset 72
 2075              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2076              		.loc 1 410 1 view .LVU515
 2077 09d4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2078 09d8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2079 09dc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2080 09e0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2081 09e4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 2082 09e8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2083              	.LVL141:
 2084              	.L112:
 2085              	.LBB16:
 2086              	.LBB14:
  40:armwave.c     ****     }
 2087              		.loc 1 40 9 is_stmt 1 view .LVU516
 2088              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2089              		.loc 1 40 32 is_stmt 0 view .LVU517
 2090 09ec 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 2091              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2092              		.loc 1 40 26 view .LVU518
 2093 09f0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2094              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2095              		.loc 1 40 32 view .LVU519
 2096 09f4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2097 09f8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2098 09fc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2099              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2100              		.loc 1 40 26 view .LVU520
 2101 0a00 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2102 0a04 FEFFFFEB 		bl	pow		@
 2103              	.LVL142:
 2104              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2105              		.loc 1 40 49 view .LVU521
 2106 0a08 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2107              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2108              		.loc 1 40 24 view .LVU522
 2109 0a0c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2110 0a10 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2111 0a14 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2112              	.LVL143:
 2113              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2114              		.loc 1 39 5 view .LVU523
 2115 0a18 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 2116 0a1c F2FFFF1A 		bne	.L112		@,
 2117              	.LVL144:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2118              		.loc 1 39 5 view .LVU524
 2119              	.LBE14:
 2120              	.LBE16:
 412:armwave.c     **** 
 413:armwave.c     ****     // make ch1 yellowish by default
 414:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2121              		.loc 1 414 5 is_stmt 1 view .LVU525
 2122              	.LBB17:
 2123              	.LBI17:
 367:armwave.c     **** {
 2124              		.loc 1 367 6 view .LVU526
 2125              	.LBB18:
 370:armwave.c     ****         case 1:
 2126              		.loc 1 370 5 view .LVU527
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2127              		.loc 1 372 13 view .LVU528
 373:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2128              		.loc 1 373 13 view .LVU529
 2129              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2130              		.loc 1 372 41 is_stmt 0 view .LVU530
 2131 0a20 60C09FE5 		ldr	ip, .L115+24	@ tmp142,
 2132 0a24 60409FE5 		ldr	r4, .L115+28	@ tmp143,
 2133              	.LBE18:
 2134              	.LBE17:
 2135              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 415:armwave.c     **** 
 416:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2136              		.loc 1 416 5 view .LVU531
 2137 0a28 0000A0E3 		mov	r0, #0	@ tmp147,
 2138              	.LBB22:
 2139              	.LBB19:
 2140              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2141              		.loc 1 374 41 view .LVU532
 2142 0a2c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2143              	.LBE19:
 2144              	.LBE22:
 2145              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2146              		.loc 1 416 5 view .LVU533
 2147 0a30 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2148 0a34 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2149 0a38 00808DE5 		str	r8, [sp]	@ render_width,
 2150 0a3c 0610A0E1 		mov	r1, r6	@, tmp3
 2151 0a40 0720A0E1 		mov	r2, r7	@, nwaves
 2152              	.LBB23:
 2153              	.LBB20:
 2154              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2155              		.loc 1 372 41 view .LVU534
 2156 0a44 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 374:armwave.c     ****             break;
 2157              		.loc 1 374 13 is_stmt 1 view .LVU535
 2158              	.LBE20:
 2159              	.LBE23:
 2160              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2161              		.loc 1 416 5 is_stmt 0 view .LVU536
 2162 0a48 0630A0E1 		mov	r3, r6	@, wave_size
 2163              	.LBB24:
 2164              	.LBB21:
 2165              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2166              		.loc 1 374 41 view .LVU537
 2167 0a4c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 375:armwave.c     ****     }
 2168              		.loc 1 375 13 is_stmt 1 view .LVU538
 2169              	.LVL145:
 375:armwave.c     ****     }
 2170              		.loc 1 375 13 is_stmt 0 view .LVU539
 2171              	.LBE21:
 2172              	.LBE24:
 2173              		.loc 1 416 5 is_stmt 1 view .LVU540
 2174 0a50 FEFFFFEB 		bl	armwave_setup_render		@
 2175              	.LVL146:
 417:armwave.c     **** 
 418:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2176              		.loc 1 418 5 view .LVU541
 2177 0a54 34109FE5 		ldr	r1, .L115+32	@,
 2178 0a58 34009FE5 		ldr	r0, .L115+36	@,
 2179              	@ armwave.c:419: }
 419:armwave.c     **** }
 2180              		.loc 1 419 1 is_stmt 0 view .LVU542
 2181 0a5c 10D08DE2 		add	sp, sp, #16	@,,
 2182              		.cfi_def_cfa_offset 56
 2183              		@ sp needed	@
 2184 0a60 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2185              		.cfi_restore 84
 2186              		.cfi_restore 85
 2187              		.cfi_restore 82
 2188              		.cfi_restore 83
 2189              		.cfi_restore 80
 2190              		.cfi_restore 81
 2191              		.cfi_def_cfa_offset 32
 2192 0a64 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2193              		.cfi_restore 14
 2194              		.cfi_restore 10
 2195              		.cfi_restore 9
 2196              		.cfi_restore 8
 2197              		.cfi_restore 7
 2198              		.cfi_restore 6
 2199              		.cfi_restore 5
 2200              		.cfi_restore 4
 2201              		.cfi_def_cfa_offset 0
 2202              	.LVL147:
 2203              	@ armwave.c:418:     printf("armwave version: %s\n", ARMWAVE_VER);
 418:armwave.c     **** }
 2204              		.loc 1 418 5 view .LVU543
 2205 0a68 FEFFFFEA 		b	printf		@
 2206              	.LVL148:
 2207              	.L116:
 2208 0a6c 0000A0E1 		.align	3
 2209              	.L115:
 2210 0a70 000000C0 		.word	-1073741824
 2211 0a74 CCCCEC3F 		.word	1072483532
 2212 0a78 00000000 		.word	0
 2213 0a7c 00E06F40 		.word	1081073664
 2214 0a80 00007F43 		.word	1132396544
 2215 0a84 FFFFFFFF 		.word	gamma_table-1
 2216 0a88 00000000 		.word	g_armwave_state
 2217 0a8c F609F406 		.word	116656630
 2218 0a90 00000000 		.word	.LC0
 2219 0a94 08000000 		.word	.LC1
 2220              		.cfi_endproc
 2221              	.LFE69:
 2223              		.align	2
 2224              		.global	armwave_test_fill_outbuf
 2225              		.syntax unified
 2226              		.arm
 2227              		.fpu vfp
 2229              	armwave_test_fill_outbuf:
 2230              	.LFB70:
 420:armwave.c     **** 
 421:armwave.c     **** /*
 422:armwave.c     ****  * Render image to the local allocated buffer.
 423:armwave.c     ****  */
 424:armwave.c     **** void armwave_test_fill_outbuf()
 425:armwave.c     **** {
 2231              		.loc 1 425 1 is_stmt 1 view -0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 0
 2234              		@ frame_needed = 0, uses_anonymous_args = 0
 2235              		@ link register save eliminated.
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2236              		.loc 1 426 5 view .LVU545
 2237 0a98 04309FE5 		ldr	r3, .L118	@ tmp111,
 2238 0a9c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2239 0aa0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2240              	.LVL149:
 2241              	.L119:
 2242              		.align	2
 2243              	.L118:
 2244 0aa4 00000000 		.word	g_armwave_state
 2245              		.cfi_endproc
 2246              	.LFE70:
 2248              		.align	2
 2249              		.global	armwave_test_dump_buffer_to_ppm
 2250              		.syntax unified
 2251              		.arm
 2252              		.fpu vfp
 2254              	armwave_test_dump_buffer_to_ppm:
 2255              	.LVL150:
 2256              	.LFB71:
 427:armwave.c     **** }
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 433:armwave.c     **** {
 2257              		.loc 1 433 1 view -0
 2258              		.cfi_startproc
 2259              		@ args = 0, pretend = 0, frame = 0
 2260              		@ frame_needed = 0, uses_anonymous_args = 0
 2261              		@ link register save eliminated.
 434:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2262              		.loc 1 434 5 view .LVU547
 2263 0aa8 08309FE5 		ldr	r3, .L121	@ tmp112,
 2264 0aac 0010A0E1 		mov	r1, r0	@, fn
 2265 0ab0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2266              	.LVL151:
 2267              		.loc 1 434 5 is_stmt 0 view .LVU548
 2268 0ab4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2269              	.LVL152:
 2270              	.L122:
 2271              		.loc 1 434 5 view .LVU549
 2272              		.align	2
 2273              	.L121:
 2274 0ab8 00000000 		.word	g_armwave_state
 2275              		.cfi_endproc
 2276              	.LFE71:
 2278              		.align	2
 2279              		.global	armwave_test_fill_gdkbuf
 2280              		.syntax unified
 2281              		.arm
 2282              		.fpu vfp
 2284              	armwave_test_fill_gdkbuf:
 2285              	.LVL153:
 2286              	.LFB72:
 435:armwave.c     **** }
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Render GDK buffer with test funtionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 441:armwave.c     **** {
 2287              		.loc 1 441 1 is_stmt 1 view -0
 2288              		.cfi_startproc
 2289              		@ args = 0, pretend = 0, frame = 0
 2290              		@ frame_needed = 0, uses_anonymous_args = 0
 2291              		@ link register save eliminated.
 442:armwave.c     ****     //PyObject *mv;
 443:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 444:armwave.c     **** 
 445:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 446:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2292              		.loc 1 446 5 view .LVU551
 447:armwave.c     ****     
 448:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2293              		.loc 1 449 5 view .LVU552
 2294              	@ armwave.c:446:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 446:armwave.c     ****     
 2295              		.loc 1 446 11 is_stmt 0 view .LVU553
 2296 0abc 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2297              	@ armwave.c:449:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2298              		.loc 1 449 5 view .LVU554
 2299 0ac0 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2300              	.LVL154:
 2301              		.loc 1 449 5 view .LVU555
 2302 0ac4 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2303              	.LVL155:
 2304              		.loc 1 449 5 view .LVU556
 2305              		.cfi_endproc
 2306              	.LFE72:
 2308              		.align	2
 2309              		.global	armwave_test_buffer_alloc
 2310              		.syntax unified
 2311              		.arm
 2312              		.fpu vfp
 2314              	armwave_test_buffer_alloc:
 2315              	.LVL156:
 2316              	.LFB73:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 456:armwave.c     **** {
 2317              		.loc 1 456 1 is_stmt 1 view -0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2321              		.loc 1 457 5 view .LVU558
 2322              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2323              		.loc 1 456 1 is_stmt 0 view .LVU559
 2324 0ac8 70402DE9 		push	{r4, r5, r6, lr}	@
 2325              		.cfi_def_cfa_offset 16
 2326              		.cfi_offset 4, -16
 2327              		.cfi_offset 5, -12
 2328              		.cfi_offset 6, -8
 2329              		.cfi_offset 14, -4
 2330              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2331              		.loc 1 456 1 view .LVU560
 2332 0acc 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2333              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2334              		.loc 1 457 23 view .LVU561
 2335 0ad0 44409FE5 		ldr	r4, .L131	@ tmp128,
 2336 0ad4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2337              	.LVL157:
 2338              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2339              		.loc 1 457 7 view .LVU562
 2340 0ad8 000050E3 		cmp	r0, #0	@ _1,
 2341 0adc 0000000A 		beq	.L125		@,
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2342              		.loc 1 458 9 is_stmt 1 view .LVU563
 2343 0ae0 FEFFFFEB 		bl	free		@
 2344              	.LVL158:
 2345              	.L125:
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 462:armwave.c     **** 
 463:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2346              		.loc 1 463 5 view .LVU564
 2347              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2348              		.loc 1 463 75 is_stmt 0 view .LVU565
 2349 0ae4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2350 0ae8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2351              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2352              		.loc 1 463 40 view .LVU566
 2353 0aec 0610A0E1 		mov	r1, r6	@, nsets
 2354              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2355              		.loc 1 463 75 view .LVU567
 2356 0af0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2357              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2358              		.loc 1 463 40 view .LVU568
 2359 0af4 0500A0E1 		mov	r0, r5	@, _4
 2360 0af8 FEFFFFEB 		bl	calloc		@
 2361              	.LVL159:
 2362              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     **** 
 465:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2363              		.loc 1 465 7 view .LVU569
 2364 0afc 000050E3 		cmp	r0, #0	@ tmp124,
 2365              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2366              		.loc 1 463 38 view .LVU570
 2367 0b00 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2368              		.loc 1 465 5 is_stmt 1 view .LVU571
 2369              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 2370              		.loc 1 465 7 is_stmt 0 view .LVU572
 2371 0b04 7080BD18 		popne	{r4, r5, r6, pc}	@
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2372              		.loc 1 466 9 is_stmt 1 view .LVU573
 2373 0b08 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2374 0b0c 0620A0E1 		mov	r2, r6	@, nsets
 2375 0b10 08009FE5 		ldr	r0, .L131+4	@,
 2376              	@ armwave.c:470: }
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 468:armwave.c     ****         return;
 469:armwave.c     ****     }
 470:armwave.c     **** }
 2377              		.loc 1 470 1 is_stmt 0 view .LVU574
 2378 0b14 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2379              		.cfi_restore 14
 2380              		.cfi_restore 6
 2381              		.cfi_restore 5
 2382              		.cfi_restore 4
 2383              		.cfi_def_cfa_offset 0
 2384              	.LVL160:
 2385              	@ armwave.c:466:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2386              		.loc 1 466 9 view .LVU575
 2387 0b18 FEFFFFEA 		b	printf		@
 2388              	.LVL161:
 2389              	.L132:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2390              		.loc 1 466 9 view .LVU576
 2391              		.align	2
 2392              	.L131:
 2393 0b1c 00000000 		.word	g_armwave_state
 2394 0b20 20030000 		.word	.LC24
 2395              		.cfi_endproc
 2396              	.LFE73:
 2398              		.align	2
 2399              		.global	armwave_fill_pixbuf_into_pybuffer
 2400              		.syntax unified
 2401              		.arm
 2402              		.fpu vfp
 2404              	armwave_fill_pixbuf_into_pybuffer:
 2405              	.LVL162:
 2406              	.LFB74:
 471:armwave.c     **** 
 472:armwave.c     **** /*
 473:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 474:armwave.c     ****  */
 475:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 476:armwave.c     **** {
 2407              		.loc 1 476 1 is_stmt 1 view -0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 48
 2410              		@ frame_needed = 0, uses_anonymous_args = 0
 477:armwave.c     ****     Py_buffer buffer;
 2411              		.loc 1 477 5 view .LVU578
 478:armwave.c     ****     int ret;
 2412              		.loc 1 478 5 view .LVU579
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 481:armwave.c     **** 
 482:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2413              		.loc 1 482 5 view .LVU580
 2414              	@ armwave.c:476: {
 476:armwave.c     ****     Py_buffer buffer;
 2415              		.loc 1 476 1 is_stmt 0 view .LVU581
 2416 0b24 04E02DE5 		str	lr, [sp, #-4]!	@,
 2417              		.cfi_def_cfa_offset 4
 2418              		.cfi_offset 14, -4
 2419 0b28 34D04DE2 		sub	sp, sp, #52	@,,
 2420              		.cfi_def_cfa_offset 56
 2421              	@ armwave.c:482:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2422              		.loc 1 482 11 view .LVU582
 2423 0b2c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2424 0b30 0120A0E3 		mov	r2, #1	@,
 2425 0b34 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2426              	.LVL163:
 483:armwave.c     **** 
 484:armwave.c     ****     if(ret != 0) {
 2427              		.loc 1 484 5 is_stmt 1 view .LVU583
 2428              	@ armwave.c:484:     if(ret != 0) {
 2429              		.loc 1 484 7 is_stmt 0 view .LVU584
 2430 0b38 000050E3 		cmp	r0, #0	@,
 2431 0b3c 0A00001A 		bne	.L137		@,
 485:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 486:armwave.c     ****         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 490:armwave.c     **** 
 491:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2432              		.loc 1 491 5 is_stmt 1 view .LVU585
 2433 0b40 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2434              	.LVL164:
 2435              		.loc 1 491 5 is_stmt 0 view .LVU586
 2436 0b44 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2437              	.LVL165:
 492:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 493:armwave.c     **** 
 494:armwave.c     ****     PyBuffer_Release(&buffer);
 2438              		.loc 1 494 5 is_stmt 1 view .LVU587
 2439 0b48 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2440 0b4c FEFFFFEB 		bl	PyBuffer_Release		@
 2441              	.LVL166:
 495:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 496:armwave.c     **** 
 497:armwave.c     ****     Py_RETURN_TRUE;
 2442              		.loc 1 497 5 view .LVU588
 2443              	.LBB25:
 2444              	.LBI25:
 2445              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2446              		.loc 2 456 20 view .LVU589
 2447              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2448              		.loc 2 458 21 view .LVU590
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2449              		.loc 2 459 5 view .LVU591
 2450              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2451              		.loc 2 459 18 is_stmt 0 view .LVU592
 2452 0b50 38309FE5 		ldr	r3, .L138	@ tmp126,
 2453              	.LBE26:
 2454              	.LBE25:
 2455              	@ armwave.c:497:     Py_RETURN_TRUE;
 2456              		.loc 1 497 5 view .LVU593
 2457 0b54 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2458              	.LBB28:
 2459              	.LBB27:
 2460              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2461              		.loc 2 459 18 view .LVU594
 2462 0b58 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2463 0b5c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2464 0b60 002083E5 		str	r2, [r3]	@ tmp128,
 2465              	.LBE27:
 2466              	.LBE28:
 2467              	@ armwave.c:498: }
 498:armwave.c     **** }
 2468              		.loc 1 498 1 view .LVU595
 2469 0b64 34D08DE2 		add	sp, sp, #52	@,,
 2470              		.cfi_remember_state
 2471              		.cfi_def_cfa_offset 4
 2472              		@ sp needed	@
 2473 0b68 04F09DE4 		ldr	pc, [sp], #4	@
 2474              	.LVL167:
 2475              	.L137:
 2476              		.cfi_restore_state
 485:armwave.c     ****         Py_RETURN_FALSE;
 2477              		.loc 1 485 9 is_stmt 1 view .LVU596
 2478 0b6c 20009FE5 		ldr	r0, .L138+4	@,
 2479              	.LVL168:
 485:armwave.c     ****         Py_RETURN_FALSE;
 2480              		.loc 1 485 9 is_stmt 0 view .LVU597
 2481 0b70 FEFFFFEB 		bl	puts		@
 2482              	.LVL169:
 486:armwave.c     ****     }
 2483              		.loc 1 486 9 is_stmt 1 view .LVU598
 2484              	.LBB29:
 2485              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2486              		.loc 2 456 20 view .LVU599
 2487              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2488              		.loc 2 458 21 view .LVU600
 2489              		.loc 2 459 5 view .LVU601
 2490              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2491              		.loc 2 459 18 is_stmt 0 view .LVU602
 2492 0b74 1C309FE5 		ldr	r3, .L138+8	@ tmp120,
 2493              	.LBE30:
 2494              	.LBE29:
 2495              	@ armwave.c:486:         Py_RETURN_FALSE;
 486:armwave.c     ****     }
 2496              		.loc 1 486 9 view .LVU603
 2497 0b78 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2498              	.LBB32:
 2499              	.LBB31:
 2500              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2501              		.loc 2 459 18 view .LVU604
 2502 0b7c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2503 0b80 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2504 0b84 002083E5 		str	r2, [r3]	@ tmp122,
 2505              	.LBE31:
 2506              	.LBE32:
 2507              	@ armwave.c:498: }
 2508              		.loc 1 498 1 view .LVU605
 2509 0b88 34D08DE2 		add	sp, sp, #52	@,,
 2510              		.cfi_def_cfa_offset 4
 2511              		@ sp needed	@
 2512 0b8c 04F09DE4 		ldr	pc, [sp], #4	@
 2513              	.L139:
 2514              		.align	2
 2515              	.L138:
 2516 0b90 00000000 		.word	_Py_TrueStruct
 2517 0b94 74030000 		.word	.LC25
 2518 0b98 00000000 		.word	_Py_FalseStruct
 2519              		.cfi_endproc
 2520              	.LFE74:
 2522              		.align	2
 2523              		.global	armwave_test_create_am_sine
 2524              		.syntax unified
 2525              		.arm
 2526              		.fpu vfp
 2528              	armwave_test_create_am_sine:
 2529              	.LVL170:
 2530              	.LFB75:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Make a test AM waveform for render tests.
 502:armwave.c     ****  *
 503:armwave.c     ****  * @param   mod                     modulation depth
 504:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 505:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 508:armwave.c     **** {
 2531              		.loc 1 508 1 is_stmt 1 view -0
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 8
 2534              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2535              		.loc 1 509 5 view .LVU607
 510:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2536              		.loc 1 510 5 view .LVU608
 2537              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2538              		.loc 1 508 1 is_stmt 0 view .LVU609
 2539 0b9c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2540              		.cfi_def_cfa_offset 32
 2541              		.cfi_offset 4, -32
 2542              		.cfi_offset 5, -28
 2543              		.cfi_offset 6, -24
 2544              		.cfi_offset 7, -20
 2545              		.cfi_offset 8, -16
 2546              		.cfi_offset 9, -12
 2547              		.cfi_offset 10, -8
 2548              		.cfi_offset 14, -4
 2549              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2550              		.loc 1 510 38 view .LVU610
 2551 0ba0 7A7A9FED 		vldr.32	s14, .L171	@ tmp180,
 2552              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2553              		.loc 1 510 55 view .LVU611
 2554 0ba4 00529FE5 		ldr	r5, .L171+28	@ tmp250,
 2555              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2556              		.loc 1 508 1 view .LVU612
 2557 0ba8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2558              		.cfi_def_cfa_offset 80
 2559              		.cfi_offset 80, -80
 2560              		.cfi_offset 81, -76
 2561              		.cfi_offset 82, -72
 2562              		.cfi_offset 83, -68
 2563              		.cfi_offset 84, -64
 2564              		.cfi_offset 85, -60
 2565              		.cfi_offset 86, -56
 2566              		.cfi_offset 87, -52
 2567              		.cfi_offset 88, -48
 2568              		.cfi_offset 89, -44
 2569              		.cfi_offset 90, -40
 2570              		.cfi_offset 91, -36
 2571 0bac 0090A0E1 		mov	r9, r0	@ sets, sets
 2572              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2573              		.loc 1 510 38 view .LVU613
 2574 0bb0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2575              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 511:armwave.c     ****     int s, set_offset = 0;
 512:armwave.c     ****     int w, x;
 513:armwave.c     **** 
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2576              		.loc 1 514 70 view .LVU614
 2577 0bb4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2578 0bb8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2579              	.LBB35:
 2580              	.LBB36:
 2581              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2582              		.loc 1 457 23 view .LVU615
 2583 0bbc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2584              	.LVL171:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2585              		.loc 1 457 23 view .LVU616
 2586              	.LBE36:
 2587              	.LBE35:
 2588              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2589              		.loc 1 510 38 view .LVU617
 2590 0bc0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2591              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2592              		.loc 1 514 70 view .LVU618
 2593 0bc4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2594              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2595              		.loc 1 508 1 view .LVU619
 2596 0bc8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2597              	.LBB40:
 2598              	.LBB37:
 2599              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2600              		.loc 1 457 7 view .LVU620
 2601 0bcc 000050E3 		cmp	r0, #0	@ _82,
 2602              	.LBE37:
 2603              	.LBE40:
 2604              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2605              		.loc 1 508 1 view .LVU621
 2606 0bd0 08D04DE2 		sub	sp, sp, #8	@,,
 2607              		.cfi_def_cfa_offset 88
 2608              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_nsets = sets;
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2609              		.loc 1 515 44 view .LVU622
 2610 0bd4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2611              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2612              		.loc 1 514 45 view .LVU623
 2613 0bd8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2614              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2615              		.loc 1 510 38 view .LVU624
 2616 0bdc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2617              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2618              		.loc 1 510 11 view .LVU625
 2619 0be0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2620              	.LVL172:
 511:armwave.c     ****     int w, x;
 2621              		.loc 1 511 5 is_stmt 1 view .LVU626
 512:armwave.c     **** 
 2622              		.loc 1 512 5 view .LVU627
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2623              		.loc 1 514 5 view .LVU628
 2624              		.loc 1 515 5 view .LVU629
 516:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2625              		.loc 1 516 5 view .LVU630
 2626              	.LBB41:
 2627              	.LBI35:
 455:armwave.c     **** {
 2628              		.loc 1 455 6 view .LVU631
 2629              	.LBB38:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2630              		.loc 1 457 5 view .LVU632
 2631              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2632              		.loc 1 457 7 is_stmt 0 view .LVU633
 2633 0be4 0000000A 		beq	.L141		@,
 458:armwave.c     ****     }
 2634              		.loc 1 458 9 is_stmt 1 view .LVU634
 2635 0be8 FEFFFFEB 		bl	free		@
 2636              	.LVL173:
 2637              	.L141:
 463:armwave.c     **** 
 2638              		.loc 1 463 5 view .LVU635
 2639              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2640              		.loc 1 463 75 is_stmt 0 view .LVU636
 2641 0bec 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2642 0bf0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2643              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2644              		.loc 1 463 40 view .LVU637
 2645 0bf4 0910A0E1 		mov	r1, r9	@, sets
 2646              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2647              		.loc 1 463 75 view .LVU638
 2648 0bf8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2649              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2650              		.loc 1 463 40 view .LVU639
 2651 0bfc 0400A0E1 		mov	r0, r4	@, _85
 2652 0c00 FEFFFFEB 		bl	calloc		@
 2653              	.LVL174:
 2654              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2655              		.loc 1 465 7 view .LVU640
 2656 0c04 000050E3 		cmp	r0, #0	@ tmp191,
 2657              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2658              		.loc 1 463 38 view .LVU641
 2659 0c08 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2660              		.loc 1 465 5 is_stmt 1 view .LVU642
 2661              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2662              		.loc 1 465 7 is_stmt 0 view .LVU643
 2663 0c0c 5A00000A 		beq	.L170		@,
 2664              	.L142:
 2665              	.LVL175:
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2666              		.loc 1 465 7 view .LVU644
 2667              	.LBE38:
 2668              	.LBE41:
 2669              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 517:armwave.c     **** 
 518:armwave.c     ****     for(s = 0; s < sets; s++) {
 2670              		.loc 1 518 5 discriminator 1 view .LVU645
 2671 0c10 000059E3 		cmp	r9, #0	@ sets,
 2672 0c14 550000DA 		ble	.L140		@,
 2673              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 520:armwave.c     ****     
 521:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 523:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 525:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     **** 
 531:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 533:armwave.c     **** 
 534:armwave.c     ****                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 537:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2674              		.loc 1 537 45 view .LVU646
 2675 0c18 5C8A9FED 		vldr.32	s16, .L171	@ tmp258,
 2676              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 539:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 540:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2677              		.loc 1 540 104 view .LVU647
 2678 0c1c 5CCA9FED 		vldr.32	s24, .L171+4	@ tmp259,
 2679              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2680              		.loc 1 518 5 view .LVU648
 2681 0c20 0070A0E3 		mov	r7, #0	@ set_offset,
 2682              	@ armwave.c:519:         printf("Calculating test set %d\n", s);
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2683              		.loc 1 519 9 view .LVU649
 2684 0c24 84A19FE5 		ldr	r10, .L171+32	@ tmp257,
 2685              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2686              		.loc 1 518 5 view .LVU650
 2687 0c28 0780A0E1 		mov	r8, r7	@ s, set_offset
 2688              	.LVL176:
 2689              	.L143:
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2690              		.loc 1 519 9 is_stmt 1 view .LVU651
 2691 0c2c 0810A0E1 		mov	r1, r8	@, s
 2692 0c30 0A00A0E1 		mov	r0, r10	@, tmp257
 2693 0c34 FEFFFFEB 		bl	printf		@
 2694              	.LVL177:
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2695              		.loc 1 521 9 view .LVU652
 2696              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2697              		.loc 1 521 39 is_stmt 0 view .LVU653
 2698 0c38 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2699              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2700              		.loc 1 521 9 view .LVU654
 2701 0c3c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2702 0c40 450000DA 		ble	.L144		@,
 2703              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2704              		.loc 1 523 21 view .LVU655
 2705 0c44 53CADFED 		vldr.32	s25, .L171+8	@ tmp200,
 2706              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2707              		.loc 1 537 33 view .LVU656
 2708 0c48 53BA9FED 		vldr.32	s22, .L171+12	@ tmp253,
 2709              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2710              		.loc 1 535 24 view .LVU657
 2711 0c4c 53AADFED 		vldr.32	s21, .L171+16	@ tmp254,
 2712 0c50 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2713              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2714              		.loc 1 521 15 view .LVU658
 2715 0c54 0060A0E3 		mov	r6, #0	@ w,
 2716              	.LVL178:
 2717              	.L151:
 523:armwave.c     **** 
 2718              		.loc 1 523 13 is_stmt 1 view .LVU659
 2719              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2720              		.loc 1 523 21 is_stmt 0 view .LVU660
 2721 0c58 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2722 0c5c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2723              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2724              		.loc 1 525 13 view .LVU661
 2725 0c60 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2726              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2727              		.loc 1 523 21 view .LVU662
 2728 0c64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2729 0c68 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2730              	.LVL179:
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2731              		.loc 1 525 13 is_stmt 1 view .LVU663
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2732              		.loc 1 525 13 is_stmt 0 view .LVU664
 2733 0c6c 370000DA 		ble	.L145		@,
 2734 0c70 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2735              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2736              		.loc 1 540 113 view .LVU665
 2737 0c74 4AAA9FED 		vldr.32	s20, .L171+20	@ tmp229,
 2738 0c78 4A8ADFED 		vldr.32	s17, .L171+24	@ tmp230,
 2739              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2740              		.loc 1 525 19 view .LVU666
 2741 0c7c 0040A0E3 		mov	r4, #0	@ x,
 2742              	.LVL180:
 2743              	.L150:
 526:armwave.c     ****                 noise *= noise;
 2744              		.loc 1 526 17 is_stmt 1 view .LVU667
 2745              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2746              		.loc 1 526 28 is_stmt 0 view .LVU668
 2747 0c80 FEFFFFEB 		bl	rand		@
 2748              	.LVL181:
 2749              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2750              		.loc 1 526 35 view .LVU669
 2751 0c84 7000FFE6 		uxth	r0, r0	@ tmp201,
 2752              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2753              		.loc 1 526 45 view .LVU670
 2754 0c88 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2755 0c8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2756              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2757              		.loc 1 526 24 view .LVU671
 2758 0c90 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2759              	.LVL182:
 527:armwave.c     ****                 noise *= noise;
 2760              		.loc 1 527 17 is_stmt 1 view .LVU672
 2761              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 2762              		.loc 1 527 23 is_stmt 0 view .LVU673
 2763 0c94 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2764              	.LVL183:
 528:armwave.c     ****                 noise *= noise;
 2765              		.loc 1 528 17 is_stmt 1 view .LVU674
 2766              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2767              		.loc 1 528 23 is_stmt 0 view .LVU675
 2768 0c98 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2769              	.LVL184:
 529:armwave.c     **** 
 2770              		.loc 1 529 17 is_stmt 1 view .LVU676
 2771              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     **** 
 2772              		.loc 1 529 23 is_stmt 0 view .LVU677
 2773 0c9c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2774              	.LVL185:
 531:armwave.c     ****                     noise = -noise;
 2775              		.loc 1 531 17 is_stmt 1 view .LVU678
 2776              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2777              		.loc 1 531 21 is_stmt 0 view .LVU679
 2778 0ca0 FEFFFFEB 		bl	rand		@
 2779              	.LVL186:
 532:armwave.c     **** 
 2780              		.loc 1 532 21 is_stmt 1 view .LVU680
 2781              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2782              		.loc 1 531 19 is_stmt 0 view .LVU681
 2783 0ca4 020910E3 		tst	r0, #32768	@,
 2784              	@ armwave.c:532:                     noise = -noise;
 532:armwave.c     **** 
 2785              		.loc 1 532 27 view .LVU682
 2786 0ca8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2787              	.LVL187:
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2788              		.loc 1 534 17 is_stmt 1 view .LVU683
 535:armwave.c     **** 
 2789              		.loc 1 535 17 view .LVU684
 2790              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2791              		.loc 1 535 27 is_stmt 0 view .LVU685
 2792 0cac FEFFFFEB 		bl	rand		@
 2793              	.LVL188:
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2794              		.loc 1 537 17 is_stmt 1 view .LVU686
 2795              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2796              		.loc 1 537 45 is_stmt 0 view .LVU687
 2797 0cb0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2798              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2799              		.loc 1 537 33 view .LVU688
 2800 0cb4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2801              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2802              		.loc 1 537 45 view .LVU689
 2803 0cb8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2804              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2805              		.loc 1 537 33 view .LVU690
 2806 0cbc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2807              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2808              		.loc 1 537 45 view .LVU691
 2809 0cc0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2810              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2811              		.loc 1 537 33 view .LVU692
 2812 0cc4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2813              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2814              		.loc 1 535 34 view .LVU693
 2815 0cc8 7000FFE6 		uxth	r0, r0	@ tmp214,
 2816              	.LVL189:
 2817              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2818              		.loc 1 535 44 view .LVU694
 2819 0ccc 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2820 0cd0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2821              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2822              		.loc 1 535 24 view .LVU695
 2823 0cd4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2824              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2825              		.loc 1 537 77 view .LVU696
 2826 0cd8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2827              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2828              		.loc 1 537 22 view .LVU697
 2829 0cdc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2830 0ce0 FEFFFFEB 		bl	sin		@
 2831              	.LVL190:
 2832              		.loc 1 540 17 is_stmt 1 view .LVU698
 2833              	@ armwave.c:534:                 noise += 1.0f;
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2834              		.loc 1 534 23 is_stmt 0 view .LVU699
 2835 0ce4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2836              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2837              		.loc 1 540 104 view .LVU700
 2838 0ce8 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 2839              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2840              		.loc 1 537 98 view .LVU701
 2841 0cec E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2842              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2843              		.loc 1 537 87 view .LVU702
 2844 0cf0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2845              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2846              		.loc 1 537 98 view .LVU703
 2847 0cf4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2848              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2849              		.loc 1 537 19 view .LVU704
 2850 0cf8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2851              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2852              		.loc 1 540 113 view .LVU705
 2853 0cfc 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2854 0d00 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2855 0d04 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2856 0d08 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2857 0d0c 050000DA 		ble	.L147		@,
 2858              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2859              		.loc 1 540 104 discriminator 1 view .LVU706
 2860 0d10 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2861 0d14 FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 2862 0d18 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2863 0d1c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2864 0d20 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2865 0d24 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 2866              	.L147:
 2867              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2868              		.loc 1 540 57 discriminator 12 view .LVU707
 2869 0d28 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2870              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2871              		.loc 1 540 102 discriminator 12 view .LVU708
 2872 0d2c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2873 0d30 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2874 0d34 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2875              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2876              		.loc 1 525 58 discriminator 12 view .LVU709
 2877 0d38 014084E2 		add	r4, r4, #1	@ x, x,
 2878              	.LVL191:
 2879              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2880              		.loc 1 540 102 discriminator 12 view .LVU710
 2881 0d3c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 2882              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2883              		.loc 1 525 43 discriminator 12 view .LVU711
 2884 0d40 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2885              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2886              		.loc 1 525 13 discriminator 12 view .LVU712
 2887 0d44 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2888 0d48 CCFFFFCA 		bgt	.L150		@,
 2889 0d4c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2890              	.LVL192:
 2891              	.L145:
 2892              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2893              		.loc 1 521 48 discriminator 2 view .LVU713
 2894 0d50 016086E2 		add	r6, r6, #1	@ w, w,
 2895              	.LVL193:
 2896              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2897              		.loc 1 521 9 discriminator 2 view .LVU714
 2898 0d54 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2899 0d58 BEFFFFBA 		blt	.L151		@,
 2900              	.LVL194:
 2901              	.L144:
 541:armwave.c     ****             }
 542:armwave.c     ****         }
 543:armwave.c     **** 
 544:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2902              		.loc 1 544 9 is_stmt 1 discriminator 2 view .LVU715
 2903              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2904              		.loc 1 544 46 is_stmt 0 discriminator 2 view .LVU716
 2905 0d5c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2906              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2907              		.loc 1 518 27 discriminator 2 view .LVU717
 2908 0d60 018088E2 		add	r8, r8, #1	@ s, s,
 2909              	.LVL195:
 2910              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2911              		.loc 1 518 5 discriminator 2 view .LVU718
 2912 0d64 080059E1 		cmp	r9, r8	@ sets, s
 2913              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2914              		.loc 1 544 20 discriminator 2 view .LVU719
 2915 0d68 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2916              	.LVL196:
 2917              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2918              		.loc 1 518 5 discriminator 2 view .LVU720
 2919 0d6c AEFFFF1A 		bne	.L143		@,
 2920              	.LVL197:
 2921              	.L140:
 2922              	@ armwave.c:546: }
 545:armwave.c     ****     }
 546:armwave.c     **** }
 2923              		.loc 1 546 1 view .LVU721
 2924 0d70 08D08DE2 		add	sp, sp, #8	@,,
 2925              		.cfi_remember_state
 2926              		.cfi_def_cfa_offset 80
 2927              		@ sp needed	@
 2928 0d74 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2929              		.cfi_restore 90
 2930              		.cfi_restore 91
 2931              		.cfi_restore 88
 2932              		.cfi_restore 89
 2933              		.cfi_restore 86
 2934              		.cfi_restore 87
 2935              		.cfi_restore 84
 2936              		.cfi_restore 85
 2937              		.cfi_restore 82
 2938              		.cfi_restore 83
 2939              		.cfi_restore 80
 2940              		.cfi_restore 81
 2941              		.cfi_def_cfa_offset 32
 2942              	.LVL198:
 2943              		.loc 1 546 1 view .LVU722
 2944 0d78 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2945              	.LVL199:
 2946              	.L170:
 2947              		.cfi_restore_state
 2948              	.LBB42:
 2949              	.LBB39:
 466:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2950              		.loc 1 466 9 is_stmt 1 view .LVU723
 2951 0d7c 940901E0 		mul	r1, r4, r9	@, _85, sets
 2952 0d80 0920A0E1 		mov	r2, r9	@, sets
 2953 0d84 28009FE5 		ldr	r0, .L171+36	@,
 2954 0d88 FEFFFFEB 		bl	printf		@
 2955              	.LVL200:
 468:armwave.c     ****     }
 2956              		.loc 1 468 9 view .LVU724
 2957 0d8c 9FFFFFEA 		b	.L142		@
 2958              	.L172:
 2959              		.align	2
 2960              	.L171:
 2961 0d90 0000803F 		.word	1065353216
 2962 0d94 00007F43 		.word	1132396544
 2963 0d98 0000003F 		.word	1056964608
 2964 0d9c C3F5C840 		.word	1086911939
 2965 0da0 38FFC74A 		.word	1254620984
 2966 0da4 0000FE42 		.word	1123942400
 2967 0da8 00000043 		.word	1124073472
 2968 0dac 00000000 		.word	g_armwave_state
 2969 0db0 C8030000 		.word	.LC26
 2970 0db4 20030000 		.word	.LC24
 2971              	.LBE39:
 2972              	.LBE42:
 2973              		.cfi_endproc
 2974              	.LFE75:
 2976              		.align	2
 2977              		.global	armwave_cleanup
 2978              		.syntax unified
 2979              		.arm
 2980              		.fpu vfp
 2982              	armwave_cleanup:
 2983              	.LFB76:
 547:armwave.c     **** 
 548:armwave.c     **** /*
 549:armwave.c     ****  * Make a test square waveform.
 550:armwave.c     ****  *
 551:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 552:armwave.c     ****  */
 553:armwave.c     **** #if 0
 554:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 555:armwave.c     **** {
 556:armwave.c     ****     uint8_t v;
 557:armwave.c     ****     float noise, xnoise;
 558:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 559:armwave.c     ****     int w, x;
 560:armwave.c     **** 
 561:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 562:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 563:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     **** 
 568:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 569:armwave.c     ****                 noise = -noise;
 570:armwave.c     **** 
 571:armwave.c     ****             //noise += 1.0f;
 572:armwave.c     **** 
 573:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 574:armwave.c     ****                 new_level = 0.2f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 576:armwave.c     ****                 new_level = 0.8f;
 577:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 578:armwave.c     ****                 new_level = 0.2f;
 579:armwave.c     ****             } else {
 580:armwave.c     ****                 new_level = 0.8f;
 581:armwave.c     ****             }
 582:armwave.c     **** 
 583:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 584:armwave.c     **** 
 585:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 586:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 587:armwave.c     ****         }
 588:armwave.c     ****     }
 589:armwave.c     **** }
 590:armwave.c     **** #endif
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_cleanup()
 596:armwave.c     **** {
 2984              		.loc 1 596 1 view -0
 2985              		.cfi_startproc
 2986              		@ args = 0, pretend = 0, frame = 0
 2987              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2988              		.loc 1 597 5 view .LVU726
 2989              	@ armwave.c:596: {
 596:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2990              		.loc 1 596 1 is_stmt 0 view .LVU727
 2991 0db8 10402DE9 		push	{r4, lr}	@
 2992              		.cfi_def_cfa_offset 8
 2993              		.cfi_offset 4, -8
 2994              		.cfi_offset 14, -4
 2995              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 2996              		.loc 1 597 25 view .LVU728
 2997 0dbc 34409FE5 		ldr	r4, .L175	@ tmp114,
 2998              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 2999              		.loc 1 597 5 view .LVU729
 3000 0dc0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3001 0dc4 FEFFFFEB 		bl	free		@
 3002              	.LVL201:
 598:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3003              		.loc 1 598 5 is_stmt 1 view .LVU730
 3004 0dc8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3005 0dcc FEFFFFEB 		bl	free		@
 3006              	.LVL202:
 599:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3007              		.loc 1 599 5 view .LVU731
 3008 0dd0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3009 0dd4 FEFFFFEB 		bl	free		@
 3010              	.LVL203:
 600:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3011              		.loc 1 600 5 view .LVU732
 3012 0dd8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3013 0ddc FEFFFFEB 		bl	free		@
 3014              	.LVL204:
 601:armwave.c     **** 
 602:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3015              		.loc 1 602 5 view .LVU733
 3016              	@ armwave.c:602:     g_armwave_state.out_pixbuf = NULL;
 3017              		.loc 1 602 32 is_stmt 0 view .LVU734
 3018 0de0 0030A0E3 		mov	r3, #0	@ tmp123,
 3019 0de4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 603:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3020              		.loc 1 603 5 is_stmt 1 view .LVU735
 3021              	@ armwave.c:603:     g_armwave_state.ch1_buffer = NULL;
 3022              		.loc 1 603 32 is_stmt 0 view .LVU736
 3023 0de8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 604:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3024              		.loc 1 604 5 is_stmt 1 view .LVU737
 3025              	@ armwave.c:604:     g_armwave_state.xcoord_to_xpixel = NULL;
 3026              		.loc 1 604 38 is_stmt 0 view .LVU738
 3027 0dec 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 605:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3028              		.loc 1 605 5 is_stmt 1 view .LVU739
 3029              	@ armwave.c:605:     g_armwave_state.test_wave_buffer = NULL;
 3030              		.loc 1 605 38 is_stmt 0 view .LVU740
 3031 0df0 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3032              	@ armwave.c:606: }
 606:armwave.c     **** }
 3033              		.loc 1 606 1 view .LVU741
 3034 0df4 1080BDE8 		pop	{r4, pc}	@
 3035              	.L176:
 3036              		.align	2
 3037              	.L175:
 3038 0df8 00000000 		.word	g_armwave_state
 3039              		.cfi_endproc
 3040              	.LFE76:
 3042              		.comm	gamma_table,256,4
 3043              		.comm	g_armwave_state,136,4
 3044              		.section	.rodata
 3045              		.align	2
 3046              		.set	.LANCHOR0,. + 0
 3049              	__PRETTY_FUNCTION__.17126:
 3050 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3050      6176655F 
 3050      73657475 
 3050      705F7265 
 3050      6E646572 
 3051 0015 000000   		.space	3
 3054              	__PRETTY_FUNCTION__.17130:
 3055 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3055      6176655F 
 3055      7365745F 
 3055      77617665 
 3055      5F706F69 
 3056 0031 000000   		.space	3
 3059              	__PRETTY_FUNCTION__.17137:
 3060 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3060      6176655F 
 3060      7365745F 
 3060      77617665 
 3060      5F706F69 
 3061              		.section	.rodata.str1.4,"aMS",%progbits,1
 3062              		.align	2
 3063              	.LC0:
 3064 0000 76302E30 		.ascii	"v0.0.1\000"
 3064      2E3100
 3065 0007 00       		.space	1
 3066              	.LC1:
 3067 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3067      61766520 
 3067      76657273 
 3067      696F6E3A 
 3067      2025730A 
 3068 001d 000000   		.space	3
 3069              	.LC2:
 3070 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3070      78253038 
 3070      7820623D 
 3070      30782530 
 3070      38782063 
 3071 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 3071      25642073 
 3071      63616C65 
 3071      3D256420 
 3071      62697464 
 3072 0077 00       		.space	1
 3073              	.LC3:
 3074 0078 77625F65 		.ascii	"wb_end=%d\012\000"
 3074      6E643D25 
 3074      640A00
 3075 0083 00       		.space	1
 3076              	.LC4:
 3077 0084 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 3077      75742062 
 3077      75666665 
 3077      723A2030 
 3077      78253038 
 3078 009b 00       		.space	1
 3079              	.LC5:
 3080 009c 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 3080      65742025 
 3080      64206279 
 3080      7465732C 
 3080      206E7069 
 3081 00cf 30782530 		.ascii	"0x%08x, dest_buffer 0x%08x, stack ~0x%08x\012\000"
 3081      38782C20 
 3081      64657374 
 3081      5F627566 
 3081      66657220 
 3082 00fa 0000     		.space	2
 3083              	.LC6:
 3084 00fc 69746572 		.ascii	"iter...\000"
 3084      2E2E2E00 
 3085              	.LC7:
 3086 0104 30782530 		.ascii	"0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\012\000"
 3086      38782C25 
 3086      36642C25 
 3086      36642C25 
 3086      36642C25 
 3087 0125 000000   		.space	3
 3088              	.LC8:
 3089 0128 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 3089      6F6E6520 
 3089      7061696E 
 3089      74202564 
 3089      20706978 
 3090              	.LC9:
 3091 0144 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 3091      6176655F 
 3091      67656E65 
 3091      72617465 
 3091      3A20736C 
 3092 0175 00       		.ascii	"\000"
 3093 0176 0000     		.space	2
 3094              	.LC10:
 3095 0178 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3095      20653D25 
 3095      6420773D 
 3095      25642077 
 3095      733D2564 
 3096              	.LC11:
 3097 01a4 61726D77 		.ascii	"armwave.c\000"
 3097      6176652E 
 3097      6300
 3098 01ae 0000     		.space	2
 3099              	.LC12:
 3100 01b0 73746172 		.ascii	"start_point < end_point\000"
 3100      745F706F 
 3100      696E7420 
 3100      3C20656E 
 3100      645F706F 
 3101              	.LC13:
 3102 01c8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3102      7566665F 
 3102      73697A65 
 3102      3D25642C 
 3102      20636D70 
 3103 01fb 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3103      5F776964 
 3103      74683D25 
 3103      642C2077 
 3103      6176655F 
 3104 0225 000000   		.space	3
 3105              	.LC14:
 3106 0228 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 3106      6F632066 
 3106      61696C75 
 3106      72652061 
 3106      6C6C6F63 
 3107 025b 2E636831 		.ascii	".ch1_buffer)\012\000"
 3107      5F627566 
 3107      66657229 
 3107      0A00
 3108 0269 000000   		.space	3
 3109              	.LC15:
 3110 026c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3110      3A203078 
 3110      25303878 
 3110      20307825 
 3110      30387820 
 3111              	.LC16:
 3112 0290 77617665 		.ascii	"wave_buffer != NULL\000"
 3112      5F627566 
 3112      66657220 
 3112      213D204E 
 3112      554C4C00 
 3113              	.LC17:
 3114 02a4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3114      6176655F 
 3114      7365745F 
 3114      77617665 
 3114      5F706F69 
 3115 02d7 78636565 		.ascii	"xceeded\000"
 3115      64656400 
 3116 02df 00       		.space	1
 3117              	.LC18:
 3118 02e0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3118      5F627566 
 3118      6665725F 
 3118      70747220 
 3118      213D2030 
 3119 02f5 000000   		.space	3
 3120              	.LC19:
 3121 02f8 776200   		.ascii	"wb\000"
 3122 02fb 00       		.space	1
 3123              	.LC20:
 3124 02fc 50330A00 		.ascii	"P3\012\000"
 3125              	.LC21:
 3126 0300 25642025 		.ascii	"%d %d\012\000"
 3126      640A00
 3127 0307 00       		.space	1
 3128              	.LC22:
 3129 0308 3235350A 		.ascii	"255\012\000"
 3129      00
 3130 030d 000000   		.space	3
 3131              	.LC23:
 3132 0310 25336420 		.ascii	"%3d %3d %3d\012\000"
 3132      25336420 
 3132      2533640A 
 3132      00
 3133 031d 000000   		.space	3
 3134              	.LC24:
 3135 0320 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3135      6176655F 
 3135      74657374 
 3135      5F627566 
 3135      6665725F 
 3136 0353 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3136      20627566 
 3136      66657220 
 3136      28256420 
 3136      62797465 
 3137              	.LC25:
 3138 0374 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3138      6176655F 
 3138      66696C6C 
 3138      5F706978 
 3138      6275665F 
 3139 03a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3139      20666169 
 3139      6C65642C 
 3139      20726574 
 3139      75726E69 
 3140 03c6 0000     		.space	2
 3141              	.LC26:
 3142 03c8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3142      756C6174 
 3142      696E6720 
 3142      74657374 
 3142      20736574 
 3143              		.text
 3144              	.Letext0:
 3145              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3146              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3147              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3148              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3149              		.file 7 "/usr/include/stdio.h"
 3150              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3151              		.file 9 "/usr/include/errno.h"
 3152              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3153              		.file 11 "/usr/include/unistd.h"
 3154              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3155              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3156              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3157              		.file 15 "/usr/include/math.h"
 3158              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3159              		.file 17 "/usr/include/time.h"
 3160              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3161              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3162              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3163              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3164              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3165              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3166              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3167              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3168              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3169              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3170              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3171              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3172              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3173              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3174              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3175              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3176              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3177              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3178              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3179              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3180              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3181              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3182              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3183              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3184              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3185              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3186              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3187              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3188              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3189              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3190              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3191              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3192              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3193              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3194              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3195              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3196              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3197              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3198              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3199              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3200              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3201              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3202              		.file 60 "/usr/local/include/python3.8/context.h"
 3203              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3204              		.file 62 "/usr/local/include/python3.8/code.h"
 3205              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3206              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3207              		.file 65 "/usr/local/include/python3.8/import.h"
 3208              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3209              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3210              		.file 68 "/usr/include/malloc.h"
 3211              		.file 69 "armwave.h"
 3212              		.file 70 "/usr/include/stdlib.h"
 3213              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3214              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3215              		.file 73 "<built-in>"
 3216              		.file 74 "/usr/include/assert.h"
