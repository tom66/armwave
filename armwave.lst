   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 C0419FE5 		ldr	r4, .L25	@ tmp314,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 1CD04DE2 		sub	sp, sp, #28	@,,
 255              		.cfi_def_cfa_offset 64
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 65 view .LVU34
 258 00ac 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 130 view .LVU35
 261 00b0 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 40 view .LVU36
 265 00b4 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 65 view .LVU37
 268 00b8 920002E0 		mul	r2, r2, r0	@ tmp215, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 269              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 270              		.loc 1 73 5 view .LVU38
 271 00bc 0530A0E1 		mov	r3, r5	@, _1
 272              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 273              		.loc 1 63 1 view .LVU39
 274 00c0 14008DE5 		str	r0, [sp, #20]	@ slice_y, %sfp
 275              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 276              		.loc 1 71 105 view .LVU40
 277 00c4 2224A0E1 		lsr	r2, r2, #8	@ tmp217, tmp215,
 278              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 279              		.loc 1 73 5 view .LVU41
 280 00c8 41008DE9 		stmib	sp, {r0, r6}	@,,
 281              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 282              		.loc 1 71 130 view .LVU42
 283 00cc 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp217
 284              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 285              		.loc 1 73 5 view .LVU43
 286 00d0 98019FE5 		ldr	r0, .L25+4	@,
 287              	.LVL8:
 288              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 289              		.loc 1 71 23 view .LVU44
 290 00d4 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _7
 291              	.LVL9:
 292              		.loc 1 73 5 is_stmt 1 view .LVU45
 293 00d8 00208DE5 		str	r2, [sp]	@ _7,
 294 00dc 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 295 00e0 0520A0E1 		mov	r2, r5	@, write_buffer_base
 296 00e4 FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 78 5 view .LVU46
 299              		.loc 1 78 5 is_stmt 0 view .LVU47
 300 00e8 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00ec 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f0 5B0000DA 		ble	.L11		@,
 303              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 78 11 view .LVU48
 305 00f4 0030A0E3 		mov	r3, #0	@ w,
 306 00f8 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 307              	.LVL11:
 308              	.L12:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 309              		.loc 1 79 9 is_stmt 1 view .LVU49
 310              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 311              		.loc 1 79 59 is_stmt 0 view .LVU50
 312 00fc 10009DE5 		ldr	r0, [sp, #16]	@ w, %sfp
 313              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 314              		.loc 1 79 81 view .LVU51
 315 0100 341094E5 		ldr	r1, [r4, #52]	@ _12, g_armwave_state.wave_stride
 316              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 317              		.loc 1 79 59 view .LVU52
 318 0104 14309DE5 		ldr	r3, [sp, #20]	@ slice_y, %sfp
 319              	@ armwave.c:81:         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_
  80:armwave.c     **** 
  81:armwave.c     ****         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_stride, slice_y,
 320              		.loc 1 81 9 view .LVU53
 321 0108 0120A0E1 		mov	r2, r1	@, _12
 322              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 323              		.loc 1 79 59 view .LVU54
 324 010c 903121E0 		mla	r1, r0, r1, r3	@ tmp228, w, _12, slice_y
 325              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 326              		.loc 1 79 19 view .LVU55
 327 0110 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 328 0114 018088E0 		add	r8, r8, r1	@ wave_base, g_armwave_state.wave_buffer, tmp228
 329              	.LVL12:
 330              		.loc 1 81 9 is_stmt 1 view .LVU56
 331 0118 00808DE5 		str	r8, [sp]	@ wave_base,
 332 011c 0010A0E1 		mov	r1, r0	@, w
 333 0120 4C019FE5 		ldr	r0, .L25+8	@,
 334 0124 FEFFFFEB 		bl	printf		@
 335              	.LVL13:
  82:armwave.c     **** 
  83:armwave.c     ****         // roll through y and render the slice into the out buffer
  84:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  85:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 336              		.loc 1 85 9 view .LVU57
 337              		.loc 1 85 9 is_stmt 0 view .LVU58
 338 0128 000056E3 		cmp	r6, #0	@ height,
 339 012c 04804812 		subne	r8, r8, #4	@ ivtmp.39, wave_base,
 340              	.LVL14:
 341              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 342              		.loc 1 85 16 view .LVU59
 343 0130 0020A013 		movne	r2, #0	@ yy,
 344              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 345              		.loc 1 85 9 view .LVU60
 346 0134 4400000A 		beq	.L19		@,
 347              	.LVL15:
 348              	.L18:
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 349              		.loc 1 86 13 is_stmt 1 view .LVU61
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 350              		.loc 1 100 17 view .LVU62
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 351              		.loc 1 102 17 view .LVU63
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 100 17 view .LVU64
 353              		.loc 1 102 17 view .LVU65
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 354              		.loc 1 100 17 view .LVU66
 355              		.loc 1 102 17 view .LVU67
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 356              		.loc 1 100 17 view .LVU68
 357              		.loc 1 102 17 view .LVU69
 358              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 359              		.loc 1 86 18 is_stmt 0 view .LVU70
 360 0138 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _161, offset: 0B]
 361              	.LVL16:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 362              		.loc 1 88 13 is_stmt 1 view .LVU71
  90:armwave.c     ****                 
 363              		.loc 1 90 17 view .LVU72
  93:armwave.c     ****                     continue;
 364              		.loc 1 93 17 view .LVU73
 365              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 366              		.loc 1 101 34 is_stmt 0 view .LVU74
 367 013c 01B082E2 		add	fp, r2, #1	@ tmp261, yy,
 368              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 369              		.loc 1 93 20 view .LVU75
 370 0140 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 371 0144 0110A003 		moveq	r1, #1	@ tmp234,
 372 0148 0010A013 		movne	r1, #0	@ tmp234,
 373              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 374              		.loc 1 93 19 view .LVU76
 375 014c FF0057E3 		cmp	r7, #255	@ scale_value,
 376 0150 01108103 		orreq	r1, r1, #1	@,, tmp239, tmp234
 377 0154 000051E3 		cmp	r1, #0	@ tmp239,
 378              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 379              		.loc 1 101 34 view .LVU77
 380 0158 02A082E2 		add	r10, r2, #2	@ tmp282, yy,
 381 015c 039082E2 		add	r9, r2, #3	@ tmp302, yy,
 382              	.LVL17:
 383              	@ armwave.c:103:                 word >>= 8;
 103:armwave.c     ****                 word >>= 8;
 384              		.loc 1 103 22 view .LVU78
 385 0160 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 386 0164 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 387              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 388              		.loc 1 93 19 view .LVU79
 389 0168 3400001A 		bne	.L20		@,
 390              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 101 34 view .LVU80
 392 016c 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 393              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 394              		.loc 1 93 20 view .LVU81
 395 0170 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 396 0174 01E0A003 		moveq	lr, #1	@ tmp254,
 397              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 398              		.loc 1 101 34 view .LVU82
 399 0178 910201E0 		mul	r1, r1, r2	@ tmp241, g_armwave_state.cmp_x_bitdepth_scale, yy
 400              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 401              		.loc 1 93 20 view .LVU83
 402 017c 00E0A013 		movne	lr, #0	@ tmp254,
 403              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 404              		.loc 1 93 19 view .LVU84
 405 0180 FF005CE3 		cmp	ip, #255	@ scale_value,
 406 0184 01E08E03 		orreq	lr, lr, #1	@,, tmp259, tmp254
 407 0188 00005EE3 		cmp	lr, #0	@ tmp259,
 408              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 409              		.loc 1 102 47 view .LVU85
 410 018c 40E094E5 		ldr	lr, [r4, #64]	@ tmp330, g_armwave_state.bitdepth_height
 411              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 101 74 view .LVU86
 413 0190 2114A0E1 		lsr	r1, r1, #8	@ tmp243, tmp241,
 414              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 415              		.loc 1 102 47 view .LVU87
 416 0194 9E7121E0 		mla	r1, lr, r1, r7	@ tmp247, tmp330, tmp243, scale_value
 417 0198 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_82, *_82
 418 019c 01E08EE2 		add	lr, lr, #1	@ tmp250, *_82,
 419 01a0 01E0C5E7 		strb	lr, [r5, r1]	@ tmp250, *_82
 420              	.LVL18:
 421              		.loc 1 103 17 is_stmt 1 view .LVU88
  90:armwave.c     ****                 
 422              		.loc 1 90 17 view .LVU89
  93:armwave.c     ****                     continue;
 423              		.loc 1 93 17 view .LVU90
 424              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 425              		.loc 1 93 19 is_stmt 0 view .LVU91
 426 01a4 2500001A 		bne	.L20		@,
 427              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 428              		.loc 1 101 34 view .LVU92
 429 01a8 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 430              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 431              		.loc 1 101 99 view .LVU93
 432 01ac 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 433              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 434              		.loc 1 93 20 view .LVU94
 435 01b0 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 436              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 437              		.loc 1 101 34 view .LVU95
 438 01b4 9E0B0BE0 		mul	fp, lr, fp	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 439              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 440              		.loc 1 93 20 view .LVU96
 441 01b8 01E0A003 		moveq	lr, #1	@ tmp275,
 442 01bc 00E0A013 		movne	lr, #0	@ tmp275,
 443              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 444              		.loc 1 101 74 view .LVU97
 445 01c0 2BB4A0E1 		lsr	fp, fp, #8	@ tmp264, tmp262,
 446              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 447              		.loc 1 93 19 view .LVU98
 448 01c4 FF0050E3 		cmp	r0, #255	@ scale_value,
 449 01c8 01E08E03 		orreq	lr, lr, #1	@,, tmp280, tmp275
 450              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 451              		.loc 1 102 47 view .LVU99
 452 01cc 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp268, g_armwave_state.bitdepth_height, tmp264, scale_value
 453              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 454              		.loc 1 93 19 view .LVU100
 455 01d0 00005EE3 		cmp	lr, #0	@ tmp280,
 456              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 457              		.loc 1 102 47 view .LVU101
 458 01d4 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_112, *_112
 459 01d8 011081E2 		add	r1, r1, #1	@ tmp271, *_112,
 460 01dc 0C10C5E7 		strb	r1, [r5, ip]	@ tmp271, *_112
 461              		.loc 1 103 17 is_stmt 1 view .LVU102
 462              	.LVL19:
  90:armwave.c     ****                 
 463              		.loc 1 90 17 view .LVU103
  93:armwave.c     ****                     continue;
 464              		.loc 1 93 17 view .LVU104
 465              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 466              		.loc 1 93 19 is_stmt 0 view .LVU105
 467 01e0 1600001A 		bne	.L20		@,
 468              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 469              		.loc 1 101 34 view .LVU106
 470 01e4 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 471              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 472              		.loc 1 101 99 view .LVU107
 473 01e8 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 474              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 475              		.loc 1 93 20 view .LVU108
 476 01ec 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 477              	.LVL20:
 478              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 479              		.loc 1 101 34 view .LVU109
 480 01f0 910A0AE0 		mul	r10, r1, r10	@ tmp283, g_armwave_state.cmp_x_bitdepth_scale, tmp282
 481              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 482              		.loc 1 93 20 view .LVU110
 483 01f4 0110A003 		moveq	r1, #1	@ tmp295,
 484 01f8 0010A013 		movne	r1, #0	@ tmp295,
 485              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 486              		.loc 1 101 74 view .LVU111
 487 01fc 2AA4A0E1 		lsr	r10, r10, #8	@ tmp285, tmp283,
 488              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 489              		.loc 1 93 19 view .LVU112
 490 0200 FF0053E3 		cmp	r3, #255	@ word,
 491 0204 01108103 		orreq	r1, r1, #1	@,, tmp300, tmp295
 492              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 493              		.loc 1 102 47 view .LVU113
 494 0208 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp289, g_armwave_state.bitdepth_height, tmp285, scale_value
 495              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 496              		.loc 1 93 19 view .LVU114
 497 020c 000051E3 		cmp	r1, #0	@ tmp300,
 498              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 499              		.loc 1 102 47 view .LVU115
 500 0210 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_142, *_142
 501 0214 011081E2 		add	r1, r1, #1	@ tmp292, *_142,
 502 0218 0010C5E7 		strb	r1, [r5, r0]	@ tmp292, *_142
 503              		.loc 1 103 17 is_stmt 1 view .LVU116
 504              	.LVL21:
  90:armwave.c     ****                 
 505              		.loc 1 90 17 view .LVU117
  93:armwave.c     ****                     continue;
 506              		.loc 1 93 17 view .LVU118
 507              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 508              		.loc 1 93 19 is_stmt 0 view .LVU119
 509 021c 0700001A 		bne	.L20		@,
 510              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 511              		.loc 1 101 34 view .LVU120
 512 0220 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 513              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 514              		.loc 1 101 99 view .LVU121
 515 0224 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 516              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 517              		.loc 1 101 34 view .LVU122
 518 0228 910909E0 		mul	r9, r1, r9	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp302
 519              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 520              		.loc 1 101 74 view .LVU123
 521 022c 2994A0E1 		lsr	r9, r9, #8	@ tmp305, tmp303,
 522              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 523              		.loc 1 102 47 view .LVU124
 524 0230 903923E0 		mla	r3, r0, r9, r3	@ tmp309, g_armwave_state.bitdepth_height, tmp305, word
 525 0234 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_172, *_172
 526 0238 011081E2 		add	r1, r1, #1	@ tmp312, *_172,
 527 023c 0310C5E7 		strb	r1, [r5, r3]	@ tmp312, *_172
 528              		.loc 1 103 17 is_stmt 1 view .LVU125
 529              	.LVL22:
 530              	.L20:
 531              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 532              		.loc 1 85 37 is_stmt 0 view .LVU126
 533 0240 042082E2 		add	r2, r2, #4	@ yy, yy,
 534              	.LVL23:
 535              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 536              		.loc 1 85 9 view .LVU127
 537 0244 020056E1 		cmp	r6, r2	@ height, yy
 538 0248 BAFFFF8A 		bhi	.L18		@,
 539              	.LVL24:
 540              	.L19:
 541              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 78 44 view .LVU128
 543 024c 10209DE5 		ldr	r2, [sp, #16]	@ w, %sfp
 544              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 78 5 view .LVU129
 546 0250 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 547              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 78 44 view .LVU130
 549 0254 012082E2 		add	r2, r2, #1	@ w, w,
 550              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 551              		.loc 1 78 5 view .LVU131
 552 0258 020053E1 		cmp	r3, r2	@ g_armwave_state.waves, w
 553              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 554              		.loc 1 78 44 view .LVU132
 555 025c 10208DE5 		str	r2, [sp, #16]	@ w, %sfp
 556              	.LVL25:
 557              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 558              		.loc 1 78 5 view .LVU133
 559 0260 A5FFFFCA 		bgt	.L12		@,
 560              	.LVL26:
 561              	.L11:
 562              	@ armwave.c:107: }
 104:armwave.c     ****             }
 105:armwave.c     ****         }
 106:armwave.c     ****     }
 107:armwave.c     **** }
 563              		.loc 1 107 1 view .LVU134
 564 0264 1CD08DE2 		add	sp, sp, #28	@,,
 565              		.cfi_def_cfa_offset 36
 566              		@ sp needed	@
 567 0268 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 568              	.LVL27:
 569              	.L26:
 570              		.loc 1 107 1 view .LVU135
 571              		.align	2
 572              	.L25:
 573 026c 00000000 		.word	g_armwave_state
 574 0270 20000000 		.word	.LC2
 575 0274 5C000000 		.word	.LC3
 576              		.cfi_endproc
 577              	.LFE59:
 579              		.align	2
 580              		.global	armwave_fill_pixbuf_scaled
 581              		.syntax unified
 582              		.arm
 583              		.fpu vfp
 585              	armwave_fill_pixbuf_scaled:
 586              	.LVL28:
 587              	.LFB60:
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     **** /*
 111:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 112:armwave.c     ****  */
 113:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 114:armwave.c     **** {
 115:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 116:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 117:armwave.c     ****     uint8_t r, g, b, value;
 118:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 120:armwave.c     ****     uint32_t offset;
 121:armwave.c     **** 
 122:armwave.c     ****     assert(out_buffer != NULL);
 123:armwave.c     **** 
 124:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 125:armwave.c     **** 
 126:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 127:armwave.c     **** 
 128:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 129:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 130:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 131:armwave.c     ****         // most normal waveforms.
 132:armwave.c     ****         wave_word = *base_32ptr++;
 133:armwave.c     **** 
 134:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 135:armwave.c     ****             for(i = 0; i < 4; i++) {
 136:armwave.c     ****                 value = wave_word & 0xff;
 137:armwave.c     ****                 wave_word >>= 8;
 138:armwave.c     **** 
 139:armwave.c     ****                 if(value != 0) {
 140:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 141:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 142:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 143:armwave.c     **** 
 144:armwave.c     ****                     r = MIN(rr, 255);
 145:armwave.c     ****                     g = MIN(gg, 255);
 146:armwave.c     ****                     b = MIN(bb, 255);
 147:armwave.c     **** 
 148:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 149:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 150:armwave.c     **** 
 151:armwave.c     ****                     // Is there a better way?
 152:armwave.c     ****                     nsub = n + i;
 153:armwave.c     ****                     xx = nsub & 0xff;
 154:armwave.c     ****                     yy = nsub >> 8;
 155:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 156:armwave.c     ****                     *(out_buffer_base + offset) = word;
 157:armwave.c     ****                 }
 158:armwave.c     ****             }
 159:armwave.c     ****         } 
 160:armwave.c     ****     }
 161:armwave.c     **** }
 162:armwave.c     **** #endif
 163:armwave.c     **** 
 164:armwave.c     **** /*
 165:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 166:armwave.c     ****  * Rows are repeated as necessary.
 167:armwave.c     ****  */
 168:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 169:armwave.c     **** {
 588              		.loc 1 169 1 is_stmt 1 view -0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 8
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 170:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 592              		.loc 1 170 5 view .LVU137
 171:armwave.c     ****     // uint32_t ysub;
 172:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 593              		.loc 1 172 5 view .LVU138
 173:armwave.c     ****     uint8_t r, g, b, value; 
 594              		.loc 1 173 5 view .LVU139
 174:armwave.c     ****     // uint8_t row;
 175:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 595              		.loc 1 175 5 view .LVU140
 596              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 597              		.loc 1 169 1 is_stmt 0 view .LVU141
 598 0278 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 599              		.cfi_def_cfa_offset 36
 600              		.cfi_offset 4, -36
 601              		.cfi_offset 5, -32
 602              		.cfi_offset 6, -28
 603              		.cfi_offset 7, -24
 604              		.cfi_offset 8, -20
 605              		.cfi_offset 9, -16
 606              		.cfi_offset 10, -12
 607              		.cfi_offset 11, -8
 608              		.cfi_offset 14, -4
 609              	@ armwave.c:179:     assert(out_buffer != NULL);
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 177:armwave.c     ****     uint32_t offset;
 178:armwave.c     **** 
 179:armwave.c     ****     assert(out_buffer != NULL);
 610              		.loc 1 179 5 view .LVU142
 611 027c 000050E3 		cmp	r0, #0	@ out_buffer
 612              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 613              		.loc 1 175 15 view .LVU143
 614 0280 44619FE5 		ldr	r6, .L49	@ tmp203,
 615              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 616              		.loc 1 169 1 view .LVU144
 617 0284 0CD04DE2 		sub	sp, sp, #12	@,,
 618              		.cfi_def_cfa_offset 48
 619              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 620              		.loc 1 175 15 view .LVU145
 621 0288 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 622              	.LVL29:
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 623              		.loc 1 176 5 is_stmt 1 view .LVU146
 177:armwave.c     **** 
 624              		.loc 1 177 5 view .LVU147
 625              		.loc 1 179 5 view .LVU148
 626 028c 4900000A 		beq	.L46		@,
 180:armwave.c     **** 
 181:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 627              		.loc 1 181 5 view .LVU149
 628              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 629              		.loc 1 181 10 is_stmt 0 view .LVU150
 630 0290 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 631 0294 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 632              	.LVL30:
 182:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 183:armwave.c     **** 
 184:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 633              		.loc 1 184 5 is_stmt 1 view .LVU151
 634              		.loc 1 184 5 is_stmt 0 view .LVU152
 635 0298 000058E3 		cmp	r8, #0	@ npix,
 636 029c 0C0000DA 		ble	.L27		@,
 637              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 186:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 187:armwave.c     ****         // most normal waveforms.
 188:armwave.c     ****         wave_word = *base_32ptr++;
 189:armwave.c     **** 
 190:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 192:armwave.c     ****                 value = wave_word & 0xff;
 193:armwave.c     ****                 wave_word >>= 8;
 194:armwave.c     **** 
 195:armwave.c     ****                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 638              		.loc 1 197 52 view .LVU153
 639 02a0 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 640              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 641              		.loc 1 196 52 view .LVU154
 642 02a4 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 643              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 200:armwave.c     ****                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 202:armwave.c     ****                     b = MIN(bb, 255);
 203:armwave.c     **** 
 204:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 205:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 207:armwave.c     ****                     // Do line scaling as necessary.
 208:armwave.c     ****                     /*
 209:armwave.c     ****                     nsub = n + w;
 210:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 211:armwave.c     ****                     xx = (nsub >> 8);
 212:armwave.c     **** 
 213:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 214:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 215:armwave.c     ****                         *(out_buffer_base + offset) = word;
 216:armwave.c     ****                     }
 217:armwave.c     ****                     */
 218:armwave.c     **** 
 219:armwave.c     ****                     nsub = n + w;
 220:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 644              		.loc 1 220 57 view .LVU155
 645 02a8 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 646              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 197 52 view .LVU156
 648 02ac 00308DE5 		str	r3, [sp]	@ _10, %sfp
 649              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 650              		.loc 1 198 52 view .LVU157
 651 02b0 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 652              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 653              		.loc 1 184 11 view .LVU158
 654 02b4 0010A0E3 		mov	r1, #0	@ n,
 655              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 656              		.loc 1 198 52 view .LVU159
 657 02b8 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 658              	.LVL31:
 659              	.L34:
 188:armwave.c     **** 
 660              		.loc 1 188 9 is_stmt 1 view .LVU160
 661              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 662              		.loc 1 188 19 is_stmt 0 view .LVU161
 663 02bc 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 664              	.LVL32:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 665              		.loc 1 190 9 is_stmt 1 view .LVU162
 666              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 667              		.loc 1 190 11 is_stmt 0 view .LVU163
 668 02c0 000053E3 		cmp	r3, #0	@ wave_word,
 669 02c4 0400001A 		bne	.L47		@,
 670              	.L30:
 671              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 672              		.loc 1 184 28 view .LVU164
 673 02c8 041081E2 		add	r1, r1, #4	@ n, n,
 674              	.LVL33:
 675              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 676              		.loc 1 184 5 view .LVU165
 677 02cc 010058E1 		cmp	r8, r1	@ npix, n
 678 02d0 F9FFFFCA 		bgt	.L34		@,
 679              	.LVL34:
 680              	.L27:
 681              	@ armwave.c:232: }
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 223:armwave.c     **** 
 224:armwave.c     ****                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 228:armwave.c     ****                 }
 229:armwave.c     ****             }
 230:armwave.c     ****         }
 231:armwave.c     ****     }
 232:armwave.c     **** }
 682              		.loc 1 232 1 view .LVU166
 683 02d4 0CD08DE2 		add	sp, sp, #12	@,,
 684              		.cfi_remember_state
 685              		.cfi_def_cfa_offset 36
 686              		@ sp needed	@
 687 02d8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 688              	.LVL35:
 689              	.L47:
 690              		.cfi_restore_state
 691              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 692              		.loc 1 195 19 view .LVU167
 693 02dc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 694              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 695              		.loc 1 191 19 view .LVU168
 696 02e0 0070A0E3 		mov	r7, #0	@ w,
 697              	.LVL36:
 192:armwave.c     ****                 wave_word >>= 8;
 698              		.loc 1 192 17 is_stmt 1 view .LVU169
 193:armwave.c     **** 
 699              		.loc 1 193 17 view .LVU170
 700              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 701              		.loc 1 193 27 is_stmt 0 view .LVU171
 702 02e4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 703              	.LVL37:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 704              		.loc 1 195 17 is_stmt 1 view .LVU172
 705              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 706              		.loc 1 195 19 is_stmt 0 view .LVU173
 707 02e8 0500001A 		bne	.L48		@,
 708              	.L31:
 709              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 710              		.loc 1 191 32 view .LVU174
 711 02ec 017087E2 		add	r7, r7, #1	@ w, w,
 712              	.LVL38:
 713              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 714              		.loc 1 191 13 view .LVU175
 715 02f0 040057E3 		cmp	r7, #4	@ w,
 716 02f4 F3FFFF0A 		beq	.L30		@,
 192:armwave.c     ****                 wave_word >>= 8;
 717              		.loc 1 192 17 is_stmt 1 view .LVU176
 718              	.LVL39:
 193:armwave.c     **** 
 719              		.loc 1 193 17 view .LVU177
 720              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 721              		.loc 1 195 19 is_stmt 0 view .LVU178
 722 02f8 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 723              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 724              		.loc 1 193 27 view .LVU179
 725 02fc 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 726              	.LVL40:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 727              		.loc 1 195 17 is_stmt 1 view .LVU180
 728              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 729              		.loc 1 195 19 is_stmt 0 view .LVU181
 730 0300 F9FFFF0A 		beq	.L31		@,
 731              	.L48:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 732              		.loc 1 196 21 is_stmt 1 view .LVU182
 733              	.LVL41:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 734              		.loc 1 197 21 view .LVU183
 198:armwave.c     **** 
 735              		.loc 1 198 21 view .LVU184
 200:armwave.c     ****                     g = MIN(gg, 255);
 736              		.loc 1 200 21 view .LVU185
 201:armwave.c     ****                     b = MIN(bb, 255);
 737              		.loc 1 201 21 view .LVU186
 202:armwave.c     **** 
 738              		.loc 1 202 21 view .LVU187
 205:armwave.c     **** 
 739              		.loc 1 205 21 view .LVU188
 740              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 741              		.loc 1 198 55 is_stmt 0 view .LVU189
 742 0304 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 743 0308 075081E0 		add	r5, r1, r7	@ _120, n, w
 744 030c 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 745              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 746              		.loc 1 220 32 view .LVU190
 747 0310 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 748              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 749              		.loc 1 221 41 view .LVU191
 750 0314 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 751              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 752              		.loc 1 220 40 view .LVU192
 753 0318 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 754              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 755              		.loc 1 221 41 view .LVU193
 756 031c 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 757              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 758              		.loc 1 197 55 view .LVU194
 759 0320 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 760              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 761              		.loc 1 198 24 view .LVU195
 762 0324 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 763              	.LVL42:
 764              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 765              		.loc 1 220 40 view .LVU196
 766 0328 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 767              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 768              		.loc 1 221 46 view .LVU197
 769 032c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 770              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 771              		.loc 1 197 55 view .LVU198
 772 0330 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 773              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 774              		.loc 1 196 55 view .LVU199
 775 0334 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 776              	.LVL43:
 777              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 778              		.loc 1 202 25 view .LVU200
 779 0338 FF005AE3 		cmp	r10, #255	@ bb,
 780              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 781              		.loc 1 197 24 view .LVU201
 782 033c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 783              	.LVL44:
 784              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 785              		.loc 1 220 40 view .LVU202
 786 0340 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 787              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 788              		.loc 1 221 46 view .LVU203
 789 0344 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 790              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 791              		.loc 1 196 24 view .LVU204
 792 0348 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 793              	.LVL45:
 794              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 795              		.loc 1 202 25 view .LVU205
 796 034c FFA0A0A3 		movge	r10, #255	@ bb,
 797              	.LVL46:
 798              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 799              		.loc 1 201 25 view .LVU206
 800 0350 FF0054E3 		cmp	r4, #255	@ gg,
 801 0354 FF40A0A3 		movge	r4, #255	@ gg,
 802              	.LVL47:
 803              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 804              		.loc 1 200 25 view .LVU207
 805 0358 FF005CE3 		cmp	ip, #255	@ rr,
 806              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 807              		.loc 1 205 56 view .LVU208
 808 035c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 809              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 810              		.loc 1 220 24 view .LVU209
 811 0360 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 812              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 813              		.loc 1 200 25 view .LVU210
 814 0364 FFC0A0A3 		movge	ip, #255	@ rr,
 815              	.LVL48:
 816              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 817              		.loc 1 205 44 view .LVU211
 818 0368 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 819 036c FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 820              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 821              		.loc 1 205 56 view .LVU212
 822 0370 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 823              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 824              		.loc 1 205 51 view .LVU213
 825 0374 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 826              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 827              		.loc 1 205 62 view .LVU214
 828 0378 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 829 037c 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 830              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 831              		.loc 1 220 24 view .LVU215
 832 0380 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 833              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 834              		.loc 1 221 24 view .LVU216
 835 0384 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 836              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 837              		.loc 1 205 26 view .LVU217
 838 0388 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 839              	.LVL49:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 840              		.loc 1 219 21 is_stmt 1 view .LVU218
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 841              		.loc 1 220 21 view .LVU219
 221:armwave.c     ****                     xx = (nsub >> 8);
 842              		.loc 1 221 21 view .LVU220
 843              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 844              		.loc 1 222 32 is_stmt 0 view .LVU221
 845 038c 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 846              	.LVL50:
 847              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 848              		.loc 1 221 24 view .LVU222
 849 0390 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 850              	.LVL51:
 222:armwave.c     **** 
 851              		.loc 1 222 21 is_stmt 1 view .LVU223
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 852              		.loc 1 224 21 view .LVU224
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 853              		.loc 1 224 21 is_stmt 0 view .LVU225
 854 0394 090052E1 		cmp	r2, r9	@ yy, ye
 855 0398 D3FFFF2A 		bcs	.L31		@,
 856              	.LVL52:
 857              	.L32:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 858              		.loc 1 225 25 is_stmt 1 discriminator 3 view .LVU226
 226:armwave.c     ****                     }
 859              		.loc 1 226 25 discriminator 3 view .LVU227
 860              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 861              		.loc 1 225 43 is_stmt 0 discriminator 3 view .LVU228
 862 039c 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 863              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 864              		.loc 1 226 43 discriminator 3 view .LVU229
 865 03a0 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 866              	.LVL53:
 867              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 868              		.loc 1 224 42 discriminator 3 view .LVU230
 869 03a4 012082E2 		add	r2, r2, #1	@ yy, yy,
 870              	.LVL54:
 871              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 872              		.loc 1 224 21 discriminator 3 view .LVU231
 873 03a8 020059E1 		cmp	r9, r2	@ ye, yy
 874              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 875              		.loc 1 226 53 discriminator 3 view .LVU232
 876 03ac 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 877              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 878              		.loc 1 224 21 discriminator 3 view .LVU233
 879 03b0 F9FFFF1A 		bne	.L32		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 880              		.loc 1 224 21 discriminator 3 view .LVU234
 881 03b4 CCFFFFEA 		b	.L31		@
 882              	.LVL55:
 883              	.L46:
 179:armwave.c     **** 
 884              		.loc 1 179 5 is_stmt 1 discriminator 1 view .LVU235
 885 03b8 10309FE5 		ldr	r3, .L49+4	@,
 886 03bc B320A0E3 		mov	r2, #179	@,
 887 03c0 0C109FE5 		ldr	r1, .L49+8	@,
 888 03c4 0C009FE5 		ldr	r0, .L49+12	@,
 889              	.LVL56:
 179:armwave.c     **** 
 890              		.loc 1 179 5 is_stmt 0 discriminator 1 view .LVU236
 891 03c8 FEFFFFEB 		bl	__assert_fail		@
 892              	.LVL57:
 893              	.L50:
 179:armwave.c     **** 
 894              		.loc 1 179 5 discriminator 1 view .LVU237
 895              		.align	2
 896              	.L49:
 897 03cc 00000000 		.word	g_armwave_state
 898 03d0 00000000 		.word	.LANCHOR0
 899 03d4 84000000 		.word	.LC4
 900 03d8 90000000 		.word	.LC5
 901              		.cfi_endproc
 902              	.LFE60:
 904              		.align	2
 905              		.global	armwave_setup_render
 906              		.syntax unified
 907              		.arm
 908              		.fpu vfp
 910              	armwave_setup_render:
 911              	.LVL58:
 912              	.LFB61:
 233:armwave.c     **** 
 234:armwave.c     **** /*
 235:armwave.c     ****  * Setup the renderer with passed parameters.
 236:armwave.c     ****  */
 237:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 238:armwave.c     **** {
 913              		.loc 1 238 1 is_stmt 1 view -0
 914              		.cfi_startproc
 915              		@ args = 12, pretend = 0, frame = 0
 916              		@ frame_needed = 0, uses_anonymous_args = 0
 239:armwave.c     ****     uint32_t length, xx;
 917              		.loc 1 239 5 view .LVU239
 240:armwave.c     ****     float points_per_pixel;
 918              		.loc 1 240 5 view .LVU240
 241:armwave.c     **** 
 242:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 919              		.loc 1 242 5 view .LVU241
 920              	@ armwave.c:238: {
 238:armwave.c     ****     uint32_t length, xx;
 921              		.loc 1 238 1 is_stmt 0 view .LVU242
 922 03dc F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 923              		.cfi_def_cfa_offset 28
 924              		.cfi_offset 4, -28
 925              		.cfi_offset 5, -24
 926              		.cfi_offset 6, -20
 927              		.cfi_offset 7, -16
 928              		.cfi_offset 8, -12
 929              		.cfi_offset 9, -8
 930              		.cfi_offset 14, -4
 931 03e0 028B2DED 		vpush.64	{d8}	@
 932              		.cfi_def_cfa_offset 36
 933              		.cfi_offset 80, -36
 934              		.cfi_offset 81, -32
 935 03e4 0040A0E1 		mov	r4, r0	@ start_point, start_point
 936 03e8 0150A0E1 		mov	r5, r1	@ end_point, end_point
 937 03ec 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 938 03f0 14D04DE2 		sub	sp, sp, #20	@,,
 939              		.cfi_def_cfa_offset 56
 940              	@ armwave.c:238: {
 238:armwave.c     ****     uint32_t length, xx;
 941              		.loc 1 238 1 view .LVU243
 942 03f4 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 943 03f8 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 944 03fc 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 945              	@ armwave.c:242:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 946              		.loc 1 242 5 view .LVU244
 947 0400 00308DE5 		str	r3, [sp]	@ wave_stride,
 948 0404 F460CDE1 		strd	r6, [sp, #4]	@,,
 949 0408 0230A0E1 		mov	r3, r2	@, waves_max
 950              	.LVL59:
 951              		.loc 1 242 5 view .LVU245
 952 040c 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 953 0410 0120A0E1 		mov	r2, r1	@, end_point
 954              	.LVL60:
 955              		.loc 1 242 5 view .LVU246
 956 0414 0010A0E1 		mov	r1, r0	@, start_point
 957              	.LVL61:
 958              		.loc 1 242 5 view .LVU247
 959 0418 D0019FE5 		ldr	r0, .L65+12	@,
 960              	.LVL62:
 961              		.loc 1 242 5 view .LVU248
 962 041c FEFFFFEB 		bl	printf		@
 963              	.LVL63:
 243:armwave.c     **** 
 244:armwave.c     ****     // TODO these asserts should instead raise PyExc
 245:armwave.c     ****     assert(start_point < end_point);
 964              		.loc 1 245 5 is_stmt 1 view .LVU249
 965 0420 050054E1 		cmp	r4, r5	@ start_point, end_point
 966 0424 5F00002A 		bcs	.L62		@,
 246:armwave.c     **** 
 247:armwave.c     ****     /*
 248:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 249:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 250:armwave.c     **** 
 251:armwave.c     ****     if(target_height == 256) {
 252:armwave.c     ****         g_armwave_state.row_shift = 8;
 253:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 254:armwave.c     ****     } else if(target_height == 512) {
 255:armwave.c     ****         g_armwave_state.row_shift = 9;
 256:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 257:armwave.c     ****     } else if(target_height == 1024) {
 258:armwave.c     ****         g_armwave_state.row_shift = 10;
 259:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 260:armwave.c     ****     } else if(target_height == 2048) {
 261:armwave.c     ****         g_armwave_state.row_shift = 11;
 262:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 263:armwave.c     ****     }
 264:armwave.c     ****     */
 265:armwave.c     **** 
 266:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 267:armwave.c     ****     g_armwave_state.xstride = target_height;
 967              		.loc 1 267 5 view .LVU250
 968              	@ armwave.c:278:     g_armwave_state.wave_length = end_point - start_point;
 268:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 270:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 271:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 272:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 273:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 274:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 275:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 276:armwave.c     ****     g_armwave_state.target_width = target_width;
 277:armwave.c     ****     g_armwave_state.target_height = target_height;
 278:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 969              		.loc 1 278 45 is_stmt 0 view .LVU251
 970 0428 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 971              	.LVL64:
 972              	@ armwave.c:268:     g_armwave_state.vscale_frac = target_height / 255.0f;
 268:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 973              		.loc 1 268 49 view .LVU252
 974 042c 6C6A9FED 		vldr.32	s12, .L65	@ tmp174,
 975              	@ armwave.c:282:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 279:armwave.c     **** 
 280:armwave.c     ****     // Calculate compound scaler
 281:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 282:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 976              		.loc 1 282 48 view .LVU253
 977 0430 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 978              	@ armwave.c:282:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 979              		.loc 1 282 79 view .LVU254
 980 0434 6B6ADFED 		vldr.32	s13, .L65+4	@ tmp198,
 981              	@ armwave.c:275:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 275:armwave.c     ****     g_armwave_state.target_width = target_width;
 982              		.loc 1 275 90 view .LVU255
 983 0438 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 984              	@ armwave.c:267:     g_armwave_state.xstride = target_height;
 267:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 985              		.loc 1 267 29 view .LVU256
 986 043c B0419FE5 		ldr	r4, .L65+16	@ tmp241,
 987              	.LVL65:
 988              	@ armwave.c:282:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 989              		.loc 1 282 48 view .LVU257
 990 0440 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 991              	@ armwave.c:268:     g_armwave_state.vscale_frac = target_height / 255.0f;
 268:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 992              		.loc 1 268 49 view .LVU258
 993 0444 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 994              	@ armwave.c:273:     g_armwave_state.size = target_height * target_width;
 273:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 995              		.loc 1 273 42 view .LVU259
 996 0448 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 997              	@ armwave.c:275:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 275:armwave.c     ****     g_armwave_state.target_width = target_width;
 998              		.loc 1 275 74 view .LVU260
 999 044c 033383E0 		add	r3, r3, r3, lsl #6	@ tmp188, tmp185, tmp185,
 1000              	@ armwave.c:268:     g_armwave_state.vscale_frac = target_height / 255.0f;
 268:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1001              		.loc 1 268 49 view .LVU261
 1002 0450 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 1003              	@ armwave.c:282:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1004              		.loc 1 282 48 view .LVU262
 1005 0454 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1006              	@ armwave.c:275:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 275:armwave.c     ****     g_armwave_state.target_width = target_width;
 1007              		.loc 1 275 74 view .LVU263
 1008 0458 0331A0E1 		lsl	r3, r3, #2	@ tmp189, tmp188,
 1009              	@ armwave.c:274:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 274:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1010              		.loc 1 274 37 view .LVU264
 1011 045c 012CA0E3 		mov	r2, #256	@ tmp184,
 1012              	@ armwave.c:273:     g_armwave_state.size = target_height * target_width;
 273:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1013              		.loc 1 273 26 view .LVU265
 1014 0460 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1015              	@ armwave.c:282:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1016              		.loc 1 282 48 view .LVU266
 1017 0464 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1018              	@ armwave.c:284:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 283:armwave.c     **** 
 284:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1019              		.loc 1 284 5 view .LVU267
 1020 0468 0310A0E1 		mov	r1, r3	@, tmp189
 1021              	@ armwave.c:274:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 274:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1022              		.loc 1 274 37 view .LVU268
 1023 046c 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1024              	@ armwave.c:275:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 275:armwave.c     ****     g_armwave_state.target_width = target_width;
 1025              		.loc 1 275 34 view .LVU269
 1026 0470 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1027              	@ armwave.c:284:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1028              		.loc 1 284 5 view .LVU270
 1029 0474 7C019FE5 		ldr	r0, .L65+20	@,
 1030              	@ armwave.c:267:     g_armwave_state.xstride = target_height;
 267:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1031              		.loc 1 267 29 view .LVU271
 1032 0478 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 268:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1033              		.loc 1 268 5 is_stmt 1 view .LVU272
 1034              	@ armwave.c:270:     g_armwave_state.wave_stride = wave_stride;
 270:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1035              		.loc 1 270 33 is_stmt 0 view .LVU273
 1036 047c 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1037              	@ armwave.c:271:     g_armwave_state.waves_max = waves_max;
 271:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1038              		.loc 1 271 31 view .LVU274
 1039 0480 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1040              	@ armwave.c:282:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 282:armwave.c     **** 
 1041              		.loc 1 282 48 view .LVU275
 1042 0484 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1043              	@ armwave.c:272:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 272:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1044              		.loc 1 272 27 view .LVU276
 1045 0488 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1046              	@ armwave.c:277:     g_armwave_state.target_height = target_height;
 277:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1047              		.loc 1 277 35 view .LVU277
 1048 048c F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1049              	@ armwave.c:278:     g_armwave_state.wave_length = end_point - start_point;
 278:armwave.c     **** 
 1050              		.loc 1 278 33 view .LVU278
 1051 0490 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1052              	@ armwave.c:268:     g_armwave_state.vscale_frac = target_height / 255.0f;
 268:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1053              		.loc 1 268 49 view .LVU279
 1054 0494 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1055              	@ armwave.c:282:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 282:armwave.c     **** 
 1056              		.loc 1 282 79 view .LVU280
 1057 0498 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1058              	@ armwave.c:281:     g_armwave_state.cmp_x_bitdepth_scale = \
 281:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1059              		.loc 1 281 42 view .LVU281
 1060 049c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1061              	@ armwave.c:268:     g_armwave_state.vscale_frac = target_height / 255.0f;
 268:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1062              		.loc 1 268 33 view .LVU282
 1063 04a0 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 269:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1064              		.loc 1 269 5 is_stmt 1 view .LVU283
 1065              	@ armwave.c:281:     g_armwave_state.cmp_x_bitdepth_scale = \
 281:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1066              		.loc 1 281 42 is_stmt 0 view .LVU284
 1067 04a4 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1068              	@ armwave.c:269:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 269:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1069              		.loc 1 269 30 view .LVU285
 1070 04a8 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1071              	@ armwave.c:284:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1072              		.loc 1 284 5 view .LVU286
 1073 04ac 0C30A0E1 		mov	r3, ip	@, _19
 1074 04b0 0C20A0E1 		mov	r2, ip	@, tmp3
 1075              	@ armwave.c:281:     g_armwave_state.cmp_x_bitdepth_scale = \
 281:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1076              		.loc 1 281 42 view .LVU287
 1077 04b4 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1078              	@ armwave.c:269:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 269:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1079              		.loc 1 269 30 view .LVU288
 1080 04b8 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 270:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1081              		.loc 1 270 5 is_stmt 1 view .LVU289
 271:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1082              		.loc 1 271 5 view .LVU290
 272:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1083              		.loc 1 272 5 view .LVU291
 273:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1084              		.loc 1 273 5 view .LVU292
 274:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1085              		.loc 1 274 5 view .LVU293
 275:armwave.c     ****     g_armwave_state.target_width = target_width;
 1086              		.loc 1 275 5 view .LVU294
 276:armwave.c     ****     g_armwave_state.target_height = target_height;
 1087              		.loc 1 276 5 view .LVU295
 277:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1088              		.loc 1 277 5 view .LVU296
 278:armwave.c     **** 
 1089              		.loc 1 278 5 view .LVU297
 281:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1090              		.loc 1 281 5 view .LVU298
 1091              		.loc 1 284 5 view .LVU299
 1092 04bc FEFFFFEB 		bl	printf		@
 1093              	.LVL66:
 285:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 286:armwave.c     **** 
 287:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 288:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 289:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 290:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1094              		.loc 1 290 5 view .LVU300
 1095              	@ armwave.c:292:     if(g_armwave_state.ch1_buffer != NULL)
 291:armwave.c     **** 
 292:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1096              		.loc 1 292 23 is_stmt 0 view .LVU301
 1097 04c0 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1098              	@ armwave.c:290:     g_armwave_state.slice_height = 64;  
 290:armwave.c     **** 
 1099              		.loc 1 290 34 view .LVU302
 1100 04c4 4030A0E3 		mov	r3, #64	@ tmp202,
 1101              	@ armwave.c:292:     if(g_armwave_state.ch1_buffer != NULL)
 1102              		.loc 1 292 7 view .LVU303
 1103 04c8 000050E3 		cmp	r0, #0	@ _20,
 1104              	@ armwave.c:290:     g_armwave_state.slice_height = 64;  
 290:armwave.c     **** 
 1105              		.loc 1 290 34 view .LVU304
 1106 04cc 443084E5 		str	r3, [r4, #68]	@ tmp202, g_armwave_state.slice_height
 1107              		.loc 1 292 5 is_stmt 1 view .LVU305
 1108              	@ armwave.c:292:     if(g_armwave_state.ch1_buffer != NULL)
 1109              		.loc 1 292 7 is_stmt 0 view .LVU306
 1110 04d0 0000000A 		beq	.L53		@,
 293:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1111              		.loc 1 293 9 is_stmt 1 view .LVU307
 1112 04d4 FEFFFFEB 		bl	free		@
 1113              	.LVL67:
 1114              	.L53:
 294:armwave.c     **** 
 295:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1115              		.loc 1 295 5 view .LVU308
 1116              	@ armwave.c:295:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1117              		.loc 1 295 34 is_stmt 0 view .LVU309
 1118 04d8 0110A0E3 		mov	r1, #1	@,
 1119 04dc 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1120 04e0 FEFFFFEB 		bl	calloc		@
 1121              	.LVL68:
 1122              	@ armwave.c:297:     assert(g_armwave_state.ch1_buffer != NULL);
 296:armwave.c     **** 
 297:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1123              		.loc 1 297 5 view .LVU310
 1124 04e4 000050E3 		cmp	r0, #0	@ _23,
 1125              	@ armwave.c:295:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 295:armwave.c     **** 
 1126              		.loc 1 295 34 view .LVU311
 1127 04e8 0070A0E1 		mov	r7, r0	@ _23,
 1128              	@ armwave.c:295:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 295:armwave.c     **** 
 1129              		.loc 1 295 32 view .LVU312
 1130 04ec 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1131              		.loc 1 297 5 is_stmt 1 view .LVU313
 1132 04f0 3600000A 		beq	.L63		@,
 298:armwave.c     **** 
 299:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 300:armwave.c     ****     length = end_point - start_point;
 1133              		.loc 1 300 5 view .LVU314
 1134              	.LVL69:
 301:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1135              		.loc 1 301 5 view .LVU315
 1136              	@ armwave.c:301:     points_per_pixel = length / ((float)(target_width));
 1137              		.loc 1 301 34 is_stmt 0 view .LVU316
 1138 04f4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1139              	@ armwave.c:301:     points_per_pixel = length / ((float)(target_width));
 1140              		.loc 1 301 22 view .LVU317
 1141 04f8 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1142              	@ armwave.c:302:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 302:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1143              		.loc 1 302 60 view .LVU318
 1144 04fc 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp251, g_armwave_state.slice_height
 1145              	@ armwave.c:303:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 303:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1146              		.loc 1 303 40 view .LVU319
 1147 0500 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1148              	@ armwave.c:301:     points_per_pixel = length / ((float)(target_width));
 301:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1149              		.loc 1 301 34 view .LVU320
 1150 0504 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp214, target_width
 1151              	@ armwave.c:301:     points_per_pixel = length / ((float)(target_width));
 301:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1152              		.loc 1 301 22 view .LVU321
 1153 0508 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp213, _13
 1154              	@ armwave.c:302:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 302:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1155              		.loc 1 302 60 view .LVU322
 1156 050c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp251
 1157              	@ armwave.c:301:     points_per_pixel = length / ((float)(target_width));
 301:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1158              		.loc 1 301 22 view .LVU323
 1159 0510 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp213, tmp214
 1160              	.LVL70:
 302:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1161              		.loc 1 302 5 is_stmt 1 view .LVU324
 1162              	@ armwave.c:302:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 302:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1163              		.loc 1 302 60 is_stmt 0 view .LVU325
 1164 0514 087A67EE 		vmul.f32	s15, s14, s16	@ tmp219, tmp217, points_per_pixel
 1165              	@ armwave.c:302:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 302:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1166              		.loc 1 302 41 view .LVU326
 1167 0518 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 1168 051c 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 1169              		.loc 1 303 5 is_stmt 1 view .LVU327
 1170              	@ armwave.c:303:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1171              		.loc 1 303 40 is_stmt 0 view .LVU328
 1172 0520 FEFFFFEB 		bl	malloc		@
 1173              	.LVL71:
 1174              	@ armwave.c:305:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 304:armwave.c     **** 
 305:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1175              		.loc 1 305 5 view .LVU329
 1176 0524 000050E3 		cmp	r0, #0	@ _31,
 1177              	@ armwave.c:303:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 303:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1178              		.loc 1 303 40 view .LVU330
 1179 0528 0060A0E1 		mov	r6, r0	@ _31,
 1180              	@ armwave.c:303:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 303:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1181              		.loc 1 303 38 view .LVU331
 1182 052c 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1183              		.loc 1 305 5 is_stmt 1 view .LVU332
 1184 0530 2100000A 		beq	.L64		@,
 1185              	@ armwave.c:308:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 306:armwave.c     **** 
 307:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 308:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1186              		.loc 1 308 54 is_stmt 0 view .LVU333
 1187 0534 2C7ADFED 		vldr.32	s15, .L65+8	@ tmp229,
 1188 0538 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _31,
 1189              	@ armwave.c:307:     for(xx = 0; xx < length; xx++) {
 307:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1190              		.loc 1 307 12 view .LVU334
 1191 053c 0030A0E3 		mov	r3, #0	@ xx,
 1192              	@ armwave.c:308:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1193              		.loc 1 308 54 view .LVU335
 1194 0540 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1195              	.L56:
 1196              	.LVL72:
 1197              		.loc 1 308 9 is_stmt 1 discriminator 3 view .LVU336
 1198              	@ armwave.c:308:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1199              		.loc 1 308 74 is_stmt 0 discriminator 3 view .LVU337
 1200 0544 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1201              	@ armwave.c:307:     for(xx = 0; xx < length; xx++) {
 307:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1202              		.loc 1 307 32 discriminator 3 view .LVU338
 1203 0548 013083E2 		add	r3, r3, #1	@ xx, xx,
 1204              	.LVL73:
 1205              	@ armwave.c:307:     for(xx = 0; xx < length; xx++) {
 307:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1206              		.loc 1 307 5 discriminator 3 view .LVU339
 1207 054c 030055E1 		cmp	r5, r3	@ _13, xx
 1208              	@ armwave.c:308:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1209              		.loc 1 308 74 discriminator 3 view .LVU340
 1210 0550 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1211 0554 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1212              	@ armwave.c:308:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1213              		.loc 1 308 46 discriminator 3 view .LVU341
 1214 0558 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1215 055c 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1216 0560 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1217              	@ armwave.c:307:     for(xx = 0; xx < length; xx++) {
 307:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1218              		.loc 1 307 5 discriminator 3 view .LVU342
 1219 0564 F6FFFF1A 		bne	.L56		@,
 309:armwave.c     **** 
 310:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 311:armwave.c     ****     }
 312:armwave.c     **** 
 313:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1220              		.loc 1 313 5 is_stmt 1 view .LVU343
 1221              	@ armwave.c:313:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1222              		.loc 1 313 34 is_stmt 0 view .LVU344
 1223 0568 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1224 056c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1225 0570 FEFFFFEB 		bl	malloc		@
 1226              	.LVL74:
 1227              	@ armwave.c:315:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 314:armwave.c     **** 
 315:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1228              		.loc 1 315 5 view .LVU345
 1229 0574 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1230 0578 0620A0E1 		mov	r2, r6	@, _31
 1231 057c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1232 0580 0710A0E1 		mov	r1, r7	@, _23
 1233              	@ armwave.c:313:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 313:armwave.c     **** 
 1234              		.loc 1 313 34 view .LVU346
 1235 0584 00C0A0E1 		mov	ip, r0	@ tmp236,
 1236              	@ armwave.c:315:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1237              		.loc 1 315 5 view .LVU347
 1238 0588 0030A0E1 		mov	r3, r0	@, tmp236
 1239              	@ armwave.c:313:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 313:armwave.c     **** 
 1240              		.loc 1 313 32 view .LVU348
 1241 058c 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1242              		.loc 1 315 5 is_stmt 1 view .LVU349
 1243 0590 64009FE5 		ldr	r0, .L65+24	@,
 1244 0594 FEFFFFEB 		bl	printf		@
 1245              	.LVL75:
 316:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 318:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 319:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 320:armwave.c     **** 
 321:armwave.c     ****     malloc_stats();
 1246              		.loc 1 321 5 view .LVU350
 1247              	@ armwave.c:322: }
 322:armwave.c     **** }
 1248              		.loc 1 322 1 is_stmt 0 view .LVU351
 1249 0598 14D08DE2 		add	sp, sp, #20	@,,
 1250              		.cfi_remember_state
 1251              		.cfi_def_cfa_offset 36
 1252              		@ sp needed	@
 1253 059c 028BBDEC 		vldm	sp!, {d8}	@
 1254              		.cfi_restore 80
 1255              		.cfi_restore 81
 1256              		.cfi_def_cfa_offset 28
 1257              	.LVL76:
 1258              		.loc 1 322 1 view .LVU352
 1259 05a0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1260              		.cfi_restore 14
 1261              		.cfi_restore 9
 1262              		.cfi_restore 8
 1263              		.cfi_restore 7
 1264              		.cfi_restore 6
 1265              		.cfi_restore 5
 1266              		.cfi_restore 4
 1267              		.cfi_def_cfa_offset 0
 1268              	.LVL77:
 1269              	@ armwave.c:321:     malloc_stats();
 321:armwave.c     **** }
 1270              		.loc 1 321 5 view .LVU353
 1271 05a4 FEFFFFEA 		b	malloc_stats		@
 1272              	.LVL78:
 1273              	.L62:
 1274              		.cfi_restore_state
 245:armwave.c     **** 
 1275              		.loc 1 245 5 is_stmt 1 discriminator 1 view .LVU354
 1276 05a8 50309FE5 		ldr	r3, .L65+28	@,
 1277 05ac F520A0E3 		mov	r2, #245	@,
 1278 05b0 4C109FE5 		ldr	r1, .L65+32	@,
 1279 05b4 4C009FE5 		ldr	r0, .L65+36	@,
 1280 05b8 FEFFFFEB 		bl	__assert_fail		@
 1281              	.LVL79:
 1282              	.L64:
 305:armwave.c     **** 
 1283              		.loc 1 305 5 discriminator 1 view .LVU355
 1284 05bc 3C309FE5 		ldr	r3, .L65+28	@,
 1285 05c0 44209FE5 		ldr	r2, .L65+40	@,
 1286 05c4 38109FE5 		ldr	r1, .L65+32	@,
 1287 05c8 40009FE5 		ldr	r0, .L65+44	@,
 1288 05cc FEFFFFEB 		bl	__assert_fail		@
 1289              	.LVL80:
 1290              	.L63:
 297:armwave.c     **** 
 1291              		.loc 1 297 5 discriminator 1 view .LVU356
 1292 05d0 28309FE5 		ldr	r3, .L65+28	@,
 1293 05d4 38209FE5 		ldr	r2, .L65+48	@,
 1294 05d8 24109FE5 		ldr	r1, .L65+32	@,
 1295 05dc 34009FE5 		ldr	r0, .L65+52	@,
 1296 05e0 FEFFFFEB 		bl	__assert_fail		@
 1297              	.LVL81:
 1298              	.L66:
 1299              		.align	2
 1300              	.L65:
 1301 05e4 00007F43 		.word	1132396544
 1302 05e8 00008043 		.word	1132462080
 1303 05ec 0000803F 		.word	1065353216
 1304 05f0 A4000000 		.word	.LC6
 1305 05f4 00000000 		.word	g_armwave_state
 1306 05f8 E8000000 		.word	.LC8
 1307 05fc 6C010000 		.word	.LC11
 1308 0600 1C000000 		.word	.LANCHOR0+28
 1309 0604 84000000 		.word	.LC4
 1310 0608 D0000000 		.word	.LC7
 1311 060c 31010000 		.word	305
 1312 0610 40010000 		.word	.LC10
 1313 0614 29010000 		.word	297
 1314 0618 1C010000 		.word	.LC9
 1315              		.cfi_endproc
 1316              	.LFE61:
 1318              		.align	2
 1319              		.global	armwave_set_wave_pointer
 1320              		.syntax unified
 1321              		.arm
 1322              		.fpu vfp
 1324              	armwave_set_wave_pointer:
 1325              	.LVL82:
 1326              	.LFB62:
 323:armwave.c     **** 
 324:armwave.c     **** /*
 325:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 326:armwave.c     ****  * in the future.
 327:armwave.c     ****  */
 328:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 329:armwave.c     **** {
 1327              		.loc 1 329 1 view -0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 0
 1330              		@ frame_needed = 0, uses_anonymous_args = 0
 330:armwave.c     ****     assert(wave_buffer != NULL);
 1331              		.loc 1 330 5 view .LVU358
 1332 061c 000050E3 		cmp	r0, #0	@ wave_buffer
 1333              		.loc 1 330 5 is_stmt 0 view .LVU359
 1334 0620 0200000A 		beq	.L72		@,
 331:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1335              		.loc 1 331 5 is_stmt 1 view .LVU360
 1336              	@ armwave.c:331:     g_armwave_state.wave_buffer = wave_buffer;
 1337              		.loc 1 331 33 is_stmt 0 view .LVU361
 1338 0624 1C309FE5 		ldr	r3, .L73	@ tmp116,
 1339 0628 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1340 062c 1EFF2FE1 		bx	lr	@
 1341              	.L72:
 330:armwave.c     ****     assert(wave_buffer != NULL);
 1342              		.loc 1 330 5 is_stmt 1 discriminator 1 view .LVU362
 1343              	@ armwave.c:329: {
 329:armwave.c     ****     assert(wave_buffer != NULL);
 1344              		.loc 1 329 1 is_stmt 0 discriminator 1 view .LVU363
 1345 0630 10402DE9 		push	{r4, lr}	@
 1346              		.cfi_def_cfa_offset 8
 1347              		.cfi_offset 4, -8
 1348              		.cfi_offset 14, -4
 1349              	@ armwave.c:330:     assert(wave_buffer != NULL);
 330:armwave.c     ****     assert(wave_buffer != NULL);
 1350              		.loc 1 330 5 discriminator 1 view .LVU364
 1351 0634 10309FE5 		ldr	r3, .L73+4	@,
 1352 0638 10209FE5 		ldr	r2, .L73+8	@,
 1353 063c 10109FE5 		ldr	r1, .L73+12	@,
 1354 0640 10009FE5 		ldr	r0, .L73+16	@,
 1355              	.LVL83:
 330:armwave.c     ****     assert(wave_buffer != NULL);
 1356              		.loc 1 330 5 discriminator 1 view .LVU365
 1357 0644 FEFFFFEB 		bl	__assert_fail		@
 1358              	.LVL84:
 1359              	.L74:
 1360              		.align	2
 1361              	.L73:
 1362 0648 00000000 		.word	g_armwave_state
 1363 064c 34000000 		.word	.LANCHOR0+52
 1364 0650 4A010000 		.word	330
 1365 0654 84000000 		.word	.LC4
 1366 0658 90010000 		.word	.LC12
 1367              		.cfi_endproc
 1368              	.LFE62:
 1370              		.align	2
 1371              		.global	armwave_set_wave_pointer_as_testbuf
 1372              		.syntax unified
 1373              		.arm
 1374              		.fpu vfp
 1376              	armwave_set_wave_pointer_as_testbuf:
 1377              	.LVL85:
 1378              	.LFB63:
 332:armwave.c     **** }
 333:armwave.c     **** 
 334:armwave.c     **** /*
 335:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 336:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 337:armwave.c     ****  */
 338:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 339:armwave.c     **** {
 1379              		.loc 1 339 1 is_stmt 1 view -0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 1383              		@ link register save eliminated.
 340:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1384              		.loc 1 340 5 view .LVU367
 1385              	@ armwave.c:340:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1386              		.loc 1 340 29 is_stmt 0 view .LVU368
 1387 065c 24309FE5 		ldr	r3, .L78	@ tmp117,
 1388              	@ armwave.c:340:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1389              		.loc 1 340 7 view .LVU369
 1390 0660 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1391 0664 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1392 0668 0400003A 		bcc	.L77		@,
 341:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 342:armwave.c     ****         return;
 343:armwave.c     ****     }
 344:armwave.c     **** 
 345:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1393              		.loc 1 345 5 is_stmt 1 view .LVU370
 1394              	@ armwave.c:345:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1395              		.loc 1 345 111 is_stmt 0 view .LVU371
 1396 066c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1397              	@ armwave.c:345:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1398              		.loc 1 345 68 view .LVU372
 1399 0670 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1400 0674 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1401              	.LVL86:
 1402              	@ armwave.c:345:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1403              		.loc 1 345 33 view .LVU373
 1404 0678 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1405              	@ armwave.c:346: }
 346:armwave.c     **** }
 1406              		.loc 1 346 1 view .LVU374
 1407 067c 1EFF2FE1 		bx	lr	@
 1408              	.LVL87:
 1409              	.L77:
 341:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1410              		.loc 1 341 9 is_stmt 1 view .LVU375
 1411 0680 04009FE5 		ldr	r0, .L78+4	@,
 1412              	.LVL88:
 341:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1413              		.loc 1 341 9 is_stmt 0 view .LVU376
 1414 0684 FEFFFFEA 		b	puts		@
 1415              	.LVL89:
 1416              	.L79:
 1417              		.align	2
 1418              	.L78:
 1419 0688 00000000 		.word	g_armwave_state
 1420 068c A4010000 		.word	.LC13
 1421              		.cfi_endproc
 1422              	.LFE63:
 1424              		.align	2
 1425              		.global	armwave_set_wave_pointer_u32
 1426              		.syntax unified
 1427              		.arm
 1428              		.fpu vfp
 1430              	armwave_set_wave_pointer_u32:
 1431              	.LVL90:
 1432              	.LFB64:
 347:armwave.c     **** 
 348:armwave.c     **** /*
 349:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 350:armwave.c     ****  * disjointed buffers in the future.
 351:armwave.c     ****  */
 352:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 353:armwave.c     **** {
 1433              		.loc 1 353 1 is_stmt 1 view -0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 354:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1437              		.loc 1 354 5 view .LVU378
 1438 0690 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1439              		.loc 1 354 5 is_stmt 0 view .LVU379
 1440 0694 0200000A 		beq	.L85		@,
 355:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1441              		.loc 1 355 5 is_stmt 1 view .LVU380
 1442              	@ armwave.c:355:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1443              		.loc 1 355 33 is_stmt 0 view .LVU381
 1444 0698 1C309FE5 		ldr	r3, .L86	@ tmp117,
 1445 069c 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1446 06a0 1EFF2FE1 		bx	lr	@
 1447              	.L85:
 354:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1448              		.loc 1 354 5 is_stmt 1 discriminator 1 view .LVU382
 1449              	@ armwave.c:353: {
 353:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1450              		.loc 1 353 1 is_stmt 0 discriminator 1 view .LVU383
 1451 06a4 10402DE9 		push	{r4, lr}	@
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
 1454              		.cfi_offset 14, -4
 1455              	@ armwave.c:354:     assert(wave_buffer_ptr != 0);
 354:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1456              		.loc 1 354 5 discriminator 1 view .LVU384
 1457 06a8 10309FE5 		ldr	r3, .L86+4	@,
 1458 06ac 10209FE5 		ldr	r2, .L86+8	@,
 1459 06b0 10109FE5 		ldr	r1, .L86+12	@,
 1460 06b4 10009FE5 		ldr	r0, .L86+16	@,
 1461              	.LVL91:
 354:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1462              		.loc 1 354 5 discriminator 1 view .LVU385
 1463 06b8 FEFFFFEB 		bl	__assert_fail		@
 1464              	.LVL92:
 1465              	.L87:
 1466              		.align	2
 1467              	.L86:
 1468 06bc 00000000 		.word	g_armwave_state
 1469 06c0 50000000 		.word	.LANCHOR0+80
 1470 06c4 62010000 		.word	354
 1471 06c8 84000000 		.word	.LC4
 1472 06cc E0010000 		.word	.LC14
 1473              		.cfi_endproc
 1474              	.LFE64:
 1476              		.align	2
 1477              		.global	armwave_clear_buffer
 1478              		.syntax unified
 1479              		.arm
 1480              		.fpu vfp
 1482              	armwave_clear_buffer:
 1483              	.LVL93:
 1484              	.LFB65:
 356:armwave.c     **** }
 357:armwave.c     **** 
 358:armwave.c     **** /*
 359:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 360:armwave.c     ****  */
 361:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 362:armwave.c     **** {
 1485              		.loc 1 362 1 is_stmt 1 view -0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 0
 1488              		@ frame_needed = 0, uses_anonymous_args = 0
 1489              		@ link register save eliminated.
 363:armwave.c     ****     // Flags ignored, only one buffer cleared
 364:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1490              		.loc 1 364 5 view .LVU387
 1491              	@ armwave.c:364:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1492              		.loc 1 364 58 is_stmt 0 view .LVU388
 1493 06d0 0C309FE5 		ldr	r3, .L89	@ tmp114,
 1494              	@ armwave.c:364:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1495              		.loc 1 364 5 view .LVU389
 1496 06d4 0010A0E3 		mov	r1, #0	@,
 1497 06d8 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1498 06dc 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1499              	.LVL94:
 1500              		.loc 1 364 5 view .LVU390
 1501 06e0 FEFFFFEA 		b	memset		@
 1502              	.LVL95:
 1503              	.L90:
 1504              		.align	2
 1505              	.L89:
 1506 06e4 00000000 		.word	g_armwave_state
 1507              		.cfi_endproc
 1508              	.LFE65:
 1510              		.align	2
 1511              		.global	armwave_set_channel_colour
 1512              		.syntax unified
 1513              		.arm
 1514              		.fpu vfp
 1516              	armwave_set_channel_colour:
 1517              	.LVL96:
 1518              	.LFB66:
 365:armwave.c     **** }
 366:armwave.c     **** 
 367:armwave.c     **** /*
 368:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 369:armwave.c     ****  */
 370:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 371:armwave.c     **** {
 1519              		.loc 1 371 1 is_stmt 1 view -0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 0
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 1523              		@ link register save eliminated.
 372:armwave.c     ****     // Only 1ch supported for now
 373:armwave.c     ****     switch(ch) {
 1524              		.loc 1 373 5 view .LVU392
 1525 06e8 010050E3 		cmp	r0, #1	@ ch,
 374:armwave.c     ****         case 1:
 375:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1526              		.loc 1 375 13 view .LVU393
 1527              	@ armwave.c:375:             g_armwave_state.ch1_color.r = r;
 1528              		.loc 1 375 41 is_stmt 0 view .LVU394
 1529 06ec 0C009F05 		ldreq	r0, .L93	@ tmp117,
 1530              	.LVL97:
 1531              		.loc 1 375 41 view .LVU395
 1532 06f0 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 376:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1533              		.loc 1 376 13 is_stmt 1 view .LVU396
 1534              	@ armwave.c:376:             g_armwave_state.ch1_color.g = g;
 1535              		.loc 1 376 41 is_stmt 0 view .LVU397
 1536 06f4 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 377:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1537              		.loc 1 377 13 is_stmt 1 view .LVU398
 1538              	@ armwave.c:377:             g_armwave_state.ch1_color.b = b;
 1539              		.loc 1 377 41 is_stmt 0 view .LVU399
 1540 06f8 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 378:armwave.c     ****             break;
 1541              		.loc 1 378 13 is_stmt 1 view .LVU400
 1542              	@ armwave.c:380: }
 379:armwave.c     ****     }
 380:armwave.c     **** }
 1543              		.loc 1 380 1 is_stmt 0 view .LVU401
 1544 06fc 1EFF2FE1 		bx	lr	@
 1545              	.L94:
 1546              		.align	2
 1547              	.L93:
 1548 0700 00000000 		.word	g_armwave_state
 1549              		.cfi_endproc
 1550              	.LFE66:
 1552              		.align	2
 1553              		.global	armwave_dump_ppm_debug
 1554              		.syntax unified
 1555              		.arm
 1556              		.fpu vfp
 1558              	armwave_dump_ppm_debug:
 1559              	.LVL98:
 1560              	.LFB67:
 381:armwave.c     **** 
 382:armwave.c     **** /*
 383:armwave.c     ****  * Dump a ppm of a buffer to a file.
 384:armwave.c     ****  */
 385:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 386:armwave.c     **** {
 1561              		.loc 1 386 1 is_stmt 1 view -0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 0
 1564              		@ frame_needed = 0, uses_anonymous_args = 0
 387:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1565              		.loc 1 387 5 view .LVU403
 1566              	@ armwave.c:386: {
 386:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1567              		.loc 1 386 1 is_stmt 0 view .LVU404
 1568 0704 0130A0E1 		mov	r3, r1	@ fn, fn
 1569 0708 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1570              		.cfi_def_cfa_offset 28
 1571              		.cfi_offset 4, -28
 1572              		.cfi_offset 5, -24
 1573              		.cfi_offset 6, -20
 1574              		.cfi_offset 7, -16
 1575              		.cfi_offset 8, -12
 1576              		.cfi_offset 9, -8
 1577              		.cfi_offset 14, -4
 1578 070c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1579 0710 0CD04DE2 		sub	sp, sp, #12	@,,
 1580              		.cfi_def_cfa_offset 40
 1581              	@ armwave.c:387:     FILE *fp = fopen(fn, "wb");
 1582              		.loc 1 387 16 view .LVU405
 1583 0714 C4109FE5 		ldr	r1, .L103	@,
 1584              	.LVL99:
 1585              		.loc 1 387 16 view .LVU406
 1586 0718 0300A0E1 		mov	r0, r3	@, fn
 1587              	.LVL100:
 1588              		.loc 1 387 16 view .LVU407
 1589 071c FEFFFFEB 		bl	fopen64		@
 1590              	.LVL101:
 1591              	@ armwave.c:394:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 388:armwave.c     ****     uint32_t data;
 389:armwave.c     ****     int xx, yy;
 390:armwave.c     **** 
 391:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 392:armwave.c     **** 
 393:armwave.c     ****     fputs("P3\n", fp);
 394:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1592              		.loc 1 394 5 view .LVU408
 1593 0720 BC609FE5 		ldr	r6, .L103+4	@ tmp150,
 1594              	@ armwave.c:393:     fputs("P3\n", fp);
 393:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1595              		.loc 1 393 5 view .LVU409
 1596 0724 0320A0E3 		mov	r2, #3	@,
 1597 0728 0110A0E3 		mov	r1, #1	@,
 1598              	@ armwave.c:387:     FILE *fp = fopen(fn, "wb");
 387:armwave.c     ****     uint32_t data;
 1599              		.loc 1 387 16 view .LVU410
 1600 072c 0070A0E1 		mov	r7, r0	@ fp,
 1601              	.LVL102:
 388:armwave.c     ****     uint32_t data;
 1602              		.loc 1 388 5 is_stmt 1 view .LVU411
 389:armwave.c     **** 
 1603              		.loc 1 389 5 view .LVU412
 393:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1604              		.loc 1 393 5 view .LVU413
 1605 0730 0030A0E1 		mov	r3, r0	@, fp
 1606 0734 AC009FE5 		ldr	r0, .L103+8	@,
 1607              	.LVL103:
 393:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1608              		.loc 1 393 5 is_stmt 0 view .LVU414
 1609 0738 FEFFFFEB 		bl	fwrite		@
 1610              	.LVL104:
 1611              		.loc 1 394 5 is_stmt 1 view .LVU415
 1612 073c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1613 0740 A4109FE5 		ldr	r1, .L103+12	@,
 1614 0744 0700A0E1 		mov	r0, r7	@, fp
 1615 0748 FEFFFFEB 		bl	fprintf		@
 1616              	.LVL105:
 395:armwave.c     ****     fputs("255\n", fp);
 1617              		.loc 1 395 5 view .LVU416
 1618 074c 0420A0E3 		mov	r2, #4	@,
 1619 0750 0730A0E1 		mov	r3, r7	@, fp
 1620 0754 0110A0E3 		mov	r1, #1	@,
 1621 0758 90009FE5 		ldr	r0, .L103+16	@,
 1622 075c FEFFFFEB 		bl	fwrite		@
 1623              	.LVL106:
 396:armwave.c     **** 
 397:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1624              		.loc 1 397 5 view .LVU417
 1625              	@ armwave.c:397:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1626              		.loc 1 397 37 is_stmt 0 view .LVU418
 1627 0760 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1628              	@ armwave.c:397:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1629              		.loc 1 397 5 view .LVU419
 1630 0764 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1631 0768 180000DA 		ble	.L96		@,
 1632 076c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1633              	@ armwave.c:402:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 398:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 399:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 400:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 401:armwave.c     **** 
 402:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1634              		.loc 1 402 13 view .LVU420
 1635 0770 7C909FE5 		ldr	r9, .L103+20	@ tmp152,
 1636              	@ armwave.c:397:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1637              		.loc 1 397 12 view .LVU421
 1638 0774 0050A0E3 		mov	r5, #0	@ yy,
 1639              	.LVL107:
 1640              	.L97:
 1641              	@ armwave.c:398:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 398:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1642              		.loc 1 398 9 view .LVU422
 1643 0778 000053E3 		cmp	r3, #0	@ _13,
 1644              	@ armwave.c:398:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 398:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1645              		.loc 1 398 16 view .LVU423
 1646 077c 0040A0C3 		movgt	r4, #0	@ xx,
 1647              	@ armwave.c:398:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 398:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1648              		.loc 1 398 9 view .LVU424
 1649 0780 0F0000DA 		ble	.L99		@,
 1650              	.LVL108:
 1651              	.L98:
 399:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1652              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU425
 1653              	@ armwave.c:399:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 399:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1654              		.loc 1 399 29 is_stmt 0 discriminator 3 view .LVU426
 1655 0784 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1656              	@ armwave.c:402:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1657              		.loc 1 402 13 discriminator 3 view .LVU427
 1658 0788 0910A0E1 		mov	r1, r9	@, tmp152
 1659 078c 0700A0E1 		mov	r0, r7	@, fp
 1660              	@ armwave.c:399:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 399:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1661              		.loc 1 399 18 discriminator 3 view .LVU428
 1662 0790 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1663              	.LVL109:
 1664              		.loc 1 402 13 is_stmt 1 discriminator 3 view .LVU429
 1665              	@ armwave.c:398:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 398:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1666              		.loc 1 398 58 is_stmt 0 discriminator 3 view .LVU430
 1667 0794 014084E2 		add	r4, r4, #1	@ xx, xx,
 1668              	.LVL110:
 1669              	@ armwave.c:402:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1670              		.loc 1 402 81 discriminator 3 view .LVU431
 1671 0798 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1672              	@ armwave.c:402:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1673              		.loc 1 402 61 discriminator 3 view .LVU432
 1674 079c 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1675              	@ armwave.c:402:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1676              		.loc 1 402 13 discriminator 3 view .LVU433
 1677 07a0 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1678 07a4 7330EFE6 		uxtb	r3, r3	@, tmp142
 1679 07a8 00C08DE5 		str	ip, [sp]	@ tmp147,
 1680 07ac 7220EFE6 		uxtb	r2, r2	@, data
 1681              	.LVL111:
 1682              		.loc 1 402 13 discriminator 3 view .LVU434
 1683 07b0 FEFFFFEB 		bl	fprintf		@
 1684              	.LVL112:
 1685              	@ armwave.c:398:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 398:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1686              		.loc 1 398 41 discriminator 3 view .LVU435
 1687 07b4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1688              	@ armwave.c:398:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 398:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1689              		.loc 1 398 9 discriminator 3 view .LVU436
 1690 07b8 040053E1 		cmp	r3, r4	@ _13, xx
 1691 07bc F0FFFFCA 		bgt	.L98		@,
 1692 07c0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1693              	.LVL113:
 1694              	.L99:
 1695              	@ armwave.c:397:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1696              		.loc 1 397 55 discriminator 2 view .LVU437
 1697 07c4 015085E2 		add	r5, r5, #1	@ yy, yy,
 1698              	.LVL114:
 1699              	@ armwave.c:397:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1700              		.loc 1 397 5 discriminator 2 view .LVU438
 1701 07c8 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1702 07cc E9FFFFBA 		blt	.L97		@,
 1703              	.LVL115:
 1704              	.L96:
 403:armwave.c     ****         }
 404:armwave.c     ****     }
 405:armwave.c     **** 
 406:armwave.c     ****     fclose(fp);
 1705              		.loc 1 406 5 is_stmt 1 view .LVU439
 1706 07d0 0700A0E1 		mov	r0, r7	@, fp
 1707              	@ armwave.c:407: }
 407:armwave.c     **** }
 1708              		.loc 1 407 1 is_stmt 0 view .LVU440
 1709 07d4 0CD08DE2 		add	sp, sp, #12	@,,
 1710              		.cfi_def_cfa_offset 28
 1711              		@ sp needed	@
 1712 07d8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1713              		.cfi_restore 14
 1714              		.cfi_restore 9
 1715              		.cfi_restore 8
 1716              		.cfi_restore 7
 1717              		.cfi_restore 6
 1718              		.cfi_restore 5
 1719              		.cfi_restore 4
 1720              		.cfi_def_cfa_offset 0
 1721              	.LVL116:
 1722              	@ armwave.c:406:     fclose(fp);
 406:armwave.c     **** }
 1723              		.loc 1 406 5 view .LVU441
 1724 07dc FEFFFFEA 		b	fclose		@
 1725              	.LVL117:
 1726              	.L104:
 406:armwave.c     **** }
 1727              		.loc 1 406 5 view .LVU442
 1728              		.align	2
 1729              	.L103:
 1730 07e0 F8010000 		.word	.LC15
 1731 07e4 00000000 		.word	g_armwave_state
 1732 07e8 FC010000 		.word	.LC16
 1733 07ec 00020000 		.word	.LC17
 1734 07f0 08020000 		.word	.LC18
 1735 07f4 10020000 		.word	.LC19
 1736              		.cfi_endproc
 1737              	.LFE67:
 1739              		.align	2
 1740              		.global	armwave_test_init
 1741              		.syntax unified
 1742              		.arm
 1743              		.fpu vfp
 1745              	armwave_test_init:
 1746              	.LVL118:
 1747              	.LFB68:
 408:armwave.c     **** 
 409:armwave.c     **** /*
 410:armwave.c     ****  * Initialise some test functionry.
 411:armwave.c     ****  */
 412:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 413:armwave.c     **** {
 1748              		.loc 1 413 1 is_stmt 1 view -0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 0
 1751              		@ frame_needed = 0, uses_anonymous_args = 0
 414:armwave.c     ****     test_create_gamma();
 1752              		.loc 1 414 5 view .LVU444
 1753              	.LBB12:
 1754              	.LBI12:
  34:armwave.c     **** {
 1755              		.loc 1 34 6 view .LVU445
  34:armwave.c     **** {
 1756              		.loc 1 34 6 is_stmt 0 view .LVU446
 1757              	.LBE12:
 1758              	@ armwave.c:413: {
 413:armwave.c     ****     test_create_gamma();
 1759              		.loc 1 413 1 view .LVU447
 1760 07f8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1761              		.cfi_def_cfa_offset 32
 1762              		.cfi_offset 4, -32
 1763              		.cfi_offset 5, -28
 1764              		.cfi_offset 6, -24
 1765              		.cfi_offset 7, -20
 1766              		.cfi_offset 8, -16
 1767              		.cfi_offset 9, -12
 1768              		.cfi_offset 10, -8
 1769              		.cfi_offset 14, -4
 1770 07fc 068B2DED 		vpush.64	{d8, d9, d10}	@
 1771              		.cfi_def_cfa_offset 56
 1772              		.cfi_offset 80, -56
 1773              		.cfi_offset 81, -52
 1774              		.cfi_offset 82, -48
 1775              		.cfi_offset 83, -44
 1776              		.cfi_offset 84, -40
 1777              		.cfi_offset 85, -36
 1778 0800 BC409FE5 		ldr	r4, .L109+20	@ ivtmp.79,
 1779              	.LBB15:
 1780              	.LBB13:
 1781              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1782              		.loc 1 40 32 view .LVU448
 1783 0804 2DAA9FED 		vldr.32	s20, .L109+16	@ tmp136,
 1784              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1785              		.loc 1 40 26 view .LVU449
 1786 0808 289B9FED 		vldr.64	d9, .L109	@ tmp151,
 1787              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1788              		.loc 1 40 49 view .LVU450
 1789 080c 298B9FED 		vldr.64	d8, .L109+8	@ tmp139,
 1790 0810 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1791              	.LBE13:
 1792              	.LBE15:
 1793              	@ armwave.c:413: {
 413:armwave.c     ****     test_create_gamma();
 1794              		.loc 1 413 1 view .LVU451
 1795 0814 10D04DE2 		sub	sp, sp, #16	@,,
 1796              		.cfi_def_cfa_offset 72
 1797              	@ armwave.c:413: {
 413:armwave.c     ****     test_create_gamma();
 1798              		.loc 1 413 1 view .LVU452
 1799 0818 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1800 081c 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1801 0820 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1802 0824 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1803 0828 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1804 082c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1805              	.LVL119:
 1806              	.L106:
 1807              	.LBB16:
 1808              	.LBB14:
  40:armwave.c     ****     }
 1809              		.loc 1 40 9 is_stmt 1 view .LVU453
 1810              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1811              		.loc 1 40 32 is_stmt 0 view .LVU454
 1812 0830 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1813              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1814              		.loc 1 40 26 view .LVU455
 1815 0834 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1816              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1817              		.loc 1 40 32 view .LVU456
 1818 0838 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1819 083c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1820 0840 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1821              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1822              		.loc 1 40 26 view .LVU457
 1823 0844 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1824 0848 FEFFFFEB 		bl	pow		@
 1825              	.LVL120:
 1826              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1827              		.loc 1 40 49 view .LVU458
 1828 084c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1829              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1830              		.loc 1 40 24 view .LVU459
 1831 0850 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1832 0854 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1833 0858 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1834              	.LVL121:
 1835              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1836              		.loc 1 39 5 view .LVU460
 1837 085c 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1838 0860 F2FFFF1A 		bne	.L106		@,
 1839              	.LVL122:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1840              		.loc 1 39 5 view .LVU461
 1841              	.LBE14:
 1842              	.LBE16:
 415:armwave.c     **** 
 416:armwave.c     ****     // make ch1 yellowish by default
 417:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1843              		.loc 1 417 5 is_stmt 1 view .LVU462
 1844              	.LBB17:
 1845              	.LBI17:
 370:armwave.c     **** {
 1846              		.loc 1 370 6 view .LVU463
 1847              	.LBB18:
 373:armwave.c     ****         case 1:
 1848              		.loc 1 373 5 view .LVU464
 375:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1849              		.loc 1 375 13 view .LVU465
 376:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1850              		.loc 1 376 13 view .LVU466
 1851              	@ armwave.c:375:             g_armwave_state.ch1_color.r = r;
 375:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1852              		.loc 1 375 41 is_stmt 0 view .LVU467
 1853 0864 5CC09FE5 		ldr	ip, .L109+24	@ tmp142,
 1854 0868 5C409FE5 		ldr	r4, .L109+28	@ tmp143,
 1855              	.LBE18:
 1856              	.LBE17:
 1857              	@ armwave.c:419:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 418:armwave.c     **** 
 419:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1858              		.loc 1 419 5 view .LVU468
 1859 086c 0000A0E3 		mov	r0, #0	@ tmp147,
 1860              	.LBB22:
 1861              	.LBB19:
 1862              	@ armwave.c:377:             g_armwave_state.ch1_color.b = b;
 377:armwave.c     ****             break;
 1863              		.loc 1 377 41 view .LVU469
 1864 0870 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1865              	.LBE19:
 1866              	.LBE22:
 1867              	@ armwave.c:419:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1868              		.loc 1 419 5 view .LVU470
 1869 0874 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1870 0878 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1871 087c 00808DE5 		str	r8, [sp]	@ render_width,
 1872 0880 0610A0E1 		mov	r1, r6	@, tmp3
 1873 0884 0720A0E1 		mov	r2, r7	@, nwaves
 1874              	.LBB23:
 1875              	.LBB20:
 1876              	@ armwave.c:375:             g_armwave_state.ch1_color.r = r;
 375:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1877              		.loc 1 375 41 view .LVU471
 1878 0888 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 377:armwave.c     ****             break;
 1879              		.loc 1 377 13 is_stmt 1 view .LVU472
 1880              	.LBE20:
 1881              	.LBE23:
 1882              	@ armwave.c:419:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1883              		.loc 1 419 5 is_stmt 0 view .LVU473
 1884 088c 0630A0E1 		mov	r3, r6	@, wave_size
 1885              	.LBB24:
 1886              	.LBB21:
 1887              	@ armwave.c:377:             g_armwave_state.ch1_color.b = b;
 377:armwave.c     ****             break;
 1888              		.loc 1 377 41 view .LVU474
 1889 0890 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 378:armwave.c     ****     }
 1890              		.loc 1 378 13 is_stmt 1 view .LVU475
 1891              	.LVL123:
 378:armwave.c     ****     }
 1892              		.loc 1 378 13 is_stmt 0 view .LVU476
 1893              	.LBE21:
 1894              	.LBE24:
 1895              		.loc 1 419 5 is_stmt 1 view .LVU477
 1896 0894 FEFFFFEB 		bl	armwave_setup_render		@
 1897              	.LVL124:
 420:armwave.c     **** 
 421:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1898              		.loc 1 421 5 view .LVU478
 1899 0898 30109FE5 		ldr	r1, .L109+32	@,
 1900 089c 30009FE5 		ldr	r0, .L109+36	@,
 1901              	@ armwave.c:422: }
 422:armwave.c     **** }
 1902              		.loc 1 422 1 is_stmt 0 view .LVU479
 1903 08a0 10D08DE2 		add	sp, sp, #16	@,,
 1904              		.cfi_def_cfa_offset 56
 1905              		@ sp needed	@
 1906 08a4 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1907              		.cfi_restore 84
 1908              		.cfi_restore 85
 1909              		.cfi_restore 82
 1910              		.cfi_restore 83
 1911              		.cfi_restore 80
 1912              		.cfi_restore 81
 1913              		.cfi_def_cfa_offset 32
 1914 08a8 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1915              		.cfi_restore 14
 1916              		.cfi_restore 10
 1917              		.cfi_restore 9
 1918              		.cfi_restore 8
 1919              		.cfi_restore 7
 1920              		.cfi_restore 6
 1921              		.cfi_restore 5
 1922              		.cfi_restore 4
 1923              		.cfi_def_cfa_offset 0
 1924              	.LVL125:
 1925              	@ armwave.c:421:     printf("armwave version: %s\n", ARMWAVE_VER);
 421:armwave.c     **** }
 1926              		.loc 1 421 5 view .LVU480
 1927 08ac FEFFFFEA 		b	printf		@
 1928              	.LVL126:
 1929              	.L110:
 1930              		.align	3
 1931              	.L109:
 1932 08b0 000000C0 		.word	-1073741824
 1933 08b4 CCCCEC3F 		.word	1072483532
 1934 08b8 00000000 		.word	0
 1935 08bc 00E06F40 		.word	1081073664
 1936 08c0 00007F43 		.word	1132396544
 1937 08c4 FFFFFFFF 		.word	gamma_table-1
 1938 08c8 00000000 		.word	g_armwave_state
 1939 08cc F609F406 		.word	116656630
 1940 08d0 00000000 		.word	.LC0
 1941 08d4 08000000 		.word	.LC1
 1942              		.cfi_endproc
 1943              	.LFE68:
 1945              		.align	2
 1946              		.global	armwave_test_fill_outbuf
 1947              		.syntax unified
 1948              		.arm
 1949              		.fpu vfp
 1951              	armwave_test_fill_outbuf:
 1952              	.LFB69:
 423:armwave.c     **** 
 424:armwave.c     **** /*
 425:armwave.c     ****  * Render image to the local allocated buffer.
 426:armwave.c     ****  */
 427:armwave.c     **** void armwave_test_fill_outbuf()
 428:armwave.c     **** {
 1953              		.loc 1 428 1 is_stmt 1 view -0
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 8
 1956              		@ frame_needed = 0, uses_anonymous_args = 0
 429:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1957              		.loc 1 429 5 view .LVU482
 1958 08d8 50C19FE5 		ldr	ip, .L132	@ tmp204,
 1959              	@ armwave.c:428: {
 428:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1960              		.loc 1 428 1 is_stmt 0 view .LVU483
 1961 08dc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1962              		.cfi_def_cfa_offset 36
 1963              		.cfi_offset 4, -36
 1964              		.cfi_offset 5, -32
 1965              		.cfi_offset 6, -28
 1966              		.cfi_offset 7, -24
 1967              		.cfi_offset 8, -20
 1968              		.cfi_offset 9, -16
 1969              		.cfi_offset 10, -12
 1970              		.cfi_offset 11, -8
 1971              		.cfi_offset 14, -4
 1972 08e0 0CD04DE2 		sub	sp, sp, #12	@,,
 1973              		.cfi_def_cfa_offset 48
 1974              	@ armwave.c:429:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1975              		.loc 1 429 5 view .LVU484
 1976 08e4 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 1977              	.LVL127:
 1978              	.LBB27:
 1979              	.LBI27:
 168:armwave.c     **** {
 1980              		.loc 1 168 6 is_stmt 1 view .LVU485
 1981              	.LBB28:
 170:armwave.c     ****     // uint32_t ysub;
 1982              		.loc 1 170 5 view .LVU486
 172:armwave.c     ****     uint8_t r, g, b, value; 
 1983              		.loc 1 172 5 view .LVU487
 173:armwave.c     ****     // uint8_t row;
 1984              		.loc 1 173 5 view .LVU488
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1985              		.loc 1 175 5 view .LVU489
 1986              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1987              		.loc 1 175 15 is_stmt 0 view .LVU490
 1988 08e8 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1989              	.LVL128:
 176:armwave.c     ****     uint32_t offset;
 1990              		.loc 1 176 5 is_stmt 1 view .LVU491
 177:armwave.c     **** 
 1991              		.loc 1 177 5 view .LVU492
 179:armwave.c     **** 
 1992              		.loc 1 179 5 view .LVU493
 1993 08ec 000058E3 		cmp	r8, #0	@ _1,
 1994 08f0 4900000A 		beq	.L130		@,
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 1995              		.loc 1 181 5 view .LVU494
 1996              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 1997              		.loc 1 181 10 is_stmt 0 view .LVU495
 1998 08f4 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1999 08f8 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2000              	.LVL129:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2001              		.loc 1 184 5 is_stmt 1 view .LVU496
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2002              		.loc 1 184 5 is_stmt 0 view .LVU497
 2003 08fc 000057E3 		cmp	r7, #0	@ npix,
 2004 0900 0A0000DA 		ble	.L111		@,
 2005              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2006              		.loc 1 196 52 view .LVU498
 2007 0904 FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2008              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2009              		.loc 1 197 52 view .LVU499
 2010 0908 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2011              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2012              		.loc 1 198 52 view .LVU500
 2013 090c F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2014              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2015              		.loc 1 220 57 view .LVU501
 2016 0910 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2017              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2018              		.loc 1 184 11 view .LVU502
 2019 0914 00E0A0E3 		mov	lr, #0	@ n,
 2020              	.LVL130:
 2021              	.L118:
 188:armwave.c     **** 
 2022              		.loc 1 188 9 is_stmt 1 view .LVU503
 2023              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 2024              		.loc 1 188 19 is_stmt 0 view .LVU504
 2025 0918 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2026              	.LVL131:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2027              		.loc 1 190 9 is_stmt 1 view .LVU505
 2028              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2029              		.loc 1 190 11 is_stmt 0 view .LVU506
 2030 091c 000050E3 		cmp	r0, #0	@ wave_word,
 2031 0920 0400001A 		bne	.L127		@,
 2032 0924 04E08EE2 		add	lr, lr, #4	@ n, n,
 2033              	.L114:
 2034              	.LVL132:
 2035              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2036              		.loc 1 184 5 view .LVU507
 2037 0928 0E0057E1 		cmp	r7, lr	@ npix, n
 2038 092c F9FFFFCA 		bgt	.L118		@,
 2039              	.LVL133:
 2040              	.L111:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2041              		.loc 1 184 5 view .LVU508
 2042              	.LBE28:
 2043              	.LBE27:
 2044              	@ armwave.c:430: }
 430:armwave.c     **** }
 2045              		.loc 1 430 1 view .LVU509
 2046 0930 0CD08DE2 		add	sp, sp, #12	@,,
 2047              		.cfi_remember_state
 2048              		.cfi_def_cfa_offset 36
 2049              		@ sp needed	@
 2050 0934 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2051              	.LVL134:
 2052              	.L127:
 2053              		.cfi_restore_state
 2054              	.LBB30:
 2055              	.LBB29:
 2056              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2057              		.loc 1 195 19 view .LVU510
 2058 0938 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2059              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2060              		.loc 1 190 11 view .LVU511
 2061 093c 0E60A0E1 		mov	r6, lr	@ ivtmp.89, n
 2062              	.LVL135:
 192:armwave.c     ****                 wave_word >>= 8;
 2063              		.loc 1 192 17 is_stmt 1 view .LVU512
 193:armwave.c     **** 
 2064              		.loc 1 193 17 view .LVU513
 2065              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2066              		.loc 1 193 27 is_stmt 0 view .LVU514
 2067 0940 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2068              	.LVL136:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2069              		.loc 1 195 17 is_stmt 1 view .LVU515
 2070 0944 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.89,
 2071              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2072              		.loc 1 195 19 is_stmt 0 view .LVU516
 2073 0948 0500001A 		bne	.L131		@,
 2074              	.LVL137:
 2075              	.L115:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2076              		.loc 1 195 19 view .LVU517
 2077 094c 016086E2 		add	r6, r6, #1	@ ivtmp.89, ivtmp.89,
 2078              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 2079              		.loc 1 191 13 view .LVU518
 2080 0950 06005EE1 		cmp	lr, r6	@ n, ivtmp.89
 2081 0954 F3FFFF0A 		beq	.L114		@,
 192:armwave.c     ****                 wave_word >>= 8;
 2082              		.loc 1 192 17 is_stmt 1 view .LVU519
 2083              	.LVL138:
 193:armwave.c     **** 
 2084              		.loc 1 193 17 view .LVU520
 2085              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2086              		.loc 1 195 19 is_stmt 0 view .LVU521
 2087 0958 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2088              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2089              		.loc 1 193 27 view .LVU522
 2090 095c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2091              	.LVL139:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2092              		.loc 1 195 17 is_stmt 1 view .LVU523
 2093              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2094              		.loc 1 195 19 is_stmt 0 view .LVU524
 2095 0960 F9FFFF0A 		beq	.L115		@,
 2096              	.L131:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2097              		.loc 1 196 21 is_stmt 1 view .LVU525
 2098              	.LVL140:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2099              		.loc 1 197 21 view .LVU526
 198:armwave.c     **** 
 2100              		.loc 1 198 21 view .LVU527
 200:armwave.c     ****                     g = MIN(gg, 255);
 2101              		.loc 1 200 21 view .LVU528
 201:armwave.c     ****                     b = MIN(bb, 255);
 2102              		.loc 1 201 21 view .LVU529
 202:armwave.c     **** 
 2103              		.loc 1 202 21 view .LVU530
 205:armwave.c     **** 
 2104              		.loc 1 205 21 view .LVU531
 2105              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2106              		.loc 1 220 32 is_stmt 0 view .LVU532
 2107 0964 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.89
 2108              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2109              		.loc 1 221 41 view .LVU533
 2110 0968 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2111              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2112              		.loc 1 220 40 view .LVU534
 2113 096c 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2114              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2115              		.loc 1 221 41 view .LVU535
 2116 0970 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2117              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2118              		.loc 1 198 55 view .LVU536
 2119 0974 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2120              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2121              		.loc 1 220 40 view .LVU537
 2122 0978 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2123              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2124              		.loc 1 221 46 view .LVU538
 2125 097c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2126              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2127              		.loc 1 197 55 view .LVU539
 2128 0980 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2129              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2130              		.loc 1 198 24 view .LVU540
 2131 0984 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2132              	.LVL141:
 2133              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2134              		.loc 1 202 25 view .LVU541
 2135 0988 FF0053E3 		cmp	r3, #255	@ bb,
 2136              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2137              		.loc 1 197 24 view .LVU542
 2138 098c 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2139              	.LVL142:
 2140              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2141              		.loc 1 202 25 view .LVU543
 2142 0990 FF30A0A3 		movge	r3, #255	@ bb,
 2143              	.LVL143:
 2144              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2145              		.loc 1 220 40 view .LVU544
 2146 0994 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2147              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2148              		.loc 1 221 46 view .LVU545
 2149 0998 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2150              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 2151              		.loc 1 201 25 view .LVU546
 2152 099c FF0052E3 		cmp	r2, #255	@ gg,
 2153 09a0 FF20A0A3 		movge	r2, #255	@ gg,
 2154              	.LVL144:
 2155              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2156              		.loc 1 196 55 view .LVU547
 2157 09a4 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2158              	.LVL145:
 2159              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2160              		.loc 1 205 56 view .LVU548
 2161 09a8 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2162              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2163              		.loc 1 205 44 view .LVU549
 2164 09ac 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2165              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2166              		.loc 1 220 24 view .LVU550
 2167 09b0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2168              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2169              		.loc 1 196 24 view .LVU551
 2170 09b4 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2171              	.LVL146:
 2172              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2173              		.loc 1 205 56 view .LVU552
 2174 09b8 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2175              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2176              		.loc 1 205 44 view .LVU553
 2177 09bc FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2178              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2179              		.loc 1 200 25 view .LVU554
 2180 09c0 FF0051E3 		cmp	r1, #255	@ rr,
 2181              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2182              		.loc 1 205 51 view .LVU555
 2183 09c4 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2184              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2185              		.loc 1 200 25 view .LVU556
 2186 09c8 FF10A0A3 		movge	r1, #255	@ rr,
 2187              	.LVL147:
 2188              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2189              		.loc 1 220 24 view .LVU557
 2190 09cc 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2191              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2192              		.loc 1 221 24 view .LVU558
 2193 09d0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2194              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2195              		.loc 1 205 62 view .LVU559
 2196 09d4 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2197 09d8 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2198              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2199              		.loc 1 205 26 view .LVU560
 2200 09dc FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2201              	.LVL148:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2202              		.loc 1 219 21 is_stmt 1 view .LVU561
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2203              		.loc 1 220 21 view .LVU562
 221:armwave.c     ****                     xx = (nsub >> 8);
 2204              		.loc 1 221 21 view .LVU563
 222:armwave.c     **** 
 2205              		.loc 1 222 21 view .LVU564
 2206              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 2207              		.loc 1 222 32 is_stmt 0 view .LVU565
 2208 09e0 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.89,
 2209              	.LVL149:
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2210              		.loc 1 224 21 is_stmt 1 view .LVU566
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2211              		.loc 1 224 21 is_stmt 0 view .LVU567
 2212 09e4 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2213              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2214              		.loc 1 221 24 view .LVU568
 2215 09e8 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2216              	.LVL150:
 2217              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2218              		.loc 1 224 21 view .LVU569
 2219 09ec 020054E1 		cmp	r4, r2	@ yy, ye
 2220 09f0 D5FFFF2A 		bcs	.L115		@,
 2221 09f4 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2222              	.LVL151:
 2223              	.L116:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2224              		.loc 1 225 25 is_stmt 1 view .LVU570
 226:armwave.c     ****                     }
 2225              		.loc 1 226 25 view .LVU571
 2226              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2227              		.loc 1 225 43 is_stmt 0 view .LVU572
 2228 09f8 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2229              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2230              		.loc 1 224 21 view .LVU573
 2231 09fc 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2232              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2233              		.loc 1 226 43 view .LVU574
 2234 0a00 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2235              	.LVL152:
 2236              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2237              		.loc 1 224 42 view .LVU575
 2238 0a04 014084E2 		add	r4, r4, #1	@ yy, yy,
 2239              	.LVL153:
 2240              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2241              		.loc 1 224 21 view .LVU576
 2242 0a08 040050E1 		cmp	r0, r4	@ ye, yy
 2243              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2244              		.loc 1 226 53 view .LVU577
 2245 0a0c 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2246              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2247              		.loc 1 224 21 view .LVU578
 2248 0a10 F8FFFF1A 		bne	.L116		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2249              		.loc 1 224 21 view .LVU579
 2250 0a14 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2251 0a18 CBFFFFEA 		b	.L115		@
 2252              	.LVL154:
 2253              	.L130:
 179:armwave.c     **** 
 2254              		.loc 1 179 5 is_stmt 1 view .LVU580
 2255 0a1c 10309FE5 		ldr	r3, .L132+4	@,
 2256 0a20 B320A0E3 		mov	r2, #179	@,
 2257 0a24 0C109FE5 		ldr	r1, .L132+8	@,
 2258 0a28 0C009FE5 		ldr	r0, .L132+12	@,
 2259 0a2c FEFFFFEB 		bl	__assert_fail		@
 2260              	.LVL155:
 2261              	.L133:
 2262              		.align	2
 2263              	.L132:
 2264 0a30 00000000 		.word	g_armwave_state
 2265 0a34 00000000 		.word	.LANCHOR0
 2266 0a38 84000000 		.word	.LC4
 2267 0a3c 90000000 		.word	.LC5
 2268              	.LBE29:
 2269              	.LBE30:
 2270              		.cfi_endproc
 2271              	.LFE69:
 2273              		.align	2
 2274              		.global	armwave_test_dump_buffer_to_ppm
 2275              		.syntax unified
 2276              		.arm
 2277              		.fpu vfp
 2279              	armwave_test_dump_buffer_to_ppm:
 2280              	.LVL156:
 2281              	.LFB70:
 431:armwave.c     **** 
 432:armwave.c     **** /*
 433:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 434:armwave.c     ****  */
 435:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 436:armwave.c     **** {
 2282              		.loc 1 436 1 view -0
 2283              		.cfi_startproc
 2284              		@ args = 0, pretend = 0, frame = 0
 2285              		@ frame_needed = 0, uses_anonymous_args = 0
 2286              		@ link register save eliminated.
 437:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2287              		.loc 1 437 5 view .LVU582
 2288 0a40 08309FE5 		ldr	r3, .L135	@ tmp112,
 2289 0a44 0010A0E1 		mov	r1, r0	@, fn
 2290 0a48 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2291              	.LVL157:
 2292              		.loc 1 437 5 is_stmt 0 view .LVU583
 2293 0a4c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2294              	.LVL158:
 2295              	.L136:
 2296              		.loc 1 437 5 view .LVU584
 2297              		.align	2
 2298              	.L135:
 2299 0a50 00000000 		.word	g_armwave_state
 2300              		.cfi_endproc
 2301              	.LFE70:
 2303              		.align	2
 2304              		.global	armwave_test_fill_gdkbuf
 2305              		.syntax unified
 2306              		.arm
 2307              		.fpu vfp
 2309              	armwave_test_fill_gdkbuf:
 2310              	.LVL159:
 2311              	.LFB71:
 438:armwave.c     **** }
 439:armwave.c     **** 
 440:armwave.c     **** /*
 441:armwave.c     ****  * Render GDK buffer with test funtionry.
 442:armwave.c     ****  */
 443:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 444:armwave.c     **** {
 2312              		.loc 1 444 1 is_stmt 1 view -0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 8
 2315              		@ frame_needed = 0, uses_anonymous_args = 0
 445:armwave.c     ****     //PyObject *mv;
 446:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 447:armwave.c     **** 
 448:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 449:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2316              		.loc 1 449 5 view .LVU586
 2317              	@ armwave.c:449:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2318              		.loc 1 449 11 is_stmt 0 view .LVU587
 2319 0a54 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2320              	@ armwave.c:444: {
 444:armwave.c     ****     //PyObject *mv;
 2321              		.loc 1 444 1 view .LVU588
 2322 0a58 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2323              		.cfi_def_cfa_offset 36
 2324              		.cfi_offset 4, -36
 2325              		.cfi_offset 5, -32
 2326              		.cfi_offset 6, -28
 2327              		.cfi_offset 7, -24
 2328              		.cfi_offset 8, -20
 2329              		.cfi_offset 9, -16
 2330              		.cfi_offset 10, -12
 2331              		.cfi_offset 11, -8
 2332              		.cfi_offset 14, -4
 2333 0a5c 0CD04DE2 		sub	sp, sp, #12	@,,
 2334              		.cfi_def_cfa_offset 48
 2335              	.LBB33:
 2336              	.LBB34:
 2337              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2338              		.loc 1 175 15 view .LVU589
 2339 0a60 48519FE5 		ldr	r5, .L158	@ tmp206,
 2340              	.LBE34:
 2341              	.LBE33:
 2342              	@ armwave.c:449:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2343              		.loc 1 449 11 view .LVU590
 2344 0a64 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2345              	.LVL160:
 450:armwave.c     ****     
 451:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 452:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2346              		.loc 1 452 5 is_stmt 1 view .LVU591
 2347              	.LBB37:
 2348              	.LBI33:
 168:armwave.c     **** {
 2349              		.loc 1 168 6 view .LVU592
 2350              	.LBB35:
 170:armwave.c     ****     // uint32_t ysub;
 2351              		.loc 1 170 5 view .LVU593
 172:armwave.c     ****     uint8_t r, g, b, value; 
 2352              		.loc 1 172 5 view .LVU594
 173:armwave.c     ****     // uint8_t row;
 2353              		.loc 1 173 5 view .LVU595
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2354              		.loc 1 175 5 view .LVU596
 2355              	@ armwave.c:179:     assert(out_buffer != NULL);
 179:armwave.c     **** 
 2356              		.loc 1 179 5 is_stmt 0 view .LVU597
 2357 0a68 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2358              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2359              		.loc 1 175 15 view .LVU598
 2360 0a6c 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2361              	.LVL161:
 176:armwave.c     ****     uint32_t offset;
 2362              		.loc 1 176 5 is_stmt 1 view .LVU599
 177:armwave.c     **** 
 2363              		.loc 1 177 5 view .LVU600
 179:armwave.c     **** 
 2364              		.loc 1 179 5 view .LVU601
 2365 0a70 4900000A 		beq	.L156		@,
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2366              		.loc 1 181 5 view .LVU602
 2367              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2368              		.loc 1 181 10 is_stmt 0 view .LVU603
 2369 0a74 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2370 0a78 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2371              	.LVL162:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2372              		.loc 1 184 5 is_stmt 1 view .LVU604
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2373              		.loc 1 184 5 is_stmt 0 view .LVU605
 2374 0a7c 000057E3 		cmp	r7, #0	@ npix,
 2375 0a80 0A0000DA 		ble	.L137		@,
 2376              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2377              		.loc 1 196 52 view .LVU606
 2378 0a84 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2379              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2380              		.loc 1 197 52 view .LVU607
 2381 0a88 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2382              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2383              		.loc 1 198 52 view .LVU608
 2384 0a8c F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2385              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2386              		.loc 1 220 57 view .LVU609
 2387 0a90 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2388              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2389              		.loc 1 184 11 view .LVU610
 2390 0a94 00C0A0E3 		mov	ip, #0	@ n,
 2391              	.LVL163:
 2392              	.L144:
 188:armwave.c     **** 
 2393              		.loc 1 188 9 is_stmt 1 view .LVU611
 2394              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 2395              		.loc 1 188 19 is_stmt 0 view .LVU612
 2396 0a98 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2397              	.LVL164:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2398              		.loc 1 190 9 is_stmt 1 view .LVU613
 2399              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2400              		.loc 1 190 11 is_stmt 0 view .LVU614
 2401 0a9c 000050E3 		cmp	r0, #0	@ wave_word,
 2402 0aa0 0400001A 		bne	.L153		@,
 2403 0aa4 04C08CE2 		add	ip, ip, #4	@ n, n,
 2404              	.L140:
 2405              	.LVL165:
 2406              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2407              		.loc 1 184 5 view .LVU615
 2408 0aa8 0C0057E1 		cmp	r7, ip	@ npix, n
 2409 0aac F9FFFFCA 		bgt	.L144		@,
 2410              	.LVL166:
 2411              	.L137:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2412              		.loc 1 184 5 view .LVU616
 2413              	.LBE35:
 2414              	.LBE37:
 2415              	@ armwave.c:453: }
 453:armwave.c     **** }
 2416              		.loc 1 453 1 view .LVU617
 2417 0ab0 0CD08DE2 		add	sp, sp, #12	@,,
 2418              		.cfi_remember_state
 2419              		.cfi_def_cfa_offset 36
 2420              		@ sp needed	@
 2421 0ab4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2422              	.LVL167:
 2423              	.L153:
 2424              		.cfi_restore_state
 2425              	.LBB38:
 2426              	.LBB36:
 2427              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2428              		.loc 1 195 19 view .LVU618
 2429 0ab8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2430              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2431              		.loc 1 190 11 view .LVU619
 2432 0abc 0C60A0E1 		mov	r6, ip	@ ivtmp.105, n
 2433              	.LVL168:
 192:armwave.c     ****                 wave_word >>= 8;
 2434              		.loc 1 192 17 is_stmt 1 view .LVU620
 193:armwave.c     **** 
 2435              		.loc 1 193 17 view .LVU621
 2436              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2437              		.loc 1 193 27 is_stmt 0 view .LVU622
 2438 0ac0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2439              	.LVL169:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2440              		.loc 1 195 17 is_stmt 1 view .LVU623
 2441 0ac4 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.105,
 2442              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2443              		.loc 1 195 19 is_stmt 0 view .LVU624
 2444 0ac8 0500001A 		bne	.L157		@,
 2445              	.LVL170:
 2446              	.L141:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2447              		.loc 1 195 19 view .LVU625
 2448 0acc 016086E2 		add	r6, r6, #1	@ ivtmp.105, ivtmp.105,
 2449              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 2450              		.loc 1 191 13 view .LVU626
 2451 0ad0 06005CE1 		cmp	ip, r6	@ n, ivtmp.105
 2452 0ad4 F3FFFF0A 		beq	.L140		@,
 192:armwave.c     ****                 wave_word >>= 8;
 2453              		.loc 1 192 17 is_stmt 1 view .LVU627
 2454              	.LVL171:
 193:armwave.c     **** 
 2455              		.loc 1 193 17 view .LVU628
 2456              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2457              		.loc 1 195 19 is_stmt 0 view .LVU629
 2458 0ad8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2459              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2460              		.loc 1 193 27 view .LVU630
 2461 0adc 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2462              	.LVL172:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2463              		.loc 1 195 17 is_stmt 1 view .LVU631
 2464              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2465              		.loc 1 195 19 is_stmt 0 view .LVU632
 2466 0ae0 F9FFFF0A 		beq	.L141		@,
 2467              	.L157:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2468              		.loc 1 196 21 is_stmt 1 view .LVU633
 2469              	.LVL173:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2470              		.loc 1 197 21 view .LVU634
 198:armwave.c     **** 
 2471              		.loc 1 198 21 view .LVU635
 200:armwave.c     ****                     g = MIN(gg, 255);
 2472              		.loc 1 200 21 view .LVU636
 201:armwave.c     ****                     b = MIN(bb, 255);
 2473              		.loc 1 201 21 view .LVU637
 202:armwave.c     **** 
 2474              		.loc 1 202 21 view .LVU638
 205:armwave.c     **** 
 2475              		.loc 1 205 21 view .LVU639
 2476              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2477              		.loc 1 220 32 is_stmt 0 view .LVU640
 2478 0ae4 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.105
 2479              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2480              		.loc 1 221 41 view .LVU641
 2481 0ae8 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2482              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2483              		.loc 1 220 40 view .LVU642
 2484 0aec 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2485              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2486              		.loc 1 221 41 view .LVU643
 2487 0af0 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2488              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2489              		.loc 1 198 55 view .LVU644
 2490 0af4 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2491              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2492              		.loc 1 220 40 view .LVU645
 2493 0af8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2494              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2495              		.loc 1 221 46 view .LVU646
 2496 0afc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2497              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2498              		.loc 1 197 55 view .LVU647
 2499 0b00 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2500              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2501              		.loc 1 198 24 view .LVU648
 2502 0b04 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2503              	.LVL174:
 2504              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2505              		.loc 1 202 25 view .LVU649
 2506 0b08 FF0053E3 		cmp	r3, #255	@ bb,
 2507              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2508              		.loc 1 197 24 view .LVU650
 2509 0b0c 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2510              	.LVL175:
 2511              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2512              		.loc 1 202 25 view .LVU651
 2513 0b10 FF30A0A3 		movge	r3, #255	@ bb,
 2514              	.LVL176:
 2515              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2516              		.loc 1 220 40 view .LVU652
 2517 0b14 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2518              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2519              		.loc 1 221 46 view .LVU653
 2520 0b18 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2521              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 2522              		.loc 1 201 25 view .LVU654
 2523 0b1c FF0052E3 		cmp	r2, #255	@ gg,
 2524 0b20 FF20A0A3 		movge	r2, #255	@ gg,
 2525              	.LVL177:
 2526              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2527              		.loc 1 196 55 view .LVU655
 2528 0b24 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2529              	.LVL178:
 2530              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2531              		.loc 1 205 56 view .LVU656
 2532 0b28 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2533              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2534              		.loc 1 205 44 view .LVU657
 2535 0b2c 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2536              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2537              		.loc 1 220 24 view .LVU658
 2538 0b30 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2539              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2540              		.loc 1 196 24 view .LVU659
 2541 0b34 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2542              	.LVL179:
 2543              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2544              		.loc 1 205 56 view .LVU660
 2545 0b38 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2546              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2547              		.loc 1 205 44 view .LVU661
 2548 0b3c FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2549              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2550              		.loc 1 200 25 view .LVU662
 2551 0b40 FF0051E3 		cmp	r1, #255	@ rr,
 2552              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2553              		.loc 1 205 51 view .LVU663
 2554 0b44 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2555              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2556              		.loc 1 200 25 view .LVU664
 2557 0b48 FF10A0A3 		movge	r1, #255	@ rr,
 2558              	.LVL180:
 2559              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2560              		.loc 1 220 24 view .LVU665
 2561 0b4c 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2562              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2563              		.loc 1 221 24 view .LVU666
 2564 0b50 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2565              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2566              		.loc 1 205 62 view .LVU667
 2567 0b54 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2568 0b58 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2569              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2570              		.loc 1 205 26 view .LVU668
 2571 0b5c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2572              	.LVL181:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2573              		.loc 1 219 21 is_stmt 1 view .LVU669
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2574              		.loc 1 220 21 view .LVU670
 221:armwave.c     ****                     xx = (nsub >> 8);
 2575              		.loc 1 221 21 view .LVU671
 222:armwave.c     **** 
 2576              		.loc 1 222 21 view .LVU672
 2577              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 2578              		.loc 1 222 32 is_stmt 0 view .LVU673
 2579 0b60 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.105,
 2580              	.LVL182:
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2581              		.loc 1 224 21 is_stmt 1 view .LVU674
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2582              		.loc 1 224 21 is_stmt 0 view .LVU675
 2583 0b64 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2584              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2585              		.loc 1 221 24 view .LVU676
 2586 0b68 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2587              	.LVL183:
 2588              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2589              		.loc 1 224 21 view .LVU677
 2590 0b6c 02005EE1 		cmp	lr, r2	@ yy, ye
 2591 0b70 D5FFFF2A 		bcs	.L141		@,
 2592 0b74 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2593              	.LVL184:
 2594              	.L142:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2595              		.loc 1 225 25 is_stmt 1 view .LVU678
 226:armwave.c     ****                     }
 2596              		.loc 1 226 25 view .LVU679
 2597              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2598              		.loc 1 225 43 is_stmt 0 view .LVU680
 2599 0b78 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2600              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2601              		.loc 1 224 21 view .LVU681
 2602 0b7c 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2603              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2604              		.loc 1 226 43 view .LVU682
 2605 0b80 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2606              	.LVL185:
 2607              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2608              		.loc 1 224 42 view .LVU683
 2609 0b84 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2610              	.LVL186:
 2611              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2612              		.loc 1 224 21 view .LVU684
 2613 0b88 0E0050E1 		cmp	r0, lr	@ ye, yy
 2614              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2615              		.loc 1 226 53 view .LVU685
 2616 0b8c 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 2617              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2618              		.loc 1 224 21 view .LVU686
 2619 0b90 F8FFFF1A 		bne	.L142		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2620              		.loc 1 224 21 view .LVU687
 2621 0b94 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2622 0b98 CBFFFFEA 		b	.L141		@
 2623              	.LVL187:
 2624              	.L156:
 179:armwave.c     **** 
 2625              		.loc 1 179 5 is_stmt 1 view .LVU688
 2626 0b9c 10309FE5 		ldr	r3, .L158+4	@,
 2627 0ba0 B320A0E3 		mov	r2, #179	@,
 2628 0ba4 0C109FE5 		ldr	r1, .L158+8	@,
 2629 0ba8 0C009FE5 		ldr	r0, .L158+12	@,
 2630              	.LVL188:
 179:armwave.c     **** 
 2631              		.loc 1 179 5 is_stmt 0 view .LVU689
 2632 0bac FEFFFFEB 		bl	__assert_fail		@
 2633              	.LVL189:
 2634              	.L159:
 2635              		.align	2
 2636              	.L158:
 2637 0bb0 00000000 		.word	g_armwave_state
 2638 0bb4 00000000 		.word	.LANCHOR0
 2639 0bb8 84000000 		.word	.LC4
 2640 0bbc 90000000 		.word	.LC5
 2641              	.LBE36:
 2642              	.LBE38:
 2643              		.cfi_endproc
 2644              	.LFE71:
 2646              		.align	2
 2647              		.global	armwave_test_buffer_alloc
 2648              		.syntax unified
 2649              		.arm
 2650              		.fpu vfp
 2652              	armwave_test_buffer_alloc:
 2653              	.LVL190:
 2654              	.LFB72:
 454:armwave.c     **** 
 455:armwave.c     **** /*
 456:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 457:armwave.c     ****  */
 458:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 459:armwave.c     **** {
 2655              		.loc 1 459 1 is_stmt 1 view -0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 0
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
 460:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2659              		.loc 1 460 5 view .LVU691
 2660              	@ armwave.c:459: {
 459:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2661              		.loc 1 459 1 is_stmt 0 view .LVU692
 2662 0bc0 70402DE9 		push	{r4, r5, r6, lr}	@
 2663              		.cfi_def_cfa_offset 16
 2664              		.cfi_offset 4, -16
 2665              		.cfi_offset 5, -12
 2666              		.cfi_offset 6, -8
 2667              		.cfi_offset 14, -4
 2668              	@ armwave.c:459: {
 459:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2669              		.loc 1 459 1 view .LVU693
 2670 0bc4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2671              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 2672              		.loc 1 460 23 view .LVU694
 2673 0bc8 44409FE5 		ldr	r4, .L167	@ tmp128,
 2674 0bcc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2675              	.LVL191:
 2676              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 2677              		.loc 1 460 7 view .LVU695
 2678 0bd0 000050E3 		cmp	r0, #0	@ _1,
 2679 0bd4 0000000A 		beq	.L161		@,
 461:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2680              		.loc 1 461 9 is_stmt 1 view .LVU696
 2681 0bd8 FEFFFFEB 		bl	free		@
 2682              	.LVL192:
 2683              	.L161:
 462:armwave.c     ****     }
 463:armwave.c     **** 
 464:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 465:armwave.c     **** 
 466:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2684              		.loc 1 466 5 view .LVU697
 2685              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2686              		.loc 1 466 75 is_stmt 0 view .LVU698
 2687 0bdc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2688 0be0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2689              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2690              		.loc 1 466 40 view .LVU699
 2691 0be4 0610A0E1 		mov	r1, r6	@, nsets
 2692              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2693              		.loc 1 466 75 view .LVU700
 2694 0be8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2695              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2696              		.loc 1 466 40 view .LVU701
 2697 0bec 0500A0E1 		mov	r0, r5	@, _4
 2698 0bf0 FEFFFFEB 		bl	calloc		@
 2699              	.LVL193:
 2700              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer == NULL) {
 467:armwave.c     **** 
 468:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2701              		.loc 1 468 7 view .LVU702
 2702 0bf4 000050E3 		cmp	r0, #0	@ tmp124,
 2703              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 2704              		.loc 1 466 38 view .LVU703
 2705 0bf8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2706              		.loc 1 468 5 is_stmt 1 view .LVU704
 2707              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer == NULL) {
 2708              		.loc 1 468 7 is_stmt 0 view .LVU705
 2709 0bfc 7080BD18 		popne	{r4, r5, r6, pc}	@
 469:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2710              		.loc 1 469 9 is_stmt 1 view .LVU706
 2711 0c00 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2712 0c04 0620A0E1 		mov	r2, r6	@, nsets
 2713 0c08 08009FE5 		ldr	r0, .L167+4	@,
 2714              	@ armwave.c:473: }
 470:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 471:armwave.c     ****         return;
 472:armwave.c     ****     }
 473:armwave.c     **** }
 2715              		.loc 1 473 1 is_stmt 0 view .LVU707
 2716 0c0c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2717              		.cfi_restore 14
 2718              		.cfi_restore 6
 2719              		.cfi_restore 5
 2720              		.cfi_restore 4
 2721              		.cfi_def_cfa_offset 0
 2722              	.LVL194:
 2723              	@ armwave.c:469:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 469:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2724              		.loc 1 469 9 view .LVU708
 2725 0c10 FEFFFFEA 		b	printf		@
 2726              	.LVL195:
 2727              	.L168:
 469:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2728              		.loc 1 469 9 view .LVU709
 2729              		.align	2
 2730              	.L167:
 2731 0c14 00000000 		.word	g_armwave_state
 2732 0c18 20020000 		.word	.LC20
 2733              		.cfi_endproc
 2734              	.LFE72:
 2736              		.align	2
 2737              		.global	armwave_fill_pixbuf_into_pybuffer
 2738              		.syntax unified
 2739              		.arm
 2740              		.fpu vfp
 2742              	armwave_fill_pixbuf_into_pybuffer:
 2743              	.LVL196:
 2744              	.LFB73:
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 477:armwave.c     ****  */
 478:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 479:armwave.c     **** {
 2745              		.loc 1 479 1 is_stmt 1 view -0
 2746              		.cfi_startproc
 2747              		@ args = 0, pretend = 0, frame = 48
 2748              		@ frame_needed = 0, uses_anonymous_args = 0
 480:armwave.c     ****     Py_buffer buffer;
 2749              		.loc 1 480 5 view .LVU711
 481:armwave.c     ****     int ret;
 2750              		.loc 1 481 5 view .LVU712
 482:armwave.c     **** 
 483:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 484:armwave.c     **** 
 485:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2751              		.loc 1 485 5 view .LVU713
 2752              	@ armwave.c:479: {
 479:armwave.c     ****     Py_buffer buffer;
 2753              		.loc 1 479 1 is_stmt 0 view .LVU714
 2754 0c1c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2755              		.cfi_def_cfa_offset 4
 2756              		.cfi_offset 14, -4
 2757 0c20 34D04DE2 		sub	sp, sp, #52	@,,
 2758              		.cfi_def_cfa_offset 56
 2759              	@ armwave.c:485:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2760              		.loc 1 485 11 view .LVU715
 2761 0c24 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2762 0c28 0120A0E3 		mov	r2, #1	@,
 2763 0c2c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2764              	.LVL197:
 486:armwave.c     **** 
 487:armwave.c     ****     if(ret != 0) {
 2765              		.loc 1 487 5 is_stmt 1 view .LVU716
 2766              	@ armwave.c:487:     if(ret != 0) {
 2767              		.loc 1 487 7 is_stmt 0 view .LVU717
 2768 0c30 000050E3 		cmp	r0, #0	@,
 2769 0c34 0A00001A 		bne	.L173		@,
 488:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 489:armwave.c     ****         Py_RETURN_FALSE;
 490:armwave.c     ****     }
 491:armwave.c     **** 
 492:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 493:armwave.c     **** 
 494:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2770              		.loc 1 494 5 is_stmt 1 view .LVU718
 2771 0c38 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2772              	.LVL198:
 2773              		.loc 1 494 5 is_stmt 0 view .LVU719
 2774 0c3c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2775              	.LVL199:
 495:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 496:armwave.c     **** 
 497:armwave.c     ****     PyBuffer_Release(&buffer);
 2776              		.loc 1 497 5 is_stmt 1 view .LVU720
 2777 0c40 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2778 0c44 FEFFFFEB 		bl	PyBuffer_Release		@
 2779              	.LVL200:
 498:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 499:armwave.c     **** 
 500:armwave.c     ****     Py_RETURN_TRUE;
 2780              		.loc 1 500 5 view .LVU721
 2781              	.LBB39:
 2782              	.LBI39:
 2783              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2784              		.loc 2 456 20 view .LVU722
 2785              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2786              		.loc 2 458 21 view .LVU723
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2787              		.loc 2 459 5 view .LVU724
 2788              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2789              		.loc 2 459 18 is_stmt 0 view .LVU725
 2790 0c48 38309FE5 		ldr	r3, .L174	@ tmp126,
 2791              	.LBE40:
 2792              	.LBE39:
 2793              	@ armwave.c:500:     Py_RETURN_TRUE;
 2794              		.loc 1 500 5 view .LVU726
 2795 0c4c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2796              	.LBB42:
 2797              	.LBB41:
 2798              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2799              		.loc 2 459 18 view .LVU727
 2800 0c50 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2801 0c54 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2802 0c58 002083E5 		str	r2, [r3]	@ tmp128,
 2803              	.LBE41:
 2804              	.LBE42:
 2805              	@ armwave.c:501: }
 501:armwave.c     **** }
 2806              		.loc 1 501 1 view .LVU728
 2807 0c5c 34D08DE2 		add	sp, sp, #52	@,,
 2808              		.cfi_remember_state
 2809              		.cfi_def_cfa_offset 4
 2810              		@ sp needed	@
 2811 0c60 04F09DE4 		ldr	pc, [sp], #4	@
 2812              	.LVL201:
 2813              	.L173:
 2814              		.cfi_restore_state
 488:armwave.c     ****         Py_RETURN_FALSE;
 2815              		.loc 1 488 9 is_stmt 1 view .LVU729
 2816 0c64 20009FE5 		ldr	r0, .L174+4	@,
 2817              	.LVL202:
 488:armwave.c     ****         Py_RETURN_FALSE;
 2818              		.loc 1 488 9 is_stmt 0 view .LVU730
 2819 0c68 FEFFFFEB 		bl	puts		@
 2820              	.LVL203:
 489:armwave.c     ****     }
 2821              		.loc 1 489 9 is_stmt 1 view .LVU731
 2822              	.LBB43:
 2823              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 2824              		.loc 2 456 20 view .LVU732
 2825              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2826              		.loc 2 458 21 view .LVU733
 2827              		.loc 2 459 5 view .LVU734
 2828              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2829              		.loc 2 459 18 is_stmt 0 view .LVU735
 2830 0c6c 1C309FE5 		ldr	r3, .L174+8	@ tmp120,
 2831              	.LBE44:
 2832              	.LBE43:
 2833              	@ armwave.c:489:         Py_RETURN_FALSE;
 489:armwave.c     ****     }
 2834              		.loc 1 489 9 view .LVU736
 2835 0c70 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2836              	.LBB46:
 2837              	.LBB45:
 2838              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2839              		.loc 2 459 18 view .LVU737
 2840 0c74 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2841 0c78 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2842 0c7c 002083E5 		str	r2, [r3]	@ tmp122,
 2843              	.LBE45:
 2844              	.LBE46:
 2845              	@ armwave.c:501: }
 2846              		.loc 1 501 1 view .LVU738
 2847 0c80 34D08DE2 		add	sp, sp, #52	@,,
 2848              		.cfi_def_cfa_offset 4
 2849              		@ sp needed	@
 2850 0c84 04F09DE4 		ldr	pc, [sp], #4	@
 2851              	.L175:
 2852              		.align	2
 2853              	.L174:
 2854 0c88 00000000 		.word	_Py_TrueStruct
 2855 0c8c 74020000 		.word	.LC21
 2856 0c90 00000000 		.word	_Py_FalseStruct
 2857              		.cfi_endproc
 2858              	.LFE73:
 2860              		.align	2
 2861              		.global	armwave_test_create_am_sine
 2862              		.syntax unified
 2863              		.arm
 2864              		.fpu vfp
 2866              	armwave_test_create_am_sine:
 2867              	.LVL204:
 2868              	.LFB74:
 502:armwave.c     **** 
 503:armwave.c     **** /*
 504:armwave.c     ****  * Make a test AM waveform for render tests.
 505:armwave.c     ****  *
 506:armwave.c     ****  * @param   mod                     modulation depth
 507:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 508:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 509:armwave.c     ****  */
 510:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 511:armwave.c     **** {
 2869              		.loc 1 511 1 is_stmt 1 view -0
 2870              		.cfi_startproc
 2871              		@ args = 0, pretend = 0, frame = 8
 2872              		@ frame_needed = 0, uses_anonymous_args = 0
 512:armwave.c     ****     float v, noise, xnoise, mod_val;
 2873              		.loc 1 512 5 view .LVU740
 513:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2874              		.loc 1 513 5 view .LVU741
 2875              	@ armwave.c:511: {
 511:armwave.c     ****     float v, noise, xnoise, mod_val;
 2876              		.loc 1 511 1 is_stmt 0 view .LVU742
 2877 0c94 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2878              		.cfi_def_cfa_offset 32
 2879              		.cfi_offset 4, -32
 2880              		.cfi_offset 5, -28
 2881              		.cfi_offset 6, -24
 2882              		.cfi_offset 7, -20
 2883              		.cfi_offset 8, -16
 2884              		.cfi_offset 9, -12
 2885              		.cfi_offset 10, -8
 2886              		.cfi_offset 14, -4
 2887              	@ armwave.c:513:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2888              		.loc 1 513 38 view .LVU743
 2889 0c98 7A7A9FED 		vldr.32	s14, .L207	@ tmp180,
 2890              	@ armwave.c:513:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2891              		.loc 1 513 55 view .LVU744
 2892 0c9c 00529FE5 		ldr	r5, .L207+28	@ tmp250,
 2893              	@ armwave.c:511: {
 511:armwave.c     ****     float v, noise, xnoise, mod_val;
 2894              		.loc 1 511 1 view .LVU745
 2895 0ca0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2896              		.cfi_def_cfa_offset 80
 2897              		.cfi_offset 80, -80
 2898              		.cfi_offset 81, -76
 2899              		.cfi_offset 82, -72
 2900              		.cfi_offset 83, -68
 2901              		.cfi_offset 84, -64
 2902              		.cfi_offset 85, -60
 2903              		.cfi_offset 86, -56
 2904              		.cfi_offset 87, -52
 2905              		.cfi_offset 88, -48
 2906              		.cfi_offset 89, -44
 2907              		.cfi_offset 90, -40
 2908              		.cfi_offset 91, -36
 2909 0ca4 0090A0E1 		mov	r9, r0	@ sets, sets
 2910              	@ armwave.c:513:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2911              		.loc 1 513 38 view .LVU746
 2912 0ca8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2913              	@ armwave.c:517:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 514:armwave.c     ****     int s, set_offset = 0;
 515:armwave.c     ****     int w, x;
 516:armwave.c     **** 
 517:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2914              		.loc 1 517 70 view .LVU747
 2915 0cac 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2916 0cb0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2917              	.LBB49:
 2918              	.LBB50:
 2919              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2920              		.loc 1 460 23 view .LVU748
 2921 0cb4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2922              	.LVL205:
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2923              		.loc 1 460 23 view .LVU749
 2924              	.LBE50:
 2925              	.LBE49:
 2926              	@ armwave.c:513:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 513:armwave.c     ****     int s, set_offset = 0;
 2927              		.loc 1 513 38 view .LVU750
 2928 0cb8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2929              	@ armwave.c:517:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2930              		.loc 1 517 70 view .LVU751
 2931 0cbc 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2932              	@ armwave.c:511: {
 511:armwave.c     ****     float v, noise, xnoise, mod_val;
 2933              		.loc 1 511 1 view .LVU752
 2934 0cc0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2935              	.LBB54:
 2936              	.LBB51:
 2937              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2938              		.loc 1 460 7 view .LVU753
 2939 0cc4 000050E3 		cmp	r0, #0	@ _82,
 2940              	.LBE51:
 2941              	.LBE54:
 2942              	@ armwave.c:511: {
 511:armwave.c     ****     float v, noise, xnoise, mod_val;
 2943              		.loc 1 511 1 view .LVU754
 2944 0cc8 08D04DE2 		sub	sp, sp, #8	@,,
 2945              		.cfi_def_cfa_offset 88
 2946              	@ armwave.c:518:     g_armwave_state.test_wave_buffer_nsets = sets;
 518:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2947              		.loc 1 518 44 view .LVU755
 2948 0ccc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2949              	@ armwave.c:517:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 517:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2950              		.loc 1 517 45 view .LVU756
 2951 0cd0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2952              	@ armwave.c:513:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 513:armwave.c     ****     int s, set_offset = 0;
 2953              		.loc 1 513 38 view .LVU757
 2954 0cd4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2955              	@ armwave.c:513:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 513:armwave.c     ****     int s, set_offset = 0;
 2956              		.loc 1 513 11 view .LVU758
 2957 0cd8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2958              	.LVL206:
 514:armwave.c     ****     int w, x;
 2959              		.loc 1 514 5 is_stmt 1 view .LVU759
 515:armwave.c     **** 
 2960              		.loc 1 515 5 view .LVU760
 517:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2961              		.loc 1 517 5 view .LVU761
 2962              		.loc 1 518 5 view .LVU762
 519:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2963              		.loc 1 519 5 view .LVU763
 2964              	.LBB55:
 2965              	.LBI49:
 458:armwave.c     **** {
 2966              		.loc 1 458 6 view .LVU764
 2967              	.LBB52:
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2968              		.loc 1 460 5 view .LVU765
 2969              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2970              		.loc 1 460 7 is_stmt 0 view .LVU766
 2971 0cdc 0000000A 		beq	.L177		@,
 461:armwave.c     ****     }
 2972              		.loc 1 461 9 is_stmt 1 view .LVU767
 2973 0ce0 FEFFFFEB 		bl	free		@
 2974              	.LVL207:
 2975              	.L177:
 466:armwave.c     **** 
 2976              		.loc 1 466 5 view .LVU768
 2977              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 2978              		.loc 1 466 75 is_stmt 0 view .LVU769
 2979 0ce4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2980 0ce8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2981              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 2982              		.loc 1 466 40 view .LVU770
 2983 0cec 0910A0E1 		mov	r1, r9	@, sets
 2984              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 2985              		.loc 1 466 75 view .LVU771
 2986 0cf0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2987              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 2988              		.loc 1 466 40 view .LVU772
 2989 0cf4 0400A0E1 		mov	r0, r4	@, _85
 2990 0cf8 FEFFFFEB 		bl	calloc		@
 2991              	.LVL208:
 2992              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer == NULL) {
 468:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2993              		.loc 1 468 7 view .LVU773
 2994 0cfc 000050E3 		cmp	r0, #0	@ tmp191,
 2995              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 2996              		.loc 1 466 38 view .LVU774
 2997 0d00 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 468:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2998              		.loc 1 468 5 is_stmt 1 view .LVU775
 2999              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer == NULL) {
 468:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3000              		.loc 1 468 7 is_stmt 0 view .LVU776
 3001 0d04 5A00000A 		beq	.L206		@,
 3002              	.L178:
 3003              	.LVL209:
 468:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3004              		.loc 1 468 7 view .LVU777
 3005              	.LBE52:
 3006              	.LBE55:
 3007              	@ armwave.c:521:     for(s = 0; s < sets; s++) {
 520:armwave.c     **** 
 521:armwave.c     ****     for(s = 0; s < sets; s++) {
 3008              		.loc 1 521 5 discriminator 1 view .LVU778
 3009 0d08 000059E3 		cmp	r9, #0	@ sets,
 3010 0d0c 550000DA 		ble	.L176		@,
 3011              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 522:armwave.c     ****         printf("Calculating test set %d\n", s);
 523:armwave.c     ****     
 524:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 525:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 526:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 527:armwave.c     **** 
 528:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 529:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 530:armwave.c     ****                 noise *= noise;
 531:armwave.c     ****                 noise *= noise;
 532:armwave.c     ****                 noise *= noise;
 533:armwave.c     **** 
 534:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 535:armwave.c     ****                     noise = -noise;
 536:armwave.c     **** 
 537:armwave.c     ****                 noise += 1.0f;
 538:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 539:armwave.c     **** 
 540:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3012              		.loc 1 540 45 view .LVU779
 3013 0d10 5C8A9FED 		vldr.32	s16, .L207	@ tmp258,
 3014              	@ armwave.c:543:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 541:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 542:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 543:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3015              		.loc 1 543 104 view .LVU780
 3016 0d14 5CCA9FED 		vldr.32	s24, .L207+4	@ tmp259,
 3017              	@ armwave.c:521:     for(s = 0; s < sets; s++) {
 521:armwave.c     ****         printf("Calculating test set %d\n", s);
 3018              		.loc 1 521 5 view .LVU781
 3019 0d18 0070A0E3 		mov	r7, #0	@ set_offset,
 3020              	@ armwave.c:522:         printf("Calculating test set %d\n", s);
 522:armwave.c     ****         printf("Calculating test set %d\n", s);
 3021              		.loc 1 522 9 view .LVU782
 3022 0d1c 84A19FE5 		ldr	r10, .L207+32	@ tmp257,
 3023              	@ armwave.c:521:     for(s = 0; s < sets; s++) {
 521:armwave.c     ****         printf("Calculating test set %d\n", s);
 3024              		.loc 1 521 5 view .LVU783
 3025 0d20 0780A0E1 		mov	r8, r7	@ s, set_offset
 3026              	.LVL210:
 3027              	.L179:
 522:armwave.c     ****         printf("Calculating test set %d\n", s);
 3028              		.loc 1 522 9 is_stmt 1 view .LVU784
 3029 0d24 0810A0E1 		mov	r1, r8	@, s
 3030 0d28 0A00A0E1 		mov	r0, r10	@, tmp257
 3031 0d2c FEFFFFEB 		bl	printf		@
 3032              	.LVL211:
 524:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3033              		.loc 1 524 9 view .LVU785
 3034              	@ armwave.c:524:         for(w = 0; w < g_armwave_state.waves; w++) {
 524:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3035              		.loc 1 524 39 is_stmt 0 view .LVU786
 3036 0d30 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3037              	@ armwave.c:524:         for(w = 0; w < g_armwave_state.waves; w++) {
 524:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3038              		.loc 1 524 9 view .LVU787
 3039 0d34 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3040 0d38 450000DA 		ble	.L180		@,
 3041              	@ armwave.c:526:             mod_val = 0.5f + (_1_waves_mod * w);
 526:armwave.c     **** 
 3042              		.loc 1 526 21 view .LVU788
 3043 0d3c 53CADFED 		vldr.32	s25, .L207+8	@ tmp200,
 3044              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3045              		.loc 1 540 33 view .LVU789
 3046 0d40 53BA9FED 		vldr.32	s22, .L207+12	@ tmp253,
 3047              	@ armwave.c:538:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 538:armwave.c     **** 
 3048              		.loc 1 538 24 view .LVU790
 3049 0d44 53AADFED 		vldr.32	s21, .L207+16	@ tmp254,
 3050 0d48 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3051              	@ armwave.c:524:         for(w = 0; w < g_armwave_state.waves; w++) {
 524:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3052              		.loc 1 524 15 view .LVU791
 3053 0d4c 0060A0E3 		mov	r6, #0	@ w,
 3054              	.LVL212:
 3055              	.L187:
 526:armwave.c     **** 
 3056              		.loc 1 526 13 is_stmt 1 view .LVU792
 3057              	@ armwave.c:526:             mod_val = 0.5f + (_1_waves_mod * w);
 526:armwave.c     **** 
 3058              		.loc 1 526 21 is_stmt 0 view .LVU793
 3059 0d50 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3060 0d54 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3061              	@ armwave.c:528:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 528:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3062              		.loc 1 528 13 view .LVU794
 3063 0d58 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3064              	@ armwave.c:526:             mod_val = 0.5f + (_1_waves_mod * w);
 526:armwave.c     **** 
 3065              		.loc 1 526 21 view .LVU795
 3066 0d5c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3067 0d60 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3068              	.LVL213:
 528:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3069              		.loc 1 528 13 is_stmt 1 view .LVU796
 528:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3070              		.loc 1 528 13 is_stmt 0 view .LVU797
 3071 0d64 370000DA 		ble	.L181		@,
 3072 0d68 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3073              	@ armwave.c:543:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3074              		.loc 1 543 113 view .LVU798
 3075 0d6c 4AAA9FED 		vldr.32	s20, .L207+20	@ tmp229,
 3076 0d70 4A8ADFED 		vldr.32	s17, .L207+24	@ tmp230,
 3077              	@ armwave.c:528:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 528:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3078              		.loc 1 528 19 view .LVU799
 3079 0d74 0040A0E3 		mov	r4, #0	@ x,
 3080              	.LVL214:
 3081              	.L186:
 529:armwave.c     ****                 noise *= noise;
 3082              		.loc 1 529 17 is_stmt 1 view .LVU800
 3083              	@ armwave.c:529:                 noise  = ((rand() & 0xffff) * noise_fraction);
 529:armwave.c     ****                 noise *= noise;
 3084              		.loc 1 529 28 is_stmt 0 view .LVU801
 3085 0d78 FEFFFFEB 		bl	rand		@
 3086              	.LVL215:
 3087              	@ armwave.c:529:                 noise  = ((rand() & 0xffff) * noise_fraction);
 529:armwave.c     ****                 noise *= noise;
 3088              		.loc 1 529 35 view .LVU802
 3089 0d7c 7000FFE6 		uxth	r0, r0	@ tmp201,
 3090              	@ armwave.c:529:                 noise  = ((rand() & 0xffff) * noise_fraction);
 529:armwave.c     ****                 noise *= noise;
 3091              		.loc 1 529 45 view .LVU803
 3092 0d80 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3093 0d84 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3094              	@ armwave.c:529:                 noise  = ((rand() & 0xffff) * noise_fraction);
 529:armwave.c     ****                 noise *= noise;
 3095              		.loc 1 529 24 view .LVU804
 3096 0d88 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3097              	.LVL216:
 530:armwave.c     ****                 noise *= noise;
 3098              		.loc 1 530 17 is_stmt 1 view .LVU805
 3099              	@ armwave.c:530:                 noise *= noise;
 530:armwave.c     ****                 noise *= noise;
 3100              		.loc 1 530 23 is_stmt 0 view .LVU806
 3101 0d8c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3102              	.LVL217:
 531:armwave.c     ****                 noise *= noise;
 3103              		.loc 1 531 17 is_stmt 1 view .LVU807
 3104              	@ armwave.c:531:                 noise *= noise;
 531:armwave.c     ****                 noise *= noise;
 3105              		.loc 1 531 23 is_stmt 0 view .LVU808
 3106 0d90 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3107              	.LVL218:
 532:armwave.c     **** 
 3108              		.loc 1 532 17 is_stmt 1 view .LVU809
 3109              	@ armwave.c:532:                 noise *= noise;
 532:armwave.c     **** 
 3110              		.loc 1 532 23 is_stmt 0 view .LVU810
 3111 0d94 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3112              	.LVL219:
 534:armwave.c     ****                     noise = -noise;
 3113              		.loc 1 534 17 is_stmt 1 view .LVU811
 3114              	@ armwave.c:534:                 if((rand() & 0xffff) > 0x7fff)
 534:armwave.c     ****                     noise = -noise;
 3115              		.loc 1 534 21 is_stmt 0 view .LVU812
 3116 0d98 FEFFFFEB 		bl	rand		@
 3117              	.LVL220:
 535:armwave.c     **** 
 3118              		.loc 1 535 21 is_stmt 1 view .LVU813
 3119              	@ armwave.c:534:                 if((rand() & 0xffff) > 0x7fff)
 534:armwave.c     ****                     noise = -noise;
 3120              		.loc 1 534 19 is_stmt 0 view .LVU814
 3121 0d9c 020910E3 		tst	r0, #32768	@,
 3122              	@ armwave.c:535:                     noise = -noise;
 535:armwave.c     **** 
 3123              		.loc 1 535 27 view .LVU815
 3124 0da0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3125              	.LVL221:
 537:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3126              		.loc 1 537 17 is_stmt 1 view .LVU816
 538:armwave.c     **** 
 3127              		.loc 1 538 17 view .LVU817
 3128              	@ armwave.c:538:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 538:armwave.c     **** 
 3129              		.loc 1 538 27 is_stmt 0 view .LVU818
 3130 0da4 FEFFFFEB 		bl	rand		@
 3131              	.LVL222:
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3132              		.loc 1 540 17 is_stmt 1 view .LVU819
 3133              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3134              		.loc 1 540 45 is_stmt 0 view .LVU820
 3135 0da8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3136              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3137              		.loc 1 540 33 view .LVU821
 3138 0dac 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3139              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3140              		.loc 1 540 45 view .LVU822
 3141 0db0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3142              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3143              		.loc 1 540 33 view .LVU823
 3144 0db4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3145              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3146              		.loc 1 540 45 view .LVU824
 3147 0db8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3148              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3149              		.loc 1 540 33 view .LVU825
 3150 0dbc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3151              	@ armwave.c:538:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 538:armwave.c     **** 
 3152              		.loc 1 538 34 view .LVU826
 3153 0dc0 7000FFE6 		uxth	r0, r0	@ tmp214,
 3154              	.LVL223:
 3155              	@ armwave.c:538:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 538:armwave.c     **** 
 3156              		.loc 1 538 44 view .LVU827
 3157 0dc4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3158 0dc8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3159              	@ armwave.c:538:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 538:armwave.c     **** 
 3160              		.loc 1 538 24 view .LVU828
 3161 0dcc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3162              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3163              		.loc 1 540 77 view .LVU829
 3164 0dd0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3165              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3166              		.loc 1 540 22 view .LVU830
 3167 0dd4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3168 0dd8 FEFFFFEB 		bl	sin		@
 3169              	.LVL224:
 3170              		.loc 1 543 17 is_stmt 1 view .LVU831
 3171              	@ armwave.c:537:                 noise += 1.0f;
 537:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3172              		.loc 1 537 23 is_stmt 0 view .LVU832
 3173 0ddc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3174              	@ armwave.c:543:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3175              		.loc 1 543 104 view .LVU833
 3176 0de0 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3177              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3178              		.loc 1 540 98 view .LVU834
 3179 0de4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3180              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3181              		.loc 1 540 87 view .LVU835
 3182 0de8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3183              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3184              		.loc 1 540 98 view .LVU836
 3185 0dec 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3186              	@ armwave.c:540:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 540:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3187              		.loc 1 540 19 view .LVU837
 3188 0df0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3189              	@ armwave.c:543:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3190              		.loc 1 543 113 view .LVU838
 3191 0df4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3192 0df8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3193 0dfc C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3194 0e00 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3195 0e04 050000DA 		ble	.L183		@,
 3196              	@ armwave.c:543:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3197              		.loc 1 543 104 discriminator 1 view .LVU839
 3198 0e08 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3199 0e0c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3200 0e10 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3201 0e14 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3202 0e18 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3203 0e1c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3204              	.L183:
 3205              	@ armwave.c:543:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3206              		.loc 1 543 57 discriminator 12 view .LVU840
 3207 0e20 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3208              	@ armwave.c:543:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3209              		.loc 1 543 102 discriminator 12 view .LVU841
 3210 0e24 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3211 0e28 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3212 0e2c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3213              	@ armwave.c:528:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 528:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3214              		.loc 1 528 58 discriminator 12 view .LVU842
 3215 0e30 014084E2 		add	r4, r4, #1	@ x, x,
 3216              	.LVL225:
 3217              	@ armwave.c:543:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3218              		.loc 1 543 102 discriminator 12 view .LVU843
 3219 0e34 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3220              	@ armwave.c:528:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 528:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3221              		.loc 1 528 43 discriminator 12 view .LVU844
 3222 0e38 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3223              	@ armwave.c:528:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 528:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3224              		.loc 1 528 13 discriminator 12 view .LVU845
 3225 0e3c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3226 0e40 CCFFFFCA 		bgt	.L186		@,
 3227 0e44 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3228              	.LVL226:
 3229              	.L181:
 3230              	@ armwave.c:524:         for(w = 0; w < g_armwave_state.waves; w++) {
 524:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3231              		.loc 1 524 48 discriminator 2 view .LVU846
 3232 0e48 016086E2 		add	r6, r6, #1	@ w, w,
 3233              	.LVL227:
 3234              	@ armwave.c:524:         for(w = 0; w < g_armwave_state.waves; w++) {
 524:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3235              		.loc 1 524 9 discriminator 2 view .LVU847
 3236 0e4c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3237 0e50 BEFFFFBA 		blt	.L187		@,
 3238              	.LVL228:
 3239              	.L180:
 544:armwave.c     ****             }
 545:armwave.c     ****         }
 546:armwave.c     **** 
 547:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3240              		.loc 1 547 9 is_stmt 1 discriminator 2 view .LVU848
 3241              	@ armwave.c:547:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3242              		.loc 1 547 46 is_stmt 0 discriminator 2 view .LVU849
 3243 0e54 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3244              	@ armwave.c:521:     for(s = 0; s < sets; s++) {
 521:armwave.c     ****         printf("Calculating test set %d\n", s);
 3245              		.loc 1 521 27 discriminator 2 view .LVU850
 3246 0e58 018088E2 		add	r8, r8, #1	@ s, s,
 3247              	.LVL229:
 3248              	@ armwave.c:521:     for(s = 0; s < sets; s++) {
 521:armwave.c     ****         printf("Calculating test set %d\n", s);
 3249              		.loc 1 521 5 discriminator 2 view .LVU851
 3250 0e5c 080059E1 		cmp	r9, r8	@ sets, s
 3251              	@ armwave.c:547:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3252              		.loc 1 547 20 discriminator 2 view .LVU852
 3253 0e60 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3254              	.LVL230:
 3255              	@ armwave.c:521:     for(s = 0; s < sets; s++) {
 521:armwave.c     ****         printf("Calculating test set %d\n", s);
 3256              		.loc 1 521 5 discriminator 2 view .LVU853
 3257 0e64 AEFFFF1A 		bne	.L179		@,
 3258              	.LVL231:
 3259              	.L176:
 3260              	@ armwave.c:549: }
 548:armwave.c     ****     }
 549:armwave.c     **** }
 3261              		.loc 1 549 1 view .LVU854
 3262 0e68 08D08DE2 		add	sp, sp, #8	@,,
 3263              		.cfi_remember_state
 3264              		.cfi_def_cfa_offset 80
 3265              		@ sp needed	@
 3266 0e6c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3267              		.cfi_restore 90
 3268              		.cfi_restore 91
 3269              		.cfi_restore 88
 3270              		.cfi_restore 89
 3271              		.cfi_restore 86
 3272              		.cfi_restore 87
 3273              		.cfi_restore 84
 3274              		.cfi_restore 85
 3275              		.cfi_restore 82
 3276              		.cfi_restore 83
 3277              		.cfi_restore 80
 3278              		.cfi_restore 81
 3279              		.cfi_def_cfa_offset 32
 3280              	.LVL232:
 3281              		.loc 1 549 1 view .LVU855
 3282 0e70 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3283              	.LVL233:
 3284              	.L206:
 3285              		.cfi_restore_state
 3286              	.LBB56:
 3287              	.LBB53:
 469:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3288              		.loc 1 469 9 is_stmt 1 view .LVU856
 3289 0e74 940901E0 		mul	r1, r4, r9	@, _85, sets
 3290 0e78 0920A0E1 		mov	r2, r9	@, sets
 3291 0e7c 28009FE5 		ldr	r0, .L207+36	@,
 3292 0e80 FEFFFFEB 		bl	printf		@
 3293              	.LVL234:
 471:armwave.c     ****     }
 3294              		.loc 1 471 9 view .LVU857
 3295 0e84 9FFFFFEA 		b	.L178		@
 3296              	.L208:
 3297              		.align	2
 3298              	.L207:
 3299 0e88 0000803F 		.word	1065353216
 3300 0e8c 00007F43 		.word	1132396544
 3301 0e90 0000003F 		.word	1056964608
 3302 0e94 C3F5C840 		.word	1086911939
 3303 0e98 38FFC74A 		.word	1254620984
 3304 0e9c 0000FE42 		.word	1123942400
 3305 0ea0 00000043 		.word	1124073472
 3306 0ea4 00000000 		.word	g_armwave_state
 3307 0ea8 C8020000 		.word	.LC22
 3308 0eac 20020000 		.word	.LC20
 3309              	.LBE53:
 3310              	.LBE56:
 3311              		.cfi_endproc
 3312              	.LFE74:
 3314              		.global	__aeabi_idiv
 3315              		.align	2
 3316              		.global	armwave_generate
 3317              		.syntax unified
 3318              		.arm
 3319              		.fpu vfp
 3321              	armwave_generate:
 3322              	.LFB75:
 550:armwave.c     **** 
 551:armwave.c     **** /*
 552:armwave.c     ****  * Make a test square waveform.
 553:armwave.c     ****  *
 554:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 555:armwave.c     ****  */
 556:armwave.c     **** #if 0
 557:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 558:armwave.c     **** {
 559:armwave.c     ****     uint8_t v;
 560:armwave.c     ****     float noise, xnoise;
 561:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 562:armwave.c     ****     int w, x;
 563:armwave.c     **** 
 564:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 565:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 566:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 567:armwave.c     ****             noise *= noise;
 568:armwave.c     ****             noise *= noise;
 569:armwave.c     ****             noise *= noise;
 570:armwave.c     **** 
 571:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 572:armwave.c     ****                 noise = -noise;
 573:armwave.c     **** 
 574:armwave.c     ****             //noise += 1.0f;
 575:armwave.c     **** 
 576:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 577:armwave.c     ****                 new_level = 0.2f;
 578:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 579:armwave.c     ****                 new_level = 0.8f;
 580:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 581:armwave.c     ****                 new_level = 0.2f;
 582:armwave.c     ****             } else {
 583:armwave.c     ****                 new_level = 0.8f;
 584:armwave.c     ****             }
 585:armwave.c     **** 
 586:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 587:armwave.c     **** 
 588:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 589:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 590:armwave.c     ****         }
 591:armwave.c     ****     }
 592:armwave.c     **** }
 593:armwave.c     **** #endif
 594:armwave.c     **** 
 595:armwave.c     **** /*
 596:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 597:armwave.c     ****  */
 598:armwave.c     **** void armwave_generate()
 599:armwave.c     **** {
 3323              		.loc 1 599 1 view -0
 3324              		.cfi_startproc
 3325              		@ args = 0, pretend = 0, frame = 0
 3326              		@ frame_needed = 0, uses_anonymous_args = 0
 600:armwave.c     ****     uint32_t yy;
 3327              		.loc 1 600 5 view .LVU859
 601:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 3328              		.loc 1 601 5 view .LVU860
 3329              	.LVL235:
 602:armwave.c     **** 
 603:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3330              		.loc 1 603 5 view .LVU861
 3331              	@ armwave.c:599: {
 599:armwave.c     ****     uint32_t yy;
 3332              		.loc 1 599 1 is_stmt 0 view .LVU862
 3333 0eb0 70402DE9 		push	{r4, r5, r6, lr}	@
 3334              		.cfi_def_cfa_offset 16
 3335              		.cfi_offset 4, -16
 3336              		.cfi_offset 5, -12
 3337              		.cfi_offset 6, -8
 3338              		.cfi_offset 14, -4
 3339              	@ armwave.c:603:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3340              		.loc 1 603 5 view .LVU863
 3341 0eb4 0010A0E3 		mov	r1, #0	@,
 3342              	@ armwave.c:603:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3343              		.loc 1 603 58 view .LVU864
 3344 0eb8 50509FE5 		ldr	r5, .L217	@ tmp146,
 3345              	@ armwave.c:603:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3346              		.loc 1 603 5 view .LVU865
 3347 0ebc 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 3348 0ec0 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 3349 0ec4 FEFFFFEB 		bl	memset		@
 3350              	.LVL236:
 604:armwave.c     **** 
 605:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 3351              		.loc 1 605 5 is_stmt 1 view .LVU866
 3352              	@ armwave.c:605:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3353              		.loc 1 605 68 is_stmt 0 view .LVU867
 3354 0ec8 446095E5 		ldr	r6, [r5, #68]	@ _9, g_armwave_state.slice_height
 3355              	@ armwave.c:605:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3356              		.loc 1 605 51 view .LVU868
 3357 0ecc 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 3358 0ed0 0610A0E1 		mov	r1, r6	@, _9
 3359 0ed4 FEFFFFEB 		bl	__aeabi_idiv		@
 3360              	.LVL237:
 3361              	@ armwave.c:605:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3362              		.loc 1 605 5 view .LVU869
 3363 0ed8 000050E3 		cmp	r0, #0	@,
 3364 0edc 7080BD08 		popeq	{r4, r5, r6, pc}	@
 3365              	@ armwave.c:605:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3366              		.loc 1 605 12 view .LVU870
 3367 0ee0 0040A0E3 		mov	r4, #0	@ yy,
 3368              	.LVL238:
 3369              	.L211:
 606:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 607:armwave.c     **** 
 608:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3370              		.loc 1 608 9 is_stmt 1 discriminator 3 view .LVU871
 3371 0ee4 940600E0 		mul	r0, r4, r6	@, yy, _9
 3372 0ee8 481095E5 		ldr	r1, [r5, #72]	@, g_armwave_state.slice_record_height
 3373 0eec FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 3374              	.LVL239:
 609:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 3375              		.loc 1 609 9 discriminator 3 view .LVU872
 610:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 3376              		.loc 1 610 9 discriminator 3 view .LVU873
 3377              	@ armwave.c:605:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 605:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 3378              		.loc 1 605 68 is_stmt 0 discriminator 3 view .LVU874
 3379 0ef0 446095E5 		ldr	r6, [r5, #68]	@ _9, g_armwave_state.slice_height
 3380              	@ armwave.c:605:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 605:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 3381              		.loc 1 605 51 discriminator 3 view .LVU875
 3382 0ef4 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 3383 0ef8 0610A0E1 		mov	r1, r6	@, _9
 3384 0efc FEFFFFEB 		bl	__aeabi_idiv		@
 3385              	.LVL240:
 3386              	@ armwave.c:605:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 605:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 3387              		.loc 1 605 86 discriminator 3 view .LVU876
 3388 0f00 014084E2 		add	r4, r4, #1	@ yy, yy,
 3389              	.LVL241:
 3390              	@ armwave.c:605:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 605:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 3391              		.loc 1 605 5 discriminator 3 view .LVU877
 3392 0f04 040050E1 		cmp	r0, r4	@, yy
 3393 0f08 F5FFFF8A 		bhi	.L211		@,
 3394 0f0c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 3395              	.L218:
 3396              		.align	2
 3397              	.L217:
 3398 0f10 00000000 		.word	g_armwave_state
 3399              		.cfi_endproc
 3400              	.LFE75:
 3402              		.align	2
 3403              		.global	armwave_cleanup
 3404              		.syntax unified
 3405              		.arm
 3406              		.fpu vfp
 3408              	armwave_cleanup:
 3409              	.LFB76:
 611:armwave.c     ****     }
 612:armwave.c     **** 
 613:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 614:armwave.c     **** }
 615:armwave.c     **** 
 616:armwave.c     **** /*
 617:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 618:armwave.c     ****  */
 619:armwave.c     **** void armwave_cleanup()
 620:armwave.c     **** {
 3410              		.loc 1 620 1 is_stmt 1 view -0
 3411              		.cfi_startproc
 3412              		@ args = 0, pretend = 0, frame = 0
 3413              		@ frame_needed = 0, uses_anonymous_args = 0
 621:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3414              		.loc 1 621 5 view .LVU879
 3415              	@ armwave.c:620: {
 620:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3416              		.loc 1 620 1 is_stmt 0 view .LVU880
 3417 0f14 10402DE9 		push	{r4, lr}	@
 3418              		.cfi_def_cfa_offset 8
 3419              		.cfi_offset 4, -8
 3420              		.cfi_offset 14, -4
 3421              	@ armwave.c:621:     free(g_armwave_state.out_pixbuf);
 3422              		.loc 1 621 25 view .LVU881
 3423 0f18 34409FE5 		ldr	r4, .L221	@ tmp114,
 3424              	@ armwave.c:621:     free(g_armwave_state.out_pixbuf);
 3425              		.loc 1 621 5 view .LVU882
 3426 0f1c 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3427 0f20 FEFFFFEB 		bl	free		@
 3428              	.LVL242:
 622:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3429              		.loc 1 622 5 is_stmt 1 view .LVU883
 3430 0f24 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3431 0f28 FEFFFFEB 		bl	free		@
 3432              	.LVL243:
 623:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3433              		.loc 1 623 5 view .LVU884
 3434 0f2c 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3435 0f30 FEFFFFEB 		bl	free		@
 3436              	.LVL244:
 624:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3437              		.loc 1 624 5 view .LVU885
 3438 0f34 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3439 0f38 FEFFFFEB 		bl	free		@
 3440              	.LVL245:
 625:armwave.c     **** 
 626:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3441              		.loc 1 626 5 view .LVU886
 3442              	@ armwave.c:626:     g_armwave_state.out_pixbuf = NULL;
 3443              		.loc 1 626 32 is_stmt 0 view .LVU887
 3444 0f3c 0030A0E3 		mov	r3, #0	@ tmp123,
 3445 0f40 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 627:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3446              		.loc 1 627 5 is_stmt 1 view .LVU888
 3447              	@ armwave.c:627:     g_armwave_state.ch1_buffer = NULL;
 3448              		.loc 1 627 32 is_stmt 0 view .LVU889
 3449 0f44 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 628:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3450              		.loc 1 628 5 is_stmt 1 view .LVU890
 3451              	@ armwave.c:628:     g_armwave_state.xcoord_to_xpixel = NULL;
 3452              		.loc 1 628 38 is_stmt 0 view .LVU891
 3453 0f48 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 629:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3454              		.loc 1 629 5 is_stmt 1 view .LVU892
 3455              	@ armwave.c:629:     g_armwave_state.test_wave_buffer = NULL;
 3456              		.loc 1 629 38 is_stmt 0 view .LVU893
 3457 0f4c 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3458              	@ armwave.c:630: }
 630:armwave.c     **** }
 3459              		.loc 1 630 1 view .LVU894
 3460 0f50 1080BDE8 		pop	{r4, pc}	@
 3461              	.L222:
 3462              		.align	2
 3463              	.L221:
 3464 0f54 00000000 		.word	g_armwave_state
 3465              		.cfi_endproc
 3466              	.LFE76:
 3468              		.comm	gamma_table,256,4
 3469              		.comm	g_armwave_state,136,4
 3470              		.section	.rodata
 3471              		.align	2
 3472              		.set	.LANCHOR0,. + 0
 3475              	__PRETTY_FUNCTION__.17095:
 3476 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3476      6176655F 
 3476      66696C6C 
 3476      5F706978 
 3476      6275665F 
 3477 001b 00       		.space	1
 3480              	__PRETTY_FUNCTION__.17117:
 3481 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3481      6176655F 
 3481      73657475 
 3481      705F7265 
 3481      6E646572 
 3482 0031 000000   		.space	3
 3485              	__PRETTY_FUNCTION__.17124:
 3486 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3486      6176655F 
 3486      7365745F 
 3486      77617665 
 3486      5F706F69 
 3487 004d 000000   		.space	3
 3490              	__PRETTY_FUNCTION__.17131:
 3491 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3491      6176655F 
 3491      7365745F 
 3491      77617665 
 3491      5F706F69 
 3492              		.section	.rodata.str1.4,"aMS",%progbits,1
 3493              		.align	2
 3494              	.LC0:
 3495 0000 76302E30 		.ascii	"v0.0.1\000"
 3495      2E3100
 3496 0007 00       		.space	1
 3497              	.LC1:
 3498 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3498      61766520 
 3498      76657273 
 3498      696F6E3A 
 3498      2025730A 
 3499 001d 000000   		.space	3
 3500              	.LC2:
 3501 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3501      78253038 
 3501      7820623D 
 3501      30782530 
 3501      38782063 
 3502 0053 6768743D 		.ascii	"ght=%d\012\000"
 3502      25640A00 
 3503 005b 00       		.space	1
 3504              	.LC3:
 3505 005c 773D2564 		.ascii	"w=%d stride=%d sly=%d wave_base=0x%08x\012\000"
 3505      20737472 
 3505      6964653D 
 3505      25642073 
 3505      6C793D25 
 3506              	.LC4:
 3507 0084 61726D77 		.ascii	"armwave.c\000"
 3507      6176652E 
 3507      6300
 3508 008e 0000     		.space	2
 3509              	.LC5:
 3510 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 3510      62756666 
 3510      65722021 
 3510      3D204E55 
 3510      4C4C00
 3511 00a3 00       		.space	1
 3512              	.LC6:
 3513 00a4 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3513      20653D25 
 3513      6420773D 
 3513      25642077 
 3513      733D2564 
 3514              	.LC7:
 3515 00d0 73746172 		.ascii	"start_point < end_point\000"
 3515      745F706F 
 3515      696E7420 
 3515      3C20656E 
 3515      645F706F 
 3516              	.LC8:
 3517 00e8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3517      7566665F 
 3517      73697A65 
 3517      3D25642C 
 3517      20636D70 
 3518 011a 00       		.ascii	"\000"
 3519 011b 00       		.space	1
 3520              	.LC9:
 3521 011c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3521      6D776176 
 3521      655F7374 
 3521      6174652E 
 3521      6368315F 
 3522 013f 00       		.space	1
 3523              	.LC10:
 3524 0140 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3524      6D776176 
 3524      655F7374 
 3524      6174652E 
 3524      78636F6F 
 3525 0169 000000   		.space	3
 3526              	.LC11:
 3527 016c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3527      3A203078 
 3527      25303878 
 3527      20307825 
 3527      30387820 
 3528              	.LC12:
 3529 0190 77617665 		.ascii	"wave_buffer != NULL\000"
 3529      5F627566 
 3529      66657220 
 3529      213D204E 
 3529      554C4C00 
 3530              	.LC13:
 3531 01a4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3531      6176655F 
 3531      7365745F 
 3531      77617665 
 3531      5F706F69 
 3532 01d7 78636565 		.ascii	"xceeded\000"
 3532      64656400 
 3533 01df 00       		.space	1
 3534              	.LC14:
 3535 01e0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3535      5F627566 
 3535      6665725F 
 3535      70747220 
 3535      213D2030 
 3536 01f5 000000   		.space	3
 3537              	.LC15:
 3538 01f8 776200   		.ascii	"wb\000"
 3539 01fb 00       		.space	1
 3540              	.LC16:
 3541 01fc 50330A00 		.ascii	"P3\012\000"
 3542              	.LC17:
 3543 0200 25642025 		.ascii	"%d %d\012\000"
 3543      640A00
 3544 0207 00       		.space	1
 3545              	.LC18:
 3546 0208 3235350A 		.ascii	"255\012\000"
 3546      00
 3547 020d 000000   		.space	3
 3548              	.LC19:
 3549 0210 25336420 		.ascii	"%3d %3d %3d\012\000"
 3549      25336420 
 3549      2533640A 
 3549      00
 3550 021d 000000   		.space	3
 3551              	.LC20:
 3552 0220 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3552      6176655F 
 3552      74657374 
 3552      5F627566 
 3552      6665725F 
 3553 0253 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3553      20627566 
 3553      66657220 
 3553      28256420 
 3553      62797465 
 3554              	.LC21:
 3555 0274 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3555      6176655F 
 3555      66696C6C 
 3555      5F706978 
 3555      6275665F 
 3556 02a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3556      20666169 
 3556      6C65642C 
 3556      20726574 
 3556      75726E69 
 3557 02c6 0000     		.space	2
 3558              	.LC22:
 3559 02c8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3559      756C6174 
 3559      696E6720 
 3559      74657374 
 3559      20736574 
 3560              		.text
 3561              	.Letext0:
 3562              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3563              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3564              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3565              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3566              		.file 7 "/usr/include/stdio.h"
 3567              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3568              		.file 9 "/usr/include/errno.h"
 3569              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3570              		.file 11 "/usr/include/unistd.h"
 3571              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3572              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3573              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3574              		.file 15 "/usr/include/math.h"
 3575              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3576              		.file 17 "/usr/include/time.h"
 3577              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3578              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3579              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3580              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3581              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3582              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3583              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3584              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3585              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3586              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3587              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3588              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3589              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3590              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3591              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3592              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3593              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3594              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3595              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3596              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3597              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3598              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3599              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3600              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3601              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3602              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3603              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3604              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3605              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3606              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3607              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3608              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3609              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3610              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3611              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3612              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3613              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3614              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3615              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3616              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3617              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3618              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3619              		.file 60 "/usr/local/include/python3.8/context.h"
 3620              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3621              		.file 62 "/usr/local/include/python3.8/code.h"
 3622              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3623              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3624              		.file 65 "/usr/local/include/python3.8/import.h"
 3625              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3626              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3627              		.file 68 "/usr/include/malloc.h"
 3628              		.file 69 "armwave.h"
 3629              		.file 70 "/usr/include/stdlib.h"
 3630              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3631              		.file 72 "<built-in>"
 3632              		.file 73 "/usr/include/assert.h"
 3633              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
