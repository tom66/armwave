   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C4C19FE5 		ldr	ip, .L27	@ tmp320,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 52 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp217, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp219, tmp217,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 52 view .LVU41
 279 00c8 950303E0 		mul	r3, r5, r3	@ tmp221, g_armwave_state.bitdepth_height, tmp219
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 620000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 6000000A 		beq	.L11		@,
 289 00dc 8350A0E1 		lsl	r5, r3, #1	@ _8, tmp221,
 290              	.LVL8:
 291              		.loc 1 79 5 view .LVU45
 292 00e0 043040E2 		sub	r3, r0, #4	@ tmp319, slice_y,
 293 00e4 0C308DE5 		str	r3, [sp, #12]	@ tmp319, %sfp
 294              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 295              		.loc 1 79 11 view .LVU46
 296 00e8 0030A0E3 		mov	r3, #0	@ w,
 297 00ec 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 298              	.LVL9:
 299              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 301              		.loc 1 84 9 view .LVU48
 302              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 80 64 is_stmt 0 view .LVU49
 304 00f0 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 305 00f4 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 306 00f8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp319, %sfp
 307 00fc 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 308 0100 93E223E0 		mla	r3, r3, r2, lr	@ tmp230, g_armwave_state.wave_stride, w, tmp319
 309              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 84 16 view .LVU50
 311 0104 0000A0E3 		mov	r0, #0	@ yy,
 312 0108 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 313 010c 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 314              	.LVL10:
 315              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 316              		.loc 1 87 13 is_stmt 1 view .LVU51
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 317              		.loc 1 101 17 view .LVU52
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 106 17 view .LVU53
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 319              		.loc 1 101 17 view .LVU54
 320              		.loc 1 106 17 view .LVU55
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 101 17 view .LVU56
 322              		.loc 1 106 17 view .LVU57
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 101 17 view .LVU58
 324              		.loc 1 106 17 view .LVU59
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 is_stmt 0 view .LVU60
 327 0110 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 328              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 102 34 view .LVU61
 330 0114 019080E2 		add	r9, r0, #1	@ tmp261, yy,
 331 0118 028080E2 		add	r8, r0, #2	@ tmp283, yy,
 332              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 333              		.loc 1 87 18 view .LVU62
 334 011c 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _187, offset: 0B]
 335              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 336              		.loc 1 102 34 view .LVU63
 337 0120 037080E2 		add	r7, r0, #3	@ tmp303, yy,
 338              	.LVL11:
 339              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 340              		.loc 1 94 20 view .LVU64
 341 0124 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 342              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 343              		.loc 1 87 18 view .LVU65
 344 0128 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 345              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 346              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 347              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 17 view .LVU68
 349              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 350              		.loc 1 94 20 is_stmt 0 view .LVU69
 351 012c 0120A003 		moveq	r2, #1	@ tmp233,
 352 0130 0020A013 		movne	r2, #0	@ tmp233,
 353              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 354              		.loc 1 94 19 view .LVU70
 355 0134 FF005AE3 		cmp	r10, #255	@ scale_value,
 356 0138 01208203 		orreq	r2, r2, #1	@,, tmp238, tmp233
 357 013c 000052E3 		cmp	r2, #0	@ tmp238,
 358              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 106 47 view .LVU71
 360 0140 05B08AE0 		add	fp, r10, r5	@ tmp246, scale_value, _8
 361              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 362              		.loc 1 107 22 view .LVU72
 363 0144 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 364 0148 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 365              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 366              		.loc 1 94 19 view .LVU73
 367 014c 3900001A 		bne	.L20		@,
 368              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 369              		.loc 1 102 34 view .LVU74
 370 0150 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 372              		.loc 1 106 47 view .LVU75
 373 0154 40609CE5 		ldr	r6, [ip, #64]	@ tmp332, g_armwave_state.bitdepth_height
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 20 view .LVU76
 376 0158 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 377              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 378              		.loc 1 102 34 view .LVU77
 379 015c 920002E0 		mul	r2, r2, r0	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 380              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 381              		.loc 1 106 47 view .LVU78
 382 0160 05A084E0 		add	r10, r4, r5	@ tmp268, scale_value, _8
 383              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 384              		.loc 1 102 74 view .LVU79
 385 0164 2228A0E1 		lsr	r2, r2, #16	@ tmp242, tmp240,
 386              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 47 view .LVU80
 388 0168 96B222E0 		mla	r2, r6, r2, fp	@ tmp247, tmp332, tmp242, tmp246
 389              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 390              		.loc 1 94 20 view .LVU81
 391 016c 01B0A003 		moveq	fp, #1	@ tmp254,
 392 0170 00B0A013 		movne	fp, #0	@ tmp254,
 393              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 394              		.loc 1 94 19 view .LVU82
 395 0174 FF0054E3 		cmp	r4, #255	@ scale_value,
 396 0178 0B40A011 		movne	r4, fp	@, tmp259, tmp254
 397 017c 01408B03 		orreq	r4, fp, #1	@,, tmp259, tmp254
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU83
 400 0180 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_80, *_80
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU84
 403 0184 000054E3 		cmp	r4, #0	@ tmp259,
 404              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 405              		.loc 1 106 47 view .LVU85
 406 0188 01B08BE2 		add	fp, fp, #1	@ tmp250, *_80,
 407 018c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp250, *_80
 408              	.LVL13:
 409              		.loc 1 107 17 is_stmt 1 view .LVU86
  91:armwave.c     ****                 
 410              		.loc 1 91 17 view .LVU87
  94:armwave.c     ****                     continue;
 411              		.loc 1 94 17 view .LVU88
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 19 is_stmt 0 view .LVU89
 414 0190 2800001A 		bne	.L20		@,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU90
 417 0194 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 418              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 419              		.loc 1 102 99 view .LVU91
 420 0198 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 421              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 422              		.loc 1 94 20 view .LVU92
 423 019c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 424              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 425              		.loc 1 102 34 view .LVU93
 426 01a0 920909E0 		mul	r9, r2, r9	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 view .LVU94
 429 01a4 0120A003 		moveq	r2, #1	@ tmp276,
 430 01a8 0020A013 		movne	r2, #0	@ tmp276,
 431              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 432              		.loc 1 102 74 view .LVU95
 433 01ac 2998A0E1 		lsr	r9, r9, #16	@ tmp264, tmp262,
 434              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 435              		.loc 1 106 47 view .LVU96
 436 01b0 05408EE0 		add	r4, lr, r5	@ tmp290, scale_value, _8
 437 01b4 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp269, g_armwave_state.bitdepth_height, tmp264, tmp268
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU97
 440 01b8 FF005EE3 		cmp	lr, #255	@ scale_value,
 441 01bc 02E0A011 		movne	lr, r2	@, tmp281, tmp276
 442 01c0 01E08203 		orreq	lr, r2, #1	@,, tmp281, tmp276
 443 01c4 00005EE3 		cmp	lr, #0	@ tmp281,
 444              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 445              		.loc 1 106 47 view .LVU98
 446 01c8 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_111, *_111
 447 01cc 012082E2 		add	r2, r2, #1	@ tmp272, *_111,
 448 01d0 0A20C1E7 		strb	r2, [r1, r10]	@ tmp272, *_111
 449              		.loc 1 107 17 is_stmt 1 view .LVU99
 450              	.LVL14:
  91:armwave.c     ****                 
 451              		.loc 1 91 17 view .LVU100
  94:armwave.c     ****                     continue;
 452              		.loc 1 94 17 view .LVU101
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 is_stmt 0 view .LVU102
 455 01d4 1700001A 		bne	.L20		@,
 456              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 457              		.loc 1 102 34 view .LVU103
 458 01d8 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 459              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 460              		.loc 1 94 20 view .LVU104
 461 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 462              	.LVL15:
 463              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 464              		.loc 1 106 47 view .LVU105
 465 01e0 032085E0 		add	r2, r5, r3	@ tmp311, _8, word
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 34 view .LVU106
 468 01e4 9E0808E0 		mul	r8, lr, r8	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 99 view .LVU107
 471 01e8 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 472              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 473              		.loc 1 102 74 view .LVU108
 474 01ec 2888A0E1 		lsr	r8, r8, #16	@ tmp286, tmp284,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU109
 477 01f0 9E4828E0 		mla	r8, lr, r8, r4	@ tmp291, g_armwave_state.bitdepth_height, tmp286, tmp290
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU110
 480 01f4 01E0A003 		moveq	lr, #1	@ tmp297,
 481 01f8 00E0A013 		movne	lr, #0	@ tmp297,
 482              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 483              		.loc 1 94 19 view .LVU111
 484 01fc FF0053E3 		cmp	r3, #255	@ word,
 485 0200 01E08E03 		orreq	lr, lr, #1	@,, tmp302, tmp297
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU112
 488 0204 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_142, *_142
 489              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 490              		.loc 1 94 19 view .LVU113
 491 0208 00005EE3 		cmp	lr, #0	@ tmp302,
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU114
 494 020c 013083E2 		add	r3, r3, #1	@ tmp294, *_142,
 495 0210 0830C1E7 		strb	r3, [r1, r8]	@ tmp294, *_142
 496              		.loc 1 107 17 is_stmt 1 view .LVU115
 497              	.LVL16:
  91:armwave.c     ****                 
 498              		.loc 1 91 17 view .LVU116
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU117
 500              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 501              		.loc 1 94 19 is_stmt 0 view .LVU118
 502 0214 0700001A 		bne	.L20		@,
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 34 view .LVU119
 505 0218 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 99 view .LVU120
 508 021c 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 34 view .LVU121
 511 0220 930707E0 		mul	r7, r3, r7	@ tmp305, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 512              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 513              		.loc 1 102 74 view .LVU122
 514 0224 2778A0E1 		lsr	r7, r7, #16	@ tmp307, tmp305,
 515              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 516              		.loc 1 106 47 view .LVU123
 517 0228 9E2727E0 		mla	r7, lr, r7, r2	@ tmp312, g_armwave_state.bitdepth_height, tmp307, tmp311
 518 022c 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_173, *_173
 519 0230 013083E2 		add	r3, r3, #1	@ tmp315, *_173,
 520 0234 0730C1E7 		strb	r3, [r1, r7]	@ tmp315, *_173
 521              		.loc 1 107 17 is_stmt 1 view .LVU124
 522              	.LVL17:
 523              	.L20:
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 9 is_stmt 0 view .LVU125
 526 0238 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 527              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 528              		.loc 1 84 37 view .LVU126
 529 023c 040080E2 		add	r0, r0, #4	@ yy, yy,
 530              	.LVL18:
 531              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 532              		.loc 1 84 9 view .LVU127
 533 0240 000053E1 		cmp	r3, r0	@ height, yy
 534 0244 B1FFFF8A 		bhi	.L17		@,
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU128
 537 0248 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 5 view .LVU129
 540 024c 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 view .LVU130
 543 0250 012082E2 		add	r2, r2, #1	@ w, w,
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 5 view .LVU131
 546 0254 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 547              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 79 44 view .LVU132
 549 0258 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 550              	.LVL19:
 551              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 552              		.loc 1 79 5 view .LVU133
 553 025c A3FFFFBA 		blt	.L18		@,
 554              	.LVL20:
 555              	.L11:
 556              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 557              		.loc 1 111 1 view .LVU134
 558 0260 14D08DE2 		add	sp, sp, #20	@,,
 559              		.cfi_def_cfa_offset 36
 560              		@ sp needed	@
 561 0264 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 562              	.L28:
 563              		.align	2
 564              	.L27:
 565 0268 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL21:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 179 5 view .LVU139
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 180 5 view .LVU140
 181:armwave.c     ****     uint32_t offset;
 587              		.loc 1 181 5 view .LVU141
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 588              		.loc 1 183 5 view .LVU142
 589              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 590              		.loc 1 173 1 is_stmt 0 view .LVU143
 591 026c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 592              		.cfi_def_cfa_offset 32
 593              		.cfi_offset 4, -32
 594              		.cfi_offset 5, -28
 595              		.cfi_offset 6, -24
 596              		.cfi_offset 7, -20
 597              		.cfi_offset 8, -16
 598              		.cfi_offset 9, -12
 599              		.cfi_offset 10, -8
 600              		.cfi_offset 14, -4
 601              	@ armwave.c:183:     assert(out_buffer != NULL);
 602              		.loc 1 183 5 view .LVU144
 603 0270 005050E2 		subs	r5, r0, #0	@ out_buffer, out_buffer
 604 0274 3900000A 		beq	.L39		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 605              		.loc 1 186 5 is_stmt 1 view .LVU145
 606              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 607              		.loc 1 186 45 is_stmt 0 view .LVU146
 608 0278 F4409FE5 		ldr	r4, .L40	@ tmp218,
 609              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 186 5 view .LVU147
 611 027c 0010A0E3 		mov	r1, #0	@,
 612              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 186 59 view .LVU148
 614 0280 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 615 0284 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 616 0288 920302E0 		mul	r2, r2, r3	@ tmp171, g_armwave_state.target_height, g_armwave_state.target_width
 617              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 618              		.loc 1 186 5 view .LVU149
 619 028c 0221A0E1 		lsl	r2, r2, #2	@, tmp171,
 620 0290 FEFFFFEB 		bl	memset		@
 621              	.LVL22:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 622              		.loc 1 188 5 is_stmt 1 view .LVU150
 623              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 624              		.loc 1 188 10 is_stmt 0 view .LVU151
 625 0294 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 626 0298 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 627 029c 9C030CE0 		mul	ip, ip, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 628              	.LVL23:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     **** #if 0
 192:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 195:armwave.c     ****         // most normal waveforms.
 196:armwave.c     ****         wave_word = *base_32ptr++;
 197:armwave.c     **** 
 198:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 199:armwave.c     ****             for(w = 0; w < 2; w++) {
 200:armwave.c     ****                 value = wave_word & 0xffff;
 201:armwave.c     ****                 wave_word >>= 16;
 202:armwave.c     **** 
 203:armwave.c     ****                 if(value != 0) {
 204:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 205:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 206:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 207:armwave.c     **** 
 208:armwave.c     ****                     r = MIN(rr, 255);
 209:armwave.c     ****                     g = MIN(gg, 255);
 210:armwave.c     ****                     b = MIN(bb, 255);
 211:armwave.c     **** 
 212:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 213:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 214:armwave.c     **** 
 215:armwave.c     ****                     // Plot the pixels
 216:armwave.c     ****                     nsub = n + (w * 2);
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 220:armwave.c     **** 
 221:armwave.c     ****                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 225:armwave.c     ****                 }
 226:armwave.c     ****             }
 227:armwave.c     ****         }
 228:armwave.c     ****     }
 229:armwave.c     **** #endif
 230:armwave.c     **** 
 231:armwave.c     ****     for(n = 0; n < (npix / 2); n += 1) {
 629              		.loc 1 231 5 is_stmt 1 view .LVU152
 630              		.loc 1 231 5 is_stmt 0 view .LVU153
 631 02a0 01005CE3 		cmp	ip, #1	@ npix,
 632              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 633              		.loc 1 231 26 view .LVU154
 634 02a4 ACCF8CE0 		add	ip, ip, ip, lsr #31	@ tmp184, npix, npix,
 635              	.LVL24:
 636              		.loc 1 231 26 view .LVU155
 637 02a8 CCC0A0E1 		asr	ip, ip, #1	@ _66, tmp184,
 638              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 639              		.loc 1 231 5 view .LVU156
 640 02ac F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 641 02b0 040094E5 		ldr	r0, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 642              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 232:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 233:armwave.c     ****         value = wave_word & 0xffff;
 234:armwave.c     **** 
 235:armwave.c     ****         if(value != 0) {
 236:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 643              		.loc 1 236 44 view .LVU157
 644 02b4 FC86D4E1 		ldrsh	r8, [r4, #108]	@ _13, g_armwave_state.ch1_color.r
 645              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 646              		.loc 1 237 44 view .LVU158
 647 02b8 FE76D4E1 		ldrsh	r7, [r4, #110]	@ _17, g_armwave_state.ch1_color.g
 648              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 649              		.loc 1 238 44 view .LVU159
 650 02bc F067D4E1 		ldrsh	r6, [r4, #112]	@ _20, g_armwave_state.ch1_color.b
 651              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 239:armwave.c     **** 
 240:armwave.c     ****             r = MIN(rr, 255);
 241:armwave.c     ****             g = MIN(gg, 255);
 242:armwave.c     ****             b = MIN(bb, 255);
 243:armwave.c     **** 
 244:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 245:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 246:armwave.c     **** 
 247:armwave.c     ****             // Plot the pixels
 248:armwave.c     ****             nsub = n;
 249:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 652              		.loc 1 249 49 view .LVU160
 653 02c0 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _35, g_armwave_state.vscale_frac
 654 02c4 020040E2 		sub	r0, r0, #2	@ ivtmp.49, g_armwave_state.ch1_buffer,
 655              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 656              		.loc 1 231 11 view .LVU161
 657 02c8 0010A0E3 		mov	r1, #0	@ n,
 658              	.LVL25:
 659              	.L33:
 232:armwave.c     ****         value = wave_word & 0xffff;
 660              		.loc 1 232 9 is_stmt 1 view .LVU162
 233:armwave.c     **** 
 661              		.loc 1 233 9 view .LVU163
 662              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 663              		.loc 1 233 15 is_stmt 0 view .LVU164
 664 02cc B230F0E1 		ldrh	r3, [r0, #2]!	@ MEM[base: _100, offset: 0B], MEM[base: _100, offset: 0B]
 665              	.LVL26:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 666              		.loc 1 235 9 is_stmt 1 view .LVU165
 667              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 668              		.loc 1 235 11 is_stmt 0 view .LVU166
 669 02d0 FF3013E2 		ands	r3, r3, #255	@ value, MEM[base: _100, offset: 0B],
 670              	.LVL27:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 671              		.loc 1 235 11 view .LVU167
 672 02d4 1D00000A 		beq	.L32		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 673              		.loc 1 236 13 is_stmt 1 view .LVU168
 674              	.LVL28:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 675              		.loc 1 237 13 view .LVU169
 238:armwave.c     **** 
 676              		.loc 1 238 13 view .LVU170
 240:armwave.c     ****             g = MIN(gg, 255);
 677              		.loc 1 240 13 view .LVU171
 241:armwave.c     ****             b = MIN(bb, 255);
 678              		.loc 1 241 13 view .LVU172
 242:armwave.c     **** 
 679              		.loc 1 242 13 view .LVU173
 245:armwave.c     **** 
 680              		.loc 1 245 13 view .LVU174
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 681              		.loc 1 248 13 view .LVU175
 682              		.loc 1 249 13 view .LVU176
 250:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 683              		.loc 1 250 13 view .LVU177
 251:armwave.c     ****             xx = (nsub >> 8) / 2;
 684              		.loc 1 251 13 view .LVU178
 252:armwave.c     **** 
 253:armwave.c     ****             //for(y = yy; y < ye; y++) {
 254:armwave.c     ****             y = yy;
 685              		.loc 1 254 13 view .LVU179
 255:armwave.c     ****             {
 256:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 686              		.loc 1 256 17 view .LVU180
 257:armwave.c     ****                 *(out_buffer_base + offset) = word;
 687              		.loc 1 257 17 view .LVU181
 688              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 689              		.loc 1 249 24 is_stmt 0 view .LVU182
 690 02d8 71E0EFE6 		uxtb	lr, r1	@ n, n
 691              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 692              		.loc 1 238 47 view .LVU183
 693 02dc 830662E1 		smulbb	r2, r3, r6	@ tmp204, value, _20
 694              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 695              		.loc 1 249 32 view .LVU184
 696 02e0 90EA07EE 		vmov	s15, lr	@ int	@ n, n
 697              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 698              		.loc 1 237 47 view .LVU185
 699 02e4 830769E1 		smulbb	r9, r3, r7	@ tmp208, value, _17
 700              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 701              		.loc 1 238 16 view .LVU186
 702 02e8 4224A0E1 		asr	r2, r2, #8	@ bb, tmp204,
 703              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 704              		.loc 1 242 17 view .LVU187
 705 02ec FF0052E3 		cmp	r2, #255	@ bb,
 706              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 707              		.loc 1 249 32 view .LVU188
 708 02f0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, n
 709              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 710              		.loc 1 237 16 view .LVU189
 711 02f4 4994A0E1 		asr	r9, r9, #8	@ gg, tmp208,
 712              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 713              		.loc 1 236 47 view .LVU190
 714 02f8 830863E1 		smulbb	r3, r3, r8	@ tmp214, value, _13
 715              	.LVL29:
 716              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 717              		.loc 1 242 17 view .LVU191
 718 02fc FF20A0A3 		movge	r2, #255	@ bb,
 719              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 720              		.loc 1 241 17 view .LVU192
 721 0300 FF0059E3 		cmp	r9, #255	@ gg,
 722 0304 FF90A0A3 		movge	r9, #255	@ gg,
 723              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 724              		.loc 1 236 16 view .LVU193
 725 0308 4334A0E1 		asr	r3, r3, #8	@ rr, tmp214,
 726              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 727              		.loc 1 240 17 view .LVU194
 728 030c FF0053E3 		cmp	r3, #255	@ rr,
 729              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 730              		.loc 1 249 32 view .LVU195
 731 0310 877A67EE 		vmul.f32	s15, s15, s14	@ tmp196, tmp195, _35
 732              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 733              		.loc 1 245 48 view .LVU196
 734 0314 0994A0E1 		lsl	r9, r9, #8	@ tmp209, gg,
 735              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 736              		.loc 1 245 36 view .LVU197
 737 0318 0228A0E1 		lsl	r2, r2, #16	@ tmp205, bb,
 738              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 739              		.loc 1 240 17 view .LVU198
 740 031c FF30A0A3 		movge	r3, #255	@ rr,
 741              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 742              		.loc 1 245 48 view .LVU199
 743 0320 7990FFE6 		uxth	r9, r9	@ tmp210, tmp209
 744              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 745              		.loc 1 245 36 view .LVU200
 746 0324 FF2802E2 		and	r2, r2, #16711680	@ tmp206, tmp205,
 747              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 748              		.loc 1 245 43 view .LVU201
 749 0328 092082E1 		orr	r2, r2, r9	@ tmp212, tmp206, tmp210
 750              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 751              		.loc 1 245 54 view .LVU202
 752 032c 7330EFE6 		uxtb	r3, r3	@ rr, rr
 753              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 754              		.loc 1 249 16 view .LVU203
 755 0330 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 756              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 757              		.loc 1 245 54 view .LVU204
 758 0334 033082E1 		orr	r3, r2, r3	@ tmp216, tmp212, rr
 759              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 760              		.loc 1 256 35 view .LVU205
 761 0338 58E094E5 		ldr	lr, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 762              	@ armwave.c:251:             xx = (nsub >> 8) / 2;
 251:armwave.c     **** 
 763              		.loc 1 251 30 view .LVU206
 764 033c C194A0E1 		asr	r9, r1, #9	@ xx, n,
 765              	.LVL30:
 766              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 767              		.loc 1 245 18 view .LVU207
 768 0340 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp216,
 769              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 770              		.loc 1 257 35 view .LVU208
 771 0344 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 772 0348 9E922EE0 		mla	lr, lr, r2, r9	@ tmp202, g_armwave_state.target_width, yy, xx
 773              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 774              		.loc 1 257 45 view .LVU209
 775 034c 0E3185E7 		str	r3, [r5, lr, lsl #2]	@ word, *_43
 776              	.LVL31:
 777              	.L32:
 778              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 779              		.loc 1 231 34 discriminator 2 view .LVU210
 780 0350 011081E2 		add	r1, r1, #1	@ n, n,
 781              	.LVL32:
 782              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 783              		.loc 1 231 5 discriminator 2 view .LVU211
 784 0354 0C0051E1 		cmp	r1, ip	@ n, _66
 785 0358 DBFFFFBA 		blt	.L33		@,
 786 035c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 787              	.LVL33:
 788              	.L39:
 183:armwave.c     **** 
 789              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU212
 790 0360 10309FE5 		ldr	r3, .L40+4	@,
 791 0364 B720A0E3 		mov	r2, #183	@,
 792 0368 0C109FE5 		ldr	r1, .L40+8	@,
 793 036c 0C009FE5 		ldr	r0, .L40+12	@,
 794              	.LVL34:
 183:armwave.c     **** 
 795              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU213
 796 0370 FEFFFFEB 		bl	__assert_fail		@
 797              	.LVL35:
 798              	.L41:
 183:armwave.c     **** 
 799              		.loc 1 183 5 discriminator 1 view .LVU214
 800              		.align	2
 801              	.L40:
 802 0374 00000000 		.word	g_armwave_state
 803 0378 00000000 		.word	.LANCHOR0
 804 037c 20000000 		.word	.LC2
 805 0380 2C000000 		.word	.LC3
 806              		.cfi_endproc
 807              	.LFE60:
 809              		.global	__aeabi_idiv
 810              		.align	2
 811              		.global	armwave_generate
 812              		.syntax unified
 813              		.arm
 814              		.fpu vfp
 816              	armwave_generate:
 817              	.LFB61:
 258:armwave.c     ****             }
 259:armwave.c     ****         }
 260:armwave.c     ****     }
 261:armwave.c     **** }
 262:armwave.c     **** 
 263:armwave.c     **** /*
 264:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 265:armwave.c     ****  */
 266:armwave.c     **** void armwave_generate()
 267:armwave.c     **** {
 818              		.loc 1 267 1 is_stmt 1 view -0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 16
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 268:armwave.c     ****     uint32_t yy;
 822              		.loc 1 268 5 view .LVU216
 269:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 823              		.loc 1 269 5 view .LVU217
 824              	.LVL36:
 270:armwave.c     **** 
 271:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 825              		.loc 1 271 5 view .LVU218
 826              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t yy;
 827              		.loc 1 267 1 is_stmt 0 view .LVU219
 828 0384 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 829              		.cfi_def_cfa_offset 36
 830              		.cfi_offset 4, -36
 831              		.cfi_offset 5, -32
 832              		.cfi_offset 6, -28
 833              		.cfi_offset 7, -24
 834              		.cfi_offset 8, -20
 835              		.cfi_offset 9, -16
 836              		.cfi_offset 10, -12
 837              		.cfi_offset 11, -8
 838              		.cfi_offset 14, -4
 839              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 840              		.loc 1 271 5 view .LVU220
 841 0388 0010A0E3 		mov	r1, #0	@,
 842              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 843              		.loc 1 271 58 view .LVU221
 844 038c 14829FE5 		ldr	r8, .L61	@ tmp342,
 845              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t yy;
 846              		.loc 1 267 1 view .LVU222
 847 0390 14D04DE2 		sub	sp, sp, #20	@,,
 848              		.cfi_def_cfa_offset 56
 849              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 850              		.loc 1 271 5 view .LVU223
 851 0394 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 852 0398 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 853 039c FEFFFFEB 		bl	memset		@
 854              	.LVL37:
 272:armwave.c     **** 
 273:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 855              		.loc 1 273 5 is_stmt 1 view .LVU224
 856              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 857              		.loc 1 273 68 is_stmt 0 view .LVU225
 858 03a0 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 859              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 860              		.loc 1 273 38 view .LVU226
 861 03a4 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 862              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 863              		.loc 1 273 51 view .LVU227
 864 03a8 0310A0E1 		mov	r1, r3	@, _35
 865 03ac 0500A0E1 		mov	r0, r5	@, prephitmp_229
 866              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 867              		.loc 1 273 68 view .LVU228
 868 03b0 00308DE5 		str	r3, [sp]	@ _35, %sfp
 869              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 870              		.loc 1 273 51 view .LVU229
 871 03b4 FEFFFFEB 		bl	__aeabi_idiv		@
 872              	.LVL38:
 873              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 874              		.loc 1 273 5 view .LVU230
 875 03b8 000050E3 		cmp	r0, #0	@,
 876 03bc 7700000A 		beq	.L42		@,
 877 03c0 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 878              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 879              		.loc 1 273 12 view .LVU231
 880 03c4 0030A0E3 		mov	r3, #0	@ yy,
 881 03c8 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 882              	.LVL39:
 883              	.L51:
 274:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 275:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 276:armwave.c     **** 
 277:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 884              		.loc 1 277 9 is_stmt 1 discriminator 3 view .LVU232
 885 03cc D020CDE1 		ldrd	r2, [sp]	@, %sfp
 886              	.LBB10:
 887              	.LBB11:
 888              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 889              		.loc 1 71 52 is_stmt 0 discriminator 3 view .LVU233
 890 03d0 400098E5 		ldr	r0, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 891              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 892              		.loc 1 79 5 discriminator 3 view .LVU234
 893 03d4 000054E3 		cmp	r4, #0	@ prephitmp_239,
 894              	.LBE11:
 895              	.LBE10:
 896              	@ armwave.c:277:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 897              		.loc 1 277 9 discriminator 3 view .LVU235
 898 03d8 930202E0 		mul	r2, r3, r2	@ _5, yy, _35
 899              	.LVL40:
 900              	.LBB13:
 901              	.LBI10:
  62:armwave.c     **** {
 902              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU236
 903              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 904              		.loc 1 64 5 discriminator 3 view .LVU237
  65:armwave.c     ****     uint8_t *wave_base;
 905              		.loc 1 65 5 discriminator 3 view .LVU238
  66:armwave.c     ****     uint8_t *write_buffer_base;
 906              		.loc 1 66 5 discriminator 3 view .LVU239
  67:armwave.c     ****     uint8_t *write_buffer;
 907              		.loc 1 67 5 discriminator 3 view .LVU240
  68:armwave.c     **** 
 908              		.loc 1 68 5 discriminator 3 view .LVU241
  71:armwave.c     **** 
 909              		.loc 1 71 5 discriminator 3 view .LVU242
 910              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 911              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU243
 912 03dc 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 913              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 914              		.loc 1 71 40 discriminator 3 view .LVU244
 915 03e0 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 916              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 917              		.loc 1 71 65 discriminator 3 view .LVU245
 918 03e4 930203E0 		mul	r3, r3, r2	@ tmp239, g_armwave_state.cmp_x_bitdepth_scale, _5
 919              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 920              		.loc 1 71 105 discriminator 3 view .LVU246
 921 03e8 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp239,
 922              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 923              		.loc 1 71 52 discriminator 3 view .LVU247
 924 03ec 900300E0 		mul	r0, r0, r3	@ tmp243, g_armwave_state.bitdepth_height, tmp241
 925 03f0 8000A0E1 		lsl	r0, r0, #1	@ _23, tmp243,
 926              	.LVL41:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 927              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU248
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 928              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU249
 929 03f4 610000DA 		ble	.L44		@,
 930              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 931              		.loc 1 79 11 view .LVU250
 932 03f8 0070A0E3 		mov	r7, #0	@ w,
 933 03fc 043042E2 		sub	r3, r2, #4	@ _32, _5,
 934 0400 08308DE5 		str	r3, [sp, #8]	@ _32, %sfp
 935              	.LVL42:
 936              	.L50:
  80:armwave.c     **** 
 937              		.loc 1 80 9 is_stmt 1 view .LVU251
 938              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 939              		.loc 1 84 9 is_stmt 0 view .LVU252
 940 0404 00209DE5 		ldr	r2, [sp]	@ _35, %sfp
 941              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 942              		.loc 1 80 64 view .LVU253
 943 0408 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 944              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 945              		.loc 1 84 9 view .LVU254
 946 040c 000052E3 		cmp	r2, #0	@ _35,
 947              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 948              		.loc 1 80 36 view .LVU255
 949 0410 142098E5 		ldr	r2, [r8, #20]	@ _24, g_armwave_state.wave_buffer
 950              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 951              		.loc 1 80 64 view .LVU256
 952 0414 930703E0 		mul	r3, r3, r7	@ _28, g_armwave_state.wave_stride, w
 953              	.LVL43:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 954              		.loc 1 84 9 is_stmt 1 view .LVU257
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 955              		.loc 1 84 9 is_stmt 0 view .LVU258
 956 0418 5200000A 		beq	.L45		@,
 957 041c 08C09DE5 		ldr	ip, [sp, #8]	@ _32, %sfp
 958 0420 0C3083E0 		add	r3, r3, ip	@ tmp248, _28, _32
 959              	.LVL44:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 960              		.loc 1 84 9 view .LVU259
 961 0424 036082E0 		add	r6, r2, r3	@ ivtmp.55, _24, tmp248
 962              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 963              		.loc 1 84 16 view .LVU260
 964 0428 00C0A0E3 		mov	ip, #0	@ yy,
 965              	.LVL45:
 966              	.L49:
  87:armwave.c     **** 
 967              		.loc 1 87 13 is_stmt 1 view .LVU261
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 968              		.loc 1 101 17 view .LVU262
 106:armwave.c     ****                 word >>= 8;
 969              		.loc 1 106 17 view .LVU263
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 970              		.loc 1 101 17 view .LVU264
 106:armwave.c     ****                 word >>= 8;
 971              		.loc 1 106 17 view .LVU265
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 972              		.loc 1 101 17 view .LVU266
 106:armwave.c     ****                 word >>= 8;
 973              		.loc 1 106 17 view .LVU267
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 974              		.loc 1 101 17 view .LVU268
 106:armwave.c     ****                 word >>= 8;
 975              		.loc 1 106 17 view .LVU269
 976              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 977              		.loc 1 87 18 is_stmt 0 view .LVU270
 978 042c 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _272, offset: 0B]
 979              	.LVL46:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 980              		.loc 1 89 13 is_stmt 1 view .LVU271
  91:armwave.c     ****                 
 981              		.loc 1 91 17 view .LVU272
  94:armwave.c     ****                     continue;
 982              		.loc 1 94 17 view .LVU273
 983              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 984              		.loc 1 102 34 is_stmt 0 view .LVU274
 985 0430 01A08CE2 		add	r10, ip, #1	@ tmp278, yy,
 986              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 987              		.loc 1 94 20 view .LVU275
 988 0434 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 989 0438 0120A003 		moveq	r2, #1	@ tmp250,
 990 043c 0020A013 		movne	r2, #0	@ tmp250,
 991              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 992              		.loc 1 94 19 view .LVU276
 993 0440 FF0059E3 		cmp	r9, #255	@ scale_value,
 994 0444 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 995              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 996              		.loc 1 107 22 view .LVU277
 997 0448 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 998              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 999              		.loc 1 94 19 view .LVU278
 1000 044c 000052E3 		cmp	r2, #0	@ tmp255,
 1001              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1002              		.loc 1 102 34 view .LVU279
 1003 0450 02508CE2 		add	r5, ip, #2	@ tmp300, yy,
 1004              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1005              		.loc 1 106 47 view .LVU280
 1006 0454 00B089E0 		add	fp, r9, r0	@ tmp263, scale_value, _23
 1007              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1008              		.loc 1 107 22 view .LVU281
 1009 0458 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1010 045c 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1011              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1012              		.loc 1 94 19 view .LVU282
 1013 0460 3B00001A 		bne	.L53		@,
 1014              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1015              		.loc 1 102 34 view .LVU283
 1016 0464 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1017              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1018              		.loc 1 106 47 view .LVU284
 1019 0468 40E098E5 		ldr	lr, [r8, #64]	@ tmp362, g_armwave_state.bitdepth_height
 1020              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1021              		.loc 1 94 20 view .LVU285
 1022 046c FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1023              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1024              		.loc 1 102 34 view .LVU286
 1025 0470 920C02E0 		mul	r2, r2, ip	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1026              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1027              		.loc 1 106 47 view .LVU287
 1028 0474 009084E0 		add	r9, r4, r0	@ tmp285, scale_value, _23
 1029              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1030              		.loc 1 102 74 view .LVU288
 1031 0478 2228A0E1 		lsr	r2, r2, #16	@ tmp259, tmp257,
 1032              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1033              		.loc 1 106 47 view .LVU289
 1034 047c 9EB222E0 		mla	r2, lr, r2, fp	@ tmp264, tmp362, tmp259, tmp263
 1035              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1036              		.loc 1 94 20 view .LVU290
 1037 0480 01B0A003 		moveq	fp, #1	@ tmp271,
 1038 0484 00B0A013 		movne	fp, #0	@ tmp271,
 1039              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1040              		.loc 1 94 19 view .LVU291
 1041 0488 FF0054E3 		cmp	r4, #255	@ scale_value,
 1042 048c 0B40A011 		movne	r4, fp	@, tmp276, tmp271
 1043 0490 01408B03 		orreq	r4, fp, #1	@,, tmp276, tmp271
 1044              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1045              		.loc 1 106 47 view .LVU292
 1046 0494 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_91, *_91
 1047              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1048              		.loc 1 94 19 view .LVU293
 1049 0498 000054E3 		cmp	r4, #0	@ tmp276,
 1050              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1051              		.loc 1 106 47 view .LVU294
 1052 049c 01B08BE2 		add	fp, fp, #1	@ tmp267, *_91,
 1053 04a0 02B0C1E7 		strb	fp, [r1, r2]	@ tmp267, *_91
 1054              	.LVL47:
 107:armwave.c     ****             }
 1055              		.loc 1 107 17 is_stmt 1 view .LVU295
  91:armwave.c     ****                 
 1056              		.loc 1 91 17 view .LVU296
  94:armwave.c     ****                     continue;
 1057              		.loc 1 94 17 view .LVU297
 1058              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1059              		.loc 1 94 19 is_stmt 0 view .LVU298
 1060 04a4 2A00001A 		bne	.L53		@,
 1061              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1062              		.loc 1 102 34 view .LVU299
 1063 04a8 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1064              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1065              		.loc 1 102 99 view .LVU300
 1066 04ac 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1067              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1068              		.loc 1 94 20 view .LVU301
 1069 04b0 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1070              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1071              		.loc 1 102 34 view .LVU302
 1072 04b4 920A0AE0 		mul	r10, r2, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1073              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1074              		.loc 1 94 20 view .LVU303
 1075 04b8 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1076 04bc 0120A003 		moveq	r2, #1	@ tmp293,
 1077              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1078              		.loc 1 102 74 view .LVU304
 1079 04c0 2AA8A0E1 		lsr	r10, r10, #16	@ tmp281, tmp279,
 1080              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1081              		.loc 1 94 20 view .LVU305
 1082 04c4 0020A013 		movne	r2, #0	@ tmp293,
 1083              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1084              		.loc 1 106 47 view .LVU306
 1085 04c8 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp286, g_armwave_state.bitdepth_height, tmp281, tmp285
 1086 04cc 00408EE0 		add	r4, lr, r0	@ tmp307, scale_value, _23
 1087              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1088              		.loc 1 94 19 view .LVU307
 1089 04d0 FF005EE3 		cmp	lr, #255	@ scale_value,
 1090 04d4 02E0A011 		movne	lr, r2	@, tmp298, tmp293
 1091 04d8 01E08203 		orreq	lr, r2, #1	@,, tmp298, tmp293
 1092              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1093              		.loc 1 106 47 view .LVU308
 1094 04dc 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_122, *_122
 1095              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1096              		.loc 1 94 19 view .LVU309
 1097 04e0 00005EE3 		cmp	lr, #0	@ tmp298,
 1098              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1099              		.loc 1 106 47 view .LVU310
 1100 04e4 012082E2 		add	r2, r2, #1	@ tmp289, *_122,
 1101 04e8 0920C1E7 		strb	r2, [r1, r9]	@ tmp289, *_122
 107:armwave.c     ****             }
 1102              		.loc 1 107 17 is_stmt 1 view .LVU311
 1103              	.LVL48:
  91:armwave.c     ****                 
 1104              		.loc 1 91 17 view .LVU312
  94:armwave.c     ****                     continue;
 1105              		.loc 1 94 17 view .LVU313
 1106              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1107              		.loc 1 94 19 is_stmt 0 view .LVU314
 1108 04ec 1800001A 		bne	.L53		@,
 1109              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1110              		.loc 1 102 34 view .LVU315
 1111 04f0 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1112              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1113              		.loc 1 94 20 view .LVU316
 1114 04f4 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU317
 1117 04f8 032080E0 		add	r2, r0, r3	@ tmp328, _23, word
 1118              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1119              		.loc 1 102 34 view .LVU318
 1120 04fc 9E0505E0 		mul	r5, lr, r5	@ tmp301, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 1121              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1122              		.loc 1 102 99 view .LVU319
 1123 0500 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1124              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1125              		.loc 1 102 74 view .LVU320
 1126 0504 2558A0E1 		lsr	r5, r5, #16	@ tmp303, tmp301,
 1127              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1128              		.loc 1 106 47 view .LVU321
 1129 0508 9E4525E0 		mla	r5, lr, r5, r4	@ tmp308, g_armwave_state.bitdepth_height, tmp303, tmp307
 1130              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1131              		.loc 1 94 20 view .LVU322
 1132 050c 01E0A003 		moveq	lr, #1	@ tmp314,
 1133 0510 00E0A013 		movne	lr, #0	@ tmp314,
 1134              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1135              		.loc 1 94 19 view .LVU323
 1136 0514 FF0053E3 		cmp	r3, #255	@ word,
 1137 0518 01E08E03 		orreq	lr, lr, #1	@,, tmp319, tmp314
 1138              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1139              		.loc 1 106 47 view .LVU324
 1140 051c 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_153, *_153
 1141              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1142              		.loc 1 94 19 view .LVU325
 1143 0520 00005EE3 		cmp	lr, #0	@ tmp319,
 1144              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1145              		.loc 1 106 47 view .LVU326
 1146 0524 013083E2 		add	r3, r3, #1	@ tmp311, *_153,
 1147 0528 0530C1E7 		strb	r3, [r1, r5]	@ tmp311, *_153
 107:armwave.c     ****             }
 1148              		.loc 1 107 17 is_stmt 1 view .LVU327
 1149              	.LVL49:
  91:armwave.c     ****                 
 1150              		.loc 1 91 17 view .LVU328
  94:armwave.c     ****                     continue;
 1151              		.loc 1 94 17 view .LVU329
 1152              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1153              		.loc 1 94 19 is_stmt 0 view .LVU330
 1154 052c 0800001A 		bne	.L53		@,
 1155              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1156              		.loc 1 102 34 view .LVU331
 1157 0530 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1158 0534 03408CE2 		add	r4, ip, #3	@ tmp321, yy,
 1159              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1160              		.loc 1 102 99 view .LVU332
 1161 0538 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1162              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1163              		.loc 1 102 34 view .LVU333
 1164 053c 930403E0 		mul	r3, r3, r4	@ tmp322, g_armwave_state.cmp_x_bitdepth_scale, tmp321
 1165              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1166              		.loc 1 102 74 view .LVU334
 1167 0540 2338A0E1 		lsr	r3, r3, #16	@ tmp324, tmp322,
 1168              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1169              		.loc 1 106 47 view .LVU335
 1170 0544 9E2323E0 		mla	r3, lr, r3, r2	@ tmp329, g_armwave_state.bitdepth_height, tmp324, tmp328
 1171 0548 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_184, *_184
 1172 054c 012082E2 		add	r2, r2, #1	@ tmp332, *_184,
 1173 0550 0320C1E7 		strb	r2, [r1, r3]	@ tmp332, *_184
 107:armwave.c     ****             }
 1174              		.loc 1 107 17 is_stmt 1 view .LVU336
 1175              	.LVL50:
 1176              	.L53:
 1177              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1178              		.loc 1 84 9 is_stmt 0 view .LVU337
 1179 0554 00309DE5 		ldr	r3, [sp]	@ _35, %sfp
 1180              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1181              		.loc 1 84 37 view .LVU338
 1182 0558 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 1183              	.LVL51:
 1184              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1185              		.loc 1 84 9 view .LVU339
 1186 055c 0C0053E1 		cmp	r3, ip	@ _35, yy
 1187 0560 B1FFFF8A 		bhi	.L49		@,
 1188 0564 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 1189              	.LVL52:
 1190              	.L45:
 1191              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1192              		.loc 1 79 44 view .LVU340
 1193 0568 017087E2 		add	r7, r7, #1	@ w, w,
 1194              	.LVL53:
 1195              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1196              		.loc 1 79 5 view .LVU341
 1197 056c 040057E1 		cmp	r7, r4	@ w, prephitmp_239
 1198 0570 A3FFFFBA 		blt	.L50		@,
 1199 0574 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 1200 0578 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 1201 057c 00308DE5 		str	r3, [sp]	@ _35, %sfp
 1202              	.LVL54:
 1203              	.L44:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1204              		.loc 1 79 5 view .LVU342
 1205              	.LBE12:
 1206              	.LBE13:
 278:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1207              		.loc 1 278 9 is_stmt 1 discriminator 3 view .LVU343
 279:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1208              		.loc 1 279 9 discriminator 3 view .LVU344
 1209              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1210              		.loc 1 273 51 is_stmt 0 discriminator 3 view .LVU345
 1211 0580 00109DE5 		ldr	r1, [sp]	@, %sfp
 1212              	.LVL55:
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1213              		.loc 1 273 51 discriminator 3 view .LVU346
 1214 0584 0500A0E1 		mov	r0, r5	@, prephitmp_229
 1215 0588 FEFFFFEB 		bl	__aeabi_idiv		@
 1216              	.LVL56:
 1217              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1218              		.loc 1 273 86 discriminator 3 view .LVU347
 1219 058c 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1220 0590 013083E2 		add	r3, r3, #1	@ yy, yy,
 1221 0594 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1222              	.LVL57:
 1223              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1224              		.loc 1 273 5 discriminator 3 view .LVU348
 1225 0598 030050E1 		cmp	r0, r3	@, yy
 1226 059c 8AFFFF8A 		bhi	.L51		@,
 1227              	.LVL58:
 1228              	.L42:
 1229              	@ armwave.c:283: }
 280:armwave.c     ****     }
 281:armwave.c     **** 
 282:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 283:armwave.c     **** }
 1230              		.loc 1 283 1 view .LVU349
 1231 05a0 14D08DE2 		add	sp, sp, #20	@,,
 1232              		.cfi_def_cfa_offset 36
 1233              		@ sp needed	@
 1234 05a4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1235              	.L62:
 1236              		.align	2
 1237              	.L61:
 1238 05a8 00000000 		.word	g_armwave_state
 1239              		.cfi_endproc
 1240              	.LFE61:
 1242              		.align	2
 1243              		.global	armwave_setup_render
 1244              		.syntax unified
 1245              		.arm
 1246              		.fpu vfp
 1248              	armwave_setup_render:
 1249              	.LVL59:
 1250              	.LFB62:
 284:armwave.c     **** 
 285:armwave.c     **** /*
 286:armwave.c     ****  * Setup the renderer with passed parameters.
 287:armwave.c     ****  */
 288:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 289:armwave.c     **** {
 1251              		.loc 1 289 1 is_stmt 1 view -0
 1252              		.cfi_startproc
 1253              		@ args = 12, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 290:armwave.c     ****     uint32_t length, xx;
 1255              		.loc 1 290 5 view .LVU351
 291:armwave.c     ****     float points_per_pixel;
 1256              		.loc 1 291 5 view .LVU352
 292:armwave.c     **** 
 293:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1257              		.loc 1 293 5 view .LVU353
 1258              	@ armwave.c:289: {
 289:armwave.c     ****     uint32_t length, xx;
 1259              		.loc 1 289 1 is_stmt 0 view .LVU354
 1260 05ac F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1261              		.cfi_def_cfa_offset 28
 1262              		.cfi_offset 4, -28
 1263              		.cfi_offset 5, -24
 1264              		.cfi_offset 6, -20
 1265              		.cfi_offset 7, -16
 1266              		.cfi_offset 8, -12
 1267              		.cfi_offset 9, -8
 1268              		.cfi_offset 14, -4
 1269 05b0 028B2DED 		vpush.64	{d8}	@
 1270              		.cfi_def_cfa_offset 36
 1271              		.cfi_offset 80, -36
 1272              		.cfi_offset 81, -32
 1273 05b4 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1274 05b8 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1275 05bc 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1276 05c0 14D04DE2 		sub	sp, sp, #20	@,,
 1277              		.cfi_def_cfa_offset 56
 1278              	@ armwave.c:289: {
 289:armwave.c     ****     uint32_t length, xx;
 1279              		.loc 1 289 1 view .LVU355
 1280 05c4 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1281 05c8 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1282 05cc 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1283              	@ armwave.c:293:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1284              		.loc 1 293 5 view .LVU356
 1285 05d0 00308DE5 		str	r3, [sp]	@ wave_stride,
 1286 05d4 F460CDE1 		strd	r6, [sp, #4]	@,,
 1287 05d8 0230A0E1 		mov	r3, r2	@, waves_max
 1288              	.LVL60:
 1289              		.loc 1 293 5 view .LVU357
 1290 05dc 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1291 05e0 0120A0E1 		mov	r2, r1	@, end_point
 1292              	.LVL61:
 1293              		.loc 1 293 5 view .LVU358
 1294 05e4 0010A0E1 		mov	r1, r0	@, start_point
 1295              	.LVL62:
 1296              		.loc 1 293 5 view .LVU359
 1297 05e8 E0019FE5 		ldr	r0, .L77+12	@,
 1298              	.LVL63:
 1299              		.loc 1 293 5 view .LVU360
 1300 05ec FEFFFFEB 		bl	printf		@
 1301              	.LVL64:
 294:armwave.c     **** 
 295:armwave.c     ****     // TODO these asserts should instead raise PyExc
 296:armwave.c     ****     assert(start_point < end_point);
 1302              		.loc 1 296 5 is_stmt 1 view .LVU361
 1303 05f0 050054E1 		cmp	r4, r5	@ start_point, end_point
 1304 05f4 6300002A 		bcs	.L74		@,
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 300:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 301:armwave.c     ****     if(target_height == 256) {
 302:armwave.c     ****         g_armwave_state.row_shift = 8;
 303:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 304:armwave.c     ****     } else if(target_height == 512) {
 305:armwave.c     ****         g_armwave_state.row_shift = 9;
 306:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 307:armwave.c     ****     } else if(target_height == 1024) {
 308:armwave.c     ****         g_armwave_state.row_shift = 10;
 309:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 310:armwave.c     ****     } else if(target_height == 2048) {
 311:armwave.c     ****         g_armwave_state.row_shift = 11;
 312:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 313:armwave.c     ****     }
 314:armwave.c     ****     */
 315:armwave.c     **** 
 316:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 317:armwave.c     ****     g_armwave_state.xstride = target_height;
 1305              		.loc 1 317 5 view .LVU362
 1306              	@ armwave.c:328:     g_armwave_state.wave_length = end_point - start_point;
 318:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 319:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 320:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 321:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 322:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 323:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 324:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 325:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 326:armwave.c     ****     g_armwave_state.target_width = target_width;
 327:armwave.c     ****     g_armwave_state.target_height = target_height;
 328:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1307              		.loc 1 328 45 is_stmt 0 view .LVU363
 1308 05f8 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1309              	.LVL65:
 1310              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1311              		.loc 1 318 49 view .LVU364
 1312 05fc 706A9FED 		vldr.32	s12, .L77	@ tmp174,
 1313              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 329:armwave.c     **** 
 330:armwave.c     ****     // Calculate compound scaler
 331:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 332:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1314              		.loc 1 332 48 view .LVU365
 1315 0600 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1316              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1317              		.loc 1 332 79 view .LVU366
 1318 0604 6F6ADFED 		vldr.32	s13, .L77+4	@ tmp198,
 1319              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1320              		.loc 1 325 90 view .LVU367
 1321 0608 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 1322              	@ armwave.c:317:     g_armwave_state.xstride = target_height;
 317:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1323              		.loc 1 317 29 view .LVU368
 1324 060c C0419FE5 		ldr	r4, .L77+16	@ tmp242,
 1325              	.LVL66:
 1326              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1327              		.loc 1 332 48 view .LVU369
 1328 0610 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 1329              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1330              		.loc 1 318 49 view .LVU370
 1331 0614 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1332              	@ armwave.c:323:     g_armwave_state.size = target_height * target_width;
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1333              		.loc 1 323 42 view .LVU371
 1334 0618 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 1335              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1336              		.loc 1 325 95 view .LVU372
 1337 061c 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 1338              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1339              		.loc 1 318 49 view .LVU373
 1340 0620 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 1341              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1342              		.loc 1 332 48 view .LVU374
 1343 0624 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1344              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 333:armwave.c     **** 
 334:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1345              		.loc 1 334 5 view .LVU375
 1346 0628 0128A0E3 		mov	r2, #65536	@ tmp201,
 1347 062c 04508DE5 		str	r5, [sp, #4]	@ _13,
 1348 0630 00608DE5 		str	r6, [sp]	@ target_width,
 1349              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1350              		.loc 1 332 48 view .LVU376
 1351 0634 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1352              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1353              		.loc 1 325 95 view .LVU377
 1354 0638 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 1355              	@ armwave.c:317:     g_armwave_state.xstride = target_height;
 317:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1356              		.loc 1 317 29 view .LVU378
 1357 063c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1358              		.loc 1 318 5 is_stmt 1 view .LVU379
 1359              	@ armwave.c:320:     g_armwave_state.wave_stride = wave_stride;
 320:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1360              		.loc 1 320 33 is_stmt 0 view .LVU380
 1361 0640 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1362              	@ armwave.c:321:     g_armwave_state.waves_max = waves_max;
 321:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1363              		.loc 1 321 31 view .LVU381
 1364 0644 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1365              	@ armwave.c:322:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 322:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1366              		.loc 1 322 27 view .LVU382
 1367 0648 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1368              	@ armwave.c:327:     g_armwave_state.target_height = target_height;
 327:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1369              		.loc 1 327 35 view .LVU383
 1370 064c F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1371              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1372              		.loc 1 334 5 view .LVU384
 1373 0650 08208DE5 		str	r2, [sp, #8]	@ tmp201,
 1374              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1375              		.loc 1 332 48 view .LVU385
 1376 0654 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1377              	@ armwave.c:324:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1378              		.loc 1 324 37 view .LVU386
 1379 0658 022CA0E3 		mov	r2, #512	@ tmp184,
 1380              	@ armwave.c:323:     g_armwave_state.size = target_height * target_width;
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1381              		.loc 1 323 26 view .LVU387
 1382 065c 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1383              	@ armwave.c:324:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1384              		.loc 1 324 37 view .LVU388
 1385 0660 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1386              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1387              		.loc 1 334 5 view .LVU389
 1388 0664 0310A0E1 		mov	r1, r3	@, tmp189
 1389              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1390              		.loc 1 325 34 view .LVU390
 1391 0668 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1392              	@ armwave.c:328:     g_armwave_state.wave_length = end_point - start_point;
 328:armwave.c     **** 
 1393              		.loc 1 328 33 view .LVU391
 1394 066c 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1395              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1396              		.loc 1 334 5 view .LVU392
 1397 0670 60019FE5 		ldr	r0, .L77+20	@,
 1398              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1399              		.loc 1 318 49 view .LVU393
 1400 0674 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1401              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1402              		.loc 1 332 79 view .LVU394
 1403 0678 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1404              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1405              		.loc 1 331 42 view .LVU395
 1406 067c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1407              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1408              		.loc 1 318 33 view .LVU396
 1409 0680 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1410              		.loc 1 319 5 is_stmt 1 view .LVU397
 1411              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1412              		.loc 1 331 42 is_stmt 0 view .LVU398
 1413 0684 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1414              	@ armwave.c:319:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1415              		.loc 1 319 30 view .LVU399
 1416 0688 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1417              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1418              		.loc 1 334 5 view .LVU400
 1419 068c 0C30A0E1 		mov	r3, ip	@, _19
 1420 0690 0C20A0E1 		mov	r2, ip	@, tmp3
 1421              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1422              		.loc 1 331 42 view .LVU401
 1423 0694 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1424              	@ armwave.c:319:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1425              		.loc 1 319 30 view .LVU402
 1426 0698 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 320:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1427              		.loc 1 320 5 is_stmt 1 view .LVU403
 321:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1428              		.loc 1 321 5 view .LVU404
 322:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1429              		.loc 1 322 5 view .LVU405
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1430              		.loc 1 323 5 view .LVU406
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1431              		.loc 1 324 5 view .LVU407
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1432              		.loc 1 325 5 view .LVU408
 326:armwave.c     ****     g_armwave_state.target_height = target_height;
 1433              		.loc 1 326 5 view .LVU409
 327:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1434              		.loc 1 327 5 view .LVU410
 328:armwave.c     **** 
 1435              		.loc 1 328 5 view .LVU411
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1436              		.loc 1 331 5 view .LVU412
 1437              		.loc 1 334 5 view .LVU413
 1438 069c FEFFFFEB 		bl	printf		@
 1439              	.LVL67:
 335:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 336:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 337:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 338:armwave.c     **** 
 339:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 340:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 341:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 342:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1440              		.loc 1 342 5 view .LVU414
 1441              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 343:armwave.c     **** 
 344:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1442              		.loc 1 344 23 is_stmt 0 view .LVU415
 1443 06a0 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1444              	@ armwave.c:342:     g_armwave_state.slice_height = 256; // 64;  
 342:armwave.c     **** 
 1445              		.loc 1 342 34 view .LVU416
 1446 06a4 013CA0E3 		mov	r3, #256	@ tmp203,
 1447              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 1448              		.loc 1 344 7 view .LVU417
 1449 06a8 000050E3 		cmp	r0, #0	@ _20,
 1450              	@ armwave.c:342:     g_armwave_state.slice_height = 256; // 64;  
 342:armwave.c     **** 
 1451              		.loc 1 342 34 view .LVU418
 1452 06ac 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1453              		.loc 1 344 5 is_stmt 1 view .LVU419
 1454              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 1455              		.loc 1 344 7 is_stmt 0 view .LVU420
 1456 06b0 0000000A 		beq	.L65		@,
 345:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1457              		.loc 1 345 9 is_stmt 1 view .LVU421
 1458 06b4 FEFFFFEB 		bl	free		@
 1459              	.LVL68:
 1460              	.L65:
 346:armwave.c     **** 
 347:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1461              		.loc 1 347 5 view .LVU422
 1462              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1463              		.loc 1 347 34 is_stmt 0 view .LVU423
 1464 06b8 0110A0E3 		mov	r1, #1	@,
 1465 06bc 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1466 06c0 FEFFFFEB 		bl	calloc		@
 1467              	.LVL69:
 1468              	@ armwave.c:349:     assert(g_armwave_state.ch1_buffer != NULL);
 348:armwave.c     **** 
 349:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1469              		.loc 1 349 5 view .LVU424
 1470 06c4 000050E3 		cmp	r0, #0	@ _23,
 1471              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 347:armwave.c     **** 
 1472              		.loc 1 347 34 view .LVU425
 1473 06c8 0070A0E1 		mov	r7, r0	@ _23,
 1474              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 347:armwave.c     **** 
 1475              		.loc 1 347 32 view .LVU426
 1476 06cc 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1477              		.loc 1 349 5 is_stmt 1 view .LVU427
 1478 06d0 3600000A 		beq	.L75		@,
 350:armwave.c     **** 
 351:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 352:armwave.c     ****     length = end_point - start_point;
 1479              		.loc 1 352 5 view .LVU428
 1480              	.LVL70:
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1481              		.loc 1 353 5 view .LVU429
 1482              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 1483              		.loc 1 353 34 is_stmt 0 view .LVU430
 1484 06d4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1485              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 1486              		.loc 1 353 22 view .LVU431
 1487 06d8 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1488              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1489              		.loc 1 354 60 view .LVU432
 1490 06dc 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp253, g_armwave_state.slice_height
 1491              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1492              		.loc 1 355 40 view .LVU433
 1493 06e0 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1494              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1495              		.loc 1 353 34 view .LVU434
 1496 06e4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1497              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1498              		.loc 1 353 22 view .LVU435
 1499 06e8 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1500              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1501              		.loc 1 354 60 view .LVU436
 1502 06ec C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp253
 1503              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1504              		.loc 1 353 22 view .LVU437
 1505 06f0 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1506              	.LVL71:
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1507              		.loc 1 354 5 is_stmt 1 view .LVU438
 1508              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1509              		.loc 1 354 60 is_stmt 0 view .LVU439
 1510 06f4 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1511              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1512              		.loc 1 354 41 view .LVU440
 1513 06f8 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1514 06fc 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1515              		.loc 1 355 5 is_stmt 1 view .LVU441
 1516              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1517              		.loc 1 355 40 is_stmt 0 view .LVU442
 1518 0700 FEFFFFEB 		bl	malloc		@
 1519              	.LVL72:
 1520              	@ armwave.c:357:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 356:armwave.c     **** 
 357:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1521              		.loc 1 357 5 view .LVU443
 1522 0704 000050E3 		cmp	r0, #0	@ _31,
 1523              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1524              		.loc 1 355 40 view .LVU444
 1525 0708 0060A0E1 		mov	r6, r0	@ _31,
 1526              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1527              		.loc 1 355 38 view .LVU445
 1528 070c 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1529              		.loc 1 357 5 is_stmt 1 view .LVU446
 1530 0710 2100000A 		beq	.L76		@,
 1531              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 358:armwave.c     **** 
 359:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 360:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1532              		.loc 1 360 54 is_stmt 0 view .LVU447
 1533 0714 2C7ADFED 		vldr.32	s15, .L77+8	@ tmp230,
 1534 0718 020040E2 		sub	r0, r0, #2	@ ivtmp.67, _31,
 1535              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1536              		.loc 1 359 12 view .LVU448
 1537 071c 0030A0E3 		mov	r3, #0	@ xx,
 1538              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1539              		.loc 1 360 54 view .LVU449
 1540 0720 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1541              	.L68:
 1542              	.LVL73:
 1543              		.loc 1 360 9 is_stmt 1 discriminator 3 view .LVU450
 1544              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1545              		.loc 1 360 74 is_stmt 0 discriminator 3 view .LVU451
 1546 0724 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1547              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1548              		.loc 1 359 32 discriminator 3 view .LVU452
 1549 0728 013083E2 		add	r3, r3, #1	@ xx, xx,
 1550              	.LVL74:
 1551              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1552              		.loc 1 359 5 discriminator 3 view .LVU453
 1553 072c 030055E1 		cmp	r5, r3	@ _13, xx
 1554              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1555              		.loc 1 360 74 discriminator 3 view .LVU454
 1556 0730 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1557 0734 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1558              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1559              		.loc 1 360 46 discriminator 3 view .LVU455
 1560 0738 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1561 073c 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1562 0740 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1563              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1564              		.loc 1 359 5 discriminator 3 view .LVU456
 1565 0744 F6FFFF1A 		bne	.L68		@,
 361:armwave.c     **** 
 362:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1566              		.loc 1 365 5 is_stmt 1 view .LVU457
 1567              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1568              		.loc 1 365 34 is_stmt 0 view .LVU458
 1569 0748 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1570 074c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1571 0750 FEFFFFEB 		bl	malloc		@
 1572              	.LVL75:
 1573              	@ armwave.c:367:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 366:armwave.c     **** 
 367:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1574              		.loc 1 367 5 view .LVU459
 1575 0754 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1576 0758 0620A0E1 		mov	r2, r6	@, _31
 1577 075c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1578 0760 0710A0E1 		mov	r1, r7	@, _23
 1579              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 365:armwave.c     **** 
 1580              		.loc 1 365 34 view .LVU460
 1581 0764 00C0A0E1 		mov	ip, r0	@ tmp237,
 1582              	@ armwave.c:367:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1583              		.loc 1 367 5 view .LVU461
 1584 0768 0030A0E1 		mov	r3, r0	@, tmp237
 1585              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 365:armwave.c     **** 
 1586              		.loc 1 365 32 view .LVU462
 1587 076c 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1588              		.loc 1 367 5 is_stmt 1 view .LVU463
 1589 0770 64009FE5 		ldr	r0, .L77+24	@,
 1590 0774 FEFFFFEB 		bl	printf		@
 1591              	.LVL76:
 368:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 369:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 370:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 371:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 372:armwave.c     **** 
 373:armwave.c     ****     malloc_stats();
 1592              		.loc 1 373 5 view .LVU464
 1593              	@ armwave.c:374: }
 374:armwave.c     **** }
 1594              		.loc 1 374 1 is_stmt 0 view .LVU465
 1595 0778 14D08DE2 		add	sp, sp, #20	@,,
 1596              		.cfi_remember_state
 1597              		.cfi_def_cfa_offset 36
 1598              		@ sp needed	@
 1599 077c 028BBDEC 		vldm	sp!, {d8}	@
 1600              		.cfi_restore 80
 1601              		.cfi_restore 81
 1602              		.cfi_def_cfa_offset 28
 1603              	.LVL77:
 1604              		.loc 1 374 1 view .LVU466
 1605 0780 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1606              		.cfi_restore 14
 1607              		.cfi_restore 9
 1608              		.cfi_restore 8
 1609              		.cfi_restore 7
 1610              		.cfi_restore 6
 1611              		.cfi_restore 5
 1612              		.cfi_restore 4
 1613              		.cfi_def_cfa_offset 0
 1614              	.LVL78:
 1615              	@ armwave.c:373:     malloc_stats();
 373:armwave.c     **** }
 1616              		.loc 1 373 5 view .LVU467
 1617 0784 FEFFFFEA 		b	malloc_stats		@
 1618              	.LVL79:
 1619              	.L74:
 1620              		.cfi_restore_state
 296:armwave.c     **** 
 1621              		.loc 1 296 5 is_stmt 1 discriminator 1 view .LVU468
 1622 0788 50309FE5 		ldr	r3, .L77+28	@,
 1623 078c 4A2FA0E3 		mov	r2, #296	@,
 1624 0790 4C109FE5 		ldr	r1, .L77+32	@,
 1625 0794 4C009FE5 		ldr	r0, .L77+36	@,
 1626 0798 FEFFFFEB 		bl	__assert_fail		@
 1627              	.LVL80:
 1628              	.L76:
 357:armwave.c     **** 
 1629              		.loc 1 357 5 discriminator 1 view .LVU469
 1630 079c 3C309FE5 		ldr	r3, .L77+28	@,
 1631 07a0 44209FE5 		ldr	r2, .L77+40	@,
 1632 07a4 38109FE5 		ldr	r1, .L77+32	@,
 1633 07a8 40009FE5 		ldr	r0, .L77+44	@,
 1634 07ac FEFFFFEB 		bl	__assert_fail		@
 1635              	.LVL81:
 1636              	.L75:
 349:armwave.c     **** 
 1637              		.loc 1 349 5 discriminator 1 view .LVU470
 1638 07b0 28309FE5 		ldr	r3, .L77+28	@,
 1639 07b4 38209FE5 		ldr	r2, .L77+48	@,
 1640 07b8 24109FE5 		ldr	r1, .L77+32	@,
 1641 07bc 34009FE5 		ldr	r0, .L77+52	@,
 1642 07c0 FEFFFFEB 		bl	__assert_fail		@
 1643              	.LVL82:
 1644              	.L78:
 1645              		.align	2
 1646              	.L77:
 1647 07c4 00007F43 		.word	1132396544
 1648 07c8 00008047 		.word	1199570944
 1649 07cc 0000803F 		.word	1065353216
 1650 07d0 40000000 		.word	.LC4
 1651 07d4 00000000 		.word	g_armwave_state
 1652 07d8 84000000 		.word	.LC6
 1653 07dc 34010000 		.word	.LC9
 1654 07e0 1C000000 		.word	.LANCHOR0+28
 1655 07e4 20000000 		.word	.LC2
 1656 07e8 6C000000 		.word	.LC5
 1657 07ec 65010000 		.word	357
 1658 07f0 08010000 		.word	.LC8
 1659 07f4 5D010000 		.word	349
 1660 07f8 E4000000 		.word	.LC7
 1661              		.cfi_endproc
 1662              	.LFE62:
 1664              		.align	2
 1665              		.global	armwave_set_wave_pointer
 1666              		.syntax unified
 1667              		.arm
 1668              		.fpu vfp
 1670              	armwave_set_wave_pointer:
 1671              	.LVL83:
 1672              	.LFB63:
 375:armwave.c     **** 
 376:armwave.c     **** /*
 377:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 378:armwave.c     ****  * in the future.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 381:armwave.c     **** {
 1673              		.loc 1 381 1 view -0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 0
 1676              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1677              		.loc 1 382 5 view .LVU472
 1678 07fc 000050E3 		cmp	r0, #0	@ wave_buffer
 1679              		.loc 1 382 5 is_stmt 0 view .LVU473
 1680 0800 0200000A 		beq	.L84		@,
 383:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1681              		.loc 1 383 5 is_stmt 1 view .LVU474
 1682              	@ armwave.c:383:     g_armwave_state.wave_buffer = wave_buffer;
 1683              		.loc 1 383 33 is_stmt 0 view .LVU475
 1684 0804 1C309FE5 		ldr	r3, .L85	@ tmp116,
 1685 0808 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1686 080c 1EFF2FE1 		bx	lr	@
 1687              	.L84:
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1688              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU476
 1689              	@ armwave.c:381: {
 381:armwave.c     ****     assert(wave_buffer != NULL);
 1690              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU477
 1691 0810 10402DE9 		push	{r4, lr}	@
 1692              		.cfi_def_cfa_offset 8
 1693              		.cfi_offset 4, -8
 1694              		.cfi_offset 14, -4
 1695              	@ armwave.c:382:     assert(wave_buffer != NULL);
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1696              		.loc 1 382 5 discriminator 1 view .LVU478
 1697 0814 10309FE5 		ldr	r3, .L85+4	@,
 1698 0818 10209FE5 		ldr	r2, .L85+8	@,
 1699 081c 10109FE5 		ldr	r1, .L85+12	@,
 1700 0820 10009FE5 		ldr	r0, .L85+16	@,
 1701              	.LVL84:
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1702              		.loc 1 382 5 discriminator 1 view .LVU479
 1703 0824 FEFFFFEB 		bl	__assert_fail		@
 1704              	.LVL85:
 1705              	.L86:
 1706              		.align	2
 1707              	.L85:
 1708 0828 00000000 		.word	g_armwave_state
 1709 082c 34000000 		.word	.LANCHOR0+52
 1710 0830 7E010000 		.word	382
 1711 0834 20000000 		.word	.LC2
 1712 0838 58010000 		.word	.LC10
 1713              		.cfi_endproc
 1714              	.LFE63:
 1716              		.align	2
 1717              		.global	armwave_set_wave_pointer_as_testbuf
 1718              		.syntax unified
 1719              		.arm
 1720              		.fpu vfp
 1722              	armwave_set_wave_pointer_as_testbuf:
 1723              	.LVL86:
 1724              	.LFB64:
 384:armwave.c     **** }
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 388:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 391:armwave.c     **** {
 1725              		.loc 1 391 1 is_stmt 1 view -0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 0
 1728              		@ frame_needed = 0, uses_anonymous_args = 0
 1729              		@ link register save eliminated.
 392:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1730              		.loc 1 392 5 view .LVU481
 1731              	@ armwave.c:392:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1732              		.loc 1 392 29 is_stmt 0 view .LVU482
 1733 083c 24309FE5 		ldr	r3, .L90	@ tmp117,
 1734              	@ armwave.c:392:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1735              		.loc 1 392 7 view .LVU483
 1736 0840 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1737 0844 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1738 0848 0400003A 		bcc	.L89		@,
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 394:armwave.c     ****         return;
 395:armwave.c     ****     }
 396:armwave.c     **** 
 397:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1739              		.loc 1 397 5 is_stmt 1 view .LVU484
 1740              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1741              		.loc 1 397 111 is_stmt 0 view .LVU485
 1742 084c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1743              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1744              		.loc 1 397 68 view .LVU486
 1745 0850 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1746 0854 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1747              	.LVL87:
 1748              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1749              		.loc 1 397 33 view .LVU487
 1750 0858 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1751              	@ armwave.c:398: }
 398:armwave.c     **** }
 1752              		.loc 1 398 1 view .LVU488
 1753 085c 1EFF2FE1 		bx	lr	@
 1754              	.LVL88:
 1755              	.L89:
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1756              		.loc 1 393 9 is_stmt 1 view .LVU489
 1757 0860 04009FE5 		ldr	r0, .L90+4	@,
 1758              	.LVL89:
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1759              		.loc 1 393 9 is_stmt 0 view .LVU490
 1760 0864 FEFFFFEA 		b	puts		@
 1761              	.LVL90:
 1762              	.L91:
 1763              		.align	2
 1764              	.L90:
 1765 0868 00000000 		.word	g_armwave_state
 1766 086c 6C010000 		.word	.LC11
 1767              		.cfi_endproc
 1768              	.LFE64:
 1770              		.align	2
 1771              		.global	armwave_set_wave_pointer_u32
 1772              		.syntax unified
 1773              		.arm
 1774              		.fpu vfp
 1776              	armwave_set_wave_pointer_u32:
 1777              	.LVL91:
 1778              	.LFB65:
 399:armwave.c     **** 
 400:armwave.c     **** /*
 401:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 402:armwave.c     ****  * disjointed buffers in the future.
 403:armwave.c     ****  */
 404:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 405:armwave.c     **** {
 1779              		.loc 1 405 1 is_stmt 1 view -0
 1780              		.cfi_startproc
 1781              		@ args = 0, pretend = 0, frame = 0
 1782              		@ frame_needed = 0, uses_anonymous_args = 0
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1783              		.loc 1 406 5 view .LVU492
 1784 0870 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1785              		.loc 1 406 5 is_stmt 0 view .LVU493
 1786 0874 0200000A 		beq	.L97		@,
 407:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1787              		.loc 1 407 5 is_stmt 1 view .LVU494
 1788              	@ armwave.c:407:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1789              		.loc 1 407 33 is_stmt 0 view .LVU495
 1790 0878 1C309FE5 		ldr	r3, .L98	@ tmp117,
 1791 087c 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1792 0880 1EFF2FE1 		bx	lr	@
 1793              	.L97:
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1794              		.loc 1 406 5 is_stmt 1 discriminator 1 view .LVU496
 1795              	@ armwave.c:405: {
 405:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1796              		.loc 1 405 1 is_stmt 0 discriminator 1 view .LVU497
 1797 0884 10402DE9 		push	{r4, lr}	@
 1798              		.cfi_def_cfa_offset 8
 1799              		.cfi_offset 4, -8
 1800              		.cfi_offset 14, -4
 1801              	@ armwave.c:406:     assert(wave_buffer_ptr != 0);
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1802              		.loc 1 406 5 discriminator 1 view .LVU498
 1803 0888 10309FE5 		ldr	r3, .L98+4	@,
 1804 088c 10209FE5 		ldr	r2, .L98+8	@,
 1805 0890 10109FE5 		ldr	r1, .L98+12	@,
 1806 0894 10009FE5 		ldr	r0, .L98+16	@,
 1807              	.LVL92:
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1808              		.loc 1 406 5 discriminator 1 view .LVU499
 1809 0898 FEFFFFEB 		bl	__assert_fail		@
 1810              	.LVL93:
 1811              	.L99:
 1812              		.align	2
 1813              	.L98:
 1814 089c 00000000 		.word	g_armwave_state
 1815 08a0 50000000 		.word	.LANCHOR0+80
 1816 08a4 96010000 		.word	406
 1817 08a8 20000000 		.word	.LC2
 1818 08ac A8010000 		.word	.LC12
 1819              		.cfi_endproc
 1820              	.LFE65:
 1822              		.align	2
 1823              		.global	armwave_clear_buffer
 1824              		.syntax unified
 1825              		.arm
 1826              		.fpu vfp
 1828              	armwave_clear_buffer:
 1829              	.LVL94:
 1830              	.LFB66:
 408:armwave.c     **** }
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 414:armwave.c     **** {
 1831              		.loc 1 414 1 is_stmt 1 view -0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 0
 1834              		@ frame_needed = 0, uses_anonymous_args = 0
 1835              		@ link register save eliminated.
 415:armwave.c     ****     // Flags ignored, only one buffer cleared
 416:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1836              		.loc 1 416 5 view .LVU501
 1837              	@ armwave.c:416:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1838              		.loc 1 416 58 is_stmt 0 view .LVU502
 1839 08b0 0C309FE5 		ldr	r3, .L101	@ tmp114,
 1840              	@ armwave.c:416:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1841              		.loc 1 416 5 view .LVU503
 1842 08b4 0010A0E3 		mov	r1, #0	@,
 1843 08b8 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1844 08bc 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1845              	.LVL95:
 1846              		.loc 1 416 5 view .LVU504
 1847 08c0 FEFFFFEA 		b	memset		@
 1848              	.LVL96:
 1849              	.L102:
 1850              		.align	2
 1851              	.L101:
 1852 08c4 00000000 		.word	g_armwave_state
 1853              		.cfi_endproc
 1854              	.LFE66:
 1856              		.align	2
 1857              		.global	armwave_set_channel_colour
 1858              		.syntax unified
 1859              		.arm
 1860              		.fpu vfp
 1862              	armwave_set_channel_colour:
 1863              	.LVL97:
 1864              	.LFB67:
 417:armwave.c     **** }
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 423:armwave.c     **** {
 1865              		.loc 1 423 1 is_stmt 1 view -0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 0
 1868              		@ frame_needed = 0, uses_anonymous_args = 0
 1869              		@ link register save eliminated.
 424:armwave.c     ****     // Only 1ch supported for now
 425:armwave.c     ****     switch(ch) {
 1870              		.loc 1 425 5 view .LVU506
 1871 08c8 010050E3 		cmp	r0, #1	@ ch,
 426:armwave.c     ****         case 1:
 427:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1872              		.loc 1 427 13 view .LVU507
 1873              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 1874              		.loc 1 427 41 is_stmt 0 view .LVU508
 1875 08cc 0C009F05 		ldreq	r0, .L105	@ tmp117,
 1876              	.LVL98:
 1877              		.loc 1 427 41 view .LVU509
 1878 08d0 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 428:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1879              		.loc 1 428 13 is_stmt 1 view .LVU510
 1880              	@ armwave.c:428:             g_armwave_state.ch1_color.g = g;
 1881              		.loc 1 428 41 is_stmt 0 view .LVU511
 1882 08d4 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 429:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1883              		.loc 1 429 13 is_stmt 1 view .LVU512
 1884              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 1885              		.loc 1 429 41 is_stmt 0 view .LVU513
 1886 08d8 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 430:armwave.c     ****             break;
 1887              		.loc 1 430 13 is_stmt 1 view .LVU514
 1888              	@ armwave.c:432: }
 431:armwave.c     ****     }
 432:armwave.c     **** }
 1889              		.loc 1 432 1 is_stmt 0 view .LVU515
 1890 08dc 1EFF2FE1 		bx	lr	@
 1891              	.L106:
 1892              		.align	2
 1893              	.L105:
 1894 08e0 00000000 		.word	g_armwave_state
 1895              		.cfi_endproc
 1896              	.LFE67:
 1898              		.align	2
 1899              		.global	armwave_dump_ppm_debug
 1900              		.syntax unified
 1901              		.arm
 1902              		.fpu vfp
 1904              	armwave_dump_ppm_debug:
 1905              	.LVL99:
 1906              	.LFB68:
 433:armwave.c     **** 
 434:armwave.c     **** /*
 435:armwave.c     ****  * Dump a ppm of a buffer to a file.
 436:armwave.c     ****  */
 437:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 438:armwave.c     **** {
 1907              		.loc 1 438 1 is_stmt 1 view -0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 0
 1910              		@ frame_needed = 0, uses_anonymous_args = 0
 439:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1911              		.loc 1 439 5 view .LVU517
 1912              	@ armwave.c:438: {
 438:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1913              		.loc 1 438 1 is_stmt 0 view .LVU518
 1914 08e4 0130A0E1 		mov	r3, r1	@ fn, fn
 1915 08e8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1916              		.cfi_def_cfa_offset 28
 1917              		.cfi_offset 4, -28
 1918              		.cfi_offset 5, -24
 1919              		.cfi_offset 6, -20
 1920              		.cfi_offset 7, -16
 1921              		.cfi_offset 8, -12
 1922              		.cfi_offset 9, -8
 1923              		.cfi_offset 14, -4
 1924 08ec 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1925 08f0 0CD04DE2 		sub	sp, sp, #12	@,,
 1926              		.cfi_def_cfa_offset 40
 1927              	@ armwave.c:439:     FILE *fp = fopen(fn, "wb");
 1928              		.loc 1 439 16 view .LVU519
 1929 08f4 C4109FE5 		ldr	r1, .L115	@,
 1930              	.LVL100:
 1931              		.loc 1 439 16 view .LVU520
 1932 08f8 0300A0E1 		mov	r0, r3	@, fn
 1933              	.LVL101:
 1934              		.loc 1 439 16 view .LVU521
 1935 08fc FEFFFFEB 		bl	fopen64		@
 1936              	.LVL102:
 1937              	@ armwave.c:446:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 440:armwave.c     ****     uint32_t data;
 441:armwave.c     ****     int xx, yy;
 442:armwave.c     **** 
 443:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 444:armwave.c     **** 
 445:armwave.c     ****     fputs("P3\n", fp);
 446:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1938              		.loc 1 446 5 view .LVU522
 1939 0900 BC609FE5 		ldr	r6, .L115+4	@ tmp150,
 1940              	@ armwave.c:445:     fputs("P3\n", fp);
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1941              		.loc 1 445 5 view .LVU523
 1942 0904 0320A0E3 		mov	r2, #3	@,
 1943 0908 0110A0E3 		mov	r1, #1	@,
 1944              	@ armwave.c:439:     FILE *fp = fopen(fn, "wb");
 439:armwave.c     ****     uint32_t data;
 1945              		.loc 1 439 16 view .LVU524
 1946 090c 0070A0E1 		mov	r7, r0	@ fp,
 1947              	.LVL103:
 440:armwave.c     ****     uint32_t data;
 1948              		.loc 1 440 5 is_stmt 1 view .LVU525
 441:armwave.c     **** 
 1949              		.loc 1 441 5 view .LVU526
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1950              		.loc 1 445 5 view .LVU527
 1951 0910 0030A0E1 		mov	r3, r0	@, fp
 1952 0914 AC009FE5 		ldr	r0, .L115+8	@,
 1953              	.LVL104:
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1954              		.loc 1 445 5 is_stmt 0 view .LVU528
 1955 0918 FEFFFFEB 		bl	fwrite		@
 1956              	.LVL105:
 1957              		.loc 1 446 5 is_stmt 1 view .LVU529
 1958 091c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1959 0920 A4109FE5 		ldr	r1, .L115+12	@,
 1960 0924 0700A0E1 		mov	r0, r7	@, fp
 1961 0928 FEFFFFEB 		bl	fprintf		@
 1962              	.LVL106:
 447:armwave.c     ****     fputs("255\n", fp);
 1963              		.loc 1 447 5 view .LVU530
 1964 092c 0420A0E3 		mov	r2, #4	@,
 1965 0930 0730A0E1 		mov	r3, r7	@, fp
 1966 0934 0110A0E3 		mov	r1, #1	@,
 1967 0938 90009FE5 		ldr	r0, .L115+16	@,
 1968 093c FEFFFFEB 		bl	fwrite		@
 1969              	.LVL107:
 448:armwave.c     **** 
 449:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1970              		.loc 1 449 5 view .LVU531
 1971              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1972              		.loc 1 449 37 is_stmt 0 view .LVU532
 1973 0940 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1974              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1975              		.loc 1 449 5 view .LVU533
 1976 0944 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1977 0948 180000DA 		ble	.L108		@,
 1978 094c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1979              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 451:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 452:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 453:armwave.c     **** 
 454:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1980              		.loc 1 454 13 view .LVU534
 1981 0950 7C909FE5 		ldr	r9, .L115+20	@ tmp152,
 1982              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1983              		.loc 1 449 12 view .LVU535
 1984 0954 0050A0E3 		mov	r5, #0	@ yy,
 1985              	.LVL108:
 1986              	.L109:
 1987              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1988              		.loc 1 450 9 view .LVU536
 1989 0958 000053E3 		cmp	r3, #0	@ _13,
 1990              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1991              		.loc 1 450 16 view .LVU537
 1992 095c 0040A0C3 		movgt	r4, #0	@ xx,
 1993              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1994              		.loc 1 450 9 view .LVU538
 1995 0960 0F0000DA 		ble	.L111		@,
 1996              	.LVL109:
 1997              	.L110:
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1998              		.loc 1 451 13 is_stmt 1 discriminator 3 view .LVU539
 1999              	@ armwave.c:451:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2000              		.loc 1 451 29 is_stmt 0 discriminator 3 view .LVU540
 2001 0964 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2002              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2003              		.loc 1 454 13 discriminator 3 view .LVU541
 2004 0968 0910A0E1 		mov	r1, r9	@, tmp152
 2005 096c 0700A0E1 		mov	r0, r7	@, fp
 2006              	@ armwave.c:451:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2007              		.loc 1 451 18 discriminator 3 view .LVU542
 2008 0970 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2009              	.LVL110:
 2010              		.loc 1 454 13 is_stmt 1 discriminator 3 view .LVU543
 2011              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2012              		.loc 1 450 58 is_stmt 0 discriminator 3 view .LVU544
 2013 0974 014084E2 		add	r4, r4, #1	@ xx, xx,
 2014              	.LVL111:
 2015              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2016              		.loc 1 454 81 discriminator 3 view .LVU545
 2017 0978 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2018              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2019              		.loc 1 454 61 discriminator 3 view .LVU546
 2020 097c 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2021              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2022              		.loc 1 454 13 discriminator 3 view .LVU547
 2023 0980 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2024 0984 7330EFE6 		uxtb	r3, r3	@, tmp142
 2025 0988 00C08DE5 		str	ip, [sp]	@ tmp147,
 2026 098c 7220EFE6 		uxtb	r2, r2	@, data
 2027              	.LVL112:
 2028              		.loc 1 454 13 discriminator 3 view .LVU548
 2029 0990 FEFFFFEB 		bl	fprintf		@
 2030              	.LVL113:
 2031              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2032              		.loc 1 450 41 discriminator 3 view .LVU549
 2033 0994 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2034              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2035              		.loc 1 450 9 discriminator 3 view .LVU550
 2036 0998 040053E1 		cmp	r3, r4	@ _13, xx
 2037 099c F0FFFFCA 		bgt	.L110		@,
 2038 09a0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2039              	.LVL114:
 2040              	.L111:
 2041              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2042              		.loc 1 449 55 discriminator 2 view .LVU551
 2043 09a4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2044              	.LVL115:
 2045              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2046              		.loc 1 449 5 discriminator 2 view .LVU552
 2047 09a8 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2048 09ac E9FFFFBA 		blt	.L109		@,
 2049              	.LVL116:
 2050              	.L108:
 455:armwave.c     ****         }
 456:armwave.c     ****     }
 457:armwave.c     **** 
 458:armwave.c     ****     fclose(fp);
 2051              		.loc 1 458 5 is_stmt 1 view .LVU553
 2052 09b0 0700A0E1 		mov	r0, r7	@, fp
 2053              	@ armwave.c:459: }
 459:armwave.c     **** }
 2054              		.loc 1 459 1 is_stmt 0 view .LVU554
 2055 09b4 0CD08DE2 		add	sp, sp, #12	@,,
 2056              		.cfi_def_cfa_offset 28
 2057              		@ sp needed	@
 2058 09b8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2059              		.cfi_restore 14
 2060              		.cfi_restore 9
 2061              		.cfi_restore 8
 2062              		.cfi_restore 7
 2063              		.cfi_restore 6
 2064              		.cfi_restore 5
 2065              		.cfi_restore 4
 2066              		.cfi_def_cfa_offset 0
 2067              	.LVL117:
 2068              	@ armwave.c:458:     fclose(fp);
 458:armwave.c     **** }
 2069              		.loc 1 458 5 view .LVU555
 2070 09bc FEFFFFEA 		b	fclose		@
 2071              	.LVL118:
 2072              	.L116:
 458:armwave.c     **** }
 2073              		.loc 1 458 5 view .LVU556
 2074              		.align	2
 2075              	.L115:
 2076 09c0 C0010000 		.word	.LC13
 2077 09c4 00000000 		.word	g_armwave_state
 2078 09c8 C4010000 		.word	.LC14
 2079 09cc C8010000 		.word	.LC15
 2080 09d0 D0010000 		.word	.LC16
 2081 09d4 D8010000 		.word	.LC17
 2082              		.cfi_endproc
 2083              	.LFE68:
 2085              		.align	2
 2086              		.global	armwave_test_init
 2087              		.syntax unified
 2088              		.arm
 2089              		.fpu vfp
 2091              	armwave_test_init:
 2092              	.LVL119:
 2093              	.LFB69:
 460:armwave.c     **** 
 461:armwave.c     **** /*
 462:armwave.c     ****  * Initialise some test functionry.
 463:armwave.c     ****  */
 464:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 465:armwave.c     **** {
 2094              		.loc 1 465 1 is_stmt 1 view -0
 2095              		.cfi_startproc
 2096              		@ args = 0, pretend = 0, frame = 0
 2097              		@ frame_needed = 0, uses_anonymous_args = 0
 466:armwave.c     ****     test_create_gamma();
 2098              		.loc 1 466 5 view .LVU558
 2099              	.LBB18:
 2100              	.LBI18:
  34:armwave.c     **** {
 2101              		.loc 1 34 6 view .LVU559
  34:armwave.c     **** {
 2102              		.loc 1 34 6 is_stmt 0 view .LVU560
 2103              	.LBE18:
 2104              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2105              		.loc 1 465 1 view .LVU561
 2106 09d8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2107              		.cfi_def_cfa_offset 32
 2108              		.cfi_offset 4, -32
 2109              		.cfi_offset 5, -28
 2110              		.cfi_offset 6, -24
 2111              		.cfi_offset 7, -20
 2112              		.cfi_offset 8, -16
 2113              		.cfi_offset 9, -12
 2114              		.cfi_offset 10, -8
 2115              		.cfi_offset 14, -4
 2116 09dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 2117              		.cfi_def_cfa_offset 56
 2118              		.cfi_offset 80, -56
 2119              		.cfi_offset 81, -52
 2120              		.cfi_offset 82, -48
 2121              		.cfi_offset 83, -44
 2122              		.cfi_offset 84, -40
 2123              		.cfi_offset 85, -36
 2124 09e0 BC409FE5 		ldr	r4, .L121+20	@ ivtmp.81,
 2125              	.LBB21:
 2126              	.LBB19:
 2127              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2128              		.loc 1 40 32 view .LVU562
 2129 09e4 2DAA9FED 		vldr.32	s20, .L121+16	@ tmp136,
 2130              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2131              		.loc 1 40 26 view .LVU563
 2132 09e8 289B9FED 		vldr.64	d9, .L121	@ tmp151,
 2133              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2134              		.loc 1 40 49 view .LVU564
 2135 09ec 298B9FED 		vldr.64	d8, .L121+8	@ tmp139,
 2136 09f0 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.81,
 2137              	.LBE19:
 2138              	.LBE21:
 2139              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2140              		.loc 1 465 1 view .LVU565
 2141 09f4 10D04DE2 		sub	sp, sp, #16	@,,
 2142              		.cfi_def_cfa_offset 72
 2143              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2144              		.loc 1 465 1 view .LVU566
 2145 09f8 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2146 09fc 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2147 0a00 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2148 0a04 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2149 0a08 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.81,
 2150 0a0c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2151              	.LVL120:
 2152              	.L118:
 2153              	.LBB22:
 2154              	.LBB20:
  40:armwave.c     ****     }
 2155              		.loc 1 40 9 is_stmt 1 view .LVU567
 2156              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2157              		.loc 1 40 32 is_stmt 0 view .LVU568
 2158 0a10 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.81
 2159              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2160              		.loc 1 40 26 view .LVU569
 2161 0a14 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2162              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2163              		.loc 1 40 32 view .LVU570
 2164 0a18 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2165 0a1c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2166 0a20 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2167              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2168              		.loc 1 40 26 view .LVU571
 2169 0a24 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2170 0a28 FEFFFFEB 		bl	pow		@
 2171              	.LVL121:
 2172              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2173              		.loc 1 40 49 view .LVU572
 2174 0a2c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2175              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2176              		.loc 1 40 24 view .LVU573
 2177 0a30 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2178 0a34 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2179 0a38 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2180              	.LVL122:
 2181              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2182              		.loc 1 39 5 view .LVU574
 2183 0a3c 0A0054E1 		cmp	r4, r10	@ ivtmp.81, _39
 2184 0a40 F2FFFF1A 		bne	.L118		@,
 2185              	.LVL123:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2186              		.loc 1 39 5 view .LVU575
 2187              	.LBE20:
 2188              	.LBE22:
 467:armwave.c     **** 
 468:armwave.c     ****     // make ch1 yellowish by default
 469:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2189              		.loc 1 469 5 is_stmt 1 view .LVU576
 2190              	.LBB23:
 2191              	.LBI23:
 422:armwave.c     **** {
 2192              		.loc 1 422 6 view .LVU577
 2193              	.LBB24:
 425:armwave.c     ****         case 1:
 2194              		.loc 1 425 5 view .LVU578
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2195              		.loc 1 427 13 view .LVU579
 428:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2196              		.loc 1 428 13 view .LVU580
 2197              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2198              		.loc 1 427 41 is_stmt 0 view .LVU581
 2199 0a44 5CC09FE5 		ldr	ip, .L121+24	@ tmp142,
 2200 0a48 5C409FE5 		ldr	r4, .L121+28	@ tmp143,
 2201              	.LBE24:
 2202              	.LBE23:
 2203              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 470:armwave.c     **** 
 471:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2204              		.loc 1 471 5 view .LVU582
 2205 0a4c 0000A0E3 		mov	r0, #0	@ tmp147,
 2206              	.LBB28:
 2207              	.LBB25:
 2208              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 429:armwave.c     ****             break;
 2209              		.loc 1 429 41 view .LVU583
 2210 0a50 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2211              	.LBE25:
 2212              	.LBE28:
 2213              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2214              		.loc 1 471 5 view .LVU584
 2215 0a54 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2216 0a58 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2217 0a5c 00808DE5 		str	r8, [sp]	@ render_width,
 2218 0a60 0610A0E1 		mov	r1, r6	@, tmp3
 2219 0a64 0720A0E1 		mov	r2, r7	@, nwaves
 2220              	.LBB29:
 2221              	.LBB26:
 2222              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2223              		.loc 1 427 41 view .LVU585
 2224 0a68 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 429:armwave.c     ****             break;
 2225              		.loc 1 429 13 is_stmt 1 view .LVU586
 2226              	.LBE26:
 2227              	.LBE29:
 2228              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2229              		.loc 1 471 5 is_stmt 0 view .LVU587
 2230 0a6c 0630A0E1 		mov	r3, r6	@, wave_size
 2231              	.LBB30:
 2232              	.LBB27:
 2233              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 429:armwave.c     ****             break;
 2234              		.loc 1 429 41 view .LVU588
 2235 0a70 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 430:armwave.c     ****     }
 2236              		.loc 1 430 13 is_stmt 1 view .LVU589
 2237              	.LVL124:
 430:armwave.c     ****     }
 2238              		.loc 1 430 13 is_stmt 0 view .LVU590
 2239              	.LBE27:
 2240              	.LBE30:
 2241              		.loc 1 471 5 is_stmt 1 view .LVU591
 2242 0a74 FEFFFFEB 		bl	armwave_setup_render		@
 2243              	.LVL125:
 472:armwave.c     **** 
 473:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2244              		.loc 1 473 5 view .LVU592
 2245 0a78 30109FE5 		ldr	r1, .L121+32	@,
 2246 0a7c 30009FE5 		ldr	r0, .L121+36	@,
 2247              	@ armwave.c:474: }
 474:armwave.c     **** }
 2248              		.loc 1 474 1 is_stmt 0 view .LVU593
 2249 0a80 10D08DE2 		add	sp, sp, #16	@,,
 2250              		.cfi_def_cfa_offset 56
 2251              		@ sp needed	@
 2252 0a84 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2253              		.cfi_restore 84
 2254              		.cfi_restore 85
 2255              		.cfi_restore 82
 2256              		.cfi_restore 83
 2257              		.cfi_restore 80
 2258              		.cfi_restore 81
 2259              		.cfi_def_cfa_offset 32
 2260 0a88 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2261              		.cfi_restore 14
 2262              		.cfi_restore 10
 2263              		.cfi_restore 9
 2264              		.cfi_restore 8
 2265              		.cfi_restore 7
 2266              		.cfi_restore 6
 2267              		.cfi_restore 5
 2268              		.cfi_restore 4
 2269              		.cfi_def_cfa_offset 0
 2270              	.LVL126:
 2271              	@ armwave.c:473:     printf("armwave version: %s\n", ARMWAVE_VER);
 473:armwave.c     **** }
 2272              		.loc 1 473 5 view .LVU594
 2273 0a8c FEFFFFEA 		b	printf		@
 2274              	.LVL127:
 2275              	.L122:
 2276              		.align	3
 2277              	.L121:
 2278 0a90 000000C0 		.word	-1073741824
 2279 0a94 CCCCEC3F 		.word	1072483532
 2280 0a98 00000000 		.word	0
 2281 0a9c 00E06F40 		.word	1081073664
 2282 0aa0 00007F43 		.word	1132396544
 2283 0aa4 FFFFFFFF 		.word	gamma_table-1
 2284 0aa8 00000000 		.word	g_armwave_state
 2285 0aac F609F406 		.word	116656630
 2286 0ab0 00000000 		.word	.LC0
 2287 0ab4 08000000 		.word	.LC1
 2288              		.cfi_endproc
 2289              	.LFE69:
 2291              		.align	2
 2292              		.global	armwave_test_fill_outbuf
 2293              		.syntax unified
 2294              		.arm
 2295              		.fpu vfp
 2297              	armwave_test_fill_outbuf:
 2298              	.LFB70:
 475:armwave.c     **** 
 476:armwave.c     **** /*
 477:armwave.c     ****  * Render image to the local allocated buffer.
 478:armwave.c     ****  */
 479:armwave.c     **** void armwave_test_fill_outbuf()
 480:armwave.c     **** {
 2299              		.loc 1 480 1 is_stmt 1 view -0
 2300              		.cfi_startproc
 2301              		@ args = 0, pretend = 0, frame = 0
 2302              		@ frame_needed = 0, uses_anonymous_args = 0
 481:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2303              		.loc 1 481 5 view .LVU596
 2304              	@ armwave.c:480: {
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2305              		.loc 1 480 1 is_stmt 0 view .LVU597
 2306 0ab8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2307              		.cfi_def_cfa_offset 32
 2308              		.cfi_offset 4, -32
 2309              		.cfi_offset 5, -28
 2310              		.cfi_offset 6, -24
 2311              		.cfi_offset 7, -20
 2312              		.cfi_offset 8, -16
 2313              		.cfi_offset 9, -12
 2314              		.cfi_offset 10, -8
 2315              		.cfi_offset 14, -4
 2316              	@ armwave.c:481:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2317              		.loc 1 481 5 view .LVU598
 2318 0abc 04419FE5 		ldr	r4, .L134	@ tmp219,
 2319 0ac0 685094E5 		ldr	r5, [r4, #104]	@ _1, g_armwave_state.out_pixbuf
 2320              	.LVL128:
 2321              	.LBB33:
 2322              	.LBI33:
 172:armwave.c     **** {
 2323              		.loc 1 172 6 is_stmt 1 view .LVU599
 2324              	.LBB34:
 174:armwave.c     ****     // uint32_t ysub;
 2325              		.loc 1 174 5 view .LVU600
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2326              		.loc 1 176 5 view .LVU601
 177:armwave.c     ****     // uint8_t row;
 2327              		.loc 1 177 5 view .LVU602
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2328              		.loc 1 179 5 view .LVU603
 180:armwave.c     ****     uint32_t offset;
 2329              		.loc 1 180 5 view .LVU604
 181:armwave.c     **** 
 2330              		.loc 1 181 5 view .LVU605
 183:armwave.c     **** 
 2331              		.loc 1 183 5 view .LVU606
 2332 0ac4 000055E3 		cmp	r5, #0	@ _1,
 2333 0ac8 3900000A 		beq	.L133		@,
 186:armwave.c     **** 
 2334              		.loc 1 186 5 view .LVU607
 2335              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2336              		.loc 1 186 59 is_stmt 0 view .LVU608
 2337 0acc 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2338 0ad0 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2339              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2340              		.loc 1 186 5 view .LVU609
 2341 0ad4 0010A0E3 		mov	r1, #0	@,
 2342 0ad8 0500A0E1 		mov	r0, r5	@, _1
 2343              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2344              		.loc 1 186 59 view .LVU610
 2345 0adc 920302E0 		mul	r2, r2, r3	@ tmp172, g_armwave_state.target_height, g_armwave_state.target_width
 2346              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2347              		.loc 1 186 5 view .LVU611
 2348 0ae0 0221A0E1 		lsl	r2, r2, #2	@, tmp172,
 2349 0ae4 FEFFFFEB 		bl	memset		@
 2350              	.LVL129:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2351              		.loc 1 188 5 is_stmt 1 view .LVU612
 2352              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2353              		.loc 1 188 10 is_stmt 0 view .LVU613
 2354 0ae8 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2355 0aec 402094E5 		ldr	r2, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2356 0af0 920302E0 		mul	r2, r2, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2357              	.LVL130:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2358              		.loc 1 231 5 is_stmt 1 view .LVU614
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2359              		.loc 1 231 5 is_stmt 0 view .LVU615
 2360 0af4 010052E3 		cmp	r2, #1	@ npix,
 2361              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2362              		.loc 1 231 26 view .LVU616
 2363 0af8 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp185, npix, npix,
 2364              	.LVL131:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2365              		.loc 1 231 26 view .LVU617
 2366 0afc C220A0E1 		asr	r2, r2, #1	@ _67, tmp185,
 2367              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2368              		.loc 1 231 5 view .LVU618
 2369 0b00 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2370 0b04 040094E5 		ldr	r0, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 2371              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2372              		.loc 1 236 44 view .LVU619
 2373 0b08 FC76D4E1 		ldrsh	r7, [r4, #108]	@ _19, g_armwave_state.ch1_color.r
 2374              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2375              		.loc 1 237 44 view .LVU620
 2376 0b0c FE66D4E1 		ldrsh	r6, [r4, #110]	@ _24, g_armwave_state.ch1_color.g
 2377              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2378              		.loc 1 238 44 view .LVU621
 2379 0b10 F0E7D4E1 		ldrsh	lr, [r4, #112]	@ _28, g_armwave_state.ch1_color.b
 2380              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2381              		.loc 1 249 49 view .LVU622
 2382 0b14 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _48, g_armwave_state.vscale_frac
 2383 0b18 020040E2 		sub	r0, r0, #2	@ ivtmp.86, g_armwave_state.ch1_buffer,
 2384              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2385              		.loc 1 231 11 view .LVU623
 2386 0b1c 0010A0E3 		mov	r1, #0	@ n,
 2387              	.LVL132:
 2388              	.L127:
 232:armwave.c     ****         value = wave_word & 0xffff;
 2389              		.loc 1 232 9 is_stmt 1 view .LVU624
 233:armwave.c     **** 
 2390              		.loc 1 233 9 view .LVU625
 2391              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 2392              		.loc 1 233 15 is_stmt 0 view .LVU626
 2393 0b20 B280F0E1 		ldrh	r8, [r0, #2]!	@ MEM[base: _100, offset: 0B], MEM[base: _100, offset: 0B]
 2394              	.LVL133:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2395              		.loc 1 235 9 is_stmt 1 view .LVU627
 2396              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2397              		.loc 1 235 11 is_stmt 0 view .LVU628
 2398 0b24 FF8018E2 		ands	r8, r8, #255	@ value, MEM[base: _100, offset: 0B],
 2399              	.LVL134:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2400              		.loc 1 235 11 view .LVU629
 2401 0b28 1D00000A 		beq	.L126		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2402              		.loc 1 236 13 is_stmt 1 view .LVU630
 2403              	.LVL135:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2404              		.loc 1 237 13 view .LVU631
 238:armwave.c     **** 
 2405              		.loc 1 238 13 view .LVU632
 240:armwave.c     ****             g = MIN(gg, 255);
 2406              		.loc 1 240 13 view .LVU633
 241:armwave.c     ****             b = MIN(bb, 255);
 2407              		.loc 1 241 13 view .LVU634
 242:armwave.c     **** 
 2408              		.loc 1 242 13 view .LVU635
 245:armwave.c     **** 
 2409              		.loc 1 245 13 view .LVU636
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2410              		.loc 1 248 13 view .LVU637
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2411              		.loc 1 249 13 view .LVU638
 250:armwave.c     ****             xx = (nsub >> 8) / 2;
 2412              		.loc 1 250 13 view .LVU639
 251:armwave.c     **** 
 2413              		.loc 1 251 13 view .LVU640
 254:armwave.c     ****             {
 2414              		.loc 1 254 13 view .LVU641
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2415              		.loc 1 256 17 view .LVU642
 257:armwave.c     ****             }
 2416              		.loc 1 257 17 view .LVU643
 2417              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2418              		.loc 1 249 24 is_stmt 0 view .LVU644
 2419 0b2c 71C0EFE6 		uxtb	ip, r1	@ n, n
 2420              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2421              		.loc 1 238 47 view .LVU645
 2422 0b30 880E63E1 		smulbb	r3, r8, lr	@ tmp205, value, _28
 2423              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2424              		.loc 1 249 32 view .LVU646
 2425 0b34 90CA07EE 		vmov	s15, ip	@ int	@ n, n
 2426              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2427              		.loc 1 237 47 view .LVU647
 2428 0b38 880669E1 		smulbb	r9, r8, r6	@ tmp209, value, _24
 2429              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2430              		.loc 1 238 16 view .LVU648
 2431 0b3c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp205,
 2432              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2433              		.loc 1 242 17 view .LVU649
 2434 0b40 FF0053E3 		cmp	r3, #255	@ bb,
 2435              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2436              		.loc 1 249 32 view .LVU650
 2437 0b44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, n
 2438              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2439              		.loc 1 237 16 view .LVU651
 2440 0b48 4994A0E1 		asr	r9, r9, #8	@ gg, tmp209,
 2441              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2442              		.loc 1 236 47 view .LVU652
 2443 0b4c 880768E1 		smulbb	r8, r8, r7	@ tmp215, value, _19
 2444              	.LVL136:
 2445              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2446              		.loc 1 242 17 view .LVU653
 2447 0b50 FF30A0A3 		movge	r3, #255	@ bb,
 2448              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 2449              		.loc 1 241 17 view .LVU654
 2450 0b54 FF0059E3 		cmp	r9, #255	@ gg,
 2451 0b58 FF90A0A3 		movge	r9, #255	@ gg,
 2452              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2453              		.loc 1 236 16 view .LVU655
 2454 0b5c 4884A0E1 		asr	r8, r8, #8	@ rr, tmp215,
 2455              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2456              		.loc 1 240 17 view .LVU656
 2457 0b60 FF0058E3 		cmp	r8, #255	@ rr,
 2458              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2459              		.loc 1 249 32 view .LVU657
 2460 0b64 877A67EE 		vmul.f32	s15, s15, s14	@ tmp197, tmp196, _48
 2461              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2462              		.loc 1 245 48 view .LVU658
 2463 0b68 0994A0E1 		lsl	r9, r9, #8	@ tmp210, gg,
 2464              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2465              		.loc 1 245 36 view .LVU659
 2466 0b6c 0338A0E1 		lsl	r3, r3, #16	@ tmp206, bb,
 2467              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2468              		.loc 1 240 17 view .LVU660
 2469 0b70 FF80A0A3 		movge	r8, #255	@ rr,
 2470              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2471              		.loc 1 245 48 view .LVU661
 2472 0b74 7990FFE6 		uxth	r9, r9	@ tmp211, tmp210
 2473              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2474              		.loc 1 245 36 view .LVU662
 2475 0b78 FF3803E2 		and	r3, r3, #16711680	@ tmp207, tmp206,
 2476              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2477              		.loc 1 245 43 view .LVU663
 2478 0b7c 093083E1 		orr	r3, r3, r9	@ tmp213, tmp207, tmp211
 2479              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2480              		.loc 1 245 54 view .LVU664
 2481 0b80 7880EFE6 		uxtb	r8, r8	@ rr, rr
 2482              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2483              		.loc 1 249 16 view .LVU665
 2484 0b84 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2485              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2486              		.loc 1 245 54 view .LVU666
 2487 0b88 083083E1 		orr	r3, r3, r8	@ tmp217, tmp213, rr
 2488              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2489              		.loc 1 256 35 view .LVU667
 2490 0b8c 58C094E5 		ldr	ip, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2491              	@ armwave.c:251:             xx = (nsub >> 8) / 2;
 251:armwave.c     **** 
 2492              		.loc 1 251 30 view .LVU668
 2493 0b90 C194A0E1 		asr	r9, r1, #9	@ xx, n,
 2494              	.LVL137:
 2495              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2496              		.loc 1 245 18 view .LVU669
 2497 0b94 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp217,
 2498              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2499              		.loc 1 257 35 view .LVU670
 2500 0b98 908A17EE 		vmov	r8, s15	@ int	@ yy, yy
 2501 0b9c 9C982CE0 		mla	ip, ip, r8, r9	@ tmp203, g_armwave_state.target_width, yy, xx
 2502              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2503              		.loc 1 257 45 view .LVU671
 2504 0ba0 0C3185E7 		str	r3, [r5, ip, lsl #2]	@ word, *_59
 2505              	.LVL138:
 2506              	.L126:
 2507              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2508              		.loc 1 231 34 view .LVU672
 2509 0ba4 011081E2 		add	r1, r1, #1	@ n, n,
 2510              	.LVL139:
 2511              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2512              		.loc 1 231 5 view .LVU673
 2513 0ba8 020051E1 		cmp	r1, r2	@ n, _67
 2514 0bac DBFFFFBA 		blt	.L127		@,
 2515 0bb0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2516              	.LVL140:
 2517              	.L133:
 183:armwave.c     **** 
 2518              		.loc 1 183 5 is_stmt 1 view .LVU674
 2519 0bb4 10309FE5 		ldr	r3, .L134+4	@,
 2520 0bb8 B720A0E3 		mov	r2, #183	@,
 2521 0bbc 0C109FE5 		ldr	r1, .L134+8	@,
 2522 0bc0 0C009FE5 		ldr	r0, .L134+12	@,
 2523 0bc4 FEFFFFEB 		bl	__assert_fail		@
 2524              	.LVL141:
 2525              	.L135:
 183:armwave.c     **** 
 2526              		.loc 1 183 5 is_stmt 0 view .LVU675
 2527              		.align	2
 2528              	.L134:
 2529 0bc8 00000000 		.word	g_armwave_state
 2530 0bcc 00000000 		.word	.LANCHOR0
 2531 0bd0 20000000 		.word	.LC2
 2532 0bd4 2C000000 		.word	.LC3
 2533              	.LBE34:
 2534              	.LBE33:
 2535              		.cfi_endproc
 2536              	.LFE70:
 2538              		.align	2
 2539              		.global	armwave_test_dump_buffer_to_ppm
 2540              		.syntax unified
 2541              		.arm
 2542              		.fpu vfp
 2544              	armwave_test_dump_buffer_to_ppm:
 2545              	.LVL142:
 2546              	.LFB71:
 482:armwave.c     **** }
 483:armwave.c     **** 
 484:armwave.c     **** /*
 485:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 486:armwave.c     ****  */
 487:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 488:armwave.c     **** {
 2547              		.loc 1 488 1 is_stmt 1 view -0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 0
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
 2551              		@ link register save eliminated.
 489:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2552              		.loc 1 489 5 view .LVU677
 2553 0bd8 08309FE5 		ldr	r3, .L137	@ tmp112,
 2554 0bdc 0010A0E1 		mov	r1, r0	@, fn
 2555 0be0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2556              	.LVL143:
 2557              		.loc 1 489 5 is_stmt 0 view .LVU678
 2558 0be4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2559              	.LVL144:
 2560              	.L138:
 2561              		.loc 1 489 5 view .LVU679
 2562              		.align	2
 2563              	.L137:
 2564 0be8 00000000 		.word	g_armwave_state
 2565              		.cfi_endproc
 2566              	.LFE71:
 2568              		.align	2
 2569              		.global	armwave_test_fill_gdkbuf
 2570              		.syntax unified
 2571              		.arm
 2572              		.fpu vfp
 2574              	armwave_test_fill_gdkbuf:
 2575              	.LVL145:
 2576              	.LFB72:
 490:armwave.c     **** }
 491:armwave.c     **** 
 492:armwave.c     **** /*
 493:armwave.c     ****  * Render GDK buffer with test funtionry.
 494:armwave.c     ****  */
 495:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 496:armwave.c     **** {
 2577              		.loc 1 496 1 is_stmt 1 view -0
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 0
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
 497:armwave.c     ****     //PyObject *mv;
 498:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 499:armwave.c     **** 
 500:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 501:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2581              		.loc 1 501 5 view .LVU681
 2582              	@ armwave.c:501:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2583              		.loc 1 501 11 is_stmt 0 view .LVU682
 2584 0bec 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2585              	@ armwave.c:496: {
 496:armwave.c     ****     //PyObject *mv;
 2586              		.loc 1 496 1 view .LVU683
 2587 0bf0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2588              		.cfi_def_cfa_offset 32
 2589              		.cfi_offset 4, -32
 2590              		.cfi_offset 5, -28
 2591              		.cfi_offset 6, -24
 2592              		.cfi_offset 7, -20
 2593              		.cfi_offset 8, -16
 2594              		.cfi_offset 9, -12
 2595              		.cfi_offset 10, -8
 2596              		.cfi_offset 14, -4
 2597              	@ armwave.c:501:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2598              		.loc 1 501 11 view .LVU684
 2599 0bf4 285093E5 		ldr	r5, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2600              	.LVL146:
 502:armwave.c     ****     
 503:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 504:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2601              		.loc 1 504 5 is_stmt 1 view .LVU685
 2602              	.LBB37:
 2603              	.LBI37:
 172:armwave.c     **** {
 2604              		.loc 1 172 6 view .LVU686
 2605              	.LBB38:
 174:armwave.c     ****     // uint32_t ysub;
 2606              		.loc 1 174 5 view .LVU687
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2607              		.loc 1 176 5 view .LVU688
 177:armwave.c     ****     // uint8_t row;
 2608              		.loc 1 177 5 view .LVU689
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2609              		.loc 1 179 5 view .LVU690
 180:armwave.c     ****     uint32_t offset;
 2610              		.loc 1 180 5 view .LVU691
 181:armwave.c     **** 
 2611              		.loc 1 181 5 view .LVU692
 183:armwave.c     **** 
 2612              		.loc 1 183 5 view .LVU693
 2613 0bf8 000055E3 		cmp	r5, #0	@ out_pixbuf,
 2614 0bfc 3A00000A 		beq	.L149		@,
 186:armwave.c     **** 
 2615              		.loc 1 186 5 view .LVU694
 2616              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2617              		.loc 1 186 45 is_stmt 0 view .LVU695
 2618 0c00 F8409FE5 		ldr	r4, .L150	@ tmp221,
 2619              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2620              		.loc 1 186 5 view .LVU696
 2621 0c04 0010A0E3 		mov	r1, #0	@,
 2622 0c08 0500A0E1 		mov	r0, r5	@, out_pixbuf
 2623              	.LVL147:
 2624              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2625              		.loc 1 186 59 view .LVU697
 2626 0c0c 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2627 0c10 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2628 0c14 920302E0 		mul	r2, r2, r3	@ tmp174, g_armwave_state.target_height, g_armwave_state.target_width
 2629              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2630              		.loc 1 186 5 view .LVU698
 2631 0c18 0221A0E1 		lsl	r2, r2, #2	@, tmp174,
 2632 0c1c FEFFFFEB 		bl	memset		@
 2633              	.LVL148:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2634              		.loc 1 188 5 is_stmt 1 view .LVU699
 2635              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2636              		.loc 1 188 10 is_stmt 0 view .LVU700
 2637 0c20 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2638 0c24 402094E5 		ldr	r2, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2639 0c28 920302E0 		mul	r2, r2, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2640              	.LVL149:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2641              		.loc 1 231 5 is_stmt 1 view .LVU701
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2642              		.loc 1 231 5 is_stmt 0 view .LVU702
 2643 0c2c 010052E3 		cmp	r2, #1	@ npix,
 2644              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2645              		.loc 1 231 26 view .LVU703
 2646 0c30 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp187, npix, npix,
 2647              	.LVL150:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2648              		.loc 1 231 26 view .LVU704
 2649 0c34 C220A0E1 		asr	r2, r2, #1	@ _69, tmp187,
 2650              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2651              		.loc 1 231 5 view .LVU705
 2652 0c38 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2653 0c3c 040094E5 		ldr	r0, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 2654              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2655              		.loc 1 236 44 view .LVU706
 2656 0c40 FC76D4E1 		ldrsh	r7, [r4, #108]	@ _21, g_armwave_state.ch1_color.r
 2657              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2658              		.loc 1 237 44 view .LVU707
 2659 0c44 FE66D4E1 		ldrsh	r6, [r4, #110]	@ _26, g_armwave_state.ch1_color.g
 2660              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2661              		.loc 1 238 44 view .LVU708
 2662 0c48 F0E7D4E1 		ldrsh	lr, [r4, #112]	@ _30, g_armwave_state.ch1_color.b
 2663              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2664              		.loc 1 249 49 view .LVU709
 2665 0c4c 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _50, g_armwave_state.vscale_frac
 2666 0c50 020040E2 		sub	r0, r0, #2	@ ivtmp.91, g_armwave_state.ch1_buffer,
 2667              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2668              		.loc 1 231 11 view .LVU710
 2669 0c54 0010A0E3 		mov	r1, #0	@ n,
 2670              	.LVL151:
 2671              	.L143:
 232:armwave.c     ****         value = wave_word & 0xffff;
 2672              		.loc 1 232 9 is_stmt 1 view .LVU711
 233:armwave.c     **** 
 2673              		.loc 1 233 9 view .LVU712
 2674              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 2675              		.loc 1 233 15 is_stmt 0 view .LVU713
 2676 0c58 B280F0E1 		ldrh	r8, [r0, #2]!	@ MEM[base: _102, offset: 0B], MEM[base: _102, offset: 0B]
 2677              	.LVL152:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2678              		.loc 1 235 9 is_stmt 1 view .LVU714
 2679              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2680              		.loc 1 235 11 is_stmt 0 view .LVU715
 2681 0c5c FF8018E2 		ands	r8, r8, #255	@ value, MEM[base: _102, offset: 0B],
 2682              	.LVL153:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2683              		.loc 1 235 11 view .LVU716
 2684 0c60 1D00000A 		beq	.L142		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2685              		.loc 1 236 13 is_stmt 1 view .LVU717
 2686              	.LVL154:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2687              		.loc 1 237 13 view .LVU718
 238:armwave.c     **** 
 2688              		.loc 1 238 13 view .LVU719
 240:armwave.c     ****             g = MIN(gg, 255);
 2689              		.loc 1 240 13 view .LVU720
 241:armwave.c     ****             b = MIN(bb, 255);
 2690              		.loc 1 241 13 view .LVU721
 242:armwave.c     **** 
 2691              		.loc 1 242 13 view .LVU722
 245:armwave.c     **** 
 2692              		.loc 1 245 13 view .LVU723
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2693              		.loc 1 248 13 view .LVU724
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2694              		.loc 1 249 13 view .LVU725
 250:armwave.c     ****             xx = (nsub >> 8) / 2;
 2695              		.loc 1 250 13 view .LVU726
 251:armwave.c     **** 
 2696              		.loc 1 251 13 view .LVU727
 254:armwave.c     ****             {
 2697              		.loc 1 254 13 view .LVU728
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2698              		.loc 1 256 17 view .LVU729
 257:armwave.c     ****             }
 2699              		.loc 1 257 17 view .LVU730
 2700              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2701              		.loc 1 249 24 is_stmt 0 view .LVU731
 2702 0c64 71C0EFE6 		uxtb	ip, r1	@ n, n
 2703              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2704              		.loc 1 238 47 view .LVU732
 2705 0c68 880E63E1 		smulbb	r3, r8, lr	@ tmp207, value, _30
 2706              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2707              		.loc 1 249 32 view .LVU733
 2708 0c6c 90CA07EE 		vmov	s15, ip	@ int	@ n, n
 2709              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2710              		.loc 1 237 47 view .LVU734
 2711 0c70 880669E1 		smulbb	r9, r8, r6	@ tmp211, value, _26
 2712              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2713              		.loc 1 238 16 view .LVU735
 2714 0c74 4334A0E1 		asr	r3, r3, #8	@ bb, tmp207,
 2715              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2716              		.loc 1 242 17 view .LVU736
 2717 0c78 FF0053E3 		cmp	r3, #255	@ bb,
 2718              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2719              		.loc 1 249 32 view .LVU737
 2720 0c7c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, n
 2721              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2722              		.loc 1 237 16 view .LVU738
 2723 0c80 4994A0E1 		asr	r9, r9, #8	@ gg, tmp211,
 2724              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2725              		.loc 1 236 47 view .LVU739
 2726 0c84 880768E1 		smulbb	r8, r8, r7	@ tmp217, value, _21
 2727              	.LVL155:
 2728              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2729              		.loc 1 242 17 view .LVU740
 2730 0c88 FF30A0A3 		movge	r3, #255	@ bb,
 2731              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 2732              		.loc 1 241 17 view .LVU741
 2733 0c8c FF0059E3 		cmp	r9, #255	@ gg,
 2734 0c90 FF90A0A3 		movge	r9, #255	@ gg,
 2735              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2736              		.loc 1 236 16 view .LVU742
 2737 0c94 4884A0E1 		asr	r8, r8, #8	@ rr, tmp217,
 2738              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2739              		.loc 1 240 17 view .LVU743
 2740 0c98 FF0058E3 		cmp	r8, #255	@ rr,
 2741              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2742              		.loc 1 249 32 view .LVU744
 2743 0c9c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp199, tmp198, _50
 2744              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2745              		.loc 1 245 48 view .LVU745
 2746 0ca0 0994A0E1 		lsl	r9, r9, #8	@ tmp212, gg,
 2747              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2748              		.loc 1 245 36 view .LVU746
 2749 0ca4 0338A0E1 		lsl	r3, r3, #16	@ tmp208, bb,
 2750              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2751              		.loc 1 240 17 view .LVU747
 2752 0ca8 FF80A0A3 		movge	r8, #255	@ rr,
 2753              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2754              		.loc 1 245 48 view .LVU748
 2755 0cac 7990FFE6 		uxth	r9, r9	@ tmp213, tmp212
 2756              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2757              		.loc 1 245 36 view .LVU749
 2758 0cb0 FF3803E2 		and	r3, r3, #16711680	@ tmp209, tmp208,
 2759              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2760              		.loc 1 245 43 view .LVU750
 2761 0cb4 093083E1 		orr	r3, r3, r9	@ tmp215, tmp209, tmp213
 2762              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2763              		.loc 1 245 54 view .LVU751
 2764 0cb8 7880EFE6 		uxtb	r8, r8	@ rr, rr
 2765              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2766              		.loc 1 249 16 view .LVU752
 2767 0cbc E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp199
 2768              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2769              		.loc 1 245 54 view .LVU753
 2770 0cc0 083083E1 		orr	r3, r3, r8	@ tmp219, tmp215, rr
 2771              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2772              		.loc 1 256 35 view .LVU754
 2773 0cc4 58C094E5 		ldr	ip, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2774              	@ armwave.c:251:             xx = (nsub >> 8) / 2;
 251:armwave.c     **** 
 2775              		.loc 1 251 30 view .LVU755
 2776 0cc8 C194A0E1 		asr	r9, r1, #9	@ xx, n,
 2777              	.LVL156:
 2778              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2779              		.loc 1 245 18 view .LVU756
 2780 0ccc FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp219,
 2781              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2782              		.loc 1 257 35 view .LVU757
 2783 0cd0 908A17EE 		vmov	r8, s15	@ int	@ yy, yy
 2784 0cd4 9C982CE0 		mla	ip, ip, r8, r9	@ tmp205, g_armwave_state.target_width, yy, xx
 2785              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2786              		.loc 1 257 45 view .LVU758
 2787 0cd8 0C3185E7 		str	r3, [r5, ip, lsl #2]	@ word, *_61
 2788              	.LVL157:
 2789              	.L142:
 2790              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2791              		.loc 1 231 34 view .LVU759
 2792 0cdc 011081E2 		add	r1, r1, #1	@ n, n,
 2793              	.LVL158:
 2794              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2795              		.loc 1 231 5 view .LVU760
 2796 0ce0 020051E1 		cmp	r1, r2	@ n, _69
 2797 0ce4 DBFFFFBA 		blt	.L143		@,
 2798 0ce8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2799              	.LVL159:
 2800              	.L149:
 183:armwave.c     **** 
 2801              		.loc 1 183 5 is_stmt 1 view .LVU761
 2802 0cec 10309FE5 		ldr	r3, .L150+4	@,
 2803 0cf0 B720A0E3 		mov	r2, #183	@,
 2804 0cf4 0C109FE5 		ldr	r1, .L150+8	@,
 2805 0cf8 0C009FE5 		ldr	r0, .L150+12	@,
 2806              	.LVL160:
 183:armwave.c     **** 
 2807              		.loc 1 183 5 is_stmt 0 view .LVU762
 2808 0cfc FEFFFFEB 		bl	__assert_fail		@
 2809              	.LVL161:
 2810              	.L151:
 183:armwave.c     **** 
 2811              		.loc 1 183 5 view .LVU763
 2812              		.align	2
 2813              	.L150:
 2814 0d00 00000000 		.word	g_armwave_state
 2815 0d04 00000000 		.word	.LANCHOR0
 2816 0d08 20000000 		.word	.LC2
 2817 0d0c 2C000000 		.word	.LC3
 2818              	.LBE38:
 2819              	.LBE37:
 2820              		.cfi_endproc
 2821              	.LFE72:
 2823              		.align	2
 2824              		.global	armwave_test_buffer_alloc
 2825              		.syntax unified
 2826              		.arm
 2827              		.fpu vfp
 2829              	armwave_test_buffer_alloc:
 2830              	.LVL162:
 2831              	.LFB73:
 505:armwave.c     **** }
 506:armwave.c     **** 
 507:armwave.c     **** /*
 508:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 509:armwave.c     ****  */
 510:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 511:armwave.c     **** {
 2832              		.loc 1 511 1 is_stmt 1 view -0
 2833              		.cfi_startproc
 2834              		@ args = 0, pretend = 0, frame = 0
 2835              		@ frame_needed = 0, uses_anonymous_args = 0
 512:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2836              		.loc 1 512 5 view .LVU765
 2837              	@ armwave.c:511: {
 511:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2838              		.loc 1 511 1 is_stmt 0 view .LVU766
 2839 0d10 70402DE9 		push	{r4, r5, r6, lr}	@
 2840              		.cfi_def_cfa_offset 16
 2841              		.cfi_offset 4, -16
 2842              		.cfi_offset 5, -12
 2843              		.cfi_offset 6, -8
 2844              		.cfi_offset 14, -4
 2845              	@ armwave.c:511: {
 511:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2846              		.loc 1 511 1 view .LVU767
 2847 0d14 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2848              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 2849              		.loc 1 512 23 view .LVU768
 2850 0d18 44409FE5 		ldr	r4, .L159	@ tmp128,
 2851 0d1c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2852              	.LVL163:
 2853              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 2854              		.loc 1 512 7 view .LVU769
 2855 0d20 000050E3 		cmp	r0, #0	@ _1,
 2856 0d24 0000000A 		beq	.L153		@,
 513:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2857              		.loc 1 513 9 is_stmt 1 view .LVU770
 2858 0d28 FEFFFFEB 		bl	free		@
 2859              	.LVL164:
 2860              	.L153:
 514:armwave.c     ****     }
 515:armwave.c     **** 
 516:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 517:armwave.c     **** 
 518:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2861              		.loc 1 518 5 view .LVU771
 2862              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2863              		.loc 1 518 75 is_stmt 0 view .LVU772
 2864 0d2c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2865 0d30 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2866              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2867              		.loc 1 518 40 view .LVU773
 2868 0d34 0610A0E1 		mov	r1, r6	@, nsets
 2869              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2870              		.loc 1 518 75 view .LVU774
 2871 0d38 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2872              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2873              		.loc 1 518 40 view .LVU775
 2874 0d3c 0500A0E1 		mov	r0, r5	@, _4
 2875 0d40 FEFFFFEB 		bl	calloc		@
 2876              	.LVL165:
 2877              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 519:armwave.c     **** 
 520:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2878              		.loc 1 520 7 view .LVU776
 2879 0d44 000050E3 		cmp	r0, #0	@ tmp124,
 2880              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 2881              		.loc 1 518 38 view .LVU777
 2882 0d48 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2883              		.loc 1 520 5 is_stmt 1 view .LVU778
 2884              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 2885              		.loc 1 520 7 is_stmt 0 view .LVU779
 2886 0d4c 7080BD18 		popne	{r4, r5, r6, pc}	@
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2887              		.loc 1 521 9 is_stmt 1 view .LVU780
 2888 0d50 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2889 0d54 0620A0E1 		mov	r2, r6	@, nsets
 2890 0d58 08009FE5 		ldr	r0, .L159+4	@,
 2891              	@ armwave.c:525: }
 522:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 523:armwave.c     ****         return;
 524:armwave.c     ****     }
 525:armwave.c     **** }
 2892              		.loc 1 525 1 is_stmt 0 view .LVU781
 2893 0d5c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2894              		.cfi_restore 14
 2895              		.cfi_restore 6
 2896              		.cfi_restore 5
 2897              		.cfi_restore 4
 2898              		.cfi_def_cfa_offset 0
 2899              	.LVL166:
 2900              	@ armwave.c:521:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2901              		.loc 1 521 9 view .LVU782
 2902 0d60 FEFFFFEA 		b	printf		@
 2903              	.LVL167:
 2904              	.L160:
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2905              		.loc 1 521 9 view .LVU783
 2906              		.align	2
 2907              	.L159:
 2908 0d64 00000000 		.word	g_armwave_state
 2909 0d68 E8010000 		.word	.LC18
 2910              		.cfi_endproc
 2911              	.LFE73:
 2913              		.align	2
 2914              		.global	armwave_fill_pixbuf_into_pybuffer
 2915              		.syntax unified
 2916              		.arm
 2917              		.fpu vfp
 2919              	armwave_fill_pixbuf_into_pybuffer:
 2920              	.LVL168:
 2921              	.LFB74:
 526:armwave.c     **** 
 527:armwave.c     **** /*
 528:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 529:armwave.c     ****  */
 530:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 531:armwave.c     **** {
 2922              		.loc 1 531 1 is_stmt 1 view -0
 2923              		.cfi_startproc
 2924              		@ args = 0, pretend = 0, frame = 48
 2925              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     Py_buffer buffer;
 2926              		.loc 1 532 5 view .LVU785
 533:armwave.c     ****     int ret;
 2927              		.loc 1 533 5 view .LVU786
 534:armwave.c     **** 
 535:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 536:armwave.c     **** 
 537:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2928              		.loc 1 537 5 view .LVU787
 2929              	@ armwave.c:531: {
 531:armwave.c     ****     Py_buffer buffer;
 2930              		.loc 1 531 1 is_stmt 0 view .LVU788
 2931 0d6c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2932              		.cfi_def_cfa_offset 4
 2933              		.cfi_offset 14, -4
 2934 0d70 34D04DE2 		sub	sp, sp, #52	@,,
 2935              		.cfi_def_cfa_offset 56
 2936              	@ armwave.c:537:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2937              		.loc 1 537 11 view .LVU789
 2938 0d74 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2939 0d78 0120A0E3 		mov	r2, #1	@,
 2940 0d7c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2941              	.LVL169:
 538:armwave.c     **** 
 539:armwave.c     ****     if(ret != 0) {
 2942              		.loc 1 539 5 is_stmt 1 view .LVU790
 2943              	@ armwave.c:539:     if(ret != 0) {
 2944              		.loc 1 539 7 is_stmt 0 view .LVU791
 2945 0d80 000050E3 		cmp	r0, #0	@,
 2946 0d84 0A00001A 		bne	.L165		@,
 540:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 541:armwave.c     ****         Py_RETURN_FALSE;
 542:armwave.c     ****     }
 543:armwave.c     **** 
 544:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 545:armwave.c     **** 
 546:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2947              		.loc 1 546 5 is_stmt 1 view .LVU792
 2948 0d88 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2949              	.LVL170:
 2950              		.loc 1 546 5 is_stmt 0 view .LVU793
 2951 0d8c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2952              	.LVL171:
 547:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 548:armwave.c     **** 
 549:armwave.c     ****     PyBuffer_Release(&buffer);
 2953              		.loc 1 549 5 is_stmt 1 view .LVU794
 2954 0d90 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2955 0d94 FEFFFFEB 		bl	PyBuffer_Release		@
 2956              	.LVL172:
 550:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 551:armwave.c     **** 
 552:armwave.c     ****     Py_RETURN_TRUE;
 2957              		.loc 1 552 5 view .LVU795
 2958              	.LBB39:
 2959              	.LBI39:
 2960              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2961              		.loc 2 456 20 view .LVU796
 2962              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2963              		.loc 2 458 21 view .LVU797
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2964              		.loc 2 459 5 view .LVU798
 2965              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2966              		.loc 2 459 18 is_stmt 0 view .LVU799
 2967 0d98 38309FE5 		ldr	r3, .L166	@ tmp126,
 2968              	.LBE40:
 2969              	.LBE39:
 2970              	@ armwave.c:552:     Py_RETURN_TRUE;
 2971              		.loc 1 552 5 view .LVU800
 2972 0d9c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2973              	.LBB42:
 2974              	.LBB41:
 2975              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2976              		.loc 2 459 18 view .LVU801
 2977 0da0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2978 0da4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2979 0da8 002083E5 		str	r2, [r3]	@ tmp128,
 2980              	.LBE41:
 2981              	.LBE42:
 2982              	@ armwave.c:553: }
 553:armwave.c     **** }
 2983              		.loc 1 553 1 view .LVU802
 2984 0dac 34D08DE2 		add	sp, sp, #52	@,,
 2985              		.cfi_remember_state
 2986              		.cfi_def_cfa_offset 4
 2987              		@ sp needed	@
 2988 0db0 04F09DE4 		ldr	pc, [sp], #4	@
 2989              	.LVL173:
 2990              	.L165:
 2991              		.cfi_restore_state
 540:armwave.c     ****         Py_RETURN_FALSE;
 2992              		.loc 1 540 9 is_stmt 1 view .LVU803
 2993 0db4 20009FE5 		ldr	r0, .L166+4	@,
 2994              	.LVL174:
 540:armwave.c     ****         Py_RETURN_FALSE;
 2995              		.loc 1 540 9 is_stmt 0 view .LVU804
 2996 0db8 FEFFFFEB 		bl	puts		@
 2997              	.LVL175:
 541:armwave.c     ****     }
 2998              		.loc 1 541 9 is_stmt 1 view .LVU805
 2999              	.LBB43:
 3000              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 3001              		.loc 2 456 20 view .LVU806
 3002              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3003              		.loc 2 458 21 view .LVU807
 3004              		.loc 2 459 5 view .LVU808
 3005              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3006              		.loc 2 459 18 is_stmt 0 view .LVU809
 3007 0dbc 1C309FE5 		ldr	r3, .L166+8	@ tmp120,
 3008              	.LBE44:
 3009              	.LBE43:
 3010              	@ armwave.c:541:         Py_RETURN_FALSE;
 541:armwave.c     ****     }
 3011              		.loc 1 541 9 view .LVU810
 3012 0dc0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3013              	.LBB46:
 3014              	.LBB45:
 3015              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3016              		.loc 2 459 18 view .LVU811
 3017 0dc4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3018 0dc8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3019 0dcc 002083E5 		str	r2, [r3]	@ tmp122,
 3020              	.LBE45:
 3021              	.LBE46:
 3022              	@ armwave.c:553: }
 3023              		.loc 1 553 1 view .LVU812
 3024 0dd0 34D08DE2 		add	sp, sp, #52	@,,
 3025              		.cfi_def_cfa_offset 4
 3026              		@ sp needed	@
 3027 0dd4 04F09DE4 		ldr	pc, [sp], #4	@
 3028              	.L167:
 3029              		.align	2
 3030              	.L166:
 3031 0dd8 00000000 		.word	_Py_TrueStruct
 3032 0ddc 3C020000 		.word	.LC19
 3033 0de0 00000000 		.word	_Py_FalseStruct
 3034              		.cfi_endproc
 3035              	.LFE74:
 3037              		.align	2
 3038              		.global	armwave_test_create_am_sine
 3039              		.syntax unified
 3040              		.arm
 3041              		.fpu vfp
 3043              	armwave_test_create_am_sine:
 3044              	.LVL176:
 3045              	.LFB75:
 554:armwave.c     **** 
 555:armwave.c     **** /*
 556:armwave.c     ****  * Make a test AM waveform for render tests.
 557:armwave.c     ****  *
 558:armwave.c     ****  * @param   mod                     modulation depth
 559:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 560:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 561:armwave.c     ****  */
 562:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 563:armwave.c     **** {
 3046              		.loc 1 563 1 is_stmt 1 view -0
 3047              		.cfi_startproc
 3048              		@ args = 0, pretend = 0, frame = 8
 3049              		@ frame_needed = 0, uses_anonymous_args = 0
 564:armwave.c     ****     float v, noise, xnoise, mod_val;
 3050              		.loc 1 564 5 view .LVU814
 565:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3051              		.loc 1 565 5 view .LVU815
 3052              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3053              		.loc 1 563 1 is_stmt 0 view .LVU816
 3054 0de4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3055              		.cfi_def_cfa_offset 32
 3056              		.cfi_offset 4, -32
 3057              		.cfi_offset 5, -28
 3058              		.cfi_offset 6, -24
 3059              		.cfi_offset 7, -20
 3060              		.cfi_offset 8, -16
 3061              		.cfi_offset 9, -12
 3062              		.cfi_offset 10, -8
 3063              		.cfi_offset 14, -4
 3064              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3065              		.loc 1 565 38 view .LVU817
 3066 0de8 7A7A9FED 		vldr.32	s14, .L199	@ tmp180,
 3067              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3068              		.loc 1 565 55 view .LVU818
 3069 0dec 00529FE5 		ldr	r5, .L199+28	@ tmp250,
 3070              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3071              		.loc 1 563 1 view .LVU819
 3072 0df0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3073              		.cfi_def_cfa_offset 80
 3074              		.cfi_offset 80, -80
 3075              		.cfi_offset 81, -76
 3076              		.cfi_offset 82, -72
 3077              		.cfi_offset 83, -68
 3078              		.cfi_offset 84, -64
 3079              		.cfi_offset 85, -60
 3080              		.cfi_offset 86, -56
 3081              		.cfi_offset 87, -52
 3082              		.cfi_offset 88, -48
 3083              		.cfi_offset 89, -44
 3084              		.cfi_offset 90, -40
 3085              		.cfi_offset 91, -36
 3086 0df4 0090A0E1 		mov	r9, r0	@ sets, sets
 3087              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3088              		.loc 1 565 38 view .LVU820
 3089 0df8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3090              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 566:armwave.c     ****     int s, set_offset = 0;
 567:armwave.c     ****     int w, x;
 568:armwave.c     **** 
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3091              		.loc 1 569 70 view .LVU821
 3092 0dfc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3093 0e00 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3094              	.LBB49:
 3095              	.LBB50:
 3096              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3097              		.loc 1 512 23 view .LVU822
 3098 0e04 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3099              	.LVL177:
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3100              		.loc 1 512 23 view .LVU823
 3101              	.LBE50:
 3102              	.LBE49:
 3103              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3104              		.loc 1 565 38 view .LVU824
 3105 0e08 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3106              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3107              		.loc 1 569 70 view .LVU825
 3108 0e0c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3109              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3110              		.loc 1 563 1 view .LVU826
 3111 0e10 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3112              	.LBB54:
 3113              	.LBB51:
 3114              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3115              		.loc 1 512 7 view .LVU827
 3116 0e14 000050E3 		cmp	r0, #0	@ _82,
 3117              	.LBE51:
 3118              	.LBE54:
 3119              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3120              		.loc 1 563 1 view .LVU828
 3121 0e18 08D04DE2 		sub	sp, sp, #8	@,,
 3122              		.cfi_def_cfa_offset 88
 3123              	@ armwave.c:570:     g_armwave_state.test_wave_buffer_nsets = sets;
 570:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3124              		.loc 1 570 44 view .LVU829
 3125 0e1c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3126              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3127              		.loc 1 569 45 view .LVU830
 3128 0e20 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3129              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3130              		.loc 1 565 38 view .LVU831
 3131 0e24 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3132              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3133              		.loc 1 565 11 view .LVU832
 3134 0e28 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3135              	.LVL178:
 566:armwave.c     ****     int w, x;
 3136              		.loc 1 566 5 is_stmt 1 view .LVU833
 567:armwave.c     **** 
 3137              		.loc 1 567 5 view .LVU834
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3138              		.loc 1 569 5 view .LVU835
 3139              		.loc 1 570 5 view .LVU836
 571:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3140              		.loc 1 571 5 view .LVU837
 3141              	.LBB55:
 3142              	.LBI49:
 510:armwave.c     **** {
 3143              		.loc 1 510 6 view .LVU838
 3144              	.LBB52:
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3145              		.loc 1 512 5 view .LVU839
 3146              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3147              		.loc 1 512 7 is_stmt 0 view .LVU840
 3148 0e2c 0000000A 		beq	.L169		@,
 513:armwave.c     ****     }
 3149              		.loc 1 513 9 is_stmt 1 view .LVU841
 3150 0e30 FEFFFFEB 		bl	free		@
 3151              	.LVL179:
 3152              	.L169:
 518:armwave.c     **** 
 3153              		.loc 1 518 5 view .LVU842
 3154              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3155              		.loc 1 518 75 is_stmt 0 view .LVU843
 3156 0e34 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3157 0e38 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3158              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3159              		.loc 1 518 40 view .LVU844
 3160 0e3c 0910A0E1 		mov	r1, r9	@, sets
 3161              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3162              		.loc 1 518 75 view .LVU845
 3163 0e40 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3164              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3165              		.loc 1 518 40 view .LVU846
 3166 0e44 0400A0E1 		mov	r0, r4	@, _85
 3167 0e48 FEFFFFEB 		bl	calloc		@
 3168              	.LVL180:
 3169              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3170              		.loc 1 520 7 view .LVU847
 3171 0e4c 000050E3 		cmp	r0, #0	@ tmp191,
 3172              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3173              		.loc 1 518 38 view .LVU848
 3174 0e50 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3175              		.loc 1 520 5 is_stmt 1 view .LVU849
 3176              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3177              		.loc 1 520 7 is_stmt 0 view .LVU850
 3178 0e54 5A00000A 		beq	.L198		@,
 3179              	.L170:
 3180              	.LVL181:
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3181              		.loc 1 520 7 view .LVU851
 3182              	.LBE52:
 3183              	.LBE55:
 3184              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 572:armwave.c     **** 
 573:armwave.c     ****     for(s = 0; s < sets; s++) {
 3185              		.loc 1 573 5 discriminator 1 view .LVU852
 3186 0e58 000059E3 		cmp	r9, #0	@ sets,
 3187 0e5c 550000DA 		ble	.L168		@,
 3188              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 575:armwave.c     ****     
 576:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 577:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 578:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 579:armwave.c     **** 
 580:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 581:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 582:armwave.c     ****                 noise *= noise;
 583:armwave.c     ****                 noise *= noise;
 584:armwave.c     ****                 noise *= noise;
 585:armwave.c     **** 
 586:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 587:armwave.c     ****                     noise = -noise;
 588:armwave.c     **** 
 589:armwave.c     ****                 noise += 1.0f;
 590:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 591:armwave.c     **** 
 592:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3189              		.loc 1 592 45 view .LVU853
 3190 0e60 5C8A9FED 		vldr.32	s16, .L199	@ tmp258,
 3191              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 593:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 594:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 595:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3192              		.loc 1 595 104 view .LVU854
 3193 0e64 5CCA9FED 		vldr.32	s24, .L199+4	@ tmp259,
 3194              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3195              		.loc 1 573 5 view .LVU855
 3196 0e68 0070A0E3 		mov	r7, #0	@ set_offset,
 3197              	@ armwave.c:574:         printf("Calculating test set %d\n", s);
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 3198              		.loc 1 574 9 view .LVU856
 3199 0e6c 84A19FE5 		ldr	r10, .L199+32	@ tmp257,
 3200              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3201              		.loc 1 573 5 view .LVU857
 3202 0e70 0780A0E1 		mov	r8, r7	@ s, set_offset
 3203              	.LVL182:
 3204              	.L171:
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 3205              		.loc 1 574 9 is_stmt 1 view .LVU858
 3206 0e74 0810A0E1 		mov	r1, r8	@, s
 3207 0e78 0A00A0E1 		mov	r0, r10	@, tmp257
 3208 0e7c FEFFFFEB 		bl	printf		@
 3209              	.LVL183:
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3210              		.loc 1 576 9 view .LVU859
 3211              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3212              		.loc 1 576 39 is_stmt 0 view .LVU860
 3213 0e80 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3214              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3215              		.loc 1 576 9 view .LVU861
 3216 0e84 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3217 0e88 450000DA 		ble	.L172		@,
 3218              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3219              		.loc 1 578 21 view .LVU862
 3220 0e8c 53CADFED 		vldr.32	s25, .L199+8	@ tmp200,
 3221              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3222              		.loc 1 592 33 view .LVU863
 3223 0e90 53BA9FED 		vldr.32	s22, .L199+12	@ tmp253,
 3224              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3225              		.loc 1 590 24 view .LVU864
 3226 0e94 53AADFED 		vldr.32	s21, .L199+16	@ tmp254,
 3227 0e98 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3228              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3229              		.loc 1 576 15 view .LVU865
 3230 0e9c 0060A0E3 		mov	r6, #0	@ w,
 3231              	.LVL184:
 3232              	.L179:
 578:armwave.c     **** 
 3233              		.loc 1 578 13 is_stmt 1 view .LVU866
 3234              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3235              		.loc 1 578 21 is_stmt 0 view .LVU867
 3236 0ea0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3237 0ea4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3238              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3239              		.loc 1 580 13 view .LVU868
 3240 0ea8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3241              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3242              		.loc 1 578 21 view .LVU869
 3243 0eac E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3244 0eb0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3245              	.LVL185:
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3246              		.loc 1 580 13 is_stmt 1 view .LVU870
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3247              		.loc 1 580 13 is_stmt 0 view .LVU871
 3248 0eb4 370000DA 		ble	.L173		@,
 3249 0eb8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3250              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3251              		.loc 1 595 113 view .LVU872
 3252 0ebc 4AAA9FED 		vldr.32	s20, .L199+20	@ tmp229,
 3253 0ec0 4A8ADFED 		vldr.32	s17, .L199+24	@ tmp230,
 3254              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3255              		.loc 1 580 19 view .LVU873
 3256 0ec4 0040A0E3 		mov	r4, #0	@ x,
 3257              	.LVL186:
 3258              	.L178:
 581:armwave.c     ****                 noise *= noise;
 3259              		.loc 1 581 17 is_stmt 1 view .LVU874
 3260              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3261              		.loc 1 581 28 is_stmt 0 view .LVU875
 3262 0ec8 FEFFFFEB 		bl	rand		@
 3263              	.LVL187:
 3264              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3265              		.loc 1 581 35 view .LVU876
 3266 0ecc 7000FFE6 		uxth	r0, r0	@ tmp201,
 3267              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3268              		.loc 1 581 45 view .LVU877
 3269 0ed0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3270 0ed4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3271              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3272              		.loc 1 581 24 view .LVU878
 3273 0ed8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3274              	.LVL188:
 582:armwave.c     ****                 noise *= noise;
 3275              		.loc 1 582 17 is_stmt 1 view .LVU879
 3276              	@ armwave.c:582:                 noise *= noise;
 582:armwave.c     ****                 noise *= noise;
 3277              		.loc 1 582 23 is_stmt 0 view .LVU880
 3278 0edc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3279              	.LVL189:
 583:armwave.c     ****                 noise *= noise;
 3280              		.loc 1 583 17 is_stmt 1 view .LVU881
 3281              	@ armwave.c:583:                 noise *= noise;
 583:armwave.c     ****                 noise *= noise;
 3282              		.loc 1 583 23 is_stmt 0 view .LVU882
 3283 0ee0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3284              	.LVL190:
 584:armwave.c     **** 
 3285              		.loc 1 584 17 is_stmt 1 view .LVU883
 3286              	@ armwave.c:584:                 noise *= noise;
 584:armwave.c     **** 
 3287              		.loc 1 584 23 is_stmt 0 view .LVU884
 3288 0ee4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3289              	.LVL191:
 586:armwave.c     ****                     noise = -noise;
 3290              		.loc 1 586 17 is_stmt 1 view .LVU885
 3291              	@ armwave.c:586:                 if((rand() & 0xffff) > 0x7fff)
 586:armwave.c     ****                     noise = -noise;
 3292              		.loc 1 586 21 is_stmt 0 view .LVU886
 3293 0ee8 FEFFFFEB 		bl	rand		@
 3294              	.LVL192:
 587:armwave.c     **** 
 3295              		.loc 1 587 21 is_stmt 1 view .LVU887
 3296              	@ armwave.c:586:                 if((rand() & 0xffff) > 0x7fff)
 586:armwave.c     ****                     noise = -noise;
 3297              		.loc 1 586 19 is_stmt 0 view .LVU888
 3298 0eec 020910E3 		tst	r0, #32768	@,
 3299              	@ armwave.c:587:                     noise = -noise;
 587:armwave.c     **** 
 3300              		.loc 1 587 27 view .LVU889
 3301 0ef0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3302              	.LVL193:
 589:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3303              		.loc 1 589 17 is_stmt 1 view .LVU890
 590:armwave.c     **** 
 3304              		.loc 1 590 17 view .LVU891
 3305              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3306              		.loc 1 590 27 is_stmt 0 view .LVU892
 3307 0ef4 FEFFFFEB 		bl	rand		@
 3308              	.LVL194:
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3309              		.loc 1 592 17 is_stmt 1 view .LVU893
 3310              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3311              		.loc 1 592 45 is_stmt 0 view .LVU894
 3312 0ef8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3313              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3314              		.loc 1 592 33 view .LVU895
 3315 0efc 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3316              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3317              		.loc 1 592 45 view .LVU896
 3318 0f00 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3319              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3320              		.loc 1 592 33 view .LVU897
 3321 0f04 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3322              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3323              		.loc 1 592 45 view .LVU898
 3324 0f08 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3325              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3326              		.loc 1 592 33 view .LVU899
 3327 0f0c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3328              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3329              		.loc 1 590 34 view .LVU900
 3330 0f10 7000FFE6 		uxth	r0, r0	@ tmp214,
 3331              	.LVL195:
 3332              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3333              		.loc 1 590 44 view .LVU901
 3334 0f14 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3335 0f18 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3336              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3337              		.loc 1 590 24 view .LVU902
 3338 0f1c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3339              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3340              		.loc 1 592 77 view .LVU903
 3341 0f20 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3342              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3343              		.loc 1 592 22 view .LVU904
 3344 0f24 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3345 0f28 FEFFFFEB 		bl	sin		@
 3346              	.LVL196:
 3347              		.loc 1 595 17 is_stmt 1 view .LVU905
 3348              	@ armwave.c:589:                 noise += 1.0f;
 589:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3349              		.loc 1 589 23 is_stmt 0 view .LVU906
 3350 0f2c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3351              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3352              		.loc 1 595 104 view .LVU907
 3353 0f30 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3354              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3355              		.loc 1 592 98 view .LVU908
 3356 0f34 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3357              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3358              		.loc 1 592 87 view .LVU909
 3359 0f38 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3360              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3361              		.loc 1 592 98 view .LVU910
 3362 0f3c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3363              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3364              		.loc 1 592 19 view .LVU911
 3365 0f40 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3366              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3367              		.loc 1 595 113 view .LVU912
 3368 0f44 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3369 0f48 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3370 0f4c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3371 0f50 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3372 0f54 050000DA 		ble	.L175		@,
 3373              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3374              		.loc 1 595 104 discriminator 1 view .LVU913
 3375 0f58 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3376 0f5c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3377 0f60 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3378 0f64 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3379 0f68 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3380 0f6c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3381              	.L175:
 3382              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3383              		.loc 1 595 57 discriminator 12 view .LVU914
 3384 0f70 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3385              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3386              		.loc 1 595 102 discriminator 12 view .LVU915
 3387 0f74 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3388 0f78 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3389 0f7c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3390              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3391              		.loc 1 580 58 discriminator 12 view .LVU916
 3392 0f80 014084E2 		add	r4, r4, #1	@ x, x,
 3393              	.LVL197:
 3394              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3395              		.loc 1 595 102 discriminator 12 view .LVU917
 3396 0f84 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3397              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3398              		.loc 1 580 43 discriminator 12 view .LVU918
 3399 0f88 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3400              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3401              		.loc 1 580 13 discriminator 12 view .LVU919
 3402 0f8c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3403 0f90 CCFFFFCA 		bgt	.L178		@,
 3404 0f94 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3405              	.LVL198:
 3406              	.L173:
 3407              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3408              		.loc 1 576 48 discriminator 2 view .LVU920
 3409 0f98 016086E2 		add	r6, r6, #1	@ w, w,
 3410              	.LVL199:
 3411              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3412              		.loc 1 576 9 discriminator 2 view .LVU921
 3413 0f9c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3414 0fa0 BEFFFFBA 		blt	.L179		@,
 3415              	.LVL200:
 3416              	.L172:
 596:armwave.c     ****             }
 597:armwave.c     ****         }
 598:armwave.c     **** 
 599:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3417              		.loc 1 599 9 is_stmt 1 discriminator 2 view .LVU922
 3418              	@ armwave.c:599:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3419              		.loc 1 599 46 is_stmt 0 discriminator 2 view .LVU923
 3420 0fa4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3421              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3422              		.loc 1 573 27 discriminator 2 view .LVU924
 3423 0fa8 018088E2 		add	r8, r8, #1	@ s, s,
 3424              	.LVL201:
 3425              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3426              		.loc 1 573 5 discriminator 2 view .LVU925
 3427 0fac 080059E1 		cmp	r9, r8	@ sets, s
 3428              	@ armwave.c:599:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3429              		.loc 1 599 20 discriminator 2 view .LVU926
 3430 0fb0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3431              	.LVL202:
 3432              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3433              		.loc 1 573 5 discriminator 2 view .LVU927
 3434 0fb4 AEFFFF1A 		bne	.L171		@,
 3435              	.LVL203:
 3436              	.L168:
 3437              	@ armwave.c:601: }
 600:armwave.c     ****     }
 601:armwave.c     **** }
 3438              		.loc 1 601 1 view .LVU928
 3439 0fb8 08D08DE2 		add	sp, sp, #8	@,,
 3440              		.cfi_remember_state
 3441              		.cfi_def_cfa_offset 80
 3442              		@ sp needed	@
 3443 0fbc 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3444              		.cfi_restore 90
 3445              		.cfi_restore 91
 3446              		.cfi_restore 88
 3447              		.cfi_restore 89
 3448              		.cfi_restore 86
 3449              		.cfi_restore 87
 3450              		.cfi_restore 84
 3451              		.cfi_restore 85
 3452              		.cfi_restore 82
 3453              		.cfi_restore 83
 3454              		.cfi_restore 80
 3455              		.cfi_restore 81
 3456              		.cfi_def_cfa_offset 32
 3457              	.LVL204:
 3458              		.loc 1 601 1 view .LVU929
 3459 0fc0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3460              	.LVL205:
 3461              	.L198:
 3462              		.cfi_restore_state
 3463              	.LBB56:
 3464              	.LBB53:
 521:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3465              		.loc 1 521 9 is_stmt 1 view .LVU930
 3466 0fc4 940901E0 		mul	r1, r4, r9	@, _85, sets
 3467 0fc8 0920A0E1 		mov	r2, r9	@, sets
 3468 0fcc 28009FE5 		ldr	r0, .L199+36	@,
 3469 0fd0 FEFFFFEB 		bl	printf		@
 3470              	.LVL206:
 523:armwave.c     ****     }
 3471              		.loc 1 523 9 view .LVU931
 3472 0fd4 9FFFFFEA 		b	.L170		@
 3473              	.L200:
 3474              		.align	2
 3475              	.L199:
 3476 0fd8 0000803F 		.word	1065353216
 3477 0fdc 00007F43 		.word	1132396544
 3478 0fe0 0000003F 		.word	1056964608
 3479 0fe4 C3F5C840 		.word	1086911939
 3480 0fe8 38FFC74A 		.word	1254620984
 3481 0fec 0000FE42 		.word	1123942400
 3482 0ff0 00000043 		.word	1124073472
 3483 0ff4 00000000 		.word	g_armwave_state
 3484 0ff8 90020000 		.word	.LC20
 3485 0ffc E8010000 		.word	.LC18
 3486              	.LBE53:
 3487              	.LBE56:
 3488              		.cfi_endproc
 3489              	.LFE75:
 3491              		.align	2
 3492              		.global	armwave_cleanup
 3493              		.syntax unified
 3494              		.arm
 3495              		.fpu vfp
 3497              	armwave_cleanup:
 3498              	.LFB76:
 602:armwave.c     **** 
 603:armwave.c     **** /*
 604:armwave.c     ****  * Make a test square waveform.
 605:armwave.c     ****  *
 606:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 607:armwave.c     ****  */
 608:armwave.c     **** #if 0
 609:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 610:armwave.c     **** {
 611:armwave.c     ****     uint8_t v;
 612:armwave.c     ****     float noise, xnoise;
 613:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 614:armwave.c     ****     int w, x;
 615:armwave.c     **** 
 616:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 617:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 618:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 619:armwave.c     ****             noise *= noise;
 620:armwave.c     ****             noise *= noise;
 621:armwave.c     ****             noise *= noise;
 622:armwave.c     **** 
 623:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 624:armwave.c     ****                 noise = -noise;
 625:armwave.c     **** 
 626:armwave.c     ****             //noise += 1.0f;
 627:armwave.c     **** 
 628:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 629:armwave.c     ****                 new_level = 0.2f;
 630:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 631:armwave.c     ****                 new_level = 0.8f;
 632:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 633:armwave.c     ****                 new_level = 0.2f;
 634:armwave.c     ****             } else {
 635:armwave.c     ****                 new_level = 0.8f;
 636:armwave.c     ****             }
 637:armwave.c     **** 
 638:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 639:armwave.c     **** 
 640:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 641:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 642:armwave.c     ****         }
 643:armwave.c     ****     }
 644:armwave.c     **** }
 645:armwave.c     **** #endif
 646:armwave.c     **** 
 647:armwave.c     **** /*
 648:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 649:armwave.c     ****  */
 650:armwave.c     **** void armwave_cleanup()
 651:armwave.c     **** {
 3499              		.loc 1 651 1 view -0
 3500              		.cfi_startproc
 3501              		@ args = 0, pretend = 0, frame = 0
 3502              		@ frame_needed = 0, uses_anonymous_args = 0
 652:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3503              		.loc 1 652 5 view .LVU933
 3504              	@ armwave.c:651: {
 651:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3505              		.loc 1 651 1 is_stmt 0 view .LVU934
 3506 1000 10402DE9 		push	{r4, lr}	@
 3507              		.cfi_def_cfa_offset 8
 3508              		.cfi_offset 4, -8
 3509              		.cfi_offset 14, -4
 3510              	@ armwave.c:652:     free(g_armwave_state.out_pixbuf);
 3511              		.loc 1 652 25 view .LVU935
 3512 1004 34409FE5 		ldr	r4, .L203	@ tmp114,
 3513              	@ armwave.c:652:     free(g_armwave_state.out_pixbuf);
 3514              		.loc 1 652 5 view .LVU936
 3515 1008 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3516 100c FEFFFFEB 		bl	free		@
 3517              	.LVL207:
 653:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3518              		.loc 1 653 5 is_stmt 1 view .LVU937
 3519 1010 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3520 1014 FEFFFFEB 		bl	free		@
 3521              	.LVL208:
 654:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3522              		.loc 1 654 5 view .LVU938
 3523 1018 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3524 101c FEFFFFEB 		bl	free		@
 3525              	.LVL209:
 655:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3526              		.loc 1 655 5 view .LVU939
 3527 1020 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3528 1024 FEFFFFEB 		bl	free		@
 3529              	.LVL210:
 656:armwave.c     **** 
 657:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3530              		.loc 1 657 5 view .LVU940
 3531              	@ armwave.c:657:     g_armwave_state.out_pixbuf = NULL;
 3532              		.loc 1 657 32 is_stmt 0 view .LVU941
 3533 1028 0030A0E3 		mov	r3, #0	@ tmp123,
 3534 102c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 658:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3535              		.loc 1 658 5 is_stmt 1 view .LVU942
 3536              	@ armwave.c:658:     g_armwave_state.ch1_buffer = NULL;
 3537              		.loc 1 658 32 is_stmt 0 view .LVU943
 3538 1030 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 659:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3539              		.loc 1 659 5 is_stmt 1 view .LVU944
 3540              	@ armwave.c:659:     g_armwave_state.xcoord_to_xpixel = NULL;
 3541              		.loc 1 659 38 is_stmt 0 view .LVU945
 3542 1034 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 660:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3543              		.loc 1 660 5 is_stmt 1 view .LVU946
 3544              	@ armwave.c:660:     g_armwave_state.test_wave_buffer = NULL;
 3545              		.loc 1 660 38 is_stmt 0 view .LVU947
 3546 1038 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3547              	@ armwave.c:661: }
 661:armwave.c     **** }
 3548              		.loc 1 661 1 view .LVU948
 3549 103c 1080BDE8 		pop	{r4, pc}	@
 3550              	.L204:
 3551              		.align	2
 3552              	.L203:
 3553 1040 00000000 		.word	g_armwave_state
 3554              		.cfi_endproc
 3555              	.LFE76:
 3557              		.comm	gamma_table,256,4
 3558              		.comm	g_armwave_state,136,4
 3559              		.section	.rodata
 3560              		.align	2
 3561              		.set	.LANCHOR0,. + 0
 3564              	__PRETTY_FUNCTION__.17096:
 3565 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3565      6176655F 
 3565      66696C6C 
 3565      5F706978 
 3565      6275665F 
 3566 001b 00       		.space	1
 3569              	__PRETTY_FUNCTION__.17120:
 3570 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3570      6176655F 
 3570      73657475 
 3570      705F7265 
 3570      6E646572 
 3571 0031 000000   		.space	3
 3574              	__PRETTY_FUNCTION__.17127:
 3575 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3575      6176655F 
 3575      7365745F 
 3575      77617665 
 3575      5F706F69 
 3576 004d 000000   		.space	3
 3579              	__PRETTY_FUNCTION__.17134:
 3580 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3580      6176655F 
 3580      7365745F 
 3580      77617665 
 3580      5F706F69 
 3581              		.section	.rodata.str1.4,"aMS",%progbits,1
 3582              		.align	2
 3583              	.LC0:
 3584 0000 76302E30 		.ascii	"v0.0.1\000"
 3584      2E3100
 3585 0007 00       		.space	1
 3586              	.LC1:
 3587 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3587      61766520 
 3587      76657273 
 3587      696F6E3A 
 3587      2025730A 
 3588 001d 000000   		.space	3
 3589              	.LC2:
 3590 0020 61726D77 		.ascii	"armwave.c\000"
 3590      6176652E 
 3590      6300
 3591 002a 0000     		.space	2
 3592              	.LC3:
 3593 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3593      62756666 
 3593      65722021 
 3593      3D204E55 
 3593      4C4C00
 3594 003f 00       		.space	1
 3595              	.LC4:
 3596 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3596      20653D25 
 3596      6420773D 
 3596      25642077 
 3596      733D2564 
 3597              	.LC5:
 3598 006c 73746172 		.ascii	"start_point < end_point\000"
 3598      745F706F 
 3598      696E7420 
 3598      3C20656E 
 3598      645F706F 
 3599              	.LC6:
 3600 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3600      7566665F 
 3600      73697A65 
 3600      3D25642C 
 3600      20636D70 
 3601 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3601      5F776964 
 3601      74683D25 
 3601      642C2077 
 3601      6176655F 
 3602 00e1 000000   		.space	3
 3603              	.LC7:
 3604 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3604      6D776176 
 3604      655F7374 
 3604      6174652E 
 3604      6368315F 
 3605 0107 00       		.space	1
 3606              	.LC8:
 3607 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3607      6D776176 
 3607      655F7374 
 3607      6174652E 
 3607      78636F6F 
 3608 0131 000000   		.space	3
 3609              	.LC9:
 3610 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3610      3A203078 
 3610      25303878 
 3610      20307825 
 3610      30387820 
 3611              	.LC10:
 3612 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3612      5F627566 
 3612      66657220 
 3612      213D204E 
 3612      554C4C00 
 3613              	.LC11:
 3614 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3614      6176655F 
 3614      7365745F 
 3614      77617665 
 3614      5F706F69 
 3615 019f 78636565 		.ascii	"xceeded\000"
 3615      64656400 
 3616 01a7 00       		.space	1
 3617              	.LC12:
 3618 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3618      5F627566 
 3618      6665725F 
 3618      70747220 
 3618      213D2030 
 3619 01bd 000000   		.space	3
 3620              	.LC13:
 3621 01c0 776200   		.ascii	"wb\000"
 3622 01c3 00       		.space	1
 3623              	.LC14:
 3624 01c4 50330A00 		.ascii	"P3\012\000"
 3625              	.LC15:
 3626 01c8 25642025 		.ascii	"%d %d\012\000"
 3626      640A00
 3627 01cf 00       		.space	1
 3628              	.LC16:
 3629 01d0 3235350A 		.ascii	"255\012\000"
 3629      00
 3630 01d5 000000   		.space	3
 3631              	.LC17:
 3632 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3632      25336420 
 3632      2533640A 
 3632      00
 3633 01e5 000000   		.space	3
 3634              	.LC18:
 3635 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3635      6176655F 
 3635      74657374 
 3635      5F627566 
 3635      6665725F 
 3636 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3636      20627566 
 3636      66657220 
 3636      28256420 
 3636      62797465 
 3637              	.LC19:
 3638 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3638      6176655F 
 3638      66696C6C 
 3638      5F706978 
 3638      6275665F 
 3639 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3639      20666169 
 3639      6C65642C 
 3639      20726574 
 3639      75726E69 
 3640 028e 0000     		.space	2
 3641              	.LC20:
 3642 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3642      756C6174 
 3642      696E6720 
 3642      74657374 
 3642      20736574 
 3643              		.text
 3644              	.Letext0:
 3645              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3646              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3647              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3648              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3649              		.file 7 "/usr/include/stdio.h"
 3650              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3651              		.file 9 "/usr/include/errno.h"
 3652              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3653              		.file 11 "/usr/include/unistd.h"
 3654              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3655              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3656              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3657              		.file 15 "/usr/include/math.h"
 3658              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3659              		.file 17 "/usr/include/time.h"
 3660              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3661              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3662              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3663              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3664              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3665              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3666              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3667              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3668              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3669              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3670              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3671              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3672              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3673              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3674              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3675              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3676              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3677              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3678              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3679              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3680              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3681              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3682              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3683              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3684              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3685              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3686              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3687              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3688              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3689              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3690              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3691              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3692              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3693              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3694              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3695              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3696              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3697              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3698              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3699              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3700              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3701              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3702              		.file 60 "/usr/local/include/python3.8/context.h"
 3703              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3704              		.file 62 "/usr/local/include/python3.8/code.h"
 3705              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3706              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3707              		.file 65 "/usr/local/include/python3.8/import.h"
 3708              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3709              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3710              		.file 68 "/usr/include/malloc.h"
 3711              		.file 69 "armwave.h"
 3712              		.file 70 "/usr/include/stdlib.h"
 3713              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3714              		.file 72 "<built-in>"
 3715              		.file 73 "/usr/include/assert.h"
 3716              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
