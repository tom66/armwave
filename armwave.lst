   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LVL0:
  83              	.LFB72:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                  	((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                 	((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)            	MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)       	__builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)        	__builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  97:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  98:armwave.c     ****  */
  99:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 100:armwave.c     **** {
 101:armwave.c     ****     int yy, ys, w, scale_value;
 102:armwave.c     ****     uint32_t value, word;
 103:armwave.c     ****     uint8_t *wave_base;
 104:armwave.c     ****     uint8_t *write_buffer_base;
 105:armwave.c     ****     uint8_t *write_buffer;
 106:armwave.c     ****     
 107:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 108:armwave.c     **** 
 109:armwave.c     ****     // roll through each waveform
 110:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 111:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 112:armwave.c     **** 
 113:armwave.c     ****         // roll through y and render the slice into the out buffer
 114:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 115:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 116:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 117:armwave.c     **** 
 118:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 119:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 123:armwave.c     ****             }
 124:armwave.c     ****         }
 125:armwave.c     ****     }
 126:armwave.c     **** }
 127:armwave.c     **** 
 128:armwave.c     **** void armwave_init()
 129:armwave.c     **** {
 130:armwave.c     ****     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 132:armwave.c     **** 
 133:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  85              		.loc 1 133 6 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 134:armwave.c     **** {
 135:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 135 5 view .LVU1
 136:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 136 5 view .LVU2
 137:armwave.c     **** 
 138:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 138 5 view .LVU3
 139:armwave.c     **** 
 140:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 141:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 141 5 view .LVU4
  93              	@ armwave.c:133: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 133:armwave.c     **** {
  94              		.loc 1 133 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:144:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 142:armwave.c     **** 
 143:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 144:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 102              		.loc 1 144 5 view .LVU6
 103 0004 012C41E2 		sub	r2, r1, #256	@ tmp143, target_height,
 104              	@ armwave.c:141:     g_armwave_state.wave_buffer = wave_buffer;
 141:armwave.c     **** 
 105              		.loc 1 141 33 view .LVU7
 106 0008 B0419FE5 		ldr	r4, .L21+8	@ tmp218,
 107 000c B0319FE5 		ldr	r3, .L21+12	@ tmp142,
 108              	@ armwave.c:144:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109              		.loc 1 144 5 view .LVU8
 110 0010 012CD2E3 		bics	r2, r2, #256	@ tmp220, tmp143,
 111              	@ armwave.c:133: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 133:armwave.c     **** {
 112              		.loc 1 133 6 view .LVU9
 113 0014 028B2DED 		vpush.64	{d8}	@
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 80, -24
 116              		.cfi_offset 81, -20
 117              	@ armwave.c:133: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 133:armwave.c     **** {
 118              		.loc 1 133 6 view .LVU10
 119 0018 0050A0E1 		mov	r5, r0	@ target_width, target_width
 120              	@ armwave.c:141:     g_armwave_state.wave_buffer = wave_buffer;
 141:armwave.c     **** 
 121              		.loc 1 141 33 view .LVU11
 122 001c 143084E5 		str	r3, [r4, #20]	@ tmp142, g_armwave_state.wave_buffer
 123              		.loc 1 144 5 is_stmt 1 view .LVU12
 124 0020 4A00000A 		beq	.L2		@,
 125 0024 013B41E2 		sub	r3, r1, #1024	@ tmp145, target_height,
 126 0028 013BD3E3 		bics	r3, r3, #1024	@ tmp221, tmp145,
 127 002c 5200001A 		bne	.L17		@,
 145:armwave.c     **** 
 146:armwave.c     ****     if(target_height == 256) {
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 128              		.loc 1 149 12 view .LVU13
 150:armwave.c     ****         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 152:armwave.c     ****     } else if(target_height == 1024) {
 129              		.loc 1 152 12 view .LVU14
 130              	@ armwave.c:152:     } else if(target_height == 1024) {
 131              		.loc 1 152 14 is_stmt 0 view .LVU15
 132 0030 010B51E3 		cmp	r1, #1024	@ target_height,
 133 0034 4C00000A 		beq	.L18		@,
 153:armwave.c     ****         g_armwave_state.row_shift = 10;
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 155:armwave.c     ****     } else if(target_height == 2048) {
 134              		.loc 1 155 12 is_stmt 1 view .LVU16
 135              	@ armwave.c:155:     } else if(target_height == 2048) {
 136              		.loc 1 155 14 is_stmt 0 view .LVU17
 137 0038 020B51E3 		cmp	r1, #2048	@ target_height,
 156:armwave.c     ****         g_armwave_state.row_shift = 11;
 138              		.loc 1 156 9 is_stmt 1 view .LVU18
 139              	@ armwave.c:156:         g_armwave_state.row_shift = 11;
 140              		.loc 1 156 35 is_stmt 0 view .LVU19
 141 003c 0B20A003 		moveq	r2, #11	@ tmp165,
 142 0040 80319F05 		ldreq	r3, .L21+16	@ tmp163,
 143 0044 F424C401 		strdeq	r2, [r4, #68]	@, tmp218,
 157:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 144              		.loc 1 157 9 is_stmt 1 view .LVU20
 145              	.L5:
 158:armwave.c     ****     } 
 159:armwave.c     **** 
 160:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 161:armwave.c     ****     g_armwave_state.xstride = target_height;
 146              		.loc 1 161 5 view .LVU21
 147              	@ armwave.c:165:     g_armwave_state.size = target_height * target_width;
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 164:armwave.c     ****     g_armwave_state.waves = waves;
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 148              		.loc 1 165 42 is_stmt 0 view .LVU22
 149 0048 950102E0 		mul	r2, r5, r1	@ tmp174, target_width, target_height
 150              	@ armwave.c:167:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 151              		.loc 1 167 68 view .LVU23
 152 004c 0534A0E1 		lsl	r3, r5, #8	@ _11, target_width,
 153              	@ armwave.c:162:     g_armwave_state.vscale = target_height / 256;
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 154              		.loc 1 162 44 view .LVU24
 155 0050 2104A0E1 		lsr	r0, r1, #8	@ tmp168, target_height,
 156              	.LVL1:
 157              	@ armwave.c:161:     g_armwave_state.xstride = target_height;
 161:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 158              		.loc 1 161 29 view .LVU25
 159 0054 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 160              		.loc 1 162 5 is_stmt 1 view .LVU26
 161              	@ armwave.c:169:     g_armwave_state.target_height = target_height;
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 162              		.loc 1 169 35 is_stmt 0 view .LVU27
 163 0058 401084E5 		str	r1, [r4, #64]	@ target_height, g_armwave_state.target_height
 164              	@ armwave.c:165:     g_armwave_state.size = target_height * target_width;
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 165              		.loc 1 165 26 view .LVU28
 166 005c 382084E5 		str	r2, [r4, #56]	@ tmp174, g_armwave_state.size
 167              	@ armwave.c:171:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 170:armwave.c     **** 
 171:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 168              		.loc 1 171 5 view .LVU29
 169 0060 0310A0E1 		mov	r1, r3	@, _11
 170              	.LVL2:
 171              	@ armwave.c:163:     g_armwave_state.wave_stride = wave_stride;
 163:armwave.c     ****     g_armwave_state.waves = waves;
 172              		.loc 1 163 33 view .LVU30
 173 0064 022BA0E3 		mov	r2, #2048	@ tmp170,
 174              	@ armwave.c:162:     g_armwave_state.vscale = target_height / 256;
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 175              		.loc 1 162 28 view .LVU31
 176 0068 1C0084E5 		str	r0, [r4, #28]	@ tmp168, g_armwave_state.vscale
 163:armwave.c     ****     g_armwave_state.waves = waves;
 177              		.loc 1 163 5 is_stmt 1 view .LVU32
 178              	@ armwave.c:164:     g_armwave_state.waves = waves;
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 179              		.loc 1 164 27 is_stmt 0 view .LVU33
 180 006c 4060A0E3 		mov	r6, #64	@ tmp172,
 181              	@ armwave.c:167:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 182              		.loc 1 167 34 view .LVU34
 183 0070 343084E5 		str	r3, [r4, #52]	@ _11, g_armwave_state.ch_buff_size
 184              	@ armwave.c:171:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 185              		.loc 1 171 5 view .LVU35
 186 0074 50019FE5 		ldr	r0, .L21+20	@,
 187              	@ armwave.c:166:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 188              		.loc 1 166 37 view .LVU36
 189 0078 013CA0E3 		mov	r3, #256	@ tmp176,
 190              	@ armwave.c:168:     g_armwave_state.target_width = target_width;
 168:armwave.c     ****     g_armwave_state.target_height = target_height;
 191              		.loc 1 168 34 view .LVU37
 192 007c 3C5084E5 		str	r5, [r4, #60]	@ target_width, g_armwave_state.target_width
 193              	@ armwave.c:163:     g_armwave_state.wave_stride = wave_stride;
 163:armwave.c     ****     g_armwave_state.waves = waves;
 194              		.loc 1 163 33 view .LVU38
 195 0080 202084E5 		str	r2, [r4, #32]	@ tmp170, g_armwave_state.wave_stride
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 196              		.loc 1 164 5 is_stmt 1 view .LVU39
 197              	@ armwave.c:164:     g_armwave_state.waves = waves;
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 198              		.loc 1 164 27 is_stmt 0 view .LVU40
 199 0084 246084E5 		str	r6, [r4, #36]	@ tmp172, g_armwave_state.waves
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 200              		.loc 1 165 5 is_stmt 1 view .LVU41
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 201              		.loc 1 166 5 view .LVU42
 202              	@ armwave.c:166:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 203              		.loc 1 166 37 is_stmt 0 view .LVU43
 204 0088 283084E5 		str	r3, [r4, #40]	@ tmp176, g_armwave_state.bitdepth_height
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 205              		.loc 1 167 5 is_stmt 1 view .LVU44
 168:armwave.c     ****     g_armwave_state.target_height = target_height;
 206              		.loc 1 168 5 view .LVU45
 169:armwave.c     **** 
 207              		.loc 1 169 5 view .LVU46
 208              		.loc 1 171 5 view .LVU47
 209 008c FEFFFFEB 		bl	printf		@
 210              	.LVL3:
 172:armwave.c     **** 
 173:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 174:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 175:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 176:armwave.c     ****     g_armwave_state.slice_height = 64;  
 211              		.loc 1 176 5 view .LVU48
 212              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 177:armwave.c     **** 
 178:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 213              		.loc 1 178 23 is_stmt 0 view .LVU49
 214 0090 040094E5 		ldr	r0, [r4, #4]	@ _12, g_armwave_state.ch1_buffer
 215              	@ armwave.c:176:     g_armwave_state.slice_height = 64;  
 176:armwave.c     **** 
 216              		.loc 1 176 34 view .LVU50
 217 0094 2C6084E5 		str	r6, [r4, #44]	@ tmp172, g_armwave_state.slice_height
 218              		.loc 1 178 5 is_stmt 1 view .LVU51
 219              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 220              		.loc 1 178 7 is_stmt 0 view .LVU52
 221 0098 000050E3 		cmp	r0, #0	@ _12,
 222 009c 0000000A 		beq	.L7		@,
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 223              		.loc 1 179 9 is_stmt 1 view .LVU53
 224 00a0 FEFFFFEB 		bl	free		@
 225              	.LVL4:
 226              	.L7:
 180:armwave.c     **** 
 181:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 227              		.loc 1 181 5 view .LVU54
 228              	@ armwave.c:181:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 229              		.loc 1 181 34 is_stmt 0 view .LVU55
 230 00a4 0110A0E3 		mov	r1, #1	@,
 231 00a8 340094E5 		ldr	r0, [r4, #52]	@, g_armwave_state.ch_buff_size
 232 00ac FEFFFFEB 		bl	calloc		@
 233              	.LVL5:
 234              	@ armwave.c:182:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 235              		.loc 1 182 33 view .LVU56
 236 00b0 18219FE5 		ldr	r2, .L21+24	@ tmp189,
 237              	@ armwave.c:184:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 238              		.loc 1 184 33 view .LVU57
 239 00b4 FA30A0E3 		mov	r3, #250	@ tmp192,
 240              	@ armwave.c:182:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 241              		.loc 1 182 33 view .LVU58
 242 00b8 502084E5 		str	r2, [r4, #80]	@ tmp189, MEM[(short int *)&g_armwave_state + 80B]
 243              	@ armwave.c:184:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 244              		.loc 1 184 33 view .LVU59
 245 00bc B435C4E1 		strh	r3, [r4, #84]	@ movhi	@ tmp192, g_armwave_state.ch1_color.b
 246              	@ armwave.c:186:     assert(g_armwave_state.ch1_buffer != NULL);
 185:armwave.c     **** 
 186:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 247              		.loc 1 186 5 view .LVU60
 248 00c0 000050E3 		cmp	r0, #0	@ tmp186,
 249              	@ armwave.c:181:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 181:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 250              		.loc 1 181 32 view .LVU61
 251 00c4 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 182:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 252              		.loc 1 182 5 is_stmt 1 view .LVU62
 183:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 253              		.loc 1 183 5 view .LVU63
 184:armwave.c     **** 
 254              		.loc 1 184 5 view .LVU64
 255              		.loc 1 186 5 view .LVU65
 256 00c8 3000000A 		beq	.L19		@,
 187:armwave.c     **** 
 188:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 189:armwave.c     ****     length = end_point - start_point;
 257              		.loc 1 189 5 view .LVU66
 258              	.LVL6:
 190:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 259              		.loc 1 190 5 view .LVU67
 260              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 261              		.loc 1 190 34 is_stmt 0 view .LVU68
 262 00cc 905A07EE 		vmov	s15, r5	@ int	@ target_width, target_width
 263              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 264              		.loc 1 190 22 view .LVU69
 265 00d0 386ADFED 		vldr.32	s13, .L21	@ tmp197,
 266              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267              		.loc 1 192 40 view .LVU70
 268 00d4 010AA0E3 		mov	r0, #4096	@,
 269              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 270              		.loc 1 190 34 view .LVU71
 271 00d8 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp196, target_width
 272              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 273              		.loc 1 191 60 view .LVU72
 274 00dc 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp223, g_armwave_state.slice_height
 275 00e0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp200, tmp223
 276              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 277              		.loc 1 190 22 view .LVU73
 278 00e4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp197, tmp196
 279              	.LVL7:
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 280              		.loc 1 191 5 is_stmt 1 view .LVU74
 281              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 282              		.loc 1 191 60 is_stmt 0 view .LVU75
 283 00e8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 284              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 285              		.loc 1 191 41 view .LVU76
 286 00ec E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 287 00f0 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp203, g_armwave_state.slice_record_height
 288              		.loc 1 192 5 is_stmt 1 view .LVU77
 289              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 290              		.loc 1 192 40 is_stmt 0 view .LVU78
 291 00f4 FEFFFFEB 		bl	malloc		@
 292              	.LVL8:
 293              	@ armwave.c:194:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 193:armwave.c     **** 
 194:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 294              		.loc 1 194 5 view .LVU79
 295 00f8 000050E3 		cmp	r0, #0	@ tmp204,
 296              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     **** 
 297              		.loc 1 192 38 view .LVU80
 298 00fc 680084E5 		str	r0, [r4, #104]	@ tmp204, g_armwave_state.xcoord_to_xpixel
 299              		.loc 1 194 5 is_stmt 1 view .LVU81
 300 0100 2700000A 		beq	.L20		@,
 301              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 195:armwave.c     **** 
 196:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 302              		.loc 1 197 54 is_stmt 0 view .LVU82
 303 0104 2C7ADFED 		vldr.32	s15, .L21+4	@ tmp209,
 304 0108 020040E2 		sub	r0, r0, #2	@ ivtmp.28, tmp204,
 305              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 306              		.loc 1 196 12 view .LVU83
 307 010c 0030A0E3 		mov	r3, #0	@ xx,
 308              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 309              		.loc 1 197 54 view .LVU84
 310 0110 887A87EE 		vdiv.f32	s14, s15, s16	@ _25, tmp209, points_per_pixel
 311              	.L10:
 312              	.LVL9:
 313              		.loc 1 197 9 is_stmt 1 view .LVU85
 314              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 315              		.loc 1 197 74 is_stmt 0 view .LVU86
 316 0114 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 317              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 318              		.loc 1 196 32 view .LVU87
 319 0118 013083E2 		add	r3, r3, #1	@ xx, xx,
 320              	.LVL10:
 321              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 322              		.loc 1 196 5 view .LVU88
 323 011c 020B53E3 		cmp	r3, #2048	@ xx,
 324              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 325              		.loc 1 197 74 view .LVU89
 326 0120 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, xx
 327 0124 877A67EE 		vmul.f32	s15, s15, s14	@ tmp211, tmp210, _25
 328              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 329              		.loc 1 197 46 view .LVU90
 330 0128 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp212, tmp211
 331 012c 902A17EE 		vmov	r2, s15	@ int	@ tmp212, tmp212
 332 0130 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp212, MEM[base: _6, offset: 0B]
 333              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 334              		.loc 1 196 5 view .LVU91
 335 0134 F6FFFF1A 		bne	.L10		@,
 198:armwave.c     **** 
 199:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 200:armwave.c     ****     }
 201:armwave.c     **** 
 202:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 336              		.loc 1 202 5 is_stmt 1 view .LVU92
 337              	@ armwave.c:202:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 338              		.loc 1 202 34 is_stmt 0 view .LVU93
 339 0138 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 340 013c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 341 0140 FEFFFFEB 		bl	malloc		@
 342              	.LVL11:
 343              	@ armwave.c:203: }
 203:armwave.c     **** }
 344              		.loc 1 203 1 view .LVU94
 345 0144 028BBDEC 		vldm	sp!, {d8}	@
 346              		.cfi_remember_state
 347              		.cfi_restore 80
 348              		.cfi_restore 81
 349              		.cfi_def_cfa_offset 16
 350              	.LVL12:
 351              	@ armwave.c:202:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 202:armwave.c     **** }
 352              		.loc 1 202 32 view .LVU95
 353 0148 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 354              	@ armwave.c:203: }
 355              		.loc 1 203 1 view .LVU96
 356 014c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 357              	.LVL13:
 358              	.L2:
 359              		.cfi_restore_state
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 360              		.loc 1 146 5 is_stmt 1 view .LVU97
 361              	@ armwave.c:146:     if(target_height == 256) {
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 362              		.loc 1 146 7 is_stmt 0 view .LVU98
 363 0150 010C51E3 		cmp	r1, #256	@ target_height,
 147:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 364              		.loc 1 147 9 is_stmt 1 view .LVU99
 365              	@ armwave.c:148:         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 366              		.loc 1 148 34 is_stmt 0 view .LVU100
 367 0154 0820A003 		moveq	r2, #8	@ tmp151,
 368              	@ armwave.c:150:         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 369              		.loc 1 150 35 view .LVU101
 370 0158 74309F15 		ldrne	r3, .L21+28	@ tmp155,
 371              	@ armwave.c:148:         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 372              		.loc 1 148 34 view .LVU102
 373 015c FF30A003 		moveq	r3, #255	@ tmp153,
 149:armwave.c     ****         g_armwave_state.row_shift = 9;
 374              		.loc 1 149 12 is_stmt 1 view .LVU103
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 375              		.loc 1 150 9 view .LVU104
 376              	@ armwave.c:150:         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 377              		.loc 1 150 35 is_stmt 0 view .LVU105
 378 0160 0920A013 		movne	r2, #9	@ tmp157,
 379 0164 F424C4E1 		strd	r2, [r4, #68]	@, tmp218,
 151:armwave.c     ****     } else if(target_height == 1024) {
 380              		.loc 1 151 9 is_stmt 1 view .LVU106
 381 0168 B6FFFFEA 		b	.L5		@
 382              	.L18:
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 383              		.loc 1 153 9 view .LVU107
 384              	@ armwave.c:153:         g_armwave_state.row_shift = 10;
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 385              		.loc 1 153 35 is_stmt 0 view .LVU108
 386 016c 64309FE5 		ldr	r3, .L21+32	@ tmp159,
 387 0170 0A20A0E3 		mov	r2, #10	@ tmp161,
 388 0174 F424C4E1 		strd	r2, [r4, #68]	@, tmp218,
 154:armwave.c     ****     } else if(target_height == 2048) {
 389              		.loc 1 154 9 is_stmt 1 view .LVU109
 390 0178 B2FFFFEA 		b	.L5		@
 391              	.L17:
 144:armwave.c     **** 
 392              		.loc 1 144 5 view .LVU110
 393 017c 58309FE5 		ldr	r3, .L21+36	@,
 394 0180 9020A0E3 		mov	r2, #144	@,
 395 0184 54109FE5 		ldr	r1, .L21+40	@,
 396              	.LVL14:
 144:armwave.c     **** 
 397              		.loc 1 144 5 is_stmt 0 view .LVU111
 398 0188 54009FE5 		ldr	r0, .L21+44	@,
 399              	.LVL15:
 144:armwave.c     **** 
 400              		.loc 1 144 5 view .LVU112
 401 018c FEFFFFEB 		bl	__assert_fail		@
 402              	.LVL16:
 403              	.L19:
 186:armwave.c     **** 
 404              		.loc 1 186 5 is_stmt 1 view .LVU113
 405 0190 44309FE5 		ldr	r3, .L21+36	@,
 406 0194 BA20A0E3 		mov	r2, #186	@,
 407 0198 40109FE5 		ldr	r1, .L21+40	@,
 408 019c 44009FE5 		ldr	r0, .L21+48	@,
 409 01a0 FEFFFFEB 		bl	__assert_fail		@
 410              	.LVL17:
 411              	.L20:
 194:armwave.c     **** 
 412              		.loc 1 194 5 view .LVU114
 413 01a4 30309FE5 		ldr	r3, .L21+36	@,
 414 01a8 C220A0E3 		mov	r2, #194	@,
 415 01ac 2C109FE5 		ldr	r1, .L21+40	@,
 416 01b0 34009FE5 		ldr	r0, .L21+52	@,
 417 01b4 FEFFFFEB 		bl	__assert_fail		@
 418              	.LVL18:
 419              	.L22:
 420              		.align	2
 421              	.L21:
 422 01b8 00000045 		.word	1157627904
 423 01bc 0000803F 		.word	1065353216
 424 01c0 00000000 		.word	g_armwave_state
 425 01c4 00000000 		.word	test_wave_buffer
 426 01c8 FF070000 		.word	2047
 427 01cc 6C000000 		.word	.LC2
 428 01d0 F609F406 		.word	116656630
 429 01d4 FF010000 		.word	511
 430 01d8 FF030000 		.word	1023
 431 01dc 00000000 		.word	.LANCHOR0
 432 01e0 00000000 		.word	.LC0
 433 01e4 0C000000 		.word	.LC1
 434 01e8 80000000 		.word	.LC3
 435 01ec A4000000 		.word	.LC4
 436              		.cfi_endproc
 437              	.LFE72:
 439              		.align	2
 440              		.global	test_create_waveform
 441              		.syntax unified
 442              		.arm
 443              		.fpu vfp
 445              	test_create_waveform:
 446              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 447              		.loc 1 51 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 451              		.loc 1 52 5 view .LVU116
  53:armwave.c     **** 
 452              		.loc 1 53 5 view .LVU117
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 453              		.loc 1 55 5 view .LVU118
 454              	.LVL19:
 455              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 456              		.loc 1 51 1 is_stmt 0 view .LVU119
 457 01f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 458              		.cfi_def_cfa_offset 36
 459              		.cfi_offset 4, -36
 460              		.cfi_offset 5, -32
 461              		.cfi_offset 6, -28
 462              		.cfi_offset 7, -24
 463              		.cfi_offset 8, -20
 464              		.cfi_offset 9, -16
 465              		.cfi_offset 10, -12
 466              		.cfi_offset 11, -8
 467              		.cfi_offset 14, -4
 468 01f4 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 469              		.cfi_def_cfa_offset 84
 470              		.cfi_offset 80, -84
 471              		.cfi_offset 81, -80
 472              		.cfi_offset 82, -76
 473              		.cfi_offset 83, -72
 474              		.cfi_offset 84, -68
 475              		.cfi_offset 85, -64
 476              		.cfi_offset 86, -60
 477              		.cfi_offset 87, -56
 478              		.cfi_offset 88, -52
 479              		.cfi_offset 89, -48
 480              		.cfi_offset 90, -44
 481              		.cfi_offset 91, -40
 482 01f8 5C819FE5 		ldr	r8, .L42+40	@ _75,
 483              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 484              		.loc 1 56 33 view .LVU120
 485 01fc 4CDA9FED 		vldr.32	s26, .L42	@ tmp157,
 486 0200 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.44, _75,
 487              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 488              		.loc 1 56 13 view .LVU121
 489 0204 4BCADFED 		vldr.32	s25, .L42+4	@ tmp161,
 490              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 491              		.loc 1 60 20 view .LVU122
 492 0208 4BCA9FED 		vldr.32	s24, .L42+8	@ tmp166,
 493              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 494              		.loc 1 71 29 view .LVU123
 495 020c 4BBADFED 		vldr.32	s23, .L42+12	@ tmp170,
 496              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 497              		.loc 1 71 33 view .LVU124
 498 0210 4BBA9FED 		vldr.32	s22, .L42+16	@ tmp172,
 499              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 500              		.loc 1 69 20 view .LVU125
 501 0214 4BAADFED 		vldr.32	s21, .L42+20	@ tmp177,
 502 0218 02B886E2 		add	fp, r6, #131072	@ _81,,
 503 021c 3CA19FE5 		ldr	r10, .L42+44	@ tmp197,
 504              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 505              		.loc 1 51 1 view .LVU126
 506 0220 0CD04DE2 		sub	sp, sp, #12	@,,
 507              		.cfi_def_cfa_offset 96
 508 0224 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 509 0228 0F6086E2 		add	r6, r6, #15	@ ivtmp.44, ivtmp.44,
 510 022c 008068E2 		rsb	r8, r8, #0	@ ivtmp.47, _75
 511              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 512              		.loc 1 55 11 view .LVU127
 513 0230 0090A0E3 		mov	r9, #0	@ w,
 514              	.LVL20:
 515              	.L29:
  56:armwave.c     ****         //mod = 1.0f;
 516              		.loc 1 56 9 is_stmt 1 view .LVU128
 517              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 518              		.loc 1 56 24 is_stmt 0 view .LVU129
 519 0234 909A07EE 		vmov	s15, r9	@ int	@ w, w
 520              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 521              		.loc 1 56 48 view .LVU130
 522 0238 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 523              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 524              		.loc 1 56 13 view .LVU131
 525 023c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 526              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 527              		.loc 1 68 19 view .LVU132
 528 0240 41AA9FED 		vldr.32	s20, .L42+24	@ tmp183,
 529              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 530              		.loc 1 56 24 view .LVU133
 531 0244 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 532              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 533              		.loc 1 73 58 view .LVU134
 534 0248 408ADFED 		vldr.32	s17, .L42+28	@ tmp188,
 535 024c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.37, ivtmp.44,
 536 0250 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.47,
 537              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 538              		.loc 1 56 33 view .LVU135
 539 0254 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 540              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 541              		.loc 1 56 13 view .LVU136
 542 0258 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 543              	.LVL21:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 544              		.loc 1 59 9 is_stmt 1 view .LVU137
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 545              		.loc 1 59 9 is_stmt 0 view .LVU138
 546 025c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 547              	.LVL22:
 548              	.L28:
 549              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 550              		.loc 1 60 24 view .LVU139
 551 0260 FEFFFFEB 		bl	rand		@
 552              	.LVL23:
 553 0264 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.37
 554              	.LVL24:
  60:armwave.c     ****             noise *= noise;
 555              		.loc 1 60 13 is_stmt 1 view .LVU140
 556              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 557              		.loc 1 60 31 is_stmt 0 view .LVU141
 558 0268 7000FFE6 		uxth	r0, r0	@ tmp163,
 559              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 560              		.loc 1 60 41 view .LVU142
 561 026c 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 562 0270 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 563              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 564              		.loc 1 60 20 view .LVU143
 565 0274 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 566              	.LVL25:
  61:armwave.c     ****             noise *= noise;
 567              		.loc 1 61 13 is_stmt 1 view .LVU144
 568              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 569              		.loc 1 61 19 is_stmt 0 view .LVU145
 570 0278 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 571              	.LVL26:
  62:armwave.c     ****             noise *= noise;
 572              		.loc 1 62 13 is_stmt 1 view .LVU146
 573              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 574              		.loc 1 62 19 is_stmt 0 view .LVU147
 575 027c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 576              	.LVL27:
  63:armwave.c     **** 
 577              		.loc 1 63 13 is_stmt 1 view .LVU148
 578              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 579              		.loc 1 63 19 is_stmt 0 view .LVU149
 580 0280 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 581              	.LVL28:
  65:armwave.c     ****                 noise = -noise;
 582              		.loc 1 65 13 is_stmt 1 view .LVU150
 583              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 584              		.loc 1 65 17 is_stmt 0 view .LVU151
 585 0284 FEFFFFEB 		bl	rand		@
 586              	.LVL29:
  66:armwave.c     **** 
 587              		.loc 1 66 17 is_stmt 1 view .LVU152
 588              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 589              		.loc 1 65 15 is_stmt 0 view .LVU153
 590 0288 020910E3 		tst	r0, #32768	@,
 591              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 592              		.loc 1 66 23 view .LVU154
 593 028c 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 594              	.LVL30:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 595              		.loc 1 68 13 is_stmt 1 view .LVU155
  69:armwave.c     **** 
 596              		.loc 1 69 13 view .LVU156
 597              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 598              		.loc 1 69 23 is_stmt 0 view .LVU157
 599 0290 FEFFFFEB 		bl	rand		@
 600              	.LVL31:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 601              		.loc 1 71 13 is_stmt 1 view .LVU158
 602              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 603              		.loc 1 71 29 is_stmt 0 view .LVU159
 604 0294 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 605 0298 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 606 029c AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 607              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 608              		.loc 1 69 30 view .LVU160
 609 02a0 7000FFE6 		uxth	r0, r0	@ tmp173,
 610              	.LVL32:
 611              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 612              		.loc 1 69 40 view .LVU161
 613 02a4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 614 02a8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 615              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 616              		.loc 1 69 20 view .LVU162
 617 02ac 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 618              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 619              		.loc 1 71 60 view .LVU163
 620 02b0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 621              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 622              		.loc 1 71 18 view .LVU164
 623 02b4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 624 02b8 FEFFFFEB 		bl	sin		@
 625              	.LVL33:
  73:armwave.c     ****         }
 626              		.loc 1 73 13 is_stmt 1 view .LVU165
 627              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 628              		.loc 1 68 19 is_stmt 0 view .LVU166
 629 02bc 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 630              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 631              		.loc 1 73 58 view .LVU167
 632 02c0 236ADFED 		vldr.32	s13, .L42+32	@ tmp189,
 633              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 634              		.loc 1 73 56 view .LVU168
 635 02c4 236A9FED 		vldr.32	s12, .L42+36	@ tmp191,
 636 02c8 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 637              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 638              		.loc 1 71 77 view .LVU169
 639 02cc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 640              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 641              		.loc 1 71 70 view .LVU170
 642 02d0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 643              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 644              		.loc 1 71 77 view .LVU171
 645 02d4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 646              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 647              		.loc 1 71 15 view .LVU172
 648 02d8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 649              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 650              		.loc 1 73 58 view .LVU173
 651 02dc 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 652 02e0 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 653 02e4 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 654 02e8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 655 02ec 050000DA 		ble	.L25		@,
 656              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 657              		.loc 1 73 56 discriminator 1 view .LVU174
 658 02f0 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 659 02f4 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 660 02f8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 661 02fc E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 662 0300 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 663 0304 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 664              	.L25:
 665              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 666              		.loc 1 73 56 discriminator 12 view .LVU175
 667 0308 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 668              	.LVL34:
 669              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 670              		.loc 1 59 9 discriminator 12 view .LVU176
 671 030c 060055E1 		cmp	r5, r6	@ ivtmp.37, ivtmp.44
 672 0310 D2FFFF1A 		bne	.L28		@,
 673 0314 026B85E2 		add	r6, r5, #2048	@ ivtmp.44, ivtmp.37,
 674              	.LVL35:
 675              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 676              		.loc 1 55 5 discriminator 2 view .LVU177
 677 0318 0B0056E1 		cmp	r6, fp	@ ivtmp.44, _81
 678              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 679              		.loc 1 55 34 discriminator 2 view .LVU178
 680 031c 019089E2 		add	r9, r9, #1	@ w, w,
 681              	.LVL36:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 682              		.loc 1 55 34 discriminator 2 view .LVU179
 683 0320 028B48E2 		sub	r8, r8, #2048	@ ivtmp.47, ivtmp.47,
 684              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 685              		.loc 1 55 5 discriminator 2 view .LVU180
 686 0324 C2FFFF1A 		bne	.L29		@,
 687              	@ armwave.c:76: }
  76:armwave.c     **** 
 688              		.loc 1 76 1 view .LVU181
 689 0328 0CD08DE2 		add	sp, sp, #12	@,,
 690              		.cfi_def_cfa_offset 84
 691              		@ sp needed	@
 692 032c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 693              		.cfi_restore 90
 694              		.cfi_restore 91
 695              		.cfi_restore 88
 696              		.cfi_restore 89
 697              		.cfi_restore 86
 698              		.cfi_restore 87
 699              		.cfi_restore 84
 700              		.cfi_restore 85
 701              		.cfi_restore 82
 702              		.cfi_restore 83
 703              		.cfi_restore 80
 704              		.cfi_restore 81
 705              		.cfi_def_cfa_offset 36
 706              	.LVL37:
  76:armwave.c     **** 
 707              		.loc 1 76 1 view .LVU182
 708 0330 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 709              	.LVL38:
 710              	.L43:
  76:armwave.c     **** 
 711              		.loc 1 76 1 view .LVU183
 712              		.align	2
 713              	.L42:
 714 0334 0000803C 		.word	1015021568
 715 0338 0000003F 		.word	1056964608
 716 033c 0050C347 		.word	1203982336
 717 0340 C3F5C840 		.word	1086911939
 718 0344 0000003A 		.word	973078528
 719 0348 38FFC74A 		.word	1254620984
 720 034c 0000803F 		.word	1065353216
 721 0350 0000FE42 		.word	1123942400
 722 0354 00000043 		.word	1124073472
 723 0358 00007F43 		.word	1132396544
 724 035c 00000000 		.word	test_wave_buffer
 725 0360 00000000 		.word	.LANCHOR1
 726              		.cfi_endproc
 727              	.LFE57:
 729              		.align	2
 730              		.global	test_create_gamma
 731              		.syntax unified
 732              		.arm
 733              		.fpu vfp
 735              	test_create_gamma:
 736              	.LFB58:
  82:armwave.c     ****     int i;
 737              		.loc 1 82 1 is_stmt 1 view -0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 0
 740              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 741              		.loc 1 83 5 view .LVU185
  84:armwave.c     **** 
 742              		.loc 1 84 5 view .LVU186
 743              	.LVL39:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 744              		.loc 1 86 5 view .LVU187
 745              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 746              		.loc 1 82 1 is_stmt 0 view .LVU188
 747 0364 70402DE9 		push	{r4, r5, r6, lr}	@
 748              		.cfi_def_cfa_offset 16
 749              		.cfi_offset 4, -16
 750              		.cfi_offset 5, -12
 751              		.cfi_offset 6, -8
 752              		.cfi_offset 14, -4
 753 0368 068B2DED 		vpush.64	{d8, d9, d10}	@
 754              		.cfi_def_cfa_offset 40
 755              		.cfi_offset 80, -40
 756              		.cfi_offset 81, -36
 757              		.cfi_offset 82, -32
 758              		.cfi_offset 83, -28
 759              		.cfi_offset 84, -24
 760              		.cfi_offset 85, -20
 761 036c 68409FE5 		ldr	r4, .L48+20	@ ivtmp.55,
 762              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 763              		.loc 1 87 32 view .LVU189
 764 0370 18AA9FED 		vldr.32	s20, .L48+16	@ tmp128,
 765              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 766              		.loc 1 87 26 view .LVU190
 767 0374 139B9FED 		vldr.64	d9, .L48	@ tmp135,
 768              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 769              		.loc 1 87 49 view .LVU191
 770 0378 148B9FED 		vldr.64	d8, .L48+8	@ tmp131,
 771 037c 015084E2 		add	r5, r4, #1	@ _25, ivtmp.55,
 772 0380 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.55,
 773 0384 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 774              	.LVL40:
 775              	.L45:
  87:armwave.c     ****     }
 776              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU192
 777              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 778              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU193
 779 0388 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.55
 780              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 781              		.loc 1 87 26 discriminator 3 view .LVU194
 782 038c 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 783              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 784              		.loc 1 87 32 discriminator 3 view .LVU195
 785 0390 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 786 0394 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 787 0398 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 788              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 789              		.loc 1 87 26 discriminator 3 view .LVU196
 790 039c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 791 03a0 FEFFFFEB 		bl	pow		@
 792              	.LVL41:
 793              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 794              		.loc 1 87 49 discriminator 3 view .LVU197
 795 03a4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 796              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 797              		.loc 1 87 24 discriminator 3 view .LVU198
 798 03a8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 799 03ac 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 800 03b0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 801              	.LVL42:
 802              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 803              		.loc 1 86 5 discriminator 3 view .LVU199
 804 03b4 060054E1 		cmp	r4, r6	@ ivtmp.55, _26
 805 03b8 F2FFFF1A 		bne	.L45		@,
 806              	@ armwave.c:89: }
  89:armwave.c     **** 
 807              		.loc 1 89 1 view .LVU200
 808 03bc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 809              		.cfi_restore 84
 810              		.cfi_restore 85
 811              		.cfi_restore 82
 812              		.cfi_restore 83
 813              		.cfi_restore 80
 814              		.cfi_restore 81
 815              		.cfi_def_cfa_offset 16
 816 03c0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 817              	.LVL43:
 818              	.L49:
  89:armwave.c     **** 
 819              		.loc 1 89 1 view .LVU201
 820 03c4 0000A0E1 		.align	3
 821              	.L48:
 822 03c8 000000C0 		.word	-1073741824
 823 03cc CCCCEC3F 		.word	1072483532
 824 03d0 00000000 		.word	0
 825 03d4 00E06F40 		.word	1081073664
 826 03d8 00007F43 		.word	1132396544
 827 03dc FFFFFFFF 		.word	gamma_table-1
 828              		.cfi_endproc
 829              	.LFE58:
 831              		.align	2
 832              		.global	render_nonaa_to_buffer_1ch_slice
 833              		.syntax unified
 834              		.arm
 835              		.fpu vfp
 837              	render_nonaa_to_buffer_1ch_slice:
 838              	.LVL44:
 839              	.LFB59:
 100:armwave.c     ****     int yy, ys, w, scale_value;
 840              		.loc 1 100 1 is_stmt 1 view -0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 101:armwave.c     ****     uint32_t value, word;
 844              		.loc 1 101 5 view .LVU203
 102:armwave.c     ****     uint8_t *wave_base;
 845              		.loc 1 102 5 view .LVU204
 103:armwave.c     ****     uint8_t *write_buffer_base;
 846              		.loc 1 103 5 view .LVU205
 104:armwave.c     ****     uint8_t *write_buffer;
 847              		.loc 1 104 5 view .LVU206
 105:armwave.c     ****     
 848              		.loc 1 105 5 view .LVU207
 107:armwave.c     **** 
 849              		.loc 1 107 5 view .LVU208
 850              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 851              		.loc 1 107 40 is_stmt 0 view .LVU209
 852 03e0 F4209FE5 		ldr	r2, .L62	@ tmp257,
 853              	@ armwave.c:100: {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 854              		.loc 1 100 1 view .LVU210
 855 03e4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 856              		.cfi_def_cfa_offset 36
 857              		.cfi_offset 4, -36
 858              		.cfi_offset 5, -32
 859              		.cfi_offset 6, -28
 860              		.cfi_offset 7, -24
 861              		.cfi_offset 8, -20
 862              		.cfi_offset 9, -16
 863              		.cfi_offset 10, -12
 864              		.cfi_offset 11, -8
 865              		.cfi_offset 14, -4
 866              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 867              		.loc 1 110 5 view .LVU211
 868 03e8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 869              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 870              		.loc 1 107 63 view .LVU212
 871 03ec 286092E5 		ldr	r6, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 872              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 873              		.loc 1 110 5 view .LVU213
 874 03f0 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 875              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 876              		.loc 1 107 40 view .LVU214
 877 03f4 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 878              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 879              		.loc 1 107 63 view .LVU215
 880 03f8 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 881              	.LVL45:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 882              		.loc 1 110 5 is_stmt 1 view .LVU216
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 883              		.loc 1 110 5 is_stmt 0 view .LVU217
 884 03fc F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 885 0400 000051E3 		cmp	r1, #0	@ height,
 886 0404 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 887 0408 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 888              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 889              		.loc 1 110 11 view .LVU218
 890 040c 0080A0E3 		mov	r8, #0	@ w,
 891              	.LVL46:
 892              	.L54:
 111:armwave.c     **** 
 893              		.loc 1 111 9 is_stmt 1 view .LVU219
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 894              		.loc 1 115 9 view .LVU220
 895              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 896              		.loc 1 111 64 is_stmt 0 view .LVU221
 897 0410 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 898 0414 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 899              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 900              		.loc 1 115 16 view .LVU222
 901 0418 0000A0E3 		mov	r0, #0	@ yy,
 902 041c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 903 0420 037087E0 		add	r7, r7, r3	@ ivtmp.61, g_armwave_state.wave_buffer, tmp195
 904              	.LVL47:
 905              	.L53:
 116:armwave.c     **** 
 906              		.loc 1 116 13 is_stmt 1 view .LVU223
 907              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 908              		.loc 1 116 18 is_stmt 0 view .LVU224
 909 0424 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 910              	.LVL48:
 118:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 911              		.loc 1 118 13 is_stmt 1 view .LVU225
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 912              		.loc 1 119 17 view .LVU226
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 913              		.loc 1 120 17 view .LVU227
 121:armwave.c     ****                 word >>= 8;
 914              		.loc 1 121 17 view .LVU228
 915              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 916              		.loc 1 119 45 is_stmt 0 view .LVU229
 917 0428 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 918              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 919              		.loc 1 120 63 view .LVU230
 920 042c 285092E5 		ldr	r5, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 921              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 922              		.loc 1 119 37 view .LVU231
 923 0430 73E0EFE6 		uxtb	lr, r3	@ word, word
 924              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 925              		.loc 1 122 22 view .LVU232
 926 0434 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 927              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 928              		.loc 1 121 47 view .LVU233
 929 0438 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 930              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 931              		.loc 1 119 37 view .LVU234
 932 043c 7440EFE6 		uxtb	r4, r4	@ word, word
 933              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 934              		.loc 1 121 47 view .LVU235
 935 0440 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.bitdepth_height, yy, tmp201
 936              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 937              		.loc 1 120 63 view .LVU236
 938 0444 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 939              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 940              		.loc 1 122 22 view .LVU237
 941 0448 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 942              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 943              		.loc 1 121 47 view .LVU238
 944 044c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 945              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 946              		.loc 1 119 37 view .LVU239
 947 0450 7EE0EFE6 		uxtb	lr, lr	@ word, word
 948              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 949              		.loc 1 122 22 view .LVU240
 950 0454 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 951              	.LVL49:
 952              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 953              		.loc 1 121 47 view .LVU241
 954 0458 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 955 045c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 956              	.LVL50:
 122:armwave.c     ****             }
 957              		.loc 1 122 17 is_stmt 1 view .LVU242
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 958              		.loc 1 119 17 view .LVU243
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 959              		.loc 1 120 17 view .LVU244
 121:armwave.c     ****                 word >>= 8;
 960              		.loc 1 121 17 view .LVU245
 961              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 962              		.loc 1 119 45 is_stmt 0 view .LVU246
 963 0460 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 964              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 965              		.loc 1 120 63 view .LVU247
 966 0464 285092E5 		ldr	r5, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 967              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 968              		.loc 1 121 47 view .LVU248
 969 0468 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 970              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 971              		.loc 1 120 63 view .LVU249
 972 046c 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 973              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 974              		.loc 1 121 47 view .LVU250
 975 0470 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.bitdepth_height, tmp217, tmp215
 976              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 977              		.loc 1 120 63 view .LVU251
 978 0474 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 979              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 980              		.loc 1 115 37 view .LVU252
 981 0478 040080E2 		add	r0, r0, #4	@ yy, yy,
 982              	.LVL51:
 983              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 984              		.loc 1 121 47 view .LVU253
 985 047c 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 986              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 987              		.loc 1 115 9 view .LVU254
 988 0480 000051E1 		cmp	r1, r0	@ height, yy
 989              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 990              		.loc 1 121 47 view .LVU255
 991 0484 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 992 0488 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 993              	.LVL52:
 122:armwave.c     ****             }
 994              		.loc 1 122 17 is_stmt 1 view .LVU256
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 995              		.loc 1 119 17 view .LVU257
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 996              		.loc 1 120 17 view .LVU258
 121:armwave.c     ****                 word >>= 8;
 997              		.loc 1 121 17 view .LVU259
 998              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 999              		.loc 1 119 45 is_stmt 0 view .LVU260
 1000 048c 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1001              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1002              		.loc 1 120 63 view .LVU261
 1003 0490 284092E5 		ldr	r4, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1004              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 1005              		.loc 1 121 47 view .LVU262
 1006 0494 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 1007 0498 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.bitdepth_height, tmp232, tmp230
 1008 049c 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 1009 04a0 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 1010 04a4 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 122:armwave.c     ****             }
 1011              		.loc 1 122 17 is_stmt 1 view .LVU263
 1012              	.LVL53:
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 1013              		.loc 1 119 17 view .LVU264
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1014              		.loc 1 120 17 view .LVU265
 121:armwave.c     ****                 word >>= 8;
 1015              		.loc 1 121 17 view .LVU266
 1016              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 1017              		.loc 1 119 45 is_stmt 0 view .LVU267
 1018 04a8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1019              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1020              		.loc 1 120 63 view .LVU268
 1021 04ac 28E092E5 		ldr	lr, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1022              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 1023              		.loc 1 121 47 view .LVU269
 1024 04b0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 1025 04b4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.bitdepth_height, tmp246, tmp244
 1026 04b8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 1027 04bc 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 1028 04c0 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 122:armwave.c     ****             }
 1029              		.loc 1 122 17 is_stmt 1 view .LVU270
 1030              	.LVL54:
 1031              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1032              		.loc 1 115 9 is_stmt 0 view .LVU271
 1033 04c4 D6FFFF8A 		bhi	.L53		@,
 1034              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1035              		.loc 1 110 5 view .LVU272
 1036 04c8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 1037              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1038              		.loc 1 110 44 view .LVU273
 1039 04cc 018088E2 		add	r8, r8, #1	@ w, w,
 1040              	.LVL55:
 1041              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1042              		.loc 1 110 5 view .LVU274
 1043 04d0 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 1044 04d4 CDFFFF3A 		bcc	.L54		@,
 1045 04d8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1046              	.L63:
 1047              		.align	2
 1048              	.L62:
 1049 04dc 00000000 		.word	g_armwave_state
 1050              		.cfi_endproc
 1051              	.LFE59:
 1053              		.align	2
 1054              		.global	armwave_init
 1055              		.syntax unified
 1056              		.arm
 1057              		.fpu vfp
 1059              	armwave_init:
 1060              	.LFB60:
 129:armwave.c     ****     g_armwave_state.flags = 0;
 1061              		.loc 1 129 1 is_stmt 1 view -0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 130:armwave.c     **** }
 1066              		.loc 1 130 5 view .LVU276
 1067              	@ armwave.c:130:     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 1068              		.loc 1 130 27 is_stmt 0 view .LVU277
 1069 04e0 08309FE5 		ldr	r3, .L65	@ tmp110,
 1070 04e4 0020A0E3 		mov	r2, #0	@ tmp111,
 1071 04e8 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1072              	@ armwave.c:131: }
 131:armwave.c     **** 
 1073              		.loc 1 131 1 view .LVU278
 1074 04ec 1EFF2FE1 		bx	lr	@
 1075              	.L66:
 1076              		.align	2
 1077              	.L65:
 1078 04f0 00000000 		.word	g_armwave_state
 1079              		.cfi_endproc
 1080              	.LFE60:
 1082              		.align	2
 1083              		.global	armwave_setup_render
 1084              		.syntax unified
 1085              		.arm
 1086              		.fpu vfp
 1088              	armwave_setup_render:
 1089              	.LVL56:
 1090              	.LFB61:
 134:armwave.c     ****     uint32_t length, xx;
 1091              		.loc 1 134 1 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 16, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 135:armwave.c     ****     float points_per_pixel;
 1095              		.loc 1 135 5 view .LVU280
 136:armwave.c     **** 
 1096              		.loc 1 136 5 view .LVU281
 138:armwave.c     **** 
 1097              		.loc 1 138 5 view .LVU282
 1098              	@ armwave.c:134: {
 134:armwave.c     ****     uint32_t length, xx;
 1099              		.loc 1 134 1 is_stmt 0 view .LVU283
 1100 04f4 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1101              		.cfi_def_cfa_offset 24
 1102              		.cfi_offset 4, -24
 1103              		.cfi_offset 5, -20
 1104              		.cfi_offset 6, -16
 1105              		.cfi_offset 7, -12
 1106              		.cfi_offset 8, -8
 1107              		.cfi_offset 14, -4
 1108              	@ armwave.c:138:     assert(start_point < end_point);
 138:armwave.c     **** 
 1109              		.loc 1 138 5 view .LVU284
 1110 04f8 020051E1 		cmp	r1, r2	@ start_point, end_point
 1111              	@ armwave.c:134: {
 134:armwave.c     ****     uint32_t length, xx;
 1112              		.loc 1 134 1 view .LVU285
 1113 04fc 028B2DED 		vpush.64	{d8}	@
 1114              		.cfi_def_cfa_offset 32
 1115              		.cfi_offset 80, -32
 1116              		.cfi_offset 81, -28
 1117              	@ armwave.c:134: {
 134:armwave.c     ****     uint32_t length, xx;
 1118              		.loc 1 134 1 view .LVU286
 1119 0500 0170A0E1 		mov	r7, r1	@ start_point, start_point
 1120 0504 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1121 0508 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 1122              	.LVL57:
 134:armwave.c     ****     uint32_t length, xx;
 1123              		.loc 1 134 1 view .LVU287
 1124 050c 24609DE5 		ldr	r6, [sp, #36]	@ target_width, target_width
 1125 0510 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1126              	.LVL58:
 1127              	@ armwave.c:138:     assert(start_point < end_point);
 138:armwave.c     **** 
 1128              		.loc 1 138 5 view .LVU288
 1129 0514 6F00002A 		bcs	.L83		@,
 141:armwave.c     **** 
 1130              		.loc 1 141 5 is_stmt 1 view .LVU289
 1131              	@ armwave.c:141:     g_armwave_state.wave_buffer = wave_buffer;
 141:armwave.c     **** 
 1132              		.loc 1 141 33 is_stmt 0 view .LVU290
 1133 0518 D0419FE5 		ldr	r4, .L88+4	@ tmp228,
 1134              	@ armwave.c:144:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 144:armwave.c     **** 
 1135              		.loc 1 144 5 view .LVU291
 1136 051c 01CC42E2 		sub	ip, r2, #256	@ tmp154, target_height,
 1137 0520 01CCDCE3 		bics	ip, ip, #256	@ tmp230, tmp154,
 1138              	@ armwave.c:141:     g_armwave_state.wave_buffer = wave_buffer;
 141:armwave.c     **** 
 1139              		.loc 1 141 33 view .LVU292
 1140 0524 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 144:armwave.c     **** 
 1141              		.loc 1 144 5 is_stmt 1 view .LVU293
 1142 0528 4C00000A 		beq	.L69		@,
 1143              	@ armwave.c:144:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 144:armwave.c     **** 
 1144              		.loc 1 144 5 is_stmt 0 discriminator 1 view .LVU294
 1145 052c 010B42E2 		sub	r0, r2, #1024	@ tmp156, target_height,
 1146              	.LVL59:
 144:armwave.c     **** 
 1147              		.loc 1 144 5 discriminator 1 view .LVU295
 1148 0530 010BD0E3 		bics	r0, r0, #1024	@ tmp231, tmp156,
 1149 0534 5800001A 		bne	.L84		@,
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 1150              		.loc 1 146 5 is_stmt 1 view .LVU296
 152:armwave.c     ****         g_armwave_state.row_shift = 10;
 1151              		.loc 1 152 12 view .LVU297
 1152              	@ armwave.c:152:     } else if(target_height == 1024) {
 152:armwave.c     ****         g_armwave_state.row_shift = 10;
 1153              		.loc 1 152 14 is_stmt 0 view .LVU298
 1154 0538 010B52E3 		cmp	r2, #1024	@ target_height,
 1155 053c 5100000A 		beq	.L85		@,
 155:armwave.c     ****         g_armwave_state.row_shift = 11;
 1156              		.loc 1 155 12 is_stmt 1 view .LVU299
 1157              	@ armwave.c:155:     } else if(target_height == 2048) {
 155:armwave.c     ****         g_armwave_state.row_shift = 11;
 1158              		.loc 1 155 14 is_stmt 0 view .LVU300
 1159 0540 020B52E3 		cmp	r2, #2048	@ target_height,
 156:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1160              		.loc 1 156 9 is_stmt 1 view .LVU301
 1161              	@ armwave.c:156:         g_armwave_state.row_shift = 11;
 156:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1162              		.loc 1 156 35 is_stmt 0 view .LVU302
 1163 0544 0B00A003 		moveq	r0, #11	@ tmp174,
 1164              	@ armwave.c:157:         g_armwave_state.row_mask = 0x7ff;
 157:armwave.c     ****     } 
 1165              		.loc 1 157 34 view .LVU303
 1166 0548 A4C19F05 		ldreq	ip, .L88+8	@ tmp176,
 1167              	@ armwave.c:156:         g_armwave_state.row_shift = 11;
 156:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1168              		.loc 1 156 35 view .LVU304
 1169 054c 44008405 		streq	r0, [r4, #68]	@ tmp174, g_armwave_state.row_shift
 157:armwave.c     ****     } 
 1170              		.loc 1 157 9 is_stmt 1 view .LVU305
 1171              	@ armwave.c:157:         g_armwave_state.row_mask = 0x7ff;
 157:armwave.c     ****     } 
 1172              		.loc 1 157 34 is_stmt 0 view .LVU306
 1173 0550 48C08405 		streq	ip, [r4, #72]	@ tmp176, g_armwave_state.row_mask
 1174              	.L72:
 161:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1175              		.loc 1 161 5 is_stmt 1 view .LVU307
 1176              	@ armwave.c:165:     g_armwave_state.size = target_height * target_width;
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1177              		.loc 1 165 42 is_stmt 0 view .LVU308
 1178 0554 96020EE0 		mul	lr, r6, r2	@ tmp183, target_width, target_height
 1179              	@ armwave.c:167:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 1180              		.loc 1 167 68 view .LVU309
 1181 0558 06C4A0E1 		lsl	ip, r6, #8	@ _9, target_width,
 1182              	@ armwave.c:162:     g_armwave_state.vscale = target_height / 256;
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1183              		.loc 1 162 44 view .LVU310
 1184 055c 2204A0E1 		lsr	r0, r2, #8	@ tmp179, target_height,
 1185              	@ armwave.c:163:     g_armwave_state.wave_stride = wave_stride;
 163:armwave.c     ****     g_armwave_state.waves = waves;
 1186              		.loc 1 163 33 view .LVU311
 1187 0560 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1188              	@ armwave.c:164:     g_armwave_state.waves = waves;
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1189              		.loc 1 164 27 view .LVU312
 1190 0564 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1191              	@ armwave.c:162:     g_armwave_state.vscale = target_height / 256;
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1192              		.loc 1 162 28 view .LVU313
 1193 0568 1C0084E5 		str	r0, [r4, #28]	@ tmp179, g_armwave_state.vscale
 1194              	@ armwave.c:166:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1195              		.loc 1 166 37 view .LVU314
 1196 056c 013CA0E3 		mov	r3, #256	@ tmp185,
 1197              	.LVL60:
 1198              	@ armwave.c:171:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 171:armwave.c     **** 
 1199              		.loc 1 171 5 view .LVU315
 1200 0570 0C10A0E1 		mov	r1, ip	@, _9
 1201 0574 7C019FE5 		ldr	r0, .L88+12	@,
 1202              	@ armwave.c:166:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1203              		.loc 1 166 37 view .LVU316
 1204 0578 283084E5 		str	r3, [r4, #40]	@ tmp185, g_armwave_state.bitdepth_height
 1205              	@ armwave.c:161:     g_armwave_state.xstride = target_height;
 161:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1206              		.loc 1 161 29 view .LVU317
 1207 057c 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1208              		.loc 1 162 5 is_stmt 1 view .LVU318
 163:armwave.c     ****     g_armwave_state.waves = waves;
 1209              		.loc 1 163 5 view .LVU319
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1210              		.loc 1 164 5 view .LVU320
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1211              		.loc 1 165 5 view .LVU321
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1212              		.loc 1 166 5 view .LVU322
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 1213              		.loc 1 167 5 view .LVU323
 168:armwave.c     ****     g_armwave_state.target_height = target_height;
 1214              		.loc 1 168 5 view .LVU324
 169:armwave.c     **** 
 1215              		.loc 1 169 5 view .LVU325
 171:armwave.c     **** 
 1216              		.loc 1 171 5 view .LVU326
 1217              	@ armwave.c:168:     g_armwave_state.target_width = target_width;
 168:armwave.c     ****     g_armwave_state.target_height = target_height;
 1218              		.loc 1 168 34 is_stmt 0 view .LVU327
 1219 0580 3C6084E5 		str	r6, [r4, #60]	@ target_width, g_armwave_state.target_width
 1220              	@ armwave.c:169:     g_armwave_state.target_height = target_height;
 169:armwave.c     **** 
 1221              		.loc 1 169 35 view .LVU328
 1222 0584 402084E5 		str	r2, [r4, #64]	@ target_height, g_armwave_state.target_height
 1223              	@ armwave.c:165:     g_armwave_state.size = target_height * target_width;
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1224              		.loc 1 165 26 view .LVU329
 1225 0588 38E084E5 		str	lr, [r4, #56]	@ tmp183, g_armwave_state.size
 1226              	@ armwave.c:167:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 1227              		.loc 1 167 34 view .LVU330
 1228 058c 34C084E5 		str	ip, [r4, #52]	@ _9, g_armwave_state.ch_buff_size
 1229              	@ armwave.c:171:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 171:armwave.c     **** 
 1230              		.loc 1 171 5 view .LVU331
 1231 0590 FEFFFFEB 		bl	printf		@
 1232              	.LVL61:
 176:armwave.c     **** 
 1233              		.loc 1 176 5 is_stmt 1 view .LVU332
 1234              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 178:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1235              		.loc 1 178 23 is_stmt 0 view .LVU333
 1236 0594 040094E5 		ldr	r0, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 1237              	@ armwave.c:176:     g_armwave_state.slice_height = 64;  
 176:armwave.c     **** 
 1238              		.loc 1 176 34 view .LVU334
 1239 0598 4030A0E3 		mov	r3, #64	@ tmp191,
 1240              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 178:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1241              		.loc 1 178 7 view .LVU335
 1242 059c 000050E3 		cmp	r0, #0	@ _10,
 1243              	@ armwave.c:176:     g_armwave_state.slice_height = 64;  
 176:armwave.c     **** 
 1244              		.loc 1 176 34 view .LVU336
 1245 05a0 2C3084E5 		str	r3, [r4, #44]	@ tmp191, g_armwave_state.slice_height
 178:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1246              		.loc 1 178 5 is_stmt 1 view .LVU337
 1247              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 178:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1248              		.loc 1 178 7 is_stmt 0 view .LVU338
 1249 05a4 0000000A 		beq	.L74		@,
 179:armwave.c     **** 
 1250              		.loc 1 179 9 is_stmt 1 view .LVU339
 1251 05a8 FEFFFFEB 		bl	free		@
 1252              	.LVL62:
 1253              	.L74:
 181:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1254              		.loc 1 181 5 view .LVU340
 1255              	@ armwave.c:181:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 181:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1256              		.loc 1 181 34 is_stmt 0 view .LVU341
 1257 05ac 0110A0E3 		mov	r1, #1	@,
 1258 05b0 340094E5 		ldr	r0, [r4, #52]	@, g_armwave_state.ch_buff_size
 1259 05b4 FEFFFFEB 		bl	calloc		@
 1260              	.LVL63:
 1261              	@ armwave.c:182:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 182:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1262              		.loc 1 182 33 view .LVU342
 1263 05b8 3C219FE5 		ldr	r2, .L88+16	@ tmp198,
 1264              	@ armwave.c:184:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 184:armwave.c     **** 
 1265              		.loc 1 184 33 view .LVU343
 1266 05bc FA30A0E3 		mov	r3, #250	@ tmp201,
 1267              	@ armwave.c:182:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 182:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1268              		.loc 1 182 33 view .LVU344
 1269 05c0 502084E5 		str	r2, [r4, #80]	@ tmp198, MEM[(short int *)&g_armwave_state + 80B]
 1270              	@ armwave.c:184:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 184:armwave.c     **** 
 1271              		.loc 1 184 33 view .LVU345
 1272 05c4 B435C4E1 		strh	r3, [r4, #84]	@ movhi	@ tmp201, g_armwave_state.ch1_color.b
 1273              	@ armwave.c:186:     assert(g_armwave_state.ch1_buffer != NULL);
 186:armwave.c     **** 
 1274              		.loc 1 186 5 view .LVU346
 1275 05c8 000050E3 		cmp	r0, #0	@ tmp195,
 1276              	@ armwave.c:181:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 181:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1277              		.loc 1 181 32 view .LVU347
 1278 05cc 040084E5 		str	r0, [r4, #4]	@ tmp195, g_armwave_state.ch1_buffer
 182:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1279              		.loc 1 182 5 is_stmt 1 view .LVU348
 183:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1280              		.loc 1 183 5 view .LVU349
 184:armwave.c     **** 
 1281              		.loc 1 184 5 view .LVU350
 186:armwave.c     **** 
 1282              		.loc 1 186 5 view .LVU351
 1283 05d0 3600000A 		beq	.L86		@,
 189:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1284              		.loc 1 189 5 view .LVU352
 1285              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1286              		.loc 1 190 34 is_stmt 0 view .LVU353
 1287 05d4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1288              	@ armwave.c:189:     length = end_point - start_point;
 189:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1289              		.loc 1 189 12 view .LVU354
 1290 05d8 075045E0 		sub	r5, r5, r7	@ length, end_point, start_point
 1291              	.LVL64:
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1292              		.loc 1 190 5 is_stmt 1 view .LVU355
 1293              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     **** 
 1294              		.loc 1 192 40 is_stmt 0 view .LVU356
 1295 05dc 8500A0E1 		lsl	r0, r5, #1	@, length,
 1296              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1297              		.loc 1 190 34 view .LVU357
 1298 05e0 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp206, target_width
 1299              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1300              		.loc 1 190 31 view .LVU358
 1301 05e4 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1302 05e8 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp205, length
 1303              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1304              		.loc 1 191 60 view .LVU359
 1305 05ec 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp234, g_armwave_state.slice_height
 1306 05f0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp209, tmp234
 1307              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1308              		.loc 1 190 22 view .LVU360
 1309 05f4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp205, tmp206
 1310              	.LVL65:
 191:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1311              		.loc 1 191 5 is_stmt 1 view .LVU361
 1312              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1313              		.loc 1 191 60 is_stmt 0 view .LVU362
 1314 05f8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp211, tmp209, points_per_pixel
 1315              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1316              		.loc 1 191 41 view .LVU363
 1317 05fc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp212, tmp211
 1318 0600 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp212, g_armwave_state.slice_record_height
 192:armwave.c     **** 
 1319              		.loc 1 192 5 is_stmt 1 view .LVU364
 1320              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     **** 
 1321              		.loc 1 192 40 is_stmt 0 view .LVU365
 1322 0604 FEFFFFEB 		bl	malloc		@
 1323              	.LVL66:
 1324              	@ armwave.c:194:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 194:armwave.c     **** 
 1325              		.loc 1 194 5 view .LVU366
 1326 0608 000050E3 		cmp	r0, #0	@ tmp214,
 1327              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     **** 
 1328              		.loc 1 192 38 view .LVU367
 1329 060c 680084E5 		str	r0, [r4, #104]	@ tmp214, g_armwave_state.xcoord_to_xpixel
 194:armwave.c     **** 
 1330              		.loc 1 194 5 is_stmt 1 view .LVU368
 1331 0610 2B00000A 		beq	.L87		@,
 1332              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1333              		.loc 1 197 54 is_stmt 0 view .LVU369
 1334 0614 347ADFED 		vldr.32	s15, .L88	@ tmp219,
 1335 0618 020040E2 		sub	r0, r0, #2	@ ivtmp.73, tmp214,
 1336              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1337              		.loc 1 196 12 view .LVU370
 1338 061c 0030A0E3 		mov	r3, #0	@ xx,
 1339              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1340              		.loc 1 197 54 view .LVU371
 1341 0620 887A87EE 		vdiv.f32	s14, s15, s16	@ _21, tmp219, points_per_pixel
 1342              	.L77:
 1343              	.LVL67:
 197:armwave.c     **** 
 1344              		.loc 1 197 9 is_stmt 1 discriminator 3 view .LVU372
 1345              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1346              		.loc 1 197 74 is_stmt 0 discriminator 3 view .LVU373
 1347 0624 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1348              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1349              		.loc 1 196 32 discriminator 3 view .LVU374
 1350 0628 013083E2 		add	r3, r3, #1	@ xx, xx,
 1351              	.LVL68:
 1352              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1353              		.loc 1 196 5 discriminator 3 view .LVU375
 1354 062c 030055E1 		cmp	r5, r3	@ length, xx
 1355              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1356              		.loc 1 197 74 discriminator 3 view .LVU376
 1357 0630 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, xx
 1358 0634 877A67EE 		vmul.f32	s15, s15, s14	@ tmp221, tmp220, _21
 1359              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1360              		.loc 1 197 46 discriminator 3 view .LVU377
 1361 0638 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp222, tmp221
 1362 063c 902A17EE 		vmov	r2, s15	@ int	@ tmp222, tmp222
 1363 0640 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp222, MEM[base: _81, offset: 0B]
 1364              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1365              		.loc 1 196 5 discriminator 3 view .LVU378
 1366 0644 F6FFFF1A 		bne	.L77		@,
 202:armwave.c     **** }
 1367              		.loc 1 202 5 is_stmt 1 view .LVU379
 1368              	@ armwave.c:202:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 202:armwave.c     **** }
 1369              		.loc 1 202 34 is_stmt 0 view .LVU380
 1370 0648 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 1371 064c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1372 0650 FEFFFFEB 		bl	malloc		@
 1373              	.LVL69:
 1374              	@ armwave.c:203: }
 1375              		.loc 1 203 1 view .LVU381
 1376 0654 028BBDEC 		vldm	sp!, {d8}	@
 1377              		.cfi_remember_state
 1378              		.cfi_restore 80
 1379              		.cfi_restore 81
 1380              		.cfi_def_cfa_offset 24
 1381              	.LVL70:
 1382              	@ armwave.c:202:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 202:armwave.c     **** }
 1383              		.loc 1 202 32 view .LVU382
 1384 0658 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 1385              	@ armwave.c:203: }
 1386              		.loc 1 203 1 view .LVU383
 1387 065c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1388              	.LVL71:
 1389              	.L69:
 1390              		.cfi_restore_state
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 1391              		.loc 1 146 5 is_stmt 1 view .LVU384
 1392              	@ armwave.c:146:     if(target_height == 256) {
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 1393              		.loc 1 146 7 is_stmt 0 view .LVU385
 1394 0660 010C52E3 		cmp	r2, #256	@ target_height,
 147:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1395              		.loc 1 147 9 is_stmt 1 view .LVU386
 1396              	@ armwave.c:147:         g_armwave_state.row_shift = 8;
 147:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1397              		.loc 1 147 35 is_stmt 0 view .LVU387
 1398 0664 08C0A003 		moveq	ip, #8	@ tmp162,
 1399              	@ armwave.c:151:         g_armwave_state.row_mask = 0x1ff;
 151:armwave.c     ****     } else if(target_height == 1024) {
 1400              		.loc 1 151 34 view .LVU388
 1401 0668 90C09F15 		ldrne	ip, .L88+20	@ tmp168,
 1402              	@ armwave.c:148:         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 1403              		.loc 1 148 34 view .LVU389
 1404 066c FF00A003 		moveq	r0, #255	@ tmp164,
 1405              	.LVL72:
 1406              	@ armwave.c:150:         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1407              		.loc 1 150 35 view .LVU390
 1408 0670 0900A013 		movne	r0, #9	@ tmp166,
 1409              	@ armwave.c:147:         g_armwave_state.row_shift = 8;
 147:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1410              		.loc 1 147 35 view .LVU391
 1411 0674 44C08405 		streq	ip, [r4, #68]	@ tmp162, g_armwave_state.row_shift
 148:armwave.c     ****     } else if(target_height == 512) {
 1412              		.loc 1 148 9 is_stmt 1 view .LVU392
 1413              	@ armwave.c:148:         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 1414              		.loc 1 148 34 is_stmt 0 view .LVU393
 1415 0678 48008405 		streq	r0, [r4, #72]	@ tmp164, g_armwave_state.row_mask
 149:armwave.c     ****         g_armwave_state.row_shift = 9;
 1416              		.loc 1 149 12 is_stmt 1 view .LVU394
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1417              		.loc 1 150 9 view .LVU395
 1418              	@ armwave.c:151:         g_armwave_state.row_mask = 0x1ff;
 151:armwave.c     ****     } else if(target_height == 1024) {
 1419              		.loc 1 151 34 is_stmt 0 view .LVU396
 1420 067c 48C08415 		strne	ip, [r4, #72]	@ tmp168, g_armwave_state.row_mask
 1421              	@ armwave.c:150:         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1422              		.loc 1 150 35 view .LVU397
 1423 0680 44008415 		strne	r0, [r4, #68]	@ tmp166, g_armwave_state.row_shift
 151:armwave.c     ****     } else if(target_height == 1024) {
 1424              		.loc 1 151 9 is_stmt 1 view .LVU398
 1425 0684 B2FFFFEA 		b	.L72		@
 1426              	.L85:
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1427              		.loc 1 153 9 view .LVU399
 1428              	@ armwave.c:154:         g_armwave_state.row_mask = 0x3ff;
 154:armwave.c     ****     } else if(target_height == 2048) {
 1429              		.loc 1 154 34 is_stmt 0 view .LVU400
 1430 0688 74C09FE5 		ldr	ip, .L88+24	@ tmp172,
 1431              	@ armwave.c:153:         g_armwave_state.row_shift = 10;
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1432              		.loc 1 153 35 view .LVU401
 1433 068c 0A00A0E3 		mov	r0, #10	@ tmp170,
 1434              	@ armwave.c:154:         g_armwave_state.row_mask = 0x3ff;
 154:armwave.c     ****     } else if(target_height == 2048) {
 1435              		.loc 1 154 34 view .LVU402
 1436 0690 48C084E5 		str	ip, [r4, #72]	@ tmp172, g_armwave_state.row_mask
 1437              	@ armwave.c:153:         g_armwave_state.row_shift = 10;
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1438              		.loc 1 153 35 view .LVU403
 1439 0694 440084E5 		str	r0, [r4, #68]	@ tmp170, g_armwave_state.row_shift
 154:armwave.c     ****     } else if(target_height == 2048) {
 1440              		.loc 1 154 9 is_stmt 1 view .LVU404
 1441 0698 ADFFFFEA 		b	.L72		@
 1442              	.L84:
 144:armwave.c     **** 
 1443              		.loc 1 144 5 discriminator 2 view .LVU405
 1444 069c 64309FE5 		ldr	r3, .L88+28	@,
 1445              	.LVL73:
 144:armwave.c     **** 
 1446              		.loc 1 144 5 is_stmt 0 discriminator 2 view .LVU406
 1447 06a0 9020A0E3 		mov	r2, #144	@,
 1448 06a4 60109FE5 		ldr	r1, .L88+32	@,
 1449 06a8 60009FE5 		ldr	r0, .L88+36	@,
 1450 06ac FEFFFFEB 		bl	__assert_fail		@
 1451              	.LVL74:
 1452              	.L86:
 186:armwave.c     **** 
 1453              		.loc 1 186 5 is_stmt 1 discriminator 1 view .LVU407
 1454 06b0 50309FE5 		ldr	r3, .L88+28	@,
 1455 06b4 BA20A0E3 		mov	r2, #186	@,
 1456 06b8 4C109FE5 		ldr	r1, .L88+32	@,
 1457 06bc 50009FE5 		ldr	r0, .L88+40	@,
 1458 06c0 FEFFFFEB 		bl	__assert_fail		@
 1459              	.LVL75:
 1460              	.L87:
 194:armwave.c     **** 
 1461              		.loc 1 194 5 discriminator 1 view .LVU408
 1462 06c4 3C309FE5 		ldr	r3, .L88+28	@,
 1463 06c8 C220A0E3 		mov	r2, #194	@,
 1464 06cc 38109FE5 		ldr	r1, .L88+32	@,
 1465 06d0 40009FE5 		ldr	r0, .L88+44	@,
 1466 06d4 FEFFFFEB 		bl	__assert_fail		@
 1467              	.LVL76:
 1468              	.L83:
 138:armwave.c     **** 
 1469              		.loc 1 138 5 discriminator 1 view .LVU409
 1470 06d8 28309FE5 		ldr	r3, .L88+28	@,
 1471              	.LVL77:
 138:armwave.c     **** 
 1472              		.loc 1 138 5 is_stmt 0 discriminator 1 view .LVU410
 1473 06dc 8A20A0E3 		mov	r2, #138	@,
 1474 06e0 24109FE5 		ldr	r1, .L88+32	@,
 1475 06e4 30009FE5 		ldr	r0, .L88+48	@,
 1476              	.LVL78:
 138:armwave.c     **** 
 1477              		.loc 1 138 5 discriminator 1 view .LVU411
 1478 06e8 FEFFFFEB 		bl	__assert_fail		@
 1479              	.LVL79:
 1480              	.L89:
 1481              		.align	2
 1482              	.L88:
 1483 06ec 0000803F 		.word	1065353216
 1484 06f0 00000000 		.word	g_armwave_state
 1485 06f4 FF070000 		.word	2047
 1486 06f8 6C000000 		.word	.LC2
 1487 06fc F609F406 		.word	116656630
 1488 0700 FF010000 		.word	511
 1489 0704 FF030000 		.word	1023
 1490 0708 00000000 		.word	.LANCHOR0
 1491 070c 00000000 		.word	.LC0
 1492 0710 0C000000 		.word	.LC1
 1493 0714 80000000 		.word	.LC3
 1494 0718 A4000000 		.word	.LC4
 1495 071c D0000000 		.word	.LC5
 1496              		.cfi_endproc
 1497              	.LFE61:
 1499              		.align	2
 1500              		.global	armwave_clear_buffer
 1501              		.syntax unified
 1502              		.arm
 1503              		.fpu vfp
 1505              	armwave_clear_buffer:
 1506              	.LVL80:
 1507              	.LFB62:
 204:armwave.c     **** 
 205:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 206:armwave.c     **** {
 1508              		.loc 1 206 1 is_stmt 1 view -0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              		@ link register save eliminated.
 207:armwave.c     ****     // Flags ignored, only one buffer cleared
 208:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1513              		.loc 1 208 5 view .LVU413
 1514 0720 0C309FE5 		ldr	r3, .L91	@ tmp113,
 1515 0724 0010A0E3 		mov	r1, #0	@,
 1516 0728 382093E5 		ldr	r2, [r3, #56]	@, g_armwave_state.size
 1517 072c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1518              	.LVL81:
 1519              		.loc 1 208 5 is_stmt 0 view .LVU414
 1520 0730 FEFFFFEA 		b	memset		@
 1521              	.LVL82:
 1522              	.L92:
 1523              		.align	2
 1524              	.L91:
 1525 0734 00000000 		.word	g_armwave_state
 1526              		.cfi_endproc
 1527              	.LFE62:
 1529              		.align	2
 1530              		.global	armwave_fill_pixbuf_256
 1531              		.syntax unified
 1532              		.arm
 1533              		.fpu vfp
 1535              	armwave_fill_pixbuf_256:
 1536              	.LVL83:
 1537              	.LFB63:
 209:armwave.c     **** }
 210:armwave.c     **** 
 211:armwave.c     **** /*
 212:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 213:armwave.c     ****  */
 214:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 215:armwave.c     **** {
 1538              		.loc 1 215 1 is_stmt 1 view -0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 8
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 216:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1542              		.loc 1 216 5 view .LVU416
 217:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1543              		.loc 1 217 5 view .LVU417
 218:armwave.c     ****     uint8_t r, g, b, value;
 1544              		.loc 1 218 5 view .LVU418
 219:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1545              		.loc 1 219 5 view .LVU419
 1546              	@ armwave.c:215: {
 215:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1547              		.loc 1 215 1 is_stmt 0 view .LVU420
 1548 0738 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1549              		.cfi_def_cfa_offset 36
 1550              		.cfi_offset 4, -36
 1551              		.cfi_offset 5, -32
 1552              		.cfi_offset 6, -28
 1553              		.cfi_offset 7, -24
 1554              		.cfi_offset 8, -20
 1555              		.cfi_offset 9, -16
 1556              		.cfi_offset 10, -12
 1557              		.cfi_offset 11, -8
 1558              		.cfi_offset 14, -4
 1559              	@ armwave.c:223:     assert(out_buffer != NULL);
 220:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 221:armwave.c     ****     uint32_t offset;
 222:armwave.c     **** 
 223:armwave.c     ****     assert(out_buffer != NULL);
 1560              		.loc 1 223 5 view .LVU421
 1561 073c 000050E3 		cmp	r0, #0	@ out_buffer
 1562              	@ armwave.c:219:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 219:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1563              		.loc 1 219 15 view .LVU422
 1564 0740 44529FE5 		ldr	r5, .L120	@ tmp361,
 1565              	@ armwave.c:215: {
 215:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1566              		.loc 1 215 1 view .LVU423
 1567 0744 0CD04DE2 		sub	sp, sp, #12	@,,
 1568              		.cfi_def_cfa_offset 48
 1569              	@ armwave.c:219:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 219:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1570              		.loc 1 219 15 view .LVU424
 1571 0748 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1572              	.LVL84:
 220:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1573              		.loc 1 220 5 is_stmt 1 view .LVU425
 221:armwave.c     **** 
 1574              		.loc 1 221 5 view .LVU426
 1575              		.loc 1 223 5 view .LVU427
 1576 074c 8900000A 		beq	.L118		@,
 224:armwave.c     **** 
 225:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 226:armwave.c     **** 
 227:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 1577              		.loc 1 227 5 view .LVU428
 1578              	@ armwave.c:227:     npix = g_armwave_state.target_width * 256;
 1579              		.loc 1 227 41 is_stmt 0 view .LVU429
 1580 0750 3CC095E5 		ldr	ip, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1581 0754 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 1582              	.LVL85:
 228:armwave.c     **** 
 229:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1583              		.loc 1 229 5 is_stmt 1 view .LVU430
 1584              		.loc 1 229 5 is_stmt 0 view .LVU431
 1585 0758 00005CE3 		cmp	ip, #0	@ npix,
 1586 075c 0A0000DA 		ble	.L93		@,
 1587              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 230:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 231:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 232:armwave.c     ****         // most normal waveforms.
 233:armwave.c     ****         wave_word = *base_32ptr++;
 234:armwave.c     **** 
 235:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 236:armwave.c     ****             for(i = 0; i < 4; i++) {
 237:armwave.c     ****                 value = wave_word & 0xff;
 238:armwave.c     ****                 wave_word >>= 8;
 239:armwave.c     **** 
 240:armwave.c     ****                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1588              		.loc 1 241 52 view .LVU432
 1589 0760 F0A5D5E1 		ldrsh	r10, [r5, #80]	@ _70, g_armwave_state.ch1_color.r
 1590              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1591              		.loc 1 242 52 view .LVU433
 1592 0764 F295D5E1 		ldrsh	r9, [r5, #82]	@ _76, g_armwave_state.ch1_color.g
 1593              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1594              		.loc 1 243 52 view .LVU434
 1595 0768 F4B5D5E1 		ldrsh	fp, [r5, #84]	@ _80, g_armwave_state.ch1_color.b
 1596              	@ armwave.c:229:     for(n = 0; n < npix; n += 4) {
 229:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1597              		.loc 1 229 11 view .LVU435
 1598 076c 0030A0E3 		mov	r3, #0	@ n,
 1599 0770 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 1600              	.LVL86:
 1601              	.L102:
 233:armwave.c     **** 
 1602              		.loc 1 233 9 is_stmt 1 view .LVU436
 1603              	@ armwave.c:233:         wave_word = *base_32ptr++;
 233:armwave.c     **** 
 1604              		.loc 1 233 19 is_stmt 0 view .LVU437
 1605 0774 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 1606              	.LVL87:
 235:armwave.c     ****             for(i = 0; i < 4; i++) {
 1607              		.loc 1 235 9 is_stmt 1 view .LVU438
 1608              	@ armwave.c:235:         if(COND_UNLIKELY(wave_word != 0)) {
 235:armwave.c     ****             for(i = 0; i < 4; i++) {
 1609              		.loc 1 235 11 is_stmt 0 view .LVU439
 1610 0778 000052E3 		cmp	r2, #0	@ wave_word,
 1611 077c 0400001A 		bne	.L119		@,
 1612              	.LVL88:
 1613              	.L97:
 1614              	@ armwave.c:229:     for(n = 0; n < npix; n += 4) {
 229:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1615              		.loc 1 229 28 discriminator 2 view .LVU440
 1616 0780 043083E2 		add	r3, r3, #4	@ n, n,
 1617              	.LVL89:
 1618              	@ armwave.c:229:     for(n = 0; n < npix; n += 4) {
 229:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1619              		.loc 1 229 5 discriminator 2 view .LVU441
 1620 0784 03005CE1 		cmp	ip, r3	@ npix, n
 1621 0788 F9FFFFCA 		bgt	.L102		@,
 1622              	.LVL90:
 1623              	.L93:
 1624              	@ armwave.c:262: }
 244:armwave.c     **** 
 245:armwave.c     ****                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 248:armwave.c     **** 
 249:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 250:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 252:armwave.c     ****                     // Is there a better way?
 253:armwave.c     ****                     nsub = n + i;
 254:armwave.c     ****                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 259:armwave.c     ****             }
 260:armwave.c     ****         } 
 261:armwave.c     ****     }
 262:armwave.c     **** }
 1625              		.loc 1 262 1 view .LVU442
 1626 078c 0CD08DE2 		add	sp, sp, #12	@,,
 1627              		.cfi_remember_state
 1628              		.cfi_def_cfa_offset 36
 1629              		@ sp needed	@
 1630 0790 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1631              	.LVL91:
 1632              	.L119:
 1633              		.cfi_restore_state
 237:armwave.c     ****                 wave_word >>= 8;
 1634              		.loc 1 237 17 is_stmt 1 view .LVU443
 238:armwave.c     **** 
 1635              		.loc 1 238 17 view .LVU444
 1636              	@ armwave.c:240:                 if(value != 0) {
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1637              		.loc 1 240 19 is_stmt 0 view .LVU445
 1638 0794 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 1639              	@ armwave.c:238:                 wave_word >>= 8;
 238:armwave.c     **** 
 1640              		.loc 1 238 27 view .LVU446
 1641 0798 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 1642              	.LVL92:
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1643              		.loc 1 240 17 is_stmt 1 view .LVU447
 1644              	@ armwave.c:240:                 if(value != 0) {
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1645              		.loc 1 240 19 is_stmt 0 view .LVU448
 1646 079c 1900000A 		beq	.L98		@,
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1647              		.loc 1 241 21 is_stmt 1 view .LVU449
 1648              	.LVL93:
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1649              		.loc 1 242 21 view .LVU450
 243:armwave.c     **** 
 1650              		.loc 1 243 21 view .LVU451
 245:armwave.c     ****                     g = MIN(gg, 255);
 1651              		.loc 1 245 21 view .LVU452
 246:armwave.c     ****                     b = MIN(bb, 255);
 1652              		.loc 1 246 21 view .LVU453
 247:armwave.c     **** 
 1653              		.loc 1 247 21 view .LVU454
 250:armwave.c     **** 
 1654              		.loc 1 250 21 view .LVU455
 253:armwave.c     ****                     xx = nsub & 0xff;
 1655              		.loc 1 253 21 view .LVU456
 254:armwave.c     ****                     yy = nsub >> 8;
 1656              		.loc 1 254 21 view .LVU457
 255:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1657              		.loc 1 255 21 view .LVU458
 256:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1658              		.loc 1 256 21 view .LVU459
 257:armwave.c     ****                 }
 1659              		.loc 1 257 21 view .LVU460
 1660              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     **** 
 1661              		.loc 1 243 55 is_stmt 0 view .LVU461
 1662 07a0 9B0604E0 		mul	r4, fp, r6	@ tmp277, _80, _72
 1663              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1664              		.loc 1 242 55 view .LVU462
 1665 07a4 990608E0 		mul	r8, r9, r6	@ tmp281, _76, _72
 1666              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     **** 
 1667              		.loc 1 243 24 view .LVU463
 1668 07a8 4444A0E1 		asr	r4, r4, #8	@ bb, tmp277,
 1669              	.LVL94:
 1670              	@ armwave.c:247:                     b = MIN(bb, 255);
 247:armwave.c     **** 
 1671              		.loc 1 247 25 view .LVU464
 1672 07ac FF0054E3 		cmp	r4, #255	@ bb,
 1673              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1674              		.loc 1 242 24 view .LVU465
 1675 07b0 4884A0E1 		asr	r8, r8, #8	@ gg, tmp281,
 1676              	.LVL95:
 1677              	@ armwave.c:247:                     b = MIN(bb, 255);
 247:armwave.c     **** 
 1678              		.loc 1 247 25 view .LVU466
 1679 07b4 FF40A0A3 		movge	r4, #255	@ bb,
 1680              	.LVL96:
 1681              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1682              		.loc 1 241 55 view .LVU467
 1683 07b8 960A06E0 		mul	r6, r6, r10	@ tmp287, _72, _70
 1684              	.LVL97:
 1685              	@ armwave.c:246:                     g = MIN(gg, 255);
 246:armwave.c     ****                     b = MIN(bb, 255);
 1686              		.loc 1 246 25 view .LVU468
 1687 07bc FF0058E3 		cmp	r8, #255	@ gg,
 1688 07c0 FF80A0A3 		movge	r8, #255	@ gg,
 1689              	.LVL98:
 1690              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1691              		.loc 1 241 24 view .LVU469
 1692 07c4 4664A0E1 		asr	r6, r6, #8	@ rr, tmp287,
 1693              	.LVL99:
 1694              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1695              		.loc 1 250 56 view .LVU470
 1696 07c8 0884A0E1 		lsl	r8, r8, #8	@ tmp282, gg,
 1697              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1698              		.loc 1 257 39 view .LVU471
 1699 07cc 3C0095E5 		ldr	r0, [r5, #60]	@ tmp373, g_armwave_state.target_width
 1700              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1701              		.loc 1 250 44 view .LVU472
 1702 07d0 0448A0E1 		lsl	r4, r4, #16	@ tmp278, bb,
 1703              	@ armwave.c:245:                     r = MIN(rr, 255);
 245:armwave.c     ****                     g = MIN(gg, 255);
 1704              		.loc 1 245 25 view .LVU473
 1705 07d4 FF0056E3 		cmp	r6, #255	@ rr,
 1706              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1707              		.loc 1 250 56 view .LVU474
 1708 07d8 7880FFE6 		uxth	r8, r8	@ tmp283, tmp282
 1709              	@ armwave.c:254:                     xx = nsub & 0xff;
 254:armwave.c     ****                     yy = nsub >> 8;
 1710              		.loc 1 254 24 view .LVU475
 1711 07dc 7370EFE6 		uxtb	r7, r3	@ xx, n
 1712              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1713              		.loc 1 250 44 view .LVU476
 1714 07e0 FF4804E2 		and	r4, r4, #16711680	@ tmp279, tmp278,
 1715              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1716              		.loc 1 250 51 view .LVU477
 1717 07e4 084084E1 		orr	r4, r4, r8	@ tmp285, tmp279, tmp283
 1718              	@ armwave.c:245:                     r = MIN(rr, 255);
 245:armwave.c     ****                     g = MIN(gg, 255);
 1719              		.loc 1 245 25 view .LVU478
 1720 07e8 FF60A0A3 		movge	r6, #255	@ rr,
 1721              	.LVL100:
 1722              	@ armwave.c:255:                     yy = nsub >> 8;
 255:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1723              		.loc 1 255 31 view .LVU479
 1724 07ec 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 1725              	.LVL101:
 1726              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1727              		.loc 1 257 39 view .LVU480
 1728 07f0 908727E0 		mla	r7, r0, r7, r8	@ tmp275, tmp373, xx, yy
 1729              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1730              		.loc 1 250 62 view .LVU481
 1731 07f4 7660EFE6 		uxtb	r6, r6	@ rr, rr
 1732              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1733              		.loc 1 257 49 view .LVU482
 1734 07f8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1735              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1736              		.loc 1 250 62 view .LVU483
 1737 07fc 066084E1 		orr	r6, r4, r6	@ tmp289, tmp285, rr
 1738              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1739              		.loc 1 250 26 view .LVU484
 1740 0800 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp289,
 1741              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1742              		.loc 1 257 49 view .LVU485
 1743 0804 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 1744              	.LVL102:
 1745              	.L98:
 237:armwave.c     ****                 wave_word >>= 8;
 1746              		.loc 1 237 17 is_stmt 1 view .LVU486
 238:armwave.c     **** 
 1747              		.loc 1 238 17 view .LVU487
 1748              	@ armwave.c:240:                 if(value != 0) {
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1749              		.loc 1 240 19 is_stmt 0 view .LVU488
 1750 0808 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 1751              	.LVL103:
 1752              	@ armwave.c:238:                 wave_word >>= 8;
 238:armwave.c     **** 
 1753              		.loc 1 238 27 view .LVU489
 1754 080c 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 1755              	.LVL104:
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1756              		.loc 1 240 17 is_stmt 1 view .LVU490
 1757              	@ armwave.c:240:                 if(value != 0) {
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1758              		.loc 1 240 19 is_stmt 0 view .LVU491
 1759 0810 1C00000A 		beq	.L99		@,
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1760              		.loc 1 241 21 is_stmt 1 view .LVU492
 1761              	.LVL105:
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1762              		.loc 1 242 21 view .LVU493
 243:armwave.c     **** 
 1763              		.loc 1 243 21 view .LVU494
 245:armwave.c     ****                     g = MIN(gg, 255);
 1764              		.loc 1 245 21 view .LVU495
 246:armwave.c     ****                     b = MIN(bb, 255);
 1765              		.loc 1 246 21 view .LVU496
 247:armwave.c     **** 
 1766              		.loc 1 247 21 view .LVU497
 250:armwave.c     **** 
 1767              		.loc 1 250 21 view .LVU498
 253:armwave.c     ****                     xx = nsub & 0xff;
 1768              		.loc 1 253 21 view .LVU499
 1769              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     **** 
 1770              		.loc 1 243 55 is_stmt 0 view .LVU500
 1771 0814 9E0B04E0 		mul	r4, lr, fp	@ tmp300, _118, _80
 1772              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1773              		.loc 1 242 55 view .LVU501
 1774 0818 9E0907E0 		mul	r7, lr, r9	@ tmp304, _118, _76
 1775              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     **** 
 1776              		.loc 1 243 24 view .LVU502
 1777 081c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp300,
 1778              	.LVL106:
 1779              	@ armwave.c:247:                     b = MIN(bb, 255);
 247:armwave.c     **** 
 1780              		.loc 1 247 25 view .LVU503
 1781 0820 FF0054E3 		cmp	r4, #255	@ bb,
 1782 0824 FF40A0A3 		movge	r4, #255	@ bb,
 1783              	.LVL107:
 1784              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1785              		.loc 1 241 55 view .LVU504
 1786 0828 9E0A0EE0 		mul	lr, lr, r10	@ tmp310, _118, _70
 1787              	.LVL108:
 1788              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1789              		.loc 1 242 24 view .LVU505
 1790 082c 4774A0E1 		asr	r7, r7, #8	@ gg, tmp304,
 1791              	.LVL109:
 1792              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1793              		.loc 1 250 44 view .LVU506
 1794 0830 0448A0E1 		lsl	r4, r4, #16	@ tmp301, bb,
 1795              	@ armwave.c:246:                     g = MIN(gg, 255);
 246:armwave.c     ****                     b = MIN(bb, 255);
 1796              		.loc 1 246 25 view .LVU507
 1797 0834 FF0057E3 		cmp	r7, #255	@ gg,
 1798 0838 016083E2 		add	r6, r3, #1	@ _158, n,
 254:armwave.c     ****                     yy = nsub >> 8;
 1799              		.loc 1 254 21 is_stmt 1 view .LVU508
 255:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1800              		.loc 1 255 21 view .LVU509
 256:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1801              		.loc 1 256 21 view .LVU510
 257:armwave.c     ****                 }
 1802              		.loc 1 257 21 view .LVU511
 1803              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1804              		.loc 1 250 44 is_stmt 0 view .LVU512
 1805 083c FF4804E2 		and	r4, r4, #16711680	@ tmp302, tmp301,
 1806              	@ armwave.c:246:                     g = MIN(gg, 255);
 246:armwave.c     ****                     b = MIN(bb, 255);
 1807              		.loc 1 246 25 view .LVU513
 1808 0840 FF70A0A3 		movge	r7, #255	@ gg,
 1809              	.LVL110:
 1810              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1811              		.loc 1 250 44 view .LVU514
 1812 0844 04408DE5 		str	r4, [sp, #4]	@ tmp302, %sfp
 1813              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1814              		.loc 1 257 39 view .LVU515
 1815 0848 3C4095E5 		ldr	r4, [r5, #60]	@ tmp376, g_armwave_state.target_width
 1816              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1817              		.loc 1 241 24 view .LVU516
 1818 084c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp310,
 1819              	.LVL111:
 1820              	@ armwave.c:254:                     xx = nsub & 0xff;
 254:armwave.c     ****                     yy = nsub >> 8;
 1821              		.loc 1 254 24 view .LVU517
 1822 0850 7600EFE6 		uxtb	r0, r6	@ xx, _158
 1823              	@ armwave.c:245:                     r = MIN(rr, 255);
 245:armwave.c     ****                     g = MIN(gg, 255);
 1824              		.loc 1 245 25 view .LVU518
 1825 0854 FF005EE3 		cmp	lr, #255	@ rr,
 1826              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1827              		.loc 1 250 56 view .LVU519
 1828 0858 0774A0E1 		lsl	r7, r7, #8	@ tmp305, gg,
 1829              	@ armwave.c:255:                     yy = nsub >> 8;
 255:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1830              		.loc 1 255 31 view .LVU520
 1831 085c 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 1832              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1833              		.loc 1 257 39 view .LVU521
 1834 0860 946026E0 		mla	r6, r4, r0, r6	@ tmp298, tmp376, xx, yy
 1835              	@ armwave.c:245:                     r = MIN(rr, 255);
 245:armwave.c     ****                     g = MIN(gg, 255);
 1836              		.loc 1 245 25 view .LVU522
 1837 0864 FFE0A0A3 		movge	lr, #255	@ rr,
 1838              	.LVL112:
 1839              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1840              		.loc 1 250 51 view .LVU523
 1841 0868 04009DE5 		ldr	r0, [sp, #4]	@ tmp302, %sfp
 1842              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1843              		.loc 1 250 56 view .LVU524
 1844 086c 7770FFE6 		uxth	r7, r7	@ tmp306, tmp305
 1845              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1846              		.loc 1 250 51 view .LVU525
 1847 0870 074080E1 		orr	r4, r0, r7	@ tmp308, tmp302, tmp306
 1848              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1849              		.loc 1 250 62 view .LVU526
 1850 0874 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1851              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1852              		.loc 1 257 49 view .LVU527
 1853 0878 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1854              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1855              		.loc 1 250 62 view .LVU528
 1856 087c 0EE084E1 		orr	lr, r4, lr	@ tmp312, tmp308, rr
 1857              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1858              		.loc 1 250 26 view .LVU529
 1859 0880 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp312,
 1860              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1861              		.loc 1 257 49 view .LVU530
 1862 0884 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 1863              	.LVL113:
 1864              	.L99:
 237:armwave.c     ****                 wave_word >>= 8;
 1865              		.loc 1 237 17 is_stmt 1 view .LVU531
 238:armwave.c     **** 
 1866              		.loc 1 238 17 view .LVU532
 1867              	@ armwave.c:240:                 if(value != 0) {
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1868              		.loc 1 240 19 is_stmt 0 view .LVU533
 1869 0888 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 1870              	@ armwave.c:238:                 wave_word >>= 8;
 238:armwave.c     **** 
 1871              		.loc 1 238 27 view .LVU534
 1872 088c 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 1873              	.LVL114:
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1874              		.loc 1 240 17 is_stmt 1 view .LVU535
 1875              	@ armwave.c:240:                 if(value != 0) {
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1876              		.loc 1 240 19 is_stmt 0 view .LVU536
 1877 0890 1A00000A 		beq	.L100		@,
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1878              		.loc 1 241 21 is_stmt 1 view .LVU537
 1879              	.LVL115:
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1880              		.loc 1 242 21 view .LVU538
 243:armwave.c     **** 
 1881              		.loc 1 243 21 view .LVU539
 245:armwave.c     ****                     g = MIN(gg, 255);
 1882              		.loc 1 245 21 view .LVU540
 246:armwave.c     ****                     b = MIN(bb, 255);
 1883              		.loc 1 246 21 view .LVU541
 247:armwave.c     **** 
 1884              		.loc 1 247 21 view .LVU542
 250:armwave.c     **** 
 1885              		.loc 1 250 21 view .LVU543
 253:armwave.c     ****                     xx = nsub & 0xff;
 1886              		.loc 1 253 21 view .LVU544
 1887              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     **** 
 1888              		.loc 1 243 55 is_stmt 0 view .LVU545
 1889 0894 9E0B04E0 		mul	r4, lr, fp	@ tmp323, _164, _80
 1890              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1891              		.loc 1 242 55 view .LVU546
 1892 0898 9E0906E0 		mul	r6, lr, r9	@ tmp327, _164, _76
 1893              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     **** 
 1894              		.loc 1 243 24 view .LVU547
 1895 089c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp323,
 1896              	.LVL116:
 1897              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1898              		.loc 1 241 55 view .LVU548
 1899 08a0 9E0A0EE0 		mul	lr, lr, r10	@ tmp333, _164, _70
 1900              	.LVL117:
 1901              	@ armwave.c:247:                     b = MIN(bb, 255);
 247:armwave.c     **** 
 1902              		.loc 1 247 25 view .LVU549
 1903 08a4 FF0054E3 		cmp	r4, #255	@ bb,
 1904              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1905              		.loc 1 242 24 view .LVU550
 1906 08a8 4664A0E1 		asr	r6, r6, #8	@ gg, tmp327,
 1907              	.LVL118:
 1908              	@ armwave.c:247:                     b = MIN(bb, 255);
 247:armwave.c     **** 
 1909              		.loc 1 247 25 view .LVU551
 1910 08ac FF40A0A3 		movge	r4, #255	@ bb,
 1911              	.LVL119:
 1912              	@ armwave.c:246:                     g = MIN(gg, 255);
 246:armwave.c     ****                     b = MIN(bb, 255);
 1913              		.loc 1 246 25 view .LVU552
 1914 08b0 FF0056E3 		cmp	r6, #255	@ gg,
 1915 08b4 FF60A0A3 		movge	r6, #255	@ gg,
 1916              	.LVL120:
 246:armwave.c     ****                     b = MIN(bb, 255);
 1917              		.loc 1 246 25 view .LVU553
 1918 08b8 027083E2 		add	r7, r3, #2	@ _66, n,
 254:armwave.c     ****                     yy = nsub >> 8;
 1919              		.loc 1 254 21 is_stmt 1 view .LVU554
 255:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1920              		.loc 1 255 21 view .LVU555
 256:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1921              		.loc 1 256 21 view .LVU556
 257:armwave.c     ****                 }
 1922              		.loc 1 257 21 view .LVU557
 1923              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1924              		.loc 1 241 24 is_stmt 0 view .LVU558
 1925 08bc 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp333,
 1926              	.LVL121:
 1927              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1928              		.loc 1 257 39 view .LVU559
 1929 08c0 3C0095E5 		ldr	r0, [r5, #60]	@ tmp377, g_armwave_state.target_width
 1930              	@ armwave.c:245:                     r = MIN(rr, 255);
 245:armwave.c     ****                     g = MIN(gg, 255);
 1931              		.loc 1 245 25 view .LVU560
 1932 08c4 FF005EE3 		cmp	lr, #255	@ rr,
 1933              	@ armwave.c:254:                     xx = nsub & 0xff;
 254:armwave.c     ****                     yy = nsub >> 8;
 1934              		.loc 1 254 24 view .LVU561
 1935 08c8 7780EFE6 		uxtb	r8, r7	@ xx, _66
 1936              	.LVL122:
 1937              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1938              		.loc 1 250 56 view .LVU562
 1939 08cc 0664A0E1 		lsl	r6, r6, #8	@ tmp328, gg,
 1940              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1941              		.loc 1 250 44 view .LVU563
 1942 08d0 0448A0E1 		lsl	r4, r4, #16	@ tmp324, bb,
 1943              	@ armwave.c:245:                     r = MIN(rr, 255);
 245:armwave.c     ****                     g = MIN(gg, 255);
 1944              		.loc 1 245 25 view .LVU564
 1945 08d4 FFE0A0A3 		movge	lr, #255	@ rr,
 1946              	.LVL123:
 1947              	@ armwave.c:255:                     yy = nsub >> 8;
 255:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1948              		.loc 1 255 31 view .LVU565
 1949 08d8 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 1950              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1951              		.loc 1 257 39 view .LVU566
 1952 08dc 907827E0 		mla	r7, r0, r8, r7	@ tmp321, tmp377, xx, yy
 1953              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1954              		.loc 1 250 44 view .LVU567
 1955 08e0 FF4804E2 		and	r4, r4, #16711680	@ tmp325, tmp324,
 1956              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1957              		.loc 1 250 56 view .LVU568
 1958 08e4 7660FFE6 		uxth	r6, r6	@ tmp329, tmp328
 1959              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1960              		.loc 1 250 51 view .LVU569
 1961 08e8 066084E1 		orr	r6, r4, r6	@ tmp331, tmp325, tmp329
 1962              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1963              		.loc 1 250 62 view .LVU570
 1964 08ec 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1965              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1966              		.loc 1 257 49 view .LVU571
 1967 08f0 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1968              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1969              		.loc 1 250 62 view .LVU572
 1970 08f4 0EE086E1 		orr	lr, r6, lr	@ tmp335, tmp331, rr
 1971              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 1972              		.loc 1 250 26 view .LVU573
 1973 08f8 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp335,
 1974              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 1975              		.loc 1 257 49 view .LVU574
 1976 08fc 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 1977              	.L100:
 1978              	.LVL124:
 237:armwave.c     ****                 wave_word >>= 8;
 1979              		.loc 1 237 17 is_stmt 1 view .LVU575
 238:armwave.c     **** 
 1980              		.loc 1 238 17 view .LVU576
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1981              		.loc 1 240 17 view .LVU577
 1982              	@ armwave.c:240:                 if(value != 0) {
 240:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1983              		.loc 1 240 19 is_stmt 0 view .LVU578
 1984 0900 000052E3 		cmp	r2, #0	@ wave_word,
 1985 0904 9DFFFF0A 		beq	.L97		@,
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1986              		.loc 1 241 21 is_stmt 1 view .LVU579
 1987              	.LVL125:
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1988              		.loc 1 242 21 view .LVU580
 243:armwave.c     **** 
 1989              		.loc 1 243 21 view .LVU581
 245:armwave.c     ****                     g = MIN(gg, 255);
 1990              		.loc 1 245 21 view .LVU582
 246:armwave.c     ****                     b = MIN(bb, 255);
 1991              		.loc 1 246 21 view .LVU583
 247:armwave.c     **** 
 1992              		.loc 1 247 21 view .LVU584
 250:armwave.c     **** 
 1993              		.loc 1 250 21 view .LVU585
 253:armwave.c     ****                     xx = nsub & 0xff;
 1994              		.loc 1 253 21 view .LVU586
 1995              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     **** 
 1996              		.loc 1 243 55 is_stmt 0 view .LVU587
 1997 0908 920B0EE0 		mul	lr, r2, fp	@ tmp344, wave_word, _80
 1998              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1999              		.loc 1 242 55 view .LVU588
 2000 090c 920904E0 		mul	r4, r2, r9	@ tmp348, wave_word, _76
 2001              	@ armwave.c:243:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 243:armwave.c     **** 
 2002              		.loc 1 243 24 view .LVU589
 2003 0910 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp344,
 2004              	.LVL126:
 2005              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2006              		.loc 1 241 55 view .LVU590
 2007 0914 920A02E0 		mul	r2, r2, r10	@ tmp354, wave_word, _70
 2008              	.LVL127:
 2009              	@ armwave.c:247:                     b = MIN(bb, 255);
 247:armwave.c     **** 
 2010              		.loc 1 247 25 view .LVU591
 2011 0918 FF005EE3 		cmp	lr, #255	@ bb,
 2012              	@ armwave.c:242:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 242:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2013              		.loc 1 242 24 view .LVU592
 2014 091c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp348,
 2015              	.LVL128:
 2016              	@ armwave.c:247:                     b = MIN(bb, 255);
 247:armwave.c     **** 
 2017              		.loc 1 247 25 view .LVU593
 2018 0920 FFE0A0A3 		movge	lr, #255	@ bb,
 2019              	.LVL129:
 2020              	@ armwave.c:246:                     g = MIN(gg, 255);
 246:armwave.c     ****                     b = MIN(bb, 255);
 2021              		.loc 1 246 25 view .LVU594
 2022 0924 FF0054E3 		cmp	r4, #255	@ gg,
 2023 0928 FF40A0A3 		movge	r4, #255	@ gg,
 2024              	.LVL130:
 246:armwave.c     ****                     b = MIN(bb, 255);
 2025              		.loc 1 246 25 view .LVU595
 2026 092c 036083E2 		add	r6, r3, #3	@ _59, n,
 254:armwave.c     ****                     yy = nsub >> 8;
 2027              		.loc 1 254 21 is_stmt 1 view .LVU596
 255:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 2028              		.loc 1 255 21 view .LVU597
 256:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2029              		.loc 1 256 21 view .LVU598
 257:armwave.c     ****                 }
 2030              		.loc 1 257 21 view .LVU599
 2031              	@ armwave.c:241:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 241:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2032              		.loc 1 241 24 is_stmt 0 view .LVU600
 2033 0930 4224A0E1 		asr	r2, r2, #8	@ rr, tmp354,
 2034              	.LVL131:
 2035              	@ armwave.c:256:                     offset = yy + (xx * g_armwave_state.target_width);
 256:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2036              		.loc 1 256 39 view .LVU601
 2037 0934 3C7095E5 		ldr	r7, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2038              	@ armwave.c:245:                     r = MIN(rr, 255);
 245:armwave.c     ****                     g = MIN(gg, 255);
 2039              		.loc 1 245 25 view .LVU602
 2040 0938 FF0052E3 		cmp	r2, #255	@ rr,
 2041              	@ armwave.c:254:                     xx = nsub & 0xff;
 254:armwave.c     ****                     yy = nsub >> 8;
 2042              		.loc 1 254 24 view .LVU603
 2043 093c 7680EFE6 		uxtb	r8, r6	@ xx, _59
 2044              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 2045              		.loc 1 250 56 view .LVU604
 2046 0940 0444A0E1 		lsl	r4, r4, #8	@ tmp349, gg,
 2047              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 2048              		.loc 1 250 44 view .LVU605
 2049 0944 0EE8A0E1 		lsl	lr, lr, #16	@ tmp345, bb,
 2050              	@ armwave.c:245:                     r = MIN(rr, 255);
 245:armwave.c     ****                     g = MIN(gg, 255);
 2051              		.loc 1 245 25 view .LVU606
 2052 0948 FF20A0A3 		movge	r2, #255	@ rr,
 2053              	.LVL132:
 2054              	@ armwave.c:255:                     yy = nsub >> 8;
 255:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 2055              		.loc 1 255 31 view .LVU607
 2056 094c 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 2057              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 2058              		.loc 1 250 44 view .LVU608
 2059 0950 FFE80EE2 		and	lr, lr, #16711680	@ tmp346, tmp345,
 2060              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 2061              		.loc 1 250 56 view .LVU609
 2062 0954 7440FFE6 		uxth	r4, r4	@ tmp350, tmp349
 2063              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 2064              		.loc 1 257 39 view .LVU610
 2065 0958 976826E0 		mla	r6, r7, r8, r6	@ tmp342, g_armwave_state.target_width, xx, yy
 2066              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 2067              		.loc 1 250 51 view .LVU611
 2068 095c 04E08EE1 		orr	lr, lr, r4	@ tmp352, tmp346, tmp350
 2069              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 2070              		.loc 1 250 62 view .LVU612
 2071 0960 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2072              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 2073              		.loc 1 257 49 view .LVU613
 2074 0964 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2075              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 2076              		.loc 1 250 62 view .LVU614
 2077 0968 02208EE1 		orr	r2, lr, r2	@ tmp356, tmp352, rr
 2078              	@ armwave.c:250:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 250:armwave.c     **** 
 2079              		.loc 1 250 26 view .LVU615
 2080 096c FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp356,
 2081              	@ armwave.c:257:                     *(out_buffer_base + offset) = word;
 257:armwave.c     ****                 }
 2082              		.loc 1 257 49 view .LVU616
 2083 0970 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 2084 0974 81FFFFEA 		b	.L97		@
 2085              	.LVL133:
 2086              	.L118:
 223:armwave.c     **** 
 2087              		.loc 1 223 5 is_stmt 1 discriminator 1 view .LVU617
 2088 0978 10309FE5 		ldr	r3, .L120+4	@,
 2089 097c DF20A0E3 		mov	r2, #223	@,
 2090 0980 0C109FE5 		ldr	r1, .L120+8	@,
 2091              	.LVL134:
 223:armwave.c     **** 
 2092              		.loc 1 223 5 is_stmt 0 discriminator 1 view .LVU618
 2093 0984 0C009FE5 		ldr	r0, .L120+12	@,
 2094              	.LVL135:
 223:armwave.c     **** 
 2095              		.loc 1 223 5 discriminator 1 view .LVU619
 2096 0988 FEFFFFEB 		bl	__assert_fail		@
 2097              	.LVL136:
 2098              	.L121:
 223:armwave.c     **** 
 2099              		.loc 1 223 5 discriminator 1 view .LVU620
 2100              		.align	2
 2101              	.L120:
 2102 098c 00000000 		.word	g_armwave_state
 2103 0990 18000000 		.word	.LANCHOR0+24
 2104 0994 00000000 		.word	.LC0
 2105 0998 E8000000 		.word	.LC6
 2106              		.cfi_endproc
 2107              	.LFE63:
 2109              		.align	2
 2110              		.global	armwave_fill_pixbuf_scaled
 2111              		.syntax unified
 2112              		.arm
 2113              		.fpu vfp
 2115              	armwave_fill_pixbuf_scaled:
 2116              	.LVL137:
 2117              	.LFB64:
 263:armwave.c     **** 
 264:armwave.c     **** /*
 265:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 266:armwave.c     ****  * Rows are repeated as necessary.
 267:armwave.c     ****  */
 268:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 269:armwave.c     **** {
 2118              		.loc 1 269 1 is_stmt 1 view -0
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 8
 2121              		@ frame_needed = 0, uses_anonymous_args = 0
 270:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2122              		.loc 1 270 5 view .LVU622
 271:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2123              		.loc 1 271 5 view .LVU623
 272:armwave.c     ****     uint8_t r, g, b, value;
 2124              		.loc 1 272 5 view .LVU624
 273:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2125              		.loc 1 273 5 view .LVU625
 2126              	@ armwave.c:269: {
 269:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2127              		.loc 1 269 1 is_stmt 0 view .LVU626
 2128 099c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2129              		.cfi_def_cfa_offset 36
 2130              		.cfi_offset 4, -36
 2131              		.cfi_offset 5, -32
 2132              		.cfi_offset 6, -28
 2133              		.cfi_offset 7, -24
 2134              		.cfi_offset 8, -20
 2135              		.cfi_offset 9, -16
 2136              		.cfi_offset 10, -12
 2137              		.cfi_offset 11, -8
 2138              		.cfi_offset 14, -4
 2139              	@ armwave.c:277:     assert(out_buffer != NULL);
 274:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 275:armwave.c     ****     uint32_t offset;
 276:armwave.c     **** 
 277:armwave.c     ****     assert(out_buffer != NULL);
 2140              		.loc 1 277 5 view .LVU627
 2141 09a0 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 2142              	@ armwave.c:273:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 273:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2143              		.loc 1 273 15 view .LVU628
 2144 09a4 5C629FE5 		ldr	r6, .L149	@ tmp366,
 2145              	@ armwave.c:269: {
 269:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2146              		.loc 1 269 1 view .LVU629
 2147 09a8 0CD04DE2 		sub	sp, sp, #12	@,,
 2148              		.cfi_def_cfa_offset 48
 2149              	@ armwave.c:273:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 273:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2150              		.loc 1 273 15 view .LVU630
 2151 09ac 044096E5 		ldr	r4, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2152              	.LVL138:
 274:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2153              		.loc 1 274 5 is_stmt 1 view .LVU631
 275:armwave.c     **** 
 2154              		.loc 1 275 5 view .LVU632
 2155              		.loc 1 277 5 view .LVU633
 2156 09b0 8F00000A 		beq	.L147		@,
 278:armwave.c     **** 
 279:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 280:armwave.c     **** 
 281:armwave.c     ****     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2157              		.loc 1 281 5 view .LVU634
 2158              	@ armwave.c:281:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2159              		.loc 1 281 27 is_stmt 0 view .LVU635
 2160 09b4 3C5096E5 		ldr	r5, [r6, #60]	@ _1, g_armwave_state.target_width
 2161              	@ armwave.c:282:     vscale = g_armwave_state.target_height / 256;
 282:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2162              		.loc 1 282 44 view .LVU636
 2163 09b8 403096E5 		ldr	r3, [r6, #64]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2164              	@ armwave.c:284:     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 283:armwave.c     **** 
 284:armwave.c     ****     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 2165              		.loc 1 284 5 view .LVU637
 2166 09bc 0520A0E1 		mov	r2, r5	@, _1
 2167              	@ armwave.c:281:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 281:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2168              		.loc 1 281 41 view .LVU638
 2169 09c0 0554A0E1 		lsl	r5, r5, #8	@ npix, _1,
 2170              	.LVL139:
 282:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2171              		.loc 1 282 5 is_stmt 1 view .LVU639
 2172              		.loc 1 284 5 view .LVU640
 2173 09c4 0510A0E1 		mov	r1, r5	@, npix
 2174 09c8 2334A0E1 		lsr	r3, r3, #8	@, g_armwave_state.target_height,
 2175              	.LVL140:
 2176              		.loc 1 284 5 is_stmt 0 view .LVU641
 2177 09cc 38029FE5 		ldr	r0, .L149+4	@,
 2178              	.LVL141:
 2179              		.loc 1 284 5 view .LVU642
 2180 09d0 FEFFFFEB 		bl	printf		@
 2181              	.LVL142:
 285:armwave.c     **** 
 286:armwave.c     ****     /*
 287:armwave.c     ****     for(n = 0; n < npix; n += 1) {
 288:armwave.c     ****         for(i = 0; i < 4; i++) {
 289:armwave.c     ****             yy = ((n & 0xff) * 4) + i;
 290:armwave.c     ****             xx = n >> 8;
 291:armwave.c     **** 
 292:armwave.c     ****             //offset = (yy + (xx * g_armwave_state.target_width));
 293:armwave.c     ****             //*(out_buffer_base + offset) = 0xff000000 | (yy << 8) | xx;
 294:armwave.c     **** 
 295:armwave.c     ****             offset = (xx + (yy * g_armwave_state.target_width));
 296:armwave.c     ****             *(out_buffer_base + offset) = 0xff000000 | ((i * 64) << 16); // | (yy << 8) | xx;
 297:armwave.c     ****         }
 298:armwave.c     ****     }
 299:armwave.c     ****     */
 300:armwave.c     **** 
 301:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 2182              		.loc 1 301 5 is_stmt 1 view .LVU643
 2183              		.loc 1 301 5 is_stmt 0 view .LVU644
 2184 09d4 000055E3 		cmp	r5, #0	@ npix,
 2185 09d8 0A0000DA 		ble	.L122		@,
 2186              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 302:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 303:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 304:armwave.c     ****         // most normal waveforms.
 305:armwave.c     ****         wave_word = *base_32ptr++;
 306:armwave.c     **** 
 307:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 308:armwave.c     ****             for(w = 0; w < 4; w++) {
 309:armwave.c     ****                 value = wave_word & 0xff;
 310:armwave.c     ****                 wave_word >>= 8;
 311:armwave.c     **** 
 312:armwave.c     ****                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2187              		.loc 1 313 52 view .LVU645
 2188 09dc F0A5D6E1 		ldrsh	r10, [r6, #80]	@ _74, g_armwave_state.ch1_color.r
 2189              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2190              		.loc 1 314 52 view .LVU646
 2191 09e0 F295D6E1 		ldrsh	r9, [r6, #82]	@ _80, g_armwave_state.ch1_color.g
 2192              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2193              		.loc 1 315 52 view .LVU647
 2194 09e4 F4B5D6E1 		ldrsh	fp, [r6, #84]	@ _84, g_armwave_state.ch1_color.b
 2195              	@ armwave.c:301:     for(n = 0; n < npix; n += 4) {
 301:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2196              		.loc 1 301 11 view .LVU648
 2197 09e8 0030A0E3 		mov	r3, #0	@ n,
 2198 09ec 00708DE5 		str	r7, [sp]	@ out_buffer, %sfp
 2199              	.LVL143:
 2200              	.L131:
 305:armwave.c     **** 
 2201              		.loc 1 305 9 is_stmt 1 view .LVU649
 2202              	@ armwave.c:305:         wave_word = *base_32ptr++;
 305:armwave.c     **** 
 2203              		.loc 1 305 19 is_stmt 0 view .LVU650
 2204 09f0 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_50, offset: 4294967292B]
 2205              	.LVL144:
 307:armwave.c     ****             for(w = 0; w < 4; w++) {
 2206              		.loc 1 307 9 is_stmt 1 view .LVU651
 2207              	@ armwave.c:307:         if(COND_UNLIKELY(wave_word != 0)) {
 307:armwave.c     ****             for(w = 0; w < 4; w++) {
 2208              		.loc 1 307 11 is_stmt 0 view .LVU652
 2209 09f4 000052E3 		cmp	r2, #0	@ wave_word,
 2210 09f8 0400001A 		bne	.L148		@,
 2211              	.LVL145:
 2212              	.L126:
 2213              	@ armwave.c:301:     for(n = 0; n < npix; n += 4) {
 301:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2214              		.loc 1 301 28 discriminator 2 view .LVU653
 2215 09fc 043083E2 		add	r3, r3, #4	@ n, n,
 2216              	.LVL146:
 2217              	@ armwave.c:301:     for(n = 0; n < npix; n += 4) {
 301:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2218              		.loc 1 301 5 discriminator 2 view .LVU654
 2219 0a00 030055E1 		cmp	r5, r3	@ npix, n
 2220 0a04 F9FFFFCA 		bgt	.L131		@,
 2221              	.LVL147:
 2222              	.L122:
 2223              	@ armwave.c:338: }
 316:armwave.c     **** 
 317:armwave.c     ****                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 319:armwave.c     ****                     b = MIN(bb, 255);
 320:armwave.c     **** 
 321:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 322:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 324:armwave.c     ****                     // Do line scaling as necessary.
 325:armwave.c     ****                     nsub = n + w;
 326:armwave.c     ****                     yy = (nsub & 0xff);
 327:armwave.c     ****                     xx = (nsub >> 8);
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 329:armwave.c     ****                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 331:armwave.c     ****             }
 332:armwave.c     ****         }
 333:armwave.c     **** 
 334:armwave.c     ****         //printf("0x%08x, %d\n", out_buffer_base, n);
 335:armwave.c     **** 
 336:armwave.c     ****         //*out_buffer_base++ = 0xff000000 | n;
 337:armwave.c     ****     }
 338:armwave.c     **** }
 2224              		.loc 1 338 1 view .LVU655
 2225 0a08 0CD08DE2 		add	sp, sp, #12	@,,
 2226              		.cfi_remember_state
 2227              		.cfi_def_cfa_offset 36
 2228              		@ sp needed	@
 2229 0a0c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2230              	.LVL148:
 2231              	.L148:
 2232              		.cfi_restore_state
 309:armwave.c     ****                 wave_word >>= 8;
 2233              		.loc 1 309 17 is_stmt 1 view .LVU656
 310:armwave.c     **** 
 2234              		.loc 1 310 17 view .LVU657
 2235              	@ armwave.c:312:                 if(value != 0) {
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2236              		.loc 1 312 19 is_stmt 0 view .LVU658
 2237 0a10 FFC012E2 		ands	ip, r2, #255	@ _76, wave_word,
 2238              	@ armwave.c:310:                 wave_word >>= 8;
 310:armwave.c     **** 
 2239              		.loc 1 310 27 view .LVU659
 2240 0a14 2214A0E1 		lsr	r1, r2, #8	@ wave_word, wave_word,
 2241              	.LVL149:
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2242              		.loc 1 312 17 is_stmt 1 view .LVU660
 2243              	@ armwave.c:312:                 if(value != 0) {
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2244              		.loc 1 312 19 is_stmt 0 view .LVU661
 2245 0a18 1900000A 		beq	.L127		@,
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2246              		.loc 1 313 21 is_stmt 1 view .LVU662
 2247              	.LVL150:
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2248              		.loc 1 314 21 view .LVU663
 315:armwave.c     **** 
 2249              		.loc 1 315 21 view .LVU664
 317:armwave.c     ****                     g = MIN(gg, 255);
 2250              		.loc 1 317 21 view .LVU665
 318:armwave.c     ****                     b = MIN(bb, 255);
 2251              		.loc 1 318 21 view .LVU666
 319:armwave.c     **** 
 2252              		.loc 1 319 21 view .LVU667
 322:armwave.c     **** 
 2253              		.loc 1 322 21 view .LVU668
 325:armwave.c     ****                     yy = (nsub & 0xff);
 2254              		.loc 1 325 21 view .LVU669
 326:armwave.c     ****                     xx = (nsub >> 8);
 2255              		.loc 1 326 21 view .LVU670
 327:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2256              		.loc 1 327 21 view .LVU671
 328:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2257              		.loc 1 328 21 view .LVU672
 329:armwave.c     ****                 }
 2258              		.loc 1 329 21 view .LVU673
 2259              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     **** 
 2260              		.loc 1 315 55 is_stmt 0 view .LVU674
 2261 0a1c 9B0C00E0 		mul	r0, fp, ip	@ tmp284, _84, _76
 2262              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2263              		.loc 1 314 55 view .LVU675
 2264 0a20 990C08E0 		mul	r8, r9, ip	@ tmp288, _80, _76
 2265              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     **** 
 2266              		.loc 1 315 24 view .LVU676
 2267 0a24 4004A0E1 		asr	r0, r0, #8	@ bb, tmp284,
 2268              	.LVL151:
 2269              	@ armwave.c:319:                     b = MIN(bb, 255);
 319:armwave.c     **** 
 2270              		.loc 1 319 25 view .LVU677
 2271 0a28 FF0050E3 		cmp	r0, #255	@ bb,
 2272              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2273              		.loc 1 314 24 view .LVU678
 2274 0a2c 4884A0E1 		asr	r8, r8, #8	@ gg, tmp288,
 2275              	.LVL152:
 2276              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2277              		.loc 1 313 55 view .LVU679
 2278 0a30 9C0A0CE0 		mul	ip, ip, r10	@ tmp294, _76, _74
 2279              	.LVL153:
 2280              	@ armwave.c:319:                     b = MIN(bb, 255);
 319:armwave.c     **** 
 2281              		.loc 1 319 25 view .LVU680
 2282 0a34 FF00A0A3 		movge	r0, #255	@ bb,
 2283              	.LVL154:
 2284              	@ armwave.c:318:                     g = MIN(gg, 255);
 318:armwave.c     ****                     b = MIN(bb, 255);
 2285              		.loc 1 318 25 view .LVU681
 2286 0a38 FF0058E3 		cmp	r8, #255	@ gg,
 2287 0a3c FF80A0A3 		movge	r8, #255	@ gg,
 2288              	.LVL155:
 2289              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2290              		.loc 1 313 24 view .LVU682
 2291 0a40 4CC4A0E1 		asr	ip, ip, #8	@ rr, tmp294,
 2292              	.LVL156:
 2293              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2294              		.loc 1 322 56 view .LVU683
 2295 0a44 0884A0E1 		lsl	r8, r8, #8	@ tmp289, gg,
 2296              	@ armwave.c:317:                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 2297              		.loc 1 317 25 view .LVU684
 2298 0a48 FF005CE3 		cmp	ip, #255	@ rr,
 2299              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2300              		.loc 1 329 39 view .LVU685
 2301 0a4c 3C7096E5 		ldr	r7, [r6, #60]	@ tmp380, g_armwave_state.target_width
 2302              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2303              		.loc 1 322 44 view .LVU686
 2304 0a50 0008A0E1 		lsl	r0, r0, #16	@ tmp285, bb,
 2305              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2306              		.loc 1 322 56 view .LVU687
 2307 0a54 7880FFE6 		uxth	r8, r8	@ tmp290, tmp289
 2308              	@ armwave.c:326:                     yy = (nsub & 0xff);
 326:armwave.c     ****                     xx = (nsub >> 8);
 2309              		.loc 1 326 24 view .LVU688
 2310 0a58 73E0EFE6 		uxtb	lr, r3	@ yy, n
 2311              	@ armwave.c:317:                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 2312              		.loc 1 317 25 view .LVU689
 2313 0a5c FFC0A0A3 		movge	ip, #255	@ rr,
 2314              	.LVL157:
 2315              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2316              		.loc 1 322 44 view .LVU690
 2317 0a60 FF0800E2 		and	r0, r0, #16711680	@ tmp286, tmp285,
 2318              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2319              		.loc 1 322 51 view .LVU691
 2320 0a64 080080E1 		orr	r0, r0, r8	@ tmp292, tmp286, tmp290
 2321              	@ armwave.c:327:                     xx = (nsub >> 8);
 327:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2322              		.loc 1 327 32 view .LVU692
 2323 0a68 4384A0E1 		asr	r8, r3, #8	@ xx, n,
 2324              	.LVL158:
 2325              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2326              		.loc 1 329 39 view .LVU693
 2327 0a6c 978E2EE0 		mla	lr, r7, lr, r8	@ tmp282, tmp380, yy, xx
 2328              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2329              		.loc 1 322 62 view .LVU694
 2330 0a70 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 2331 0a74 0CC080E1 		orr	ip, r0, ip	@ tmp296, tmp292, rr
 2332              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2333              		.loc 1 329 49 view .LVU695
 2334 0a78 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2335              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2336              		.loc 1 322 26 view .LVU696
 2337 0a7c FFC48CE3 		orr	ip, ip, #-16777216	@ word, tmp296,
 2338              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2339              		.loc 1 329 49 view .LVU697
 2340 0a80 0EC180E7 		str	ip, [r0, lr, lsl #2]	@ word, *_110
 2341              	.LVL159:
 2342              	.L127:
 309:armwave.c     ****                 wave_word >>= 8;
 2343              		.loc 1 309 17 is_stmt 1 view .LVU698
 310:armwave.c     **** 
 2344              		.loc 1 310 17 view .LVU699
 2345              	@ armwave.c:312:                 if(value != 0) {
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2346              		.loc 1 312 19 is_stmt 0 view .LVU700
 2347 0a84 FF1011E2 		ands	r1, r1, #255	@ _122, wave_word,
 2348              	.LVL160:
 2349              	@ armwave.c:310:                 wave_word >>= 8;
 310:armwave.c     **** 
 2350              		.loc 1 310 27 view .LVU701
 2351 0a88 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 2352              	.LVL161:
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2353              		.loc 1 312 17 is_stmt 1 view .LVU702
 2354              	@ armwave.c:312:                 if(value != 0) {
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2355              		.loc 1 312 19 is_stmt 0 view .LVU703
 2356 0a8c 1C00000A 		beq	.L128		@,
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2357              		.loc 1 313 21 is_stmt 1 view .LVU704
 2358              	.LVL162:
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2359              		.loc 1 314 21 view .LVU705
 315:armwave.c     **** 
 2360              		.loc 1 315 21 view .LVU706
 317:armwave.c     ****                     g = MIN(gg, 255);
 2361              		.loc 1 317 21 view .LVU707
 318:armwave.c     ****                     b = MIN(bb, 255);
 2362              		.loc 1 318 21 view .LVU708
 319:armwave.c     **** 
 2363              		.loc 1 319 21 view .LVU709
 322:armwave.c     **** 
 2364              		.loc 1 322 21 view .LVU710
 325:armwave.c     ****                     yy = (nsub & 0xff);
 2365              		.loc 1 325 21 view .LVU711
 2366              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     **** 
 2367              		.loc 1 315 55 is_stmt 0 view .LVU712
 2368 0a90 910B00E0 		mul	r0, r1, fp	@ tmp307, _122, _84
 2369              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2370              		.loc 1 314 55 view .LVU713
 2371 0a94 91090EE0 		mul	lr, r1, r9	@ tmp311, _122, _80
 2372              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     **** 
 2373              		.loc 1 315 24 view .LVU714
 2374 0a98 4004A0E1 		asr	r0, r0, #8	@ bb, tmp307,
 2375              	.LVL163:
 2376              	@ armwave.c:319:                     b = MIN(bb, 255);
 319:armwave.c     **** 
 2377              		.loc 1 319 25 view .LVU715
 2378 0a9c FF0050E3 		cmp	r0, #255	@ bb,
 2379 0aa0 FF00A0A3 		movge	r0, #255	@ bb,
 2380              	.LVL164:
 2381              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2382              		.loc 1 313 55 view .LVU716
 2383 0aa4 910A01E0 		mul	r1, r1, r10	@ tmp317, _122, _74
 2384              	.LVL165:
 2385              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2386              		.loc 1 314 24 view .LVU717
 2387 0aa8 4EE4A0E1 		asr	lr, lr, #8	@ gg, tmp311,
 2388              	.LVL166:
 2389              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2390              		.loc 1 322 44 view .LVU718
 2391 0aac 0008A0E1 		lsl	r0, r0, #16	@ tmp308, bb,
 2392              	@ armwave.c:318:                     g = MIN(gg, 255);
 318:armwave.c     ****                     b = MIN(bb, 255);
 2393              		.loc 1 318 25 view .LVU719
 2394 0ab0 FF005EE3 		cmp	lr, #255	@ gg,
 2395 0ab4 01C083E2 		add	ip, r3, #1	@ _162, n,
 326:armwave.c     ****                     xx = (nsub >> 8);
 2396              		.loc 1 326 21 is_stmt 1 view .LVU720
 327:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2397              		.loc 1 327 21 view .LVU721
 328:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2398              		.loc 1 328 21 view .LVU722
 329:armwave.c     ****                 }
 2399              		.loc 1 329 21 view .LVU723
 2400              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2401              		.loc 1 322 44 is_stmt 0 view .LVU724
 2402 0ab8 FF0800E2 		and	r0, r0, #16711680	@ tmp309, tmp308,
 2403              	@ armwave.c:318:                     g = MIN(gg, 255);
 318:armwave.c     ****                     b = MIN(bb, 255);
 2404              		.loc 1 318 25 view .LVU725
 2405 0abc FFE0A0A3 		movge	lr, #255	@ gg,
 2406              	.LVL167:
 2407              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2408              		.loc 1 322 44 view .LVU726
 2409 0ac0 04008DE5 		str	r0, [sp, #4]	@ tmp309, %sfp
 2410              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2411              		.loc 1 329 39 view .LVU727
 2412 0ac4 3C0096E5 		ldr	r0, [r6, #60]	@ tmp383, g_armwave_state.target_width
 2413              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2414              		.loc 1 313 24 view .LVU728
 2415 0ac8 4114A0E1 		asr	r1, r1, #8	@ rr, tmp317,
 2416              	.LVL168:
 2417              	@ armwave.c:326:                     yy = (nsub & 0xff);
 326:armwave.c     ****                     xx = (nsub >> 8);
 2418              		.loc 1 326 24 view .LVU729
 2419 0acc 7C70EFE6 		uxtb	r7, ip	@ yy, _162
 2420              	@ armwave.c:317:                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 2421              		.loc 1 317 25 view .LVU730
 2422 0ad0 FF0051E3 		cmp	r1, #255	@ rr,
 2423              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2424              		.loc 1 322 56 view .LVU731
 2425 0ad4 0EE4A0E1 		lsl	lr, lr, #8	@ tmp312, gg,
 2426              	@ armwave.c:327:                     xx = (nsub >> 8);
 327:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2427              		.loc 1 327 32 view .LVU732
 2428 0ad8 4CC4A0E1 		asr	ip, ip, #8	@ xx, _162,
 2429              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2430              		.loc 1 329 39 view .LVU733
 2431 0adc 90C72CE0 		mla	ip, r0, r7, ip	@ tmp305, tmp383, yy, xx
 2432              	@ armwave.c:317:                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 2433              		.loc 1 317 25 view .LVU734
 2434 0ae0 FF10A0A3 		movge	r1, #255	@ rr,
 2435              	.LVL169:
 2436              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2437              		.loc 1 322 51 view .LVU735
 2438 0ae4 04009DE5 		ldr	r0, [sp, #4]	@ tmp309, %sfp
 2439              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2440              		.loc 1 322 56 view .LVU736
 2441 0ae8 7EE0FFE6 		uxth	lr, lr	@ tmp313, tmp312
 2442              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2443              		.loc 1 322 51 view .LVU737
 2444 0aec 0E0080E1 		orr	r0, r0, lr	@ tmp315, tmp309, tmp313
 2445              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2446              		.loc 1 322 62 view .LVU738
 2447 0af0 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2448 0af4 011080E1 		orr	r1, r0, r1	@ tmp319, tmp315, rr
 2449              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2450              		.loc 1 329 49 view .LVU739
 2451 0af8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2452              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2453              		.loc 1 322 26 view .LVU740
 2454 0afc FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp319,
 2455              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2456              		.loc 1 329 49 view .LVU741
 2457 0b00 0C1180E7 		str	r1, [r0, ip, lsl #2]	@ word, *_156
 2458              	.LVL170:
 2459              	.L128:
 309:armwave.c     ****                 wave_word >>= 8;
 2460              		.loc 1 309 17 is_stmt 1 view .LVU742
 310:armwave.c     **** 
 2461              		.loc 1 310 17 view .LVU743
 2462              	@ armwave.c:312:                 if(value != 0) {
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2463              		.loc 1 312 19 is_stmt 0 view .LVU744
 2464 0b04 FF1018E2 		ands	r1, r8, #255	@ _168, wave_word,
 2465              	@ armwave.c:310:                 wave_word >>= 8;
 310:armwave.c     **** 
 2466              		.loc 1 310 27 view .LVU745
 2467 0b08 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 2468              	.LVL171:
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2469              		.loc 1 312 17 is_stmt 1 view .LVU746
 2470              	@ armwave.c:312:                 if(value != 0) {
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2471              		.loc 1 312 19 is_stmt 0 view .LVU747
 2472 0b0c 1A00000A 		beq	.L129		@,
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2473              		.loc 1 313 21 is_stmt 1 view .LVU748
 2474              	.LVL172:
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2475              		.loc 1 314 21 view .LVU749
 315:armwave.c     **** 
 2476              		.loc 1 315 21 view .LVU750
 317:armwave.c     ****                     g = MIN(gg, 255);
 2477              		.loc 1 317 21 view .LVU751
 318:armwave.c     ****                     b = MIN(bb, 255);
 2478              		.loc 1 318 21 view .LVU752
 319:armwave.c     **** 
 2479              		.loc 1 319 21 view .LVU753
 322:armwave.c     **** 
 2480              		.loc 1 322 21 view .LVU754
 325:armwave.c     ****                     yy = (nsub & 0xff);
 2481              		.loc 1 325 21 view .LVU755
 2482              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     **** 
 2483              		.loc 1 315 55 is_stmt 0 view .LVU756
 2484 0b10 910B00E0 		mul	r0, r1, fp	@ tmp330, _168, _84
 2485              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2486              		.loc 1 314 55 view .LVU757
 2487 0b14 91090CE0 		mul	ip, r1, r9	@ tmp334, _168, _80
 2488              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     **** 
 2489              		.loc 1 315 24 view .LVU758
 2490 0b18 4004A0E1 		asr	r0, r0, #8	@ bb, tmp330,
 2491              	.LVL173:
 2492              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2493              		.loc 1 313 55 view .LVU759
 2494 0b1c 910A01E0 		mul	r1, r1, r10	@ tmp340, _168, _74
 2495              	.LVL174:
 2496              	@ armwave.c:319:                     b = MIN(bb, 255);
 319:armwave.c     **** 
 2497              		.loc 1 319 25 view .LVU760
 2498 0b20 FF0050E3 		cmp	r0, #255	@ bb,
 2499              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2500              		.loc 1 314 24 view .LVU761
 2501 0b24 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp334,
 2502              	.LVL175:
 2503              	@ armwave.c:319:                     b = MIN(bb, 255);
 319:armwave.c     **** 
 2504              		.loc 1 319 25 view .LVU762
 2505 0b28 FF00A0A3 		movge	r0, #255	@ bb,
 2506              	.LVL176:
 2507              	@ armwave.c:318:                     g = MIN(gg, 255);
 318:armwave.c     ****                     b = MIN(bb, 255);
 2508              		.loc 1 318 25 view .LVU763
 2509 0b2c FF005CE3 		cmp	ip, #255	@ gg,
 2510 0b30 FFC0A0A3 		movge	ip, #255	@ gg,
 2511              	.LVL177:
 318:armwave.c     ****                     b = MIN(bb, 255);
 2512              		.loc 1 318 25 view .LVU764
 2513 0b34 02E083E2 		add	lr, r3, #2	@ _70, n,
 326:armwave.c     ****                     xx = (nsub >> 8);
 2514              		.loc 1 326 21 is_stmt 1 view .LVU765
 327:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2515              		.loc 1 327 21 view .LVU766
 328:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2516              		.loc 1 328 21 view .LVU767
 329:armwave.c     ****                 }
 2517              		.loc 1 329 21 view .LVU768
 2518              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2519              		.loc 1 313 24 is_stmt 0 view .LVU769
 2520 0b38 4114A0E1 		asr	r1, r1, #8	@ rr, tmp340,
 2521              	.LVL178:
 2522              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2523              		.loc 1 329 39 view .LVU770
 2524 0b3c 3C7096E5 		ldr	r7, [r6, #60]	@ tmp384, g_armwave_state.target_width
 2525              	@ armwave.c:317:                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 2526              		.loc 1 317 25 view .LVU771
 2527 0b40 FF0051E3 		cmp	r1, #255	@ rr,
 2528              	@ armwave.c:326:                     yy = (nsub & 0xff);
 326:armwave.c     ****                     xx = (nsub >> 8);
 2529              		.loc 1 326 24 view .LVU772
 2530 0b44 7E80EFE6 		uxtb	r8, lr	@ yy, _70
 2531              	.LVL179:
 2532              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2533              		.loc 1 322 56 view .LVU773
 2534 0b48 0CC4A0E1 		lsl	ip, ip, #8	@ tmp335, gg,
 2535              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2536              		.loc 1 322 44 view .LVU774
 2537 0b4c 0008A0E1 		lsl	r0, r0, #16	@ tmp331, bb,
 2538              	@ armwave.c:317:                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 2539              		.loc 1 317 25 view .LVU775
 2540 0b50 FF10A0A3 		movge	r1, #255	@ rr,
 2541              	.LVL180:
 2542              	@ armwave.c:327:                     xx = (nsub >> 8);
 327:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2543              		.loc 1 327 32 view .LVU776
 2544 0b54 4EE4A0E1 		asr	lr, lr, #8	@ xx, _70,
 2545              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2546              		.loc 1 322 44 view .LVU777
 2547 0b58 FF0800E2 		and	r0, r0, #16711680	@ tmp332, tmp331,
 2548              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2549              		.loc 1 322 56 view .LVU778
 2550 0b5c 7CC0FFE6 		uxth	ip, ip	@ tmp336, tmp335
 2551              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2552              		.loc 1 329 39 view .LVU779
 2553 0b60 97E82EE0 		mla	lr, r7, r8, lr	@ tmp328, tmp384, yy, xx
 2554              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2555              		.loc 1 322 51 view .LVU780
 2556 0b64 0CC080E1 		orr	ip, r0, ip	@ tmp338, tmp332, tmp336
 2557              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2558              		.loc 1 322 62 view .LVU781
 2559 0b68 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2560              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2561              		.loc 1 329 49 view .LVU782
 2562 0b6c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2563              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2564              		.loc 1 322 62 view .LVU783
 2565 0b70 01108CE1 		orr	r1, ip, r1	@ tmp342, tmp338, rr
 2566              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2567              		.loc 1 322 26 view .LVU784
 2568 0b74 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp342,
 2569              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2570              		.loc 1 329 49 view .LVU785
 2571 0b78 0E1180E7 		str	r1, [r0, lr, lsl #2]	@ word, *_202
 2572              	.L129:
 2573              	.LVL181:
 309:armwave.c     ****                 wave_word >>= 8;
 2574              		.loc 1 309 17 is_stmt 1 view .LVU786
 310:armwave.c     **** 
 2575              		.loc 1 310 17 view .LVU787
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2576              		.loc 1 312 17 view .LVU788
 2577              	@ armwave.c:312:                 if(value != 0) {
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2578              		.loc 1 312 19 is_stmt 0 view .LVU789
 2579 0b7c 000052E3 		cmp	r2, #0	@ wave_word,
 2580 0b80 9DFFFF0A 		beq	.L126		@,
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2581              		.loc 1 313 21 is_stmt 1 view .LVU790
 2582              	.LVL182:
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2583              		.loc 1 314 21 view .LVU791
 315:armwave.c     **** 
 2584              		.loc 1 315 21 view .LVU792
 317:armwave.c     ****                     g = MIN(gg, 255);
 2585              		.loc 1 317 21 view .LVU793
 318:armwave.c     ****                     b = MIN(bb, 255);
 2586              		.loc 1 318 21 view .LVU794
 319:armwave.c     **** 
 2587              		.loc 1 319 21 view .LVU795
 322:armwave.c     **** 
 2588              		.loc 1 322 21 view .LVU796
 325:armwave.c     ****                     yy = (nsub & 0xff);
 2589              		.loc 1 325 21 view .LVU797
 2590              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     **** 
 2591              		.loc 1 315 55 is_stmt 0 view .LVU798
 2592 0b84 920B01E0 		mul	r1, r2, fp	@ tmp351, wave_word, _84
 2593              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2594              		.loc 1 314 55 view .LVU799
 2595 0b88 920900E0 		mul	r0, r2, r9	@ tmp355, wave_word, _80
 2596              	@ armwave.c:315:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 315:armwave.c     **** 
 2597              		.loc 1 315 24 view .LVU800
 2598 0b8c 4114A0E1 		asr	r1, r1, #8	@ bb, tmp351,
 2599              	.LVL183:
 2600              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2601              		.loc 1 313 55 view .LVU801
 2602 0b90 920A02E0 		mul	r2, r2, r10	@ tmp361, wave_word, _74
 2603              	.LVL184:
 2604              	@ armwave.c:319:                     b = MIN(bb, 255);
 319:armwave.c     **** 
 2605              		.loc 1 319 25 view .LVU802
 2606 0b94 FF0051E3 		cmp	r1, #255	@ bb,
 2607              	@ armwave.c:314:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2608              		.loc 1 314 24 view .LVU803
 2609 0b98 4004A0E1 		asr	r0, r0, #8	@ gg, tmp355,
 2610              	.LVL185:
 2611              	@ armwave.c:319:                     b = MIN(bb, 255);
 319:armwave.c     **** 
 2612              		.loc 1 319 25 view .LVU804
 2613 0b9c FF10A0A3 		movge	r1, #255	@ bb,
 2614              	.LVL186:
 2615              	@ armwave.c:318:                     g = MIN(gg, 255);
 318:armwave.c     ****                     b = MIN(bb, 255);
 2616              		.loc 1 318 25 view .LVU805
 2617 0ba0 FF0050E3 		cmp	r0, #255	@ gg,
 2618 0ba4 FF00A0A3 		movge	r0, #255	@ gg,
 2619              	.LVL187:
 2620              	@ armwave.c:313:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2621              		.loc 1 313 24 view .LVU806
 2622 0ba8 4224A0E1 		asr	r2, r2, #8	@ rr, tmp361,
 2623              	.LVL188:
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2624              		.loc 1 313 24 view .LVU807
 2625 0bac 03C083E2 		add	ip, r3, #3	@ _63, n,
 326:armwave.c     ****                     xx = (nsub >> 8);
 2626              		.loc 1 326 21 is_stmt 1 view .LVU808
 327:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2627              		.loc 1 327 21 view .LVU809
 328:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2628              		.loc 1 328 21 view .LVU810
 329:armwave.c     ****                 }
 2629              		.loc 1 329 21 view .LVU811
 2630              	@ armwave.c:328:                     offset = (xx + (yy * g_armwave_state.target_width)); 
 328:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2631              		.loc 1 328 40 is_stmt 0 view .LVU812
 2632 0bb0 3CE096E5 		ldr	lr, [r6, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2633              	@ armwave.c:317:                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 2634              		.loc 1 317 25 view .LVU813
 2635 0bb4 FF0052E3 		cmp	r2, #255	@ rr,
 2636              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2637              		.loc 1 322 56 view .LVU814
 2638 0bb8 0004A0E1 		lsl	r0, r0, #8	@ tmp356, gg,
 2639              	@ armwave.c:326:                     yy = (nsub & 0xff);
 326:armwave.c     ****                     xx = (nsub >> 8);
 2640              		.loc 1 326 24 view .LVU815
 2641 0bbc 7C80EFE6 		uxtb	r8, ip	@ yy, _63
 2642              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2643              		.loc 1 322 44 view .LVU816
 2644 0bc0 0118A0E1 		lsl	r1, r1, #16	@ tmp352, bb,
 2645              	@ armwave.c:317:                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 2646              		.loc 1 317 25 view .LVU817
 2647 0bc4 FF20A0A3 		movge	r2, #255	@ rr,
 2648              	.LVL189:
 2649              	@ armwave.c:327:                     xx = (nsub >> 8);
 327:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2650              		.loc 1 327 32 view .LVU818
 2651 0bc8 4CC4A0E1 		asr	ip, ip, #8	@ xx, _63,
 2652              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2653              		.loc 1 322 44 view .LVU819
 2654 0bcc FF1801E2 		and	r1, r1, #16711680	@ tmp353, tmp352,
 2655              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2656              		.loc 1 322 56 view .LVU820
 2657 0bd0 7000FFE6 		uxth	r0, r0	@ tmp357, tmp356
 2658              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2659              		.loc 1 322 51 view .LVU821
 2660 0bd4 001081E1 		orr	r1, r1, r0	@ tmp359, tmp353, tmp357
 2661              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2662              		.loc 1 329 39 view .LVU822
 2663 0bd8 9EC82CE0 		mla	ip, lr, r8, ip	@ tmp349, g_armwave_state.target_width, yy, xx
 2664              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2665              		.loc 1 322 62 view .LVU823
 2666 0bdc 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2667 0be0 022081E1 		orr	r2, r1, r2	@ tmp363, tmp359, rr
 2668              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2669              		.loc 1 329 49 view .LVU824
 2670 0be4 00109DE5 		ldr	r1, [sp]	@ out_buffer, %sfp
 2671              	@ armwave.c:322:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 2672              		.loc 1 322 26 view .LVU825
 2673 0be8 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp363,
 2674              	@ armwave.c:329:                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 2675              		.loc 1 329 49 view .LVU826
 2676 0bec 0C2181E7 		str	r2, [r1, ip, lsl #2]	@ word, *_248
 2677 0bf0 81FFFFEA 		b	.L126		@
 2678              	.LVL190:
 2679              	.L147:
 277:armwave.c     **** 
 2680              		.loc 1 277 5 is_stmt 1 discriminator 1 view .LVU827
 2681 0bf4 14309FE5 		ldr	r3, .L149+8	@,
 2682 0bf8 14209FE5 		ldr	r2, .L149+12	@,
 2683 0bfc 14109FE5 		ldr	r1, .L149+16	@,
 2684 0c00 14009FE5 		ldr	r0, .L149+20	@,
 2685              	.LVL191:
 277:armwave.c     **** 
 2686              		.loc 1 277 5 is_stmt 0 discriminator 1 view .LVU828
 2687 0c04 FEFFFFEB 		bl	__assert_fail		@
 2688              	.LVL192:
 2689              	.L150:
 2690              		.align	2
 2691              	.L149:
 2692 0c08 00000000 		.word	g_armwave_state
 2693 0c0c FC000000 		.word	.LC7
 2694 0c10 30000000 		.word	.LANCHOR0+48
 2695 0c14 15010000 		.word	277
 2696 0c18 00000000 		.word	.LC0
 2697 0c1c E8000000 		.word	.LC6
 2698              		.cfi_endproc
 2699              	.LFE64:
 2701              		.align	2
 2702              		.global	armwave_dump_ppm_debug
 2703              		.syntax unified
 2704              		.arm
 2705              		.fpu vfp
 2707              	armwave_dump_ppm_debug:
 2708              	.LVL193:
 2709              	.LFB65:
 339:armwave.c     **** 
 340:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 341:armwave.c     **** {
 2710              		.loc 1 341 1 is_stmt 1 view -0
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 0
 2713              		@ frame_needed = 0, uses_anonymous_args = 0
 342:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2714              		.loc 1 342 5 view .LVU830
 2715              	@ armwave.c:341: {
 341:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2716              		.loc 1 341 1 is_stmt 0 view .LVU831
 2717 0c20 0130A0E1 		mov	r3, r1	@ fn, fn
 2718 0c24 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2719              		.cfi_def_cfa_offset 28
 2720              		.cfi_offset 4, -28
 2721              		.cfi_offset 5, -24
 2722              		.cfi_offset 6, -20
 2723              		.cfi_offset 7, -16
 2724              		.cfi_offset 8, -12
 2725              		.cfi_offset 9, -8
 2726              		.cfi_offset 14, -4
 2727 0c28 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2728 0c2c 0CD04DE2 		sub	sp, sp, #12	@,,
 2729              		.cfi_def_cfa_offset 40
 2730              	@ armwave.c:342:     FILE *fp = fopen(fn, "wb");
 2731              		.loc 1 342 16 view .LVU832
 2732 0c30 D8109FE5 		ldr	r1, .L163	@,
 2733              	.LVL194:
 2734              		.loc 1 342 16 view .LVU833
 2735 0c34 0300A0E1 		mov	r0, r3	@, fn
 2736              	.LVL195:
 2737              		.loc 1 342 16 view .LVU834
 2738 0c38 FEFFFFEB 		bl	fopen64		@
 2739              	.LVL196:
 2740              	@ armwave.c:349:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 343:armwave.c     ****     uint32_t data;
 344:armwave.c     ****     int xx, yy;
 345:armwave.c     **** 
 346:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 347:armwave.c     **** 
 348:armwave.c     ****     fputs("P3\n", fp);
 349:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2741              		.loc 1 349 5 view .LVU835
 2742 0c3c D0609FE5 		ldr	r6, .L163+4	@ tmp154,
 2743              	@ armwave.c:348:     fputs("P3\n", fp);
 348:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2744              		.loc 1 348 5 view .LVU836
 2745 0c40 0320A0E3 		mov	r2, #3	@,
 2746 0c44 0110A0E3 		mov	r1, #1	@,
 2747              	@ armwave.c:342:     FILE *fp = fopen(fn, "wb");
 342:armwave.c     ****     uint32_t data;
 2748              		.loc 1 342 16 view .LVU837
 2749 0c48 0070A0E1 		mov	r7, r0	@ fp,
 2750              	.LVL197:
 343:armwave.c     ****     uint32_t data;
 2751              		.loc 1 343 5 is_stmt 1 view .LVU838
 344:armwave.c     **** 
 2752              		.loc 1 344 5 view .LVU839
 348:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2753              		.loc 1 348 5 view .LVU840
 2754 0c4c 0030A0E1 		mov	r3, r0	@, fp
 2755 0c50 C0009FE5 		ldr	r0, .L163+8	@,
 2756              	.LVL198:
 348:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2757              		.loc 1 348 5 is_stmt 0 view .LVU841
 2758 0c54 FEFFFFEB 		bl	fwrite		@
 2759              	.LVL199:
 2760              		.loc 1 349 5 is_stmt 1 view .LVU842
 2761 0c58 3C3096E5 		ldr	r3, [r6, #60]	@, g_armwave_state.target_width
 2762 0c5c 402096E5 		ldr	r2, [r6, #64]	@, g_armwave_state.target_height
 2763 0c60 B4109FE5 		ldr	r1, .L163+12	@,
 2764 0c64 0700A0E1 		mov	r0, r7	@, fp
 2765 0c68 FEFFFFEB 		bl	fprintf		@
 2766              	.LVL200:
 350:armwave.c     ****     fputs("255\n", fp);
 2767              		.loc 1 350 5 view .LVU843
 2768 0c6c 0420A0E3 		mov	r2, #4	@,
 2769 0c70 0730A0E1 		mov	r3, r7	@, fp
 2770 0c74 0110A0E3 		mov	r1, #1	@,
 2771 0c78 A0009FE5 		ldr	r0, .L163+16	@,
 2772 0c7c FEFFFFEB 		bl	fwrite		@
 2773              	.LVL201:
 351:armwave.c     **** 
 352:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2774              		.loc 1 352 5 view .LVU844
 2775              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2776              		.loc 1 352 37 is_stmt 0 view .LVU845
 2777 0c80 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2778              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2779              		.loc 1 352 5 view .LVU846
 2780 0c84 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2781 0c88 1800000A 		beq	.L152		@,
 2782 0c8c 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2783              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 354:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 355:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 356:armwave.c     **** 
 357:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2784              		.loc 1 357 13 view .LVU847
 2785 0c90 8C909FE5 		ldr	r9, .L163+20	@ tmp156,
 2786              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2787              		.loc 1 352 12 view .LVU848
 2788 0c94 0050A0E3 		mov	r5, #0	@ yy,
 2789              	.LVL202:
 2790              	.L153:
 2791              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2792              		.loc 1 353 9 view .LVU849
 2793 0c98 000053E3 		cmp	r3, #0	@ _12,
 2794              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2795              		.loc 1 353 16 view .LVU850
 2796 0c9c 0040A013 		movne	r4, #0	@ xx,
 2797              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2798              		.loc 1 353 9 view .LVU851
 2799 0ca0 1600000A 		beq	.L162		@,
 2800              	.LVL203:
 2801              	.L154:
 354:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2802              		.loc 1 354 13 is_stmt 1 discriminator 3 view .LVU852
 2803              	@ armwave.c:354:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 354:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2804              		.loc 1 354 29 is_stmt 0 discriminator 3 view .LVU853
 2805 0ca4 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2806              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2807              		.loc 1 357 13 discriminator 3 view .LVU854
 2808 0ca8 0910A0E1 		mov	r1, r9	@, tmp156
 2809 0cac 0700A0E1 		mov	r0, r7	@, fp
 2810              	@ armwave.c:354:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 354:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2811              		.loc 1 354 18 discriminator 3 view .LVU855
 2812 0cb0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2813              	.LVL204:
 2814              		.loc 1 357 13 is_stmt 1 discriminator 3 view .LVU856
 2815              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2816              		.loc 1 353 58 is_stmt 0 discriminator 3 view .LVU857
 2817 0cb4 014084E2 		add	r4, r4, #1	@ xx, xx,
 2818              	.LVL205:
 2819              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2820              		.loc 1 357 81 discriminator 3 view .LVU858
 2821 0cb8 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2822              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2823              		.loc 1 357 61 discriminator 3 view .LVU859
 2824 0cbc 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2825              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2826              		.loc 1 357 13 discriminator 3 view .LVU860
 2827 0cc0 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2828 0cc4 7330EFE6 		uxtb	r3, r3	@, tmp146
 2829 0cc8 00C08DE5 		str	ip, [sp]	@ tmp151,
 2830 0ccc 7220EFE6 		uxtb	r2, r2	@, data
 2831              	.LVL206:
 2832              		.loc 1 357 13 discriminator 3 view .LVU861
 2833 0cd0 FEFFFFEB 		bl	fprintf		@
 2834              	.LVL207:
 2835              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2836              		.loc 1 353 41 discriminator 3 view .LVU862
 2837 0cd4 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2838              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2839              		.loc 1 353 9 discriminator 3 view .LVU863
 2840 0cd8 040053E1 		cmp	r3, r4	@ _12, xx
 2841 0cdc F0FFFF8A 		bhi	.L154		@,
 2842 0ce0 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2843              	.LVL208:
 2844              	.L155:
 2845              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2846              		.loc 1 352 55 discriminator 2 view .LVU864
 2847 0ce4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2848              	.LVL209:
 2849              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2850              		.loc 1 352 5 discriminator 2 view .LVU865
 2851 0ce8 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2852 0cec E9FFFF3A 		bcc	.L153		@,
 2853              	.LVL210:
 2854              	.L152:
 358:armwave.c     ****         }
 359:armwave.c     ****     }
 360:armwave.c     **** 
 361:armwave.c     ****     fclose(fp);
 2855              		.loc 1 361 5 is_stmt 1 view .LVU866
 2856 0cf0 0700A0E1 		mov	r0, r7	@, fp
 2857              	@ armwave.c:362: }
 362:armwave.c     **** }
 2858              		.loc 1 362 1 is_stmt 0 view .LVU867
 2859 0cf4 0CD08DE2 		add	sp, sp, #12	@,,
 2860              		.cfi_remember_state
 2861              		.cfi_def_cfa_offset 28
 2862              		@ sp needed	@
 2863 0cf8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2864              		.cfi_restore 14
 2865              		.cfi_restore 9
 2866              		.cfi_restore 8
 2867              		.cfi_restore 7
 2868              		.cfi_restore 6
 2869              		.cfi_restore 5
 2870              		.cfi_restore 4
 2871              		.cfi_def_cfa_offset 0
 2872              	.LVL211:
 2873              	@ armwave.c:361:     fclose(fp);
 361:armwave.c     **** }
 2874              		.loc 1 361 5 view .LVU868
 2875 0cfc FEFFFFEA 		b	fclose		@
 2876              	.LVL212:
 2877              	.L162:
 2878              		.cfi_restore_state
 2879              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2880              		.loc 1 352 55 view .LVU869
 2881 0d00 015085E2 		add	r5, r5, #1	@ yy, yy,
 2882              	.LVL213:
 2883              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2884              		.loc 1 352 5 view .LVU870
 2885 0d04 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2886 0d08 F5FFFF8A 		bhi	.L155		@,
 2887 0d0c F7FFFFEA 		b	.L152		@
 2888              	.L164:
 2889              		.align	2
 2890              	.L163:
 2891 0d10 10010000 		.word	.LC8
 2892 0d14 00000000 		.word	g_armwave_state
 2893 0d18 14010000 		.word	.LC9
 2894 0d1c 18010000 		.word	.LC10
 2895 0d20 20010000 		.word	.LC11
 2896 0d24 28010000 		.word	.LC12
 2897              		.cfi_endproc
 2898              	.LFE65:
 2900              		.align	2
 2901              		.global	armwave_test_init
 2902              		.syntax unified
 2903              		.arm
 2904              		.fpu vfp
 2906              	armwave_test_init:
 2907              	.LVL214:
 2908              	.LFB66:
 363:armwave.c     **** 
 364:armwave.c     **** void armwave_test_init(float mod, int render_width, int render_height)
 365:armwave.c     **** {
 2909              		.loc 1 365 1 is_stmt 1 view -0
 2910              		.cfi_startproc
 2911              		@ args = 0, pretend = 0, frame = 0
 2912              		@ frame_needed = 0, uses_anonymous_args = 0
 366:armwave.c     ****     mod_depth = mod;
 2913              		.loc 1 366 5 view .LVU872
 2914              	@ armwave.c:366:     mod_depth = mod;
 2915              		.loc 1 366 15 is_stmt 0 view .LVU873
 2916 0d28 9C309FE5 		ldr	r3, .L169+20	@ tmp128,
 2917              	@ armwave.c:365: {
 365:armwave.c     ****     mod_depth = mod;
 2918              		.loc 1 365 1 view .LVU874
 2919 0d2c F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2920              		.cfi_def_cfa_offset 24
 2921              		.cfi_offset 4, -24
 2922              		.cfi_offset 5, -20
 2923              		.cfi_offset 6, -16
 2924              		.cfi_offset 7, -12
 2925              		.cfi_offset 8, -8
 2926              		.cfi_offset 14, -4
 2927 0d30 068B2DED 		vpush.64	{d8, d9, d10}	@
 2928              		.cfi_def_cfa_offset 48
 2929              		.cfi_offset 80, -48
 2930              		.cfi_offset 81, -44
 2931              		.cfi_offset 82, -40
 2932              		.cfi_offset 83, -36
 2933              		.cfi_offset 84, -32
 2934              		.cfi_offset 85, -28
 2935 0d34 94409FE5 		ldr	r4, .L169+24	@ ivtmp.105,
 2936              	.LBB6:
 2937              	.LBB7:
 2938              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2939              		.loc 1 87 32 view .LVU875
 2940 0d38 22AA9FED 		vldr.32	s20, .L169+16	@ tmp134,
 2941              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2942              		.loc 1 87 26 view .LVU876
 2943 0d3c 1D9B9FED 		vldr.64	d9, .L169	@ tmp143,
 2944              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2945              		.loc 1 87 49 view .LVU877
 2946 0d40 1E8B9FED 		vldr.64	d8, .L169+8	@ tmp137,
 2947              	.LBE7:
 2948              	.LBE6:
 2949              	@ armwave.c:366:     mod_depth = mod;
 2950              		.loc 1 366 15 view .LVU878
 2951 0d44 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 367:armwave.c     **** 
 368:armwave.c     ****     test_create_waveform();
 2952              		.loc 1 368 5 is_stmt 1 view .LVU879
 2953              	@ armwave.c:365: {
 365:armwave.c     ****     mod_depth = mod;
 2954              		.loc 1 365 1 is_stmt 0 view .LVU880
 2955 0d48 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2956 0d4c 0170A0E1 		mov	r7, r1	@ render_height, render_height
 2957              	@ armwave.c:368:     test_create_waveform();
 2958              		.loc 1 368 5 view .LVU881
 2959 0d50 FEFFFFEB 		bl	test_create_waveform		@
 2960              	.LVL215:
 369:armwave.c     ****     test_create_gamma();
 2961              		.loc 1 369 5 is_stmt 1 view .LVU882
 2962              	.LBB9:
 2963              	.LBI6:
  81:armwave.c     **** {
 2964              		.loc 1 81 6 view .LVU883
  81:armwave.c     **** {
 2965              		.loc 1 81 6 is_stmt 0 view .LVU884
 2966 0d54 013084E2 		add	r3, r4, #1	@ _34, ivtmp.105,
 2967 0d58 018C84E2 		add	r8, r4, #256	@ _35, ivtmp.105,
 2968 0d5c 015063E2 		rsb	r5, r3, #1	@ tmp142, _34,
 2969              	.LVL216:
 2970              	.L166:
 2971              	.LBB8:
  87:armwave.c     ****     }
 2972              		.loc 1 87 9 is_stmt 1 view .LVU885
 2973              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2974              		.loc 1 87 32 is_stmt 0 view .LVU886
 2975 0d60 043085E0 		add	r3, r5, r4	@ tmp131, tmp142, ivtmp.105
 2976              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2977              		.loc 1 87 26 view .LVU887
 2978 0d64 491BB0EE 		vmov.f64	d1, d9	@, tmp143
 2979              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2980              		.loc 1 87 32 view .LVU888
 2981 0d68 903A07EE 		vmov	s15, r3	@ int	@ tmp131, tmp131
 2982 0d6c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp132, tmp131
 2983 0d70 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp133, tmp132, tmp134
 2984              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2985              		.loc 1 87 26 view .LVU889
 2986 0d74 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp133
 2987 0d78 FEFFFFEB 		bl	pow		@
 2988              	.LVL217:
 2989              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2990              		.loc 1 87 49 view .LVU890
 2991 0d7c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp136,, tmp137
 2992              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2993              		.loc 1 87 24 view .LVU891
 2994 0d80 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp138, tmp136
 2995 0d84 903A17EE 		vmov	r3, s15	@ int	@ tmp138, tmp138
 2996 0d88 0130E4E5 		strb	r3, [r4, #1]!	@ tmp138, MEM[base: _33, offset: 0B]
 2997              	.LVL218:
 2998              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2999              		.loc 1 86 5 view .LVU892
 3000 0d8c 080054E1 		cmp	r4, r8	@ ivtmp.105, _35
 3001 0d90 F2FFFF1A 		bne	.L166		@,
 3002              	.LVL219:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 3003              		.loc 1 86 5 view .LVU893
 3004              	.LBE8:
 3005              	.LBE9:
 370:armwave.c     **** 
 371:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_
 3006              		.loc 1 371 5 is_stmt 1 view .LVU894
 3007 0d94 0710A0E1 		mov	r1, r7	@, render_height
 3008 0d98 0600A0E1 		mov	r0, r6	@, render_width
 3009 0d9c 97FCFFEB 		bl	armwave_setup_render.constprop.0		@
 3010              	.LVL220:
 372:armwave.c     **** 
 373:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 3011              		.loc 1 373 5 view .LVU895
 3012              	@ armwave.c:374: }
 374:armwave.c     **** }
 3013              		.loc 1 374 1 is_stmt 0 view .LVU896
 3014 0da0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 3015              		.cfi_restore 84
 3016              		.cfi_restore 85
 3017              		.cfi_restore 82
 3018              		.cfi_restore 83
 3019              		.cfi_restore 80
 3020              		.cfi_restore 81
 3021              		.cfi_def_cfa_offset 24
 3022              	@ armwave.c:373:     printf("armwave version: %s\n", ARMWAVE_VER);
 373:armwave.c     **** }
 3023              		.loc 1 373 5 view .LVU897
 3024 0da4 28109FE5 		ldr	r1, .L169+28	@,
 3025 0da8 28009FE5 		ldr	r0, .L169+32	@,
 3026              	@ armwave.c:374: }
 3027              		.loc 1 374 1 view .LVU898
 3028 0dac F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 3029              		.cfi_restore 14
 3030              		.cfi_restore 8
 3031              		.cfi_restore 7
 3032              		.cfi_restore 6
 3033              		.cfi_restore 5
 3034              		.cfi_restore 4
 3035              		.cfi_def_cfa_offset 0
 3036              	.LVL221:
 3037              	@ armwave.c:373:     printf("armwave version: %s\n", ARMWAVE_VER);
 373:armwave.c     **** }
 3038              		.loc 1 373 5 view .LVU899
 3039 0db0 FEFFFFEA 		b	printf		@
 3040              	.LVL222:
 3041              	.L170:
 3042 0db4 0000A0E1 		.align	3
 3043              	.L169:
 3044 0db8 000000C0 		.word	-1073741824
 3045 0dbc CCCCEC3F 		.word	1072483532
 3046 0dc0 00000000 		.word	0
 3047 0dc4 00E06F40 		.word	1081073664
 3048 0dc8 00007F43 		.word	1132396544
 3049 0dcc 00000000 		.word	.LANCHOR1
 3050 0dd0 FFFFFFFF 		.word	gamma_table-1
 3051 0dd4 38010000 		.word	.LC13
 3052 0dd8 40010000 		.word	.LC14
 3053              		.cfi_endproc
 3054              	.LFE66:
 3056              		.global	__aeabi_uidiv
 3057              		.align	2
 3058              		.global	armwave_test_generate
 3059              		.syntax unified
 3060              		.arm
 3061              		.fpu vfp
 3063              	armwave_test_generate:
 3064              	.LFB67:
 375:armwave.c     **** 
 376:armwave.c     **** void armwave_test_generate()
 377:armwave.c     **** {
 3065              		.loc 1 377 1 is_stmt 1 view -0
 3066              		.cfi_startproc
 3067              		@ args = 0, pretend = 0, frame = 8
 3068              		@ frame_needed = 0, uses_anonymous_args = 0
 378:armwave.c     ****     uint32_t yy;
 3069              		.loc 1 378 5 view .LVU901
 379:armwave.c     **** 
 380:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3070              		.loc 1 380 5 view .LVU902
 3071              	@ armwave.c:377: {
 377:armwave.c     ****     uint32_t yy;
 3072              		.loc 1 377 1 is_stmt 0 view .LVU903
 3073 0ddc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3074              		.cfi_def_cfa_offset 36
 3075              		.cfi_offset 4, -36
 3076              		.cfi_offset 5, -32
 3077              		.cfi_offset 6, -28
 3078              		.cfi_offset 7, -24
 3079              		.cfi_offset 8, -20
 3080              		.cfi_offset 9, -16
 3081              		.cfi_offset 10, -12
 3082              		.cfi_offset 11, -8
 3083              		.cfi_offset 14, -4
 3084              	@ armwave.c:380:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3085              		.loc 1 380 5 view .LVU904
 3086 0de0 0010A0E3 		mov	r1, #0	@,
 3087 0de4 44419FE5 		ldr	r4, .L189	@ tmp269,
 3088              	@ armwave.c:377: {
 377:armwave.c     ****     uint32_t yy;
 3089              		.loc 1 377 1 view .LVU905
 3090 0de8 0CD04DE2 		sub	sp, sp, #12	@,,
 3091              		.cfi_def_cfa_offset 48
 3092              	@ armwave.c:380:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3093              		.loc 1 380 5 view .LVU906
 3094 0dec 382094E5 		ldr	r2, [r4, #56]	@, g_armwave_state.size
 3095 0df0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3096 0df4 FEFFFFEB 		bl	memset		@
 3097              	.LVL223:
 381:armwave.c     **** 
 382:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3098              		.loc 1 382 5 is_stmt 1 view .LVU907
 3099              	@ armwave.c:382:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3100              		.loc 1 382 45 is_stmt 0 view .LVU908
 3101 0df8 2C5094E5 		ldr	r5, [r4, #44]	@ _72, g_armwave_state.slice_height
 3102              	@ armwave.c:382:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3103              		.loc 1 382 5 view .LVU909
 3104 0dfc 020B55E3 		cmp	r5, #2048	@ _72,
 3105 0e00 4800008A 		bhi	.L171		@,
 3106 0e04 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3107              	@ armwave.c:382:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3108              		.loc 1 382 12 view .LVU910
 3109 0e08 00A0A0E3 		mov	r10, #0	@ yy,
 3110              	.LVL224:
 3111              	.L177:
 383:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3112              		.loc 1 383 9 is_stmt 1 discriminator 3 view .LVU911
 3113 0e0c 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 3114              	.LBB12:
 3115              	.LBB13:
 3116              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3117              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU912
 3118 0e10 280094E5 		ldr	r0, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3119              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3120              		.loc 1 110 5 discriminator 3 view .LVU913
 3121 0e14 000056E3 		cmp	r6, #0	@ prephitmp_171,
 3122              	.LBE13:
 3123              	.LBE12:
 3124              	@ armwave.c:383:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 3125              		.loc 1 383 9 discriminator 3 view .LVU914
 3126 0e18 309094E5 		ldr	r9, [r4, #48]	@ _4, g_armwave_state.slice_record_height
 3127              	.LVL225:
 3128              	.LBB15:
 3129              	.LBI12:
  99:armwave.c     **** {
 3130              		.loc 1 99 6 is_stmt 1 discriminator 3 view .LVU915
 3131              	.LBB14:
 101:armwave.c     ****     uint32_t value, word;
 3132              		.loc 1 101 5 discriminator 3 view .LVU916
 102:armwave.c     ****     uint8_t *wave_base;
 3133              		.loc 1 102 5 discriminator 3 view .LVU917
 103:armwave.c     ****     uint8_t *write_buffer_base;
 3134              		.loc 1 103 5 discriminator 3 view .LVU918
 104:armwave.c     ****     uint8_t *write_buffer;
 3135              		.loc 1 104 5 discriminator 3 view .LVU919
 105:armwave.c     ****     
 3136              		.loc 1 105 5 discriminator 3 view .LVU920
 107:armwave.c     **** 
 3137              		.loc 1 107 5 discriminator 3 view .LVU921
 3138              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3139              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU922
 3140 0e1c 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.bitdepth_height, _3
 3141              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3142              		.loc 1 107 40 discriminator 3 view .LVU923
 3143 0e20 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 3144              	.LVL226:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3145              		.loc 1 110 5 is_stmt 1 discriminator 3 view .LVU924
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3146              		.loc 1 110 5 is_stmt 0 discriminator 3 view .LVU925
 3147 0e24 3900000A 		beq	.L173		@,
 3148              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3149              		.loc 1 110 11 view .LVU926
 3150 0e28 0080A0E3 		mov	r8, #0	@ w,
 3151 0e2c 043043E2 		sub	r3, r3, #4	@ _77, _3,
 3152              	.LVL227:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3153              		.loc 1 110 11 view .LVU927
 3154 0e30 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 3155              	.LVL228:
 3156              	.L176:
 111:armwave.c     **** 
 3157              		.loc 1 111 9 is_stmt 1 view .LVU928
 3158              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3159              		.loc 1 111 64 is_stmt 0 view .LVU929
 3160 0e34 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3161              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3162              		.loc 1 115 9 view .LVU930
 3163 0e38 000059E3 		cmp	r9, #0	@ _4,
 3164              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3165              		.loc 1 111 36 view .LVU931
 3166 0e3c 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 3167              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3168              		.loc 1 111 64 view .LVU932
 3169 0e40 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 3170              	.LVL229:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3171              		.loc 1 115 9 is_stmt 1 view .LVU933
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3172              		.loc 1 115 9 is_stmt 0 view .LVU934
 3173 0e44 2D00000A 		beq	.L174		@,
 3174 0e48 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 3175 0e4c 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 3176              	.LVL230:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3177              		.loc 1 115 9 view .LVU935
 3178 0e50 03E08EE0 		add	lr, lr, r3	@ ivtmp.111, _16, tmp205
 3179              	.LVL231:
 3180              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3181              		.loc 1 115 16 view .LVU936
 3182 0e54 0010A0E3 		mov	r1, #0	@ yy,
 3183              	.LVL232:
 3184              	.L175:
 116:armwave.c     **** 
 3185              		.loc 1 116 13 is_stmt 1 view .LVU937
 3186              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 3187              		.loc 1 116 18 is_stmt 0 view .LVU938
 3188 0e58 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 3189              	.LVL233:
 118:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3190              		.loc 1 118 13 is_stmt 1 view .LVU939
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3191              		.loc 1 119 17 view .LVU940
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3192              		.loc 1 120 17 view .LVU941
 121:armwave.c     ****                 word >>= 8;
 3193              		.loc 1 121 17 view .LVU942
 3194              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3195              		.loc 1 119 45 is_stmt 0 view .LVU943
 3196 0e5c 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3197              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3198              		.loc 1 120 63 view .LVU944
 3199 0e60 286094E5 		ldr	r6, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3200              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3201              		.loc 1 119 37 view .LVU945
 3202 0e64 73C0EFE6 		uxtb	ip, r3	@ word, word
 3203              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3204              		.loc 1 122 22 view .LVU946
 3205 0e68 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 3206              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3207              		.loc 1 121 47 view .LVU947
 3208 0e6c 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 3209              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3210              		.loc 1 119 37 view .LVU948
 3211 0e70 7550EFE6 		uxtb	r5, r5	@ word, word
 3212              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3213              		.loc 1 121 47 view .LVU949
 3214 0e74 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.bitdepth_height, yy, tmp210
 3215              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3216              		.loc 1 120 63 view .LVU950
 3217 0e78 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 3218              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3219              		.loc 1 122 22 view .LVU951
 3220 0e7c 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3221              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3222              		.loc 1 121 47 view .LVU952
 3223 0e80 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 3224              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3225              		.loc 1 119 37 view .LVU953
 3226 0e84 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3227              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3228              		.loc 1 122 22 view .LVU954
 3229 0e88 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3230              	.LVL234:
 3231              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3232              		.loc 1 121 47 view .LVU955
 3233 0e8c 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 3234 0e90 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 3235              	.LVL235:
 122:armwave.c     ****             }
 3236              		.loc 1 122 17 is_stmt 1 view .LVU956
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3237              		.loc 1 119 17 view .LVU957
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3238              		.loc 1 120 17 view .LVU958
 121:armwave.c     ****                 word >>= 8;
 3239              		.loc 1 121 17 view .LVU959
 3240              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3241              		.loc 1 119 45 is_stmt 0 view .LVU960
 3242 0e94 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3243              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3244              		.loc 1 120 63 view .LVU961
 3245 0e98 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 3246              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3247              		.loc 1 121 47 view .LVU962
 3248 0e9c 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 3249              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3250              		.loc 1 120 63 view .LVU963
 3251 0ea0 286094E5 		ldr	r6, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3252              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3253              		.loc 1 121 47 view .LVU964
 3254 0ea4 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.bitdepth_height, tmp226, tmp224
 3255              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3256              		.loc 1 120 63 view .LVU965
 3257 0ea8 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 3258              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3259              		.loc 1 115 37 view .LVU966
 3260 0eac 041081E2 		add	r1, r1, #4	@ yy, yy,
 3261              	.LVL236:
 3262              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3263              		.loc 1 121 47 view .LVU967
 3264 0eb0 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 3265              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3266              		.loc 1 115 9 view .LVU968
 3267 0eb4 010059E1 		cmp	r9, r1	@ _4, yy
 3268              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3269              		.loc 1 121 47 view .LVU969
 3270 0eb8 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 3271 0ebc 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 3272              	.LVL237:
 122:armwave.c     ****             }
 3273              		.loc 1 122 17 is_stmt 1 view .LVU970
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3274              		.loc 1 119 17 view .LVU971
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3275              		.loc 1 120 17 view .LVU972
 121:armwave.c     ****                 word >>= 8;
 3276              		.loc 1 121 17 view .LVU973
 3277              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3278              		.loc 1 119 45 is_stmt 0 view .LVU974
 3279 0ec0 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3280              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3281              		.loc 1 120 63 view .LVU975
 3282 0ec4 285094E5 		ldr	r5, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3283              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3284              		.loc 1 121 47 view .LVU976
 3285 0ec8 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 3286 0ecc 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.bitdepth_height, tmp241, tmp239
 3287 0ed0 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 3288 0ed4 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 3289 0ed8 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 122:armwave.c     ****             }
 3290              		.loc 1 122 17 is_stmt 1 view .LVU977
 3291              	.LVL238:
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3292              		.loc 1 119 17 view .LVU978
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3293              		.loc 1 120 17 view .LVU979
 121:armwave.c     ****                 word >>= 8;
 3294              		.loc 1 121 17 view .LVU980
 3295              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3296              		.loc 1 119 45 is_stmt 0 view .LVU981
 3297 0edc 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3298              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3299              		.loc 1 120 63 view .LVU982
 3300 0ee0 28C094E5 		ldr	ip, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3301              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3302              		.loc 1 121 47 view .LVU983
 3303 0ee4 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 3304 0ee8 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.bitdepth_height, tmp255, tmp253
 3305 0eec 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 3306 0ef0 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 3307 0ef4 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 122:armwave.c     ****             }
 3308              		.loc 1 122 17 is_stmt 1 view .LVU984
 3309              	.LVL239:
 3310              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3311              		.loc 1 115 9 is_stmt 0 view .LVU985
 3312 0ef8 D6FFFF8A 		bhi	.L175		@,
 3313 0efc 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3314              	.LVL240:
 3315              	.L174:
 3316              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3317              		.loc 1 110 44 view .LVU986
 3318 0f00 018088E2 		add	r8, r8, #1	@ w, w,
 3319              	.LVL241:
 3320              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3321              		.loc 1 110 5 view .LVU987
 3322 0f04 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 3323 0f08 C9FFFF3A 		bcc	.L176		@,
 3324 0f0c 2C5094E5 		ldr	r5, [r4, #44]	@ _72, g_armwave_state.slice_height
 3325              	.LVL242:
 3326              	.L173:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3327              		.loc 1 110 5 view .LVU988
 3328              	.LBE14:
 3329              	.LBE15:
 3330              	@ armwave.c:382:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 382:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3331              		.loc 1 382 28 discriminator 3 view .LVU989
 3332 0f10 0510A0E1 		mov	r1, r5	@, _72
 3333 0f14 020BA0E3 		mov	r0, #2048	@,
 3334              	.LVL243:
 382:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3335              		.loc 1 382 28 discriminator 3 view .LVU990
 3336 0f18 FEFFFFEB 		bl	__aeabi_uidiv		@
 3337              	.LVL244:
 3338              	@ armwave.c:382:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 382:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3339              		.loc 1 382 63 discriminator 3 view .LVU991
 3340 0f1c 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 3341              	.LVL245:
 3342              	@ armwave.c:382:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 382:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3343              		.loc 1 382 5 discriminator 3 view .LVU992
 3344 0f20 0A0050E1 		cmp	r0, r10	@, yy
 3345 0f24 B8FFFF8A 		bhi	.L177		@,
 3346              	.LVL246:
 3347              	.L171:
 3348              	@ armwave.c:385: }
 384:armwave.c     ****     }
 385:armwave.c     **** }
 3349              		.loc 1 385 1 view .LVU993
 3350 0f28 0CD08DE2 		add	sp, sp, #12	@,,
 3351              		.cfi_def_cfa_offset 36
 3352              		@ sp needed	@
 3353 0f2c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3354              	.L190:
 3355              		.align	2
 3356              	.L189:
 3357 0f30 00000000 		.word	g_armwave_state
 3358              		.cfi_endproc
 3359              	.LFE67:
 3361              		.align	2
 3362              		.global	armwave_test_get_buffer
 3363              		.syntax unified
 3364              		.arm
 3365              		.fpu vfp
 3367              	armwave_test_get_buffer:
 3368              	.LFB68:
 386:armwave.c     **** 
 387:armwave.c     **** PyObject *armwave_test_get_buffer()
 388:armwave.c     **** {
 3369              		.loc 1 388 1 is_stmt 1 view -0
 3370              		.cfi_startproc
 3371              		@ args = 0, pretend = 0, frame = 0
 3372              		@ frame_needed = 0, uses_anonymous_args = 0
 389:armwave.c     ****     PyObject *mv;
 3373              		.loc 1 389 5 view .LVU995
 390:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3374              		.loc 1 390 5 view .LVU996
 3375              	@ armwave.c:388: {
 388:armwave.c     ****     PyObject *mv;
 3376              		.loc 1 388 1 is_stmt 0 view .LVU997
 3377 0f34 30402DE9 		push	{r4, r5, lr}	@
 3378              		.cfi_def_cfa_offset 12
 3379              		.cfi_offset 4, -12
 3380              		.cfi_offset 5, -8
 3381              		.cfi_offset 14, -4
 3382              	@ armwave.c:390:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3383              		.loc 1 390 22 view .LVU998
 3384 0f38 2C00A0E3 		mov	r0, #44	@,
 3385              	@ armwave.c:388: {
 388:armwave.c     ****     PyObject *mv;
 3386              		.loc 1 388 1 view .LVU999
 3387 0f3c 0CD04DE2 		sub	sp, sp, #12	@,,
 3388              		.cfi_def_cfa_offset 24
 3389              	@ armwave.c:390:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3390              		.loc 1 390 22 view .LVU1000
 3391 0f40 FEFFFFEB 		bl	malloc		@
 3392              	.LVL247:
 3393              	@ armwave.c:392:  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 391:armwave.c     ****     
 392:armwave.c     ****  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 3394              		.loc 1 392 3 view .LVU1001
 3395 0f44 3C409FE5 		ldr	r4, .L193	@ tmp118,
 3396              	@ armwave.c:390:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 390:armwave.c     ****     
 3397              		.loc 1 390 22 view .LVU1002
 3398 0f48 0050A0E1 		mov	r5, r0	@ tmp117,
 3399              	.LVL248:
 3400              		.loc 1 392 3 is_stmt 1 view .LVU1003
 3401 0f4c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3402              	.LVL249:
 3403              		.loc 1 392 3 is_stmt 0 view .LVU1004
 3404 0f50 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3405              	.LVL250:
 393:armwave.c     **** 
 394:armwave.c     ****     /*
 395:armwave.c     ****     if(g_armwave_state.target_height == 256) {
 396:armwave.c     ****         armwave_fill_pixbuf_256(g_armwave_state.out_pixbuf);
 397:armwave.c     ****     } else {
 398:armwave.c     ****         armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 399:armwave.c     ****     }
 400:armwave.c     ****     */
 401:armwave.c     **** 
 402:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 3406              		.loc 1 402 5 is_stmt 1 view .LVU1005
 3407              	@ armwave.c:402:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3408              		.loc 1 402 79 is_stmt 0 view .LVU1006
 3409 0f54 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 3410              	@ armwave.c:402:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3411              		.loc 1 402 5 view .LVU1007
 3412 0f58 08C0A0E3 		mov	ip, #8	@ tmp125,
 3413 0f5c 0110A0E3 		mov	r1, #1	@ tmp126,
 3414 0f60 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 3415 0f64 02108DE8 		stm	sp, {r1, ip}	@,,
 3416 0f68 4C2094E5 		ldr	r2, [r4, #76]	@, g_armwave_state.out_pixbuf
 3417 0f6c 0500A0E1 		mov	r0, r5	@, tmp117
 3418 0f70 0010A0E3 		mov	r1, #0	@,
 3419 0f74 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 3420              	.LVL251:
 403:armwave.c     **** 
 404:armwave.c     ****     mv = PyMemoryView_FromBuffer(buf);
 3421              		.loc 1 404 5 is_stmt 1 view .LVU1008
 3422              	@ armwave.c:404:     mv = PyMemoryView_FromBuffer(buf);
 3423              		.loc 1 404 10 is_stmt 0 view .LVU1009
 3424 0f78 0500A0E1 		mov	r0, r5	@, tmp117
 3425              	@ armwave.c:405: }
 405:armwave.c     **** }
 3426              		.loc 1 405 1 view .LVU1010
 3427 0f7c 0CD08DE2 		add	sp, sp, #12	@,,
 3428              		.cfi_def_cfa_offset 12
 3429              		@ sp needed	@
 3430 0f80 3040BDE8 		pop	{r4, r5, lr}	@
 3431              		.cfi_restore 14
 3432              		.cfi_restore 5
 3433              		.cfi_restore 4
 3434              		.cfi_def_cfa_offset 0
 3435              	.LVL252:
 3436              	@ armwave.c:404:     mv = PyMemoryView_FromBuffer(buf);
 404:armwave.c     **** }
 3437              		.loc 1 404 10 view .LVU1011
 3438 0f84 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 3439              	.LVL253:
 3440              	.L194:
 404:armwave.c     **** }
 3441              		.loc 1 404 10 view .LVU1012
 3442              		.align	2
 3443              	.L193:
 3444 0f88 00000000 		.word	g_armwave_state
 3445              		.cfi_endproc
 3446              	.LFE68:
 3448              		.align	2
 3449              		.global	armwave_test_dump_buffer_to_ppm
 3450              		.syntax unified
 3451              		.arm
 3452              		.fpu vfp
 3454              	armwave_test_dump_buffer_to_ppm:
 3455              	.LVL254:
 3456              	.LFB69:
 406:armwave.c     **** 
 407:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 408:armwave.c     **** {
 3457              		.loc 1 408 1 is_stmt 1 view -0
 3458              		.cfi_startproc
 3459              		@ args = 0, pretend = 0, frame = 0
 3460              		@ frame_needed = 0, uses_anonymous_args = 0
 3461              		@ link register save eliminated.
 409:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3462              		.loc 1 409 5 view .LVU1014
 3463 0f8c 08309FE5 		ldr	r3, .L196	@ tmp112,
 3464 0f90 0010A0E1 		mov	r1, r0	@, fn
 3465 0f94 4C0093E5 		ldr	r0, [r3, #76]	@, g_armwave_state.out_pixbuf
 3466              	.LVL255:
 3467              		.loc 1 409 5 is_stmt 0 view .LVU1015
 3468 0f98 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3469              	.LVL256:
 3470              	.L197:
 3471              		.loc 1 409 5 view .LVU1016
 3472              		.align	2
 3473              	.L196:
 3474 0f9c 00000000 		.word	g_armwave_state
 3475              		.cfi_endproc
 3476              	.LFE69:
 3478              		.align	2
 3479              		.global	armwave_cleanup
 3480              		.syntax unified
 3481              		.arm
 3482              		.fpu vfp
 3484              	armwave_cleanup:
 3485              	.LFB70:
 410:armwave.c     **** }
 411:armwave.c     **** 
 412:armwave.c     **** void armwave_cleanup()
 413:armwave.c     **** {
 3486              		.loc 1 413 1 is_stmt 1 view -0
 3487              		.cfi_startproc
 3488              		@ args = 0, pretend = 0, frame = 0
 3489              		@ frame_needed = 0, uses_anonymous_args = 0
 414:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3490              		.loc 1 414 5 view .LVU1018
 3491              	@ armwave.c:413: {
 413:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3492              		.loc 1 413 1 is_stmt 0 view .LVU1019
 3493 0fa0 10402DE9 		push	{r4, lr}	@
 3494              		.cfi_def_cfa_offset 8
 3495              		.cfi_offset 4, -8
 3496              		.cfi_offset 14, -4
 3497              	@ armwave.c:414:     free(g_armwave_state.out_pixbuf);
 3498              		.loc 1 414 25 view .LVU1020
 3499 0fa4 28409FE5 		ldr	r4, .L200	@ tmp113,
 3500              	@ armwave.c:414:     free(g_armwave_state.out_pixbuf);
 3501              		.loc 1 414 5 view .LVU1021
 3502 0fa8 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3503 0fac FEFFFFEB 		bl	free		@
 3504              	.LVL257:
 415:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3505              		.loc 1 415 5 is_stmt 1 view .LVU1022
 3506 0fb0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3507 0fb4 FEFFFFEB 		bl	free		@
 3508              	.LVL258:
 416:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3509              		.loc 1 416 5 view .LVU1023
 3510 0fb8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.xcoord_to_xpixel
 3511 0fbc FEFFFFEB 		bl	free		@
 3512              	.LVL259:
 417:armwave.c     **** 
 418:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3513              		.loc 1 418 5 view .LVU1024
 3514              	@ armwave.c:418:     g_armwave_state.out_pixbuf = NULL;
 3515              		.loc 1 418 32 is_stmt 0 view .LVU1025
 3516 0fc0 0030A0E3 		mov	r3, #0	@ tmp120,
 3517 0fc4 4C3084E5 		str	r3, [r4, #76]	@ tmp120, g_armwave_state.out_pixbuf
 419:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3518              		.loc 1 419 5 is_stmt 1 view .LVU1026
 3519              	@ armwave.c:419:     g_armwave_state.ch1_buffer = NULL;
 3520              		.loc 1 419 32 is_stmt 0 view .LVU1027
 3521 0fc8 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 420:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3522              		.loc 1 420 5 is_stmt 1 view .LVU1028
 3523              	@ armwave.c:420:     g_armwave_state.xcoord_to_xpixel = NULL;
 3524              		.loc 1 420 38 is_stmt 0 view .LVU1029
 3525 0fcc 683084E5 		str	r3, [r4, #104]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3526              	@ armwave.c:421: }
 421:armwave.c     **** }
 3527              		.loc 1 421 1 view .LVU1030
 3528 0fd0 1080BDE8 		pop	{r4, pc}	@
 3529              	.L201:
 3530              		.align	2
 3531              	.L200:
 3532 0fd4 00000000 		.word	g_armwave_state
 3533              		.cfi_endproc
 3534              	.LFE70:
 3536              		.section	.text.startup,"ax",%progbits
 3537              		.align	2
 3538              		.global	main
 3539              		.syntax unified
 3540              		.arm
 3541              		.fpu vfp
 3543              	main:
 3544              	.LVL260:
 3545              	.LFB71:
 422:armwave.c     **** 
 423:armwave.c     **** int main(int argc, char *argv[])
 424:armwave.c     **** {
 3546              		.loc 1 424 1 is_stmt 1 view -0
 3547              		.cfi_startproc
 3548              		@ args = 0, pretend = 0, frame = 8
 3549              		@ frame_needed = 0, uses_anonymous_args = 0
 425:armwave.c     ****     uint32_t *out_buffer;
 3550              		.loc 1 425 5 view .LVU1032
 426:armwave.c     ****     uint32_t xx, yy, n;
 3551              		.loc 1 426 5 view .LVU1033
 427:armwave.c     **** 
 428:armwave.c     ****     //printf("Starting armwave...\n");
 429:armwave.c     ****     armwave_init();
 3552              		.loc 1 429 5 view .LVU1034
 3553              	.LBB20:
 3554              	.LBI20:
 128:armwave.c     **** {
 3555              		.loc 1 128 6 view .LVU1035
 3556              	.LBB21:
 130:armwave.c     **** }
 3557              		.loc 1 130 5 view .LVU1036
 3558              	.LBE21:
 3559              	.LBE20:
 3560              	@ armwave.c:424: {
 424:armwave.c     ****     uint32_t *out_buffer;
 3561              		.loc 1 424 1 is_stmt 0 view .LVU1037
 3562 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3563              		.cfi_def_cfa_offset 36
 3564              		.cfi_offset 4, -36
 3565              		.cfi_offset 5, -32
 3566              		.cfi_offset 6, -28
 3567              		.cfi_offset 7, -24
 3568              		.cfi_offset 8, -20
 3569              		.cfi_offset 9, -16
 3570              		.cfi_offset 10, -12
 3571              		.cfi_offset 11, -8
 3572              		.cfi_offset 14, -4
 3573 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 3574              		.cfi_def_cfa_offset 48
 3575              	.LBB25:
 3576              	.LBB22:
 3577              	@ armwave.c:130:     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 3578              		.loc 1 130 27 view .LVU1038
 3579 0008 70919FE5 		ldr	r9, .L222	@ tmp267,
 3580              	.LBE22:
 3581              	.LBE25:
 3582              	@ armwave.c:438:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 430:armwave.c     **** 
 431:armwave.c     ****     //printf("Creating test waveform...\n");
 432:armwave.c     ****     test_create_waveform();
 433:armwave.c     **** 
 434:armwave.c     ****     //printf("Creating gamma LUT...\n");
 435:armwave.c     ****     test_create_gamma();
 436:armwave.c     **** 
 437:armwave.c     ****     //printf("Setting up render...\n");
 438:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 3583              		.loc 1 438 5 view .LVU1039
 3584 000c 70219FE5 		ldr	r2, .L222+4	@ ivtmp_191,
 3585              	.LBB26:
 3586              	.LBB23:
 3587              	@ armwave.c:130:     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 3588              		.loc 1 130 27 view .LVU1040
 3589 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 3590              	.LBE23:
 3591              	.LBE26:
 3592              	@ armwave.c:438:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 3593              		.loc 1 438 5 view .LVU1041
 3594 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 3595              	.LBB27:
 3596              	.LBB24:
 3597              	@ armwave.c:130:     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 3598              		.loc 1 130 27 view .LVU1042
 3599 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 3600              	.LBE24:
 3601              	.LBE27:
 432:armwave.c     **** 
 3602              		.loc 1 432 5 is_stmt 1 view .LVU1043
 3603 001c FEFFFFEB 		bl	test_create_waveform		@
 3604              	.LVL261:
 435:armwave.c     **** 
 3605              		.loc 1 435 5 view .LVU1044
 3606 0020 FEFFFFEB 		bl	test_create_gamma		@
 3607              	.LVL262:
 3608              		.loc 1 438 5 view .LVU1045
 3609 0024 011CA0E3 		mov	r1, #256	@,
 3610 0028 020BA0E3 		mov	r0, #2048	@,
 3611 002c FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 3612              	.LVL263:
 439:armwave.c     **** 
 440:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 441:armwave.c     **** 
 442:armwave.c     ****     for(n = 0; n < 5000; n++) {
 3613              		.loc 1 442 5 view .LVU1046
 3614              		.loc 1 442 5 is_stmt 0 view .LVU1047
 3615 0030 2C5099E5 		ldr	r5, [r9, #44]	@ _61, g_armwave_state.slice_height
 3616              	.LVL264:
 3617              	.L203:
 3618              	@ armwave.c:443:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 443:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3619              		.loc 1 443 9 view .LVU1048
 3620 0034 020B55E3 		cmp	r5, #2048	@ _61,
 3621 0038 4900008A 		bhi	.L211		@,
 3622 003c 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3623              	@ armwave.c:443:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3624              		.loc 1 443 16 view .LVU1049
 3625 0040 0080A0E3 		mov	r8, #0	@ yy,
 3626 0044 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 3627              	.LVL265:
 3628              	.L208:
 444:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 445:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 3629              		.loc 1 445 13 is_stmt 1 discriminator 3 view .LVU1050
 3630 0048 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 3631              	.LBB28:
 3632              	.LBB29:
 3633              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3634              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU1051
 3635 004c 280099E5 		ldr	r0, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3636              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3637              		.loc 1 110 5 discriminator 3 view .LVU1052
 3638 0050 000056E3 		cmp	r6, #0	@ prephitmp_178,
 3639              	.LBE29:
 3640              	.LBE28:
 3641              	@ armwave.c:445:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 3642              		.loc 1 445 13 discriminator 3 view .LVU1053
 3643 0054 30A099E5 		ldr	r10, [r9, #48]	@ _2, g_armwave_state.slice_record_height
 3644              	.LVL266:
 3645              	.LBB31:
 3646              	.LBI28:
  99:armwave.c     **** {
 3647              		.loc 1 99 6 is_stmt 1 discriminator 3 view .LVU1054
 3648              	.LBB30:
 101:armwave.c     ****     uint32_t value, word;
 3649              		.loc 1 101 5 discriminator 3 view .LVU1055
 102:armwave.c     ****     uint8_t *wave_base;
 3650              		.loc 1 102 5 discriminator 3 view .LVU1056
 103:armwave.c     ****     uint8_t *write_buffer_base;
 3651              		.loc 1 103 5 discriminator 3 view .LVU1057
 104:armwave.c     ****     uint8_t *write_buffer;
 3652              		.loc 1 104 5 discriminator 3 view .LVU1058
 105:armwave.c     ****     
 3653              		.loc 1 105 5 discriminator 3 view .LVU1059
 107:armwave.c     **** 
 3654              		.loc 1 107 5 discriminator 3 view .LVU1060
 3655              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3656              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU1061
 3657 0058 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.bitdepth_height, _1
 3658              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3659              		.loc 1 107 40 discriminator 3 view .LVU1062
 3660 005c 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 3661              	.LVL267:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3662              		.loc 1 110 5 is_stmt 1 discriminator 3 view .LVU1063
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3663              		.loc 1 110 5 is_stmt 0 discriminator 3 view .LVU1064
 3664 0060 3900000A 		beq	.L204		@,
 3665              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3666              		.loc 1 110 11 view .LVU1065
 3667 0064 0070A0E3 		mov	r7, #0	@ w,
 3668 0068 043043E2 		sub	r3, r3, #4	@ _81, _1,
 3669              	.LVL268:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3670              		.loc 1 110 11 view .LVU1066
 3671 006c 00308DE5 		str	r3, [sp]	@ _81, %sfp
 3672              	.LVL269:
 3673              	.L207:
 111:armwave.c     **** 
 3674              		.loc 1 111 9 is_stmt 1 view .LVU1067
 3675              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3676              		.loc 1 111 64 is_stmt 0 view .LVU1068
 3677 0070 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3678              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3679              		.loc 1 115 9 view .LVU1069
 3680 0074 00005AE3 		cmp	r10, #0	@ _2,
 3681              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3682              		.loc 1 111 36 view .LVU1070
 3683 0078 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 3684              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3685              		.loc 1 111 64 view .LVU1071
 3686 007c 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 3687              	.LVL270:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3688              		.loc 1 115 9 is_stmt 1 view .LVU1072
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3689              		.loc 1 115 9 is_stmt 0 view .LVU1073
 3690 0080 2D00000A 		beq	.L205		@,
 3691 0084 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 3692 0088 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 3693              	.LVL271:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3694              		.loc 1 115 9 view .LVU1074
 3695 008c 03E08EE0 		add	lr, lr, r3	@ ivtmp.124, _20, tmp202
 3696              	.LVL272:
 3697              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3698              		.loc 1 115 16 view .LVU1075
 3699 0090 0010A0E3 		mov	r1, #0	@ yy,
 3700              	.LVL273:
 3701              	.L206:
 116:armwave.c     **** 
 3702              		.loc 1 116 13 is_stmt 1 view .LVU1076
 3703              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 3704              		.loc 1 116 18 is_stmt 0 view .LVU1077
 3705 0094 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 3706              	.LVL274:
 118:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3707              		.loc 1 118 13 is_stmt 1 view .LVU1078
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3708              		.loc 1 119 17 view .LVU1079
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3709              		.loc 1 120 17 view .LVU1080
 121:armwave.c     ****                 word >>= 8;
 3710              		.loc 1 121 17 view .LVU1081
 3711              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3712              		.loc 1 119 45 is_stmt 0 view .LVU1082
 3713 0098 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3714              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3715              		.loc 1 120 63 view .LVU1083
 3716 009c 285099E5 		ldr	r5, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3717              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3718              		.loc 1 119 37 view .LVU1084
 3719 00a0 73C0EFE6 		uxtb	ip, r3	@ word, word
 3720              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3721              		.loc 1 122 22 view .LVU1085
 3722 00a4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 3723              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3724              		.loc 1 121 47 view .LVU1086
 3725 00a8 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 3726              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3727              		.loc 1 119 37 view .LVU1087
 3728 00ac 7440EFE6 		uxtb	r4, r4	@ word, word
 3729              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3730              		.loc 1 121 47 view .LVU1088
 3731 00b0 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.bitdepth_height, yy, tmp207
 3732              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3733              		.loc 1 120 63 view .LVU1089
 3734 00b4 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 3735              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3736              		.loc 1 122 22 view .LVU1090
 3737 00b8 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3738              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3739              		.loc 1 121 47 view .LVU1091
 3740 00bc 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 3741              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3742              		.loc 1 119 37 view .LVU1092
 3743 00c0 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3744              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3745              		.loc 1 122 22 view .LVU1093
 3746 00c4 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3747              	.LVL275:
 3748              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3749              		.loc 1 121 47 view .LVU1094
 3750 00c8 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 3751 00cc 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 3752              	.LVL276:
 122:armwave.c     ****             }
 3753              		.loc 1 122 17 is_stmt 1 view .LVU1095
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3754              		.loc 1 119 17 view .LVU1096
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3755              		.loc 1 120 17 view .LVU1097
 121:armwave.c     ****                 word >>= 8;
 3756              		.loc 1 121 17 view .LVU1098
 3757              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3758              		.loc 1 119 45 is_stmt 0 view .LVU1099
 3759 00d0 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3760              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3761              		.loc 1 120 63 view .LVU1100
 3762 00d4 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 3763              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3764              		.loc 1 121 47 view .LVU1101
 3765 00d8 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 3766              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3767              		.loc 1 120 63 view .LVU1102
 3768 00dc 285099E5 		ldr	r5, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3769              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3770              		.loc 1 121 47 view .LVU1103
 3771 00e0 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.bitdepth_height, tmp223, tmp221
 3772              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3773              		.loc 1 120 63 view .LVU1104
 3774 00e4 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 3775              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3776              		.loc 1 115 37 view .LVU1105
 3777 00e8 041081E2 		add	r1, r1, #4	@ yy, yy,
 3778              	.LVL277:
 3779              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3780              		.loc 1 121 47 view .LVU1106
 3781 00ec 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 3782              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3783              		.loc 1 115 9 view .LVU1107
 3784 00f0 01005AE1 		cmp	r10, r1	@ _2, yy
 3785              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3786              		.loc 1 121 47 view .LVU1108
 3787 00f4 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 3788 00f8 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 3789              	.LVL278:
 122:armwave.c     ****             }
 3790              		.loc 1 122 17 is_stmt 1 view .LVU1109
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3791              		.loc 1 119 17 view .LVU1110
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3792              		.loc 1 120 17 view .LVU1111
 121:armwave.c     ****                 word >>= 8;
 3793              		.loc 1 121 17 view .LVU1112
 3794              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3795              		.loc 1 119 45 is_stmt 0 view .LVU1113
 3796 00fc 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3797              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3798              		.loc 1 120 63 view .LVU1114
 3799 0100 284099E5 		ldr	r4, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3800              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3801              		.loc 1 121 47 view .LVU1115
 3802 0104 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 3803 0108 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.bitdepth_height, tmp238, tmp236
 3804 010c 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 3805 0110 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 3806 0114 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 122:armwave.c     ****             }
 3807              		.loc 1 122 17 is_stmt 1 view .LVU1116
 3808              	.LVL279:
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3809              		.loc 1 119 17 view .LVU1117
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3810              		.loc 1 120 17 view .LVU1118
 121:armwave.c     ****                 word >>= 8;
 3811              		.loc 1 121 17 view .LVU1119
 3812              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3813              		.loc 1 119 45 is_stmt 0 view .LVU1120
 3814 0118 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3815              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3816              		.loc 1 120 63 view .LVU1121
 3817 011c 28C099E5 		ldr	ip, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3818              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3819              		.loc 1 121 47 view .LVU1122
 3820 0120 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 3821 0124 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.bitdepth_height, tmp252, tmp250
 3822 0128 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 3823 012c 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 3824 0130 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 122:armwave.c     ****             }
 3825              		.loc 1 122 17 is_stmt 1 view .LVU1123
 3826              	.LVL280:
 3827              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3828              		.loc 1 115 9 is_stmt 0 view .LVU1124
 3829 0134 D6FFFF8A 		bhi	.L206		@,
 3830 0138 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3831              	.LVL281:
 3832              	.L205:
 3833              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3834              		.loc 1 110 44 view .LVU1125
 3835 013c 017087E2 		add	r7, r7, #1	@ w, w,
 3836              	.LVL282:
 3837              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3838              		.loc 1 110 5 view .LVU1126
 3839 0140 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 3840 0144 C9FFFF3A 		bcc	.L207		@,
 3841 0148 2C5099E5 		ldr	r5, [r9, #44]	@ _61, g_armwave_state.slice_height
 3842              	.LVL283:
 3843              	.L204:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3844              		.loc 1 110 5 view .LVU1127
 3845              	.LBE30:
 3846              	.LBE31:
 3847              	@ armwave.c:443:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 443:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3848              		.loc 1 443 32 discriminator 3 view .LVU1128
 3849 014c 0510A0E1 		mov	r1, r5	@, _61
 3850 0150 020BA0E3 		mov	r0, #2048	@,
 3851              	.LVL284:
 443:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3852              		.loc 1 443 32 discriminator 3 view .LVU1129
 3853 0154 FEFFFFEB 		bl	__aeabi_uidiv		@
 3854              	.LVL285:
 3855              	@ armwave.c:443:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 443:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3856              		.loc 1 443 67 discriminator 3 view .LVU1130
 3857 0158 018088E2 		add	r8, r8, #1	@ yy, yy,
 3858              	.LVL286:
 3859              	@ armwave.c:443:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 443:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3860              		.loc 1 443 9 discriminator 3 view .LVU1131
 3861 015c 080050E1 		cmp	r0, r8	@, yy
 3862 0160 B8FFFF8A 		bhi	.L208		@,
 3863              	.LVL287:
 3864              	.L211:
 3865              	@ armwave.c:442:     for(n = 0; n < 5000; n++) {
 442:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3866              		.loc 1 442 5 discriminator 2 view .LVU1132
 3867 0164 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 3868 0168 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 3869 016c 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 3870 0170 AFFFFF1A 		bne	.L203		@,
 3871 0174 0300A0E1 		mov	r0, r3	@, ivtmp_191
 446:armwave.c     ****         }
 447:armwave.c     ****     }
 448:armwave.c     **** 
 449:armwave.c     ****     /*
 450:armwave.c     ****     printf("Creating pixbuf\n");
 451:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 452:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 453:armwave.c     **** 
 454:armwave.c     ****     printf("Dumping pixbuf\n");
 455:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 456:armwave.c     ****     */
 457:armwave.c     **** 
 458:armwave.c     ****     return 0;
 3872              		.loc 1 458 5 is_stmt 1 view .LVU1133
 3873              	@ armwave.c:459: }
 459:armwave.c     **** }...
 3874              		.loc 1 459 1 is_stmt 0 view .LVU1134
 3875 0178 0CD08DE2 		add	sp, sp, #12	@,,
 3876              		.cfi_def_cfa_offset 36
 3877              		@ sp needed	@
 3878 017c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3879              	.L223:
 3880              		.align	2
 3881              	.L222:
 3882 0180 00000000 		.word	g_armwave_state
 3883 0184 88130000 		.word	5000
 3884              		.cfi_endproc
 3885              	.LFE71:
 3887              		.global	mod_depth
 3888              		.global	overall_scale
 3889              		.comm	gamma_table,256,4
 3890              		.comm	test_wave_buffer,131072,4
 3891              		.comm	g_armwave_state,108,4
 3892              		.section	.rodata
 3893              		.align	2
 3894              		.set	.LANCHOR0,. + 0
 3897              	__PRETTY_FUNCTION__.17003:
 3898 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3898      6176655F 
 3898      73657475 
 3898      705F7265 
 3898      6E646572 
 3899 0015 000000   		.space	3
 3902              	__PRETTY_FUNCTION__.17031:
 3903 0018 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3903      6176655F 
 3903      66696C6C 
 3903      5F706978 
 3903      6275665F 
 3906              	__PRETTY_FUNCTION__.17061:
 3907 0030 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3907      6176655F 
 3907      66696C6C 
 3907      5F706978 
 3907      6275665F 
 3908 004b 00       		.space	1
 3911              	overall_scale:
 3912 004c 00002041 		.word	1092616192
 3913              		.bss
 3914              		.align	2
 3915              		.set	.LANCHOR1,. + 0
 3918              	mod_depth:
 3919 0000 00000000 		.space	4
 3920              		.section	.rodata.str1.4,"aMS",%progbits,1
 3921              		.align	2
 3922              	.LC0:
 3923 0000 61726D77 		.ascii	"armwave.c\000"
 3923      6176652E 
 3923      6300
 3924 000a 0000     		.space	2
 3925              	.LC1:
 3926 000c 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3926      65745F68 
 3926      65696768 
 3926      74203D3D 
 3926      20323536 
 3927 003f 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3927      68656967 
 3927      6874203D 
 3927      3D203130 
 3927      3234207C 
 3928 006b 00       		.space	1
 3929              	.LC2:
 3930 006c 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 3930      7566665F 
 3930      73697A65 
 3930      3D25640A 
 3930      00
 3931 007d 000000   		.space	3
 3932              	.LC3:
 3933 0080 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3933      6D776176 
 3933      655F7374 
 3933      6174652E 
 3933      6368315F 
 3934 00a3 00       		.space	1
 3935              	.LC4:
 3936 00a4 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3936      6D776176 
 3936      655F7374 
 3936      6174652E 
 3936      78636F6F 
 3937 00cd 000000   		.space	3
 3938              	.LC5:
 3939 00d0 73746172 		.ascii	"start_point < end_point\000"
 3939      745F706F 
 3939      696E7420 
 3939      3C20656E 
 3939      645F706F 
 3940              	.LC6:
 3941 00e8 6F75745F 		.ascii	"out_buffer != NULL\000"
 3941      62756666 
 3941      65722021 
 3941      3D204E55 
 3941      4C4C00
 3942 00fb 00       		.space	1
 3943              	.LC7:
 3944 00fc 6E703D25 		.ascii	"np=%d w=%d v=%d\012\000"
 3944      6420773D 
 3944      25642076 
 3944      3D25640A 
 3944      00
 3945 010d 000000   		.space	3
 3946              	.LC8:
 3947 0110 776200   		.ascii	"wb\000"
 3948 0113 00       		.space	1
 3949              	.LC9:
 3950 0114 50330A00 		.ascii	"P3\012\000"
 3951              	.LC10:
 3952 0118 25642025 		.ascii	"%d %d\012\000"
 3952      640A00
 3953 011f 00       		.space	1
 3954              	.LC11:
 3955 0120 3235350A 		.ascii	"255\012\000"
 3955      00
 3956 0125 000000   		.space	3
 3957              	.LC12:
 3958 0128 25336420 		.ascii	"%3d %3d %3d\012\000"
 3958      25336420 
 3958      2533640A 
 3958      00
 3959 0135 000000   		.space	3
 3960              	.LC13:
 3961 0138 76302E30 		.ascii	"v0.0.1\000"
 3961      2E3100
 3962 013f 00       		.space	1
 3963              	.LC14:
 3964 0140 61726D77 		.ascii	"armwave version: %s\012\000"
 3964      61766520 
 3964      76657273 
 3964      696F6E3A 
 3964      2025730A 
 3965              		.text
 3966              	.Letext0:
 3967              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3968              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3969              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3970              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3971              		.file 6 "/usr/include/stdio.h"
 3972              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3973              		.file 8 "/usr/include/errno.h"
 3974              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3975              		.file 10 "/usr/include/unistd.h"
 3976              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3977              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3978              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3979              		.file 14 "/usr/include/math.h"
 3980              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3981              		.file 16 "/usr/include/time.h"
 3982              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3983              		.file 18 "/usr/local/include/python3.8/object.h"
 3984              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3985              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3986              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3987              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3988              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3989              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3990              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3991              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3992              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3993              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3994              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3995              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3996              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3997              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3998              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3999              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4000              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4001              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4002              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4003              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4004              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4005              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4006              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4007              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4008              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4009              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4010              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4011              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4012              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4013              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4014              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4015              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4016              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4017              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4018              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4019              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4020              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4021              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4022              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4023              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4024              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4025              		.file 60 "/usr/local/include/python3.8/context.h"
 4026              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4027              		.file 62 "/usr/local/include/python3.8/code.h"
 4028              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4029              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4030              		.file 65 "/usr/local/include/python3.8/import.h"
 4031              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4032              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4033              		.file 68 "armwave.h"
 4034              		.file 69 "/usr/include/stdlib.h"
 4035              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4036              		.file 71 "<built-in>"
 4037              		.file 72 "/usr/include/assert.h"
 4038              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
