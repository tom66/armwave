   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 A8419FE5 		ldr	r4, .L27	@ tmp313,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 14D04DE2 		sub	sp, sp, #20	@,,
 255              		.cfi_def_cfa_offset 56
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 65 view .LVU35
 261 00b0 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 263              		.loc 1 71 130 view .LVU36
 264 00b4 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 265              	.LVL7:
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 930003E0 		mul	r3, r3, r0	@ tmp214, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 272              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 273              		.loc 1 73 5 view .LVU39
 274 00c0 0520A0E1 		mov	r2, r5	@, _1
 275 00c4 41008DE8 		stm	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2334A0E1 		lsr	r3, r3, #8	@ tmp216, tmp214,
 279              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 280              		.loc 1 73 5 view .LVU41
 281 00cc 84019FE5 		ldr	r0, .L27+4	@,
 282              	.LVL8:
 283              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 284              		.loc 1 71 130 view .LVU42
 285 00d0 910303E0 		mul	r3, r1, r3	@ _7, g_armwave_state.bitdepth_height, tmp216
 286              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 287              		.loc 1 71 23 view .LVU43
 288 00d4 035085E0 		add	r5, r5, r3	@ write_buffer_base, _1, _7
 289              	.LVL9:
 290              		.loc 1 73 5 is_stmt 1 view .LVU44
 291 00d8 0510A0E1 		mov	r1, r5	@, write_buffer_base
 292 00dc FEFFFFEB 		bl	printf		@
 293              	.LVL10:
  74:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
  75:armwave.c     ****         slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 294              		.loc 1 78 5 view .LVU45
 295              		.loc 1 78 5 is_stmt 0 view .LVU46
 296 00e0 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 297 00e4 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 298 00e8 570000DA 		ble	.L11		@,
 299 00ec 000056E3 		cmp	r6, #0	@ height,
 300 00f0 5500000A 		beq	.L11		@,
 301 00f4 043047E2 		sub	r3, r7, #4	@ tmp312, slice_y,
 302 00f8 0C308DE5 		str	r3, [sp, #12]	@ tmp312, %sfp
 303              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 78 11 view .LVU47
 305 00fc 0030A0E3 		mov	r3, #0	@ w,
 306 0100 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 307              	.LVL11:
 308              	.L18:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 309              		.loc 1 79 9 is_stmt 1 view .LVU48
  80:armwave.c     **** 
  81:armwave.c     ****         // roll through y and render the slice into the out buffer
  82:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  83:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 83 9 view .LVU49
 311              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 64 is_stmt 0 view .LVU50
 313 0104 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 314 0108 08109DE5 		ldr	r1, [sp, #8]	@ w, %sfp
 315 010c 0C009DE5 		ldr	r0, [sp, #12]	@ tmp312, %sfp
 316 0110 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 317 0114 930123E0 		mla	r3, r3, r1, r0	@ tmp227, g_armwave_state.wave_stride, w, tmp312
 318              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
 319              		.loc 1 83 16 view .LVU51
 320 0118 0020A0E3 		mov	r2, #0	@ yy,
 321 011c 038088E0 		add	r8, r8, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp227
 322              	.LVL12:
 323              	.L17:
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 324              		.loc 1 84 13 is_stmt 1 view .LVU52
  85:armwave.c     **** 
  86:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  87:armwave.c     ****                 // maybe worth preloading the base address here...
  88:armwave.c     ****                 scale_value = word & 0xff;
  89:armwave.c     ****                 
  90:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  91:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  92:armwave.c     ****                     continue;
  93:armwave.c     **** 
  94:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  95:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  96:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  97:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
  98:armwave.c     ****                 write_buffer = write_buffer_base + \
 325              		.loc 1 98 17 view .LVU53
  99:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 100:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 326              		.loc 1 100 17 view .LVU54
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 327              		.loc 1 98 17 view .LVU55
 328              		.loc 1 100 17 view .LVU56
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 98 17 view .LVU57
 330              		.loc 1 100 17 view .LVU58
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 98 17 view .LVU59
 332              		.loc 1 100 17 view .LVU60
 333              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 334              		.loc 1 84 18 is_stmt 0 view .LVU61
 335 0120 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _183, offset: 0B]
 336              	.LVL13:
  86:armwave.c     ****                 // maybe worth preloading the base address here...
 337              		.loc 1 86 13 is_stmt 1 view .LVU62
  88:armwave.c     ****                 
 338              		.loc 1 88 17 view .LVU63
  91:armwave.c     ****                     continue;
 339              		.loc 1 91 17 view .LVU64
 340              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 341              		.loc 1 99 34 is_stmt 0 view .LVU65
 342 0124 01B082E2 		add	fp, r2, #1	@ tmp257, yy,
 343              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 344              		.loc 1 91 20 view .LVU66
 345 0128 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 346 012c 0110A003 		moveq	r1, #1	@ tmp230,
 347 0130 0010A013 		movne	r1, #0	@ tmp230,
 348              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 349              		.loc 1 91 19 view .LVU67
 350 0134 FF0057E3 		cmp	r7, #255	@ scale_value,
 351 0138 01108103 		orreq	r1, r1, #1	@,, tmp235, tmp230
 352 013c 000051E3 		cmp	r1, #0	@ tmp235,
 353              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 354              		.loc 1 99 34 view .LVU68
 355 0140 02A082E2 		add	r10, r2, #2	@ tmp278, yy,
 356 0144 039082E2 		add	r9, r2, #3	@ tmp297, yy,
 357              	.LVL14:
 358              	@ armwave.c:101:                 word >>= 8;
 101:armwave.c     ****                 word >>= 8;
 359              		.loc 1 101 22 view .LVU69
 360 0148 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 361 014c 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 362              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 363              		.loc 1 91 19 view .LVU70
 364 0150 3400001A 		bne	.L20		@,
 365              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 366              		.loc 1 99 34 view .LVU71
 367 0154 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 369              		.loc 1 91 20 view .LVU72
 370 0158 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 371 015c 01E0A003 		moveq	lr, #1	@ tmp250,
 372              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 373              		.loc 1 99 34 view .LVU73
 374 0160 910201E0 		mul	r1, r1, r2	@ tmp237, g_armwave_state.cmp_x_bitdepth_scale, yy
 375              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 376              		.loc 1 91 20 view .LVU74
 377 0164 00E0A013 		movne	lr, #0	@ tmp250,
 378              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 379              		.loc 1 91 19 view .LVU75
 380 0168 FF005CE3 		cmp	ip, #255	@ scale_value,
 381 016c 01E08E03 		orreq	lr, lr, #1	@,, tmp255, tmp250
 382 0170 00005EE3 		cmp	lr, #0	@ tmp255,
 383              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 384              		.loc 1 100 47 view .LVU76
 385 0174 40E094E5 		ldr	lr, [r4, #64]	@ tmp324, g_armwave_state.bitdepth_height
 386              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 387              		.loc 1 99 74 view .LVU77
 388 0178 2114A0E1 		lsr	r1, r1, #8	@ tmp239, tmp237,
 389              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 390              		.loc 1 100 47 view .LVU78
 391 017c 9E7121E0 		mla	r1, lr, r1, r7	@ tmp243, tmp324, tmp239, scale_value
 392 0180 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_80, *_80
 393 0184 01E08EE2 		add	lr, lr, #1	@ tmp246, *_80,
 394 0188 01E0C5E7 		strb	lr, [r5, r1]	@ tmp246, *_80
 395              	.LVL15:
 396              		.loc 1 101 17 is_stmt 1 view .LVU79
  88:armwave.c     ****                 
 397              		.loc 1 88 17 view .LVU80
  91:armwave.c     ****                     continue;
 398              		.loc 1 91 17 view .LVU81
 399              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 400              		.loc 1 91 19 is_stmt 0 view .LVU82
 401 018c 2500001A 		bne	.L20		@,
 402              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 403              		.loc 1 99 34 view .LVU83
 404 0190 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 405              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 406              		.loc 1 99 99 view .LVU84
 407 0194 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 408              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 409              		.loc 1 91 20 view .LVU85
 410 0198 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 411              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 99 34 view .LVU86
 413 019c 9E0B0BE0 		mul	fp, lr, fp	@ tmp258, g_armwave_state.cmp_x_bitdepth_scale, tmp257
 414              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 415              		.loc 1 91 20 view .LVU87
 416 01a0 01E0A003 		moveq	lr, #1	@ tmp271,
 417 01a4 00E0A013 		movne	lr, #0	@ tmp271,
 418              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 419              		.loc 1 99 74 view .LVU88
 420 01a8 2BB4A0E1 		lsr	fp, fp, #8	@ tmp260, tmp258,
 421              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 422              		.loc 1 91 19 view .LVU89
 423 01ac FF0050E3 		cmp	r0, #255	@ scale_value,
 424 01b0 01E08E03 		orreq	lr, lr, #1	@,, tmp276, tmp271
 425              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 426              		.loc 1 100 47 view .LVU90
 427 01b4 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp264, g_armwave_state.bitdepth_height, tmp260, scale_value
 428              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 429              		.loc 1 91 19 view .LVU91
 430 01b8 00005EE3 		cmp	lr, #0	@ tmp276,
 431              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 432              		.loc 1 100 47 view .LVU92
 433 01bc 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_110, *_110
 434 01c0 011081E2 		add	r1, r1, #1	@ tmp267, *_110,
 435 01c4 0C10C5E7 		strb	r1, [r5, ip]	@ tmp267, *_110
 436              		.loc 1 101 17 is_stmt 1 view .LVU93
 437              	.LVL16:
  88:armwave.c     ****                 
 438              		.loc 1 88 17 view .LVU94
  91:armwave.c     ****                     continue;
 439              		.loc 1 91 17 view .LVU95
 440              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 441              		.loc 1 91 19 is_stmt 0 view .LVU96
 442 01c8 1600001A 		bne	.L20		@,
 443              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 444              		.loc 1 99 34 view .LVU97
 445 01cc 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 446              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 447              		.loc 1 99 99 view .LVU98
 448 01d0 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 449              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 450              		.loc 1 91 20 view .LVU99
 451 01d4 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 452              	.LVL17:
 453              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 454              		.loc 1 99 34 view .LVU100
 455 01d8 910A0AE0 		mul	r10, r1, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 456              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 457              		.loc 1 91 20 view .LVU101
 458 01dc 0110A003 		moveq	r1, #1	@ tmp291,
 459 01e0 0010A013 		movne	r1, #0	@ tmp291,
 460              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 461              		.loc 1 99 74 view .LVU102
 462 01e4 2AA4A0E1 		lsr	r10, r10, #8	@ tmp281, tmp279,
 463              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 464              		.loc 1 91 19 view .LVU103
 465 01e8 FF0053E3 		cmp	r3, #255	@ word,
 466 01ec 01108103 		orreq	r1, r1, #1	@,, tmp296, tmp291
 467              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 468              		.loc 1 100 47 view .LVU104
 469 01f0 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp285, g_armwave_state.bitdepth_height, tmp281, scale_value
 470              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 471              		.loc 1 91 19 view .LVU105
 472 01f4 000051E3 		cmp	r1, #0	@ tmp296,
 473              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 474              		.loc 1 100 47 view .LVU106
 475 01f8 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_140, *_140
 476 01fc 011081E2 		add	r1, r1, #1	@ tmp288, *_140,
 477 0200 0010C5E7 		strb	r1, [r5, r0]	@ tmp288, *_140
 478              		.loc 1 101 17 is_stmt 1 view .LVU107
 479              	.LVL18:
  88:armwave.c     ****                 
 480              		.loc 1 88 17 view .LVU108
  91:armwave.c     ****                     continue;
 481              		.loc 1 91 17 view .LVU109
 482              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 483              		.loc 1 91 19 is_stmt 0 view .LVU110
 484 0204 0700001A 		bne	.L20		@,
 485              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 486              		.loc 1 99 34 view .LVU111
 487 0208 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 488              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 489              		.loc 1 99 99 view .LVU112
 490 020c 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 491              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 492              		.loc 1 99 34 view .LVU113
 493 0210 910909E0 		mul	r9, r1, r9	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp297
 494              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 495              		.loc 1 99 74 view .LVU114
 496 0214 2994A0E1 		lsr	r9, r9, #8	@ tmp301, tmp299,
 497              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 498              		.loc 1 100 47 view .LVU115
 499 0218 903923E0 		mla	r3, r0, r9, r3	@ tmp305, g_armwave_state.bitdepth_height, tmp301, word
 500 021c 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_170, *_170
 501 0220 011081E2 		add	r1, r1, #1	@ tmp308, *_170,
 502 0224 0310C5E7 		strb	r1, [r5, r3]	@ tmp308, *_170
 503              		.loc 1 101 17 is_stmt 1 view .LVU116
 504              	.LVL19:
 505              	.L20:
 506              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 507              		.loc 1 83 37 is_stmt 0 view .LVU117
 508 0228 042082E2 		add	r2, r2, #4	@ yy, yy,
 509              	.LVL20:
 510              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 511              		.loc 1 83 9 view .LVU118
 512 022c 020056E1 		cmp	r6, r2	@ height, yy
 513 0230 BAFFFF8A 		bhi	.L17		@,
 514              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 515              		.loc 1 78 44 view .LVU119
 516 0234 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 517              	.LVL21:
 518              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 519              		.loc 1 78 5 view .LVU120
 520 0238 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 521              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 522              		.loc 1 78 44 view .LVU121
 523 023c 012082E2 		add	r2, r2, #1	@ w, w,
 524              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 525              		.loc 1 78 5 view .LVU122
 526 0240 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 527              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 528              		.loc 1 78 44 view .LVU123
 529 0244 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 530              	.LVL22:
 531              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 78 5 view .LVU124
 533 0248 ADFFFFBA 		blt	.L18		@,
 534              	.LVL23:
 535              	.L11:
 536              	@ armwave.c:105: }
 102:armwave.c     ****             }
 103:armwave.c     ****         }
 104:armwave.c     ****     }
 105:armwave.c     **** }
 537              		.loc 1 105 1 view .LVU125
 538 024c 14D08DE2 		add	sp, sp, #20	@,,
 539              		.cfi_def_cfa_offset 36
 540              		@ sp needed	@
 541 0250 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 542              	.LVL24:
 543              	.L28:
 544              		.loc 1 105 1 view .LVU126
 545              		.align	2
 546              	.L27:
 547 0254 00000000 		.word	g_armwave_state
 548 0258 20000000 		.word	.LC2
 549              		.cfi_endproc
 550              	.LFE59:
 552              		.align	2
 553              		.global	armwave_fill_pixbuf_scaled
 554              		.syntax unified
 555              		.arm
 556              		.fpu vfp
 558              	armwave_fill_pixbuf_scaled:
 559              	.LVL25:
 560              	.LFB60:
 106:armwave.c     **** 
 107:armwave.c     **** #if 0
 108:armwave.c     **** /*
 109:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 110:armwave.c     ****  */
 111:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 112:armwave.c     **** {
 113:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 114:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 115:armwave.c     ****     uint8_t r, g, b, value;
 116:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 117:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 118:armwave.c     ****     uint32_t offset;
 119:armwave.c     **** 
 120:armwave.c     ****     assert(out_buffer != NULL);
 121:armwave.c     **** 
 122:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 123:armwave.c     **** 
 124:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 125:armwave.c     **** 
 126:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 127:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 128:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 129:armwave.c     ****         // most normal waveforms.
 130:armwave.c     ****         wave_word = *base_32ptr++;
 131:armwave.c     **** 
 132:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 133:armwave.c     ****             for(i = 0; i < 4; i++) {
 134:armwave.c     ****                 value = wave_word & 0xff;
 135:armwave.c     ****                 wave_word >>= 8;
 136:armwave.c     **** 
 137:armwave.c     ****                 if(value != 0) {
 138:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 139:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 140:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 141:armwave.c     **** 
 142:armwave.c     ****                     r = MIN(rr, 255);
 143:armwave.c     ****                     g = MIN(gg, 255);
 144:armwave.c     ****                     b = MIN(bb, 255);
 145:armwave.c     **** 
 146:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 147:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 148:armwave.c     **** 
 149:armwave.c     ****                     // Is there a better way?
 150:armwave.c     ****                     nsub = n + i;
 151:armwave.c     ****                     xx = nsub & 0xff;
 152:armwave.c     ****                     yy = nsub >> 8;
 153:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 154:armwave.c     ****                     *(out_buffer_base + offset) = word;
 155:armwave.c     ****                 }
 156:armwave.c     ****             }
 157:armwave.c     ****         } 
 158:armwave.c     ****     }
 159:armwave.c     **** }
 160:armwave.c     **** #endif
 161:armwave.c     **** 
 162:armwave.c     **** /*
 163:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 164:armwave.c     ****  * Rows are repeated as necessary.
 165:armwave.c     ****  */
 166:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 167:armwave.c     **** {
 561              		.loc 1 167 1 is_stmt 1 view -0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 168:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 565              		.loc 1 168 5 view .LVU128
 169:armwave.c     ****     // uint32_t ysub;
 170:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 566              		.loc 1 170 5 view .LVU129
 171:armwave.c     ****     uint8_t r, g, b, value; 
 567              		.loc 1 171 5 view .LVU130
 172:armwave.c     ****     // uint8_t row;
 173:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 568              		.loc 1 173 5 view .LVU131
 569              	@ armwave.c:167: {
 167:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 570              		.loc 1 167 1 is_stmt 0 view .LVU132
 571 025c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 572              		.cfi_def_cfa_offset 36
 573              		.cfi_offset 4, -36
 574              		.cfi_offset 5, -32
 575              		.cfi_offset 6, -28
 576              		.cfi_offset 7, -24
 577              		.cfi_offset 8, -20
 578              		.cfi_offset 9, -16
 579              		.cfi_offset 10, -12
 580              		.cfi_offset 11, -8
 581              		.cfi_offset 14, -4
 582              	@ armwave.c:177:     assert(out_buffer != NULL);
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 175:armwave.c     ****     uint32_t offset;
 176:armwave.c     **** 
 177:armwave.c     ****     assert(out_buffer != NULL);
 583              		.loc 1 177 5 view .LVU133
 584 0260 000050E3 		cmp	r0, #0	@ out_buffer
 585              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 173 15 view .LVU134
 587 0264 44619FE5 		ldr	r6, .L51	@ tmp203,
 588              	@ armwave.c:167: {
 167:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 589              		.loc 1 167 1 view .LVU135
 590 0268 0CD04DE2 		sub	sp, sp, #12	@,,
 591              		.cfi_def_cfa_offset 48
 592              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 593              		.loc 1 173 15 view .LVU136
 594 026c 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 595              	.LVL26:
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 596              		.loc 1 174 5 is_stmt 1 view .LVU137
 175:armwave.c     **** 
 597              		.loc 1 175 5 view .LVU138
 598              		.loc 1 177 5 view .LVU139
 599 0270 4900000A 		beq	.L48		@,
 178:armwave.c     **** 
 179:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 600              		.loc 1 179 5 view .LVU140
 601              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 602              		.loc 1 179 10 is_stmt 0 view .LVU141
 603 0274 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 604 0278 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 605              	.LVL27:
 180:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 181:armwave.c     **** 
 182:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 606              		.loc 1 182 5 is_stmt 1 view .LVU142
 607              		.loc 1 182 5 is_stmt 0 view .LVU143
 608 027c 000058E3 		cmp	r8, #0	@ npix,
 609 0280 0C0000DA 		ble	.L29		@,
 610              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 184:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 185:armwave.c     ****         // most normal waveforms.
 186:armwave.c     ****         wave_word = *base_32ptr++;
 187:armwave.c     **** 
 188:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 190:armwave.c     ****                 value = wave_word & 0xff;
 191:armwave.c     ****                 wave_word >>= 8;
 192:armwave.c     **** 
 193:armwave.c     ****                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 611              		.loc 1 195 52 view .LVU144
 612 0284 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 613              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 614              		.loc 1 194 52 view .LVU145
 615 0288 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 616              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 198:armwave.c     ****                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 200:armwave.c     ****                     b = MIN(bb, 255);
 201:armwave.c     **** 
 202:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 203:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 205:armwave.c     ****                     // Do line scaling as necessary.
 206:armwave.c     ****                     /*
 207:armwave.c     ****                     nsub = n + w;
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 209:armwave.c     ****                     xx = (nsub >> 8);
 210:armwave.c     **** 
 211:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 212:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 213:armwave.c     ****                         *(out_buffer_base + offset) = word;
 214:armwave.c     ****                     }
 215:armwave.c     ****                     */
 216:armwave.c     **** 
 217:armwave.c     ****                     nsub = n + w;
 218:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 617              		.loc 1 218 57 view .LVU146
 618 028c 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 619              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 620              		.loc 1 195 52 view .LVU147
 621 0290 00308DE5 		str	r3, [sp]	@ _10, %sfp
 622              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 623              		.loc 1 196 52 view .LVU148
 624 0294 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 625              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 626              		.loc 1 182 11 view .LVU149
 627 0298 0010A0E3 		mov	r1, #0	@ n,
 628              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 629              		.loc 1 196 52 view .LVU150
 630 029c 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 631              	.LVL28:
 632              	.L36:
 186:armwave.c     **** 
 633              		.loc 1 186 9 is_stmt 1 view .LVU151
 634              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 635              		.loc 1 186 19 is_stmt 0 view .LVU152
 636 02a0 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 637              	.LVL29:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 638              		.loc 1 188 9 is_stmt 1 view .LVU153
 639              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 640              		.loc 1 188 11 is_stmt 0 view .LVU154
 641 02a4 000053E3 		cmp	r3, #0	@ wave_word,
 642 02a8 0400001A 		bne	.L49		@,
 643              	.L32:
 644              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 645              		.loc 1 182 28 view .LVU155
 646 02ac 041081E2 		add	r1, r1, #4	@ n, n,
 647              	.LVL30:
 648              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 649              		.loc 1 182 5 view .LVU156
 650 02b0 010058E1 		cmp	r8, r1	@ npix, n
 651 02b4 F9FFFFCA 		bgt	.L36		@,
 652              	.LVL31:
 653              	.L29:
 654              	@ armwave.c:230: }
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 221:armwave.c     **** 
 222:armwave.c     ****                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 226:armwave.c     ****                 }
 227:armwave.c     ****             }
 228:armwave.c     ****         }
 229:armwave.c     ****     }
 230:armwave.c     **** }
 655              		.loc 1 230 1 view .LVU157
 656 02b8 0CD08DE2 		add	sp, sp, #12	@,,
 657              		.cfi_remember_state
 658              		.cfi_def_cfa_offset 36
 659              		@ sp needed	@
 660 02bc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 661              	.LVL32:
 662              	.L49:
 663              		.cfi_restore_state
 664              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 665              		.loc 1 193 19 view .LVU158
 666 02c0 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 667              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 668              		.loc 1 189 19 view .LVU159
 669 02c4 0070A0E3 		mov	r7, #0	@ w,
 670              	.LVL33:
 190:armwave.c     ****                 wave_word >>= 8;
 671              		.loc 1 190 17 is_stmt 1 view .LVU160
 191:armwave.c     **** 
 672              		.loc 1 191 17 view .LVU161
 673              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 674              		.loc 1 191 27 is_stmt 0 view .LVU162
 675 02c8 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 676              	.LVL34:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 677              		.loc 1 193 17 is_stmt 1 view .LVU163
 678              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 679              		.loc 1 193 19 is_stmt 0 view .LVU164
 680 02cc 0500001A 		bne	.L50		@,
 681              	.L33:
 682              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 683              		.loc 1 189 32 view .LVU165
 684 02d0 017087E2 		add	r7, r7, #1	@ w, w,
 685              	.LVL35:
 686              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 687              		.loc 1 189 13 view .LVU166
 688 02d4 040057E3 		cmp	r7, #4	@ w,
 689 02d8 F3FFFF0A 		beq	.L32		@,
 190:armwave.c     ****                 wave_word >>= 8;
 690              		.loc 1 190 17 is_stmt 1 view .LVU167
 691              	.LVL36:
 191:armwave.c     **** 
 692              		.loc 1 191 17 view .LVU168
 693              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 694              		.loc 1 193 19 is_stmt 0 view .LVU169
 695 02dc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 696              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 697              		.loc 1 191 27 view .LVU170
 698 02e0 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 699              	.LVL37:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 700              		.loc 1 193 17 is_stmt 1 view .LVU171
 701              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 702              		.loc 1 193 19 is_stmt 0 view .LVU172
 703 02e4 F9FFFF0A 		beq	.L33		@,
 704              	.L50:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 705              		.loc 1 194 21 is_stmt 1 view .LVU173
 706              	.LVL38:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 707              		.loc 1 195 21 view .LVU174
 196:armwave.c     **** 
 708              		.loc 1 196 21 view .LVU175
 198:armwave.c     ****                     g = MIN(gg, 255);
 709              		.loc 1 198 21 view .LVU176
 199:armwave.c     ****                     b = MIN(bb, 255);
 710              		.loc 1 199 21 view .LVU177
 200:armwave.c     **** 
 711              		.loc 1 200 21 view .LVU178
 203:armwave.c     **** 
 712              		.loc 1 203 21 view .LVU179
 713              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 714              		.loc 1 196 55 is_stmt 0 view .LVU180
 715 02e8 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 716 02ec 075081E0 		add	r5, r1, r7	@ _120, n, w
 717 02f0 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 718              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 719              		.loc 1 218 32 view .LVU181
 720 02f4 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 721              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 722              		.loc 1 219 41 view .LVU182
 723 02f8 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 724              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 725              		.loc 1 218 40 view .LVU183
 726 02fc 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 727              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 728              		.loc 1 219 41 view .LVU184
 729 0300 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 730              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 731              		.loc 1 195 55 view .LVU185
 732 0304 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 733              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 734              		.loc 1 196 24 view .LVU186
 735 0308 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 736              	.LVL39:
 737              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 738              		.loc 1 218 40 view .LVU187
 739 030c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 740              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 741              		.loc 1 219 46 view .LVU188
 742 0310 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 743              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 744              		.loc 1 195 55 view .LVU189
 745 0314 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 746              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 747              		.loc 1 194 55 view .LVU190
 748 0318 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 749              	.LVL40:
 750              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 751              		.loc 1 200 25 view .LVU191
 752 031c FF005AE3 		cmp	r10, #255	@ bb,
 753              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 195 24 view .LVU192
 755 0320 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 756              	.LVL41:
 757              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 218 40 view .LVU193
 759 0324 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 760              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 761              		.loc 1 219 46 view .LVU194
 762 0328 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 763              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 764              		.loc 1 194 24 view .LVU195
 765 032c 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 766              	.LVL42:
 767              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 768              		.loc 1 200 25 view .LVU196
 769 0330 FFA0A0A3 		movge	r10, #255	@ bb,
 770              	.LVL43:
 771              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 772              		.loc 1 199 25 view .LVU197
 773 0334 FF0054E3 		cmp	r4, #255	@ gg,
 774 0338 FF40A0A3 		movge	r4, #255	@ gg,
 775              	.LVL44:
 776              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 777              		.loc 1 198 25 view .LVU198
 778 033c FF005CE3 		cmp	ip, #255	@ rr,
 779              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 780              		.loc 1 203 56 view .LVU199
 781 0340 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 782              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 783              		.loc 1 218 24 view .LVU200
 784 0344 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 785              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 786              		.loc 1 198 25 view .LVU201
 787 0348 FFC0A0A3 		movge	ip, #255	@ rr,
 788              	.LVL45:
 789              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 790              		.loc 1 203 44 view .LVU202
 791 034c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 792 0350 FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 793              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 794              		.loc 1 203 56 view .LVU203
 795 0354 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 796              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 797              		.loc 1 203 51 view .LVU204
 798 0358 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 799              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 800              		.loc 1 203 62 view .LVU205
 801 035c 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 802 0360 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 803              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 804              		.loc 1 218 24 view .LVU206
 805 0364 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 806              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 807              		.loc 1 219 24 view .LVU207
 808 0368 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 809              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 810              		.loc 1 203 26 view .LVU208
 811 036c FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 812              	.LVL46:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 813              		.loc 1 217 21 is_stmt 1 view .LVU209
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 814              		.loc 1 218 21 view .LVU210
 219:armwave.c     ****                     xx = (nsub >> 8);
 815              		.loc 1 219 21 view .LVU211
 816              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 817              		.loc 1 220 32 is_stmt 0 view .LVU212
 818 0370 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 819              	.LVL47:
 820              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 821              		.loc 1 219 24 view .LVU213
 822 0374 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 823              	.LVL48:
 220:armwave.c     **** 
 824              		.loc 1 220 21 is_stmt 1 view .LVU214
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 825              		.loc 1 222 21 view .LVU215
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 826              		.loc 1 222 21 is_stmt 0 view .LVU216
 827 0378 090052E1 		cmp	r2, r9	@ yy, ye
 828 037c D3FFFF2A 		bcs	.L33		@,
 829              	.LVL49:
 830              	.L34:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 831              		.loc 1 223 25 is_stmt 1 discriminator 3 view .LVU217
 224:armwave.c     ****                     }
 832              		.loc 1 224 25 discriminator 3 view .LVU218
 833              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 834              		.loc 1 223 43 is_stmt 0 discriminator 3 view .LVU219
 835 0380 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 836              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 837              		.loc 1 224 43 discriminator 3 view .LVU220
 838 0384 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 839              	.LVL50:
 840              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 841              		.loc 1 222 42 discriminator 3 view .LVU221
 842 0388 012082E2 		add	r2, r2, #1	@ yy, yy,
 843              	.LVL51:
 844              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 845              		.loc 1 222 21 discriminator 3 view .LVU222
 846 038c 020059E1 		cmp	r9, r2	@ ye, yy
 847              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 848              		.loc 1 224 53 discriminator 3 view .LVU223
 849 0390 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 850              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 851              		.loc 1 222 21 discriminator 3 view .LVU224
 852 0394 F9FFFF1A 		bne	.L34		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 853              		.loc 1 222 21 discriminator 3 view .LVU225
 854 0398 CCFFFFEA 		b	.L33		@
 855              	.LVL52:
 856              	.L48:
 177:armwave.c     **** 
 857              		.loc 1 177 5 is_stmt 1 discriminator 1 view .LVU226
 858 039c 10309FE5 		ldr	r3, .L51+4	@,
 859 03a0 B120A0E3 		mov	r2, #177	@,
 860 03a4 0C109FE5 		ldr	r1, .L51+8	@,
 861 03a8 0C009FE5 		ldr	r0, .L51+12	@,
 862              	.LVL53:
 177:armwave.c     **** 
 863              		.loc 1 177 5 is_stmt 0 discriminator 1 view .LVU227
 864 03ac FEFFFFEB 		bl	__assert_fail		@
 865              	.LVL54:
 866              	.L52:
 177:armwave.c     **** 
 867              		.loc 1 177 5 discriminator 1 view .LVU228
 868              		.align	2
 869              	.L51:
 870 03b0 00000000 		.word	g_armwave_state
 871 03b4 00000000 		.word	.LANCHOR0
 872 03b8 54000000 		.word	.LC3
 873 03bc 60000000 		.word	.LC4
 874              		.cfi_endproc
 875              	.LFE60:
 877              		.align	2
 878              		.global	armwave_setup_render
 879              		.syntax unified
 880              		.arm
 881              		.fpu vfp
 883              	armwave_setup_render:
 884              	.LVL55:
 885              	.LFB61:
 231:armwave.c     **** 
 232:armwave.c     **** /*
 233:armwave.c     ****  * Setup the renderer with passed parameters.
 234:armwave.c     ****  */
 235:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 236:armwave.c     **** {
 886              		.loc 1 236 1 is_stmt 1 view -0
 887              		.cfi_startproc
 888              		@ args = 12, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 237:armwave.c     ****     uint32_t length, xx;
 890              		.loc 1 237 5 view .LVU230
 238:armwave.c     ****     float points_per_pixel;
 891              		.loc 1 238 5 view .LVU231
 239:armwave.c     **** 
 240:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 892              		.loc 1 240 5 view .LVU232
 893              	@ armwave.c:236: {
 236:armwave.c     ****     uint32_t length, xx;
 894              		.loc 1 236 1 is_stmt 0 view .LVU233
 895 03c0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 896              		.cfi_def_cfa_offset 28
 897              		.cfi_offset 4, -28
 898              		.cfi_offset 5, -24
 899              		.cfi_offset 6, -20
 900              		.cfi_offset 7, -16
 901              		.cfi_offset 8, -12
 902              		.cfi_offset 9, -8
 903              		.cfi_offset 14, -4
 904 03c4 028B2DED 		vpush.64	{d8}	@
 905              		.cfi_def_cfa_offset 36
 906              		.cfi_offset 80, -36
 907              		.cfi_offset 81, -32
 908 03c8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 909 03cc 0150A0E1 		mov	r5, r1	@ end_point, end_point
 910 03d0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 911 03d4 14D04DE2 		sub	sp, sp, #20	@,,
 912              		.cfi_def_cfa_offset 56
 913              	@ armwave.c:236: {
 236:armwave.c     ****     uint32_t length, xx;
 914              		.loc 1 236 1 view .LVU234
 915 03d8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 916 03dc D863CDE1 		ldrd	r6, [sp, #56]	@,,
 917 03e0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 918              	@ armwave.c:240:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 919              		.loc 1 240 5 view .LVU235
 920 03e4 00308DE5 		str	r3, [sp]	@ wave_stride,
 921 03e8 F460CDE1 		strd	r6, [sp, #4]	@,,
 922 03ec 0230A0E1 		mov	r3, r2	@, waves_max
 923              	.LVL56:
 924              		.loc 1 240 5 view .LVU236
 925 03f0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 926 03f4 0120A0E1 		mov	r2, r1	@, end_point
 927              	.LVL57:
 928              		.loc 1 240 5 view .LVU237
 929 03f8 0010A0E1 		mov	r1, r0	@, start_point
 930              	.LVL58:
 931              		.loc 1 240 5 view .LVU238
 932 03fc D0019FE5 		ldr	r0, .L67+12	@,
 933              	.LVL59:
 934              		.loc 1 240 5 view .LVU239
 935 0400 FEFFFFEB 		bl	printf		@
 936              	.LVL60:
 241:armwave.c     **** 
 242:armwave.c     ****     // TODO these asserts should instead raise PyExc
 243:armwave.c     ****     assert(start_point < end_point);
 937              		.loc 1 243 5 is_stmt 1 view .LVU240
 938 0404 050054E1 		cmp	r4, r5	@ start_point, end_point
 939 0408 5F00002A 		bcs	.L64		@,
 244:armwave.c     **** 
 245:armwave.c     ****     /*
 246:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 247:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 248:armwave.c     **** 
 249:armwave.c     ****     if(target_height == 256) {
 250:armwave.c     ****         g_armwave_state.row_shift = 8;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 252:armwave.c     ****     } else if(target_height == 512) {
 253:armwave.c     ****         g_armwave_state.row_shift = 9;
 254:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 255:armwave.c     ****     } else if(target_height == 1024) {
 256:armwave.c     ****         g_armwave_state.row_shift = 10;
 257:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 258:armwave.c     ****     } else if(target_height == 2048) {
 259:armwave.c     ****         g_armwave_state.row_shift = 11;
 260:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 261:armwave.c     ****     }
 262:armwave.c     ****     */
 263:armwave.c     **** 
 264:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 265:armwave.c     ****     g_armwave_state.xstride = target_height;
 940              		.loc 1 265 5 view .LVU241
 941              	@ armwave.c:276:     g_armwave_state.wave_length = end_point - start_point;
 266:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 267:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 268:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 269:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 270:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 271:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 272:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 273:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 274:armwave.c     ****     g_armwave_state.target_width = target_width;
 275:armwave.c     ****     g_armwave_state.target_height = target_height;
 276:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 942              		.loc 1 276 45 is_stmt 0 view .LVU242
 943 040c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 944              	.LVL61:
 945              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 946              		.loc 1 266 49 view .LVU243
 947 0410 6C6A9FED 		vldr.32	s12, .L67	@ tmp174,
 948              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 277:armwave.c     **** 
 278:armwave.c     ****     // Calculate compound scaler
 279:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 280:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 949              		.loc 1 280 48 view .LVU244
 950 0414 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 951              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 952              		.loc 1 280 79 view .LVU245
 953 0418 6B6ADFED 		vldr.32	s13, .L67+4	@ tmp198,
 954              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 955              		.loc 1 273 90 view .LVU246
 956 041c 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 957              	@ armwave.c:265:     g_armwave_state.xstride = target_height;
 265:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 958              		.loc 1 265 29 view .LVU247
 959 0420 B0419FE5 		ldr	r4, .L67+16	@ tmp241,
 960              	.LVL62:
 961              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 962              		.loc 1 280 48 view .LVU248
 963 0424 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 964              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 965              		.loc 1 266 49 view .LVU249
 966 0428 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 967              	@ armwave.c:271:     g_armwave_state.size = target_height * target_width;
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 968              		.loc 1 271 42 view .LVU250
 969 042c 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 970              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 971              		.loc 1 273 74 view .LVU251
 972 0430 033383E0 		add	r3, r3, r3, lsl #6	@ tmp188, tmp185, tmp185,
 973              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 974              		.loc 1 266 49 view .LVU252
 975 0434 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 976              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 977              		.loc 1 280 48 view .LVU253
 978 0438 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 979              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 980              		.loc 1 273 74 view .LVU254
 981 043c 0331A0E1 		lsl	r3, r3, #2	@ tmp189, tmp188,
 982              	@ armwave.c:272:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 983              		.loc 1 272 37 view .LVU255
 984 0440 012CA0E3 		mov	r2, #256	@ tmp184,
 985              	@ armwave.c:271:     g_armwave_state.size = target_height * target_width;
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 986              		.loc 1 271 26 view .LVU256
 987 0444 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 988              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 989              		.loc 1 280 48 view .LVU257
 990 0448 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 991              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 281:armwave.c     **** 
 282:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 992              		.loc 1 282 5 view .LVU258
 993 044c 0310A0E1 		mov	r1, r3	@, tmp189
 994              	@ armwave.c:272:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 995              		.loc 1 272 37 view .LVU259
 996 0450 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 997              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 998              		.loc 1 273 34 view .LVU260
 999 0454 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1000              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1001              		.loc 1 282 5 view .LVU261
 1002 0458 7C019FE5 		ldr	r0, .L67+20	@,
 1003              	@ armwave.c:265:     g_armwave_state.xstride = target_height;
 265:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1004              		.loc 1 265 29 view .LVU262
 1005 045c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1006              		.loc 1 266 5 is_stmt 1 view .LVU263
 1007              	@ armwave.c:268:     g_armwave_state.wave_stride = wave_stride;
 268:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1008              		.loc 1 268 33 is_stmt 0 view .LVU264
 1009 0460 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1010              	@ armwave.c:269:     g_armwave_state.waves_max = waves_max;
 269:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1011              		.loc 1 269 31 view .LVU265
 1012 0464 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1013              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 280:armwave.c     **** 
 1014              		.loc 1 280 48 view .LVU266
 1015 0468 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1016              	@ armwave.c:270:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 270:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1017              		.loc 1 270 27 view .LVU267
 1018 046c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1019              	@ armwave.c:275:     g_armwave_state.target_height = target_height;
 275:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1020              		.loc 1 275 35 view .LVU268
 1021 0470 F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1022              	@ armwave.c:276:     g_armwave_state.wave_length = end_point - start_point;
 276:armwave.c     **** 
 1023              		.loc 1 276 33 view .LVU269
 1024 0474 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1025              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1026              		.loc 1 266 49 view .LVU270
 1027 0478 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1028              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 280:armwave.c     **** 
 1029              		.loc 1 280 79 view .LVU271
 1030 047c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1031              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1032              		.loc 1 279 42 view .LVU272
 1033 0480 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1034              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1035              		.loc 1 266 33 view .LVU273
 1036 0484 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1037              		.loc 1 267 5 is_stmt 1 view .LVU274
 1038              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1039              		.loc 1 279 42 is_stmt 0 view .LVU275
 1040 0488 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1041              	@ armwave.c:267:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1042              		.loc 1 267 30 view .LVU276
 1043 048c C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1044              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1045              		.loc 1 282 5 view .LVU277
 1046 0490 0C30A0E1 		mov	r3, ip	@, _19
 1047 0494 0C20A0E1 		mov	r2, ip	@, tmp3
 1048              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1049              		.loc 1 279 42 view .LVU278
 1050 0498 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1051              	@ armwave.c:267:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1052              		.loc 1 267 30 view .LVU279
 1053 049c 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 268:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1054              		.loc 1 268 5 is_stmt 1 view .LVU280
 269:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1055              		.loc 1 269 5 view .LVU281
 270:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1056              		.loc 1 270 5 view .LVU282
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1057              		.loc 1 271 5 view .LVU283
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1058              		.loc 1 272 5 view .LVU284
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 1059              		.loc 1 273 5 view .LVU285
 274:armwave.c     ****     g_armwave_state.target_height = target_height;
 1060              		.loc 1 274 5 view .LVU286
 275:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1061              		.loc 1 275 5 view .LVU287
 276:armwave.c     **** 
 1062              		.loc 1 276 5 view .LVU288
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1063              		.loc 1 279 5 view .LVU289
 1064              		.loc 1 282 5 view .LVU290
 1065 04a0 FEFFFFEB 		bl	printf		@
 1066              	.LVL63:
 283:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 284:armwave.c     **** 
 285:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 286:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 287:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 288:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1067              		.loc 1 288 5 view .LVU291
 1068              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 289:armwave.c     **** 
 290:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1069              		.loc 1 290 23 is_stmt 0 view .LVU292
 1070 04a4 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1071              	@ armwave.c:288:     g_armwave_state.slice_height = 64;  
 288:armwave.c     **** 
 1072              		.loc 1 288 34 view .LVU293
 1073 04a8 4030A0E3 		mov	r3, #64	@ tmp202,
 1074              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 1075              		.loc 1 290 7 view .LVU294
 1076 04ac 000050E3 		cmp	r0, #0	@ _20,
 1077              	@ armwave.c:288:     g_armwave_state.slice_height = 64;  
 288:armwave.c     **** 
 1078              		.loc 1 288 34 view .LVU295
 1079 04b0 443084E5 		str	r3, [r4, #68]	@ tmp202, g_armwave_state.slice_height
 1080              		.loc 1 290 5 is_stmt 1 view .LVU296
 1081              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 1082              		.loc 1 290 7 is_stmt 0 view .LVU297
 1083 04b4 0000000A 		beq	.L55		@,
 291:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1084              		.loc 1 291 9 is_stmt 1 view .LVU298
 1085 04b8 FEFFFFEB 		bl	free		@
 1086              	.LVL64:
 1087              	.L55:
 292:armwave.c     **** 
 293:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1088              		.loc 1 293 5 view .LVU299
 1089              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1090              		.loc 1 293 34 is_stmt 0 view .LVU300
 1091 04bc 0110A0E3 		mov	r1, #1	@,
 1092 04c0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1093 04c4 FEFFFFEB 		bl	calloc		@
 1094              	.LVL65:
 1095              	@ armwave.c:295:     assert(g_armwave_state.ch1_buffer != NULL);
 294:armwave.c     **** 
 295:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1096              		.loc 1 295 5 view .LVU301
 1097 04c8 000050E3 		cmp	r0, #0	@ _23,
 1098              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 293:armwave.c     **** 
 1099              		.loc 1 293 34 view .LVU302
 1100 04cc 0070A0E1 		mov	r7, r0	@ _23,
 1101              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 293:armwave.c     **** 
 1102              		.loc 1 293 32 view .LVU303
 1103 04d0 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1104              		.loc 1 295 5 is_stmt 1 view .LVU304
 1105 04d4 3600000A 		beq	.L65		@,
 296:armwave.c     **** 
 297:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 298:armwave.c     ****     length = end_point - start_point;
 1106              		.loc 1 298 5 view .LVU305
 1107              	.LVL66:
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1108              		.loc 1 299 5 view .LVU306
 1109              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 1110              		.loc 1 299 34 is_stmt 0 view .LVU307
 1111 04d8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1112              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 1113              		.loc 1 299 22 view .LVU308
 1114 04dc 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1115              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1116              		.loc 1 300 60 view .LVU309
 1117 04e0 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp251, g_armwave_state.slice_height
 1118              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1119              		.loc 1 301 40 view .LVU310
 1120 04e4 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1121              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1122              		.loc 1 299 34 view .LVU311
 1123 04e8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp214, target_width
 1124              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1125              		.loc 1 299 22 view .LVU312
 1126 04ec 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp213, _13
 1127              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1128              		.loc 1 300 60 view .LVU313
 1129 04f0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp251
 1130              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1131              		.loc 1 299 22 view .LVU314
 1132 04f4 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp213, tmp214
 1133              	.LVL67:
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1134              		.loc 1 300 5 is_stmt 1 view .LVU315
 1135              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1136              		.loc 1 300 60 is_stmt 0 view .LVU316
 1137 04f8 087A67EE 		vmul.f32	s15, s14, s16	@ tmp219, tmp217, points_per_pixel
 1138              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1139              		.loc 1 300 41 view .LVU317
 1140 04fc E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 1141 0500 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 1142              		.loc 1 301 5 is_stmt 1 view .LVU318
 1143              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1144              		.loc 1 301 40 is_stmt 0 view .LVU319
 1145 0504 FEFFFFEB 		bl	malloc		@
 1146              	.LVL68:
 1147              	@ armwave.c:303:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1148              		.loc 1 303 5 view .LVU320
 1149 0508 000050E3 		cmp	r0, #0	@ _31,
 1150              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1151              		.loc 1 301 40 view .LVU321
 1152 050c 0060A0E1 		mov	r6, r0	@ _31,
 1153              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1154              		.loc 1 301 38 view .LVU322
 1155 0510 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1156              		.loc 1 303 5 is_stmt 1 view .LVU323
 1157 0514 2100000A 		beq	.L66		@,
 1158              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 304:armwave.c     **** 
 305:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 306:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1159              		.loc 1 306 54 is_stmt 0 view .LVU324
 1160 0518 2C7ADFED 		vldr.32	s15, .L67+8	@ tmp229,
 1161 051c 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _31,
 1162              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1163              		.loc 1 305 12 view .LVU325
 1164 0520 0030A0E3 		mov	r3, #0	@ xx,
 1165              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1166              		.loc 1 306 54 view .LVU326
 1167 0524 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1168              	.L58:
 1169              	.LVL69:
 1170              		.loc 1 306 9 is_stmt 1 discriminator 3 view .LVU327
 1171              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1172              		.loc 1 306 74 is_stmt 0 discriminator 3 view .LVU328
 1173 0528 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1174              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1175              		.loc 1 305 32 discriminator 3 view .LVU329
 1176 052c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1177              	.LVL70:
 1178              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1179              		.loc 1 305 5 discriminator 3 view .LVU330
 1180 0530 030055E1 		cmp	r5, r3	@ _13, xx
 1181              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1182              		.loc 1 306 74 discriminator 3 view .LVU331
 1183 0534 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1184 0538 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1185              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1186              		.loc 1 306 46 discriminator 3 view .LVU332
 1187 053c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1188 0540 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1189 0544 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1190              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1191              		.loc 1 305 5 discriminator 3 view .LVU333
 1192 0548 F6FFFF1A 		bne	.L58		@,
 307:armwave.c     **** 
 308:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 309:armwave.c     ****     }
 310:armwave.c     **** 
 311:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1193              		.loc 1 311 5 is_stmt 1 view .LVU334
 1194              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1195              		.loc 1 311 34 is_stmt 0 view .LVU335
 1196 054c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1197 0550 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1198 0554 FEFFFFEB 		bl	malloc		@
 1199              	.LVL71:
 1200              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     **** 
 313:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1201              		.loc 1 313 5 view .LVU336
 1202 0558 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1203 055c 0620A0E1 		mov	r2, r6	@, _31
 1204 0560 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1205 0564 0710A0E1 		mov	r1, r7	@, _23
 1206              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1207              		.loc 1 311 34 view .LVU337
 1208 0568 00C0A0E1 		mov	ip, r0	@ tmp236,
 1209              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1210              		.loc 1 313 5 view .LVU338
 1211 056c 0030A0E1 		mov	r3, r0	@, tmp236
 1212              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1213              		.loc 1 311 32 view .LVU339
 1214 0570 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1215              		.loc 1 313 5 is_stmt 1 view .LVU340
 1216 0574 64009FE5 		ldr	r0, .L67+24	@,
 1217 0578 FEFFFFEB 		bl	printf		@
 1218              	.LVL72:
 314:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 318:armwave.c     **** 
 319:armwave.c     ****     malloc_stats();
 1219              		.loc 1 319 5 view .LVU341
 1220              	@ armwave.c:320: }
 320:armwave.c     **** }
 1221              		.loc 1 320 1 is_stmt 0 view .LVU342
 1222 057c 14D08DE2 		add	sp, sp, #20	@,,
 1223              		.cfi_remember_state
 1224              		.cfi_def_cfa_offset 36
 1225              		@ sp needed	@
 1226 0580 028BBDEC 		vldm	sp!, {d8}	@
 1227              		.cfi_restore 80
 1228              		.cfi_restore 81
 1229              		.cfi_def_cfa_offset 28
 1230              	.LVL73:
 1231              		.loc 1 320 1 view .LVU343
 1232 0584 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1233              		.cfi_restore 14
 1234              		.cfi_restore 9
 1235              		.cfi_restore 8
 1236              		.cfi_restore 7
 1237              		.cfi_restore 6
 1238              		.cfi_restore 5
 1239              		.cfi_restore 4
 1240              		.cfi_def_cfa_offset 0
 1241              	.LVL74:
 1242              	@ armwave.c:319:     malloc_stats();
 319:armwave.c     **** }
 1243              		.loc 1 319 5 view .LVU344
 1244 0588 FEFFFFEA 		b	malloc_stats		@
 1245              	.LVL75:
 1246              	.L64:
 1247              		.cfi_restore_state
 243:armwave.c     **** 
 1248              		.loc 1 243 5 is_stmt 1 discriminator 1 view .LVU345
 1249 058c 50309FE5 		ldr	r3, .L67+28	@,
 1250 0590 F320A0E3 		mov	r2, #243	@,
 1251 0594 4C109FE5 		ldr	r1, .L67+32	@,
 1252 0598 4C009FE5 		ldr	r0, .L67+36	@,
 1253 059c FEFFFFEB 		bl	__assert_fail		@
 1254              	.LVL76:
 1255              	.L66:
 303:armwave.c     **** 
 1256              		.loc 1 303 5 discriminator 1 view .LVU346
 1257 05a0 3C309FE5 		ldr	r3, .L67+28	@,
 1258 05a4 44209FE5 		ldr	r2, .L67+40	@,
 1259 05a8 38109FE5 		ldr	r1, .L67+32	@,
 1260 05ac 40009FE5 		ldr	r0, .L67+44	@,
 1261 05b0 FEFFFFEB 		bl	__assert_fail		@
 1262              	.LVL77:
 1263              	.L65:
 295:armwave.c     **** 
 1264              		.loc 1 295 5 discriminator 1 view .LVU347
 1265 05b4 28309FE5 		ldr	r3, .L67+28	@,
 1266 05b8 38209FE5 		ldr	r2, .L67+48	@,
 1267 05bc 24109FE5 		ldr	r1, .L67+32	@,
 1268 05c0 34009FE5 		ldr	r0, .L67+52	@,
 1269 05c4 FEFFFFEB 		bl	__assert_fail		@
 1270              	.LVL78:
 1271              	.L68:
 1272              		.align	2
 1273              	.L67:
 1274 05c8 00007F43 		.word	1132396544
 1275 05cc 00008043 		.word	1132462080
 1276 05d0 0000803F 		.word	1065353216
 1277 05d4 74000000 		.word	.LC5
 1278 05d8 00000000 		.word	g_armwave_state
 1279 05dc B8000000 		.word	.LC7
 1280 05e0 3C010000 		.word	.LC10
 1281 05e4 1C000000 		.word	.LANCHOR0+28
 1282 05e8 54000000 		.word	.LC3
 1283 05ec A0000000 		.word	.LC6
 1284 05f0 2F010000 		.word	303
 1285 05f4 10010000 		.word	.LC9
 1286 05f8 27010000 		.word	295
 1287 05fc EC000000 		.word	.LC8
 1288              		.cfi_endproc
 1289              	.LFE61:
 1291              		.align	2
 1292              		.global	armwave_set_wave_pointer
 1293              		.syntax unified
 1294              		.arm
 1295              		.fpu vfp
 1297              	armwave_set_wave_pointer:
 1298              	.LVL79:
 1299              	.LFB62:
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 324:armwave.c     ****  * in the future.
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 327:armwave.c     **** {
 1300              		.loc 1 327 1 view -0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 0
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1304              		.loc 1 328 5 view .LVU349
 1305 0600 000050E3 		cmp	r0, #0	@ wave_buffer
 1306              		.loc 1 328 5 is_stmt 0 view .LVU350
 1307 0604 0200000A 		beq	.L74		@,
 329:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1308              		.loc 1 329 5 is_stmt 1 view .LVU351
 1309              	@ armwave.c:329:     g_armwave_state.wave_buffer = wave_buffer;
 1310              		.loc 1 329 33 is_stmt 0 view .LVU352
 1311 0608 1C309FE5 		ldr	r3, .L75	@ tmp115,
 1312 060c 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1313 0610 1EFF2FE1 		bx	lr	@
 1314              	.L74:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1315              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU353
 1316              	@ armwave.c:327: {
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1317              		.loc 1 327 1 is_stmt 0 discriminator 1 view .LVU354
 1318 0614 10402DE9 		push	{r4, lr}	@
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 4, -8
 1321              		.cfi_offset 14, -4
 1322              	@ armwave.c:328:     assert(wave_buffer != NULL);
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1323              		.loc 1 328 5 discriminator 1 view .LVU355
 1324 0618 522FA0E3 		mov	r2, #328	@,
 1325 061c 0C309FE5 		ldr	r3, .L75+4	@,
 1326 0620 0C109FE5 		ldr	r1, .L75+8	@,
 1327 0624 0C009FE5 		ldr	r0, .L75+12	@,
 1328              	.LVL80:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1329              		.loc 1 328 5 discriminator 1 view .LVU356
 1330 0628 FEFFFFEB 		bl	__assert_fail		@
 1331              	.LVL81:
 1332              	.L76:
 1333              		.align	2
 1334              	.L75:
 1335 062c 00000000 		.word	g_armwave_state
 1336 0630 34000000 		.word	.LANCHOR0+52
 1337 0634 54000000 		.word	.LC3
 1338 0638 60010000 		.word	.LC11
 1339              		.cfi_endproc
 1340              	.LFE62:
 1342              		.align	2
 1343              		.global	armwave_set_wave_pointer_as_testbuf
 1344              		.syntax unified
 1345              		.arm
 1346              		.fpu vfp
 1348              	armwave_set_wave_pointer_as_testbuf:
 1349              	.LVL82:
 1350              	.LFB63:
 330:armwave.c     **** }
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 334:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 337:armwave.c     **** {
 1351              		.loc 1 337 1 is_stmt 1 view -0
 1352              		.cfi_startproc
 1353              		@ args = 0, pretend = 0, frame = 0
 1354              		@ frame_needed = 0, uses_anonymous_args = 0
 1355              		@ link register save eliminated.
 338:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1356              		.loc 1 338 5 view .LVU358
 1357              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1358              		.loc 1 338 29 is_stmt 0 view .LVU359
 1359 063c 24309FE5 		ldr	r3, .L80	@ tmp117,
 1360              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1361              		.loc 1 338 7 view .LVU360
 1362 0640 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1363 0644 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1364 0648 0400003A 		bcc	.L79		@,
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 340:armwave.c     ****         return;
 341:armwave.c     ****     }
 342:armwave.c     **** 
 343:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1365              		.loc 1 343 5 is_stmt 1 view .LVU361
 1366              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1367              		.loc 1 343 111 is_stmt 0 view .LVU362
 1368 064c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1369              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1370              		.loc 1 343 68 view .LVU363
 1371 0650 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1372 0654 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1373              	.LVL83:
 1374              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1375              		.loc 1 343 33 view .LVU364
 1376 0658 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1377              	@ armwave.c:344: }
 344:armwave.c     **** }
 1378              		.loc 1 344 1 view .LVU365
 1379 065c 1EFF2FE1 		bx	lr	@
 1380              	.LVL84:
 1381              	.L79:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1382              		.loc 1 339 9 is_stmt 1 view .LVU366
 1383 0660 04009FE5 		ldr	r0, .L80+4	@,
 1384              	.LVL85:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1385              		.loc 1 339 9 is_stmt 0 view .LVU367
 1386 0664 FEFFFFEA 		b	puts		@
 1387              	.LVL86:
 1388              	.L81:
 1389              		.align	2
 1390              	.L80:
 1391 0668 00000000 		.word	g_armwave_state
 1392 066c 74010000 		.word	.LC12
 1393              		.cfi_endproc
 1394              	.LFE63:
 1396              		.align	2
 1397              		.global	armwave_set_wave_pointer_u32
 1398              		.syntax unified
 1399              		.arm
 1400              		.fpu vfp
 1402              	armwave_set_wave_pointer_u32:
 1403              	.LVL87:
 1404              	.LFB64:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 348:armwave.c     ****  * disjointed buffers in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 351:armwave.c     **** {
 1405              		.loc 1 351 1 is_stmt 1 view -0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1409              		.loc 1 352 5 view .LVU369
 1410 0670 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1411              		.loc 1 352 5 is_stmt 0 view .LVU370
 1412 0674 0200000A 		beq	.L87		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1413              		.loc 1 353 5 is_stmt 1 view .LVU371
 1414              	@ armwave.c:353:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1415              		.loc 1 353 33 is_stmt 0 view .LVU372
 1416 0678 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1417 067c 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1418 0680 1EFF2FE1 		bx	lr	@
 1419              	.L87:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1420              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU373
 1421              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1422              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU374
 1423 0684 10402DE9 		push	{r4, lr}	@
 1424              		.cfi_def_cfa_offset 8
 1425              		.cfi_offset 4, -8
 1426              		.cfi_offset 14, -4
 1427              	@ armwave.c:352:     assert(wave_buffer_ptr != 0);
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1428              		.loc 1 352 5 discriminator 1 view .LVU375
 1429 0688 162EA0E3 		mov	r2, #352	@,
 1430 068c 0C309FE5 		ldr	r3, .L88+4	@,
 1431 0690 0C109FE5 		ldr	r1, .L88+8	@,
 1432 0694 0C009FE5 		ldr	r0, .L88+12	@,
 1433              	.LVL88:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1434              		.loc 1 352 5 discriminator 1 view .LVU376
 1435 0698 FEFFFFEB 		bl	__assert_fail		@
 1436              	.LVL89:
 1437              	.L89:
 1438              		.align	2
 1439              	.L88:
 1440 069c 00000000 		.word	g_armwave_state
 1441 06a0 50000000 		.word	.LANCHOR0+80
 1442 06a4 54000000 		.word	.LC3
 1443 06a8 B0010000 		.word	.LC13
 1444              		.cfi_endproc
 1445              	.LFE64:
 1447              		.align	2
 1448              		.global	armwave_clear_buffer
 1449              		.syntax unified
 1450              		.arm
 1451              		.fpu vfp
 1453              	armwave_clear_buffer:
 1454              	.LVL90:
 1455              	.LFB65:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 360:armwave.c     **** {
 1456              		.loc 1 360 1 is_stmt 1 view -0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460              		@ link register save eliminated.
 361:armwave.c     ****     // Flags ignored, only one buffer cleared
 362:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1461              		.loc 1 362 5 view .LVU378
 1462              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1463              		.loc 1 362 58 is_stmt 0 view .LVU379
 1464 06ac 0C309FE5 		ldr	r3, .L91	@ tmp114,
 1465              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1466              		.loc 1 362 5 view .LVU380
 1467 06b0 0010A0E3 		mov	r1, #0	@,
 1468 06b4 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1469 06b8 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1470              	.LVL91:
 1471              		.loc 1 362 5 view .LVU381
 1472 06bc FEFFFFEA 		b	memset		@
 1473              	.LVL92:
 1474              	.L92:
 1475              		.align	2
 1476              	.L91:
 1477 06c0 00000000 		.word	g_armwave_state
 1478              		.cfi_endproc
 1479              	.LFE65:
 1481              		.align	2
 1482              		.global	armwave_set_channel_colour
 1483              		.syntax unified
 1484              		.arm
 1485              		.fpu vfp
 1487              	armwave_set_channel_colour:
 1488              	.LVL93:
 1489              	.LFB66:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 367:armwave.c     ****  */
 368:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 369:armwave.c     **** {
 1490              		.loc 1 369 1 is_stmt 1 view -0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 1494              		@ link register save eliminated.
 370:armwave.c     ****     // Only 1ch supported for now
 371:armwave.c     ****     switch(ch) {
 1495              		.loc 1 371 5 view .LVU383
 1496 06c4 010050E3 		cmp	r0, #1	@ ch,
 372:armwave.c     ****         case 1:
 373:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1497              		.loc 1 373 13 view .LVU384
 1498              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 1499              		.loc 1 373 41 is_stmt 0 view .LVU385
 1500 06c8 0C009F05 		ldreq	r0, .L95	@ tmp117,
 1501              	.LVL94:
 1502              		.loc 1 373 41 view .LVU386
 1503 06cc BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1504              		.loc 1 374 13 is_stmt 1 view .LVU387
 1505              	@ armwave.c:374:             g_armwave_state.ch1_color.g = g;
 1506              		.loc 1 374 41 is_stmt 0 view .LVU388
 1507 06d0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 375:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1508              		.loc 1 375 13 is_stmt 1 view .LVU389
 1509              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 1510              		.loc 1 375 41 is_stmt 0 view .LVU390
 1511 06d4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 376:armwave.c     ****             break;
 1512              		.loc 1 376 13 is_stmt 1 view .LVU391
 1513              	@ armwave.c:378: }
 377:armwave.c     ****     }
 378:armwave.c     **** }
 1514              		.loc 1 378 1 is_stmt 0 view .LVU392
 1515 06d8 1EFF2FE1 		bx	lr	@
 1516              	.L96:
 1517              		.align	2
 1518              	.L95:
 1519 06dc 00000000 		.word	g_armwave_state
 1520              		.cfi_endproc
 1521              	.LFE66:
 1523              		.align	2
 1524              		.global	armwave_dump_ppm_debug
 1525              		.syntax unified
 1526              		.arm
 1527              		.fpu vfp
 1529              	armwave_dump_ppm_debug:
 1530              	.LVL95:
 1531              	.LFB67:
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Dump a ppm of a buffer to a file.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 384:armwave.c     **** {
 1532              		.loc 1 384 1 is_stmt 1 view -0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 0
 1535              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1536              		.loc 1 385 5 view .LVU394
 1537              	@ armwave.c:384: {
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1538              		.loc 1 384 1 is_stmt 0 view .LVU395
 1539 06e0 0130A0E1 		mov	r3, r1	@ fn, fn
 1540 06e4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1541              		.cfi_def_cfa_offset 28
 1542              		.cfi_offset 4, -28
 1543              		.cfi_offset 5, -24
 1544              		.cfi_offset 6, -20
 1545              		.cfi_offset 7, -16
 1546              		.cfi_offset 8, -12
 1547              		.cfi_offset 9, -8
 1548              		.cfi_offset 14, -4
 1549 06e8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1550 06ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1551              		.cfi_def_cfa_offset 40
 1552              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 1553              		.loc 1 385 16 view .LVU396
 1554 06f0 C4109FE5 		ldr	r1, .L105	@,
 1555              	.LVL96:
 1556              		.loc 1 385 16 view .LVU397
 1557 06f4 0300A0E1 		mov	r0, r3	@, fn
 1558              	.LVL97:
 1559              		.loc 1 385 16 view .LVU398
 1560 06f8 FEFFFFEB 		bl	fopen64		@
 1561              	.LVL98:
 1562              	@ armwave.c:392:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 386:armwave.c     ****     uint32_t data;
 387:armwave.c     ****     int xx, yy;
 388:armwave.c     **** 
 389:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 390:armwave.c     **** 
 391:armwave.c     ****     fputs("P3\n", fp);
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1563              		.loc 1 392 5 view .LVU399
 1564 06fc BC609FE5 		ldr	r6, .L105+4	@ tmp150,
 1565              	@ armwave.c:391:     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1566              		.loc 1 391 5 view .LVU400
 1567 0700 0320A0E3 		mov	r2, #3	@,
 1568 0704 0110A0E3 		mov	r1, #1	@,
 1569              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 385:armwave.c     ****     uint32_t data;
 1570              		.loc 1 385 16 view .LVU401
 1571 0708 0070A0E1 		mov	r7, r0	@ fp,
 1572              	.LVL99:
 386:armwave.c     ****     uint32_t data;
 1573              		.loc 1 386 5 is_stmt 1 view .LVU402
 387:armwave.c     **** 
 1574              		.loc 1 387 5 view .LVU403
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1575              		.loc 1 391 5 view .LVU404
 1576 070c 0030A0E1 		mov	r3, r0	@, fp
 1577 0710 AC009FE5 		ldr	r0, .L105+8	@,
 1578              	.LVL100:
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1579              		.loc 1 391 5 is_stmt 0 view .LVU405
 1580 0714 FEFFFFEB 		bl	fwrite		@
 1581              	.LVL101:
 1582              		.loc 1 392 5 is_stmt 1 view .LVU406
 1583 0718 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1584 071c A4109FE5 		ldr	r1, .L105+12	@,
 1585 0720 0700A0E1 		mov	r0, r7	@, fp
 1586 0724 FEFFFFEB 		bl	fprintf		@
 1587              	.LVL102:
 393:armwave.c     ****     fputs("255\n", fp);
 1588              		.loc 1 393 5 view .LVU407
 1589 0728 0420A0E3 		mov	r2, #4	@,
 1590 072c 0730A0E1 		mov	r3, r7	@, fp
 1591 0730 0110A0E3 		mov	r1, #1	@,
 1592 0734 90009FE5 		ldr	r0, .L105+16	@,
 1593 0738 FEFFFFEB 		bl	fwrite		@
 1594              	.LVL103:
 394:armwave.c     **** 
 395:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1595              		.loc 1 395 5 view .LVU408
 1596              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1597              		.loc 1 395 37 is_stmt 0 view .LVU409
 1598 073c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1599              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1600              		.loc 1 395 5 view .LVU410
 1601 0740 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1602 0744 180000DA 		ble	.L98		@,
 1603 0748 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1604              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 399:armwave.c     **** 
 400:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1605              		.loc 1 400 13 view .LVU411
 1606 074c 7C909FE5 		ldr	r9, .L105+20	@ tmp152,
 1607              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1608              		.loc 1 395 12 view .LVU412
 1609 0750 0050A0E3 		mov	r5, #0	@ yy,
 1610              	.LVL104:
 1611              	.L99:
 1612              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1613              		.loc 1 396 9 view .LVU413
 1614 0754 000053E3 		cmp	r3, #0	@ _13,
 1615              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1616              		.loc 1 396 16 view .LVU414
 1617 0758 0040A0C3 		movgt	r4, #0	@ xx,
 1618              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1619              		.loc 1 396 9 view .LVU415
 1620 075c 0F0000DA 		ble	.L101		@,
 1621              	.LVL105:
 1622              	.L100:
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1623              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU416
 1624              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1625              		.loc 1 397 29 is_stmt 0 discriminator 3 view .LVU417
 1626 0760 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1627              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1628              		.loc 1 400 13 discriminator 3 view .LVU418
 1629 0764 0910A0E1 		mov	r1, r9	@, tmp152
 1630 0768 0700A0E1 		mov	r0, r7	@, fp
 1631              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1632              		.loc 1 397 18 discriminator 3 view .LVU419
 1633 076c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1634              	.LVL106:
 1635              		.loc 1 400 13 is_stmt 1 discriminator 3 view .LVU420
 1636              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1637              		.loc 1 396 58 is_stmt 0 discriminator 3 view .LVU421
 1638 0770 014084E2 		add	r4, r4, #1	@ xx, xx,
 1639              	.LVL107:
 1640              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1641              		.loc 1 400 81 discriminator 3 view .LVU422
 1642 0774 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1643              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1644              		.loc 1 400 61 discriminator 3 view .LVU423
 1645 0778 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1646              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1647              		.loc 1 400 13 discriminator 3 view .LVU424
 1648 077c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1649 0780 7330EFE6 		uxtb	r3, r3	@, tmp142
 1650 0784 00C08DE5 		str	ip, [sp]	@ tmp147,
 1651 0788 7220EFE6 		uxtb	r2, r2	@, data
 1652              	.LVL108:
 1653              		.loc 1 400 13 discriminator 3 view .LVU425
 1654 078c FEFFFFEB 		bl	fprintf		@
 1655              	.LVL109:
 1656              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1657              		.loc 1 396 41 discriminator 3 view .LVU426
 1658 0790 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1659              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1660              		.loc 1 396 9 discriminator 3 view .LVU427
 1661 0794 040053E1 		cmp	r3, r4	@ _13, xx
 1662 0798 F0FFFFCA 		bgt	.L100		@,
 1663 079c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1664              	.LVL110:
 1665              	.L101:
 1666              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1667              		.loc 1 395 55 discriminator 2 view .LVU428
 1668 07a0 015085E2 		add	r5, r5, #1	@ yy, yy,
 1669              	.LVL111:
 1670              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1671              		.loc 1 395 5 discriminator 2 view .LVU429
 1672 07a4 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1673 07a8 E9FFFFBA 		blt	.L99		@,
 1674              	.LVL112:
 1675              	.L98:
 401:armwave.c     ****         }
 402:armwave.c     ****     }
 403:armwave.c     **** 
 404:armwave.c     ****     fclose(fp);
 1676              		.loc 1 404 5 is_stmt 1 view .LVU430
 1677 07ac 0700A0E1 		mov	r0, r7	@, fp
 1678              	@ armwave.c:405: }
 405:armwave.c     **** }
 1679              		.loc 1 405 1 is_stmt 0 view .LVU431
 1680 07b0 0CD08DE2 		add	sp, sp, #12	@,,
 1681              		.cfi_def_cfa_offset 28
 1682              		@ sp needed	@
 1683 07b4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1684              		.cfi_restore 14
 1685              		.cfi_restore 9
 1686              		.cfi_restore 8
 1687              		.cfi_restore 7
 1688              		.cfi_restore 6
 1689              		.cfi_restore 5
 1690              		.cfi_restore 4
 1691              		.cfi_def_cfa_offset 0
 1692              	.LVL113:
 1693              	@ armwave.c:404:     fclose(fp);
 404:armwave.c     **** }
 1694              		.loc 1 404 5 view .LVU432
 1695 07b8 FEFFFFEA 		b	fclose		@
 1696              	.LVL114:
 1697              	.L106:
 404:armwave.c     **** }
 1698              		.loc 1 404 5 view .LVU433
 1699              		.align	2
 1700              	.L105:
 1701 07bc C8010000 		.word	.LC14
 1702 07c0 00000000 		.word	g_armwave_state
 1703 07c4 CC010000 		.word	.LC15
 1704 07c8 D0010000 		.word	.LC16
 1705 07cc D8010000 		.word	.LC17
 1706 07d0 E0010000 		.word	.LC18
 1707              		.cfi_endproc
 1708              	.LFE67:
 1710              		.align	2
 1711              		.global	armwave_test_init
 1712              		.syntax unified
 1713              		.arm
 1714              		.fpu vfp
 1716              	armwave_test_init:
 1717              	.LVL115:
 1718              	.LFB68:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Initialise some test functionry.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 411:armwave.c     **** {
 1719              		.loc 1 411 1 is_stmt 1 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     test_create_gamma();
 1723              		.loc 1 412 5 view .LVU435
 1724              	.LBB12:
 1725              	.LBI12:
  34:armwave.c     **** {
 1726              		.loc 1 34 6 view .LVU436
  34:armwave.c     **** {
 1727              		.loc 1 34 6 is_stmt 0 view .LVU437
 1728              	.LBE12:
 1729              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1730              		.loc 1 411 1 view .LVU438
 1731 07d4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1732              		.cfi_def_cfa_offset 32
 1733              		.cfi_offset 4, -32
 1734              		.cfi_offset 5, -28
 1735              		.cfi_offset 6, -24
 1736              		.cfi_offset 7, -20
 1737              		.cfi_offset 8, -16
 1738              		.cfi_offset 9, -12
 1739              		.cfi_offset 10, -8
 1740              		.cfi_offset 14, -4
 1741 07d8 068B2DED 		vpush.64	{d8, d9, d10}	@
 1742              		.cfi_def_cfa_offset 56
 1743              		.cfi_offset 80, -56
 1744              		.cfi_offset 81, -52
 1745              		.cfi_offset 82, -48
 1746              		.cfi_offset 83, -44
 1747              		.cfi_offset 84, -40
 1748              		.cfi_offset 85, -36
 1749 07dc C0409FE5 		ldr	r4, .L111+20	@ ivtmp.79,
 1750              	.LBB15:
 1751              	.LBB13:
 1752              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1753              		.loc 1 40 32 view .LVU439
 1754 07e0 2EAA9FED 		vldr.32	s20, .L111+16	@ tmp136,
 1755              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1756              		.loc 1 40 26 view .LVU440
 1757 07e4 299B9FED 		vldr.64	d9, .L111	@ tmp151,
 1758              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1759              		.loc 1 40 49 view .LVU441
 1760 07e8 2A8B9FED 		vldr.64	d8, .L111+8	@ tmp139,
 1761 07ec 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1762              	.LBE13:
 1763              	.LBE15:
 1764              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1765              		.loc 1 411 1 view .LVU442
 1766 07f0 10D04DE2 		sub	sp, sp, #16	@,,
 1767              		.cfi_def_cfa_offset 72
 1768              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1769              		.loc 1 411 1 view .LVU443
 1770 07f4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1771 07f8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1772 07fc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1773 0800 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1774 0804 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1775 0808 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1776              	.LVL116:
 1777              	.L108:
 1778              	.LBB16:
 1779              	.LBB14:
  40:armwave.c     ****     }
 1780              		.loc 1 40 9 is_stmt 1 view .LVU444
 1781              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1782              		.loc 1 40 32 is_stmt 0 view .LVU445
 1783 080c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1784              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1785              		.loc 1 40 26 view .LVU446
 1786 0810 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1787              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1788              		.loc 1 40 32 view .LVU447
 1789 0814 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1790 0818 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1791 081c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1792              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1793              		.loc 1 40 26 view .LVU448
 1794 0820 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1795 0824 FEFFFFEB 		bl	pow		@
 1796              	.LVL117:
 1797              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1798              		.loc 1 40 49 view .LVU449
 1799 0828 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1800              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1801              		.loc 1 40 24 view .LVU450
 1802 082c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1803 0830 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1804 0834 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1805              	.LVL118:
 1806              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1807              		.loc 1 39 5 view .LVU451
 1808 0838 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1809 083c F2FFFF1A 		bne	.L108		@,
 1810              	.LVL119:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1811              		.loc 1 39 5 view .LVU452
 1812              	.LBE14:
 1813              	.LBE16:
 413:armwave.c     **** 
 414:armwave.c     ****     // make ch1 yellowish by default
 415:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1814              		.loc 1 415 5 is_stmt 1 view .LVU453
 1815              	.LBB17:
 1816              	.LBI17:
 368:armwave.c     **** {
 1817              		.loc 1 368 6 view .LVU454
 1818              	.LBB18:
 371:armwave.c     ****         case 1:
 1819              		.loc 1 371 5 view .LVU455
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1820              		.loc 1 373 13 view .LVU456
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1821              		.loc 1 374 13 view .LVU457
 1822              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1823              		.loc 1 373 41 is_stmt 0 view .LVU458
 1824 0840 60C09FE5 		ldr	ip, .L111+24	@ tmp142,
 1825 0844 60409FE5 		ldr	r4, .L111+28	@ tmp143,
 1826              	.LBE18:
 1827              	.LBE17:
 1828              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 416:armwave.c     **** 
 417:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1829              		.loc 1 417 5 view .LVU459
 1830 0848 0000A0E3 		mov	r0, #0	@ tmp147,
 1831              	.LBB22:
 1832              	.LBB19:
 1833              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 1834              		.loc 1 375 41 view .LVU460
 1835 084c FAE0A0E3 		mov	lr, #250	@ tmp146,
 1836              	.LBE19:
 1837              	.LBE22:
 1838              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1839              		.loc 1 417 5 view .LVU461
 1840 0850 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1841 0854 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1842 0858 00808DE5 		str	r8, [sp]	@ render_width,
 1843 085c 0610A0E1 		mov	r1, r6	@, tmp3
 1844 0860 0720A0E1 		mov	r2, r7	@, nwaves
 1845              	.LBB23:
 1846              	.LBB20:
 1847              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1848              		.loc 1 373 41 view .LVU462
 1849 0864 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 375:armwave.c     ****             break;
 1850              		.loc 1 375 13 is_stmt 1 view .LVU463
 1851              	.LBE20:
 1852              	.LBE23:
 1853              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1854              		.loc 1 417 5 is_stmt 0 view .LVU464
 1855 0868 0630A0E1 		mov	r3, r6	@, wave_size
 1856              	.LBB24:
 1857              	.LBB21:
 1858              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 1859              		.loc 1 375 41 view .LVU465
 1860 086c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 376:armwave.c     ****     }
 1861              		.loc 1 376 13 is_stmt 1 view .LVU466
 1862              	.LVL120:
 376:armwave.c     ****     }
 1863              		.loc 1 376 13 is_stmt 0 view .LVU467
 1864              	.LBE21:
 1865              	.LBE24:
 1866              		.loc 1 417 5 is_stmt 1 view .LVU468
 1867 0870 FEFFFFEB 		bl	armwave_setup_render		@
 1868              	.LVL121:
 418:armwave.c     **** 
 419:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1869              		.loc 1 419 5 view .LVU469
 1870 0874 34109FE5 		ldr	r1, .L111+32	@,
 1871 0878 34009FE5 		ldr	r0, .L111+36	@,
 1872              	@ armwave.c:420: }
 420:armwave.c     **** }
 1873              		.loc 1 420 1 is_stmt 0 view .LVU470
 1874 087c 10D08DE2 		add	sp, sp, #16	@,,
 1875              		.cfi_def_cfa_offset 56
 1876              		@ sp needed	@
 1877 0880 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1878              		.cfi_restore 84
 1879              		.cfi_restore 85
 1880              		.cfi_restore 82
 1881              		.cfi_restore 83
 1882              		.cfi_restore 80
 1883              		.cfi_restore 81
 1884              		.cfi_def_cfa_offset 32
 1885 0884 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1886              		.cfi_restore 14
 1887              		.cfi_restore 10
 1888              		.cfi_restore 9
 1889              		.cfi_restore 8
 1890              		.cfi_restore 7
 1891              		.cfi_restore 6
 1892              		.cfi_restore 5
 1893              		.cfi_restore 4
 1894              		.cfi_def_cfa_offset 0
 1895              	.LVL122:
 1896              	@ armwave.c:419:     printf("armwave version: %s\n", ARMWAVE_VER);
 419:armwave.c     **** }
 1897              		.loc 1 419 5 view .LVU471
 1898 0888 FEFFFFEA 		b	printf		@
 1899              	.LVL123:
 1900              	.L112:
 1901 088c 0000A0E1 		.align	3
 1902              	.L111:
 1903 0890 000000C0 		.word	-1073741824
 1904 0894 CCCCEC3F 		.word	1072483532
 1905 0898 00000000 		.word	0
 1906 089c 00E06F40 		.word	1081073664
 1907 08a0 00007F43 		.word	1132396544
 1908 08a4 FFFFFFFF 		.word	gamma_table-1
 1909 08a8 00000000 		.word	g_armwave_state
 1910 08ac F609F406 		.word	116656630
 1911 08b0 00000000 		.word	.LC0
 1912 08b4 08000000 		.word	.LC1
 1913              		.cfi_endproc
 1914              	.LFE68:
 1916              		.global	__aeabi_idiv
 1917              		.align	2
 1918              		.global	armwave_test_generate
 1919              		.syntax unified
 1920              		.arm
 1921              		.fpu vfp
 1923              	armwave_test_generate:
 1924              	.LFB69:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Fill buffers with test funtionry.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_generate()
 426:armwave.c     **** {
 1925              		.loc 1 426 1 is_stmt 1 view -0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 16
 1928              		@ frame_needed = 0, uses_anonymous_args = 0
 427:armwave.c     ****     uint32_t yy;
 1929              		.loc 1 427 5 view .LVU473
 428:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1930              		.loc 1 428 5 view .LVU474
 1931              	.LVL124:
 429:armwave.c     **** 
 430:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1932              		.loc 1 430 5 view .LVU475
 1933              	@ armwave.c:426: {
 426:armwave.c     ****     uint32_t yy;
 1934              		.loc 1 426 1 is_stmt 0 view .LVU476
 1935 08b8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1936              		.cfi_def_cfa_offset 36
 1937              		.cfi_offset 4, -36
 1938              		.cfi_offset 5, -32
 1939              		.cfi_offset 6, -28
 1940              		.cfi_offset 7, -24
 1941              		.cfi_offset 8, -20
 1942              		.cfi_offset 9, -16
 1943              		.cfi_offset 10, -12
 1944              		.cfi_offset 11, -8
 1945              		.cfi_offset 14, -4
 1946              	@ armwave.c:430:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1947              		.loc 1 430 5 view .LVU477
 1948 08bc 0010A0E3 		mov	r1, #0	@,
 1949              	@ armwave.c:430:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1950              		.loc 1 430 58 view .LVU478
 1951 08c0 F8919FE5 		ldr	r9, .L133	@ tmp345,
 1952              	@ armwave.c:426: {
 426:armwave.c     ****     uint32_t yy;
 1953              		.loc 1 426 1 view .LVU479
 1954 08c4 1CD04DE2 		sub	sp, sp, #28	@,,
 1955              		.cfi_def_cfa_offset 64
 1956              	@ armwave.c:430:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1957              		.loc 1 430 5 view .LVU480
 1958 08c8 502099E5 		ldr	r2, [r9, #80]	@, g_armwave_state.ch_buff_size
 1959 08cc 040099E5 		ldr	r0, [r9, #4]	@, g_armwave_state.ch1_buffer
 1960 08d0 FEFFFFEB 		bl	memset		@
 1961              	.LVL125:
 431:armwave.c     **** 
 432:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 1962              		.loc 1 432 5 is_stmt 1 view .LVU481
 1963              	@ armwave.c:432:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1964              		.loc 1 432 68 is_stmt 0 view .LVU482
 1965 08d4 446099E5 		ldr	r6, [r9, #68]	@ _9, g_armwave_state.slice_height
 1966              	@ armwave.c:432:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1967              		.loc 1 432 51 view .LVU483
 1968 08d8 4C0099E5 		ldr	r0, [r9, #76]	@, g_armwave_state.wave_length
 1969 08dc 0610A0E1 		mov	r1, r6	@, _9
 1970 08e0 FEFFFFEB 		bl	__aeabi_idiv		@
 1971              	.LVL126:
 1972              	@ armwave.c:432:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1973              		.loc 1 432 5 view .LVU484
 1974 08e4 000050E3 		cmp	r0, #0	@,
 1975 08e8 7200000A 		beq	.L113		@,
 1976              	@ armwave.c:432:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1977              		.loc 1 432 12 view .LVU485
 1978 08ec 00B0A0E3 		mov	fp, #0	@ yy,
 1979 08f0 0B80A0E1 		mov	r8, fp	@ yy, yy
 1980              	.LVL127:
 1981              	.L114:
 433:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 434:armwave.c     **** 
 435:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1982              		.loc 1 435 9 is_stmt 1 discriminator 3 view .LVU486
 1983 08f4 980606E0 		mul	r6, r8, r6	@ _5, yy, _9
 1984              	.LBB27:
 1985              	.LBB28:
 1986              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1987              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU487
 1988 08f8 243099E5 		ldr	r3, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1989              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1990              		.loc 1 71 130 discriminator 3 view .LVU488
 1991 08fc 401099E5 		ldr	r1, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1992              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1993              		.loc 1 71 40 discriminator 3 view .LVU489
 1994 0900 044099E5 		ldr	r4, [r9, #4]	@ _18, g_armwave_state.ch1_buffer
 1995              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1996              		.loc 1 71 65 discriminator 3 view .LVU490
 1997 0904 930603E0 		mul	r3, r3, r6	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, _5
 1998              	.LBE28:
 1999              	.LBE27:
 2000              	@ armwave.c:435:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2001              		.loc 1 435 9 discriminator 3 view .LVU491
 2002 0908 485099E5 		ldr	r5, [r9, #72]	@ _7, g_armwave_state.slice_record_height
 2003              	.LVL128:
 2004              	.LBB30:
 2005              	.LBI27:
  62:armwave.c     **** {
 2006              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU492
 2007              	.LBB29:
  64:armwave.c     ****     uint32_t value, word;
 2008              		.loc 1 64 5 discriminator 3 view .LVU493
  65:armwave.c     ****     uint8_t *wave_base;
 2009              		.loc 1 65 5 discriminator 3 view .LVU494
  66:armwave.c     ****     uint8_t *write_buffer_base;
 2010              		.loc 1 66 5 discriminator 3 view .LVU495
  67:armwave.c     ****     uint8_t *write_buffer;
 2011              		.loc 1 67 5 discriminator 3 view .LVU496
  68:armwave.c     **** 
 2012              		.loc 1 68 5 discriminator 3 view .LVU497
  71:armwave.c     **** 
 2013              		.loc 1 71 5 discriminator 3 view .LVU498
 2014              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2015              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU499
 2016 090c 0420A0E1 		mov	r2, r4	@, _18
 2017              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 2018              		.loc 1 71 105 discriminator 3 view .LVU500
 2019 0910 2334A0E1 		lsr	r3, r3, #8	@ tmp242, tmp240,
 2020              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2021              		.loc 1 73 5 discriminator 3 view .LVU501
 2022 0914 00608DE5 		str	r6, [sp]	@ _5,
 2023              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 2024              		.loc 1 71 130 discriminator 3 view .LVU502
 2025 0918 910303E0 		mul	r3, r1, r3	@ _24, g_armwave_state.bitdepth_height, tmp242
 2026              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2027              		.loc 1 73 5 discriminator 3 view .LVU503
 2028 091c 04508DE5 		str	r5, [sp, #4]	@ _7,
 2029              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 2030              		.loc 1 71 23 discriminator 3 view .LVU504
 2031 0920 034084E0 		add	r4, r4, r3	@ write_buffer_base, _18, _24
 2032              	.LVL129:
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2033              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU505
 2034 0924 0410A0E1 		mov	r1, r4	@, write_buffer_base
 2035 0928 94019FE5 		ldr	r0, .L133+4	@,
 2036 092c FEFFFFEB 		bl	printf		@
 2037              	.LVL130:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2038              		.loc 1 78 5 discriminator 3 view .LVU506
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2039              		.loc 1 78 5 is_stmt 0 discriminator 3 view .LVU507
 2040 0930 383099E5 		ldr	r3, [r9, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 2041 0934 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 2042 0938 570000DA 		ble	.L123		@,
 2043 093c 000055E3 		cmp	r5, #0	@ _7,
 2044 0940 5500000A 		beq	.L123		@,
 2045 0944 043046E2 		sub	r3, r6, #4	@ tmp344, _5,
 2046              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2047              		.loc 1 78 11 view .LVU508
 2048 0948 0060A0E3 		mov	r6, #0	@ w,
 2049              	.LVL131:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2050              		.loc 1 78 11 view .LVU509
 2051 094c 0C308DE5 		str	r3, [sp, #12]	@ tmp344, %sfp
 2052 0950 10508DE5 		str	r5, [sp, #16]	@ _7, %sfp
 2053 0954 14808DE5 		str	r8, [sp, #20]	@ yy, %sfp
 2054              	.LVL132:
 2055              	.L122:
  79:armwave.c     **** 
 2056              		.loc 1 79 9 is_stmt 1 view .LVU510
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2057              		.loc 1 83 9 view .LVU511
 2058              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 2059              		.loc 1 79 64 is_stmt 0 view .LVU512
 2060 0958 343099E5 		ldr	r3, [r9, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2061 095c 0C109DE5 		ldr	r1, [sp, #12]	@ tmp344, %sfp
 2062 0960 14E099E5 		ldr	lr, [r9, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2063 0964 931623E0 		mla	r3, r3, r6, r1	@ tmp259, g_armwave_state.wave_stride, w, tmp344
 2064              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2065              		.loc 1 83 16 view .LVU513
 2066 0968 0020A0E3 		mov	r2, #0	@ yy,
 2067 096c 03E08EE0 		add	lr, lr, r3	@ ivtmp.85, g_armwave_state.wave_buffer, tmp259
 2068              	.LVL133:
 2069              	.L121:
  84:armwave.c     **** 
 2070              		.loc 1 84 13 is_stmt 1 view .LVU514
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2071              		.loc 1 98 17 view .LVU515
 100:armwave.c     ****                 word >>= 8;
 2072              		.loc 1 100 17 view .LVU516
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2073              		.loc 1 98 17 view .LVU517
 100:armwave.c     ****                 word >>= 8;
 2074              		.loc 1 100 17 view .LVU518
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2075              		.loc 1 98 17 view .LVU519
 100:armwave.c     ****                 word >>= 8;
 2076              		.loc 1 100 17 view .LVU520
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2077              		.loc 1 98 17 view .LVU521
 100:armwave.c     ****                 word >>= 8;
 2078              		.loc 1 100 17 view .LVU522
 2079              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 2080              		.loc 1 84 18 is_stmt 0 view .LVU523
 2081 0970 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _285, offset: 0B]
 2082              	.LVL134:
  86:armwave.c     ****                 // maybe worth preloading the base address here...
 2083              		.loc 1 86 13 is_stmt 1 view .LVU524
  88:armwave.c     ****                 
 2084              		.loc 1 88 17 view .LVU525
  91:armwave.c     ****                     continue;
 2085              		.loc 1 91 17 view .LVU526
 2086              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2087              		.loc 1 99 34 is_stmt 0 view .LVU527
 2088 0974 01B082E2 		add	fp, r2, #1	@ tmp289, yy,
 2089              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2090              		.loc 1 91 20 view .LVU528
 2091 0978 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 2092 097c 0110A003 		moveq	r1, #1	@ tmp262,
 2093 0980 0010A013 		movne	r1, #0	@ tmp262,
 2094              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2095              		.loc 1 91 19 view .LVU529
 2096 0984 FF0057E3 		cmp	r7, #255	@ scale_value,
 2097 0988 01108103 		orreq	r1, r1, #1	@,, tmp267, tmp262
 2098 098c 000051E3 		cmp	r1, #0	@ tmp267,
 2099              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2100              		.loc 1 99 34 view .LVU530
 2101 0990 02A082E2 		add	r10, r2, #2	@ tmp310, yy,
 2102 0994 038082E2 		add	r8, r2, #3	@ tmp330, yy,
 2103              	.LVL135:
 2104              	@ armwave.c:101:                 word >>= 8;
 101:armwave.c     ****             }
 2105              		.loc 1 101 22 view .LVU531
 2106 0998 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 2107 099c 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 2108              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2109              		.loc 1 91 19 view .LVU532
 2110 09a0 3400001A 		bne	.L124		@,
 2111              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2112              		.loc 1 99 34 view .LVU533
 2113 09a4 241099E5 		ldr	r1, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2114              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2115              		.loc 1 91 20 view .LVU534
 2116 09a8 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 2117 09ac 0150A003 		moveq	r5, #1	@ tmp282,
 2118              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2119              		.loc 1 99 34 view .LVU535
 2120 09b0 910201E0 		mul	r1, r1, r2	@ tmp269, g_armwave_state.cmp_x_bitdepth_scale, yy
 2121              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2122              		.loc 1 91 20 view .LVU536
 2123 09b4 0050A013 		movne	r5, #0	@ tmp282,
 2124              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2125              		.loc 1 91 19 view .LVU537
 2126 09b8 FF005CE3 		cmp	ip, #255	@ scale_value,
 2127 09bc 01508503 		orreq	r5, r5, #1	@,, tmp287, tmp282
 2128 09c0 000055E3 		cmp	r5, #0	@ tmp287,
 2129              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2130              		.loc 1 100 47 view .LVU538
 2131 09c4 405099E5 		ldr	r5, [r9, #64]	@ tmp359, g_armwave_state.bitdepth_height
 2132              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2133              		.loc 1 99 74 view .LVU539
 2134 09c8 2114A0E1 		lsr	r1, r1, #8	@ tmp271, tmp269,
 2135              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2136              		.loc 1 100 47 view .LVU540
 2137 09cc 957121E0 		mla	r1, r5, r1, r7	@ tmp275, tmp359, tmp271, scale_value
 2138 09d0 0150D4E7 		ldrb	r5, [r4, r1]	@ zero_extendqisi2	@ *_93, *_93
 2139 09d4 015085E2 		add	r5, r5, #1	@ tmp278, *_93,
 2140 09d8 0150C4E7 		strb	r5, [r4, r1]	@ tmp278, *_93
 2141              	.LVL136:
 101:armwave.c     ****             }
 2142              		.loc 1 101 17 is_stmt 1 view .LVU541
  88:armwave.c     ****                 
 2143              		.loc 1 88 17 view .LVU542
  91:armwave.c     ****                     continue;
 2144              		.loc 1 91 17 view .LVU543
 2145              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2146              		.loc 1 91 19 is_stmt 0 view .LVU544
 2147 09dc 2500001A 		bne	.L124		@,
 2148              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2149              		.loc 1 99 34 view .LVU545
 2150 09e0 245099E5 		ldr	r5, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2151              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2152              		.loc 1 99 99 view .LVU546
 2153 09e4 401099E5 		ldr	r1, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2154              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2155              		.loc 1 91 20 view .LVU547
 2156 09e8 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 2157              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2158              		.loc 1 99 34 view .LVU548
 2159 09ec 950B0BE0 		mul	fp, r5, fp	@ tmp290, g_armwave_state.cmp_x_bitdepth_scale, tmp289
 2160              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2161              		.loc 1 91 20 view .LVU549
 2162 09f0 0150A003 		moveq	r5, #1	@ tmp303,
 2163 09f4 0050A013 		movne	r5, #0	@ tmp303,
 2164              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2165              		.loc 1 99 74 view .LVU550
 2166 09f8 2BB4A0E1 		lsr	fp, fp, #8	@ tmp292, tmp290,
 2167              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2168              		.loc 1 91 19 view .LVU551
 2169 09fc FF0050E3 		cmp	r0, #255	@ scale_value,
 2170 0a00 01508503 		orreq	r5, r5, #1	@,, tmp308, tmp303
 2171              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2172              		.loc 1 100 47 view .LVU552
 2173 0a04 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp296, g_armwave_state.bitdepth_height, tmp292, scale_value
 2174              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2175              		.loc 1 91 19 view .LVU553
 2176 0a08 000055E3 		cmp	r5, #0	@ tmp308,
 2177              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2178              		.loc 1 100 47 view .LVU554
 2179 0a0c 0C10D4E7 		ldrb	r1, [r4, ip]	@ zero_extendqisi2	@ *_123, *_123
 2180 0a10 011081E2 		add	r1, r1, #1	@ tmp299, *_123,
 2181 0a14 0C10C4E7 		strb	r1, [r4, ip]	@ tmp299, *_123
 101:armwave.c     ****             }
 2182              		.loc 1 101 17 is_stmt 1 view .LVU555
 2183              	.LVL137:
  88:armwave.c     ****                 
 2184              		.loc 1 88 17 view .LVU556
  91:armwave.c     ****                     continue;
 2185              		.loc 1 91 17 view .LVU557
 2186              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2187              		.loc 1 91 19 is_stmt 0 view .LVU558
 2188 0a18 1600001A 		bne	.L124		@,
 2189              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2190              		.loc 1 99 34 view .LVU559
 2191 0a1c 241099E5 		ldr	r1, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2192              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2193              		.loc 1 99 99 view .LVU560
 2194 0a20 40C099E5 		ldr	ip, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2195              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2196              		.loc 1 91 20 view .LVU561
 2197 0a24 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 2198              	.LVL138:
 2199              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2200              		.loc 1 99 34 view .LVU562
 2201 0a28 910A0AE0 		mul	r10, r1, r10	@ tmp311, g_armwave_state.cmp_x_bitdepth_scale, tmp310
 2202              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2203              		.loc 1 91 20 view .LVU563
 2204 0a2c 0110A003 		moveq	r1, #1	@ tmp323,
 2205 0a30 0010A013 		movne	r1, #0	@ tmp323,
 2206              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2207              		.loc 1 99 74 view .LVU564
 2208 0a34 2AA4A0E1 		lsr	r10, r10, #8	@ tmp313, tmp311,
 2209              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2210              		.loc 1 91 19 view .LVU565
 2211 0a38 FF0053E3 		cmp	r3, #255	@ word,
 2212 0a3c 01108103 		orreq	r1, r1, #1	@,, tmp328, tmp323
 2213              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2214              		.loc 1 100 47 view .LVU566
 2215 0a40 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp317, g_armwave_state.bitdepth_height, tmp313, scale_value
 2216              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2217              		.loc 1 91 19 view .LVU567
 2218 0a44 000051E3 		cmp	r1, #0	@ tmp328,
 2219              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2220              		.loc 1 100 47 view .LVU568
 2221 0a48 0010D4E7 		ldrb	r1, [r4, r0]	@ zero_extendqisi2	@ *_153, *_153
 2222 0a4c 011081E2 		add	r1, r1, #1	@ tmp320, *_153,
 2223 0a50 0010C4E7 		strb	r1, [r4, r0]	@ tmp320, *_153
 101:armwave.c     ****             }
 2224              		.loc 1 101 17 is_stmt 1 view .LVU569
 2225              	.LVL139:
  88:armwave.c     ****                 
 2226              		.loc 1 88 17 view .LVU570
  91:armwave.c     ****                     continue;
 2227              		.loc 1 91 17 view .LVU571
 2228              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2229              		.loc 1 91 19 is_stmt 0 view .LVU572
 2230 0a54 0700001A 		bne	.L124		@,
 2231              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2232              		.loc 1 99 34 view .LVU573
 2233 0a58 241099E5 		ldr	r1, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2234              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2235              		.loc 1 99 99 view .LVU574
 2236 0a5c 400099E5 		ldr	r0, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2237              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2238              		.loc 1 99 34 view .LVU575
 2239 0a60 910808E0 		mul	r8, r1, r8	@ tmp331, g_armwave_state.cmp_x_bitdepth_scale, tmp330
 2240              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2241              		.loc 1 99 74 view .LVU576
 2242 0a64 2884A0E1 		lsr	r8, r8, #8	@ tmp333, tmp331,
 2243              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2244              		.loc 1 100 47 view .LVU577
 2245 0a68 903823E0 		mla	r3, r0, r8, r3	@ tmp337, g_armwave_state.bitdepth_height, tmp333, word
 2246 0a6c 0310D4E7 		ldrb	r1, [r4, r3]	@ zero_extendqisi2	@ *_183, *_183
 2247 0a70 011081E2 		add	r1, r1, #1	@ tmp340, *_183,
 2248 0a74 0310C4E7 		strb	r1, [r4, r3]	@ tmp340, *_183
 101:armwave.c     ****             }
 2249              		.loc 1 101 17 is_stmt 1 view .LVU578
 2250              	.LVL140:
 2251              	.L124:
 2252              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2253              		.loc 1 83 9 is_stmt 0 view .LVU579
 2254 0a78 10309DE5 		ldr	r3, [sp, #16]	@ _7, %sfp
 2255              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2256              		.loc 1 83 37 view .LVU580
 2257 0a7c 042082E2 		add	r2, r2, #4	@ yy, yy,
 2258              	.LVL141:
 2259              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2260              		.loc 1 83 9 view .LVU581
 2261 0a80 020053E1 		cmp	r3, r2	@ _7, yy
 2262 0a84 B9FFFF8A 		bhi	.L121		@,
 2263              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2264              		.loc 1 78 5 view .LVU582
 2265 0a88 383099E5 		ldr	r3, [r9, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 2266              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2267              		.loc 1 78 44 view .LVU583
 2268 0a8c 016086E2 		add	r6, r6, #1	@ w, w,
 2269              	.LVL142:
 2270              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2271              		.loc 1 78 5 view .LVU584
 2272 0a90 030056E1 		cmp	r6, r3	@ w, g_armwave_state.waves
 2273 0a94 AFFFFFBA 		blt	.L122		@,
 2274 0a98 14809DE5 		ldr	r8, [sp, #20]	@ yy, %sfp
 2275              	.LVL143:
 2276              	.L123:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2277              		.loc 1 78 5 view .LVU585
 2278              	.LBE29:
 2279              	.LBE30:
 436:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 2280              		.loc 1 436 9 is_stmt 1 view .LVU586
 437:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 2281              		.loc 1 437 9 view .LVU587
 2282              	@ armwave.c:432:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 432:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2283              		.loc 1 432 68 is_stmt 0 view .LVU588
 2284 0a9c 446099E5 		ldr	r6, [r9, #68]	@ _9, g_armwave_state.slice_height
 2285              	@ armwave.c:432:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 432:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2286              		.loc 1 432 51 view .LVU589
 2287 0aa0 4C0099E5 		ldr	r0, [r9, #76]	@, g_armwave_state.wave_length
 2288 0aa4 0610A0E1 		mov	r1, r6	@, _9
 2289 0aa8 FEFFFFEB 		bl	__aeabi_idiv		@
 2290              	.LVL144:
 2291              	@ armwave.c:432:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 432:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2292              		.loc 1 432 86 view .LVU590
 2293 0aac 018088E2 		add	r8, r8, #1	@ yy, yy,
 2294              	.LVL145:
 2295              	@ armwave.c:432:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 432:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2296              		.loc 1 432 5 view .LVU591
 2297 0ab0 080050E1 		cmp	r0, r8	@, yy
 2298 0ab4 8EFFFF8A 		bhi	.L114		@,
 2299              	.LVL146:
 2300              	.L113:
 2301              	@ armwave.c:441: }
 438:armwave.c     ****     }
 439:armwave.c     **** 
 440:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 441:armwave.c     **** }
 2302              		.loc 1 441 1 view .LVU592
 2303 0ab8 1CD08DE2 		add	sp, sp, #28	@,,
 2304              		.cfi_def_cfa_offset 36
 2305              		@ sp needed	@
 2306 0abc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2307              	.L134:
 2308              		.align	2
 2309              	.L133:
 2310 0ac0 00000000 		.word	g_armwave_state
 2311 0ac4 20000000 		.word	.LC2
 2312              		.cfi_endproc
 2313              	.LFE69:
 2315              		.align	2
 2316              		.global	armwave_test_fill_outbuf
 2317              		.syntax unified
 2318              		.arm
 2319              		.fpu vfp
 2321              	armwave_test_fill_outbuf:
 2322              	.LFB70:
 442:armwave.c     **** 
 443:armwave.c     **** /*
 444:armwave.c     ****  * Render image to the local allocated buffer.
 445:armwave.c     ****  */
 446:armwave.c     **** void armwave_test_fill_outbuf()
 447:armwave.c     **** {
 2323              		.loc 1 447 1 is_stmt 1 view -0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 8
 2326              		@ frame_needed = 0, uses_anonymous_args = 0
 448:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2327              		.loc 1 448 5 view .LVU594
 2328 0ac8 50C19FE5 		ldr	ip, .L156	@ tmp204,
 2329              	@ armwave.c:447: {
 447:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2330              		.loc 1 447 1 is_stmt 0 view .LVU595
 2331 0acc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2332              		.cfi_def_cfa_offset 36
 2333              		.cfi_offset 4, -36
 2334              		.cfi_offset 5, -32
 2335              		.cfi_offset 6, -28
 2336              		.cfi_offset 7, -24
 2337              		.cfi_offset 8, -20
 2338              		.cfi_offset 9, -16
 2339              		.cfi_offset 10, -12
 2340              		.cfi_offset 11, -8
 2341              		.cfi_offset 14, -4
 2342 0ad0 0CD04DE2 		sub	sp, sp, #12	@,,
 2343              		.cfi_def_cfa_offset 48
 2344              	@ armwave.c:448:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2345              		.loc 1 448 5 view .LVU596
 2346 0ad4 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2347              	.LVL147:
 2348              	.LBB33:
 2349              	.LBI33:
 166:armwave.c     **** {
 2350              		.loc 1 166 6 is_stmt 1 view .LVU597
 2351              	.LBB34:
 168:armwave.c     ****     // uint32_t ysub;
 2352              		.loc 1 168 5 view .LVU598
 170:armwave.c     ****     uint8_t r, g, b, value; 
 2353              		.loc 1 170 5 view .LVU599
 171:armwave.c     ****     // uint8_t row;
 2354              		.loc 1 171 5 view .LVU600
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2355              		.loc 1 173 5 view .LVU601
 2356              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2357              		.loc 1 173 15 is_stmt 0 view .LVU602
 2358 0ad8 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2359              	.LVL148:
 174:armwave.c     ****     uint32_t offset;
 2360              		.loc 1 174 5 is_stmt 1 view .LVU603
 175:armwave.c     **** 
 2361              		.loc 1 175 5 view .LVU604
 177:armwave.c     **** 
 2362              		.loc 1 177 5 view .LVU605
 2363 0adc 000058E3 		cmp	r8, #0	@ _1,
 2364 0ae0 4900000A 		beq	.L154		@,
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2365              		.loc 1 179 5 view .LVU606
 2366              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2367              		.loc 1 179 10 is_stmt 0 view .LVU607
 2368 0ae4 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2369 0ae8 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2370              	.LVL149:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2371              		.loc 1 182 5 is_stmt 1 view .LVU608
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2372              		.loc 1 182 5 is_stmt 0 view .LVU609
 2373 0aec 000057E3 		cmp	r7, #0	@ npix,
 2374 0af0 0A0000DA 		ble	.L135		@,
 2375              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2376              		.loc 1 194 52 view .LVU610
 2377 0af4 FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2378              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2379              		.loc 1 195 52 view .LVU611
 2380 0af8 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2381              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2382              		.loc 1 196 52 view .LVU612
 2383 0afc F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2384              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2385              		.loc 1 218 57 view .LVU613
 2386 0b00 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2387              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2388              		.loc 1 182 11 view .LVU614
 2389 0b04 00E0A0E3 		mov	lr, #0	@ n,
 2390              	.LVL150:
 2391              	.L142:
 186:armwave.c     **** 
 2392              		.loc 1 186 9 is_stmt 1 view .LVU615
 2393              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 2394              		.loc 1 186 19 is_stmt 0 view .LVU616
 2395 0b08 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2396              	.LVL151:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2397              		.loc 1 188 9 is_stmt 1 view .LVU617
 2398              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2399              		.loc 1 188 11 is_stmt 0 view .LVU618
 2400 0b0c 000050E3 		cmp	r0, #0	@ wave_word,
 2401 0b10 0400001A 		bne	.L151		@,
 2402 0b14 04E08EE2 		add	lr, lr, #4	@ n, n,
 2403              	.L138:
 2404              	.LVL152:
 2405              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2406              		.loc 1 182 5 view .LVU619
 2407 0b18 0E0057E1 		cmp	r7, lr	@ npix, n
 2408 0b1c F9FFFFCA 		bgt	.L142		@,
 2409              	.LVL153:
 2410              	.L135:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2411              		.loc 1 182 5 view .LVU620
 2412              	.LBE34:
 2413              	.LBE33:
 2414              	@ armwave.c:449: }
 449:armwave.c     **** }
 2415              		.loc 1 449 1 view .LVU621
 2416 0b20 0CD08DE2 		add	sp, sp, #12	@,,
 2417              		.cfi_remember_state
 2418              		.cfi_def_cfa_offset 36
 2419              		@ sp needed	@
 2420 0b24 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2421              	.LVL154:
 2422              	.L151:
 2423              		.cfi_restore_state
 2424              	.LBB36:
 2425              	.LBB35:
 2426              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2427              		.loc 1 193 19 view .LVU622
 2428 0b28 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2429              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2430              		.loc 1 188 11 view .LVU623
 2431 0b2c 0E60A0E1 		mov	r6, lr	@ ivtmp.102, n
 2432              	.LVL155:
 190:armwave.c     ****                 wave_word >>= 8;
 2433              		.loc 1 190 17 is_stmt 1 view .LVU624
 191:armwave.c     **** 
 2434              		.loc 1 191 17 view .LVU625
 2435              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2436              		.loc 1 191 27 is_stmt 0 view .LVU626
 2437 0b30 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2438              	.LVL156:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2439              		.loc 1 193 17 is_stmt 1 view .LVU627
 2440 0b34 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.102,
 2441              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2442              		.loc 1 193 19 is_stmt 0 view .LVU628
 2443 0b38 0500001A 		bne	.L155		@,
 2444              	.LVL157:
 2445              	.L139:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2446              		.loc 1 193 19 view .LVU629
 2447 0b3c 016086E2 		add	r6, r6, #1	@ ivtmp.102, ivtmp.102,
 2448              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 2449              		.loc 1 189 13 view .LVU630
 2450 0b40 06005EE1 		cmp	lr, r6	@ n, ivtmp.102
 2451 0b44 F3FFFF0A 		beq	.L138		@,
 190:armwave.c     ****                 wave_word >>= 8;
 2452              		.loc 1 190 17 is_stmt 1 view .LVU631
 2453              	.LVL158:
 191:armwave.c     **** 
 2454              		.loc 1 191 17 view .LVU632
 2455              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2456              		.loc 1 193 19 is_stmt 0 view .LVU633
 2457 0b48 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2458              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2459              		.loc 1 191 27 view .LVU634
 2460 0b4c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2461              	.LVL159:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2462              		.loc 1 193 17 is_stmt 1 view .LVU635
 2463              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2464              		.loc 1 193 19 is_stmt 0 view .LVU636
 2465 0b50 F9FFFF0A 		beq	.L139		@,
 2466              	.L155:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2467              		.loc 1 194 21 is_stmt 1 view .LVU637
 2468              	.LVL160:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2469              		.loc 1 195 21 view .LVU638
 196:armwave.c     **** 
 2470              		.loc 1 196 21 view .LVU639
 198:armwave.c     ****                     g = MIN(gg, 255);
 2471              		.loc 1 198 21 view .LVU640
 199:armwave.c     ****                     b = MIN(bb, 255);
 2472              		.loc 1 199 21 view .LVU641
 200:armwave.c     **** 
 2473              		.loc 1 200 21 view .LVU642
 203:armwave.c     **** 
 2474              		.loc 1 203 21 view .LVU643
 2475              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2476              		.loc 1 218 32 is_stmt 0 view .LVU644
 2477 0b54 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.102
 2478              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2479              		.loc 1 219 41 view .LVU645
 2480 0b58 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2481              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2482              		.loc 1 218 40 view .LVU646
 2483 0b5c 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2484              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2485              		.loc 1 219 41 view .LVU647
 2486 0b60 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2487              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2488              		.loc 1 196 55 view .LVU648
 2489 0b64 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2490              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2491              		.loc 1 218 40 view .LVU649
 2492 0b68 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2493              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2494              		.loc 1 219 46 view .LVU650
 2495 0b6c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2496              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2497              		.loc 1 195 55 view .LVU651
 2498 0b70 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2499              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2500              		.loc 1 196 24 view .LVU652
 2501 0b74 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2502              	.LVL161:
 2503              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2504              		.loc 1 200 25 view .LVU653
 2505 0b78 FF0053E3 		cmp	r3, #255	@ bb,
 2506              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2507              		.loc 1 195 24 view .LVU654
 2508 0b7c 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2509              	.LVL162:
 2510              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2511              		.loc 1 200 25 view .LVU655
 2512 0b80 FF30A0A3 		movge	r3, #255	@ bb,
 2513              	.LVL163:
 2514              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2515              		.loc 1 218 40 view .LVU656
 2516 0b84 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2517              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2518              		.loc 1 219 46 view .LVU657
 2519 0b88 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2520              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 2521              		.loc 1 199 25 view .LVU658
 2522 0b8c FF0052E3 		cmp	r2, #255	@ gg,
 2523 0b90 FF20A0A3 		movge	r2, #255	@ gg,
 2524              	.LVL164:
 2525              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2526              		.loc 1 194 55 view .LVU659
 2527 0b94 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2528              	.LVL165:
 2529              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2530              		.loc 1 203 56 view .LVU660
 2531 0b98 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2532              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2533              		.loc 1 203 44 view .LVU661
 2534 0b9c 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2535              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2536              		.loc 1 218 24 view .LVU662
 2537 0ba0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2538              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2539              		.loc 1 194 24 view .LVU663
 2540 0ba4 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2541              	.LVL166:
 2542              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2543              		.loc 1 203 56 view .LVU664
 2544 0ba8 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2545              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2546              		.loc 1 203 44 view .LVU665
 2547 0bac FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2548              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2549              		.loc 1 198 25 view .LVU666
 2550 0bb0 FF0051E3 		cmp	r1, #255	@ rr,
 2551              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2552              		.loc 1 203 51 view .LVU667
 2553 0bb4 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2554              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2555              		.loc 1 198 25 view .LVU668
 2556 0bb8 FF10A0A3 		movge	r1, #255	@ rr,
 2557              	.LVL167:
 2558              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2559              		.loc 1 218 24 view .LVU669
 2560 0bbc 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2561              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2562              		.loc 1 219 24 view .LVU670
 2563 0bc0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2564              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2565              		.loc 1 203 62 view .LVU671
 2566 0bc4 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2567 0bc8 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2568              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2569              		.loc 1 203 26 view .LVU672
 2570 0bcc FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2571              	.LVL168:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2572              		.loc 1 217 21 is_stmt 1 view .LVU673
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2573              		.loc 1 218 21 view .LVU674
 219:armwave.c     ****                     xx = (nsub >> 8);
 2574              		.loc 1 219 21 view .LVU675
 220:armwave.c     **** 
 2575              		.loc 1 220 21 view .LVU676
 2576              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 2577              		.loc 1 220 32 is_stmt 0 view .LVU677
 2578 0bd0 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.102,
 2579              	.LVL169:
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2580              		.loc 1 222 21 is_stmt 1 view .LVU678
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2581              		.loc 1 222 21 is_stmt 0 view .LVU679
 2582 0bd4 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2583              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2584              		.loc 1 219 24 view .LVU680
 2585 0bd8 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2586              	.LVL170:
 2587              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2588              		.loc 1 222 21 view .LVU681
 2589 0bdc 020054E1 		cmp	r4, r2	@ yy, ye
 2590 0be0 D5FFFF2A 		bcs	.L139		@,
 2591 0be4 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2592              	.LVL171:
 2593              	.L140:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2594              		.loc 1 223 25 is_stmt 1 view .LVU682
 224:armwave.c     ****                     }
 2595              		.loc 1 224 25 view .LVU683
 2596              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2597              		.loc 1 223 43 is_stmt 0 view .LVU684
 2598 0be8 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2599              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2600              		.loc 1 222 21 view .LVU685
 2601 0bec 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2602              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2603              		.loc 1 224 43 view .LVU686
 2604 0bf0 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2605              	.LVL172:
 2606              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2607              		.loc 1 222 42 view .LVU687
 2608 0bf4 014084E2 		add	r4, r4, #1	@ yy, yy,
 2609              	.LVL173:
 2610              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2611              		.loc 1 222 21 view .LVU688
 2612 0bf8 040050E1 		cmp	r0, r4	@ ye, yy
 2613              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2614              		.loc 1 224 53 view .LVU689
 2615 0bfc 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2616              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2617              		.loc 1 222 21 view .LVU690
 2618 0c00 F8FFFF1A 		bne	.L140		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2619              		.loc 1 222 21 view .LVU691
 2620 0c04 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2621 0c08 CBFFFFEA 		b	.L139		@
 2622              	.LVL174:
 2623              	.L154:
 177:armwave.c     **** 
 2624              		.loc 1 177 5 is_stmt 1 view .LVU692
 2625 0c0c 10309FE5 		ldr	r3, .L156+4	@,
 2626 0c10 B120A0E3 		mov	r2, #177	@,
 2627 0c14 0C109FE5 		ldr	r1, .L156+8	@,
 2628 0c18 0C009FE5 		ldr	r0, .L156+12	@,
 2629 0c1c FEFFFFEB 		bl	__assert_fail		@
 2630              	.LVL175:
 2631              	.L157:
 2632              		.align	2
 2633              	.L156:
 2634 0c20 00000000 		.word	g_armwave_state
 2635 0c24 00000000 		.word	.LANCHOR0
 2636 0c28 54000000 		.word	.LC3
 2637 0c2c 60000000 		.word	.LC4
 2638              	.LBE35:
 2639              	.LBE36:
 2640              		.cfi_endproc
 2641              	.LFE70:
 2643              		.align	2
 2644              		.global	armwave_test_dump_buffer_to_ppm
 2645              		.syntax unified
 2646              		.arm
 2647              		.fpu vfp
 2649              	armwave_test_dump_buffer_to_ppm:
 2650              	.LVL176:
 2651              	.LFB71:
 450:armwave.c     **** 
 451:armwave.c     **** /*
 452:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 453:armwave.c     ****  */
 454:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 455:armwave.c     **** {
 2652              		.loc 1 455 1 view -0
 2653              		.cfi_startproc
 2654              		@ args = 0, pretend = 0, frame = 0
 2655              		@ frame_needed = 0, uses_anonymous_args = 0
 2656              		@ link register save eliminated.
 456:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2657              		.loc 1 456 5 view .LVU694
 2658 0c30 08309FE5 		ldr	r3, .L159	@ tmp112,
 2659 0c34 0010A0E1 		mov	r1, r0	@, fn
 2660 0c38 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2661              	.LVL177:
 2662              		.loc 1 456 5 is_stmt 0 view .LVU695
 2663 0c3c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2664              	.LVL178:
 2665              	.L160:
 2666              		.loc 1 456 5 view .LVU696
 2667              		.align	2
 2668              	.L159:
 2669 0c40 00000000 		.word	g_armwave_state
 2670              		.cfi_endproc
 2671              	.LFE71:
 2673              		.align	2
 2674              		.global	armwave_test_fill_gdkbuf
 2675              		.syntax unified
 2676              		.arm
 2677              		.fpu vfp
 2679              	armwave_test_fill_gdkbuf:
 2680              	.LVL179:
 2681              	.LFB72:
 457:armwave.c     **** }
 458:armwave.c     **** 
 459:armwave.c     **** /*
 460:armwave.c     ****  * Render GDK buffer with test funtionry.
 461:armwave.c     ****  */
 462:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 463:armwave.c     **** {
 2682              		.loc 1 463 1 is_stmt 1 view -0
 2683              		.cfi_startproc
 2684              		@ args = 0, pretend = 0, frame = 8
 2685              		@ frame_needed = 0, uses_anonymous_args = 0
 464:armwave.c     ****     //PyObject *mv;
 465:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 466:armwave.c     **** 
 467:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 468:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2686              		.loc 1 468 5 view .LVU698
 2687              	@ armwave.c:468:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2688              		.loc 1 468 11 is_stmt 0 view .LVU699
 2689 0c44 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2690              	@ armwave.c:463: {
 463:armwave.c     ****     //PyObject *mv;
 2691              		.loc 1 463 1 view .LVU700
 2692 0c48 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2693              		.cfi_def_cfa_offset 36
 2694              		.cfi_offset 4, -36
 2695              		.cfi_offset 5, -32
 2696              		.cfi_offset 6, -28
 2697              		.cfi_offset 7, -24
 2698              		.cfi_offset 8, -20
 2699              		.cfi_offset 9, -16
 2700              		.cfi_offset 10, -12
 2701              		.cfi_offset 11, -8
 2702              		.cfi_offset 14, -4
 2703 0c4c 0CD04DE2 		sub	sp, sp, #12	@,,
 2704              		.cfi_def_cfa_offset 48
 2705              	.LBB39:
 2706              	.LBB40:
 2707              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2708              		.loc 1 173 15 view .LVU701
 2709 0c50 48519FE5 		ldr	r5, .L182	@ tmp206,
 2710              	.LBE40:
 2711              	.LBE39:
 2712              	@ armwave.c:468:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2713              		.loc 1 468 11 view .LVU702
 2714 0c54 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2715              	.LVL180:
 469:armwave.c     ****     
 470:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 471:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2716              		.loc 1 471 5 is_stmt 1 view .LVU703
 2717              	.LBB43:
 2718              	.LBI39:
 166:armwave.c     **** {
 2719              		.loc 1 166 6 view .LVU704
 2720              	.LBB41:
 168:armwave.c     ****     // uint32_t ysub;
 2721              		.loc 1 168 5 view .LVU705
 170:armwave.c     ****     uint8_t r, g, b, value; 
 2722              		.loc 1 170 5 view .LVU706
 171:armwave.c     ****     // uint8_t row;
 2723              		.loc 1 171 5 view .LVU707
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2724              		.loc 1 173 5 view .LVU708
 2725              	@ armwave.c:177:     assert(out_buffer != NULL);
 177:armwave.c     **** 
 2726              		.loc 1 177 5 is_stmt 0 view .LVU709
 2727 0c58 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2728              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2729              		.loc 1 173 15 view .LVU710
 2730 0c5c 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2731              	.LVL181:
 174:armwave.c     ****     uint32_t offset;
 2732              		.loc 1 174 5 is_stmt 1 view .LVU711
 175:armwave.c     **** 
 2733              		.loc 1 175 5 view .LVU712
 177:armwave.c     **** 
 2734              		.loc 1 177 5 view .LVU713
 2735 0c60 4900000A 		beq	.L180		@,
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2736              		.loc 1 179 5 view .LVU714
 2737              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2738              		.loc 1 179 10 is_stmt 0 view .LVU715
 2739 0c64 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2740 0c68 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2741              	.LVL182:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2742              		.loc 1 182 5 is_stmt 1 view .LVU716
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2743              		.loc 1 182 5 is_stmt 0 view .LVU717
 2744 0c6c 000057E3 		cmp	r7, #0	@ npix,
 2745 0c70 0A0000DA 		ble	.L161		@,
 2746              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2747              		.loc 1 194 52 view .LVU718
 2748 0c74 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2749              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2750              		.loc 1 195 52 view .LVU719
 2751 0c78 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2752              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2753              		.loc 1 196 52 view .LVU720
 2754 0c7c F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2755              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2756              		.loc 1 218 57 view .LVU721
 2757 0c80 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2758              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2759              		.loc 1 182 11 view .LVU722
 2760 0c84 00C0A0E3 		mov	ip, #0	@ n,
 2761              	.LVL183:
 2762              	.L168:
 186:armwave.c     **** 
 2763              		.loc 1 186 9 is_stmt 1 view .LVU723
 2764              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 2765              		.loc 1 186 19 is_stmt 0 view .LVU724
 2766 0c88 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2767              	.LVL184:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2768              		.loc 1 188 9 is_stmt 1 view .LVU725
 2769              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2770              		.loc 1 188 11 is_stmt 0 view .LVU726
 2771 0c8c 000050E3 		cmp	r0, #0	@ wave_word,
 2772 0c90 0400001A 		bne	.L177		@,
 2773 0c94 04C08CE2 		add	ip, ip, #4	@ n, n,
 2774              	.L164:
 2775              	.LVL185:
 2776              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2777              		.loc 1 182 5 view .LVU727
 2778 0c98 0C0057E1 		cmp	r7, ip	@ npix, n
 2779 0c9c F9FFFFCA 		bgt	.L168		@,
 2780              	.LVL186:
 2781              	.L161:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2782              		.loc 1 182 5 view .LVU728
 2783              	.LBE41:
 2784              	.LBE43:
 2785              	@ armwave.c:472: }
 472:armwave.c     **** }
 2786              		.loc 1 472 1 view .LVU729
 2787 0ca0 0CD08DE2 		add	sp, sp, #12	@,,
 2788              		.cfi_remember_state
 2789              		.cfi_def_cfa_offset 36
 2790              		@ sp needed	@
 2791 0ca4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2792              	.LVL187:
 2793              	.L177:
 2794              		.cfi_restore_state
 2795              	.LBB44:
 2796              	.LBB42:
 2797              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2798              		.loc 1 193 19 view .LVU730
 2799 0ca8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2800              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2801              		.loc 1 188 11 view .LVU731
 2802 0cac 0C60A0E1 		mov	r6, ip	@ ivtmp.118, n
 2803              	.LVL188:
 190:armwave.c     ****                 wave_word >>= 8;
 2804              		.loc 1 190 17 is_stmt 1 view .LVU732
 191:armwave.c     **** 
 2805              		.loc 1 191 17 view .LVU733
 2806              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2807              		.loc 1 191 27 is_stmt 0 view .LVU734
 2808 0cb0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2809              	.LVL189:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2810              		.loc 1 193 17 is_stmt 1 view .LVU735
 2811 0cb4 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.118,
 2812              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2813              		.loc 1 193 19 is_stmt 0 view .LVU736
 2814 0cb8 0500001A 		bne	.L181		@,
 2815              	.LVL190:
 2816              	.L165:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2817              		.loc 1 193 19 view .LVU737
 2818 0cbc 016086E2 		add	r6, r6, #1	@ ivtmp.118, ivtmp.118,
 2819              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 2820              		.loc 1 189 13 view .LVU738
 2821 0cc0 06005CE1 		cmp	ip, r6	@ n, ivtmp.118
 2822 0cc4 F3FFFF0A 		beq	.L164		@,
 190:armwave.c     ****                 wave_word >>= 8;
 2823              		.loc 1 190 17 is_stmt 1 view .LVU739
 2824              	.LVL191:
 191:armwave.c     **** 
 2825              		.loc 1 191 17 view .LVU740
 2826              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2827              		.loc 1 193 19 is_stmt 0 view .LVU741
 2828 0cc8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2829              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2830              		.loc 1 191 27 view .LVU742
 2831 0ccc 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2832              	.LVL192:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2833              		.loc 1 193 17 is_stmt 1 view .LVU743
 2834              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2835              		.loc 1 193 19 is_stmt 0 view .LVU744
 2836 0cd0 F9FFFF0A 		beq	.L165		@,
 2837              	.L181:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2838              		.loc 1 194 21 is_stmt 1 view .LVU745
 2839              	.LVL193:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2840              		.loc 1 195 21 view .LVU746
 196:armwave.c     **** 
 2841              		.loc 1 196 21 view .LVU747
 198:armwave.c     ****                     g = MIN(gg, 255);
 2842              		.loc 1 198 21 view .LVU748
 199:armwave.c     ****                     b = MIN(bb, 255);
 2843              		.loc 1 199 21 view .LVU749
 200:armwave.c     **** 
 2844              		.loc 1 200 21 view .LVU750
 203:armwave.c     **** 
 2845              		.loc 1 203 21 view .LVU751
 2846              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2847              		.loc 1 218 32 is_stmt 0 view .LVU752
 2848 0cd4 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.118
 2849              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2850              		.loc 1 219 41 view .LVU753
 2851 0cd8 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2852              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2853              		.loc 1 218 40 view .LVU754
 2854 0cdc 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2855              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2856              		.loc 1 219 41 view .LVU755
 2857 0ce0 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2858              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2859              		.loc 1 196 55 view .LVU756
 2860 0ce4 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2861              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2862              		.loc 1 218 40 view .LVU757
 2863 0ce8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2864              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2865              		.loc 1 219 46 view .LVU758
 2866 0cec C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2867              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2868              		.loc 1 195 55 view .LVU759
 2869 0cf0 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2870              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2871              		.loc 1 196 24 view .LVU760
 2872 0cf4 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2873              	.LVL194:
 2874              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2875              		.loc 1 200 25 view .LVU761
 2876 0cf8 FF0053E3 		cmp	r3, #255	@ bb,
 2877              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2878              		.loc 1 195 24 view .LVU762
 2879 0cfc 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2880              	.LVL195:
 2881              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2882              		.loc 1 200 25 view .LVU763
 2883 0d00 FF30A0A3 		movge	r3, #255	@ bb,
 2884              	.LVL196:
 2885              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2886              		.loc 1 218 40 view .LVU764
 2887 0d04 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2888              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2889              		.loc 1 219 46 view .LVU765
 2890 0d08 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2891              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 2892              		.loc 1 199 25 view .LVU766
 2893 0d0c FF0052E3 		cmp	r2, #255	@ gg,
 2894 0d10 FF20A0A3 		movge	r2, #255	@ gg,
 2895              	.LVL197:
 2896              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2897              		.loc 1 194 55 view .LVU767
 2898 0d14 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2899              	.LVL198:
 2900              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2901              		.loc 1 203 56 view .LVU768
 2902 0d18 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2903              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2904              		.loc 1 203 44 view .LVU769
 2905 0d1c 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2906              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2907              		.loc 1 218 24 view .LVU770
 2908 0d20 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2909              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2910              		.loc 1 194 24 view .LVU771
 2911 0d24 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2912              	.LVL199:
 2913              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2914              		.loc 1 203 56 view .LVU772
 2915 0d28 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2916              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2917              		.loc 1 203 44 view .LVU773
 2918 0d2c FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2919              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2920              		.loc 1 198 25 view .LVU774
 2921 0d30 FF0051E3 		cmp	r1, #255	@ rr,
 2922              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2923              		.loc 1 203 51 view .LVU775
 2924 0d34 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2925              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2926              		.loc 1 198 25 view .LVU776
 2927 0d38 FF10A0A3 		movge	r1, #255	@ rr,
 2928              	.LVL200:
 2929              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2930              		.loc 1 218 24 view .LVU777
 2931 0d3c 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2932              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2933              		.loc 1 219 24 view .LVU778
 2934 0d40 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2935              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2936              		.loc 1 203 62 view .LVU779
 2937 0d44 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2938 0d48 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2939              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2940              		.loc 1 203 26 view .LVU780
 2941 0d4c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2942              	.LVL201:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2943              		.loc 1 217 21 is_stmt 1 view .LVU781
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2944              		.loc 1 218 21 view .LVU782
 219:armwave.c     ****                     xx = (nsub >> 8);
 2945              		.loc 1 219 21 view .LVU783
 220:armwave.c     **** 
 2946              		.loc 1 220 21 view .LVU784
 2947              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 2948              		.loc 1 220 32 is_stmt 0 view .LVU785
 2949 0d50 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.118,
 2950              	.LVL202:
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2951              		.loc 1 222 21 is_stmt 1 view .LVU786
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2952              		.loc 1 222 21 is_stmt 0 view .LVU787
 2953 0d54 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2954              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2955              		.loc 1 219 24 view .LVU788
 2956 0d58 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2957              	.LVL203:
 2958              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2959              		.loc 1 222 21 view .LVU789
 2960 0d5c 02005EE1 		cmp	lr, r2	@ yy, ye
 2961 0d60 D5FFFF2A 		bcs	.L165		@,
 2962 0d64 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2963              	.LVL204:
 2964              	.L166:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2965              		.loc 1 223 25 is_stmt 1 view .LVU790
 224:armwave.c     ****                     }
 2966              		.loc 1 224 25 view .LVU791
 2967              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2968              		.loc 1 223 43 is_stmt 0 view .LVU792
 2969 0d68 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2970              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2971              		.loc 1 222 21 view .LVU793
 2972 0d6c 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2973              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2974              		.loc 1 224 43 view .LVU794
 2975 0d70 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2976              	.LVL205:
 2977              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2978              		.loc 1 222 42 view .LVU795
 2979 0d74 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2980              	.LVL206:
 2981              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2982              		.loc 1 222 21 view .LVU796
 2983 0d78 0E0050E1 		cmp	r0, lr	@ ye, yy
 2984              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2985              		.loc 1 224 53 view .LVU797
 2986 0d7c 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 2987              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2988              		.loc 1 222 21 view .LVU798
 2989 0d80 F8FFFF1A 		bne	.L166		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2990              		.loc 1 222 21 view .LVU799
 2991 0d84 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2992 0d88 CBFFFFEA 		b	.L165		@
 2993              	.LVL207:
 2994              	.L180:
 177:armwave.c     **** 
 2995              		.loc 1 177 5 is_stmt 1 view .LVU800
 2996 0d8c 10309FE5 		ldr	r3, .L182+4	@,
 2997 0d90 B120A0E3 		mov	r2, #177	@,
 2998 0d94 0C109FE5 		ldr	r1, .L182+8	@,
 2999 0d98 0C009FE5 		ldr	r0, .L182+12	@,
 3000              	.LVL208:
 177:armwave.c     **** 
 3001              		.loc 1 177 5 is_stmt 0 view .LVU801
 3002 0d9c FEFFFFEB 		bl	__assert_fail		@
 3003              	.LVL209:
 3004              	.L183:
 3005              		.align	2
 3006              	.L182:
 3007 0da0 00000000 		.word	g_armwave_state
 3008 0da4 00000000 		.word	.LANCHOR0
 3009 0da8 54000000 		.word	.LC3
 3010 0dac 60000000 		.word	.LC4
 3011              	.LBE42:
 3012              	.LBE44:
 3013              		.cfi_endproc
 3014              	.LFE72:
 3016              		.align	2
 3017              		.global	armwave_test_buffer_alloc
 3018              		.syntax unified
 3019              		.arm
 3020              		.fpu vfp
 3022              	armwave_test_buffer_alloc:
 3023              	.LVL210:
 3024              	.LFB73:
 473:armwave.c     **** 
 474:armwave.c     **** /*
 475:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 476:armwave.c     ****  */
 477:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 478:armwave.c     **** {
 3025              		.loc 1 478 1 is_stmt 1 view -0
 3026              		.cfi_startproc
 3027              		@ args = 0, pretend = 0, frame = 0
 3028              		@ frame_needed = 0, uses_anonymous_args = 0
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3029              		.loc 1 479 5 view .LVU803
 3030              	@ armwave.c:478: {
 478:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3031              		.loc 1 478 1 is_stmt 0 view .LVU804
 3032 0db0 70402DE9 		push	{r4, r5, r6, lr}	@
 3033              		.cfi_def_cfa_offset 16
 3034              		.cfi_offset 4, -16
 3035              		.cfi_offset 5, -12
 3036              		.cfi_offset 6, -8
 3037              		.cfi_offset 14, -4
 3038              	@ armwave.c:478: {
 478:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3039              		.loc 1 478 1 view .LVU805
 3040 0db4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3041              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 3042              		.loc 1 479 23 view .LVU806
 3043 0db8 44409FE5 		ldr	r4, .L191	@ tmp128,
 3044 0dbc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3045              	.LVL211:
 3046              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 3047              		.loc 1 479 7 view .LVU807
 3048 0dc0 000050E3 		cmp	r0, #0	@ _1,
 3049 0dc4 0000000A 		beq	.L185		@,
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3050              		.loc 1 480 9 is_stmt 1 view .LVU808
 3051 0dc8 FEFFFFEB 		bl	free		@
 3052              	.LVL212:
 3053              	.L185:
 481:armwave.c     ****     }
 482:armwave.c     **** 
 483:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 484:armwave.c     **** 
 485:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3054              		.loc 1 485 5 view .LVU809
 3055              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3056              		.loc 1 485 75 is_stmt 0 view .LVU810
 3057 0dcc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3058 0dd0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3059              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3060              		.loc 1 485 40 view .LVU811
 3061 0dd4 0610A0E1 		mov	r1, r6	@, nsets
 3062              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3063              		.loc 1 485 75 view .LVU812
 3064 0dd8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3065              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3066              		.loc 1 485 40 view .LVU813
 3067 0ddc 0500A0E1 		mov	r0, r5	@, _4
 3068 0de0 FEFFFFEB 		bl	calloc		@
 3069              	.LVL213:
 3070              	@ armwave.c:487:     if(g_armwave_state.test_wave_buffer == NULL) {
 486:armwave.c     **** 
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3071              		.loc 1 487 7 view .LVU814
 3072 0de4 000050E3 		cmp	r0, #0	@ tmp124,
 3073              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 3074              		.loc 1 485 38 view .LVU815
 3075 0de8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3076              		.loc 1 487 5 is_stmt 1 view .LVU816
 3077              	@ armwave.c:487:     if(g_armwave_state.test_wave_buffer == NULL) {
 3078              		.loc 1 487 7 is_stmt 0 view .LVU817
 3079 0dec 7080BD18 		popne	{r4, r5, r6, pc}	@
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3080              		.loc 1 488 9 is_stmt 1 view .LVU818
 3081 0df0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3082 0df4 0620A0E1 		mov	r2, r6	@, nsets
 3083 0df8 08009FE5 		ldr	r0, .L191+4	@,
 3084              	@ armwave.c:492: }
 489:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 490:armwave.c     ****         return;
 491:armwave.c     ****     }
 492:armwave.c     **** }
 3085              		.loc 1 492 1 is_stmt 0 view .LVU819
 3086 0dfc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3087              		.cfi_restore 14
 3088              		.cfi_restore 6
 3089              		.cfi_restore 5
 3090              		.cfi_restore 4
 3091              		.cfi_def_cfa_offset 0
 3092              	.LVL214:
 3093              	@ armwave.c:488:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3094              		.loc 1 488 9 view .LVU820
 3095 0e00 FEFFFFEA 		b	printf		@
 3096              	.LVL215:
 3097              	.L192:
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3098              		.loc 1 488 9 view .LVU821
 3099              		.align	2
 3100              	.L191:
 3101 0e04 00000000 		.word	g_armwave_state
 3102 0e08 F0010000 		.word	.LC19
 3103              		.cfi_endproc
 3104              	.LFE73:
 3106              		.align	2
 3107              		.global	armwave_fill_pixbuf_into_pybuffer
 3108              		.syntax unified
 3109              		.arm
 3110              		.fpu vfp
 3112              	armwave_fill_pixbuf_into_pybuffer:
 3113              	.LVL216:
 3114              	.LFB74:
 493:armwave.c     **** 
 494:armwave.c     **** /*
 495:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 496:armwave.c     ****  */
 497:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 498:armwave.c     **** {
 3115              		.loc 1 498 1 is_stmt 1 view -0
 3116              		.cfi_startproc
 3117              		@ args = 0, pretend = 0, frame = 48
 3118              		@ frame_needed = 0, uses_anonymous_args = 0
 499:armwave.c     ****     Py_buffer buffer;
 3119              		.loc 1 499 5 view .LVU823
 500:armwave.c     ****     int ret;
 3120              		.loc 1 500 5 view .LVU824
 501:armwave.c     **** 
 502:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 503:armwave.c     **** 
 504:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3121              		.loc 1 504 5 view .LVU825
 3122              	@ armwave.c:498: {
 498:armwave.c     ****     Py_buffer buffer;
 3123              		.loc 1 498 1 is_stmt 0 view .LVU826
 3124 0e0c 04E02DE5 		str	lr, [sp, #-4]!	@,
 3125              		.cfi_def_cfa_offset 4
 3126              		.cfi_offset 14, -4
 3127 0e10 34D04DE2 		sub	sp, sp, #52	@,,
 3128              		.cfi_def_cfa_offset 56
 3129              	@ armwave.c:504:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3130              		.loc 1 504 11 view .LVU827
 3131 0e14 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3132 0e18 0120A0E3 		mov	r2, #1	@,
 3133 0e1c FEFFFFEB 		bl	PyObject_GetBuffer		@
 3134              	.LVL217:
 505:armwave.c     **** 
 506:armwave.c     ****     if(ret != 0) {
 3135              		.loc 1 506 5 is_stmt 1 view .LVU828
 3136              	@ armwave.c:506:     if(ret != 0) {
 3137              		.loc 1 506 7 is_stmt 0 view .LVU829
 3138 0e20 000050E3 		cmp	r0, #0	@,
 3139 0e24 0A00001A 		bne	.L197		@,
 507:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 508:armwave.c     ****         Py_RETURN_FALSE;
 509:armwave.c     ****     }
 510:armwave.c     **** 
 511:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 512:armwave.c     **** 
 513:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3140              		.loc 1 513 5 is_stmt 1 view .LVU830
 3141 0e28 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3142              	.LVL218:
 3143              		.loc 1 513 5 is_stmt 0 view .LVU831
 3144 0e2c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3145              	.LVL219:
 514:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 515:armwave.c     **** 
 516:armwave.c     ****     PyBuffer_Release(&buffer);
 3146              		.loc 1 516 5 is_stmt 1 view .LVU832
 3147 0e30 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3148 0e34 FEFFFFEB 		bl	PyBuffer_Release		@
 3149              	.LVL220:
 517:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 518:armwave.c     **** 
 519:armwave.c     ****     Py_RETURN_TRUE;
 3150              		.loc 1 519 5 view .LVU833
 3151              	.LBB45:
 3152              	.LBI45:
 3153              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3154              		.loc 2 456 20 view .LVU834
 3155              	.LBB46:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3156              		.loc 2 458 21 view .LVU835
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3157              		.loc 2 459 5 view .LVU836
 3158              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3159              		.loc 2 459 18 is_stmt 0 view .LVU837
 3160 0e38 38309FE5 		ldr	r3, .L198	@ tmp126,
 3161              	.LBE46:
 3162              	.LBE45:
 3163              	@ armwave.c:519:     Py_RETURN_TRUE;
 3164              		.loc 1 519 5 view .LVU838
 3165 0e3c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3166              	.LBB48:
 3167              	.LBB47:
 3168              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3169              		.loc 2 459 18 view .LVU839
 3170 0e40 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3171 0e44 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3172 0e48 002083E5 		str	r2, [r3]	@ tmp128,
 3173              	.LBE47:
 3174              	.LBE48:
 3175              	@ armwave.c:520: }
 520:armwave.c     **** }
 3176              		.loc 1 520 1 view .LVU840
 3177 0e4c 34D08DE2 		add	sp, sp, #52	@,,
 3178              		.cfi_remember_state
 3179              		.cfi_def_cfa_offset 4
 3180              		@ sp needed	@
 3181 0e50 04F09DE4 		ldr	pc, [sp], #4	@
 3182              	.LVL221:
 3183              	.L197:
 3184              		.cfi_restore_state
 507:armwave.c     ****         Py_RETURN_FALSE;
 3185              		.loc 1 507 9 is_stmt 1 view .LVU841
 3186 0e54 20009FE5 		ldr	r0, .L198+4	@,
 3187              	.LVL222:
 507:armwave.c     ****         Py_RETURN_FALSE;
 3188              		.loc 1 507 9 is_stmt 0 view .LVU842
 3189 0e58 FEFFFFEB 		bl	puts		@
 3190              	.LVL223:
 508:armwave.c     ****     }
 3191              		.loc 1 508 9 is_stmt 1 view .LVU843
 3192              	.LBB49:
 3193              	.LBI49:
 456:/usr/local/include/python3.8/object.h **** {
 3194              		.loc 2 456 20 view .LVU844
 3195              	.LBB50:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3196              		.loc 2 458 21 view .LVU845
 3197              		.loc 2 459 5 view .LVU846
 3198              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3199              		.loc 2 459 18 is_stmt 0 view .LVU847
 3200 0e5c 1C309FE5 		ldr	r3, .L198+8	@ tmp120,
 3201              	.LBE50:
 3202              	.LBE49:
 3203              	@ armwave.c:508:         Py_RETURN_FALSE;
 508:armwave.c     ****     }
 3204              		.loc 1 508 9 view .LVU848
 3205 0e60 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3206              	.LBB52:
 3207              	.LBB51:
 3208              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3209              		.loc 2 459 18 view .LVU849
 3210 0e64 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3211 0e68 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3212 0e6c 002083E5 		str	r2, [r3]	@ tmp122,
 3213              	.LBE51:
 3214              	.LBE52:
 3215              	@ armwave.c:520: }
 3216              		.loc 1 520 1 view .LVU850
 3217 0e70 34D08DE2 		add	sp, sp, #52	@,,
 3218              		.cfi_def_cfa_offset 4
 3219              		@ sp needed	@
 3220 0e74 04F09DE4 		ldr	pc, [sp], #4	@
 3221              	.L199:
 3222              		.align	2
 3223              	.L198:
 3224 0e78 00000000 		.word	_Py_TrueStruct
 3225 0e7c 44020000 		.word	.LC20
 3226 0e80 00000000 		.word	_Py_FalseStruct
 3227              		.cfi_endproc
 3228              	.LFE74:
 3230              		.align	2
 3231              		.global	armwave_test_create_am_sine
 3232              		.syntax unified
 3233              		.arm
 3234              		.fpu vfp
 3236              	armwave_test_create_am_sine:
 3237              	.LVL224:
 3238              	.LFB75:
 521:armwave.c     **** 
 522:armwave.c     **** /*
 523:armwave.c     ****  * Make a test AM waveform for render tests.
 524:armwave.c     ****  *
 525:armwave.c     ****  * @param   mod                     modulation depth
 526:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 527:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 528:armwave.c     ****  */
 529:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 530:armwave.c     **** {
 3239              		.loc 1 530 1 is_stmt 1 view -0
 3240              		.cfi_startproc
 3241              		@ args = 0, pretend = 0, frame = 8
 3242              		@ frame_needed = 0, uses_anonymous_args = 0
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 3243              		.loc 1 531 5 view .LVU852
 532:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3244              		.loc 1 532 5 view .LVU853
 3245              	@ armwave.c:530: {
 530:armwave.c     ****     float v, noise, xnoise, mod_val;
 3246              		.loc 1 530 1 is_stmt 0 view .LVU854
 3247 0e84 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3248              		.cfi_def_cfa_offset 32
 3249              		.cfi_offset 4, -32
 3250              		.cfi_offset 5, -28
 3251              		.cfi_offset 6, -24
 3252              		.cfi_offset 7, -20
 3253              		.cfi_offset 8, -16
 3254              		.cfi_offset 9, -12
 3255              		.cfi_offset 10, -8
 3256              		.cfi_offset 14, -4
 3257              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3258              		.loc 1 532 38 view .LVU855
 3259 0e88 7A7A9FED 		vldr.32	s14, .L231	@ tmp180,
 3260              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3261              		.loc 1 532 55 view .LVU856
 3262 0e8c 00529FE5 		ldr	r5, .L231+28	@ tmp250,
 3263              	@ armwave.c:530: {
 530:armwave.c     ****     float v, noise, xnoise, mod_val;
 3264              		.loc 1 530 1 view .LVU857
 3265 0e90 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3266              		.cfi_def_cfa_offset 80
 3267              		.cfi_offset 80, -80
 3268              		.cfi_offset 81, -76
 3269              		.cfi_offset 82, -72
 3270              		.cfi_offset 83, -68
 3271              		.cfi_offset 84, -64
 3272              		.cfi_offset 85, -60
 3273              		.cfi_offset 86, -56
 3274              		.cfi_offset 87, -52
 3275              		.cfi_offset 88, -48
 3276              		.cfi_offset 89, -44
 3277              		.cfi_offset 90, -40
 3278              		.cfi_offset 91, -36
 3279 0e94 0090A0E1 		mov	r9, r0	@ sets, sets
 3280              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3281              		.loc 1 532 38 view .LVU858
 3282 0e98 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3283              	@ armwave.c:536:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 533:armwave.c     ****     int s, set_offset = 0;
 534:armwave.c     ****     int w, x;
 535:armwave.c     **** 
 536:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3284              		.loc 1 536 70 view .LVU859
 3285 0e9c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3286 0ea0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3287              	.LBB55:
 3288              	.LBB56:
 3289              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3290              		.loc 1 479 23 view .LVU860
 3291 0ea4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3292              	.LVL225:
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3293              		.loc 1 479 23 view .LVU861
 3294              	.LBE56:
 3295              	.LBE55:
 3296              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 532:armwave.c     ****     int s, set_offset = 0;
 3297              		.loc 1 532 38 view .LVU862
 3298 0ea8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3299              	@ armwave.c:536:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3300              		.loc 1 536 70 view .LVU863
 3301 0eac 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3302              	@ armwave.c:530: {
 530:armwave.c     ****     float v, noise, xnoise, mod_val;
 3303              		.loc 1 530 1 view .LVU864
 3304 0eb0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3305              	.LBB60:
 3306              	.LBB57:
 3307              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3308              		.loc 1 479 7 view .LVU865
 3309 0eb4 000050E3 		cmp	r0, #0	@ _82,
 3310              	.LBE57:
 3311              	.LBE60:
 3312              	@ armwave.c:530: {
 530:armwave.c     ****     float v, noise, xnoise, mod_val;
 3313              		.loc 1 530 1 view .LVU866
 3314 0eb8 08D04DE2 		sub	sp, sp, #8	@,,
 3315              		.cfi_def_cfa_offset 88
 3316              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_nsets = sets;
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3317              		.loc 1 537 44 view .LVU867
 3318 0ebc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3319              	@ armwave.c:536:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 536:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3320              		.loc 1 536 45 view .LVU868
 3321 0ec0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3322              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 532:armwave.c     ****     int s, set_offset = 0;
 3323              		.loc 1 532 38 view .LVU869
 3324 0ec4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3325              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 532:armwave.c     ****     int s, set_offset = 0;
 3326              		.loc 1 532 11 view .LVU870
 3327 0ec8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3328              	.LVL226:
 533:armwave.c     ****     int w, x;
 3329              		.loc 1 533 5 is_stmt 1 view .LVU871
 534:armwave.c     **** 
 3330              		.loc 1 534 5 view .LVU872
 536:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3331              		.loc 1 536 5 view .LVU873
 3332              		.loc 1 537 5 view .LVU874
 538:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3333              		.loc 1 538 5 view .LVU875
 3334              	.LBB61:
 3335              	.LBI55:
 477:armwave.c     **** {
 3336              		.loc 1 477 6 view .LVU876
 3337              	.LBB58:
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3338              		.loc 1 479 5 view .LVU877
 3339              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3340              		.loc 1 479 7 is_stmt 0 view .LVU878
 3341 0ecc 0000000A 		beq	.L201		@,
 480:armwave.c     ****     }
 3342              		.loc 1 480 9 is_stmt 1 view .LVU879
 3343 0ed0 FEFFFFEB 		bl	free		@
 3344              	.LVL227:
 3345              	.L201:
 485:armwave.c     **** 
 3346              		.loc 1 485 5 view .LVU880
 3347              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 3348              		.loc 1 485 75 is_stmt 0 view .LVU881
 3349 0ed4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3350 0ed8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3351              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 3352              		.loc 1 485 40 view .LVU882
 3353 0edc 0910A0E1 		mov	r1, r9	@, sets
 3354              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 3355              		.loc 1 485 75 view .LVU883
 3356 0ee0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3357              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 3358              		.loc 1 485 40 view .LVU884
 3359 0ee4 0400A0E1 		mov	r0, r4	@, _85
 3360 0ee8 FEFFFFEB 		bl	calloc		@
 3361              	.LVL228:
 3362              	@ armwave.c:487:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3363              		.loc 1 487 7 view .LVU885
 3364 0eec 000050E3 		cmp	r0, #0	@ tmp191,
 3365              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 3366              		.loc 1 485 38 view .LVU886
 3367 0ef0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 487:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3368              		.loc 1 487 5 is_stmt 1 view .LVU887
 3369              	@ armwave.c:487:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3370              		.loc 1 487 7 is_stmt 0 view .LVU888
 3371 0ef4 5A00000A 		beq	.L230		@,
 3372              	.L202:
 3373              	.LVL229:
 487:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3374              		.loc 1 487 7 view .LVU889
 3375              	.LBE58:
 3376              	.LBE61:
 3377              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 539:armwave.c     **** 
 540:armwave.c     ****     for(s = 0; s < sets; s++) {
 3378              		.loc 1 540 5 discriminator 1 view .LVU890
 3379 0ef8 000059E3 		cmp	r9, #0	@ sets,
 3380 0efc 550000DA 		ble	.L200		@,
 3381              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 542:armwave.c     ****     
 543:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 545:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 547:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 552:armwave.c     **** 
 553:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 555:armwave.c     **** 
 556:armwave.c     ****                 noise += 1.0f;
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 559:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3382              		.loc 1 559 45 view .LVU891
 3383 0f00 5C8A9FED 		vldr.32	s16, .L231	@ tmp258,
 3384              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 561:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 562:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3385              		.loc 1 562 104 view .LVU892
 3386 0f04 5CCA9FED 		vldr.32	s24, .L231+4	@ tmp259,
 3387              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 3388              		.loc 1 540 5 view .LVU893
 3389 0f08 0070A0E3 		mov	r7, #0	@ set_offset,
 3390              	@ armwave.c:541:         printf("Calculating test set %d\n", s);
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3391              		.loc 1 541 9 view .LVU894
 3392 0f0c 84A19FE5 		ldr	r10, .L231+32	@ tmp257,
 3393              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 3394              		.loc 1 540 5 view .LVU895
 3395 0f10 0780A0E1 		mov	r8, r7	@ s, set_offset
 3396              	.LVL230:
 3397              	.L203:
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3398              		.loc 1 541 9 is_stmt 1 view .LVU896
 3399 0f14 0810A0E1 		mov	r1, r8	@, s
 3400 0f18 0A00A0E1 		mov	r0, r10	@, tmp257
 3401 0f1c FEFFFFEB 		bl	printf		@
 3402              	.LVL231:
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3403              		.loc 1 543 9 view .LVU897
 3404              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3405              		.loc 1 543 39 is_stmt 0 view .LVU898
 3406 0f20 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3407              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3408              		.loc 1 543 9 view .LVU899
 3409 0f24 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3410 0f28 450000DA 		ble	.L204		@,
 3411              	@ armwave.c:545:             mod_val = 0.5f + (_1_waves_mod * w);
 545:armwave.c     **** 
 3412              		.loc 1 545 21 view .LVU900
 3413 0f2c 53CADFED 		vldr.32	s25, .L231+8	@ tmp200,
 3414              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3415              		.loc 1 559 33 view .LVU901
 3416 0f30 53BA9FED 		vldr.32	s22, .L231+12	@ tmp253,
 3417              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 3418              		.loc 1 557 24 view .LVU902
 3419 0f34 53AADFED 		vldr.32	s21, .L231+16	@ tmp254,
 3420 0f38 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3421              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3422              		.loc 1 543 15 view .LVU903
 3423 0f3c 0060A0E3 		mov	r6, #0	@ w,
 3424              	.LVL232:
 3425              	.L211:
 545:armwave.c     **** 
 3426              		.loc 1 545 13 is_stmt 1 view .LVU904
 3427              	@ armwave.c:545:             mod_val = 0.5f + (_1_waves_mod * w);
 545:armwave.c     **** 
 3428              		.loc 1 545 21 is_stmt 0 view .LVU905
 3429 0f40 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3430 0f44 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3431              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3432              		.loc 1 547 13 view .LVU906
 3433 0f48 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3434              	@ armwave.c:545:             mod_val = 0.5f + (_1_waves_mod * w);
 545:armwave.c     **** 
 3435              		.loc 1 545 21 view .LVU907
 3436 0f4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3437 0f50 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3438              	.LVL233:
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3439              		.loc 1 547 13 is_stmt 1 view .LVU908
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3440              		.loc 1 547 13 is_stmt 0 view .LVU909
 3441 0f54 370000DA 		ble	.L205		@,
 3442 0f58 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3443              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3444              		.loc 1 562 113 view .LVU910
 3445 0f5c 4AAA9FED 		vldr.32	s20, .L231+20	@ tmp229,
 3446 0f60 4A8ADFED 		vldr.32	s17, .L231+24	@ tmp230,
 3447              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3448              		.loc 1 547 19 view .LVU911
 3449 0f64 0040A0E3 		mov	r4, #0	@ x,
 3450              	.LVL234:
 3451              	.L210:
 548:armwave.c     ****                 noise *= noise;
 3452              		.loc 1 548 17 is_stmt 1 view .LVU912
 3453              	@ armwave.c:548:                 noise  = ((rand() & 0xffff) * noise_fraction);
 548:armwave.c     ****                 noise *= noise;
 3454              		.loc 1 548 28 is_stmt 0 view .LVU913
 3455 0f68 FEFFFFEB 		bl	rand		@
 3456              	.LVL235:
 3457              	@ armwave.c:548:                 noise  = ((rand() & 0xffff) * noise_fraction);
 548:armwave.c     ****                 noise *= noise;
 3458              		.loc 1 548 35 view .LVU914
 3459 0f6c 7000FFE6 		uxth	r0, r0	@ tmp201,
 3460              	@ armwave.c:548:                 noise  = ((rand() & 0xffff) * noise_fraction);
 548:armwave.c     ****                 noise *= noise;
 3461              		.loc 1 548 45 view .LVU915
 3462 0f70 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3463 0f74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3464              	@ armwave.c:548:                 noise  = ((rand() & 0xffff) * noise_fraction);
 548:armwave.c     ****                 noise *= noise;
 3465              		.loc 1 548 24 view .LVU916
 3466 0f78 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3467              	.LVL236:
 549:armwave.c     ****                 noise *= noise;
 3468              		.loc 1 549 17 is_stmt 1 view .LVU917
 3469              	@ armwave.c:549:                 noise *= noise;
 549:armwave.c     ****                 noise *= noise;
 3470              		.loc 1 549 23 is_stmt 0 view .LVU918
 3471 0f7c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3472              	.LVL237:
 550:armwave.c     ****                 noise *= noise;
 3473              		.loc 1 550 17 is_stmt 1 view .LVU919
 3474              	@ armwave.c:550:                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 3475              		.loc 1 550 23 is_stmt 0 view .LVU920
 3476 0f80 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3477              	.LVL238:
 551:armwave.c     **** 
 3478              		.loc 1 551 17 is_stmt 1 view .LVU921
 3479              	@ armwave.c:551:                 noise *= noise;
 551:armwave.c     **** 
 3480              		.loc 1 551 23 is_stmt 0 view .LVU922
 3481 0f84 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3482              	.LVL239:
 553:armwave.c     ****                     noise = -noise;
 3483              		.loc 1 553 17 is_stmt 1 view .LVU923
 3484              	@ armwave.c:553:                 if((rand() & 0xffff) > 0x7fff)
 553:armwave.c     ****                     noise = -noise;
 3485              		.loc 1 553 21 is_stmt 0 view .LVU924
 3486 0f88 FEFFFFEB 		bl	rand		@
 3487              	.LVL240:
 554:armwave.c     **** 
 3488              		.loc 1 554 21 is_stmt 1 view .LVU925
 3489              	@ armwave.c:553:                 if((rand() & 0xffff) > 0x7fff)
 553:armwave.c     ****                     noise = -noise;
 3490              		.loc 1 553 19 is_stmt 0 view .LVU926
 3491 0f8c 020910E3 		tst	r0, #32768	@,
 3492              	@ armwave.c:554:                     noise = -noise;
 554:armwave.c     **** 
 3493              		.loc 1 554 27 view .LVU927
 3494 0f90 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3495              	.LVL241:
 556:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3496              		.loc 1 556 17 is_stmt 1 view .LVU928
 557:armwave.c     **** 
 3497              		.loc 1 557 17 view .LVU929
 3498              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 3499              		.loc 1 557 27 is_stmt 0 view .LVU930
 3500 0f94 FEFFFFEB 		bl	rand		@
 3501              	.LVL242:
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3502              		.loc 1 559 17 is_stmt 1 view .LVU931
 3503              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3504              		.loc 1 559 45 is_stmt 0 view .LVU932
 3505 0f98 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3506              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3507              		.loc 1 559 33 view .LVU933
 3508 0f9c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3509              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3510              		.loc 1 559 45 view .LVU934
 3511 0fa0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3512              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3513              		.loc 1 559 33 view .LVU935
 3514 0fa4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3515              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3516              		.loc 1 559 45 view .LVU936
 3517 0fa8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3518              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3519              		.loc 1 559 33 view .LVU937
 3520 0fac 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3521              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 3522              		.loc 1 557 34 view .LVU938
 3523 0fb0 7000FFE6 		uxth	r0, r0	@ tmp214,
 3524              	.LVL243:
 3525              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 3526              		.loc 1 557 44 view .LVU939
 3527 0fb4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3528 0fb8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3529              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 3530              		.loc 1 557 24 view .LVU940
 3531 0fbc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3532              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3533              		.loc 1 559 77 view .LVU941
 3534 0fc0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3535              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3536              		.loc 1 559 22 view .LVU942
 3537 0fc4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3538 0fc8 FEFFFFEB 		bl	sin		@
 3539              	.LVL244:
 3540              		.loc 1 562 17 is_stmt 1 view .LVU943
 3541              	@ armwave.c:556:                 noise += 1.0f;
 556:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3542              		.loc 1 556 23 is_stmt 0 view .LVU944
 3543 0fcc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3544              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3545              		.loc 1 562 104 view .LVU945
 3546 0fd0 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3547              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3548              		.loc 1 559 98 view .LVU946
 3549 0fd4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3550              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3551              		.loc 1 559 87 view .LVU947
 3552 0fd8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3553              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3554              		.loc 1 559 98 view .LVU948
 3555 0fdc 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3556              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3557              		.loc 1 559 19 view .LVU949
 3558 0fe0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3559              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3560              		.loc 1 562 113 view .LVU950
 3561 0fe4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3562 0fe8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3563 0fec C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3564 0ff0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3565 0ff4 050000DA 		ble	.L207		@,
 3566              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3567              		.loc 1 562 104 discriminator 1 view .LVU951
 3568 0ff8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3569 0ffc FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3570 1000 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3571 1004 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3572 1008 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3573 100c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3574              	.L207:
 3575              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3576              		.loc 1 562 57 discriminator 12 view .LVU952
 3577 1010 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3578              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3579              		.loc 1 562 102 discriminator 12 view .LVU953
 3580 1014 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3581 1018 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3582 101c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3583              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3584              		.loc 1 547 58 discriminator 12 view .LVU954
 3585 1020 014084E2 		add	r4, r4, #1	@ x, x,
 3586              	.LVL245:
 3587              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3588              		.loc 1 562 102 discriminator 12 view .LVU955
 3589 1024 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3590              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3591              		.loc 1 547 43 discriminator 12 view .LVU956
 3592 1028 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3593              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3594              		.loc 1 547 13 discriminator 12 view .LVU957
 3595 102c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3596 1030 CCFFFFCA 		bgt	.L210		@,
 3597 1034 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3598              	.LVL246:
 3599              	.L205:
 3600              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3601              		.loc 1 543 48 discriminator 2 view .LVU958
 3602 1038 016086E2 		add	r6, r6, #1	@ w, w,
 3603              	.LVL247:
 3604              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3605              		.loc 1 543 9 discriminator 2 view .LVU959
 3606 103c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3607 1040 BEFFFFBA 		blt	.L211		@,
 3608              	.LVL248:
 3609              	.L204:
 563:armwave.c     ****             }
 564:armwave.c     ****         }
 565:armwave.c     **** 
 566:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3610              		.loc 1 566 9 is_stmt 1 discriminator 2 view .LVU960
 3611              	@ armwave.c:566:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3612              		.loc 1 566 46 is_stmt 0 discriminator 2 view .LVU961
 3613 1044 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3614              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 3615              		.loc 1 540 27 discriminator 2 view .LVU962
 3616 1048 018088E2 		add	r8, r8, #1	@ s, s,
 3617              	.LVL249:
 3618              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 3619              		.loc 1 540 5 discriminator 2 view .LVU963
 3620 104c 080059E1 		cmp	r9, r8	@ sets, s
 3621              	@ armwave.c:566:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3622              		.loc 1 566 20 discriminator 2 view .LVU964
 3623 1050 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3624              	.LVL250:
 3625              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 3626              		.loc 1 540 5 discriminator 2 view .LVU965
 3627 1054 AEFFFF1A 		bne	.L203		@,
 3628              	.LVL251:
 3629              	.L200:
 3630              	@ armwave.c:568: }
 567:armwave.c     ****     }
 568:armwave.c     **** }
 3631              		.loc 1 568 1 view .LVU966
 3632 1058 08D08DE2 		add	sp, sp, #8	@,,
 3633              		.cfi_remember_state
 3634              		.cfi_def_cfa_offset 80
 3635              		@ sp needed	@
 3636 105c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3637              		.cfi_restore 90
 3638              		.cfi_restore 91
 3639              		.cfi_restore 88
 3640              		.cfi_restore 89
 3641              		.cfi_restore 86
 3642              		.cfi_restore 87
 3643              		.cfi_restore 84
 3644              		.cfi_restore 85
 3645              		.cfi_restore 82
 3646              		.cfi_restore 83
 3647              		.cfi_restore 80
 3648              		.cfi_restore 81
 3649              		.cfi_def_cfa_offset 32
 3650              	.LVL252:
 3651              		.loc 1 568 1 view .LVU967
 3652 1060 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3653              	.LVL253:
 3654              	.L230:
 3655              		.cfi_restore_state
 3656              	.LBB62:
 3657              	.LBB59:
 488:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3658              		.loc 1 488 9 is_stmt 1 view .LVU968
 3659 1064 940901E0 		mul	r1, r4, r9	@, _85, sets
 3660 1068 0920A0E1 		mov	r2, r9	@, sets
 3661 106c 28009FE5 		ldr	r0, .L231+36	@,
 3662 1070 FEFFFFEB 		bl	printf		@
 3663              	.LVL254:
 490:armwave.c     ****     }
 3664              		.loc 1 490 9 view .LVU969
 3665 1074 9FFFFFEA 		b	.L202		@
 3666              	.L232:
 3667              		.align	2
 3668              	.L231:
 3669 1078 0000803F 		.word	1065353216
 3670 107c 00007F43 		.word	1132396544
 3671 1080 0000003F 		.word	1056964608
 3672 1084 C3F5C840 		.word	1086911939
 3673 1088 38FFC74A 		.word	1254620984
 3674 108c 0000FE42 		.word	1123942400
 3675 1090 00000043 		.word	1124073472
 3676 1094 00000000 		.word	g_armwave_state
 3677 1098 98020000 		.word	.LC21
 3678 109c F0010000 		.word	.LC19
 3679              	.LBE59:
 3680              	.LBE62:
 3681              		.cfi_endproc
 3682              	.LFE75:
 3684              		.align	2
 3685              		.global	armwave_cleanup
 3686              		.syntax unified
 3687              		.arm
 3688              		.fpu vfp
 3690              	armwave_cleanup:
 3691              	.LFB76:
 569:armwave.c     **** 
 570:armwave.c     **** /*
 571:armwave.c     ****  * Make a test square waveform.
 572:armwave.c     ****  *
 573:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 574:armwave.c     ****  */
 575:armwave.c     **** #if 0
 576:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 577:armwave.c     **** {
 578:armwave.c     ****     uint8_t v;
 579:armwave.c     ****     float noise, xnoise;
 580:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 581:armwave.c     ****     int w, x;
 582:armwave.c     **** 
 583:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 584:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 585:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 586:armwave.c     ****             noise *= noise;
 587:armwave.c     ****             noise *= noise;
 588:armwave.c     ****             noise *= noise;
 589:armwave.c     **** 
 590:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 591:armwave.c     ****                 noise = -noise;
 592:armwave.c     **** 
 593:armwave.c     ****             //noise += 1.0f;
 594:armwave.c     **** 
 595:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 596:armwave.c     ****                 new_level = 0.2f;
 597:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 598:armwave.c     ****                 new_level = 0.8f;
 599:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 600:armwave.c     ****                 new_level = 0.2f;
 601:armwave.c     ****             } else {
 602:armwave.c     ****                 new_level = 0.8f;
 603:armwave.c     ****             }
 604:armwave.c     **** 
 605:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 606:armwave.c     **** 
 607:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 608:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 609:armwave.c     ****         }
 610:armwave.c     ****     }
 611:armwave.c     **** }
 612:armwave.c     **** #endif
 613:armwave.c     **** 
 614:armwave.c     **** /*
 615:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 616:armwave.c     ****  */
 617:armwave.c     **** void armwave_cleanup()
 618:armwave.c     **** {
 3692              		.loc 1 618 1 view -0
 3693              		.cfi_startproc
 3694              		@ args = 0, pretend = 0, frame = 0
 3695              		@ frame_needed = 0, uses_anonymous_args = 0
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3696              		.loc 1 619 5 view .LVU971
 3697              	@ armwave.c:618: {
 618:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3698              		.loc 1 618 1 is_stmt 0 view .LVU972
 3699 10a0 10402DE9 		push	{r4, lr}	@
 3700              		.cfi_def_cfa_offset 8
 3701              		.cfi_offset 4, -8
 3702              		.cfi_offset 14, -4
 3703              	@ armwave.c:619:     free(g_armwave_state.out_pixbuf);
 3704              		.loc 1 619 25 view .LVU973
 3705 10a4 34409FE5 		ldr	r4, .L235	@ tmp114,
 3706              	@ armwave.c:619:     free(g_armwave_state.out_pixbuf);
 3707              		.loc 1 619 5 view .LVU974
 3708 10a8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3709 10ac FEFFFFEB 		bl	free		@
 3710              	.LVL255:
 620:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3711              		.loc 1 620 5 is_stmt 1 view .LVU975
 3712 10b0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3713 10b4 FEFFFFEB 		bl	free		@
 3714              	.LVL256:
 621:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3715              		.loc 1 621 5 view .LVU976
 3716 10b8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3717 10bc FEFFFFEB 		bl	free		@
 3718              	.LVL257:
 622:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3719              		.loc 1 622 5 view .LVU977
 3720 10c0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3721 10c4 FEFFFFEB 		bl	free		@
 3722              	.LVL258:
 623:armwave.c     **** 
 624:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3723              		.loc 1 624 5 view .LVU978
 3724              	@ armwave.c:624:     g_armwave_state.out_pixbuf = NULL;
 3725              		.loc 1 624 32 is_stmt 0 view .LVU979
 3726 10c8 0030A0E3 		mov	r3, #0	@ tmp123,
 3727 10cc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 625:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3728              		.loc 1 625 5 is_stmt 1 view .LVU980
 3729              	@ armwave.c:625:     g_armwave_state.ch1_buffer = NULL;
 3730              		.loc 1 625 32 is_stmt 0 view .LVU981
 3731 10d0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 626:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3732              		.loc 1 626 5 is_stmt 1 view .LVU982
 3733              	@ armwave.c:626:     g_armwave_state.xcoord_to_xpixel = NULL;
 3734              		.loc 1 626 38 is_stmt 0 view .LVU983
 3735 10d4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 627:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3736              		.loc 1 627 5 is_stmt 1 view .LVU984
 3737              	@ armwave.c:627:     g_armwave_state.test_wave_buffer = NULL;
 3738              		.loc 1 627 38 is_stmt 0 view .LVU985
 3739 10d8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3740              	@ armwave.c:628: }
 628:armwave.c     **** }
 3741              		.loc 1 628 1 view .LVU986
 3742 10dc 1080BDE8 		pop	{r4, pc}	@
 3743              	.L236:
 3744              		.align	2
 3745              	.L235:
 3746 10e0 00000000 		.word	g_armwave_state
 3747              		.cfi_endproc
 3748              	.LFE76:
 3750              		.comm	gamma_table,256,4
 3751              		.comm	g_armwave_state,136,4
 3752              		.section	.rodata
 3753              		.align	2
 3754              		.set	.LANCHOR0,. + 0
 3757              	__PRETTY_FUNCTION__.17094:
 3758 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3758      6176655F 
 3758      66696C6C 
 3758      5F706978 
 3758      6275665F 
 3759 001b 00       		.space	1
 3762              	__PRETTY_FUNCTION__.17116:
 3763 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3763      6176655F 
 3763      73657475 
 3763      705F7265 
 3763      6E646572 
 3764 0031 000000   		.space	3
 3767              	__PRETTY_FUNCTION__.17123:
 3768 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3768      6176655F 
 3768      7365745F 
 3768      77617665 
 3768      5F706F69 
 3769 004d 000000   		.space	3
 3772              	__PRETTY_FUNCTION__.17130:
 3773 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3773      6176655F 
 3773      7365745F 
 3773      77617665 
 3773      5F706F69 
 3774              		.section	.rodata.str1.4,"aMS",%progbits,1
 3775              		.align	2
 3776              	.LC0:
 3777 0000 76302E30 		.ascii	"v0.0.1\000"
 3777      2E3100
 3778 0007 00       		.space	1
 3779              	.LC1:
 3780 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3780      61766520 
 3780      76657273 
 3780      696F6E3A 
 3780      2025730A 
 3781 001d 000000   		.space	3
 3782              	.LC2:
 3783 0020 623D3078 		.ascii	"b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\012"
 3783      25303878 
 3783      20636831 
 3783      3D307825 
 3783      30387820 
 3784 0050 00       		.ascii	"\000"
 3785 0051 000000   		.space	3
 3786              	.LC3:
 3787 0054 61726D77 		.ascii	"armwave.c\000"
 3787      6176652E 
 3787      6300
 3788 005e 0000     		.space	2
 3789              	.LC4:
 3790 0060 6F75745F 		.ascii	"out_buffer != NULL\000"
 3790      62756666 
 3790      65722021 
 3790      3D204E55 
 3790      4C4C00
 3791 0073 00       		.space	1
 3792              	.LC5:
 3793 0074 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3793      20653D25 
 3793      6420773D 
 3793      25642077 
 3793      733D2564 
 3794              	.LC6:
 3795 00a0 73746172 		.ascii	"start_point < end_point\000"
 3795      745F706F 
 3795      696E7420 
 3795      3C20656E 
 3795      645F706F 
 3796              	.LC7:
 3797 00b8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3797      7566665F 
 3797      73697A65 
 3797      3D25642C 
 3797      20636D70 
 3798 00ea 00       		.ascii	"\000"
 3799 00eb 00       		.space	1
 3800              	.LC8:
 3801 00ec 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3801      6D776176 
 3801      655F7374 
 3801      6174652E 
 3801      6368315F 
 3802 010f 00       		.space	1
 3803              	.LC9:
 3804 0110 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3804      6D776176 
 3804      655F7374 
 3804      6174652E 
 3804      78636F6F 
 3805 0139 000000   		.space	3
 3806              	.LC10:
 3807 013c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3807      3A203078 
 3807      25303878 
 3807      20307825 
 3807      30387820 
 3808              	.LC11:
 3809 0160 77617665 		.ascii	"wave_buffer != NULL\000"
 3809      5F627566 
 3809      66657220 
 3809      213D204E 
 3809      554C4C00 
 3810              	.LC12:
 3811 0174 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3811      6176655F 
 3811      7365745F 
 3811      77617665 
 3811      5F706F69 
 3812 01a7 78636565 		.ascii	"xceeded\000"
 3812      64656400 
 3813 01af 00       		.space	1
 3814              	.LC13:
 3815 01b0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3815      5F627566 
 3815      6665725F 
 3815      70747220 
 3815      213D2030 
 3816 01c5 000000   		.space	3
 3817              	.LC14:
 3818 01c8 776200   		.ascii	"wb\000"
 3819 01cb 00       		.space	1
 3820              	.LC15:
 3821 01cc 50330A00 		.ascii	"P3\012\000"
 3822              	.LC16:
 3823 01d0 25642025 		.ascii	"%d %d\012\000"
 3823      640A00
 3824 01d7 00       		.space	1
 3825              	.LC17:
 3826 01d8 3235350A 		.ascii	"255\012\000"
 3826      00
 3827 01dd 000000   		.space	3
 3828              	.LC18:
 3829 01e0 25336420 		.ascii	"%3d %3d %3d\012\000"
 3829      25336420 
 3829      2533640A 
 3829      00
 3830 01ed 000000   		.space	3
 3831              	.LC19:
 3832 01f0 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3832      6176655F 
 3832      74657374 
 3832      5F627566 
 3832      6665725F 
 3833 0223 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3833      20627566 
 3833      66657220 
 3833      28256420 
 3833      62797465 
 3834              	.LC20:
 3835 0244 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3835      6176655F 
 3835      66696C6C 
 3835      5F706978 
 3835      6275665F 
 3836 0277 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3836      20666169 
 3836      6C65642C 
 3836      20726574 
 3836      75726E69 
 3837 0296 0000     		.space	2
 3838              	.LC21:
 3839 0298 43616C63 		.ascii	"Calculating test set %d\012\000"
 3839      756C6174 
 3839      696E6720 
 3839      74657374 
 3839      20736574 
 3840              		.text
 3841              	.Letext0:
 3842              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3843              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3844              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3845              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3846              		.file 7 "/usr/include/stdio.h"
 3847              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3848              		.file 9 "/usr/include/errno.h"
 3849              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3850              		.file 11 "/usr/include/unistd.h"
 3851              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3852              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3853              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3854              		.file 15 "/usr/include/math.h"
 3855              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3856              		.file 17 "/usr/include/time.h"
 3857              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3858              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3859              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3860              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3861              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3862              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3863              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3864              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3865              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3866              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3867              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3868              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3869              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3870              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3871              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3872              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3873              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3874              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3875              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3876              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3877              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3878              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3879              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3880              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3881              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3882              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3883              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3884              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3885              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3886              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3887              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3888              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3889              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3890              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3891              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3892              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3893              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3894              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3895              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3896              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3897              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3898              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3899              		.file 60 "/usr/local/include/python3.8/context.h"
 3900              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3901              		.file 62 "/usr/local/include/python3.8/code.h"
 3902              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3903              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3904              		.file 65 "/usr/local/include/python3.8/import.h"
 3905              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3906              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3907              		.file 68 "/usr/include/malloc.h"
 3908              		.file 69 "armwave.h"
 3909              		.file 70 "/usr/include/stdlib.h"
 3910              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3911              		.file 72 "/usr/include/assert.h"
 3912              		.file 73 "<built-in>"
 3913              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
