   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.33,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.33,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.33,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.33
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.33, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 00329FE5 		ldr	r3, .L27	@ tmp205,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0140A0E1 		mov	r4, r1	@ height, height
 259 00b0 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp208, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 38C093E5 		ldr	ip, [r3, #56]	@ _93, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 147 view .LVU37
 269 00bc 40B093E5 		ldr	fp, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 270              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 271              		.loc 1 71 105 view .LVU38
 272 00c0 2118A0E1 		lsr	r1, r1, #16	@ tmp209, tmp208,
 273              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 79 5 view .LVU39
 275 00c4 00005CE3 		cmp	ip, #0	@ _93,
 276              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 277              		.loc 1 79 35 view .LVU40
 278 00c8 20C08DE5 		str	ip, [sp, #32]	@ _93, %sfp
 279              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 280              		.loc 1 71 40 view .LVU41
 281 00cc 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 130 view .LVU42
 284 00d0 9B010AE0 		mul	r10, fp, r1	@ _7, _6, tmp209
 285              	.LVL8:
 286              		.loc 1 79 5 is_stmt 1 view .LVU43
 287              		.loc 1 79 5 is_stmt 0 view .LVU44
 288 00d4 700000DA 		ble	.L11		@,
 289              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 80 36 view .LVU45
 291 00d8 141093E5 		ldr	r1, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 292              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 293              		.loc 1 80 81 view .LVU46
 294 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 295 00e0 000054E3 		cmp	r4, #0	@ height,
 296 00e4 24308DE5 		str	r3, [sp, #36]	@ _9, %sfp
 297 00e8 6B00000A 		beq	.L11		@,
 298 00ec 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 299 00f0 003081E0 		add	r3, r1, r0	@ tmp213, _8, slice_y
 300 00f4 000063E2 		rsb	r0, r3, #0	@ ivtmp.48, tmp213
 301              	.LVL9:
 302              		.loc 1 80 81 view .LVU47
 303 00f8 8210A0E1 		lsl	r1, r2, #1	@ tmp215, _2,
 304 00fc 18308DE5 		str	r3, [sp, #24]	@ tmp213, %sfp
 305 0100 8C30A0E1 		lsl	r3, ip, #1	@ tmp220, tmp219,
 306 0104 14308DE5 		str	r3, [sp, #20]	@ tmp220, %sfp
 307 0108 023081E0 		add	r3, r1, r2	@ ivtmp.42, tmp215, _2
 308 010c 28308DE5 		str	r3, [sp, #40]	@ ivtmp.42, %sfp
 309 0110 0231A0E1 		lsl	r3, r2, #2	@ _186, _2,
 310 0114 00308DE5 		str	r3, [sp]	@ _186, %sfp
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 11 view .LVU48
 313 0118 0030A0E3 		mov	r3, #0	@ w,
 314 011c 2C108DE5 		str	r1, [sp, #44]	@ tmp215, %sfp
 315 0120 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.48, %sfp
 316 0124 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 317              	.LVL10:
 318              	.L19:
 319              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 320              		.loc 1 84 9 view .LVU50
 321              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 322              		.loc 1 79 11 is_stmt 0 view .LVU51
 323 0128 2C609DE5 		ldr	r6, [sp, #44]	@ ivtmp.43, %sfp
 324 012c 28909DE5 		ldr	r9, [sp, #40]	@ ivtmp.42, %sfp
 325 0130 18809DE5 		ldr	r8, [sp, #24]	@ ivtmp.49, %sfp
 326              	.LVL11:
 327              	.L14:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 87 13 is_stmt 1 view .LVU52
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 338              		.loc 1 102 34 is_stmt 0 view .LVU61
 339 0134 14209DE5 		ldr	r2, [sp, #20]	@ tmp220, %sfp
 340              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 341              		.loc 1 102 74 view .LVU62
 342 0138 2908A0E1 		lsr	r0, r9, #16	@ tmp277, ivtmp.42,
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 344              		.loc 1 102 34 view .LVU63
 345 013c 023086E0 		add	r3, r6, r2	@ tmp228, ivtmp.43, tmp220
 346              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 347              		.loc 1 102 74 view .LVU64
 348 0140 04008DE5 		str	r0, [sp, #4]	@ tmp277, %sfp
 349 0144 2338A0E1 		lsr	r3, r3, #16	@ tmp229, tmp228,
 350              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 351              		.loc 1 87 18 view .LVU65
 352 0148 040098E4 		ldr	r0, [r8], #4	@ word, MEM[base: _182, offset: 0B]
 353              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 354              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 355              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 356              		.loc 1 94 17 view .LVU68
 357              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 106 47 is_stmt 0 view .LVU69
 359 014c 9BA323E0 		mla	r3, fp, r3, r10	@ tmp231, _6, tmp229, _7
 360              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 361              		.loc 1 94 20 view .LVU70
 362 0150 FF7010E2 		ands	r7, r0, #255	@ scale_value, word,
 363              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 364              		.loc 1 102 34 view .LVU71
 365 0154 021089E0 		add	r1, r9, r2	@ tmp245, ivtmp.42, tmp220
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 20 view .LVU72
 368 0158 0150A003 		moveq	r5, #1	@ tmp222,
 369 015c 0050A013 		movne	r5, #0	@ tmp222,
 370 0160 00C09DE5 		ldr	ip, [sp]	@ _186, %sfp
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 372              		.loc 1 106 47 view .LVU73
 373 0164 073083E0 		add	r3, r3, r7	@ tmp232, tmp231, scale_value
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 19 view .LVU74
 376 0168 FF0057E3 		cmp	r7, #255	@ scale_value,
 377 016c 01508503 		orreq	r5, r5, #1	@,, tmp227, tmp222
 378              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 379              		.loc 1 102 74 view .LVU75
 380 0170 2628A0E1 		lsr	r2, r6, #16	@ tmp262, ivtmp.43,
 381 0174 2118A0E1 		lsr	r1, r1, #16	@ tmp246, tmp245,
 382              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 383              		.loc 1 84 9 view .LVU76
 384 0178 0C709DE5 		ldr	r7, [sp, #12]	@ ivtmp.48, %sfp
 385              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 386              		.loc 1 94 19 view .LVU77
 387 017c 000055E3 		cmp	r5, #0	@ tmp227,
 388 0180 0C9089E0 		add	r9, r9, ip	@ ivtmp.42, ivtmp.42, _186
 389              	.LVL13:
 390              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 106 47 view .LVU78
 392 0184 9BA121E0 		mla	r1, fp, r1, r10	@ tmp248, _6, tmp246, _7
 393 0188 9BA222E0 		mla	r2, fp, r2, r10	@ tmp264, _6, tmp262, _7
 394              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 395              		.loc 1 107 22 view .LVU79
 396 018c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 397              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 398              		.loc 1 106 47 view .LVU80
 399 0190 8330A0E1 		lsl	r3, r3, #1	@ tmp233, tmp232,
 400              	@ armwave.c:107:                 word >>= 8;
 401              		.loc 1 107 22 view .LVU81
 402 0194 20C8A0E1 		lsr	ip, r0, #16	@ word, word,
 403              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 404              		.loc 1 84 9 view .LVU82
 405 0198 077088E0 		add	r7, r8, r7	@ tmp285, ivtmp.41, ivtmp.48
 406              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 407              		.loc 1 94 19 view .LVU83
 408 019c 2C00001A 		bne	.L20		@,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 20 view .LVU84
 411 01a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU85
 414 01a4 0450A0E1 		mov	r5, r4	@ scale_value, scale_value
 415 01a8 041081E0 		add	r1, r1, r4	@ tmp249, tmp248, scale_value
 416 01ac B3409EE1 		ldrh	r4, [lr, r3]	@ *_75, *_75
 417 01b0 8110A0E1 		lsl	r1, r1, #1	@ tmp250, tmp249,
 418 01b4 08408DE5 		str	r4, [sp, #8]	@ *_75, %sfp
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 20 view .LVU86
 421 01b8 0140A003 		moveq	r4, #1	@ tmp239,
 422 01bc 0040A013 		movne	r4, #0	@ tmp239,
 423              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 424              		.loc 1 94 19 view .LVU87
 425 01c0 FF0055E3 		cmp	r5, #255	@ scale_value,
 426 01c4 01408403 		orreq	r4, r4, #1	@,, tmp239, tmp239
 427 01c8 000054E3 		cmp	r4, #0	@ tmp244,
 428              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 429              		.loc 1 106 47 view .LVU88
 430 01cc 08409DE5 		ldr	r4, [sp, #8]	@ *_75, %sfp
 431 01d0 015084E2 		add	r5, r4, #1	@ tmp236, *_75,
 432 01d4 B3508EE1 		strh	r5, [lr, r3]	@ movhi	@ tmp236, *_75
 433              		.loc 1 107 17 is_stmt 1 view .LVU89
 434              	.LVL14:
  91:armwave.c     ****                 
 435              		.loc 1 91 17 view .LVU90
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 17 view .LVU91
 437              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 438              		.loc 1 94 19 is_stmt 0 view .LVU92
 439 01d8 1D00001A 		bne	.L20		@,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 20 view .LVU93
 442 01dc FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 443              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 444              		.loc 1 106 47 view .LVU94
 445 01e0 B1309EE1 		ldrh	r3, [lr, r1]	@ *_104, *_104
 446              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 447              		.loc 1 94 20 view .LVU95
 448 01e4 0140A003 		moveq	r4, #1	@ tmp256,
 449 01e8 0040A013 		movne	r4, #0	@ tmp256,
 450              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 451              		.loc 1 106 47 view .LVU96
 452 01ec 0C2082E0 		add	r2, r2, ip	@ tmp265, tmp264, scale_value
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 view .LVU97
 455 01f0 FF005CE3 		cmp	ip, #255	@ scale_value,
 456 01f4 04C0A011 		movne	ip, r4	@, tmp261, tmp256
 457 01f8 01C08403 		orreq	ip, r4, #1	@,, tmp261, tmp256
 458              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 459              		.loc 1 106 47 view .LVU98
 460 01fc 013083E2 		add	r3, r3, #1	@ tmp253, *_104,
 461              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 462              		.loc 1 94 19 view .LVU99
 463 0200 00005CE3 		cmp	ip, #0	@ tmp261,
 464              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 465              		.loc 1 106 47 view .LVU100
 466 0204 8220A0E1 		lsl	r2, r2, #1	@ tmp266, tmp265,
 467 0208 B1308EE1 		strh	r3, [lr, r1]	@ movhi	@ tmp253, *_104
 468              		.loc 1 107 17 is_stmt 1 view .LVU101
 469              	.LVL15:
  91:armwave.c     ****                 
 470              		.loc 1 91 17 view .LVU102
  94:armwave.c     ****                     continue;
 471              		.loc 1 94 17 view .LVU103
 472              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 473              		.loc 1 94 19 is_stmt 0 view .LVU104
 474 020c 1000001A 		bne	.L20		@,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU105
 477 0210 04309DE5 		ldr	r3, [sp, #4]	@ tmp277, %sfp
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU106
 480 0214 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 481              	.LVL16:
 482              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 483              		.loc 1 106 47 view .LVU107
 484 0218 B2109EE1 		ldrh	r1, [lr, r2]	@ *_133, *_133
 485 021c 9B0323E0 		mla	r3, fp, r3, r0	@ tmp279, _6, tmp277, word
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 20 view .LVU108
 488 0220 01C0A003 		moveq	ip, #1	@ tmp271,
 489 0224 00C0A013 		movne	ip, #0	@ tmp271,
 490              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 491              		.loc 1 106 47 view .LVU109
 492 0228 0A3083E0 		add	r3, r3, r10	@ tmp280, tmp279, _7
 493              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 494              		.loc 1 94 19 view .LVU110
 495 022c FF0050E3 		cmp	r0, #255	@ word,
 496 0230 0C00A011 		movne	r0, ip	@, tmp276, tmp271
 497 0234 01008C03 		orreq	r0, ip, #1	@,, tmp276, tmp271
 498 0238 000050E3 		cmp	r0, #0	@ tmp276,
 499              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 500              		.loc 1 106 47 view .LVU111
 501 023c 8330A0E1 		lsl	r3, r3, #1	@ tmp281, tmp280,
 502 0240 011081E2 		add	r1, r1, #1	@ tmp269, *_133,
 503 0244 B2108EE1 		strh	r1, [lr, r2]	@ movhi	@ tmp269, *_133
 504              		.loc 1 107 17 is_stmt 1 view .LVU112
 505              	.LVL17:
  91:armwave.c     ****                 
 506              		.loc 1 91 17 view .LVU113
  94:armwave.c     ****                     continue;
 507              		.loc 1 94 17 view .LVU114
 508              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 509              		.loc 1 106 47 is_stmt 0 view .LVU115
 510 0248 B3209E01 		ldrheq	r2, [lr, r3]	@ *_162, *_162
 511 024c 01208202 		addeq	r2, r2, #1	@ tmp284, *_162,
 512 0250 B3208E01 		strheq	r2, [lr, r3]	@ movhi	@ tmp284, *_162
 513              		.loc 1 107 17 is_stmt 1 view .LVU116
 514              	.LVL18:
 515              	.L20:
 516              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 517              		.loc 1 84 9 is_stmt 0 view .LVU117
 518 0254 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 519 0258 070053E1 		cmp	r3, r7	@ height, tmp285
 520 025c 00309DE5 		ldr	r3, [sp]	@ _186, %sfp
 521 0260 036086E0 		add	r6, r6, r3	@ ivtmp.43, ivtmp.43, _186
 522 0264 B2FFFF8A 		bhi	.L14		@,
 523              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 524              		.loc 1 79 44 view .LVU118
 525 0268 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 526              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 527              		.loc 1 79 5 view .LVU119
 528 026c 20209DE5 		ldr	r2, [sp, #32]	@ _93, %sfp
 529              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 530              		.loc 1 79 44 view .LVU120
 531 0270 013083E2 		add	r3, r3, #1	@ w, w,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 5 view .LVU121
 534 0274 020053E1 		cmp	r3, r2	@ w, _93
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU122
 537 0278 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 538              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU123
 540 027c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.48, %sfp
 541 0280 24309DE5 		ldr	r3, [sp, #36]	@ _9, %sfp
 542              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 543              		.loc 1 79 44 view .LVU124
 544 0284 032042E0 		sub	r2, r2, r3	@ ivtmp.48, ivtmp.48, _9
 545 0288 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.48, %sfp
 546 028c 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.49, %sfp
 547 0290 033082E0 		add	r3, r2, r3	@ ivtmp.49, ivtmp.49, _9
 548 0294 18308DE5 		str	r3, [sp, #24]	@ ivtmp.49, %sfp
 549              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 550              		.loc 1 79 5 view .LVU125
 551 0298 A2FFFF1A 		bne	.L19		@,
 552              	.LVL21:
 553              	.L11:
 554              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 555              		.loc 1 111 1 view .LVU126
 556 029c 34D08DE2 		add	sp, sp, #52	@,,
 557              		.cfi_def_cfa_offset 36
 558              		@ sp needed	@
 559 02a0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 560              	.LVL22:
 561              	.L28:
 562              		.loc 1 111 1 view .LVU127
 563              		.align	2
 564              	.L27:
 565 02a4 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL23:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** /*
 114:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 115:armwave.c     ****  * Rows are repeated as necessary.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 118:armwave.c     **** {
 578              		.loc 1 118 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 119 5 view .LVU129
 120:armwave.c     ****     // uint32_t ysub;
 121:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 121 5 view .LVU130
 122:armwave.c     ****     uint8_t r, g, b;
 584              		.loc 1 122 5 view .LVU131
 123:armwave.c     ****     int value; 
 585              		.loc 1 123 5 view .LVU132
 124:armwave.c     ****     // uint8_t row;
 125:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 586              		.loc 1 125 5 view .LVU133
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 587              		.loc 1 126 5 view .LVU134
 127:armwave.c     ****     uint32_t offset;
 588              		.loc 1 127 5 view .LVU135
 128:armwave.c     **** 
 129:armwave.c     ****     assert(out_buffer != NULL);
 589              		.loc 1 129 5 view .LVU136
 590              	@ armwave.c:118: {
 118:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 591              		.loc 1 118 1 is_stmt 0 view .LVU137
 592 02a8 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 593              		.cfi_def_cfa_offset 40
 594              		.cfi_offset 3, -40
 595              		.cfi_offset 4, -36
 596              		.cfi_offset 5, -32
 597              		.cfi_offset 6, -28
 598              		.cfi_offset 7, -24
 599              		.cfi_offset 8, -20
 600              		.cfi_offset 9, -16
 601              		.cfi_offset 10, -12
 602              		.cfi_offset 11, -8
 603              		.cfi_offset 14, -4
 604              	@ armwave.c:129:     assert(out_buffer != NULL);
 605              		.loc 1 129 5 view .LVU138
 606 02ac 005050E2 		subs	r5, r0, #0	@ out_buffer, out_buffer
 607 02b0 4400000A 		beq	.L41		@,
 130:armwave.c     **** 
 131:armwave.c     ****     // we don't really want to be doing this if possible
 132:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 608              		.loc 1 132 5 is_stmt 1 view .LVU139
 609              	@ armwave.c:132:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 132 45 is_stmt 0 view .LVU140
 611 02b4 20419FE5 		ldr	r4, .L42	@ tmp221,
 612              	@ armwave.c:132:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 132 5 view .LVU141
 614 02b8 0010A0E3 		mov	r1, #0	@,
 615              	@ armwave.c:132:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 616              		.loc 1 132 59 view .LVU142
 617 02bc 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 618 02c0 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 619 02c4 920302E0 		mul	r2, r2, r3	@ tmp179, g_armwave_state.target_height, g_armwave_state.target_width
 620              	@ armwave.c:132:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 621              		.loc 1 132 5 view .LVU143
 622 02c8 0221A0E1 		lsl	r2, r2, #2	@, tmp179,
 623 02cc FEFFFFEB 		bl	memset		@
 624              	.LVL24:
 133:armwave.c     **** 
 134:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 625              		.loc 1 134 5 is_stmt 1 view .LVU144
 626              	@ armwave.c:134:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 627              		.loc 1 134 10 is_stmt 0 view .LVU145
 628 02d0 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 629 02d4 406094E5 		ldr	r6, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 630 02d8 960306E0 		mul	r6, r6, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 631              	.LVL25:
 135:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 136:armwave.c     **** 
 137:armwave.c     **** #if 0
 138:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 139:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 140:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 141:armwave.c     ****         // most normal waveforms.
 142:armwave.c     ****         wave_word = *base_32ptr++;
 143:armwave.c     **** 
 144:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 145:armwave.c     ****             for(w = 0; w < 2; w++) {
 146:armwave.c     ****                 value = wave_word & 0xffff;
 147:armwave.c     ****                 wave_word >>= 16;
 148:armwave.c     **** 
 149:armwave.c     ****                 if(value != 0) {
 150:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 151:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 152:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 153:armwave.c     **** 
 154:armwave.c     ****                     r = MIN(rr, 255);
 155:armwave.c     ****                     g = MIN(gg, 255);
 156:armwave.c     ****                     b = MIN(bb, 255);
 157:armwave.c     **** 
 158:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 159:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 160:armwave.c     **** 
 161:armwave.c     ****                     // Plot the pixels
 162:armwave.c     ****                     nsub = n + (w * 2);
 163:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 164:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 165:armwave.c     ****                     xx = (nsub >> 8);
 166:armwave.c     **** 
 167:armwave.c     ****                     for(y = yy; y < ye; y++) {
 168:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 169:armwave.c     ****                         *(out_buffer_base + offset) = word;
 170:armwave.c     ****                     }
 171:armwave.c     ****                 }
 172:armwave.c     ****             }
 173:armwave.c     ****         }
 174:armwave.c     ****     }
 175:armwave.c     **** #endif
 176:armwave.c     **** 
 177:armwave.c     ****     for(n = 0; n < npix; n += 1) {
 632              		.loc 1 177 5 is_stmt 1 view .LVU146
 633              		.loc 1 177 5 is_stmt 0 view .LVU147
 634 02dc 000056E3 		cmp	r6, #0	@ npix,
 635 02e0 F88FBDD8 		pople	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 636              	@ armwave.c:178:         wave_word = g_armwave_state.ch1_buffer[n];
 178:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 637              		.loc 1 178 36 view .LVU148
 638 02e4 04C094E5 		ldr	ip, [r4, #4]	@ _8, g_armwave_state.ch1_buffer
 639              	@ armwave.c:182:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 179:armwave.c     ****         value = wave_word & 0xffff;
 180:armwave.c     **** 
 181:armwave.c     ****         if(value != 0) {
 182:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 640              		.loc 1 182 44 view .LVU149
 641 02e8 FC96D4E1 		ldrsh	r9, [r4, #108]	@ _15, g_armwave_state.ch1_color.r
 642 02ec 02C04CE2 		sub	ip, ip, #2	@ ivtmp.56, _8,
 643              	@ armwave.c:183:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 183:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 644              		.loc 1 183 44 view .LVU150
 645 02f0 FE86D4E1 		ldrsh	r8, [r4, #110]	@ _18, g_armwave_state.ch1_color.g
 646              	@ armwave.c:184:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 184:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 184 44 view .LVU151
 648 02f4 F077D4E1 		ldrsh	r7, [r4, #112]	@ _21, g_armwave_state.ch1_color.b
 649              	@ armwave.c:195:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 185:armwave.c     **** 
 186:armwave.c     ****             r = MIN(rr, 255);
 187:armwave.c     ****             g = MIN(gg, 255);
 188:armwave.c     ****             b = MIN(bb, 255);
 189:armwave.c     **** 
 190:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 191:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 192:armwave.c     **** 
 193:armwave.c     ****             // Plot the pixels
 194:armwave.c     ****             nsub = n;
 195:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 650              		.loc 1 195 49 view .LVU152
 651 02f8 0A6AD4ED 		vldr.32	s13, [r4, #40]	@ _35, g_armwave_state.vscale_frac
 652 02fc 86608CE0 		add	r6, ip, r6, lsl #1	@ _115, ivtmp.56, npix,
 653              	.LVL26:
 654              	@ armwave.c:177:     for(n = 0; n < npix; n += 1) {
 177:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 655              		.loc 1 177 11 view .LVU153
 656 0300 00E0A0E3 		mov	lr, #0	@ n,
 657 0304 020000EA 		b	.L34		@
 658              	.LVL27:
 659              	.L32:
 660              	@ armwave.c:177:     for(n = 0; n < npix; n += 1) {
 177:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 661              		.loc 1 177 5 view .LVU154
 662 0308 06005CE1 		cmp	ip, r6	@ ivtmp.56, _115
 663              	@ armwave.c:177:     for(n = 0; n < npix; n += 1) {
 177:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 664              		.loc 1 177 28 view .LVU155
 665 030c 01E08EE2 		add	lr, lr, #1	@ n, n,
 666              	.LVL28:
 667              	@ armwave.c:177:     for(n = 0; n < npix; n += 1) {
 177:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 668              		.loc 1 177 5 view .LVU156
 669 0310 F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 670              	.LVL29:
 671              	.L34:
 178:armwave.c     ****         value = wave_word & 0xffff;
 672              		.loc 1 178 9 is_stmt 1 view .LVU157
 673              	@ armwave.c:178:         wave_word = g_armwave_state.ch1_buffer[n];
 178:armwave.c     ****         value = wave_word & 0xffff;
 674              		.loc 1 178 47 is_stmt 0 view .LVU158
 675 0314 B2A0FCE1 		ldrh	r10, [ip, #2]!	@ _12, MEM[base: _120, offset: 0B]
 676              	.LVL30:
 179:armwave.c     **** 
 677              		.loc 1 179 9 is_stmt 1 view .LVU159
 181:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 678              		.loc 1 181 9 view .LVU160
 679              	@ armwave.c:181:         if(value != 0) {
 181:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 680              		.loc 1 181 11 is_stmt 0 view .LVU161
 681 0318 00005AE3 		cmp	r10, #0	@ _12,
 682 031c F9FFFF0A 		beq	.L32		@,
 182:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 683              		.loc 1 182 13 is_stmt 1 view .LVU162
 684              	.LVL31:
 183:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 685              		.loc 1 183 13 view .LVU163
 184:armwave.c     **** 
 686              		.loc 1 184 13 view .LVU164
 186:armwave.c     ****             g = MIN(gg, 255);
 687              		.loc 1 186 13 view .LVU165
 187:armwave.c     ****             b = MIN(bb, 255);
 688              		.loc 1 187 13 view .LVU166
 188:armwave.c     **** 
 689              		.loc 1 188 13 view .LVU167
 191:armwave.c     **** 
 690              		.loc 1 191 13 view .LVU168
 691              	@ armwave.c:195:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 692              		.loc 1 195 24 is_stmt 0 view .LVU169
 693 0320 7E30EFE6 		uxtb	r3, lr	@ _33, n
 694              	@ armwave.c:196:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 196:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 695              		.loc 1 196 33 view .LVU170
 696 0324 012083E2 		add	r2, r3, #1	@ tmp214, _33,
 697              	@ armwave.c:195:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 195:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 698              		.loc 1 195 32 view .LVU171
 699 0328 903A07EE 		vmov	s15, r3	@ int	@ _33, _33
 700              	@ armwave.c:196:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 701              		.loc 1 196 33 view .LVU172
 702 032c 102A07EE 		vmov	s14, r2	@ int	@ tmp214, tmp214
 703              	@ armwave.c:184:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 184:armwave.c     **** 
 704              		.loc 1 184 47 view .LVU173
 705 0330 970A02E0 		mul	r2, r7, r10	@ tmp199, _21, _12
 706              	@ armwave.c:195:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 195:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 707              		.loc 1 195 32 view .LVU174
 708 0334 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _33
 709              	@ armwave.c:196:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 710              		.loc 1 196 38 view .LVU175
 711 0338 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 712              	@ armwave.c:183:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 183:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 713              		.loc 1 183 47 view .LVU176
 714 033c 980A0BE0 		mul	fp, r8, r10	@ tmp203, _18, _12
 715              	@ armwave.c:184:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 184:armwave.c     **** 
 716              		.loc 1 184 16 view .LVU177
 717 0340 4224A0E1 		asr	r2, r2, #8	@ bb, tmp199,
 718              	.LVL32:
 719              	@ armwave.c:182:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 182:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 720              		.loc 1 182 47 view .LVU178
 721 0344 990A0AE0 		mul	r10, r9, r10	@ tmp209, _15, _12
 722              	.LVL33:
 723              	@ armwave.c:183:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 183:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 724              		.loc 1 183 16 view .LVU179
 725 0348 4BB4A0E1 		asr	fp, fp, #8	@ gg, tmp203,
 726              	.LVL34:
 727              	@ armwave.c:195:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 195:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 728              		.loc 1 195 32 view .LVU180
 729 034c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _35
 730              	@ armwave.c:196:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 731              		.loc 1 196 38 view .LVU181
 732 0350 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _35
 733              	@ armwave.c:188:             b = MIN(bb, 255);
 188:armwave.c     **** 
 734              		.loc 1 188 17 view .LVU182
 735 0354 FF0052E3 		cmp	r2, #255	@ bb,
 736 0358 FF20A0A3 		movge	r2, #255	@ bb,
 737              	.LVL35:
 738              	@ armwave.c:187:             g = MIN(gg, 255);
 187:armwave.c     ****             b = MIN(bb, 255);
 739              		.loc 1 187 17 view .LVU183
 740 035c FF005BE3 		cmp	fp, #255	@ gg,
 741 0360 FFB0A0A3 		movge	fp, #255	@ gg,
 742              	.LVL36:
 743              	@ armwave.c:182:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 182:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 744              		.loc 1 182 16 view .LVU184
 745 0364 4AA4A0E1 		asr	r10, r10, #8	@ rr, tmp209,
 746              	.LVL37:
 747              	@ armwave.c:186:             r = MIN(rr, 255);
 186:armwave.c     ****             g = MIN(gg, 255);
 748              		.loc 1 186 17 view .LVU185
 749 0368 FF005AE3 		cmp	r10, #255	@ rr,
 750              	@ armwave.c:195:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 195:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 751              		.loc 1 195 16 view .LVU186
 752 036c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 753              	@ armwave.c:191:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 754              		.loc 1 191 48 view .LVU187
 755 0370 0BB4A0E1 		lsl	fp, fp, #8	@ tmp204, gg,
 756              	@ armwave.c:186:             r = MIN(rr, 255);
 186:armwave.c     ****             g = MIN(gg, 255);
 757              		.loc 1 186 17 view .LVU188
 758 0374 FFA0A0A3 		movge	r10, #255	@ rr,
 759              	.LVL38:
 760              	@ armwave.c:191:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 761              		.loc 1 191 36 view .LVU189
 762 0378 0218A0E1 		lsl	r1, r2, #16	@ tmp200, bb,
 763 037c FF1801E2 		and	r1, r1, #16711680	@ tmp201, tmp200,
 764              	@ armwave.c:191:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 765              		.loc 1 191 48 view .LVU190
 766 0380 7BB0FFE6 		uxth	fp, fp	@ tmp205, tmp204
 767              	@ armwave.c:191:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 768              		.loc 1 191 54 view .LVU191
 769 0384 7AA0EFE6 		uxtb	r10, r10	@ rr, rr
 770              	@ armwave.c:191:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 771              		.loc 1 191 43 view .LVU192
 772 0388 0B1081E1 		orr	r1, r1, fp	@ tmp207, tmp201, tmp205
 773              	@ armwave.c:195:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 195:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 774              		.loc 1 195 16 view .LVU193
 775 038c 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 776              	@ armwave.c:196:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 777              		.loc 1 196 16 view .LVU194
 778 0390 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 779              	@ armwave.c:191:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 780              		.loc 1 191 54 view .LVU195
 781 0394 0A1081E1 		orr	r1, r1, r10	@ tmp211, tmp207, rr
 782              	@ armwave.c:191:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 783              		.loc 1 191 18 view .LVU196
 784 0398 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp211,
 785              	.LVL39:
 194:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 786              		.loc 1 194 13 is_stmt 1 view .LVU197
 195:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 787              		.loc 1 195 13 view .LVU198
 788              		.loc 1 196 13 view .LVU199
 789              	@ armwave.c:197:             xx = (nsub >> 8) / 2;
 197:armwave.c     ****             xx = (nsub >> 8) / 2;
 790              		.loc 1 197 30 is_stmt 0 view .LVU200
 791 039c CEA4A0E1 		asr	r10, lr, #9	@ xx, n,
 792              	@ armwave.c:196:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 196:armwave.c     ****             xx = (nsub >> 8) / 2;
 793              		.loc 1 196 16 view .LVU201
 794 03a0 900A17EE 		vmov	r0, s15	@ int	@ ye, ye
 795              	.LVL40:
 796              		.loc 1 197 13 is_stmt 1 view .LVU202
 198:armwave.c     **** 
 199:armwave.c     ****             for(y = yy; y < ye; y++) {
 797              		.loc 1 199 13 view .LVU203
 798              		.loc 1 199 13 is_stmt 0 view .LVU204
 799 03a4 000053E1 		cmp	r3, r0	@ yy, ye
 800 03a8 D6FFFF2A 		bcs	.L32		@,
 801              	.LVL41:
 802              	.L33:
 200:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 803              		.loc 1 200 17 is_stmt 1 discriminator 3 view .LVU205
 201:armwave.c     ****                 *(out_buffer_base + offset) = word;
 804              		.loc 1 201 17 discriminator 3 view .LVU206
 805              	@ armwave.c:200:                 offset = (xx + (y * g_armwave_state.target_width)); 
 200:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 806              		.loc 1 200 35 is_stmt 0 discriminator 3 view .LVU207
 807 03ac 582094E5 		ldr	r2, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 808              	@ armwave.c:201:                 *(out_buffer_base + offset) = word;
 809              		.loc 1 201 35 discriminator 3 view .LVU208
 810 03b0 92A322E0 		mla	r2, r2, r3, r10	@ tmp220, g_armwave_state.target_width, yy, xx
 811              	.LVL42:
 812              	@ armwave.c:199:             for(y = yy; y < ye; y++) {
 199:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 813              		.loc 1 199 34 discriminator 3 view .LVU209
 814 03b4 013083E2 		add	r3, r3, #1	@ yy, yy,
 815              	.LVL43:
 816              	@ armwave.c:199:             for(y = yy; y < ye; y++) {
 199:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 817              		.loc 1 199 13 discriminator 3 view .LVU210
 818 03b8 030050E1 		cmp	r0, r3	@ ye, yy
 819              	@ armwave.c:201:                 *(out_buffer_base + offset) = word;
 820              		.loc 1 201 45 discriminator 3 view .LVU211
 821 03bc 021185E7 		str	r1, [r5, r2, lsl #2]	@ word, *_46
 822              	@ armwave.c:199:             for(y = yy; y < ye; y++) {
 199:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 823              		.loc 1 199 13 discriminator 3 view .LVU212
 824 03c0 F9FFFF1A 		bne	.L33		@,
 199:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 825              		.loc 1 199 13 discriminator 3 view .LVU213
 826 03c4 CFFFFFEA 		b	.L32		@
 827              	.LVL44:
 828              	.L41:
 129:armwave.c     **** 
 829              		.loc 1 129 5 is_stmt 1 discriminator 1 view .LVU214
 830 03c8 10309FE5 		ldr	r3, .L42+4	@,
 831 03cc 8120A0E3 		mov	r2, #129	@,
 832 03d0 0C109FE5 		ldr	r1, .L42+8	@,
 833 03d4 0C009FE5 		ldr	r0, .L42+12	@,
 834              	.LVL45:
 129:armwave.c     **** 
 835              		.loc 1 129 5 is_stmt 0 discriminator 1 view .LVU215
 836 03d8 FEFFFFEB 		bl	__assert_fail		@
 837              	.LVL46:
 838              	.L43:
 129:armwave.c     **** 
 839              		.loc 1 129 5 discriminator 1 view .LVU216
 840              		.align	2
 841              	.L42:
 842 03dc 00000000 		.word	g_armwave_state
 843 03e0 00000000 		.word	.LANCHOR0
 844 03e4 20000000 		.word	.LC2
 845 03e8 2C000000 		.word	.LC3
 846              		.cfi_endproc
 847              	.LFE60:
 849              		.global	__aeabi_idiv
 850              		.align	2
 851              		.global	armwave_generate
 852              		.syntax unified
 853              		.arm
 854              		.fpu vfp
 856              	armwave_generate:
 857              	.LFB61:
 202:armwave.c     ****             }
 203:armwave.c     ****         }
 204:armwave.c     ****     }
 205:armwave.c     **** }
 206:armwave.c     **** 
 207:armwave.c     **** /*
 208:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 209:armwave.c     ****  */
 210:armwave.c     **** void armwave_generate()
 211:armwave.c     **** {
 858              		.loc 1 211 1 is_stmt 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 72
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 212:armwave.c     ****     uint32_t yy;
 862              		.loc 1 212 5 view .LVU218
 213:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 863              		.loc 1 213 5 view .LVU219
 864              	.LVL47:
 214:armwave.c     **** 
 215:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 865              		.loc 1 215 5 view .LVU220
 866              	@ armwave.c:211: {
 211:armwave.c     ****     uint32_t yy;
 867              		.loc 1 211 1 is_stmt 0 view .LVU221
 868 03ec F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 869              		.cfi_def_cfa_offset 36
 870              		.cfi_offset 4, -36
 871              		.cfi_offset 5, -32
 872              		.cfi_offset 6, -28
 873              		.cfi_offset 7, -24
 874              		.cfi_offset 8, -20
 875              		.cfi_offset 9, -16
 876              		.cfi_offset 10, -12
 877              		.cfi_offset 11, -8
 878              		.cfi_offset 14, -4
 879              	@ armwave.c:215:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 880              		.loc 1 215 5 view .LVU222
 881 03f0 0010A0E3 		mov	r1, #0	@,
 882              	@ armwave.c:215:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 883              		.loc 1 215 58 view .LVU223
 884 03f4 90429FE5 		ldr	r4, .L64	@ tmp212,
 885              	@ armwave.c:211: {
 211:armwave.c     ****     uint32_t yy;
 886              		.loc 1 211 1 view .LVU224
 887 03f8 4CD04DE2 		sub	sp, sp, #76	@,,
 888              		.cfi_def_cfa_offset 112
 889              	@ armwave.c:215:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 890              		.loc 1 215 5 view .LVU225
 891 03fc 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 892 0400 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 893 0404 FEFFFFEB 		bl	memset		@
 894              	.LVL48:
 216:armwave.c     **** 
 217:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 895              		.loc 1 217 5 is_stmt 1 view .LVU226
 896              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 897              		.loc 1 217 68 is_stmt 0 view .LVU227
 898 0408 445094E5 		ldr	r5, [r4, #68]	@ _133, g_armwave_state.slice_height
 899              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 900              		.loc 1 217 51 view .LVU228
 901 040c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 902 0410 0510A0E1 		mov	r1, r5	@, _133
 903              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 904              		.loc 1 217 68 view .LVU229
 905 0414 24508DE5 		str	r5, [sp, #36]	@ _133, %sfp
 906              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 907              		.loc 1 217 51 view .LVU230
 908 0418 FEFFFFEB 		bl	__aeabi_idiv		@
 909              	.LVL49:
 910              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 911              		.loc 1 217 5 view .LVU231
 912 041c 003050E2 		subs	r3, r0, #0	@ _179,
 913 0420 40308DE5 		str	r3, [sp, #64]	@ _179, %sfp
 914 0424 9600000A 		beq	.L44		@,
 915              	.LBB10:
 916              	.LBB11:
 917              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 918              		.loc 1 79 35 view .LVU232
 919 0428 383094E5 		ldr	r3, [r4, #56]	@ _38, g_armwave_state.waves
 920              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 921              		.loc 1 80 81 view .LVU233
 922 042c 341094E5 		ldr	r1, [r4, #52]	@ _24, g_armwave_state.wave_stride
 923 0430 000053E3 		cmp	r3, #0	@ _38,
 924              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 925              		.loc 1 79 35 view .LVU234
 926 0434 30308DE5 		str	r3, [sp, #48]	@ _38, %sfp
 927              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 928              		.loc 1 71 40 view .LVU235
 929 0438 048094E5 		ldr	r8, [r4, #4]	@ _16, g_armwave_state.ch1_buffer
 930              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 931              		.loc 1 71 82 view .LVU236
 932 043c 243094E5 		ldr	r3, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 933              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 934              		.loc 1 71 147 view .LVU237
 935 0440 409094E5 		ldr	r9, [r4, #64]	@ _21, g_armwave_state.bitdepth_height
 936              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 937              		.loc 1 80 36 view .LVU238
 938 0444 142094E5 		ldr	r2, [r4, #20]	@ _23, g_armwave_state.wave_buffer
 939              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 940              		.loc 1 80 81 view .LVU239
 941 0448 2C108DE5 		str	r1, [sp, #44]	@ _24, %sfp
 942 044c 8C0000DA 		ble	.L44		@,
 943 0450 000055E3 		cmp	r5, #0	@ _133,
 944 0454 8A00000A 		beq	.L44		@,
 945 0458 930500E0 		mul	r0, r3, r5	@ _185, _17, _133
 946 045c 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp235, _17, _17,
 947 0460 10208DE5 		str	r2, [sp, #16]	@ ivtmp.76, %sfp
 948 0464 002062E2 		rsb	r2, r2, #0	@ ivtmp.75, ivtmp.76
 949 0468 44008DE5 		str	r0, [sp, #68]	@ _185, %sfp
 950 046c 14208DE5 		str	r2, [sp, #20]	@ ivtmp.75, %sfp
 951 0470 8300A0E1 		lsl	r0, r3, #1	@ tmp231, _17,
 952 0474 8120A0E1 		lsl	r2, r1, #1	@ tmp236, tmp235,
 953 0478 09B0A0E1 		mov	fp, r9	@ _21, _21
 954 047c 00C0A0E3 		mov	ip, #0	@ ivtmp.74,
 955 0480 3C208DE5 		str	r2, [sp, #60]	@ tmp236, %sfp
 956 0484 032080E0 		add	r2, r0, r3	@ ivtmp.64, tmp231, _17
 957 0488 0331A0E1 		lsl	r3, r3, #2	@ _208, _17,
 958 048c 38008DE5 		str	r0, [sp, #56]	@ tmp231, %sfp
 959 0490 18C08DE5 		str	ip, [sp, #24]	@ ivtmp.74, %sfp
 960 0494 34208DE5 		str	r2, [sp, #52]	@ ivtmp.64, %sfp
 961              	.LBE11:
 962              	.LBE10:
 963              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 964              		.loc 1 217 12 view .LVU240
 965 0498 28C08DE5 		str	ip, [sp, #40]	@ ivtmp.74, %sfp
 966 049c 1C308DE5 		str	r3, [sp, #28]	@ _208, %sfp
 967              	.LVL50:
 968              	.L50:
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 219:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 220:armwave.c     **** 
 221:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 969              		.loc 1 221 9 is_stmt 1 discriminator 3 view .LVU241
 970              	.LBB13:
 971              	.LBI10:
  62:armwave.c     **** {
 972              		.loc 1 62 6 discriminator 3 view .LVU242
 973              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 974              		.loc 1 64 5 discriminator 3 view .LVU243
  65:armwave.c     ****     uint8_t *wave_base;
 975              		.loc 1 65 5 discriminator 3 view .LVU244
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 976              		.loc 1 66 5 discriminator 3 view .LVU245
  67:armwave.c     ****     bufftyp_t *write_buffer;
 977              		.loc 1 67 5 discriminator 3 view .LVU246
  68:armwave.c     **** 
 978              		.loc 1 68 5 discriminator 3 view .LVU247
  71:armwave.c     **** 
 979              		.loc 1 71 5 discriminator 3 view .LVU248
 980              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 981              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU249
 982 04a0 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.74, %sfp
 983              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 984              		.loc 1 71 130 discriminator 3 view .LVU250
 985 04a4 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.76, %sfp
 986              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 987              		.loc 1 71 105 discriminator 3 view .LVU251
 988 04a8 2338A0E1 		lsr	r3, r3, #16	@ tmp237, ivtmp.74,
 989              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 990              		.loc 1 71 130 discriminator 3 view .LVU252
 991 04ac 00208DE5 		str	r2, [sp]	@ ivtmp.76, %sfp
 992 04b0 9B0307E0 		mul	r7, fp, r3	@ _22, _21, tmp237
 993              	.LVL51:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 994              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU253
 995              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 996              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU254
 997 04b4 14309DE5 		ldr	r3, [sp, #20]	@ ivtmp.75, %sfp
 998 04b8 04308DE5 		str	r3, [sp, #4]	@ ivtmp.75, %sfp
 999              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1000              		.loc 1 79 11 discriminator 3 view .LVU255
 1001 04bc 0030A0E3 		mov	r3, #0	@ w,
 1002 04c0 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1003              	.LVL52:
 1004              	.L47:
  80:armwave.c     **** 
 1005              		.loc 1 80 9 is_stmt 1 view .LVU256
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1006              		.loc 1 84 9 view .LVU257
 1007              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1008              		.loc 1 79 11 is_stmt 0 view .LVU258
 1009 04c4 38509DE5 		ldr	r5, [sp, #56]	@ ivtmp.65, %sfp
 1010 04c8 34A09DE5 		ldr	r10, [sp, #52]	@ ivtmp.64, %sfp
 1011 04cc 00309DE5 		ldr	r3, [sp]	@ ivtmp.71, %sfp
 1012 04d0 08308DE5 		str	r3, [sp, #8]	@ ivtmp.71, %sfp
 1013              	.LVL53:
 1014              	.L49:
  87:armwave.c     **** 
 1015              		.loc 1 87 13 is_stmt 1 view .LVU259
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1016              		.loc 1 101 17 view .LVU260
 106:armwave.c     ****                 word >>= 8;
 1017              		.loc 1 106 17 view .LVU261
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1018              		.loc 1 101 17 view .LVU262
 106:armwave.c     ****                 word >>= 8;
 1019              		.loc 1 106 17 view .LVU263
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1020              		.loc 1 101 17 view .LVU264
 106:armwave.c     ****                 word >>= 8;
 1021              		.loc 1 106 17 view .LVU265
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1022              		.loc 1 101 17 view .LVU266
 106:armwave.c     ****                 word >>= 8;
 1023              		.loc 1 106 17 view .LVU267
 1024              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1025              		.loc 1 102 34 is_stmt 0 view .LVU268
 1026 04d4 3C209DE5 		ldr	r2, [sp, #60]	@ tmp236, %sfp
 1027              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1028              		.loc 1 87 18 view .LVU269
 1029 04d8 08E09DE5 		ldr	lr, [sp, #8]	@ ivtmp.63, %sfp
 1030              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1031              		.loc 1 102 34 view .LVU270
 1032 04dc 053082E0 		add	r3, r2, r5	@ tmp245, tmp236, ivtmp.65
 1033 04e0 0A1082E0 		add	r1, r2, r10	@ tmp262, tmp236, ivtmp.64
 1034              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1035              		.loc 1 102 74 view .LVU271
 1036 04e4 2338A0E1 		lsr	r3, r3, #16	@ tmp246, tmp245,
 1037              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1038              		.loc 1 87 18 view .LVU272
 1039 04e8 04009EE4 		ldr	r0, [lr], #4	@ word, MEM[base: _204, offset: 0B]
 1040              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1041              		.loc 1 106 47 view .LVU273
 1042 04ec 9B7323E0 		mla	r3, fp, r3, r7	@ tmp248, _21, tmp246, _22
 1043              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1044              		.loc 1 94 20 view .LVU274
 1045 04f0 FF9010E2 		ands	r9, r0, #255	@ scale_value, word,
 1046              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1047              		.loc 1 107 22 view .LVU275
 1048 04f4 2068A0E1 		lsr	r6, r0, #16	@ word, word,
 1049              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1050              		.loc 1 94 20 view .LVU276
 1051 04f8 0160A003 		moveq	r6, #1	@ tmp239,
 1052 04fc 0060A013 		movne	r6, #0	@ tmp239,
 1053              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1054              		.loc 1 106 47 view .LVU277
 1055 0500 093083E0 		add	r3, r3, r9	@ tmp249, tmp248, scale_value
 1056              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1057              		.loc 1 94 19 view .LVU278
 1058 0504 FF0059E3 		cmp	r9, #255	@ scale_value,
 1059 0508 01608603 		orreq	r6, r6, #1	@,, tmp244, tmp239
 1060              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1061              		.loc 1 87 18 view .LVU279
 1062 050c 08E08DE5 		str	lr, [sp, #8]	@ ivtmp.63, %sfp
 1063              	.LVL54:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1064              		.loc 1 89 13 is_stmt 1 view .LVU280
  91:armwave.c     ****                 
 1065              		.loc 1 91 17 view .LVU281
  94:armwave.c     ****                     continue;
 1066              		.loc 1 94 17 view .LVU282
 1067              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1068              		.loc 1 84 9 is_stmt 0 view .LVU283
 1069 0510 0E90A0E1 		mov	r9, lr	@ ivtmp.63, ivtmp.63
 1070 0514 04E09DE5 		ldr	lr, [sp, #4]	@ ivtmp.70, %sfp
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1071              		.loc 1 84 9 view .LVU284
 1072 0518 1C409DE5 		ldr	r4, [sp, #28]	@ _208, %sfp
 1073              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1074              		.loc 1 102 74 view .LVU285
 1075 051c 2528A0E1 		lsr	r2, r5, #16	@ tmp279, ivtmp.65,
 1076 0520 2118A0E1 		lsr	r1, r1, #16	@ tmp263, tmp262,
 1077              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1078              		.loc 1 84 9 view .LVU286
 1079 0524 0E9089E0 		add	r9, r9, lr	@ tmp302, ivtmp.63, ivtmp.70
 1080              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1081              		.loc 1 94 19 view .LVU287
 1082 0528 000056E3 		cmp	r6, #0	@ tmp244,
 1083              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1084              		.loc 1 102 74 view .LVU288
 1085 052c 2AC8A0E1 		lsr	ip, r10, #16	@ tmp294, ivtmp.64,
 1086              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1087              		.loc 1 106 47 view .LVU289
 1088 0530 9B7121E0 		mla	r1, fp, r1, r7	@ tmp265, _21, tmp263, _22
 1089 0534 04A08AE0 		add	r10, r10, r4	@ ivtmp.64, ivtmp.64, _208
 1090              	.LVL55:
 106:armwave.c     ****                 word >>= 8;
 1091              		.loc 1 106 47 view .LVU290
 1092 0538 9B7222E0 		mla	r2, fp, r2, r7	@ tmp281, _21, tmp279, _22
 1093              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1094              		.loc 1 107 22 view .LVU291
 1095 053c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 1096              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1097              		.loc 1 106 47 view .LVU292
 1098 0540 8330A0E1 		lsl	r3, r3, #1	@ tmp250, tmp249,
 1099              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1100              		.loc 1 84 9 view .LVU293
 1101 0544 20908DE5 		str	r9, [sp, #32]	@ tmp302, %sfp
 1102              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1103              		.loc 1 94 19 view .LVU294
 1104 0548 2A00001A 		bne	.L55		@,
 1105              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1106              		.loc 1 94 20 view .LVU295
 1107 054c FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1108              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1109              		.loc 1 106 47 view .LVU296
 1110 0550 B36098E1 		ldrh	r6, [r8, r3]	@ *_86, *_86
 1111              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1112              		.loc 1 94 20 view .LVU297
 1113 0554 0190A003 		moveq	r9, #1	@ tmp256,
 1114 0558 0090A013 		movne	r9, #0	@ tmp256,
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU298
 1117 055c 041081E0 		add	r1, r1, r4	@ tmp266, tmp265, scale_value
 1118              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1119              		.loc 1 94 19 view .LVU299
 1120 0560 FF0054E3 		cmp	r4, #255	@ scale_value,
 1121 0564 0940A011 		movne	r4, r9	@, tmp261, tmp256
 1122 0568 01408903 		orreq	r4, r9, #1	@,, tmp261, tmp256
 1123              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1124              		.loc 1 106 47 view .LVU300
 1125 056c 016086E2 		add	r6, r6, #1	@ tmp253, *_86,
 1126              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1127              		.loc 1 94 19 view .LVU301
 1128 0570 000054E3 		cmp	r4, #0	@ tmp261,
 1129              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1130              		.loc 1 106 47 view .LVU302
 1131 0574 8110A0E1 		lsl	r1, r1, #1	@ tmp267, tmp266,
 1132 0578 B36088E1 		strh	r6, [r8, r3]	@ movhi	@ tmp253, *_86
 107:armwave.c     ****             }
 1133              		.loc 1 107 17 is_stmt 1 view .LVU303
 1134              	.LVL56:
  91:armwave.c     ****                 
 1135              		.loc 1 91 17 view .LVU304
  94:armwave.c     ****                     continue;
 1136              		.loc 1 94 17 view .LVU305
 1137              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1138              		.loc 1 94 19 is_stmt 0 view .LVU306
 1139 057c 1D00001A 		bne	.L55		@,
 1140              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1141              		.loc 1 94 20 view .LVU307
 1142 0580 2038A0E1 		lsr	r3, r0, #16	@ word, word,
 1143 0584 FFE013E2 		ands	lr, r3, #255	@ scale_value, word,
 1144              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1145              		.loc 1 106 47 view .LVU308
 1146 0588 B13098E1 		ldrh	r3, [r8, r1]	@ *_115, *_115
 1147              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1148              		.loc 1 94 20 view .LVU309
 1149 058c 0140A003 		moveq	r4, #1	@ tmp273,
 1150 0590 0040A013 		movne	r4, #0	@ tmp273,
 1151              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1152              		.loc 1 106 47 view .LVU310
 1153 0594 0E2082E0 		add	r2, r2, lr	@ tmp282, tmp281, scale_value
 1154              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1155              		.loc 1 94 19 view .LVU311
 1156 0598 FF005EE3 		cmp	lr, #255	@ scale_value,
 1157 059c 04E0A011 		movne	lr, r4	@, tmp278, tmp273
 1158 05a0 01E08403 		orreq	lr, r4, #1	@,, tmp278, tmp273
 1159              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1160              		.loc 1 106 47 view .LVU312
 1161 05a4 013083E2 		add	r3, r3, #1	@ tmp270, *_115,
 1162              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1163              		.loc 1 94 19 view .LVU313
 1164 05a8 00005EE3 		cmp	lr, #0	@ tmp278,
 1165              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1166              		.loc 1 106 47 view .LVU314
 1167 05ac 8220A0E1 		lsl	r2, r2, #1	@ tmp283, tmp282,
 1168 05b0 B13088E1 		strh	r3, [r8, r1]	@ movhi	@ tmp270, *_115
 107:armwave.c     ****             }
 1169              		.loc 1 107 17 is_stmt 1 view .LVU315
 1170              	.LVL57:
  91:armwave.c     ****                 
 1171              		.loc 1 91 17 view .LVU316
  94:armwave.c     ****                     continue;
 1172              		.loc 1 94 17 view .LVU317
 1173              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1174              		.loc 1 94 19 is_stmt 0 view .LVU318
 1175 05b4 0F00001A 		bne	.L55		@,
 1176              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1177              		.loc 1 94 20 view .LVU319
 1178 05b8 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 1179              	.LVL58:
 1180              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1181              		.loc 1 106 47 view .LVU320
 1182 05bc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp296, _21, tmp294, word
 1183 05c0 B23098E1 		ldrh	r3, [r8, r2]	@ *_144, *_144
 1184              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1185              		.loc 1 94 20 view .LVU321
 1186 05c4 0110A003 		moveq	r1, #1	@ tmp288,
 1187 05c8 0010A013 		movne	r1, #0	@ tmp288,
 1188              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1189              		.loc 1 106 47 view .LVU322
 1190 05cc 07C08CE0 		add	ip, ip, r7	@ tmp297, tmp296, _22
 1191              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1192              		.loc 1 94 19 view .LVU323
 1193 05d0 FF0050E3 		cmp	r0, #255	@ word,
 1194 05d4 0100A011 		movne	r0, r1	@, tmp293, tmp288
 1195 05d8 01008103 		orreq	r0, r1, #1	@,, tmp293, tmp288
 1196 05dc 000050E3 		cmp	r0, #0	@ tmp293,
 1197              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1198              		.loc 1 106 47 view .LVU324
 1199 05e0 8CC0A0E1 		lsl	ip, ip, #1	@ tmp298, tmp297,
 1200 05e4 013083E2 		add	r3, r3, #1	@ tmp286, *_144,
 1201 05e8 B23088E1 		strh	r3, [r8, r2]	@ movhi	@ tmp286, *_144
 107:armwave.c     ****             }
 1202              		.loc 1 107 17 is_stmt 1 view .LVU325
 1203              	.LVL59:
  91:armwave.c     ****                 
 1204              		.loc 1 91 17 view .LVU326
  94:armwave.c     ****                     continue;
 1205              		.loc 1 94 17 view .LVU327
 1206              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1207              		.loc 1 106 47 is_stmt 0 view .LVU328
 1208 05ec BC309801 		ldrheq	r3, [r8, ip]	@ *_173, *_173
 1209 05f0 01308302 		addeq	r3, r3, #1	@ tmp301, *_173,
 1210 05f4 BC308801 		strheq	r3, [r8, ip]	@ movhi	@ tmp301, *_173
 107:armwave.c     ****             }
 1211              		.loc 1 107 17 is_stmt 1 view .LVU329
 1212              	.LVL60:
 1213              	.L55:
 1214              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1215              		.loc 1 84 9 is_stmt 0 view .LVU330
 1216 05f8 D022CDE1 		ldrd	r2, [sp, #32]	@,,
 1217 05fc 020053E1 		cmp	r3, r2	@ _133, tmp302
 1218 0600 1C309DE5 		ldr	r3, [sp, #28]	@ _208, %sfp
 1219 0604 035085E0 		add	r5, r5, r3	@ ivtmp.65, ivtmp.65, _208
 1220 0608 B1FFFF8A 		bhi	.L49		@,
 1221              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1222              		.loc 1 79 44 view .LVU331
 1223 060c 0C309DE5 		ldr	r3, [sp, #12]	@ w, %sfp
 1224              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1225              		.loc 1 79 5 view .LVU332
 1226 0610 30209DE5 		ldr	r2, [sp, #48]	@ _38, %sfp
 1227              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1228              		.loc 1 79 44 view .LVU333
 1229 0614 013083E2 		add	r3, r3, #1	@ w, w,
 1230              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1231              		.loc 1 79 5 view .LVU334
 1232 0618 030052E1 		cmp	r2, r3	@ _38, w
 1233              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1234              		.loc 1 79 44 view .LVU335
 1235 061c 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1236              	.LVL61:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1237              		.loc 1 79 44 view .LVU336
 1238 0620 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.70, %sfp
 1239 0624 2C309DE5 		ldr	r3, [sp, #44]	@ _24, %sfp
 1240              	.LVL62:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1241              		.loc 1 79 44 view .LVU337
 1242 0628 032042E0 		sub	r2, r2, r3	@ ivtmp.70, ivtmp.70, _24
 1243 062c 04208DE5 		str	r2, [sp, #4]	@ ivtmp.70, %sfp
 1244 0630 00209DE5 		ldr	r2, [sp]	@ ivtmp.71, %sfp
 1245 0634 033082E0 		add	r3, r2, r3	@ ivtmp.71, ivtmp.71, _24
 1246 0638 00308DE5 		str	r3, [sp]	@ ivtmp.71, %sfp
 1247              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1248              		.loc 1 79 5 view .LVU338
 1249 063c A0FFFF1A 		bne	.L47		@,
 1250              	.LVL63:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1251              		.loc 1 79 5 view .LVU339
 1252              	.LBE12:
 1253              	.LBE13:
 222:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1254              		.loc 1 222 9 is_stmt 1 view .LVU340
 223:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1255              		.loc 1 223 9 view .LVU341
 1256              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1257              		.loc 1 217 86 is_stmt 0 view .LVU342
 1258 0640 28309DE5 		ldr	r3, [sp, #40]	@ yy, %sfp
 1259              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1260              		.loc 1 217 5 view .LVU343
 1261 0644 40209DE5 		ldr	r2, [sp, #64]	@ _179, %sfp
 1262              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1263              		.loc 1 217 86 view .LVU344
 1264 0648 013083E2 		add	r3, r3, #1	@ yy, yy,
 1265              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1266              		.loc 1 217 5 view .LVU345
 1267 064c 020053E1 		cmp	r3, r2	@ yy, _179
 1268              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1269              		.loc 1 217 86 view .LVU346
 1270 0650 28308DE5 		str	r3, [sp, #40]	@ yy, %sfp
 1271              	.LVL64:
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1272              		.loc 1 217 86 view .LVU347
 1273 0654 44209DE5 		ldr	r2, [sp, #68]	@ _185, %sfp
 1274 0658 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.74, %sfp
 1275              	.LVL65:
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1276              		.loc 1 217 86 view .LVU348
 1277 065c 023083E0 		add	r3, r3, r2	@ ivtmp.74, ivtmp.74, _185
 1278 0660 18308DE5 		str	r3, [sp, #24]	@ ivtmp.74, %sfp
 1279 0664 14209DE5 		ldr	r2, [sp, #20]	@ ivtmp.75, %sfp
 1280 0668 24309DE5 		ldr	r3, [sp, #36]	@ _133, %sfp
 1281 066c 032042E0 		sub	r2, r2, r3	@ ivtmp.75, ivtmp.75, _133
 1282 0670 14208DE5 		str	r2, [sp, #20]	@ ivtmp.75, %sfp
 1283 0674 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.76, %sfp
 1284 0678 033082E0 		add	r3, r2, r3	@ ivtmp.76, ivtmp.76, _133
 1285 067c 10308DE5 		str	r3, [sp, #16]	@ ivtmp.76, %sfp
 1286              	@ armwave.c:217:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1287              		.loc 1 217 5 view .LVU349
 1288 0680 86FFFF1A 		bne	.L50		@,
 1289              	.LVL66:
 1290              	.L44:
 1291              	@ armwave.c:227: }
 224:armwave.c     ****     }
 225:armwave.c     **** 
 226:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 227:armwave.c     **** }
 1292              		.loc 1 227 1 view .LVU350
 1293 0684 4CD08DE2 		add	sp, sp, #76	@,,
 1294              		.cfi_def_cfa_offset 36
 1295              		@ sp needed	@
 1296 0688 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1297              	.L65:
 1298              		.align	2
 1299              	.L64:
 1300 068c 00000000 		.word	g_armwave_state
 1301              		.cfi_endproc
 1302              	.LFE61:
 1304              		.align	2
 1305              		.global	armwave_setup_render
 1306              		.syntax unified
 1307              		.arm
 1308              		.fpu vfp
 1310              	armwave_setup_render:
 1311              	.LVL67:
 1312              	.LFB62:
 228:armwave.c     **** 
 229:armwave.c     **** /*
 230:armwave.c     ****  * Setup the renderer with passed parameters.
 231:armwave.c     ****  */
 232:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 233:armwave.c     **** {
 1313              		.loc 1 233 1 is_stmt 1 view -0
 1314              		.cfi_startproc
 1315              		@ args = 12, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 234:armwave.c     ****     uint32_t length, xx;
 1317              		.loc 1 234 5 view .LVU352
 235:armwave.c     ****     float points_per_pixel;
 1318              		.loc 1 235 5 view .LVU353
 236:armwave.c     **** 
 237:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1319              		.loc 1 237 5 view .LVU354
 1320              	@ armwave.c:233: {
 233:armwave.c     ****     uint32_t length, xx;
 1321              		.loc 1 233 1 is_stmt 0 view .LVU355
 1322 0690 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1323              		.cfi_def_cfa_offset 28
 1324              		.cfi_offset 4, -28
 1325              		.cfi_offset 5, -24
 1326              		.cfi_offset 6, -20
 1327              		.cfi_offset 7, -16
 1328              		.cfi_offset 8, -12
 1329              		.cfi_offset 9, -8
 1330              		.cfi_offset 14, -4
 1331 0694 028B2DED 		vpush.64	{d8}	@
 1332              		.cfi_def_cfa_offset 36
 1333              		.cfi_offset 80, -36
 1334              		.cfi_offset 81, -32
 1335 0698 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1336 069c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1337 06a0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1338 06a4 14D04DE2 		sub	sp, sp, #20	@,,
 1339              		.cfi_def_cfa_offset 56
 1340              	@ armwave.c:233: {
 233:armwave.c     ****     uint32_t length, xx;
 1341              		.loc 1 233 1 view .LVU356
 1342 06a8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1343 06ac D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1344 06b0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1345              	@ armwave.c:237:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1346              		.loc 1 237 5 view .LVU357
 1347 06b4 00308DE5 		str	r3, [sp]	@ wave_stride,
 1348 06b8 F460CDE1 		strd	r6, [sp, #4]	@,,
 1349 06bc 0230A0E1 		mov	r3, r2	@, waves_max
 1350              	.LVL68:
 1351              		.loc 1 237 5 view .LVU358
 1352 06c0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1353 06c4 0120A0E1 		mov	r2, r1	@, end_point
 1354              	.LVL69:
 1355              		.loc 1 237 5 view .LVU359
 1356 06c8 0010A0E1 		mov	r1, r0	@, start_point
 1357              	.LVL70:
 1358              		.loc 1 237 5 view .LVU360
 1359 06cc E0019FE5 		ldr	r0, .L80+12	@,
 1360              	.LVL71:
 1361              		.loc 1 237 5 view .LVU361
 1362 06d0 FEFFFFEB 		bl	printf		@
 1363              	.LVL72:
 238:armwave.c     **** 
 239:armwave.c     ****     // TODO these asserts should instead raise PyExc
 240:armwave.c     ****     assert(start_point < end_point);
 1364              		.loc 1 240 5 is_stmt 1 view .LVU362
 1365 06d4 050054E1 		cmp	r4, r5	@ start_point, end_point
 1366 06d8 6300002A 		bcs	.L77		@,
 241:armwave.c     **** 
 242:armwave.c     ****     /*
 243:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 244:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 245:armwave.c     ****     if(target_height == 256) {
 246:armwave.c     ****         g_armwave_state.row_shift = 8;
 247:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 248:armwave.c     ****     } else if(target_height == 512) {
 249:armwave.c     ****         g_armwave_state.row_shift = 9;
 250:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 251:armwave.c     ****     } else if(target_height == 1024) {
 252:armwave.c     ****         g_armwave_state.row_shift = 10;
 253:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 254:armwave.c     ****     } else if(target_height == 2048) {
 255:armwave.c     ****         g_armwave_state.row_shift = 11;
 256:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 257:armwave.c     ****     }
 258:armwave.c     ****     */
 259:armwave.c     **** 
 260:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 261:armwave.c     ****     g_armwave_state.xstride = target_height;
 1367              		.loc 1 261 5 view .LVU363
 1368              	@ armwave.c:272:     g_armwave_state.wave_length = end_point - start_point;
 262:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 263:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 264:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 265:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 266:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 267:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 268:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 269:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 270:armwave.c     ****     g_armwave_state.target_width = target_width;
 271:armwave.c     ****     g_armwave_state.target_height = target_height;
 272:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1369              		.loc 1 272 45 is_stmt 0 view .LVU364
 1370 06dc 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1371              	.LVL73:
 1372              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1373              		.loc 1 262 49 view .LVU365
 1374 06e0 706A9FED 		vldr.32	s12, .L80	@ tmp174,
 1375              	@ armwave.c:276:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 273:armwave.c     **** 
 274:armwave.c     ****     // Calculate compound scaler
 275:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 276:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1376              		.loc 1 276 48 view .LVU366
 1377 06e4 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1378              	@ armwave.c:276:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1379              		.loc 1 276 79 view .LVU367
 1380 06e8 6F6ADFED 		vldr.32	s13, .L80+4	@ tmp198,
 1381              	@ armwave.c:269:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 1382              		.loc 1 269 90 view .LVU368
 1383 06ec 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 1384              	@ armwave.c:261:     g_armwave_state.xstride = target_height;
 261:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1385              		.loc 1 261 29 view .LVU369
 1386 06f0 C0419FE5 		ldr	r4, .L80+16	@ tmp242,
 1387              	.LVL74:
 1388              	@ armwave.c:276:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1389              		.loc 1 276 48 view .LVU370
 1390 06f4 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 1391              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1392              		.loc 1 262 49 view .LVU371
 1393 06f8 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1394              	@ armwave.c:267:     g_armwave_state.size = target_height * target_width;
 267:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1395              		.loc 1 267 42 view .LVU372
 1396 06fc 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 1397              	@ armwave.c:269:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 1398              		.loc 1 269 95 view .LVU373
 1399 0700 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 1400              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1401              		.loc 1 262 49 view .LVU374
 1402 0704 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 1403              	@ armwave.c:276:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1404              		.loc 1 276 48 view .LVU375
 1405 0708 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1406              	@ armwave.c:278:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 277:armwave.c     **** 
 278:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1407              		.loc 1 278 5 view .LVU376
 1408 070c 0128A0E3 		mov	r2, #65536	@ tmp201,
 1409 0710 04508DE5 		str	r5, [sp, #4]	@ _13,
 1410 0714 00608DE5 		str	r6, [sp]	@ target_width,
 1411              	@ armwave.c:276:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 276:armwave.c     **** 
 1412              		.loc 1 276 48 view .LVU377
 1413 0718 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1414              	@ armwave.c:269:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 1415              		.loc 1 269 95 view .LVU378
 1416 071c 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 1417              	@ armwave.c:261:     g_armwave_state.xstride = target_height;
 261:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1418              		.loc 1 261 29 view .LVU379
 1419 0720 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1420              		.loc 1 262 5 is_stmt 1 view .LVU380
 1421              	@ armwave.c:264:     g_armwave_state.wave_stride = wave_stride;
 264:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1422              		.loc 1 264 33 is_stmt 0 view .LVU381
 1423 0724 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1424              	@ armwave.c:265:     g_armwave_state.waves_max = waves_max;
 265:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1425              		.loc 1 265 31 view .LVU382
 1426 0728 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1427              	@ armwave.c:266:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 266:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1428              		.loc 1 266 27 view .LVU383
 1429 072c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1430              	@ armwave.c:271:     g_armwave_state.target_height = target_height;
 271:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1431              		.loc 1 271 35 view .LVU384
 1432 0730 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1433              	@ armwave.c:278:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1434              		.loc 1 278 5 view .LVU385
 1435 0734 08208DE5 		str	r2, [sp, #8]	@ tmp201,
 1436              	@ armwave.c:276:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 276:armwave.c     **** 
 1437              		.loc 1 276 48 view .LVU386
 1438 0738 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1439              	@ armwave.c:268:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 268:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1440              		.loc 1 268 37 view .LVU387
 1441 073c 022CA0E3 		mov	r2, #512	@ tmp184,
 1442              	@ armwave.c:267:     g_armwave_state.size = target_height * target_width;
 267:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1443              		.loc 1 267 26 view .LVU388
 1444 0740 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1445              	@ armwave.c:268:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 268:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1446              		.loc 1 268 37 view .LVU389
 1447 0744 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1448              	@ armwave.c:278:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1449              		.loc 1 278 5 view .LVU390
 1450 0748 0310A0E1 		mov	r1, r3	@, tmp189
 1451              	@ armwave.c:269:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 1452              		.loc 1 269 34 view .LVU391
 1453 074c 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1454              	@ armwave.c:272:     g_armwave_state.wave_length = end_point - start_point;
 272:armwave.c     **** 
 1455              		.loc 1 272 33 view .LVU392
 1456 0750 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1457              	@ armwave.c:278:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1458              		.loc 1 278 5 view .LVU393
 1459 0754 60019FE5 		ldr	r0, .L80+20	@,
 1460              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1461              		.loc 1 262 49 view .LVU394
 1462 0758 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1463              	@ armwave.c:276:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 276:armwave.c     **** 
 1464              		.loc 1 276 79 view .LVU395
 1465 075c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1466              	@ armwave.c:275:     g_armwave_state.cmp_x_bitdepth_scale = \
 275:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1467              		.loc 1 275 42 view .LVU396
 1468 0760 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1469              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1470              		.loc 1 262 33 view .LVU397
 1471 0764 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 263:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1472              		.loc 1 263 5 is_stmt 1 view .LVU398
 1473              	@ armwave.c:275:     g_armwave_state.cmp_x_bitdepth_scale = \
 275:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1474              		.loc 1 275 42 is_stmt 0 view .LVU399
 1475 0768 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1476              	@ armwave.c:263:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 263:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1477              		.loc 1 263 30 view .LVU400
 1478 076c C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1479              	@ armwave.c:278:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1480              		.loc 1 278 5 view .LVU401
 1481 0770 0C30A0E1 		mov	r3, ip	@, _19
 1482 0774 0C20A0E1 		mov	r2, ip	@, tmp3
 1483              	@ armwave.c:275:     g_armwave_state.cmp_x_bitdepth_scale = \
 275:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1484              		.loc 1 275 42 view .LVU402
 1485 0778 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1486              	@ armwave.c:263:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 263:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1487              		.loc 1 263 30 view .LVU403
 1488 077c 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 264:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1489              		.loc 1 264 5 is_stmt 1 view .LVU404
 265:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1490              		.loc 1 265 5 view .LVU405
 266:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1491              		.loc 1 266 5 view .LVU406
 267:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1492              		.loc 1 267 5 view .LVU407
 268:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1493              		.loc 1 268 5 view .LVU408
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 1494              		.loc 1 269 5 view .LVU409
 270:armwave.c     ****     g_armwave_state.target_height = target_height;
 1495              		.loc 1 270 5 view .LVU410
 271:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1496              		.loc 1 271 5 view .LVU411
 272:armwave.c     **** 
 1497              		.loc 1 272 5 view .LVU412
 275:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1498              		.loc 1 275 5 view .LVU413
 1499              		.loc 1 278 5 view .LVU414
 1500 0780 FEFFFFEB 		bl	printf		@
 1501              	.LVL75:
 279:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 280:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 281:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 282:armwave.c     **** 
 283:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 284:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 285:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 286:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1502              		.loc 1 286 5 view .LVU415
 1503              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer != NULL)
 287:armwave.c     **** 
 288:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1504              		.loc 1 288 23 is_stmt 0 view .LVU416
 1505 0784 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1506              	@ armwave.c:286:     g_armwave_state.slice_height = 256; // 64;  
 286:armwave.c     **** 
 1507              		.loc 1 286 34 view .LVU417
 1508 0788 013CA0E3 		mov	r3, #256	@ tmp203,
 1509              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer != NULL)
 1510              		.loc 1 288 7 view .LVU418
 1511 078c 000050E3 		cmp	r0, #0	@ _20,
 1512              	@ armwave.c:286:     g_armwave_state.slice_height = 256; // 64;  
 286:armwave.c     **** 
 1513              		.loc 1 286 34 view .LVU419
 1514 0790 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1515              		.loc 1 288 5 is_stmt 1 view .LVU420
 1516              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer != NULL)
 1517              		.loc 1 288 7 is_stmt 0 view .LVU421
 1518 0794 0000000A 		beq	.L68		@,
 289:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1519              		.loc 1 289 9 is_stmt 1 view .LVU422
 1520 0798 FEFFFFEB 		bl	free		@
 1521              	.LVL76:
 1522              	.L68:
 290:armwave.c     **** 
 291:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1523              		.loc 1 291 5 view .LVU423
 1524              	@ armwave.c:291:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1525              		.loc 1 291 34 is_stmt 0 view .LVU424
 1526 079c 0110A0E3 		mov	r1, #1	@,
 1527 07a0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1528 07a4 FEFFFFEB 		bl	calloc		@
 1529              	.LVL77:
 1530              	@ armwave.c:293:     assert(g_armwave_state.ch1_buffer != NULL);
 292:armwave.c     **** 
 293:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1531              		.loc 1 293 5 view .LVU425
 1532 07a8 000050E3 		cmp	r0, #0	@ _23,
 1533              	@ armwave.c:291:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 291:armwave.c     **** 
 1534              		.loc 1 291 34 view .LVU426
 1535 07ac 0070A0E1 		mov	r7, r0	@ _23,
 1536              	@ armwave.c:291:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 291:armwave.c     **** 
 1537              		.loc 1 291 32 view .LVU427
 1538 07b0 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1539              		.loc 1 293 5 is_stmt 1 view .LVU428
 1540 07b4 3600000A 		beq	.L78		@,
 294:armwave.c     **** 
 295:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 296:armwave.c     ****     length = end_point - start_point;
 1541              		.loc 1 296 5 view .LVU429
 1542              	.LVL78:
 297:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1543              		.loc 1 297 5 view .LVU430
 1544              	@ armwave.c:297:     points_per_pixel = length / ((float)(target_width));
 1545              		.loc 1 297 34 is_stmt 0 view .LVU431
 1546 07b8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1547              	@ armwave.c:297:     points_per_pixel = length / ((float)(target_width));
 1548              		.loc 1 297 22 view .LVU432
 1549 07bc 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1550              	@ armwave.c:298:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 298:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1551              		.loc 1 298 60 view .LVU433
 1552 07c0 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp253, g_armwave_state.slice_height
 1553              	@ armwave.c:299:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1554              		.loc 1 299 40 view .LVU434
 1555 07c4 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1556              	@ armwave.c:297:     points_per_pixel = length / ((float)(target_width));
 297:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1557              		.loc 1 297 34 view .LVU435
 1558 07c8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1559              	@ armwave.c:297:     points_per_pixel = length / ((float)(target_width));
 297:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1560              		.loc 1 297 22 view .LVU436
 1561 07cc 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1562              	@ armwave.c:298:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 298:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1563              		.loc 1 298 60 view .LVU437
 1564 07d0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp253
 1565              	@ armwave.c:297:     points_per_pixel = length / ((float)(target_width));
 297:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1566              		.loc 1 297 22 view .LVU438
 1567 07d4 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1568              	.LVL79:
 298:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1569              		.loc 1 298 5 is_stmt 1 view .LVU439
 1570              	@ armwave.c:298:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 298:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1571              		.loc 1 298 60 is_stmt 0 view .LVU440
 1572 07d8 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1573              	@ armwave.c:298:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 298:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1574              		.loc 1 298 41 view .LVU441
 1575 07dc E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1576 07e0 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1577              		.loc 1 299 5 is_stmt 1 view .LVU442
 1578              	@ armwave.c:299:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1579              		.loc 1 299 40 is_stmt 0 view .LVU443
 1580 07e4 FEFFFFEB 		bl	malloc		@
 1581              	.LVL80:
 1582              	@ armwave.c:301:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 300:armwave.c     **** 
 301:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1583              		.loc 1 301 5 view .LVU444
 1584 07e8 000050E3 		cmp	r0, #0	@ _31,
 1585              	@ armwave.c:299:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1586              		.loc 1 299 40 view .LVU445
 1587 07ec 0060A0E1 		mov	r6, r0	@ _31,
 1588              	@ armwave.c:299:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1589              		.loc 1 299 38 view .LVU446
 1590 07f0 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1591              		.loc 1 301 5 is_stmt 1 view .LVU447
 1592 07f4 2100000A 		beq	.L79		@,
 1593              	@ armwave.c:304:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 302:armwave.c     **** 
 303:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1594              		.loc 1 304 54 is_stmt 0 view .LVU448
 1595 07f8 2C7ADFED 		vldr.32	s15, .L80+8	@ tmp230,
 1596 07fc 020040E2 		sub	r0, r0, #2	@ ivtmp.80, _31,
 1597              	@ armwave.c:303:     for(xx = 0; xx < length; xx++) {
 303:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1598              		.loc 1 303 12 view .LVU449
 1599 0800 0030A0E3 		mov	r3, #0	@ xx,
 1600              	@ armwave.c:304:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1601              		.loc 1 304 54 view .LVU450
 1602 0804 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1603              	.L71:
 1604              	.LVL81:
 1605              		.loc 1 304 9 is_stmt 1 discriminator 3 view .LVU451
 1606              	@ armwave.c:304:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1607              		.loc 1 304 74 is_stmt 0 discriminator 3 view .LVU452
 1608 0808 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1609              	@ armwave.c:303:     for(xx = 0; xx < length; xx++) {
 303:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1610              		.loc 1 303 32 discriminator 3 view .LVU453
 1611 080c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1612              	.LVL82:
 1613              	@ armwave.c:303:     for(xx = 0; xx < length; xx++) {
 303:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1614              		.loc 1 303 5 discriminator 3 view .LVU454
 1615 0810 030055E1 		cmp	r5, r3	@ _13, xx
 1616              	@ armwave.c:304:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1617              		.loc 1 304 74 discriminator 3 view .LVU455
 1618 0814 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1619 0818 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1620              	@ armwave.c:304:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1621              		.loc 1 304 46 discriminator 3 view .LVU456
 1622 081c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1623 0820 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1624 0824 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1625              	@ armwave.c:303:     for(xx = 0; xx < length; xx++) {
 303:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1626              		.loc 1 303 5 discriminator 3 view .LVU457
 1627 0828 F6FFFF1A 		bne	.L71		@,
 305:armwave.c     **** 
 306:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 307:armwave.c     ****     }
 308:armwave.c     **** 
 309:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1628              		.loc 1 309 5 is_stmt 1 view .LVU458
 1629              	@ armwave.c:309:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1630              		.loc 1 309 34 is_stmt 0 view .LVU459
 1631 082c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1632 0830 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1633 0834 FEFFFFEB 		bl	malloc		@
 1634              	.LVL83:
 1635              	@ armwave.c:311:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 310:armwave.c     **** 
 311:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1636              		.loc 1 311 5 view .LVU460
 1637 0838 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1638 083c 0620A0E1 		mov	r2, r6	@, _31
 1639 0840 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1640 0844 0710A0E1 		mov	r1, r7	@, _23
 1641              	@ armwave.c:309:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 309:armwave.c     **** 
 1642              		.loc 1 309 34 view .LVU461
 1643 0848 00C0A0E1 		mov	ip, r0	@ tmp237,
 1644              	@ armwave.c:311:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1645              		.loc 1 311 5 view .LVU462
 1646 084c 0030A0E1 		mov	r3, r0	@, tmp237
 1647              	@ armwave.c:309:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 309:armwave.c     **** 
 1648              		.loc 1 309 32 view .LVU463
 1649 0850 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1650              		.loc 1 311 5 is_stmt 1 view .LVU464
 1651 0854 64009FE5 		ldr	r0, .L80+24	@,
 1652 0858 FEFFFFEB 		bl	printf		@
 1653              	.LVL84:
 312:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 313:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 316:armwave.c     **** 
 317:armwave.c     ****     malloc_stats();
 1654              		.loc 1 317 5 view .LVU465
 1655              	@ armwave.c:318: }
 318:armwave.c     **** }
 1656              		.loc 1 318 1 is_stmt 0 view .LVU466
 1657 085c 14D08DE2 		add	sp, sp, #20	@,,
 1658              		.cfi_remember_state
 1659              		.cfi_def_cfa_offset 36
 1660              		@ sp needed	@
 1661 0860 028BBDEC 		vldm	sp!, {d8}	@
 1662              		.cfi_restore 80
 1663              		.cfi_restore 81
 1664              		.cfi_def_cfa_offset 28
 1665              	.LVL85:
 1666              		.loc 1 318 1 view .LVU467
 1667 0864 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1668              		.cfi_restore 14
 1669              		.cfi_restore 9
 1670              		.cfi_restore 8
 1671              		.cfi_restore 7
 1672              		.cfi_restore 6
 1673              		.cfi_restore 5
 1674              		.cfi_restore 4
 1675              		.cfi_def_cfa_offset 0
 1676              	.LVL86:
 1677              	@ armwave.c:317:     malloc_stats();
 317:armwave.c     **** }
 1678              		.loc 1 317 5 view .LVU468
 1679 0868 FEFFFFEA 		b	malloc_stats		@
 1680              	.LVL87:
 1681              	.L77:
 1682              		.cfi_restore_state
 240:armwave.c     **** 
 1683              		.loc 1 240 5 is_stmt 1 discriminator 1 view .LVU469
 1684 086c 50309FE5 		ldr	r3, .L80+28	@,
 1685 0870 F020A0E3 		mov	r2, #240	@,
 1686 0874 4C109FE5 		ldr	r1, .L80+32	@,
 1687 0878 4C009FE5 		ldr	r0, .L80+36	@,
 1688 087c FEFFFFEB 		bl	__assert_fail		@
 1689              	.LVL88:
 1690              	.L79:
 301:armwave.c     **** 
 1691              		.loc 1 301 5 discriminator 1 view .LVU470
 1692 0880 3C309FE5 		ldr	r3, .L80+28	@,
 1693 0884 44209FE5 		ldr	r2, .L80+40	@,
 1694 0888 38109FE5 		ldr	r1, .L80+32	@,
 1695 088c 40009FE5 		ldr	r0, .L80+44	@,
 1696 0890 FEFFFFEB 		bl	__assert_fail		@
 1697              	.LVL89:
 1698              	.L78:
 293:armwave.c     **** 
 1699              		.loc 1 293 5 discriminator 1 view .LVU471
 1700 0894 28309FE5 		ldr	r3, .L80+28	@,
 1701 0898 38209FE5 		ldr	r2, .L80+48	@,
 1702 089c 24109FE5 		ldr	r1, .L80+32	@,
 1703 08a0 34009FE5 		ldr	r0, .L80+52	@,
 1704 08a4 FEFFFFEB 		bl	__assert_fail		@
 1705              	.LVL90:
 1706              	.L81:
 1707              		.align	2
 1708              	.L80:
 1709 08a8 00007F43 		.word	1132396544
 1710 08ac 00008047 		.word	1199570944
 1711 08b0 0000803F 		.word	1065353216
 1712 08b4 40000000 		.word	.LC4
 1713 08b8 00000000 		.word	g_armwave_state
 1714 08bc 84000000 		.word	.LC6
 1715 08c0 34010000 		.word	.LC9
 1716 08c4 1C000000 		.word	.LANCHOR0+28
 1717 08c8 20000000 		.word	.LC2
 1718 08cc 6C000000 		.word	.LC5
 1719 08d0 2D010000 		.word	301
 1720 08d4 08010000 		.word	.LC8
 1721 08d8 25010000 		.word	293
 1722 08dc E4000000 		.word	.LC7
 1723              		.cfi_endproc
 1724              	.LFE62:
 1726              		.align	2
 1727              		.global	armwave_set_wave_pointer
 1728              		.syntax unified
 1729              		.arm
 1730              		.fpu vfp
 1732              	armwave_set_wave_pointer:
 1733              	.LVL91:
 1734              	.LFB63:
 319:armwave.c     **** 
 320:armwave.c     **** /*
 321:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 322:armwave.c     ****  * in the future.
 323:armwave.c     ****  */
 324:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 325:armwave.c     **** {
 1735              		.loc 1 325 1 view -0
 1736              		.cfi_startproc
 1737              		@ args = 0, pretend = 0, frame = 0
 1738              		@ frame_needed = 0, uses_anonymous_args = 0
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1739              		.loc 1 326 5 view .LVU473
 1740 08e0 000050E3 		cmp	r0, #0	@ wave_buffer
 1741              		.loc 1 326 5 is_stmt 0 view .LVU474
 1742 08e4 0200000A 		beq	.L87		@,
 327:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1743              		.loc 1 327 5 is_stmt 1 view .LVU475
 1744              	@ armwave.c:327:     g_armwave_state.wave_buffer = wave_buffer;
 1745              		.loc 1 327 33 is_stmt 0 view .LVU476
 1746 08e8 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1747 08ec 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1748 08f0 1EFF2FE1 		bx	lr	@
 1749              	.L87:
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1750              		.loc 1 326 5 is_stmt 1 discriminator 1 view .LVU477
 1751              	@ armwave.c:325: {
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1752              		.loc 1 325 1 is_stmt 0 discriminator 1 view .LVU478
 1753 08f4 10402DE9 		push	{r4, lr}	@
 1754              		.cfi_def_cfa_offset 8
 1755              		.cfi_offset 4, -8
 1756              		.cfi_offset 14, -4
 1757              	@ armwave.c:326:     assert(wave_buffer != NULL);
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1758              		.loc 1 326 5 discriminator 1 view .LVU479
 1759 08f8 10309FE5 		ldr	r3, .L88+4	@,
 1760 08fc 10209FE5 		ldr	r2, .L88+8	@,
 1761 0900 10109FE5 		ldr	r1, .L88+12	@,
 1762 0904 10009FE5 		ldr	r0, .L88+16	@,
 1763              	.LVL92:
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1764              		.loc 1 326 5 discriminator 1 view .LVU480
 1765 0908 FEFFFFEB 		bl	__assert_fail		@
 1766              	.LVL93:
 1767              	.L89:
 1768              		.align	2
 1769              	.L88:
 1770 090c 00000000 		.word	g_armwave_state
 1771 0910 34000000 		.word	.LANCHOR0+52
 1772 0914 46010000 		.word	326
 1773 0918 20000000 		.word	.LC2
 1774 091c 58010000 		.word	.LC10
 1775              		.cfi_endproc
 1776              	.LFE63:
 1778              		.align	2
 1779              		.global	armwave_set_wave_pointer_as_testbuf
 1780              		.syntax unified
 1781              		.arm
 1782              		.fpu vfp
 1784              	armwave_set_wave_pointer_as_testbuf:
 1785              	.LVL94:
 1786              	.LFB64:
 328:armwave.c     **** }
 329:armwave.c     **** 
 330:armwave.c     **** /*
 331:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 332:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 333:armwave.c     ****  */
 334:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 335:armwave.c     **** {
 1787              		.loc 1 335 1 is_stmt 1 view -0
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 0
 1790              		@ frame_needed = 0, uses_anonymous_args = 0
 1791              		@ link register save eliminated.
 336:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1792              		.loc 1 336 5 view .LVU482
 1793              	@ armwave.c:336:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1794              		.loc 1 336 29 is_stmt 0 view .LVU483
 1795 0920 24309FE5 		ldr	r3, .L93	@ tmp117,
 1796              	@ armwave.c:336:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1797              		.loc 1 336 7 view .LVU484
 1798 0924 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1799 0928 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1800 092c 0400003A 		bcc	.L92		@,
 337:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 338:armwave.c     ****         return;
 339:armwave.c     ****     }
 340:armwave.c     **** 
 341:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1801              		.loc 1 341 5 is_stmt 1 view .LVU485
 1802              	@ armwave.c:341:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1803              		.loc 1 341 111 is_stmt 0 view .LVU486
 1804 0930 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1805              	@ armwave.c:341:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1806              		.loc 1 341 68 view .LVU487
 1807 0934 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1808 0938 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1809              	.LVL95:
 1810              	@ armwave.c:341:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1811              		.loc 1 341 33 view .LVU488
 1812 093c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1813              	@ armwave.c:342: }
 342:armwave.c     **** }
 1814              		.loc 1 342 1 view .LVU489
 1815 0940 1EFF2FE1 		bx	lr	@
 1816              	.LVL96:
 1817              	.L92:
 337:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1818              		.loc 1 337 9 is_stmt 1 view .LVU490
 1819 0944 04009FE5 		ldr	r0, .L93+4	@,
 1820              	.LVL97:
 337:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1821              		.loc 1 337 9 is_stmt 0 view .LVU491
 1822 0948 FEFFFFEA 		b	puts		@
 1823              	.LVL98:
 1824              	.L94:
 1825              		.align	2
 1826              	.L93:
 1827 094c 00000000 		.word	g_armwave_state
 1828 0950 6C010000 		.word	.LC11
 1829              		.cfi_endproc
 1830              	.LFE64:
 1832              		.align	2
 1833              		.global	armwave_set_wave_pointer_u32
 1834              		.syntax unified
 1835              		.arm
 1836              		.fpu vfp
 1838              	armwave_set_wave_pointer_u32:
 1839              	.LVL99:
 1840              	.LFB65:
 343:armwave.c     **** 
 344:armwave.c     **** /*
 345:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 346:armwave.c     ****  * disjointed buffers in the future.
 347:armwave.c     ****  */
 348:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 349:armwave.c     **** {
 1841              		.loc 1 349 1 is_stmt 1 view -0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1845              		.loc 1 350 5 view .LVU493
 1846 0954 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1847              		.loc 1 350 5 is_stmt 0 view .LVU494
 1848 0958 0200000A 		beq	.L100		@,
 351:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1849              		.loc 1 351 5 is_stmt 1 view .LVU495
 1850              	@ armwave.c:351:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1851              		.loc 1 351 33 is_stmt 0 view .LVU496
 1852 095c 1C309FE5 		ldr	r3, .L101	@ tmp117,
 1853 0960 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1854 0964 1EFF2FE1 		bx	lr	@
 1855              	.L100:
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1856              		.loc 1 350 5 is_stmt 1 discriminator 1 view .LVU497
 1857              	@ armwave.c:349: {
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1858              		.loc 1 349 1 is_stmt 0 discriminator 1 view .LVU498
 1859 0968 10402DE9 		push	{r4, lr}	@
 1860              		.cfi_def_cfa_offset 8
 1861              		.cfi_offset 4, -8
 1862              		.cfi_offset 14, -4
 1863              	@ armwave.c:350:     assert(wave_buffer_ptr != 0);
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1864              		.loc 1 350 5 discriminator 1 view .LVU499
 1865 096c 10309FE5 		ldr	r3, .L101+4	@,
 1866 0970 10209FE5 		ldr	r2, .L101+8	@,
 1867 0974 10109FE5 		ldr	r1, .L101+12	@,
 1868 0978 10009FE5 		ldr	r0, .L101+16	@,
 1869              	.LVL100:
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1870              		.loc 1 350 5 discriminator 1 view .LVU500
 1871 097c FEFFFFEB 		bl	__assert_fail		@
 1872              	.LVL101:
 1873              	.L102:
 1874              		.align	2
 1875              	.L101:
 1876 0980 00000000 		.word	g_armwave_state
 1877 0984 50000000 		.word	.LANCHOR0+80
 1878 0988 5E010000 		.word	350
 1879 098c 20000000 		.word	.LC2
 1880 0990 A8010000 		.word	.LC12
 1881              		.cfi_endproc
 1882              	.LFE65:
 1884              		.align	2
 1885              		.global	armwave_clear_buffer
 1886              		.syntax unified
 1887              		.arm
 1888              		.fpu vfp
 1890              	armwave_clear_buffer:
 1891              	.LVL102:
 1892              	.LFB66:
 352:armwave.c     **** }
 353:armwave.c     **** 
 354:armwave.c     **** /*
 355:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 356:armwave.c     ****  */
 357:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 358:armwave.c     **** {
 1893              		.loc 1 358 1 is_stmt 1 view -0
 1894              		.cfi_startproc
 1895              		@ args = 0, pretend = 0, frame = 0
 1896              		@ frame_needed = 0, uses_anonymous_args = 0
 1897              		@ link register save eliminated.
 359:armwave.c     ****     // Flags ignored, only one buffer cleared
 360:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1898              		.loc 1 360 5 view .LVU502
 1899              	@ armwave.c:360:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1900              		.loc 1 360 58 is_stmt 0 view .LVU503
 1901 0994 0C309FE5 		ldr	r3, .L104	@ tmp114,
 1902              	@ armwave.c:360:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1903              		.loc 1 360 5 view .LVU504
 1904 0998 0010A0E3 		mov	r1, #0	@,
 1905 099c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1906 09a0 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1907              	.LVL103:
 1908              		.loc 1 360 5 view .LVU505
 1909 09a4 FEFFFFEA 		b	memset		@
 1910              	.LVL104:
 1911              	.L105:
 1912              		.align	2
 1913              	.L104:
 1914 09a8 00000000 		.word	g_armwave_state
 1915              		.cfi_endproc
 1916              	.LFE66:
 1918              		.align	2
 1919              		.global	armwave_set_channel_colour
 1920              		.syntax unified
 1921              		.arm
 1922              		.fpu vfp
 1924              	armwave_set_channel_colour:
 1925              	.LVL105:
 1926              	.LFB67:
 361:armwave.c     **** }
 362:armwave.c     **** 
 363:armwave.c     **** /*
 364:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 365:armwave.c     ****  */
 366:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 367:armwave.c     **** {
 1927              		.loc 1 367 1 is_stmt 1 view -0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931              		@ link register save eliminated.
 368:armwave.c     ****     // Only 1ch supported for now
 369:armwave.c     ****     switch(ch) {
 1932              		.loc 1 369 5 view .LVU507
 1933 09ac 010050E3 		cmp	r0, #1	@ ch,
 370:armwave.c     ****         case 1:
 371:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1934              		.loc 1 371 13 view .LVU508
 1935              	@ armwave.c:371:             g_armwave_state.ch1_color.r = r;
 1936              		.loc 1 371 41 is_stmt 0 view .LVU509
 1937 09b0 0C009F05 		ldreq	r0, .L108	@ tmp117,
 1938              	.LVL106:
 1939              		.loc 1 371 41 view .LVU510
 1940 09b4 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1941              		.loc 1 372 13 is_stmt 1 view .LVU511
 1942              	@ armwave.c:372:             g_armwave_state.ch1_color.g = g;
 1943              		.loc 1 372 41 is_stmt 0 view .LVU512
 1944 09b8 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 373:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1945              		.loc 1 373 13 is_stmt 1 view .LVU513
 1946              	@ armwave.c:373:             g_armwave_state.ch1_color.b = b;
 1947              		.loc 1 373 41 is_stmt 0 view .LVU514
 1948 09bc B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 374:armwave.c     ****             break;
 1949              		.loc 1 374 13 is_stmt 1 view .LVU515
 1950              	@ armwave.c:376: }
 375:armwave.c     ****     }
 376:armwave.c     **** }
 1951              		.loc 1 376 1 is_stmt 0 view .LVU516
 1952 09c0 1EFF2FE1 		bx	lr	@
 1953              	.L109:
 1954              		.align	2
 1955              	.L108:
 1956 09c4 00000000 		.word	g_armwave_state
 1957              		.cfi_endproc
 1958              	.LFE67:
 1960              		.align	2
 1961              		.global	armwave_dump_ppm_debug
 1962              		.syntax unified
 1963              		.arm
 1964              		.fpu vfp
 1966              	armwave_dump_ppm_debug:
 1967              	.LVL107:
 1968              	.LFB68:
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Dump a ppm of a buffer to a file.
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 382:armwave.c     **** {
 1969              		.loc 1 382 1 is_stmt 1 view -0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 383:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1973              		.loc 1 383 5 view .LVU518
 1974              	@ armwave.c:382: {
 382:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1975              		.loc 1 382 1 is_stmt 0 view .LVU519
 1976 09c8 0130A0E1 		mov	r3, r1	@ fn, fn
 1977 09cc F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1978              		.cfi_def_cfa_offset 28
 1979              		.cfi_offset 4, -28
 1980              		.cfi_offset 5, -24
 1981              		.cfi_offset 6, -20
 1982              		.cfi_offset 7, -16
 1983              		.cfi_offset 8, -12
 1984              		.cfi_offset 9, -8
 1985              		.cfi_offset 14, -4
 1986 09d0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1987 09d4 0CD04DE2 		sub	sp, sp, #12	@,,
 1988              		.cfi_def_cfa_offset 40
 1989              	@ armwave.c:383:     FILE *fp = fopen(fn, "wb");
 1990              		.loc 1 383 16 view .LVU520
 1991 09d8 C4109FE5 		ldr	r1, .L118	@,
 1992              	.LVL108:
 1993              		.loc 1 383 16 view .LVU521
 1994 09dc 0300A0E1 		mov	r0, r3	@, fn
 1995              	.LVL109:
 1996              		.loc 1 383 16 view .LVU522
 1997 09e0 FEFFFFEB 		bl	fopen64		@
 1998              	.LVL110:
 1999              	@ armwave.c:390:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 384:armwave.c     ****     uint32_t data;
 385:armwave.c     ****     int xx, yy;
 386:armwave.c     **** 
 387:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 388:armwave.c     **** 
 389:armwave.c     ****     fputs("P3\n", fp);
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2000              		.loc 1 390 5 view .LVU523
 2001 09e4 BC609FE5 		ldr	r6, .L118+4	@ tmp150,
 2002              	@ armwave.c:389:     fputs("P3\n", fp);
 389:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2003              		.loc 1 389 5 view .LVU524
 2004 09e8 0320A0E3 		mov	r2, #3	@,
 2005 09ec 0110A0E3 		mov	r1, #1	@,
 2006              	@ armwave.c:383:     FILE *fp = fopen(fn, "wb");
 383:armwave.c     ****     uint32_t data;
 2007              		.loc 1 383 16 view .LVU525
 2008 09f0 0070A0E1 		mov	r7, r0	@ fp,
 2009              	.LVL111:
 384:armwave.c     ****     uint32_t data;
 2010              		.loc 1 384 5 is_stmt 1 view .LVU526
 385:armwave.c     **** 
 2011              		.loc 1 385 5 view .LVU527
 389:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2012              		.loc 1 389 5 view .LVU528
 2013 09f4 0030A0E1 		mov	r3, r0	@, fp
 2014 09f8 AC009FE5 		ldr	r0, .L118+8	@,
 2015              	.LVL112:
 389:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2016              		.loc 1 389 5 is_stmt 0 view .LVU529
 2017 09fc FEFFFFEB 		bl	fwrite		@
 2018              	.LVL113:
 2019              		.loc 1 390 5 is_stmt 1 view .LVU530
 2020 0a00 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2021 0a04 A4109FE5 		ldr	r1, .L118+12	@,
 2022 0a08 0700A0E1 		mov	r0, r7	@, fp
 2023 0a0c FEFFFFEB 		bl	fprintf		@
 2024              	.LVL114:
 391:armwave.c     ****     fputs("255\n", fp);
 2025              		.loc 1 391 5 view .LVU531
 2026 0a10 0420A0E3 		mov	r2, #4	@,
 2027 0a14 0730A0E1 		mov	r3, r7	@, fp
 2028 0a18 0110A0E3 		mov	r1, #1	@,
 2029 0a1c 90009FE5 		ldr	r0, .L118+16	@,
 2030 0a20 FEFFFFEB 		bl	fwrite		@
 2031              	.LVL115:
 392:armwave.c     **** 
 393:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2032              		.loc 1 393 5 view .LVU532
 2033              	@ armwave.c:393:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2034              		.loc 1 393 37 is_stmt 0 view .LVU533
 2035 0a24 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2036              	@ armwave.c:393:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2037              		.loc 1 393 5 view .LVU534
 2038 0a28 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2039 0a2c 180000DA 		ble	.L111		@,
 2040 0a30 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2041              	@ armwave.c:398:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 397:armwave.c     **** 
 398:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2042              		.loc 1 398 13 view .LVU535
 2043 0a34 7C909FE5 		ldr	r9, .L118+20	@ tmp152,
 2044              	@ armwave.c:393:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2045              		.loc 1 393 12 view .LVU536
 2046 0a38 0050A0E3 		mov	r5, #0	@ yy,
 2047              	.LVL116:
 2048              	.L112:
 2049              	@ armwave.c:394:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2050              		.loc 1 394 9 view .LVU537
 2051 0a3c 000053E3 		cmp	r3, #0	@ _13,
 2052              	@ armwave.c:394:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2053              		.loc 1 394 16 view .LVU538
 2054 0a40 0040A0C3 		movgt	r4, #0	@ xx,
 2055              	@ armwave.c:394:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2056              		.loc 1 394 9 view .LVU539
 2057 0a44 0F0000DA 		ble	.L114		@,
 2058              	.LVL117:
 2059              	.L113:
 395:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2060              		.loc 1 395 13 is_stmt 1 discriminator 3 view .LVU540
 2061              	@ armwave.c:395:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 395:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2062              		.loc 1 395 29 is_stmt 0 discriminator 3 view .LVU541
 2063 0a48 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2064              	@ armwave.c:398:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2065              		.loc 1 398 13 discriminator 3 view .LVU542
 2066 0a4c 0910A0E1 		mov	r1, r9	@, tmp152
 2067 0a50 0700A0E1 		mov	r0, r7	@, fp
 2068              	@ armwave.c:395:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 395:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2069              		.loc 1 395 18 discriminator 3 view .LVU543
 2070 0a54 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2071              	.LVL118:
 2072              		.loc 1 398 13 is_stmt 1 discriminator 3 view .LVU544
 2073              	@ armwave.c:394:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2074              		.loc 1 394 58 is_stmt 0 discriminator 3 view .LVU545
 2075 0a58 014084E2 		add	r4, r4, #1	@ xx, xx,
 2076              	.LVL119:
 2077              	@ armwave.c:398:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2078              		.loc 1 398 81 discriminator 3 view .LVU546
 2079 0a5c 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2080              	@ armwave.c:398:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2081              		.loc 1 398 61 discriminator 3 view .LVU547
 2082 0a60 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2083              	@ armwave.c:398:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2084              		.loc 1 398 13 discriminator 3 view .LVU548
 2085 0a64 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2086 0a68 7330EFE6 		uxtb	r3, r3	@, tmp142
 2087 0a6c 00C08DE5 		str	ip, [sp]	@ tmp147,
 2088 0a70 7220EFE6 		uxtb	r2, r2	@, data
 2089              	.LVL120:
 2090              		.loc 1 398 13 discriminator 3 view .LVU549
 2091 0a74 FEFFFFEB 		bl	fprintf		@
 2092              	.LVL121:
 2093              	@ armwave.c:394:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2094              		.loc 1 394 41 discriminator 3 view .LVU550
 2095 0a78 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2096              	@ armwave.c:394:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2097              		.loc 1 394 9 discriminator 3 view .LVU551
 2098 0a7c 040053E1 		cmp	r3, r4	@ _13, xx
 2099 0a80 F0FFFFCA 		bgt	.L113		@,
 2100 0a84 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2101              	.LVL122:
 2102              	.L114:
 2103              	@ armwave.c:393:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2104              		.loc 1 393 55 discriminator 2 view .LVU552
 2105 0a88 015085E2 		add	r5, r5, #1	@ yy, yy,
 2106              	.LVL123:
 2107              	@ armwave.c:393:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2108              		.loc 1 393 5 discriminator 2 view .LVU553
 2109 0a8c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2110 0a90 E9FFFFBA 		blt	.L112		@,
 2111              	.LVL124:
 2112              	.L111:
 399:armwave.c     ****         }
 400:armwave.c     ****     }
 401:armwave.c     **** 
 402:armwave.c     ****     fclose(fp);
 2113              		.loc 1 402 5 is_stmt 1 view .LVU554
 2114 0a94 0700A0E1 		mov	r0, r7	@, fp
 2115              	@ armwave.c:403: }
 403:armwave.c     **** }
 2116              		.loc 1 403 1 is_stmt 0 view .LVU555
 2117 0a98 0CD08DE2 		add	sp, sp, #12	@,,
 2118              		.cfi_def_cfa_offset 28
 2119              		@ sp needed	@
 2120 0a9c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2121              		.cfi_restore 14
 2122              		.cfi_restore 9
 2123              		.cfi_restore 8
 2124              		.cfi_restore 7
 2125              		.cfi_restore 6
 2126              		.cfi_restore 5
 2127              		.cfi_restore 4
 2128              		.cfi_def_cfa_offset 0
 2129              	.LVL125:
 2130              	@ armwave.c:402:     fclose(fp);
 402:armwave.c     **** }
 2131              		.loc 1 402 5 view .LVU556
 2132 0aa0 FEFFFFEA 		b	fclose		@
 2133              	.LVL126:
 2134              	.L119:
 402:armwave.c     **** }
 2135              		.loc 1 402 5 view .LVU557
 2136              		.align	2
 2137              	.L118:
 2138 0aa4 C0010000 		.word	.LC13
 2139 0aa8 00000000 		.word	g_armwave_state
 2140 0aac C4010000 		.word	.LC14
 2141 0ab0 C8010000 		.word	.LC15
 2142 0ab4 D0010000 		.word	.LC16
 2143 0ab8 D8010000 		.word	.LC17
 2144              		.cfi_endproc
 2145              	.LFE68:
 2147              		.align	2
 2148              		.global	armwave_test_init
 2149              		.syntax unified
 2150              		.arm
 2151              		.fpu vfp
 2153              	armwave_test_init:
 2154              	.LVL127:
 2155              	.LFB69:
 404:armwave.c     **** 
 405:armwave.c     **** /*
 406:armwave.c     ****  * Initialise some test functionry.
 407:armwave.c     ****  */
 408:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 409:armwave.c     **** {
 2156              		.loc 1 409 1 is_stmt 1 view -0
 2157              		.cfi_startproc
 2158              		@ args = 0, pretend = 0, frame = 0
 2159              		@ frame_needed = 0, uses_anonymous_args = 0
 410:armwave.c     ****     test_create_gamma();
 2160              		.loc 1 410 5 view .LVU559
 2161              	.LBB18:
 2162              	.LBI18:
  34:armwave.c     **** {
 2163              		.loc 1 34 6 view .LVU560
  34:armwave.c     **** {
 2164              		.loc 1 34 6 is_stmt 0 view .LVU561
 2165              	.LBE18:
 2166              	@ armwave.c:409: {
 409:armwave.c     ****     test_create_gamma();
 2167              		.loc 1 409 1 view .LVU562
 2168 0abc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2169              		.cfi_def_cfa_offset 32
 2170              		.cfi_offset 4, -32
 2171              		.cfi_offset 5, -28
 2172              		.cfi_offset 6, -24
 2173              		.cfi_offset 7, -20
 2174              		.cfi_offset 8, -16
 2175              		.cfi_offset 9, -12
 2176              		.cfi_offset 10, -8
 2177              		.cfi_offset 14, -4
 2178 0ac0 068B2DED 		vpush.64	{d8, d9, d10}	@
 2179              		.cfi_def_cfa_offset 56
 2180              		.cfi_offset 80, -56
 2181              		.cfi_offset 81, -52
 2182              		.cfi_offset 82, -48
 2183              		.cfi_offset 83, -44
 2184              		.cfi_offset 84, -40
 2185              		.cfi_offset 85, -36
 2186 0ac4 C0409FE5 		ldr	r4, .L124+20	@ ivtmp.94,
 2187              	.LBB21:
 2188              	.LBB19:
 2189              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2190              		.loc 1 40 32 view .LVU563
 2191 0ac8 2EAA9FED 		vldr.32	s20, .L124+16	@ tmp136,
 2192              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2193              		.loc 1 40 26 view .LVU564
 2194 0acc 299B9FED 		vldr.64	d9, .L124	@ tmp151,
 2195              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2196              		.loc 1 40 49 view .LVU565
 2197 0ad0 2A8B9FED 		vldr.64	d8, .L124+8	@ tmp139,
 2198 0ad4 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.94,
 2199              	.LBE19:
 2200              	.LBE21:
 2201              	@ armwave.c:409: {
 409:armwave.c     ****     test_create_gamma();
 2202              		.loc 1 409 1 view .LVU566
 2203 0ad8 10D04DE2 		sub	sp, sp, #16	@,,
 2204              		.cfi_def_cfa_offset 72
 2205              	@ armwave.c:409: {
 409:armwave.c     ****     test_create_gamma();
 2206              		.loc 1 409 1 view .LVU567
 2207 0adc 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2208 0ae0 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2209 0ae4 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2210 0ae8 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2211 0aec 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.94,
 2212 0af0 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2213              	.LVL128:
 2214              	.L121:
 2215              	.LBB22:
 2216              	.LBB20:
  40:armwave.c     ****     }
 2217              		.loc 1 40 9 is_stmt 1 view .LVU568
 2218              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2219              		.loc 1 40 32 is_stmt 0 view .LVU569
 2220 0af4 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.94
 2221              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2222              		.loc 1 40 26 view .LVU570
 2223 0af8 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2224              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2225              		.loc 1 40 32 view .LVU571
 2226 0afc 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2227 0b00 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2228 0b04 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2229              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2230              		.loc 1 40 26 view .LVU572
 2231 0b08 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2232 0b0c FEFFFFEB 		bl	pow		@
 2233              	.LVL129:
 2234              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2235              		.loc 1 40 49 view .LVU573
 2236 0b10 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2237              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2238              		.loc 1 40 24 view .LVU574
 2239 0b14 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2240 0b18 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2241 0b1c 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2242              	.LVL130:
 2243              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2244              		.loc 1 39 5 view .LVU575
 2245 0b20 0A0054E1 		cmp	r4, r10	@ ivtmp.94, _39
 2246 0b24 F2FFFF1A 		bne	.L121		@,
 2247              	.LVL131:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2248              		.loc 1 39 5 view .LVU576
 2249              	.LBE20:
 2250              	.LBE22:
 411:armwave.c     **** 
 412:armwave.c     ****     // make ch1 yellowish by default
 413:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2251              		.loc 1 413 5 is_stmt 1 view .LVU577
 2252              	.LBB23:
 2253              	.LBI23:
 366:armwave.c     **** {
 2254              		.loc 1 366 6 view .LVU578
 2255              	.LBB24:
 369:armwave.c     ****         case 1:
 2256              		.loc 1 369 5 view .LVU579
 371:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2257              		.loc 1 371 13 view .LVU580
 372:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2258              		.loc 1 372 13 view .LVU581
 2259              	@ armwave.c:371:             g_armwave_state.ch1_color.r = r;
 371:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2260              		.loc 1 371 41 is_stmt 0 view .LVU582
 2261 0b28 60C09FE5 		ldr	ip, .L124+24	@ tmp142,
 2262 0b2c 60409FE5 		ldr	r4, .L124+28	@ tmp143,
 2263              	.LBE24:
 2264              	.LBE23:
 2265              	@ armwave.c:415:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 414:armwave.c     **** 
 415:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2266              		.loc 1 415 5 view .LVU583
 2267 0b30 0000A0E3 		mov	r0, #0	@ tmp147,
 2268              	.LBB28:
 2269              	.LBB25:
 2270              	@ armwave.c:373:             g_armwave_state.ch1_color.b = b;
 373:armwave.c     ****             break;
 2271              		.loc 1 373 41 view .LVU584
 2272 0b34 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2273              	.LBE25:
 2274              	.LBE28:
 2275              	@ armwave.c:415:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2276              		.loc 1 415 5 view .LVU585
 2277 0b38 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2278 0b3c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2279 0b40 00808DE5 		str	r8, [sp]	@ render_width,
 2280 0b44 0610A0E1 		mov	r1, r6	@, tmp3
 2281 0b48 0720A0E1 		mov	r2, r7	@, nwaves
 2282              	.LBB29:
 2283              	.LBB26:
 2284              	@ armwave.c:371:             g_armwave_state.ch1_color.r = r;
 371:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2285              		.loc 1 371 41 view .LVU586
 2286 0b4c 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 373:armwave.c     ****             break;
 2287              		.loc 1 373 13 is_stmt 1 view .LVU587
 2288              	.LBE26:
 2289              	.LBE29:
 2290              	@ armwave.c:415:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2291              		.loc 1 415 5 is_stmt 0 view .LVU588
 2292 0b50 0630A0E1 		mov	r3, r6	@, wave_size
 2293              	.LBB30:
 2294              	.LBB27:
 2295              	@ armwave.c:373:             g_armwave_state.ch1_color.b = b;
 373:armwave.c     ****             break;
 2296              		.loc 1 373 41 view .LVU589
 2297 0b54 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 374:armwave.c     ****     }
 2298              		.loc 1 374 13 is_stmt 1 view .LVU590
 2299              	.LVL132:
 374:armwave.c     ****     }
 2300              		.loc 1 374 13 is_stmt 0 view .LVU591
 2301              	.LBE27:
 2302              	.LBE30:
 2303              		.loc 1 415 5 is_stmt 1 view .LVU592
 2304 0b58 FEFFFFEB 		bl	armwave_setup_render		@
 2305              	.LVL133:
 416:armwave.c     **** 
 417:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2306              		.loc 1 417 5 view .LVU593
 2307 0b5c 34109FE5 		ldr	r1, .L124+32	@,
 2308 0b60 34009FE5 		ldr	r0, .L124+36	@,
 2309              	@ armwave.c:418: }
 418:armwave.c     **** }
 2310              		.loc 1 418 1 is_stmt 0 view .LVU594
 2311 0b64 10D08DE2 		add	sp, sp, #16	@,,
 2312              		.cfi_def_cfa_offset 56
 2313              		@ sp needed	@
 2314 0b68 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2315              		.cfi_restore 84
 2316              		.cfi_restore 85
 2317              		.cfi_restore 82
 2318              		.cfi_restore 83
 2319              		.cfi_restore 80
 2320              		.cfi_restore 81
 2321              		.cfi_def_cfa_offset 32
 2322 0b6c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2323              		.cfi_restore 14
 2324              		.cfi_restore 10
 2325              		.cfi_restore 9
 2326              		.cfi_restore 8
 2327              		.cfi_restore 7
 2328              		.cfi_restore 6
 2329              		.cfi_restore 5
 2330              		.cfi_restore 4
 2331              		.cfi_def_cfa_offset 0
 2332              	.LVL134:
 2333              	@ armwave.c:417:     printf("armwave version: %s\n", ARMWAVE_VER);
 417:armwave.c     **** }
 2334              		.loc 1 417 5 view .LVU595
 2335 0b70 FEFFFFEA 		b	printf		@
 2336              	.LVL135:
 2337              	.L125:
 2338 0b74 0000A0E1 		.align	3
 2339              	.L124:
 2340 0b78 000000C0 		.word	-1073741824
 2341 0b7c CCCCEC3F 		.word	1072483532
 2342 0b80 00000000 		.word	0
 2343 0b84 00E06F40 		.word	1081073664
 2344 0b88 00007F43 		.word	1132396544
 2345 0b8c FFFFFFFF 		.word	gamma_table-1
 2346 0b90 00000000 		.word	g_armwave_state
 2347 0b94 F609F406 		.word	116656630
 2348 0b98 00000000 		.word	.LC0
 2349 0b9c 08000000 		.word	.LC1
 2350              		.cfi_endproc
 2351              	.LFE69:
 2353              		.align	2
 2354              		.global	armwave_test_fill_outbuf
 2355              		.syntax unified
 2356              		.arm
 2357              		.fpu vfp
 2359              	armwave_test_fill_outbuf:
 2360              	.LFB70:
 419:armwave.c     **** 
 420:armwave.c     **** /*
 421:armwave.c     ****  * Render image to the local allocated buffer.
 422:armwave.c     ****  */
 423:armwave.c     **** void armwave_test_fill_outbuf()
 424:armwave.c     **** {
 2361              		.loc 1 424 1 is_stmt 1 view -0
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 0
 2364              		@ frame_needed = 0, uses_anonymous_args = 0
 2365              		@ link register save eliminated.
 425:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2366              		.loc 1 425 5 view .LVU597
 2367 0ba0 04309FE5 		ldr	r3, .L127	@ tmp111,
 2368 0ba4 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2369 0ba8 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2370              	.LVL136:
 2371              	.L128:
 2372              		.align	2
 2373              	.L127:
 2374 0bac 00000000 		.word	g_armwave_state
 2375              		.cfi_endproc
 2376              	.LFE70:
 2378              		.align	2
 2379              		.global	armwave_test_dump_buffer_to_ppm
 2380              		.syntax unified
 2381              		.arm
 2382              		.fpu vfp
 2384              	armwave_test_dump_buffer_to_ppm:
 2385              	.LVL137:
 2386              	.LFB71:
 426:armwave.c     **** }
 427:armwave.c     **** 
 428:armwave.c     **** /*
 429:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 430:armwave.c     ****  */
 431:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 432:armwave.c     **** {
 2387              		.loc 1 432 1 view -0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 0
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391              		@ link register save eliminated.
 433:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2392              		.loc 1 433 5 view .LVU599
 2393 0bb0 08309FE5 		ldr	r3, .L130	@ tmp112,
 2394 0bb4 0010A0E1 		mov	r1, r0	@, fn
 2395 0bb8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2396              	.LVL138:
 2397              		.loc 1 433 5 is_stmt 0 view .LVU600
 2398 0bbc FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2399              	.LVL139:
 2400              	.L131:
 2401              		.loc 1 433 5 view .LVU601
 2402              		.align	2
 2403              	.L130:
 2404 0bc0 00000000 		.word	g_armwave_state
 2405              		.cfi_endproc
 2406              	.LFE71:
 2408              		.align	2
 2409              		.global	armwave_test_fill_gdkbuf
 2410              		.syntax unified
 2411              		.arm
 2412              		.fpu vfp
 2414              	armwave_test_fill_gdkbuf:
 2415              	.LVL140:
 2416              	.LFB72:
 434:armwave.c     **** }
 435:armwave.c     **** 
 436:armwave.c     **** /*
 437:armwave.c     ****  * Render GDK buffer with test funtionry.
 438:armwave.c     ****  */
 439:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 440:armwave.c     **** {
 2417              		.loc 1 440 1 is_stmt 1 view -0
 2418              		.cfi_startproc
 2419              		@ args = 0, pretend = 0, frame = 0
 2420              		@ frame_needed = 0, uses_anonymous_args = 0
 2421              		@ link register save eliminated.
 441:armwave.c     ****     //PyObject *mv;
 442:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 443:armwave.c     **** 
 444:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 445:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2422              		.loc 1 445 5 view .LVU603
 446:armwave.c     ****     
 447:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 448:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2423              		.loc 1 448 5 view .LVU604
 2424              	@ armwave.c:445:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 445:armwave.c     ****     
 2425              		.loc 1 445 11 is_stmt 0 view .LVU605
 2426 0bc4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2427              	@ armwave.c:448:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2428              		.loc 1 448 5 view .LVU606
 2429 0bc8 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2430              	.LVL141:
 2431              		.loc 1 448 5 view .LVU607
 2432 0bcc FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2433              	.LVL142:
 2434              		.loc 1 448 5 view .LVU608
 2435              		.cfi_endproc
 2436              	.LFE72:
 2438              		.align	2
 2439              		.global	armwave_test_buffer_alloc
 2440              		.syntax unified
 2441              		.arm
 2442              		.fpu vfp
 2444              	armwave_test_buffer_alloc:
 2445              	.LVL143:
 2446              	.LFB73:
 449:armwave.c     **** }
 450:armwave.c     **** 
 451:armwave.c     **** /*
 452:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 453:armwave.c     ****  */
 454:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 455:armwave.c     **** {
 2447              		.loc 1 455 1 is_stmt 1 view -0
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 0
 2450              		@ frame_needed = 0, uses_anonymous_args = 0
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2451              		.loc 1 456 5 view .LVU610
 2452              	@ armwave.c:455: {
 455:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2453              		.loc 1 455 1 is_stmt 0 view .LVU611
 2454 0bd0 70402DE9 		push	{r4, r5, r6, lr}	@
 2455              		.cfi_def_cfa_offset 16
 2456              		.cfi_offset 4, -16
 2457              		.cfi_offset 5, -12
 2458              		.cfi_offset 6, -8
 2459              		.cfi_offset 14, -4
 2460              	@ armwave.c:455: {
 455:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2461              		.loc 1 455 1 view .LVU612
 2462 0bd4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2463              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer != NULL) {
 2464              		.loc 1 456 23 view .LVU613
 2465 0bd8 44409FE5 		ldr	r4, .L140	@ tmp128,
 2466 0bdc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2467              	.LVL144:
 2468              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer != NULL) {
 2469              		.loc 1 456 7 view .LVU614
 2470 0be0 000050E3 		cmp	r0, #0	@ _1,
 2471 0be4 0000000A 		beq	.L134		@,
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2472              		.loc 1 457 9 is_stmt 1 view .LVU615
 2473 0be8 FEFFFFEB 		bl	free		@
 2474              	.LVL145:
 2475              	.L134:
 458:armwave.c     ****     }
 459:armwave.c     **** 
 460:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 461:armwave.c     **** 
 462:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2476              		.loc 1 462 5 view .LVU616
 2477              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2478              		.loc 1 462 75 is_stmt 0 view .LVU617
 2479 0bec 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2480 0bf0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2481              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2482              		.loc 1 462 40 view .LVU618
 2483 0bf4 0610A0E1 		mov	r1, r6	@, nsets
 2484              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2485              		.loc 1 462 75 view .LVU619
 2486 0bf8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2487              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2488              		.loc 1 462 40 view .LVU620
 2489 0bfc 0500A0E1 		mov	r0, r5	@, _4
 2490 0c00 FEFFFFEB 		bl	calloc		@
 2491              	.LVL146:
 2492              	@ armwave.c:464:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     **** 
 464:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2493              		.loc 1 464 7 view .LVU621
 2494 0c04 000050E3 		cmp	r0, #0	@ tmp124,
 2495              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 462:armwave.c     **** 
 2496              		.loc 1 462 38 view .LVU622
 2497 0c08 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2498              		.loc 1 464 5 is_stmt 1 view .LVU623
 2499              	@ armwave.c:464:     if(g_armwave_state.test_wave_buffer == NULL) {
 2500              		.loc 1 464 7 is_stmt 0 view .LVU624
 2501 0c0c 7080BD18 		popne	{r4, r5, r6, pc}	@
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2502              		.loc 1 465 9 is_stmt 1 view .LVU625
 2503 0c10 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2504 0c14 0620A0E1 		mov	r2, r6	@, nsets
 2505 0c18 08009FE5 		ldr	r0, .L140+4	@,
 2506              	@ armwave.c:469: }
 466:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 467:armwave.c     ****         return;
 468:armwave.c     ****     }
 469:armwave.c     **** }
 2507              		.loc 1 469 1 is_stmt 0 view .LVU626
 2508 0c1c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2509              		.cfi_restore 14
 2510              		.cfi_restore 6
 2511              		.cfi_restore 5
 2512              		.cfi_restore 4
 2513              		.cfi_def_cfa_offset 0
 2514              	.LVL147:
 2515              	@ armwave.c:465:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2516              		.loc 1 465 9 view .LVU627
 2517 0c20 FEFFFFEA 		b	printf		@
 2518              	.LVL148:
 2519              	.L141:
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2520              		.loc 1 465 9 view .LVU628
 2521              		.align	2
 2522              	.L140:
 2523 0c24 00000000 		.word	g_armwave_state
 2524 0c28 E8010000 		.word	.LC18
 2525              		.cfi_endproc
 2526              	.LFE73:
 2528              		.align	2
 2529              		.global	armwave_fill_pixbuf_into_pybuffer
 2530              		.syntax unified
 2531              		.arm
 2532              		.fpu vfp
 2534              	armwave_fill_pixbuf_into_pybuffer:
 2535              	.LVL149:
 2536              	.LFB74:
 470:armwave.c     **** 
 471:armwave.c     **** /*
 472:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 473:armwave.c     ****  */
 474:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 475:armwave.c     **** {
 2537              		.loc 1 475 1 is_stmt 1 view -0
 2538              		.cfi_startproc
 2539              		@ args = 0, pretend = 0, frame = 48
 2540              		@ frame_needed = 0, uses_anonymous_args = 0
 476:armwave.c     ****     Py_buffer buffer;
 2541              		.loc 1 476 5 view .LVU630
 477:armwave.c     ****     int ret;
 2542              		.loc 1 477 5 view .LVU631
 478:armwave.c     **** 
 479:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 480:armwave.c     **** 
 481:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2543              		.loc 1 481 5 view .LVU632
 2544              	@ armwave.c:475: {
 475:armwave.c     ****     Py_buffer buffer;
 2545              		.loc 1 475 1 is_stmt 0 view .LVU633
 2546 0c2c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2547              		.cfi_def_cfa_offset 4
 2548              		.cfi_offset 14, -4
 2549 0c30 34D04DE2 		sub	sp, sp, #52	@,,
 2550              		.cfi_def_cfa_offset 56
 2551              	@ armwave.c:481:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2552              		.loc 1 481 11 view .LVU634
 2553 0c34 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2554 0c38 0120A0E3 		mov	r2, #1	@,
 2555 0c3c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2556              	.LVL150:
 482:armwave.c     **** 
 483:armwave.c     ****     if(ret != 0) {
 2557              		.loc 1 483 5 is_stmt 1 view .LVU635
 2558              	@ armwave.c:483:     if(ret != 0) {
 2559              		.loc 1 483 7 is_stmt 0 view .LVU636
 2560 0c40 000050E3 		cmp	r0, #0	@,
 2561 0c44 0A00001A 		bne	.L146		@,
 484:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 485:armwave.c     ****         Py_RETURN_FALSE;
 486:armwave.c     ****     }
 487:armwave.c     **** 
 488:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 489:armwave.c     **** 
 490:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2562              		.loc 1 490 5 is_stmt 1 view .LVU637
 2563 0c48 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2564              	.LVL151:
 2565              		.loc 1 490 5 is_stmt 0 view .LVU638
 2566 0c4c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2567              	.LVL152:
 491:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 492:armwave.c     **** 
 493:armwave.c     ****     PyBuffer_Release(&buffer);
 2568              		.loc 1 493 5 is_stmt 1 view .LVU639
 2569 0c50 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2570 0c54 FEFFFFEB 		bl	PyBuffer_Release		@
 2571              	.LVL153:
 494:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 495:armwave.c     **** 
 496:armwave.c     ****     Py_RETURN_TRUE;
 2572              		.loc 1 496 5 view .LVU640
 2573              	.LBB31:
 2574              	.LBI31:
 2575              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2576              		.loc 2 456 20 view .LVU641
 2577              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2578              		.loc 2 458 21 view .LVU642
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2579              		.loc 2 459 5 view .LVU643
 2580              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2581              		.loc 2 459 18 is_stmt 0 view .LVU644
 2582 0c58 38309FE5 		ldr	r3, .L147	@ tmp126,
 2583              	.LBE32:
 2584              	.LBE31:
 2585              	@ armwave.c:496:     Py_RETURN_TRUE;
 2586              		.loc 1 496 5 view .LVU645
 2587 0c5c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2588              	.LBB34:
 2589              	.LBB33:
 2590              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2591              		.loc 2 459 18 view .LVU646
 2592 0c60 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2593 0c64 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2594 0c68 002083E5 		str	r2, [r3]	@ tmp128,
 2595              	.LBE33:
 2596              	.LBE34:
 2597              	@ armwave.c:497: }
 497:armwave.c     **** }
 2598              		.loc 1 497 1 view .LVU647
 2599 0c6c 34D08DE2 		add	sp, sp, #52	@,,
 2600              		.cfi_remember_state
 2601              		.cfi_def_cfa_offset 4
 2602              		@ sp needed	@
 2603 0c70 04F09DE4 		ldr	pc, [sp], #4	@
 2604              	.LVL154:
 2605              	.L146:
 2606              		.cfi_restore_state
 484:armwave.c     ****         Py_RETURN_FALSE;
 2607              		.loc 1 484 9 is_stmt 1 view .LVU648
 2608 0c74 20009FE5 		ldr	r0, .L147+4	@,
 2609              	.LVL155:
 484:armwave.c     ****         Py_RETURN_FALSE;
 2610              		.loc 1 484 9 is_stmt 0 view .LVU649
 2611 0c78 FEFFFFEB 		bl	puts		@
 2612              	.LVL156:
 485:armwave.c     ****     }
 2613              		.loc 1 485 9 is_stmt 1 view .LVU650
 2614              	.LBB35:
 2615              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2616              		.loc 2 456 20 view .LVU651
 2617              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2618              		.loc 2 458 21 view .LVU652
 2619              		.loc 2 459 5 view .LVU653
 2620              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2621              		.loc 2 459 18 is_stmt 0 view .LVU654
 2622 0c7c 1C309FE5 		ldr	r3, .L147+8	@ tmp120,
 2623              	.LBE36:
 2624              	.LBE35:
 2625              	@ armwave.c:485:         Py_RETURN_FALSE;
 485:armwave.c     ****     }
 2626              		.loc 1 485 9 view .LVU655
 2627 0c80 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2628              	.LBB38:
 2629              	.LBB37:
 2630              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2631              		.loc 2 459 18 view .LVU656
 2632 0c84 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2633 0c88 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2634 0c8c 002083E5 		str	r2, [r3]	@ tmp122,
 2635              	.LBE37:
 2636              	.LBE38:
 2637              	@ armwave.c:497: }
 2638              		.loc 1 497 1 view .LVU657
 2639 0c90 34D08DE2 		add	sp, sp, #52	@,,
 2640              		.cfi_def_cfa_offset 4
 2641              		@ sp needed	@
 2642 0c94 04F09DE4 		ldr	pc, [sp], #4	@
 2643              	.L148:
 2644              		.align	2
 2645              	.L147:
 2646 0c98 00000000 		.word	_Py_TrueStruct
 2647 0c9c 3C020000 		.word	.LC19
 2648 0ca0 00000000 		.word	_Py_FalseStruct
 2649              		.cfi_endproc
 2650              	.LFE74:
 2652              		.align	2
 2653              		.global	armwave_test_create_am_sine
 2654              		.syntax unified
 2655              		.arm
 2656              		.fpu vfp
 2658              	armwave_test_create_am_sine:
 2659              	.LVL157:
 2660              	.LFB75:
 498:armwave.c     **** 
 499:armwave.c     **** /*
 500:armwave.c     ****  * Make a test AM waveform for render tests.
 501:armwave.c     ****  *
 502:armwave.c     ****  * @param   mod                     modulation depth
 503:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 504:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 505:armwave.c     ****  */
 506:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 507:armwave.c     **** {
 2661              		.loc 1 507 1 is_stmt 1 view -0
 2662              		.cfi_startproc
 2663              		@ args = 0, pretend = 0, frame = 8
 2664              		@ frame_needed = 0, uses_anonymous_args = 0
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2665              		.loc 1 508 5 view .LVU659
 509:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2666              		.loc 1 509 5 view .LVU660
 2667              	@ armwave.c:507: {
 507:armwave.c     ****     float v, noise, xnoise, mod_val;
 2668              		.loc 1 507 1 is_stmt 0 view .LVU661
 2669 0ca4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2670              		.cfi_def_cfa_offset 32
 2671              		.cfi_offset 4, -32
 2672              		.cfi_offset 5, -28
 2673              		.cfi_offset 6, -24
 2674              		.cfi_offset 7, -20
 2675              		.cfi_offset 8, -16
 2676              		.cfi_offset 9, -12
 2677              		.cfi_offset 10, -8
 2678              		.cfi_offset 14, -4
 2679              	@ armwave.c:509:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2680              		.loc 1 509 38 view .LVU662
 2681 0ca8 7A7A9FED 		vldr.32	s14, .L180	@ tmp180,
 2682              	@ armwave.c:509:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2683              		.loc 1 509 55 view .LVU663
 2684 0cac 00529FE5 		ldr	r5, .L180+28	@ tmp250,
 2685              	@ armwave.c:507: {
 507:armwave.c     ****     float v, noise, xnoise, mod_val;
 2686              		.loc 1 507 1 view .LVU664
 2687 0cb0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2688              		.cfi_def_cfa_offset 80
 2689              		.cfi_offset 80, -80
 2690              		.cfi_offset 81, -76
 2691              		.cfi_offset 82, -72
 2692              		.cfi_offset 83, -68
 2693              		.cfi_offset 84, -64
 2694              		.cfi_offset 85, -60
 2695              		.cfi_offset 86, -56
 2696              		.cfi_offset 87, -52
 2697              		.cfi_offset 88, -48
 2698              		.cfi_offset 89, -44
 2699              		.cfi_offset 90, -40
 2700              		.cfi_offset 91, -36
 2701 0cb4 0090A0E1 		mov	r9, r0	@ sets, sets
 2702              	@ armwave.c:509:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2703              		.loc 1 509 38 view .LVU665
 2704 0cb8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2705              	@ armwave.c:513:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 510:armwave.c     ****     int s, set_offset = 0;
 511:armwave.c     ****     int w, x;
 512:armwave.c     **** 
 513:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2706              		.loc 1 513 70 view .LVU666
 2707 0cbc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2708 0cc0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2709              	.LBB41:
 2710              	.LBB42:
 2711              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer != NULL) {
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2712              		.loc 1 456 23 view .LVU667
 2713 0cc4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2714              	.LVL158:
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2715              		.loc 1 456 23 view .LVU668
 2716              	.LBE42:
 2717              	.LBE41:
 2718              	@ armwave.c:509:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 509:armwave.c     ****     int s, set_offset = 0;
 2719              		.loc 1 509 38 view .LVU669
 2720 0cc8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2721              	@ armwave.c:513:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2722              		.loc 1 513 70 view .LVU670
 2723 0ccc 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2724              	@ armwave.c:507: {
 507:armwave.c     ****     float v, noise, xnoise, mod_val;
 2725              		.loc 1 507 1 view .LVU671
 2726 0cd0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2727              	.LBB46:
 2728              	.LBB43:
 2729              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer != NULL) {
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2730              		.loc 1 456 7 view .LVU672
 2731 0cd4 000050E3 		cmp	r0, #0	@ _82,
 2732              	.LBE43:
 2733              	.LBE46:
 2734              	@ armwave.c:507: {
 507:armwave.c     ****     float v, noise, xnoise, mod_val;
 2735              		.loc 1 507 1 view .LVU673
 2736 0cd8 08D04DE2 		sub	sp, sp, #8	@,,
 2737              		.cfi_def_cfa_offset 88
 2738              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_nsets = sets;
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2739              		.loc 1 514 44 view .LVU674
 2740 0cdc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2741              	@ armwave.c:513:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 513:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2742              		.loc 1 513 45 view .LVU675
 2743 0ce0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2744              	@ armwave.c:509:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 509:armwave.c     ****     int s, set_offset = 0;
 2745              		.loc 1 509 38 view .LVU676
 2746 0ce4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2747              	@ armwave.c:509:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 509:armwave.c     ****     int s, set_offset = 0;
 2748              		.loc 1 509 11 view .LVU677
 2749 0ce8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2750              	.LVL159:
 510:armwave.c     ****     int w, x;
 2751              		.loc 1 510 5 is_stmt 1 view .LVU678
 511:armwave.c     **** 
 2752              		.loc 1 511 5 view .LVU679
 513:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2753              		.loc 1 513 5 view .LVU680
 2754              		.loc 1 514 5 view .LVU681
 515:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2755              		.loc 1 515 5 view .LVU682
 2756              	.LBB47:
 2757              	.LBI41:
 454:armwave.c     **** {
 2758              		.loc 1 454 6 view .LVU683
 2759              	.LBB44:
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2760              		.loc 1 456 5 view .LVU684
 2761              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer != NULL) {
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2762              		.loc 1 456 7 is_stmt 0 view .LVU685
 2763 0cec 0000000A 		beq	.L150		@,
 457:armwave.c     ****     }
 2764              		.loc 1 457 9 is_stmt 1 view .LVU686
 2765 0cf0 FEFFFFEB 		bl	free		@
 2766              	.LVL160:
 2767              	.L150:
 462:armwave.c     **** 
 2768              		.loc 1 462 5 view .LVU687
 2769              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 462:armwave.c     **** 
 2770              		.loc 1 462 75 is_stmt 0 view .LVU688
 2771 0cf4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2772 0cf8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2773              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 462:armwave.c     **** 
 2774              		.loc 1 462 40 view .LVU689
 2775 0cfc 0910A0E1 		mov	r1, r9	@, sets
 2776              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 462:armwave.c     **** 
 2777              		.loc 1 462 75 view .LVU690
 2778 0d00 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2779              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 462:armwave.c     **** 
 2780              		.loc 1 462 40 view .LVU691
 2781 0d04 0400A0E1 		mov	r0, r4	@, _85
 2782 0d08 FEFFFFEB 		bl	calloc		@
 2783              	.LVL161:
 2784              	@ armwave.c:464:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2785              		.loc 1 464 7 view .LVU692
 2786 0d0c 000050E3 		cmp	r0, #0	@ tmp191,
 2787              	@ armwave.c:462:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 462:armwave.c     **** 
 2788              		.loc 1 462 38 view .LVU693
 2789 0d10 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2790              		.loc 1 464 5 is_stmt 1 view .LVU694
 2791              	@ armwave.c:464:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2792              		.loc 1 464 7 is_stmt 0 view .LVU695
 2793 0d14 5A00000A 		beq	.L179		@,
 2794              	.L151:
 2795              	.LVL162:
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2796              		.loc 1 464 7 view .LVU696
 2797              	.LBE44:
 2798              	.LBE47:
 2799              	@ armwave.c:517:     for(s = 0; s < sets; s++) {
 516:armwave.c     **** 
 517:armwave.c     ****     for(s = 0; s < sets; s++) {
 2800              		.loc 1 517 5 discriminator 1 view .LVU697
 2801 0d18 000059E3 		cmp	r9, #0	@ sets,
 2802 0d1c 550000DA 		ble	.L149		@,
 2803              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 519:armwave.c     ****     
 520:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 522:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 524:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     **** 
 530:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 532:armwave.c     **** 
 533:armwave.c     ****                 noise += 1.0f;
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 536:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2804              		.loc 1 536 45 view .LVU698
 2805 0d20 5C8A9FED 		vldr.32	s16, .L180	@ tmp258,
 2806              	@ armwave.c:539:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 538:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 539:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2807              		.loc 1 539 104 view .LVU699
 2808 0d24 5CCA9FED 		vldr.32	s24, .L180+4	@ tmp259,
 2809              	@ armwave.c:517:     for(s = 0; s < sets; s++) {
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2810              		.loc 1 517 5 view .LVU700
 2811 0d28 0070A0E3 		mov	r7, #0	@ set_offset,
 2812              	@ armwave.c:518:         printf("Calculating test set %d\n", s);
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2813              		.loc 1 518 9 view .LVU701
 2814 0d2c 84A19FE5 		ldr	r10, .L180+32	@ tmp257,
 2815              	@ armwave.c:517:     for(s = 0; s < sets; s++) {
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2816              		.loc 1 517 5 view .LVU702
 2817 0d30 0780A0E1 		mov	r8, r7	@ s, set_offset
 2818              	.LVL163:
 2819              	.L152:
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2820              		.loc 1 518 9 is_stmt 1 view .LVU703
 2821 0d34 0810A0E1 		mov	r1, r8	@, s
 2822 0d38 0A00A0E1 		mov	r0, r10	@, tmp257
 2823 0d3c FEFFFFEB 		bl	printf		@
 2824              	.LVL164:
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2825              		.loc 1 520 9 view .LVU704
 2826              	@ armwave.c:520:         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2827              		.loc 1 520 39 is_stmt 0 view .LVU705
 2828 0d40 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2829              	@ armwave.c:520:         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2830              		.loc 1 520 9 view .LVU706
 2831 0d44 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2832 0d48 450000DA 		ble	.L153		@,
 2833              	@ armwave.c:522:             mod_val = 0.5f + (_1_waves_mod * w);
 522:armwave.c     **** 
 2834              		.loc 1 522 21 view .LVU707
 2835 0d4c 53CADFED 		vldr.32	s25, .L180+8	@ tmp200,
 2836              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2837              		.loc 1 536 33 view .LVU708
 2838 0d50 53BA9FED 		vldr.32	s22, .L180+12	@ tmp253,
 2839              	@ armwave.c:534:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 2840              		.loc 1 534 24 view .LVU709
 2841 0d54 53AADFED 		vldr.32	s21, .L180+16	@ tmp254,
 2842 0d58 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2843              	@ armwave.c:520:         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2844              		.loc 1 520 15 view .LVU710
 2845 0d5c 0060A0E3 		mov	r6, #0	@ w,
 2846              	.LVL165:
 2847              	.L160:
 522:armwave.c     **** 
 2848              		.loc 1 522 13 is_stmt 1 view .LVU711
 2849              	@ armwave.c:522:             mod_val = 0.5f + (_1_waves_mod * w);
 522:armwave.c     **** 
 2850              		.loc 1 522 21 is_stmt 0 view .LVU712
 2851 0d60 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2852 0d64 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2853              	@ armwave.c:524:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2854              		.loc 1 524 13 view .LVU713
 2855 0d68 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2856              	@ armwave.c:522:             mod_val = 0.5f + (_1_waves_mod * w);
 522:armwave.c     **** 
 2857              		.loc 1 522 21 view .LVU714
 2858 0d6c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2859 0d70 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2860              	.LVL166:
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2861              		.loc 1 524 13 is_stmt 1 view .LVU715
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2862              		.loc 1 524 13 is_stmt 0 view .LVU716
 2863 0d74 370000DA 		ble	.L154		@,
 2864 0d78 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2865              	@ armwave.c:539:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2866              		.loc 1 539 113 view .LVU717
 2867 0d7c 4AAA9FED 		vldr.32	s20, .L180+20	@ tmp229,
 2868 0d80 4A8ADFED 		vldr.32	s17, .L180+24	@ tmp230,
 2869              	@ armwave.c:524:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2870              		.loc 1 524 19 view .LVU718
 2871 0d84 0040A0E3 		mov	r4, #0	@ x,
 2872              	.LVL167:
 2873              	.L159:
 525:armwave.c     ****                 noise *= noise;
 2874              		.loc 1 525 17 is_stmt 1 view .LVU719
 2875              	@ armwave.c:525:                 noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****                 noise *= noise;
 2876              		.loc 1 525 28 is_stmt 0 view .LVU720
 2877 0d88 FEFFFFEB 		bl	rand		@
 2878              	.LVL168:
 2879              	@ armwave.c:525:                 noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****                 noise *= noise;
 2880              		.loc 1 525 35 view .LVU721
 2881 0d8c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2882              	@ armwave.c:525:                 noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****                 noise *= noise;
 2883              		.loc 1 525 45 view .LVU722
 2884 0d90 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2885 0d94 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2886              	@ armwave.c:525:                 noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****                 noise *= noise;
 2887              		.loc 1 525 24 view .LVU723
 2888 0d98 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2889              	.LVL169:
 526:armwave.c     ****                 noise *= noise;
 2890              		.loc 1 526 17 is_stmt 1 view .LVU724
 2891              	@ armwave.c:526:                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 2892              		.loc 1 526 23 is_stmt 0 view .LVU725
 2893 0d9c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2894              	.LVL170:
 527:armwave.c     ****                 noise *= noise;
 2895              		.loc 1 527 17 is_stmt 1 view .LVU726
 2896              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 2897              		.loc 1 527 23 is_stmt 0 view .LVU727
 2898 0da0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2899              	.LVL171:
 528:armwave.c     **** 
 2900              		.loc 1 528 17 is_stmt 1 view .LVU728
 2901              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     **** 
 2902              		.loc 1 528 23 is_stmt 0 view .LVU729
 2903 0da4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2904              	.LVL172:
 530:armwave.c     ****                     noise = -noise;
 2905              		.loc 1 530 17 is_stmt 1 view .LVU730
 2906              	@ armwave.c:530:                 if((rand() & 0xffff) > 0x7fff)
 530:armwave.c     ****                     noise = -noise;
 2907              		.loc 1 530 21 is_stmt 0 view .LVU731
 2908 0da8 FEFFFFEB 		bl	rand		@
 2909              	.LVL173:
 531:armwave.c     **** 
 2910              		.loc 1 531 21 is_stmt 1 view .LVU732
 2911              	@ armwave.c:530:                 if((rand() & 0xffff) > 0x7fff)
 530:armwave.c     ****                     noise = -noise;
 2912              		.loc 1 530 19 is_stmt 0 view .LVU733
 2913 0dac 020910E3 		tst	r0, #32768	@,
 2914              	@ armwave.c:531:                     noise = -noise;
 531:armwave.c     **** 
 2915              		.loc 1 531 27 view .LVU734
 2916 0db0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2917              	.LVL174:
 533:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2918              		.loc 1 533 17 is_stmt 1 view .LVU735
 534:armwave.c     **** 
 2919              		.loc 1 534 17 view .LVU736
 2920              	@ armwave.c:534:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 2921              		.loc 1 534 27 is_stmt 0 view .LVU737
 2922 0db4 FEFFFFEB 		bl	rand		@
 2923              	.LVL175:
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2924              		.loc 1 536 17 is_stmt 1 view .LVU738
 2925              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2926              		.loc 1 536 45 is_stmt 0 view .LVU739
 2927 0db8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2928              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2929              		.loc 1 536 33 view .LVU740
 2930 0dbc 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2931              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2932              		.loc 1 536 45 view .LVU741
 2933 0dc0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2934              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2935              		.loc 1 536 33 view .LVU742
 2936 0dc4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2937              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2938              		.loc 1 536 45 view .LVU743
 2939 0dc8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2940              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2941              		.loc 1 536 33 view .LVU744
 2942 0dcc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2943              	@ armwave.c:534:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 2944              		.loc 1 534 34 view .LVU745
 2945 0dd0 7000FFE6 		uxth	r0, r0	@ tmp214,
 2946              	.LVL176:
 2947              	@ armwave.c:534:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 2948              		.loc 1 534 44 view .LVU746
 2949 0dd4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2950 0dd8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2951              	@ armwave.c:534:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 2952              		.loc 1 534 24 view .LVU747
 2953 0ddc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2954              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2955              		.loc 1 536 77 view .LVU748
 2956 0de0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2957              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2958              		.loc 1 536 22 view .LVU749
 2959 0de4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2960 0de8 FEFFFFEB 		bl	sin		@
 2961              	.LVL177:
 2962              		.loc 1 539 17 is_stmt 1 view .LVU750
 2963              	@ armwave.c:533:                 noise += 1.0f;
 533:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2964              		.loc 1 533 23 is_stmt 0 view .LVU751
 2965 0dec 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2966              	@ armwave.c:539:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2967              		.loc 1 539 104 view .LVU752
 2968 0df0 0010A0E3 		mov	r1, #0	@ iftmp.23_50,
 2969              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2970              		.loc 1 536 98 view .LVU753
 2971 0df4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2972              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2973              		.loc 1 536 87 view .LVU754
 2974 0df8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2975              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2976              		.loc 1 536 98 view .LVU755
 2977 0dfc 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2978              	@ armwave.c:536:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2979              		.loc 1 536 19 view .LVU756
 2980 0e00 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2981              	@ armwave.c:539:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2982              		.loc 1 539 113 view .LVU757
 2983 0e04 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2984 0e08 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2985 0e0c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2986 0e10 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2987 0e14 050000DA 		ble	.L156		@,
 2988              	@ armwave.c:539:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2989              		.loc 1 539 104 discriminator 1 view .LVU758
 2990 0e18 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2991 0e1c FF10A0E3 		mov	r1, #255	@ iftmp.23_50,
 2992 0e20 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2993 0e24 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2994 0e28 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2995 0e2c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_50, %sfp
 2996              	.L156:
 2997              	@ armwave.c:539:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2998              		.loc 1 539 57 discriminator 12 view .LVU759
 2999 0e30 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3000              	@ armwave.c:539:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3001              		.loc 1 539 102 discriminator 12 view .LVU760
 3002 0e34 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3003 0e38 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3004 0e3c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3005              	@ armwave.c:524:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3006              		.loc 1 524 58 discriminator 12 view .LVU761
 3007 0e40 014084E2 		add	r4, r4, #1	@ x, x,
 3008              	.LVL178:
 3009              	@ armwave.c:539:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3010              		.loc 1 539 102 discriminator 12 view .LVU762
 3011 0e44 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.23_50, *_40
 3012              	@ armwave.c:524:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3013              		.loc 1 524 43 discriminator 12 view .LVU763
 3014 0e48 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3015              	@ armwave.c:524:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3016              		.loc 1 524 13 discriminator 12 view .LVU764
 3017 0e4c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3018 0e50 CCFFFFCA 		bgt	.L159		@,
 3019 0e54 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3020              	.LVL179:
 3021              	.L154:
 3022              	@ armwave.c:520:         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3023              		.loc 1 520 48 discriminator 2 view .LVU765
 3024 0e58 016086E2 		add	r6, r6, #1	@ w, w,
 3025              	.LVL180:
 3026              	@ armwave.c:520:         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3027              		.loc 1 520 9 discriminator 2 view .LVU766
 3028 0e5c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3029 0e60 BEFFFFBA 		blt	.L160		@,
 3030              	.LVL181:
 3031              	.L153:
 540:armwave.c     ****             }
 541:armwave.c     ****         }
 542:armwave.c     **** 
 543:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3032              		.loc 1 543 9 is_stmt 1 discriminator 2 view .LVU767
 3033              	@ armwave.c:543:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3034              		.loc 1 543 46 is_stmt 0 discriminator 2 view .LVU768
 3035 0e64 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3036              	@ armwave.c:517:     for(s = 0; s < sets; s++) {
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 3037              		.loc 1 517 27 discriminator 2 view .LVU769
 3038 0e68 018088E2 		add	r8, r8, #1	@ s, s,
 3039              	.LVL182:
 3040              	@ armwave.c:517:     for(s = 0; s < sets; s++) {
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 3041              		.loc 1 517 5 discriminator 2 view .LVU770
 3042 0e6c 080059E1 		cmp	r9, r8	@ sets, s
 3043              	@ armwave.c:543:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3044              		.loc 1 543 20 discriminator 2 view .LVU771
 3045 0e70 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3046              	.LVL183:
 3047              	@ armwave.c:517:     for(s = 0; s < sets; s++) {
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 3048              		.loc 1 517 5 discriminator 2 view .LVU772
 3049 0e74 AEFFFF1A 		bne	.L152		@,
 3050              	.LVL184:
 3051              	.L149:
 3052              	@ armwave.c:545: }
 544:armwave.c     ****     }
 545:armwave.c     **** }
 3053              		.loc 1 545 1 view .LVU773
 3054 0e78 08D08DE2 		add	sp, sp, #8	@,,
 3055              		.cfi_remember_state
 3056              		.cfi_def_cfa_offset 80
 3057              		@ sp needed	@
 3058 0e7c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3059              		.cfi_restore 90
 3060              		.cfi_restore 91
 3061              		.cfi_restore 88
 3062              		.cfi_restore 89
 3063              		.cfi_restore 86
 3064              		.cfi_restore 87
 3065              		.cfi_restore 84
 3066              		.cfi_restore 85
 3067              		.cfi_restore 82
 3068              		.cfi_restore 83
 3069              		.cfi_restore 80
 3070              		.cfi_restore 81
 3071              		.cfi_def_cfa_offset 32
 3072              	.LVL185:
 3073              		.loc 1 545 1 view .LVU774
 3074 0e80 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3075              	.LVL186:
 3076              	.L179:
 3077              		.cfi_restore_state
 3078              	.LBB48:
 3079              	.LBB45:
 465:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3080              		.loc 1 465 9 is_stmt 1 view .LVU775
 3081 0e84 940901E0 		mul	r1, r4, r9	@, _85, sets
 3082 0e88 0920A0E1 		mov	r2, r9	@, sets
 3083 0e8c 28009FE5 		ldr	r0, .L180+36	@,
 3084 0e90 FEFFFFEB 		bl	printf		@
 3085              	.LVL187:
 467:armwave.c     ****     }
 3086              		.loc 1 467 9 view .LVU776
 3087 0e94 9FFFFFEA 		b	.L151		@
 3088              	.L181:
 3089              		.align	2
 3090              	.L180:
 3091 0e98 0000803F 		.word	1065353216
 3092 0e9c 00007F43 		.word	1132396544
 3093 0ea0 0000003F 		.word	1056964608
 3094 0ea4 C3F5C840 		.word	1086911939
 3095 0ea8 38FFC74A 		.word	1254620984
 3096 0eac 0000FE42 		.word	1123942400
 3097 0eb0 00000043 		.word	1124073472
 3098 0eb4 00000000 		.word	g_armwave_state
 3099 0eb8 90020000 		.word	.LC20
 3100 0ebc E8010000 		.word	.LC18
 3101              	.LBE45:
 3102              	.LBE48:
 3103              		.cfi_endproc
 3104              	.LFE75:
 3106              		.align	2
 3107              		.global	armwave_cleanup
 3108              		.syntax unified
 3109              		.arm
 3110              		.fpu vfp
 3112              	armwave_cleanup:
 3113              	.LFB76:
 546:armwave.c     **** 
 547:armwave.c     **** /*
 548:armwave.c     ****  * Make a test square waveform.
 549:armwave.c     ****  *
 550:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 551:armwave.c     ****  */
 552:armwave.c     **** #if 0
 553:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 554:armwave.c     **** {
 555:armwave.c     ****     uint8_t v;
 556:armwave.c     ****     float noise, xnoise;
 557:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 558:armwave.c     ****     int w, x;
 559:armwave.c     **** 
 560:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 561:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 562:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 563:armwave.c     ****             noise *= noise;
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     **** 
 567:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 568:armwave.c     ****                 noise = -noise;
 569:armwave.c     **** 
 570:armwave.c     ****             //noise += 1.0f;
 571:armwave.c     **** 
 572:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 573:armwave.c     ****                 new_level = 0.2f;
 574:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 575:armwave.c     ****                 new_level = 0.8f;
 576:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 577:armwave.c     ****                 new_level = 0.2f;
 578:armwave.c     ****             } else {
 579:armwave.c     ****                 new_level = 0.8f;
 580:armwave.c     ****             }
 581:armwave.c     **** 
 582:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 583:armwave.c     **** 
 584:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 585:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 586:armwave.c     ****         }
 587:armwave.c     ****     }
 588:armwave.c     **** }
 589:armwave.c     **** #endif
 590:armwave.c     **** 
 591:armwave.c     **** /*
 592:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 593:armwave.c     ****  */
 594:armwave.c     **** void armwave_cleanup()
 595:armwave.c     **** {
 3114              		.loc 1 595 1 view -0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 0
 3117              		@ frame_needed = 0, uses_anonymous_args = 0
 596:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3118              		.loc 1 596 5 view .LVU778
 3119              	@ armwave.c:595: {
 595:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3120              		.loc 1 595 1 is_stmt 0 view .LVU779
 3121 0ec0 10402DE9 		push	{r4, lr}	@
 3122              		.cfi_def_cfa_offset 8
 3123              		.cfi_offset 4, -8
 3124              		.cfi_offset 14, -4
 3125              	@ armwave.c:596:     free(g_armwave_state.out_pixbuf);
 3126              		.loc 1 596 25 view .LVU780
 3127 0ec4 34409FE5 		ldr	r4, .L184	@ tmp114,
 3128              	@ armwave.c:596:     free(g_armwave_state.out_pixbuf);
 3129              		.loc 1 596 5 view .LVU781
 3130 0ec8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3131 0ecc FEFFFFEB 		bl	free		@
 3132              	.LVL188:
 597:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3133              		.loc 1 597 5 is_stmt 1 view .LVU782
 3134 0ed0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3135 0ed4 FEFFFFEB 		bl	free		@
 3136              	.LVL189:
 598:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3137              		.loc 1 598 5 view .LVU783
 3138 0ed8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3139 0edc FEFFFFEB 		bl	free		@
 3140              	.LVL190:
 599:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3141              		.loc 1 599 5 view .LVU784
 3142 0ee0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3143 0ee4 FEFFFFEB 		bl	free		@
 3144              	.LVL191:
 600:armwave.c     **** 
 601:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3145              		.loc 1 601 5 view .LVU785
 3146              	@ armwave.c:601:     g_armwave_state.out_pixbuf = NULL;
 3147              		.loc 1 601 32 is_stmt 0 view .LVU786
 3148 0ee8 0030A0E3 		mov	r3, #0	@ tmp123,
 3149 0eec 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 602:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3150              		.loc 1 602 5 is_stmt 1 view .LVU787
 3151              	@ armwave.c:602:     g_armwave_state.ch1_buffer = NULL;
 3152              		.loc 1 602 32 is_stmt 0 view .LVU788
 3153 0ef0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 603:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3154              		.loc 1 603 5 is_stmt 1 view .LVU789
 3155              	@ armwave.c:603:     g_armwave_state.xcoord_to_xpixel = NULL;
 3156              		.loc 1 603 38 is_stmt 0 view .LVU790
 3157 0ef4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 604:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3158              		.loc 1 604 5 is_stmt 1 view .LVU791
 3159              	@ armwave.c:604:     g_armwave_state.test_wave_buffer = NULL;
 3160              		.loc 1 604 38 is_stmt 0 view .LVU792
 3161 0ef8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3162              	@ armwave.c:605: }
 605:armwave.c     **** }
 3163              		.loc 1 605 1 view .LVU793
 3164 0efc 1080BDE8 		pop	{r4, pc}	@
 3165              	.L185:
 3166              		.align	2
 3167              	.L184:
 3168 0f00 00000000 		.word	g_armwave_state
 3169              		.cfi_endproc
 3170              	.LFE76:
 3172              		.comm	gamma_table,256,4
 3173              		.comm	g_armwave_state,136,4
 3174              		.section	.rodata
 3175              		.align	2
 3176              		.set	.LANCHOR0,. + 0
 3179              	__PRETTY_FUNCTION__.17096:
 3180 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3180      6176655F 
 3180      66696C6C 
 3180      5F706978 
 3180      6275665F 
 3181 001b 00       		.space	1
 3184              	__PRETTY_FUNCTION__.17123:
 3185 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3185      6176655F 
 3185      73657475 
 3185      705F7265 
 3185      6E646572 
 3186 0031 000000   		.space	3
 3189              	__PRETTY_FUNCTION__.17130:
 3190 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3190      6176655F 
 3190      7365745F 
 3190      77617665 
 3190      5F706F69 
 3191 004d 000000   		.space	3
 3194              	__PRETTY_FUNCTION__.17137:
 3195 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3195      6176655F 
 3195      7365745F 
 3195      77617665 
 3195      5F706F69 
 3196              		.section	.rodata.str1.4,"aMS",%progbits,1
 3197              		.align	2
 3198              	.LC0:
 3199 0000 76302E30 		.ascii	"v0.0.1\000"
 3199      2E3100
 3200 0007 00       		.space	1
 3201              	.LC1:
 3202 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3202      61766520 
 3202      76657273 
 3202      696F6E3A 
 3202      2025730A 
 3203 001d 000000   		.space	3
 3204              	.LC2:
 3205 0020 61726D77 		.ascii	"armwave.c\000"
 3205      6176652E 
 3205      6300
 3206 002a 0000     		.space	2
 3207              	.LC3:
 3208 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3208      62756666 
 3208      65722021 
 3208      3D204E55 
 3208      4C4C00
 3209 003f 00       		.space	1
 3210              	.LC4:
 3211 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3211      20653D25 
 3211      6420773D 
 3211      25642077 
 3211      733D2564 
 3212              	.LC5:
 3213 006c 73746172 		.ascii	"start_point < end_point\000"
 3213      745F706F 
 3213      696E7420 
 3213      3C20656E 
 3213      645F706F 
 3214              	.LC6:
 3215 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3215      7566665F 
 3215      73697A65 
 3215      3D25642C 
 3215      20636D70 
 3216 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3216      5F776964 
 3216      74683D25 
 3216      642C2077 
 3216      6176655F 
 3217 00e1 000000   		.space	3
 3218              	.LC7:
 3219 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3219      6D776176 
 3219      655F7374 
 3219      6174652E 
 3219      6368315F 
 3220 0107 00       		.space	1
 3221              	.LC8:
 3222 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3222      6D776176 
 3222      655F7374 
 3222      6174652E 
 3222      78636F6F 
 3223 0131 000000   		.space	3
 3224              	.LC9:
 3225 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3225      3A203078 
 3225      25303878 
 3225      20307825 
 3225      30387820 
 3226              	.LC10:
 3227 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3227      5F627566 
 3227      66657220 
 3227      213D204E 
 3227      554C4C00 
 3228              	.LC11:
 3229 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3229      6176655F 
 3229      7365745F 
 3229      77617665 
 3229      5F706F69 
 3230 019f 78636565 		.ascii	"xceeded\000"
 3230      64656400 
 3231 01a7 00       		.space	1
 3232              	.LC12:
 3233 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3233      5F627566 
 3233      6665725F 
 3233      70747220 
 3233      213D2030 
 3234 01bd 000000   		.space	3
 3235              	.LC13:
 3236 01c0 776200   		.ascii	"wb\000"
 3237 01c3 00       		.space	1
 3238              	.LC14:
 3239 01c4 50330A00 		.ascii	"P3\012\000"
 3240              	.LC15:
 3241 01c8 25642025 		.ascii	"%d %d\012\000"
 3241      640A00
 3242 01cf 00       		.space	1
 3243              	.LC16:
 3244 01d0 3235350A 		.ascii	"255\012\000"
 3244      00
 3245 01d5 000000   		.space	3
 3246              	.LC17:
 3247 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3247      25336420 
 3247      2533640A 
 3247      00
 3248 01e5 000000   		.space	3
 3249              	.LC18:
 3250 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3250      6176655F 
 3250      74657374 
 3250      5F627566 
 3250      6665725F 
 3251 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3251      20627566 
 3251      66657220 
 3251      28256420 
 3251      62797465 
 3252              	.LC19:
 3253 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3253      6176655F 
 3253      66696C6C 
 3253      5F706978 
 3253      6275665F 
 3254 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3254      20666169 
 3254      6C65642C 
 3254      20726574 
 3254      75726E69 
 3255 028e 0000     		.space	2
 3256              	.LC20:
 3257 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3257      756C6174 
 3257      696E6720 
 3257      74657374 
 3257      20736574 
 3258              		.text
 3259              	.Letext0:
 3260              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3261              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3262              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3263              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3264              		.file 7 "/usr/include/stdio.h"
 3265              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3266              		.file 9 "/usr/include/errno.h"
 3267              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3268              		.file 11 "/usr/include/unistd.h"
 3269              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3270              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3271              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3272              		.file 15 "/usr/include/math.h"
 3273              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3274              		.file 17 "/usr/include/time.h"
 3275              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3276              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3277              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3278              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3279              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3280              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3281              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3282              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3283              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3284              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3285              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3286              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3287              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3288              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3289              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3290              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3291              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3292              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3293              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3294              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3295              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3296              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3297              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3298              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3299              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3300              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3301              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3302              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3303              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3304              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3305              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3306              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3307              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3308              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3309              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3310              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3311              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3312              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3313              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3314              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3315              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3316              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3317              		.file 60 "/usr/local/include/python3.8/context.h"
 3318              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3319              		.file 62 "/usr/local/include/python3.8/code.h"
 3320              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3321              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3322              		.file 65 "/usr/local/include/python3.8/import.h"
 3323              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3324              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3325              		.file 68 "/usr/include/malloc.h"
 3326              		.file 69 "armwave.h"
 3327              		.file 70 "/usr/include/stdlib.h"
 3328              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3329              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3330              		.file 73 "<built-in>"
 3331              		.file 74 "/usr/include/assert.h"
