   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_NWAVES                 64
  25:armwave.c     **** #define TEST_WAVE_SIZE              2048
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t gamma_table[256];
  40:armwave.c     **** 
  41:armwave.c     **** /*
  42:armwave.c     ****  * Create a gamma table.
  43:armwave.c     ****  */
  44:armwave.c     **** void test_create_gamma()
  45:armwave.c     **** {
  85              		.loc 1 45 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  46:armwave.c     ****     int i;
  89              		.loc 1 46 5 view .LVU1
  47:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 47 5 view .LVU2
  91              	.LVL0:
  48:armwave.c     **** 
  49:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 49 5 view .LVU3
  93              	@ armwave.c:45: {
  45:armwave.c     ****     int i;
  94              		.loc 1 45 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.43,
 110              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 50 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 50 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 50 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.43,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.43,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 50 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 50 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.43
 128              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 50 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 50 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 50 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 50 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 50 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:49:     for(i = 0; i < 256; i++) {
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 49 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.43, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:52: }
  51:armwave.c     ****     }
  52:armwave.c     **** }
 155              		.loc 1 52 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 52 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * Initialise things.  STUB, mostly.
  56:armwave.c     ****  */
  57:armwave.c     **** void armwave_init()
  58:armwave.c     **** {
 187              		.loc 1 58 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  59:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 59 5 view .LVU19
 193              	@ armwave.c:59:     g_armwave_state.flags = 0;
 194              		.loc 1 59 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:61:     printf("armwave version: %s\n", ARMWAVE_VER);
  60:armwave.c     **** 
  61:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 61 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:59:     g_armwave_state.flags = 0;
  59:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 59 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 61 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  62:armwave.c     **** }
  63:armwave.c     **** 
  64:armwave.c     **** /*
  65:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  66:armwave.c     ****  * pre-computed.
  67:armwave.c     ****  *
  68:armwave.c     ****  * @param    slice_y        Slice to render at
  69:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  70:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  71:armwave.c     ****  */
  72:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  73:armwave.c     **** {
 225              		.loc 1 73 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  74:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 74 5 view .LVU25
  75:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 75 5 view .LVU26
  76:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 76 5 view .LVU27
  77:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 77 5 view .LVU28
  78:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 78 5 view .LVU29
  79:armwave.c     **** 
  80:armwave.c     ****     //printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:73: {
  73:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 73 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 249              		.loc 1 81 40 view .LVU32
 250 00a0 D0409FE5 		ldr	r4, .L23	@ tmp242,
 251              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  82:armwave.c     **** 
  83:armwave.c     ****     // roll through each waveform
  84:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 252              		.loc 1 84 5 view .LVU33
 253 00a4 282094E5 		ldr	r2, [r4, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 254              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 255              		.loc 1 81 63 view .LVU34
 256 00a8 305094E5 		ldr	r5, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 257              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 84 5 view .LVU35
 259 00ac 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 261              		.loc 1 81 40 view .LVU36
 262 00b0 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 264              		.loc 1 81 63 view .LVU37
 265 00b4 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 266              	.LVL7:
 267              		.loc 1 84 5 is_stmt 1 view .LVU38
 268              		.loc 1 84 5 is_stmt 0 view .LVU39
 269 00b8 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 270 00bc 000051E3 		cmp	r1, #0	@ height,
 271 00c0 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 272 00c4 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 273              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 84 11 view .LVU40
 275 00c8 0070A0E3 		mov	r7, #0	@ w,
 276              	.LVL8:
 277              	.L15:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  86:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 86 9 is_stmt 1 view .LVU41
  87:armwave.c     **** 
  88:armwave.c     ****         // roll through y and render the slice into the out buffer
  89:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  90:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 279              		.loc 1 90 9 view .LVU42
 280              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 281              		.loc 1 86 64 is_stmt 0 view .LVU43
 282 00cc 240094E5 		ldr	r0, [r4, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 283 00d0 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 284              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
 285              		.loc 1 90 16 view .LVU44
 286 00d4 0020A0E3 		mov	r2, #0	@ yy,
 287 00d8 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 288 00dc 006086E0 		add	r6, r6, r0	@ ivtmp.50, g_armwave_state.wave_buffer, tmp193
 289              	.LVL9:
 290              	.L14:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 291              		.loc 1 91 13 is_stmt 1 view .LVU45
 292              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
 293              		.loc 1 91 18 is_stmt 0 view .LVU46
 294 00e0 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 295              	.LVL10:
  92:armwave.c     **** 
  93:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 296              		.loc 1 93 13 is_stmt 1 view .LVU47
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  95:armwave.c     ****                 scale_value = (word & 0xff);
 297              		.loc 1 95 17 view .LVU48
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 298              		.loc 1 96 17 view .LVU49
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 299              		.loc 1 97 17 view .LVU50
 300              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 96 63 is_stmt 0 view .LVU51
 302 00e4 309094E5 		ldr	r9, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 303 00e8 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 304              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 97 47 view .LVU52
 306 00ec 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 307 00f0 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 308              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****                 word >>= 8;
 309              		.loc 1 98 22 view .LVU53
 310 00f4 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 311 00f8 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 312              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 313              		.loc 1 97 47 view .LVU54
 314 00fc 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 315 0100 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 316 0104 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 317 0108 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 318              	.LVL11:
 319              		.loc 1 98 17 is_stmt 1 view .LVU55
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 320              		.loc 1 95 17 view .LVU56
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 96 17 view .LVU57
  97:armwave.c     ****                 word >>= 8;
 322              		.loc 1 97 17 view .LVU58
 323              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 96 63 is_stmt 0 view .LVU59
 325 010c 30E094E5 		ldr	lr, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 326              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 327              		.loc 1 97 47 view .LVU60
 328 0110 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 329 0114 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 330              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 96 63 view .LVU61
 332 0118 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 333 011c 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 334              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 335              		.loc 1 97 47 view .LVU62
 336 0120 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 337 0124 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 338              	.LVL12:
 339              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 340              		.loc 1 90 37 view .LVU63
 341 0128 042082E2 		add	r2, r2, #4	@ yy, yy,
 342              	.LVL13:
 343              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 344              		.loc 1 97 47 view .LVU64
 345 012c 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 346 0130 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 347              	.LVL14:
 348              		.loc 1 98 17 is_stmt 1 view .LVU65
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 349              		.loc 1 95 17 view .LVU66
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 350              		.loc 1 96 17 view .LVU67
  97:armwave.c     ****                 word >>= 8;
 351              		.loc 1 97 17 view .LVU68
 352              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 96 63 is_stmt 0 view .LVU69
 354 0134 30E094E5 		ldr	lr, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 355              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 356              		.loc 1 90 9 view .LVU70
 357 0138 020051E1 		cmp	r1, r2	@ height, yy
 358              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 359              		.loc 1 97 47 view .LVU71
 360 013c 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 361 0140 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 362 0144 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 363 0148 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 364              		.loc 1 98 17 is_stmt 1 view .LVU72
 365              	.LVL15:
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 366              		.loc 1 95 17 view .LVU73
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 367              		.loc 1 96 17 view .LVU74
  97:armwave.c     ****                 word >>= 8;
 368              		.loc 1 97 17 view .LVU75
 369              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 96 63 is_stmt 0 view .LVU76
 371 014c 30C094E5 		ldr	ip, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 372              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 373              		.loc 1 97 47 view .LVU77
 374 0150 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 375 0154 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 376 0158 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 377 015c 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 378              		.loc 1 98 17 is_stmt 1 view .LVU78
 379              	.LVL16:
 380              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 381              		.loc 1 90 9 is_stmt 0 view .LVU79
 382 0160 DEFFFF8A 		bhi	.L14		@,
 383              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 384              		.loc 1 84 5 view .LVU80
 385 0164 282094E5 		ldr	r2, [r4, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 386              	.LVL17:
 387              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 388              		.loc 1 84 44 view .LVU81
 389 0168 017087E2 		add	r7, r7, #1	@ w, w,
 390              	.LVL18:
 391              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 392              		.loc 1 84 5 view .LVU82
 393 016c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 394 0170 D5FFFF3A 		bcc	.L15		@,
 395 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 396              	.L24:
 397              		.align	2
 398              	.L23:
 399 0178 00000000 		.word	g_armwave_state
 400              		.cfi_endproc
 401              	.LFE59:
 403              		.align	2
 404              		.global	armwave_fill_pixbuf_256
 405              		.syntax unified
 406              		.arm
 407              		.fpu vfp
 409              	armwave_fill_pixbuf_256:
 410              	.LVL19:
 411              	.LFB60:
  99:armwave.c     ****             }
 100:armwave.c     ****         }
 101:armwave.c     ****     }
 102:armwave.c     **** }
 103:armwave.c     **** 
 104:armwave.c     **** /*
 105:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 106:armwave.c     ****  */
 107:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 108:armwave.c     **** {
 412              		.loc 1 108 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 416              		.loc 1 109 5 view .LVU84
 110:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 417              		.loc 1 110 5 view .LVU85
 111:armwave.c     ****     uint8_t r, g, b, value;
 418              		.loc 1 111 5 view .LVU86
 112:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 419              		.loc 1 112 5 view .LVU87
 420              	@ armwave.c:108: {
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 421              		.loc 1 108 1 is_stmt 0 view .LVU88
 422 017c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 423              		.cfi_def_cfa_offset 36
 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 8, -20
 429              		.cfi_offset 9, -16
 430              		.cfi_offset 10, -12
 431              		.cfi_offset 11, -8
 432              		.cfi_offset 14, -4
 433              	@ armwave.c:116:     assert(out_buffer != NULL);
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 114:armwave.c     ****     uint32_t offset;
 115:armwave.c     **** 
 116:armwave.c     ****     assert(out_buffer != NULL);
 434              		.loc 1 116 5 view .LVU89
 435 0180 000050E3 		cmp	r0, #0	@ out_buffer
 436              	@ armwave.c:112:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 437              		.loc 1 112 15 view .LVU90
 438 0184 44529FE5 		ldr	r5, .L52	@ tmp360,
 439              	@ armwave.c:108: {
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 440              		.loc 1 108 1 view .LVU91
 441 0188 0CD04DE2 		sub	sp, sp, #12	@,,
 442              		.cfi_def_cfa_offset 48
 443              	@ armwave.c:112:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 444              		.loc 1 112 15 view .LVU92
 445 018c 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 446              	.LVL20:
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 447              		.loc 1 113 5 is_stmt 1 view .LVU93
 114:armwave.c     **** 
 448              		.loc 1 114 5 view .LVU94
 449              		.loc 1 116 5 view .LVU95
 450 0190 8900000A 		beq	.L50		@,
 117:armwave.c     **** 
 118:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 119:armwave.c     **** 
 120:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 451              		.loc 1 120 5 view .LVU96
 452              	@ armwave.c:120:     npix = g_armwave_state.target_width * 256;
 453              		.loc 1 120 41 is_stmt 0 view .LVU97
 454 0194 48C095E5 		ldr	ip, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 455 0198 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 456              	.LVL21:
 121:armwave.c     **** 
 122:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 457              		.loc 1 122 5 is_stmt 1 view .LVU98
 458              		.loc 1 122 5 is_stmt 0 view .LVU99
 459 019c 00005CE3 		cmp	ip, #0	@ npix,
 460 01a0 0A0000DA 		ble	.L25		@,
 461              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 124:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 125:armwave.c     ****         // most normal waveforms.
 126:armwave.c     ****         wave_word = *base_32ptr++;
 127:armwave.c     **** 
 128:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 130:armwave.c     ****                 value = wave_word & 0xff;
 131:armwave.c     ****                 wave_word >>= 8;
 132:armwave.c     **** 
 133:armwave.c     ****                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 462              		.loc 1 134 52 view .LVU100
 463 01a4 FCA5D5E1 		ldrsh	r10, [r5, #92]	@ _70, g_armwave_state.ch1_color.r
 464              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 465              		.loc 1 135 52 view .LVU101
 466 01a8 FE95D5E1 		ldrsh	r9, [r5, #94]	@ _76, g_armwave_state.ch1_color.g
 467              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 468              		.loc 1 136 52 view .LVU102
 469 01ac F0B6D5E1 		ldrsh	fp, [r5, #96]	@ _80, g_armwave_state.ch1_color.b
 470              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 471              		.loc 1 122 11 view .LVU103
 472 01b0 0030A0E3 		mov	r3, #0	@ n,
 473 01b4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 474              	.LVL22:
 475              	.L34:
 126:armwave.c     **** 
 476              		.loc 1 126 9 is_stmt 1 view .LVU104
 477              	@ armwave.c:126:         wave_word = *base_32ptr++;
 126:armwave.c     **** 
 478              		.loc 1 126 19 is_stmt 0 view .LVU105
 479 01b8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 480              	.LVL23:
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 481              		.loc 1 128 9 is_stmt 1 view .LVU106
 482              	@ armwave.c:128:         if(COND_UNLIKELY(wave_word != 0)) {
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 483              		.loc 1 128 11 is_stmt 0 view .LVU107
 484 01bc 000052E3 		cmp	r2, #0	@ wave_word,
 485 01c0 0400001A 		bne	.L51		@,
 486              	.LVL24:
 487              	.L29:
 488              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 489              		.loc 1 122 28 discriminator 2 view .LVU108
 490 01c4 043083E2 		add	r3, r3, #4	@ n, n,
 491              	.LVL25:
 492              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 493              		.loc 1 122 5 discriminator 2 view .LVU109
 494 01c8 03005CE1 		cmp	ip, r3	@ npix, n
 495 01cc F9FFFFCA 		bgt	.L34		@,
 496              	.LVL26:
 497              	.L25:
 498              	@ armwave.c:155: }
 137:armwave.c     **** 
 138:armwave.c     ****                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 141:armwave.c     **** 
 142:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 143:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 145:armwave.c     ****                     // Is there a better way?
 146:armwave.c     ****                     nsub = n + i;
 147:armwave.c     ****                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 152:armwave.c     ****             }
 153:armwave.c     ****         } 
 154:armwave.c     ****     }
 155:armwave.c     **** }
 499              		.loc 1 155 1 view .LVU110
 500 01d0 0CD08DE2 		add	sp, sp, #12	@,,
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed	@
 504 01d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 505              	.LVL27:
 506              	.L51:
 507              		.cfi_restore_state
 130:armwave.c     ****                 wave_word >>= 8;
 508              		.loc 1 130 17 is_stmt 1 view .LVU111
 131:armwave.c     **** 
 509              		.loc 1 131 17 view .LVU112
 510              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 511              		.loc 1 133 19 is_stmt 0 view .LVU113
 512 01d8 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 513              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 514              		.loc 1 131 27 view .LVU114
 515 01dc 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 516              	.LVL28:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 517              		.loc 1 133 17 is_stmt 1 view .LVU115
 518              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 519              		.loc 1 133 19 is_stmt 0 view .LVU116
 520 01e0 1900000A 		beq	.L30		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 521              		.loc 1 134 21 is_stmt 1 view .LVU117
 522              	.LVL29:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 523              		.loc 1 135 21 view .LVU118
 136:armwave.c     **** 
 524              		.loc 1 136 21 view .LVU119
 138:armwave.c     ****                     g = MIN(gg, 255);
 525              		.loc 1 138 21 view .LVU120
 139:armwave.c     ****                     b = MIN(bb, 255);
 526              		.loc 1 139 21 view .LVU121
 140:armwave.c     **** 
 527              		.loc 1 140 21 view .LVU122
 143:armwave.c     **** 
 528              		.loc 1 143 21 view .LVU123
 146:armwave.c     ****                     xx = nsub & 0xff;
 529              		.loc 1 146 21 view .LVU124
 147:armwave.c     ****                     yy = nsub >> 8;
 530              		.loc 1 147 21 view .LVU125
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 531              		.loc 1 148 21 view .LVU126
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 532              		.loc 1 149 21 view .LVU127
 150:armwave.c     ****                 }
 533              		.loc 1 150 21 view .LVU128
 534              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 535              		.loc 1 136 55 is_stmt 0 view .LVU129
 536 01e4 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 537              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 538              		.loc 1 135 55 view .LVU130
 539 01e8 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 540              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 541              		.loc 1 136 24 view .LVU131
 542 01ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 543              	.LVL30:
 544              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 545              		.loc 1 140 25 view .LVU132
 546 01f0 FF0054E3 		cmp	r4, #255	@ bb,
 547              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 548              		.loc 1 135 24 view .LVU133
 549 01f4 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 550              	.LVL31:
 551              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 552              		.loc 1 140 25 view .LVU134
 553 01f8 FF40A0A3 		movge	r4, #255	@ bb,
 554              	.LVL32:
 555              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 556              		.loc 1 134 55 view .LVU135
 557 01fc 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 558              	.LVL33:
 559              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 560              		.loc 1 139 25 view .LVU136
 561 0200 FF0058E3 		cmp	r8, #255	@ gg,
 562 0204 FF80A0A3 		movge	r8, #255	@ gg,
 563              	.LVL34:
 564              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 565              		.loc 1 134 24 view .LVU137
 566 0208 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 567              	.LVL35:
 568              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 569              		.loc 1 143 56 view .LVU138
 570 020c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 571              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 572              		.loc 1 150 39 view .LVU139
 573 0210 480095E5 		ldr	r0, [r5, #72]	@ tmp372, g_armwave_state.target_width
 574              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 575              		.loc 1 143 44 view .LVU140
 576 0214 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 577              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 578              		.loc 1 138 25 view .LVU141
 579 0218 FF0056E3 		cmp	r6, #255	@ rr,
 580              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 581              		.loc 1 143 56 view .LVU142
 582 021c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 583              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 584              		.loc 1 147 24 view .LVU143
 585 0220 7370EFE6 		uxtb	r7, r3	@ xx, n
 586              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 587              		.loc 1 143 44 view .LVU144
 588 0224 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 589              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 590              		.loc 1 143 51 view .LVU145
 591 0228 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 592              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 593              		.loc 1 138 25 view .LVU146
 594 022c FF60A0A3 		movge	r6, #255	@ rr,
 595              	.LVL36:
 596              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 597              		.loc 1 148 31 view .LVU147
 598 0230 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 599              	.LVL37:
 600              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 601              		.loc 1 150 39 view .LVU148
 602 0234 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 603              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 604              		.loc 1 143 62 view .LVU149
 605 0238 7660EFE6 		uxtb	r6, r6	@ rr, rr
 606              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 607              		.loc 1 150 49 view .LVU150
 608 023c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 609              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 610              		.loc 1 143 62 view .LVU151
 611 0240 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 612              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 613              		.loc 1 143 26 view .LVU152
 614 0244 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 615              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 616              		.loc 1 150 49 view .LVU153
 617 0248 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 618              	.LVL38:
 619              	.L30:
 130:armwave.c     ****                 wave_word >>= 8;
 620              		.loc 1 130 17 is_stmt 1 view .LVU154
 131:armwave.c     **** 
 621              		.loc 1 131 17 view .LVU155
 622              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 133 19 is_stmt 0 view .LVU156
 624 024c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 625              	.LVL39:
 626              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 627              		.loc 1 131 27 view .LVU157
 628 0250 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 629              	.LVL40:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 630              		.loc 1 133 17 is_stmt 1 view .LVU158
 631              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 133 19 is_stmt 0 view .LVU159
 633 0254 1C00000A 		beq	.L31		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 134 21 is_stmt 1 view .LVU160
 635              	.LVL41:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 135 21 view .LVU161
 136:armwave.c     **** 
 637              		.loc 1 136 21 view .LVU162
 138:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 138 21 view .LVU163
 139:armwave.c     ****                     b = MIN(bb, 255);
 639              		.loc 1 139 21 view .LVU164
 140:armwave.c     **** 
 640              		.loc 1 140 21 view .LVU165
 143:armwave.c     **** 
 641              		.loc 1 143 21 view .LVU166
 146:armwave.c     ****                     xx = nsub & 0xff;
 642              		.loc 1 146 21 view .LVU167
 643              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 644              		.loc 1 136 55 is_stmt 0 view .LVU168
 645 0258 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 646              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 135 55 view .LVU169
 648 025c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 649              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 650              		.loc 1 136 24 view .LVU170
 651 0260 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 652              	.LVL42:
 653              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 654              		.loc 1 140 25 view .LVU171
 655 0264 FF0054E3 		cmp	r4, #255	@ bb,
 656 0268 FF40A0A3 		movge	r4, #255	@ bb,
 657              	.LVL43:
 658              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 659              		.loc 1 134 55 view .LVU172
 660 026c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 661              	.LVL44:
 662              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 135 24 view .LVU173
 664 0270 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 665              	.LVL45:
 666              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 667              		.loc 1 143 44 view .LVU174
 668 0274 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 669              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 670              		.loc 1 139 25 view .LVU175
 671 0278 FF0057E3 		cmp	r7, #255	@ gg,
 672 027c 016083E2 		add	r6, r3, #1	@ _158, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 673              		.loc 1 147 21 is_stmt 1 view .LVU176
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 674              		.loc 1 148 21 view .LVU177
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 675              		.loc 1 149 21 view .LVU178
 150:armwave.c     ****                 }
 676              		.loc 1 150 21 view .LVU179
 677              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 678              		.loc 1 143 44 is_stmt 0 view .LVU180
 679 0280 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 680              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 681              		.loc 1 139 25 view .LVU181
 682 0284 FF70A0A3 		movge	r7, #255	@ gg,
 683              	.LVL46:
 684              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 685              		.loc 1 143 44 view .LVU182
 686 0288 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 687              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 688              		.loc 1 150 39 view .LVU183
 689 028c 484095E5 		ldr	r4, [r5, #72]	@ tmp375, g_armwave_state.target_width
 690              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 691              		.loc 1 134 24 view .LVU184
 692 0290 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 693              	.LVL47:
 694              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 695              		.loc 1 147 24 view .LVU185
 696 0294 7600EFE6 		uxtb	r0, r6	@ xx, _158
 697              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 698              		.loc 1 138 25 view .LVU186
 699 0298 FF005EE3 		cmp	lr, #255	@ rr,
 700              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 701              		.loc 1 143 56 view .LVU187
 702 029c 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 703              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 704              		.loc 1 148 31 view .LVU188
 705 02a0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 706              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 707              		.loc 1 150 39 view .LVU189
 708 02a4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 709              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 138 25 view .LVU190
 711 02a8 FFE0A0A3 		movge	lr, #255	@ rr,
 712              	.LVL48:
 713              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 714              		.loc 1 143 51 view .LVU191
 715 02ac 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 716              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 717              		.loc 1 143 56 view .LVU192
 718 02b0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 719              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 720              		.loc 1 143 51 view .LVU193
 721 02b4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 722              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 723              		.loc 1 143 62 view .LVU194
 724 02b8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 725              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 726              		.loc 1 150 49 view .LVU195
 727 02bc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 728              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 729              		.loc 1 143 62 view .LVU196
 730 02c0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 731              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 732              		.loc 1 143 26 view .LVU197
 733 02c4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 734              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 735              		.loc 1 150 49 view .LVU198
 736 02c8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 737              	.LVL49:
 738              	.L31:
 130:armwave.c     ****                 wave_word >>= 8;
 739              		.loc 1 130 17 is_stmt 1 view .LVU199
 131:armwave.c     **** 
 740              		.loc 1 131 17 view .LVU200
 741              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 133 19 is_stmt 0 view .LVU201
 743 02cc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 744              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 745              		.loc 1 131 27 view .LVU202
 746 02d0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 747              	.LVL50:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 133 17 is_stmt 1 view .LVU203
 749              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 133 19 is_stmt 0 view .LVU204
 751 02d4 1A00000A 		beq	.L32		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 134 21 is_stmt 1 view .LVU205
 753              	.LVL51:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 135 21 view .LVU206
 136:armwave.c     **** 
 755              		.loc 1 136 21 view .LVU207
 138:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 138 21 view .LVU208
 139:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 139 21 view .LVU209
 140:armwave.c     **** 
 758              		.loc 1 140 21 view .LVU210
 143:armwave.c     **** 
 759              		.loc 1 143 21 view .LVU211
 146:armwave.c     ****                     xx = nsub & 0xff;
 760              		.loc 1 146 21 view .LVU212
 761              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 762              		.loc 1 136 55 is_stmt 0 view .LVU213
 763 02d8 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 764              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 765              		.loc 1 135 55 view .LVU214
 766 02dc 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 767              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 768              		.loc 1 136 24 view .LVU215
 769 02e0 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 770              	.LVL52:
 771              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 772              		.loc 1 134 55 view .LVU216
 773 02e4 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 774              	.LVL53:
 775              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 776              		.loc 1 140 25 view .LVU217
 777 02e8 FF0054E3 		cmp	r4, #255	@ bb,
 778              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 779              		.loc 1 135 24 view .LVU218
 780 02ec 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 781              	.LVL54:
 782              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 783              		.loc 1 140 25 view .LVU219
 784 02f0 FF40A0A3 		movge	r4, #255	@ bb,
 785              	.LVL55:
 786              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 787              		.loc 1 139 25 view .LVU220
 788 02f4 FF0056E3 		cmp	r6, #255	@ gg,
 789 02f8 FF60A0A3 		movge	r6, #255	@ gg,
 790              	.LVL56:
 139:armwave.c     ****                     b = MIN(bb, 255);
 791              		.loc 1 139 25 view .LVU221
 792 02fc 027083E2 		add	r7, r3, #2	@ _66, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 793              		.loc 1 147 21 is_stmt 1 view .LVU222
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 794              		.loc 1 148 21 view .LVU223
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 795              		.loc 1 149 21 view .LVU224
 150:armwave.c     ****                 }
 796              		.loc 1 150 21 view .LVU225
 797              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 798              		.loc 1 134 24 is_stmt 0 view .LVU226
 799 0300 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 800              	.LVL57:
 801              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 802              		.loc 1 150 39 view .LVU227
 803 0304 480095E5 		ldr	r0, [r5, #72]	@ tmp376, g_armwave_state.target_width
 804              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 805              		.loc 1 138 25 view .LVU228
 806 0308 FF005EE3 		cmp	lr, #255	@ rr,
 807              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 808              		.loc 1 147 24 view .LVU229
 809 030c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 810              	.LVL58:
 811              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 812              		.loc 1 143 56 view .LVU230
 813 0310 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 814              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 815              		.loc 1 143 44 view .LVU231
 816 0314 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 817              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 138 25 view .LVU232
 819 0318 FFE0A0A3 		movge	lr, #255	@ rr,
 820              	.LVL59:
 821              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 822              		.loc 1 148 31 view .LVU233
 823 031c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 824              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 825              		.loc 1 150 39 view .LVU234
 826 0320 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 827              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 828              		.loc 1 143 44 view .LVU235
 829 0324 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 830              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 831              		.loc 1 143 56 view .LVU236
 832 0328 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 833              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 834              		.loc 1 143 51 view .LVU237
 835 032c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 836              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 837              		.loc 1 143 62 view .LVU238
 838 0330 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 839              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 840              		.loc 1 150 49 view .LVU239
 841 0334 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 842              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 843              		.loc 1 143 62 view .LVU240
 844 0338 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 845              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 846              		.loc 1 143 26 view .LVU241
 847 033c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 848              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 849              		.loc 1 150 49 view .LVU242
 850 0340 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 851              	.L32:
 852              	.LVL60:
 130:armwave.c     ****                 wave_word >>= 8;
 853              		.loc 1 130 17 is_stmt 1 view .LVU243
 131:armwave.c     **** 
 854              		.loc 1 131 17 view .LVU244
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 855              		.loc 1 133 17 view .LVU245
 856              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 857              		.loc 1 133 19 is_stmt 0 view .LVU246
 858 0344 000052E3 		cmp	r2, #0	@ wave_word,
 859 0348 9DFFFF0A 		beq	.L29		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 860              		.loc 1 134 21 is_stmt 1 view .LVU247
 861              	.LVL61:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 862              		.loc 1 135 21 view .LVU248
 136:armwave.c     **** 
 863              		.loc 1 136 21 view .LVU249
 138:armwave.c     ****                     g = MIN(gg, 255);
 864              		.loc 1 138 21 view .LVU250
 139:armwave.c     ****                     b = MIN(bb, 255);
 865              		.loc 1 139 21 view .LVU251
 140:armwave.c     **** 
 866              		.loc 1 140 21 view .LVU252
 143:armwave.c     **** 
 867              		.loc 1 143 21 view .LVU253
 146:armwave.c     ****                     xx = nsub & 0xff;
 868              		.loc 1 146 21 view .LVU254
 869              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 870              		.loc 1 136 55 is_stmt 0 view .LVU255
 871 034c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 872              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 873              		.loc 1 135 55 view .LVU256
 874 0350 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 875              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 876              		.loc 1 136 24 view .LVU257
 877 0354 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 878              	.LVL62:
 879              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 880              		.loc 1 134 55 view .LVU258
 881 0358 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 882              	.LVL63:
 883              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 884              		.loc 1 140 25 view .LVU259
 885 035c FF005EE3 		cmp	lr, #255	@ bb,
 886              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 887              		.loc 1 135 24 view .LVU260
 888 0360 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 889              	.LVL64:
 890              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 891              		.loc 1 140 25 view .LVU261
 892 0364 FFE0A0A3 		movge	lr, #255	@ bb,
 893              	.LVL65:
 894              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 139 25 view .LVU262
 896 0368 FF0054E3 		cmp	r4, #255	@ gg,
 897 036c FF40A0A3 		movge	r4, #255	@ gg,
 898              	.LVL66:
 139:armwave.c     ****                     b = MIN(bb, 255);
 899              		.loc 1 139 25 view .LVU263
 900 0370 036083E2 		add	r6, r3, #3	@ _59, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 901              		.loc 1 147 21 is_stmt 1 view .LVU264
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 902              		.loc 1 148 21 view .LVU265
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 903              		.loc 1 149 21 view .LVU266
 150:armwave.c     ****                 }
 904              		.loc 1 150 21 view .LVU267
 905              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 906              		.loc 1 134 24 is_stmt 0 view .LVU268
 907 0374 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 908              	.LVL67:
 909              	@ armwave.c:149:                     offset = yy + (xx * g_armwave_state.target_width);
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 910              		.loc 1 149 39 view .LVU269
 911 0378 487095E5 		ldr	r7, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 912              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 913              		.loc 1 138 25 view .LVU270
 914 037c FF0052E3 		cmp	r2, #255	@ rr,
 915              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 916              		.loc 1 147 24 view .LVU271
 917 0380 7680EFE6 		uxtb	r8, r6	@ xx, _59
 918              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 919              		.loc 1 143 56 view .LVU272
 920 0384 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 921              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 922              		.loc 1 143 44 view .LVU273
 923 0388 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 924              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 925              		.loc 1 138 25 view .LVU274
 926 038c FF20A0A3 		movge	r2, #255	@ rr,
 927              	.LVL68:
 928              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 929              		.loc 1 148 31 view .LVU275
 930 0390 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 931              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 932              		.loc 1 143 44 view .LVU276
 933 0394 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 934              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 935              		.loc 1 143 56 view .LVU277
 936 0398 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 937              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 938              		.loc 1 150 39 view .LVU278
 939 039c 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 940              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 941              		.loc 1 143 51 view .LVU279
 942 03a0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 943              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 944              		.loc 1 143 62 view .LVU280
 945 03a4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 946              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 947              		.loc 1 150 49 view .LVU281
 948 03a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 949              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 950              		.loc 1 143 62 view .LVU282
 951 03ac 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 952              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 953              		.loc 1 143 26 view .LVU283
 954 03b0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 955              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 956              		.loc 1 150 49 view .LVU284
 957 03b4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 958 03b8 81FFFFEA 		b	.L29		@
 959              	.LVL69:
 960              	.L50:
 116:armwave.c     **** 
 961              		.loc 1 116 5 is_stmt 1 discriminator 1 view .LVU285
 962 03bc 10309FE5 		ldr	r3, .L52+4	@,
 963 03c0 7420A0E3 		mov	r2, #116	@,
 964 03c4 0C109FE5 		ldr	r1, .L52+8	@,
 965              	.LVL70:
 116:armwave.c     **** 
 966              		.loc 1 116 5 is_stmt 0 discriminator 1 view .LVU286
 967 03c8 0C009FE5 		ldr	r0, .L52+12	@,
 968              	.LVL71:
 116:armwave.c     **** 
 969              		.loc 1 116 5 discriminator 1 view .LVU287
 970 03cc FEFFFFEB 		bl	__assert_fail		@
 971              	.LVL72:
 972              	.L53:
 116:armwave.c     **** 
 973              		.loc 1 116 5 discriminator 1 view .LVU288
 974              		.align	2
 975              	.L52:
 976 03d0 00000000 		.word	g_armwave_state
 977 03d4 00000000 		.word	.LANCHOR0
 978 03d8 20000000 		.word	.LC2
 979 03dc 2C000000 		.word	.LC3
 980              		.cfi_endproc
 981              	.LFE60:
 983              		.align	2
 984              		.global	armwave_fill_pixbuf_scaled
 985              		.syntax unified
 986              		.arm
 987              		.fpu vfp
 989              	armwave_fill_pixbuf_scaled:
 990              	.LVL73:
 991              	.LFB61:
 156:armwave.c     **** 
 157:armwave.c     **** /*
 158:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 159:armwave.c     ****  * Rows are repeated as necessary.
 160:armwave.c     ****  */
 161:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 162:armwave.c     **** {
 992              		.loc 1 162 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 163:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 996              		.loc 1 163 5 view .LVU290
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 997              		.loc 1 164 5 view .LVU291
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 998              		.loc 1 165 5 view .LVU292
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 999              		.loc 1 166 5 view .LVU293
 1000              	@ armwave.c:162: {
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1001              		.loc 1 162 1 is_stmt 0 view .LVU294
 1002 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1003              		.cfi_def_cfa_offset 36
 1004              		.cfi_offset 4, -36
 1005              		.cfi_offset 5, -32
 1006              		.cfi_offset 6, -28
 1007              		.cfi_offset 7, -24
 1008              		.cfi_offset 8, -20
 1009              		.cfi_offset 9, -16
 1010              		.cfi_offset 10, -12
 1011              		.cfi_offset 11, -8
 1012              		.cfi_offset 14, -4
 1013              	@ armwave.c:170:     assert(out_buffer != NULL);
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 168:armwave.c     ****     uint32_t offset;
 169:armwave.c     **** 
 170:armwave.c     ****     assert(out_buffer != NULL);
 1014              		.loc 1 170 5 view .LVU295
 1015 03e4 000050E3 		cmp	r0, #0	@ out_buffer
 1016              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1017              		.loc 1 166 15 view .LVU296
 1018 03e8 34519FE5 		ldr	r5, .L79	@ tmp202,
 1019              	@ armwave.c:162: {
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1020              		.loc 1 162 1 view .LVU297
 1021 03ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1022              		.cfi_def_cfa_offset 48
 1023              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1024              		.loc 1 166 15 view .LVU298
 1025 03f0 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1026              	.LVL74:
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1027              		.loc 1 167 5 is_stmt 1 view .LVU299
 168:armwave.c     **** 
 1028              		.loc 1 168 5 view .LVU300
 1029              		.loc 1 170 5 view .LVU301
 1030 03f4 4500000A 		beq	.L76		@,
 171:armwave.c     **** 
 172:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1031              		.loc 1 172 5 view .LVU302
 1032              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 1033              		.loc 1 172 41 is_stmt 0 view .LVU303
 1034 03f8 488095E5 		ldr	r8, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1035 03fc 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1036              	.LVL75:
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1037              		.loc 1 173 5 is_stmt 1 view .LVU304
 174:armwave.c     **** 
 175:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1038              		.loc 1 175 5 view .LVU305
 1039              		.loc 1 175 5 is_stmt 0 view .LVU306
 1040 0400 000058E3 		cmp	r8, #0	@ npix,
 1041 0404 0B0000DA 		ble	.L54		@,
 1042              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 177:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 178:armwave.c     ****         // most normal waveforms.
 179:armwave.c     ****         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 181:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 184:armwave.c     ****                 wave_word >>= 8;
 185:armwave.c     **** 
 186:armwave.c     ****                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1043              		.loc 1 188 52 view .LVU307
 1044 0408 FE35D5E1 		ldrsh	r3, [r5, #94]	@ _11, g_armwave_state.ch1_color.g
 1045              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1046              		.loc 1 187 52 view .LVU308
 1047 040c FCB5D5E1 		ldrsh	fp, [r5, #92]	@ _7, g_armwave_state.ch1_color.r
 1048              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1049              		.loc 1 175 11 view .LVU309
 1050 0410 00E0A0E3 		mov	lr, #0	@ n,
 1051              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1052              		.loc 1 188 52 view .LVU310
 1053 0414 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1054              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1055              		.loc 1 189 52 view .LVU311
 1056 0418 F036D5E1 		ldrsh	r3, [r5, #96]	@ _14, g_armwave_state.ch1_color.b
 1057 041c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1058              	.LVL76:
 1059              	.L61:
 179:armwave.c     **** 
 1060              		.loc 1 179 9 is_stmt 1 view .LVU312
 1061              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 1062              		.loc 1 179 19 is_stmt 0 view .LVU313
 1063 0420 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1064              	.LVL77:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 1065              		.loc 1 181 9 is_stmt 1 view .LVU314
 1066              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 1067              		.loc 1 181 11 is_stmt 0 view .LVU315
 1068 0424 00005CE3 		cmp	ip, #0	@ wave_word,
 1069 0428 0400001A 		bne	.L77		@,
 1070              	.L57:
 1071              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1072              		.loc 1 175 28 view .LVU316
 1073 042c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1074              	.LVL78:
 1075              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1076              		.loc 1 175 5 view .LVU317
 1077 0430 0E0058E1 		cmp	r8, lr	@ npix, n
 1078 0434 F9FFFFCA 		bgt	.L61		@,
 1079              	.LVL79:
 1080              	.L54:
 1081              	@ armwave.c:211: }
 190:armwave.c     **** 
 191:armwave.c     ****                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 194:armwave.c     **** 
 195:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 196:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 198:armwave.c     ****                     // Do line scaling as necessary.
 199:armwave.c     ****                     nsub = n + w;
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 202:armwave.c     **** 
 203:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 207:armwave.c     ****                 }
 208:armwave.c     ****             }
 209:armwave.c     ****         }
 210:armwave.c     ****     }
 211:armwave.c     **** }
 1082              		.loc 1 211 1 view .LVU318
 1083 0438 0CD08DE2 		add	sp, sp, #12	@,,
 1084              		.cfi_remember_state
 1085              		.cfi_def_cfa_offset 36
 1086              		@ sp needed	@
 1087 043c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1088              	.LVL80:
 1089              	.L77:
 1090              		.cfi_restore_state
 1091              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1092              		.loc 1 186 19 view .LVU319
 1093 0440 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1094              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1095              		.loc 1 182 19 view .LVU320
 1096 0444 0090A0E3 		mov	r9, #0	@ w,
 1097              	.LVL81:
 183:armwave.c     ****                 wave_word >>= 8;
 1098              		.loc 1 183 17 is_stmt 1 view .LVU321
 184:armwave.c     **** 
 1099              		.loc 1 184 17 view .LVU322
 1100              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 1101              		.loc 1 184 27 is_stmt 0 view .LVU323
 1102 0448 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1103              	.LVL82:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1104              		.loc 1 186 17 is_stmt 1 view .LVU324
 1105              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1106              		.loc 1 186 19 is_stmt 0 view .LVU325
 1107 044c 0500001A 		bne	.L78		@,
 1108              	.L58:
 1109              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1110              		.loc 1 182 32 view .LVU326
 1111 0450 019089E2 		add	r9, r9, #1	@ w, w,
 1112              	.LVL83:
 1113              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1114              		.loc 1 182 13 view .LVU327
 1115 0454 040059E3 		cmp	r9, #4	@ w,
 1116 0458 F3FFFF0A 		beq	.L57		@,
 183:armwave.c     ****                 wave_word >>= 8;
 1117              		.loc 1 183 17 is_stmt 1 view .LVU328
 1118              	.LVL84:
 184:armwave.c     **** 
 1119              		.loc 1 184 17 view .LVU329
 1120              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1121              		.loc 1 186 19 is_stmt 0 view .LVU330
 1122 045c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1123              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 1124              		.loc 1 184 27 view .LVU331
 1125 0460 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1126              	.LVL85:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1127              		.loc 1 186 17 is_stmt 1 view .LVU332
 1128              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1129              		.loc 1 186 19 is_stmt 0 view .LVU333
 1130 0464 F9FFFF0A 		beq	.L58		@,
 1131              	.L78:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1132              		.loc 1 187 21 is_stmt 1 view .LVU334
 1133              	.LVL86:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1134              		.loc 1 188 21 view .LVU335
 189:armwave.c     **** 
 1135              		.loc 1 189 21 view .LVU336
 191:armwave.c     ****                     g = MIN(gg, 255);
 1136              		.loc 1 191 21 view .LVU337
 192:armwave.c     ****                     b = MIN(bb, 255);
 1137              		.loc 1 192 21 view .LVU338
 193:armwave.c     **** 
 1138              		.loc 1 193 21 view .LVU339
 196:armwave.c     **** 
 1139              		.loc 1 196 21 view .LVU340
 1140              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1141              		.loc 1 189 55 is_stmt 0 view .LVU341
 1142 0468 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1143              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1144              		.loc 1 188 55 view .LVU342
 1145 046c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1146 0470 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1147              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1148              		.loc 1 189 55 view .LVU343
 1149 0474 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1150              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1151              		.loc 1 188 55 view .LVU344
 1152 0478 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1153              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1154              		.loc 1 189 24 view .LVU345
 1155 047c 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1156              	.LVL87:
 1157              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1158              		.loc 1 187 55 view .LVU346
 1159 0480 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1160              	.LVL88:
 1161              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1162              		.loc 1 188 24 view .LVU347
 1163 0484 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1164              	.LVL89:
 1165              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 1166              		.loc 1 193 25 view .LVU348
 1167 0488 FF0052E3 		cmp	r2, #255	@ bb,
 1168 048c FF20A0A3 		movge	r2, #255	@ bb,
 1169              	.LVL90:
 1170              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 1171              		.loc 1 192 25 view .LVU349
 1172 0490 FF0051E3 		cmp	r1, #255	@ gg,
 1173 0494 FF10A0A3 		movge	r1, #255	@ gg,
 1174              	.LVL91:
 1175              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1176              		.loc 1 187 24 view .LVU350
 1177 0498 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1178              	.LVL92:
 1179              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 1180              		.loc 1 191 25 view .LVU351
 1181 049c FF0053E3 		cmp	r3, #255	@ rr,
 1182              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1183              		.loc 1 196 56 view .LVU352
 1184 04a0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1185              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 1186              		.loc 1 191 25 view .LVU353
 1187 04a4 FF30A0A3 		movge	r3, #255	@ rr,
 1188              	.LVL93:
 1189              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1190              		.loc 1 196 44 view .LVU354
 1191 04a8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1192              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1193              		.loc 1 196 56 view .LVU355
 1194 04ac 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1195              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1196              		.loc 1 200 57 view .LVU356
 1197 04b0 20A095E5 		ldr	r10, [r5, #32]	@ _28, g_armwave_state.vscale
 1198              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1199              		.loc 1 196 44 view .LVU357
 1200 04b4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1201              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1202              		.loc 1 196 51 view .LVU358
 1203 04b8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1204              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1205              		.loc 1 196 62 view .LVU359
 1206 04bc 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1207              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1208              		.loc 1 200 32 view .LVU360
 1209 04c0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1210              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1211              		.loc 1 196 62 view .LVU361
 1212 04c4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1213              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1214              		.loc 1 203 21 view .LVU362
 1215 04c8 00005AE3 		cmp	r10, #0	@ _28,
 1216              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1217              		.loc 1 196 26 view .LVU363
 1218 04cc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1219              	.LVL94:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1220              		.loc 1 199 21 is_stmt 1 view .LVU364
 200:armwave.c     ****                     xx = (nsub >> 8);
 1221              		.loc 1 200 21 view .LVU365
 1222              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 1223              		.loc 1 201 32 is_stmt 0 view .LVU366
 1224 04d0 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1225              	.LVL95:
 1226              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1227              		.loc 1 200 24 view .LVU367
 1228 04d4 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1229              	.LVL96:
 201:armwave.c     **** 
 1230              		.loc 1 201 21 is_stmt 1 view .LVU368
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1231              		.loc 1 203 21 view .LVU369
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1232              		.loc 1 203 21 is_stmt 0 view .LVU370
 1233 04d8 DCFFFF0A 		beq	.L58		@,
 1234              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1235              		.loc 1 203 29 view .LVU371
 1236 04dc 0030A0E3 		mov	r3, #0	@ row,
 1237              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1238              		.loc 1 203 38 view .LVU372
 1239 04e0 0320A0E1 		mov	r2, r3	@ _35, row
 1240              	.LVL97:
 1241              	.L59:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1242              		.loc 1 204 25 is_stmt 1 discriminator 3 view .LVU373
 205:armwave.c     ****                     }
 1243              		.loc 1 205 25 discriminator 3 view .LVU374
 1244              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1245              		.loc 1 204 52 is_stmt 0 discriminator 3 view .LVU375
 1246 04e4 481095E5 		ldr	r1, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1247              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1248              		.loc 1 204 45 discriminator 3 view .LVU376
 1249 04e8 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1250              	.LVL98:
 1251              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1252              		.loc 1 203 67 discriminator 3 view .LVU377
 1253 04ec 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1254              	.LVL99:
 1255              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 1256              		.loc 1 205 43 discriminator 3 view .LVU378
 1257 04f0 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1258              	.LVL100:
 1259              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1260              		.loc 1 203 67 discriminator 3 view .LVU379
 1261 04f4 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1262              	.LVL101:
 1263              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1264              		.loc 1 203 38 discriminator 3 view .LVU380
 1265 04f8 0320A0E1 		mov	r2, r3	@ _35, row
 1266              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 1267              		.loc 1 205 53 discriminator 3 view .LVU381
 1268 04fc 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1269              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1270              		.loc 1 203 21 discriminator 3 view .LVU382
 1271 0500 201095E5 		ldr	r1, [r5, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1272              	.LVL102:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1273              		.loc 1 203 21 discriminator 3 view .LVU383
 1274 0504 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1275 0508 F5FFFF3A 		bcc	.L59		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 203 21 discriminator 3 view .LVU384
 1277 050c CFFFFFEA 		b	.L58		@
 1278              	.LVL103:
 1279              	.L76:
 170:armwave.c     **** 
 1280              		.loc 1 170 5 is_stmt 1 discriminator 1 view .LVU385
 1281 0510 10309FE5 		ldr	r3, .L79+4	@,
 1282 0514 AA20A0E3 		mov	r2, #170	@,
 1283 0518 0C109FE5 		ldr	r1, .L79+8	@,
 1284 051c 0C009FE5 		ldr	r0, .L79+12	@,
 1285              	.LVL104:
 170:armwave.c     **** 
 1286              		.loc 1 170 5 is_stmt 0 discriminator 1 view .LVU386
 1287 0520 FEFFFFEB 		bl	__assert_fail		@
 1288              	.LVL105:
 1289              	.L80:
 1290              		.align	2
 1291              	.L79:
 1292 0524 00000000 		.word	g_armwave_state
 1293 0528 18000000 		.word	.LANCHOR0+24
 1294 052c 20000000 		.word	.LC2
 1295 0530 2C000000 		.word	.LC3
 1296              		.cfi_endproc
 1297              	.LFE61:
 1299              		.align	2
 1300              		.global	armwave_setup_render
 1301              		.syntax unified
 1302              		.arm
 1303              		.fpu vfp
 1305              	armwave_setup_render:
 1306              	.LVL106:
 1307              	.LFB62:
 212:armwave.c     **** 
 213:armwave.c     **** /*
 214:armwave.c     ****  * Setup the renderer with passed parameters.
 215:armwave.c     ****  */
 216:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 217:armwave.c     **** {
 1308              		.loc 1 217 1 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 12, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 218:armwave.c     ****     uint32_t length, xx;
 1312              		.loc 1 218 5 view .LVU388
 219:armwave.c     ****     float points_per_pixel;
 1313              		.loc 1 219 5 view .LVU389
 220:armwave.c     **** 
 221:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1314              		.loc 1 221 5 view .LVU390
 1315              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1316              		.loc 1 217 1 is_stmt 0 view .LVU391
 1317 0534 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1318              		.cfi_def_cfa_offset 32
 1319              		.cfi_offset 4, -32
 1320              		.cfi_offset 5, -28
 1321              		.cfi_offset 6, -24
 1322              		.cfi_offset 7, -20
 1323              		.cfi_offset 8, -16
 1324              		.cfi_offset 9, -12
 1325              		.cfi_offset 10, -8
 1326              		.cfi_offset 14, -4
 1327 0538 028B2DED 		vpush.64	{d8}	@
 1328              		.cfi_def_cfa_offset 40
 1329              		.cfi_offset 80, -40
 1330              		.cfi_offset 81, -36
 1331 053c 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1332 0540 0190A0E1 		mov	r9, r1	@ end_point, end_point
 1333 0544 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1334 0548 10D04DE2 		sub	sp, sp, #16	@,,
 1335              		.cfi_def_cfa_offset 56
 1336              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1337              		.loc 1 217 1 view .LVU392
 1338 054c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1339 0550 38709DE5 		ldr	r7, [sp, #56]	@ target_width, target_width
 1340 0554 3C609DE5 		ldr	r6, [sp, #60]	@ target_height, target_height
 1341 0558 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1342              	@ armwave.c:221:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1343              		.loc 1 221 5 view .LVU393
 1344 055c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1345 0560 04708DE5 		str	r7, [sp, #4]	@ target_width,
 1346 0564 0230A0E1 		mov	r3, r2	@, waves_max
 1347              	.LVL107:
 1348              		.loc 1 221 5 view .LVU394
 1349 0568 08608DE5 		str	r6, [sp, #8]	@ target_height,
 1350 056c 0120A0E1 		mov	r2, r1	@, end_point
 1351              	.LVL108:
 1352              		.loc 1 221 5 view .LVU395
 1353 0570 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1354 0574 0010A0E1 		mov	r1, r0	@, start_point
 1355              	.LVL109:
 1356              		.loc 1 221 5 view .LVU396
 1357 0578 C8019FE5 		ldr	r0, .L104+4	@,
 1358              	.LVL110:
 1359              		.loc 1 221 5 view .LVU397
 1360 057c FEFFFFEB 		bl	printf		@
 1361              	.LVL111:
 222:armwave.c     **** 
 223:armwave.c     ****     // TODO these asserts should instead raise PyExc
 224:armwave.c     ****     assert(start_point < end_point);
 1362              		.loc 1 224 5 is_stmt 1 view .LVU398
 1363 0580 090055E1 		cmp	r5, r9	@ start_point, end_point
 1364 0584 6900002A 		bcs	.L99		@,
 225:armwave.c     **** 
 226:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 227:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1365              		.loc 1 227 5 view .LVU399
 1366 0588 013C46E2 		sub	r3, r6, #256	@ tmp154, target_height,
 1367 058c 013CD3E3 		bics	r3, r3, #256	@ tmp231, tmp154,
 1368 0590 4B00000A 		beq	.L83		@,
 1369              	@ armwave.c:227:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1370              		.loc 1 227 5 is_stmt 0 discriminator 1 view .LVU400
 1371 0594 013B46E2 		sub	r3, r6, #1024	@ tmp156, target_height,
 1372 0598 013BD3E3 		bics	r3, r3, #1024	@ tmp232, tmp156,
 1373 059c 5400001A 		bne	.L100		@,
 228:armwave.c     **** 
 229:armwave.c     ****     if(target_height == 256) {
 230:armwave.c     ****         g_armwave_state.row_shift = 8;
 231:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 232:armwave.c     ****     } else if(target_height == 512) {
 1374              		.loc 1 232 12 is_stmt 1 view .LVU401
 233:armwave.c     ****         g_armwave_state.row_shift = 9;
 234:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 235:armwave.c     ****     } else if(target_height == 1024) {
 1375              		.loc 1 235 12 view .LVU402
 1376              	@ armwave.c:235:     } else if(target_height == 1024) {
 1377              		.loc 1 235 14 is_stmt 0 view .LVU403
 1378 05a0 010B56E3 		cmp	r6, #1024	@ target_height,
 1379              	@ armwave.c:236:         g_armwave_state.row_shift = 10;
 236:armwave.c     ****         g_armwave_state.row_shift = 10;
 1380              		.loc 1 236 35 view .LVU404
 1381 05a4 A0419FE5 		ldr	r4, .L104+8	@ tmp228,
 1382              	@ armwave.c:235:     } else if(target_height == 1024) {
 235:armwave.c     ****         g_armwave_state.row_shift = 10;
 1383              		.loc 1 235 14 view .LVU405
 1384 05a8 4D00000A 		beq	.L101		@,
 237:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 238:armwave.c     ****     } else if(target_height == 2048) {
 1385              		.loc 1 238 12 is_stmt 1 view .LVU406
 1386              	@ armwave.c:238:     } else if(target_height == 2048) {
 1387              		.loc 1 238 14 is_stmt 0 view .LVU407
 1388 05ac 020B56E3 		cmp	r6, #2048	@ target_height,
 239:armwave.c     ****         g_armwave_state.row_shift = 11;
 1389              		.loc 1 239 9 is_stmt 1 view .LVU408
 1390              	@ armwave.c:239:         g_armwave_state.row_shift = 11;
 1391              		.loc 1 239 35 is_stmt 0 view .LVU409
 1392 05b0 0B20A003 		moveq	r2, #11	@ tmp175,
 1393              	@ armwave.c:240:         g_armwave_state.row_mask = 0x7ff;
 240:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1394              		.loc 1 240 34 view .LVU410
 1395 05b4 94319F05 		ldreq	r3, .L104+12	@ tmp177,
 1396 05b8 F025C401 		strdeq	r2, [r4, #80]	@, tmp228,
 1397              	.L86:
 241:armwave.c     ****     } 
 242:armwave.c     **** 
 243:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 244:armwave.c     ****     g_armwave_state.xstride = target_height;
 1398              		.loc 1 244 5 is_stmt 1 view .LVU411
 1399              	@ armwave.c:249:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 246:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 247:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 248:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 249:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1400              		.loc 1 249 42 is_stmt 0 view .LVU412
 1401 05bc 960700E0 		mul	r0, r6, r7	@ tmp185, target_height, target_width
 1402              	@ armwave.c:251:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 251:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1403              		.loc 1 251 68 view .LVU413
 1404 05c0 0734A0E1 		lsl	r3, r7, #8	@ _9, target_width,
 1405              	@ armwave.c:245:     g_armwave_state.vscale = target_height / 256;
 245:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1406              		.loc 1 245 44 view .LVU414
 1407 05c4 26C4A0E1 		lsr	ip, r6, #8	@ tmp180, target_height,
 1408              	@ armwave.c:256:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 252:armwave.c     ****     g_armwave_state.target_width = target_width;
 253:armwave.c     ****     g_armwave_state.target_height = target_height;
 254:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 255:armwave.c     **** 
 256:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1409              		.loc 1 256 5 view .LVU415
 1410 05c8 0310A0E1 		mov	r1, r3	@, _9
 1411              	@ armwave.c:250:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1412              		.loc 1 250 37 view .LVU416
 1413 05cc 012CA0E3 		mov	r2, #256	@ tmp187,
 1414              	@ armwave.c:249:     g_armwave_state.size = target_height * target_width;
 249:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1415              		.loc 1 249 26 view .LVU417
 1416 05d0 440084E5 		str	r0, [r4, #68]	@ tmp185, g_armwave_state.size
 1417              	@ armwave.c:254:     g_armwave_state.wave_length = end_point - start_point;
 254:armwave.c     **** 
 1418              		.loc 1 254 45 view .LVU418
 1419 05d4 055049E0 		sub	r5, r9, r5	@ _10, end_point, start_point
 1420              	.LVL112:
 1421              	@ armwave.c:256:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1422              		.loc 1 256 5 view .LVU419
 1423 05d8 74019FE5 		ldr	r0, .L104+16	@,
 1424              	@ armwave.c:251:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 251:armwave.c     ****     g_armwave_state.target_width = target_width;
 1425              		.loc 1 251 34 view .LVU420
 1426 05dc 403084E5 		str	r3, [r4, #64]	@ _9, g_armwave_state.ch_buff_size
 1427              	@ armwave.c:254:     g_armwave_state.wave_length = end_point - start_point;
 254:armwave.c     **** 
 1428              		.loc 1 254 33 view .LVU421
 1429 05e0 3C5084E5 		str	r5, [r4, #60]	@ _10, g_armwave_state.wave_length
 1430              	@ armwave.c:244:     g_armwave_state.xstride = target_height;
 244:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1431              		.loc 1 244 29 view .LVU422
 1432 05e4 1C6084E5 		str	r6, [r4, #28]	@ target_height, g_armwave_state.xstride
 245:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1433              		.loc 1 245 5 is_stmt 1 view .LVU423
 1434              	@ armwave.c:246:     g_armwave_state.wave_stride = wave_stride;
 246:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1435              		.loc 1 246 33 is_stmt 0 view .LVU424
 1436 05e8 24A084E5 		str	r10, [r4, #36]	@ wave_stride, g_armwave_state.wave_stride
 1437              	@ armwave.c:247:     g_armwave_state.waves_max = waves_max;
 247:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1438              		.loc 1 247 31 view .LVU425
 1439 05ec 2C8084E5 		str	r8, [r4, #44]	@ waves_max, g_armwave_state.waves_max
 1440              	@ armwave.c:248:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 248:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1441              		.loc 1 248 27 view .LVU426
 1442 05f0 288084E5 		str	r8, [r4, #40]	@ waves_max, g_armwave_state.waves
 1443              	@ armwave.c:252:     g_armwave_state.target_width = target_width;
 252:armwave.c     ****     g_armwave_state.target_height = target_height;
 1444              		.loc 1 252 34 view .LVU427
 1445 05f4 487084E5 		str	r7, [r4, #72]	@ target_width, g_armwave_state.target_width
 1446              	@ armwave.c:253:     g_armwave_state.target_height = target_height;
 253:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1447              		.loc 1 253 35 view .LVU428
 1448 05f8 4C6084E5 		str	r6, [r4, #76]	@ target_height, g_armwave_state.target_height
 1449              	@ armwave.c:245:     g_armwave_state.vscale = target_height / 256;
 245:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1450              		.loc 1 245 28 view .LVU429
 1451 05fc 20C084E5 		str	ip, [r4, #32]	@ tmp180, g_armwave_state.vscale
 246:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1452              		.loc 1 246 5 is_stmt 1 view .LVU430
 247:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1453              		.loc 1 247 5 view .LVU431
 248:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1454              		.loc 1 248 5 view .LVU432
 249:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1455              		.loc 1 249 5 view .LVU433
 250:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1456              		.loc 1 250 5 view .LVU434
 1457              	@ armwave.c:250:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 250:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1458              		.loc 1 250 37 is_stmt 0 view .LVU435
 1459 0600 302084E5 		str	r2, [r4, #48]	@ tmp187, g_armwave_state.bitdepth_height
 251:armwave.c     ****     g_armwave_state.target_width = target_width;
 1460              		.loc 1 251 5 is_stmt 1 view .LVU436
 252:armwave.c     ****     g_armwave_state.target_height = target_height;
 1461              		.loc 1 252 5 view .LVU437
 253:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1462              		.loc 1 253 5 view .LVU438
 254:armwave.c     **** 
 1463              		.loc 1 254 5 view .LVU439
 1464              		.loc 1 256 5 view .LVU440
 1465 0604 FEFFFFEB 		bl	printf		@
 1466              	.LVL113:
 257:armwave.c     **** 
 258:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 259:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 260:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 261:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1467              		.loc 1 261 5 view .LVU441
 1468              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 262:armwave.c     **** 
 263:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1469              		.loc 1 263 23 is_stmt 0 view .LVU442
 1470 0608 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 1471              	@ armwave.c:261:     g_armwave_state.slice_height = 64;  
 261:armwave.c     **** 
 1472              		.loc 1 261 34 view .LVU443
 1473 060c 4030A0E3 		mov	r3, #64	@ tmp194,
 1474              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 1475              		.loc 1 263 7 view .LVU444
 1476 0610 000050E3 		cmp	r0, #0	@ _11,
 1477              	@ armwave.c:261:     g_armwave_state.slice_height = 64;  
 261:armwave.c     **** 
 1478              		.loc 1 261 34 view .LVU445
 1479 0614 343084E5 		str	r3, [r4, #52]	@ tmp194, g_armwave_state.slice_height
 1480              		.loc 1 263 5 is_stmt 1 view .LVU446
 1481              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 1482              		.loc 1 263 7 is_stmt 0 view .LVU447
 1483 0618 0000000A 		beq	.L88		@,
 264:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1484              		.loc 1 264 9 is_stmt 1 view .LVU448
 1485 061c FEFFFFEB 		bl	free		@
 1486              	.LVL114:
 1487              	.L88:
 265:armwave.c     **** 
 266:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1488              		.loc 1 266 5 view .LVU449
 1489              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1490              		.loc 1 266 34 is_stmt 0 view .LVU450
 1491 0620 0110A0E3 		mov	r1, #1	@,
 1492 0624 400094E5 		ldr	r0, [r4, #64]	@, g_armwave_state.ch_buff_size
 1493 0628 FEFFFFEB 		bl	calloc		@
 1494              	.LVL115:
 1495              	@ armwave.c:268:     assert(g_armwave_state.ch1_buffer != NULL);
 267:armwave.c     **** 
 268:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1496              		.loc 1 268 5 view .LVU451
 1497 062c 000050E3 		cmp	r0, #0	@ tmp198,
 1498              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 266:armwave.c     **** 
 1499              		.loc 1 266 32 view .LVU452
 1500 0630 040084E5 		str	r0, [r4, #4]	@ tmp198, g_armwave_state.ch1_buffer
 1501              		.loc 1 268 5 is_stmt 1 view .LVU453
 1502 0634 3300000A 		beq	.L102		@,
 269:armwave.c     **** 
 270:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 271:armwave.c     ****     length = end_point - start_point;
 1503              		.loc 1 271 5 view .LVU454
 1504              	.LVL116:
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1505              		.loc 1 272 5 view .LVU455
 1506              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 1507              		.loc 1 272 34 is_stmt 0 view .LVU456
 1508 0638 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1509              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 1510              		.loc 1 272 22 view .LVU457
 1511 063c 905A06EE 		vmov	s13, r5	@ int	@ _10, _10
 1512              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 274:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1513              		.loc 1 274 40 view .LVU458
 1514 0640 8500A0E1 		lsl	r0, r5, #1	@, _10,
 1515              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1516              		.loc 1 272 34 view .LVU459
 1517 0644 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp205, target_width
 1518              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1519              		.loc 1 272 22 view .LVU460
 1520 0648 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp204, _10
 1521              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1522              		.loc 1 273 60 view .LVU461
 1523 064c 0D7AD4ED 		vldr.32	s15, [r4, #52]	@ int	@ tmp234, g_armwave_state.slice_height
 1524 0650 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp208, tmp234
 1525              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1526              		.loc 1 272 22 view .LVU462
 1527 0654 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp204, tmp205
 1528              	.LVL117:
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1529              		.loc 1 273 5 is_stmt 1 view .LVU463
 1530              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1531              		.loc 1 273 60 is_stmt 0 view .LVU464
 1532 0658 887A67EE 		vmul.f32	s15, s15, s16	@ tmp210, tmp208, points_per_pixel
 1533              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1534              		.loc 1 273 41 view .LVU465
 1535 065c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp211, tmp210
 1536 0660 0E7AC4ED 		vstr.32	s15, [r4, #56]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1537              		.loc 1 274 5 is_stmt 1 view .LVU466
 1538              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1539              		.loc 1 274 40 is_stmt 0 view .LVU467
 1540 0664 FEFFFFEB 		bl	malloc		@
 1541              	.LVL118:
 1542              	@ armwave.c:276:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 275:armwave.c     **** 
 276:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1543              		.loc 1 276 5 view .LVU468
 1544 0668 000050E3 		cmp	r0, #0	@ tmp213,
 1545              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 274:armwave.c     **** 
 1546              		.loc 1 274 38 view .LVU469
 1547 066c 740084E5 		str	r0, [r4, #116]	@ tmp213, g_armwave_state.xcoord_to_xpixel
 1548              		.loc 1 276 5 is_stmt 1 view .LVU470
 1549 0670 2900000A 		beq	.L103		@,
 1550              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 277:armwave.c     **** 
 278:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1551              		.loc 1 279 54 is_stmt 0 view .LVU471
 1552 0674 327ADFED 		vldr.32	s15, .L104	@ tmp219,
 1553 0678 020040E2 		sub	r0, r0, #2	@ ivtmp.86, tmp213,
 1554              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1555              		.loc 1 278 12 view .LVU472
 1556 067c 0030A0E3 		mov	r3, #0	@ xx,
 1557              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1558              		.loc 1 279 54 view .LVU473
 1559 0680 887A87EE 		vdiv.f32	s14, s15, s16	@ _22, tmp219, points_per_pixel
 1560              	.L91:
 1561              	.LVL119:
 1562              		.loc 1 279 9 is_stmt 1 discriminator 3 view .LVU474
 1563              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1564              		.loc 1 279 74 is_stmt 0 discriminator 3 view .LVU475
 1565 0684 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1566              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1567              		.loc 1 278 32 discriminator 3 view .LVU476
 1568 0688 013083E2 		add	r3, r3, #1	@ xx, xx,
 1569              	.LVL120:
 1570              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1571              		.loc 1 278 5 discriminator 3 view .LVU477
 1572 068c 030055E1 		cmp	r5, r3	@ _10, xx
 1573              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1574              		.loc 1 279 74 discriminator 3 view .LVU478
 1575 0690 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, xx
 1576 0694 877A67EE 		vmul.f32	s15, s15, s14	@ tmp221, tmp220, _22
 1577              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1578              		.loc 1 279 46 discriminator 3 view .LVU479
 1579 0698 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp222, tmp221
 1580 069c 902A17EE 		vmov	r2, s15	@ int	@ tmp222, tmp222
 1581 06a0 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp222, MEM[base: _80, offset: 0B]
 1582              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1583              		.loc 1 278 5 discriminator 3 view .LVU480
 1584 06a4 F6FFFF1A 		bne	.L91		@,
 280:armwave.c     **** 
 281:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 282:armwave.c     ****     }
 283:armwave.c     **** 
 284:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1585              		.loc 1 284 5 is_stmt 1 view .LVU481
 1586              	@ armwave.c:284:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1587              		.loc 1 284 34 is_stmt 0 view .LVU482
 1588 06a8 440094E5 		ldr	r0, [r4, #68]	@ g_armwave_state.size, g_armwave_state.size
 1589 06ac 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1590 06b0 FEFFFFEB 		bl	malloc		@
 1591              	.LVL121:
 1592              	@ armwave.c:284:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1593              		.loc 1 284 32 view .LVU483
 1594 06b4 580084E5 		str	r0, [r4, #88]	@, g_armwave_state.out_pixbuf
 1595              	@ armwave.c:285: }
 285:armwave.c     **** }
 1596              		.loc 1 285 1 view .LVU484
 1597 06b8 10D08DE2 		add	sp, sp, #16	@,,
 1598              		.cfi_remember_state
 1599              		.cfi_def_cfa_offset 40
 1600              		@ sp needed	@
 1601 06bc 028BBDEC 		vldm	sp!, {d8}	@
 1602              		.cfi_restore 80
 1603              		.cfi_restore 81
 1604              		.cfi_def_cfa_offset 32
 1605              	.LVL122:
 1606              		.loc 1 285 1 view .LVU485
 1607 06c0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1608              	.LVL123:
 1609              	.L83:
 1610              		.cfi_restore_state
 229:armwave.c     ****         g_armwave_state.row_shift = 8;
 1611              		.loc 1 229 5 is_stmt 1 view .LVU486
 1612              	@ armwave.c:229:     if(target_height == 256) {
 229:armwave.c     ****         g_armwave_state.row_shift = 8;
 1613              		.loc 1 229 7 is_stmt 0 view .LVU487
 1614 06c4 010C56E3 		cmp	r6, #256	@ target_height,
 230:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1615              		.loc 1 230 9 is_stmt 1 view .LVU488
 1616              	@ armwave.c:230:         g_armwave_state.row_shift = 8;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1617              		.loc 1 230 35 is_stmt 0 view .LVU489
 1618 06c8 7C409FE5 		ldr	r4, .L104+8	@ tmp228,
 1619              	@ armwave.c:234:         g_armwave_state.row_mask = 0x1ff;
 234:armwave.c     ****     } else if(target_height == 1024) {
 1620              		.loc 1 234 34 view .LVU490
 1621 06cc 84309F15 		ldrne	r3, .L104+20	@ tmp169,
 1622              	@ armwave.c:231:         g_armwave_state.row_mask = 0x0ff;
 231:armwave.c     ****     } else if(target_height == 512) {
 1623              		.loc 1 231 34 view .LVU491
 1624 06d0 0820A003 		moveq	r2, #8	@ tmp163,
 1625 06d4 FF30A003 		moveq	r3, #255	@ tmp165,
 232:armwave.c     ****         g_armwave_state.row_shift = 9;
 1626              		.loc 1 232 12 is_stmt 1 view .LVU492
 233:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1627              		.loc 1 233 9 view .LVU493
 1628              	@ armwave.c:233:         g_armwave_state.row_shift = 9;
 233:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1629              		.loc 1 233 35 is_stmt 0 view .LVU494
 1630 06d8 0920A013 		movne	r2, #9	@ tmp167,
 1631              	@ armwave.c:234:         g_armwave_state.row_mask = 0x1ff;
 234:armwave.c     ****     } else if(target_height == 1024) {
 1632              		.loc 1 234 34 view .LVU495
 1633 06dc F025C4E1 		strd	r2, [r4, #80]	@, tmp228,
 1634 06e0 B5FFFFEA 		b	.L86		@
 1635              	.L101:
 236:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1636              		.loc 1 236 9 is_stmt 1 view .LVU496
 1637              	@ armwave.c:237:         g_armwave_state.row_mask = 0x3ff;
 237:armwave.c     ****     } else if(target_height == 2048) {
 1638              		.loc 1 237 34 is_stmt 0 view .LVU497
 1639 06e4 70309FE5 		ldr	r3, .L104+24	@ tmp173,
 1640              	@ armwave.c:236:         g_armwave_state.row_shift = 10;
 236:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1641              		.loc 1 236 35 view .LVU498
 1642 06e8 0A20A0E3 		mov	r2, #10	@ tmp171,
 1643              	@ armwave.c:237:         g_armwave_state.row_mask = 0x3ff;
 237:armwave.c     ****     } else if(target_height == 2048) {
 1644              		.loc 1 237 34 view .LVU499
 1645 06ec F025C4E1 		strd	r2, [r4, #80]	@, tmp228,
 1646 06f0 B1FFFFEA 		b	.L86		@
 1647              	.L100:
 227:armwave.c     **** 
 1648              		.loc 1 227 5 is_stmt 1 discriminator 2 view .LVU500
 1649 06f4 64309FE5 		ldr	r3, .L104+28	@,
 1650 06f8 E320A0E3 		mov	r2, #227	@,
 1651 06fc 60109FE5 		ldr	r1, .L104+32	@,
 1652 0700 60009FE5 		ldr	r0, .L104+36	@,
 1653 0704 FEFFFFEB 		bl	__assert_fail		@
 1654              	.LVL124:
 1655              	.L102:
 268:armwave.c     **** 
 1656              		.loc 1 268 5 discriminator 1 view .LVU501
 1657 0708 50309FE5 		ldr	r3, .L104+28	@,
 1658 070c 432FA0E3 		mov	r2, #268	@,
 1659 0710 4C109FE5 		ldr	r1, .L104+32	@,
 1660 0714 50009FE5 		ldr	r0, .L104+40	@,
 1661 0718 FEFFFFEB 		bl	__assert_fail		@
 1662              	.LVL125:
 1663              	.L103:
 276:armwave.c     **** 
 1664              		.loc 1 276 5 discriminator 1 view .LVU502
 1665 071c 3C309FE5 		ldr	r3, .L104+28	@,
 1666 0720 452FA0E3 		mov	r2, #276	@,
 1667 0724 38109FE5 		ldr	r1, .L104+32	@,
 1668 0728 40009FE5 		ldr	r0, .L104+44	@,
 1669 072c FEFFFFEB 		bl	__assert_fail		@
 1670              	.LVL126:
 1671              	.L99:
 224:armwave.c     **** 
 1672              		.loc 1 224 5 discriminator 1 view .LVU503
 1673 0730 28309FE5 		ldr	r3, .L104+28	@,
 1674 0734 E020A0E3 		mov	r2, #224	@,
 1675 0738 24109FE5 		ldr	r1, .L104+32	@,
 1676 073c 30009FE5 		ldr	r0, .L104+48	@,
 1677 0740 FEFFFFEB 		bl	__assert_fail		@
 1678              	.LVL127:
 1679              	.L105:
 1680              		.align	2
 1681              	.L104:
 1682 0744 0000803F 		.word	1065353216
 1683 0748 40000000 		.word	.LC4
 1684 074c 00000000 		.word	g_armwave_state
 1685 0750 FF070000 		.word	2047
 1686 0754 E4000000 		.word	.LC7
 1687 0758 FF010000 		.word	511
 1688 075c FF030000 		.word	1023
 1689 0760 34000000 		.word	.LANCHOR0+52
 1690 0764 20000000 		.word	.LC2
 1691 0768 84000000 		.word	.LC6
 1692 076c F8000000 		.word	.LC8
 1693 0770 1C010000 		.word	.LC9
 1694 0774 6C000000 		.word	.LC5
 1695              		.cfi_endproc
 1696              	.LFE62:
 1698              		.align	2
 1699              		.global	armwave_set_wave_pointer
 1700              		.syntax unified
 1701              		.arm
 1702              		.fpu vfp
 1704              	armwave_set_wave_pointer:
 1705              	.LVL128:
 1706              	.LFB63:
 286:armwave.c     **** 
 287:armwave.c     **** /*
 288:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 289:armwave.c     ****  * in the future.
 290:armwave.c     ****  */
 291:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 292:armwave.c     **** {
 1707              		.loc 1 292 1 view -0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 0
 1710              		@ frame_needed = 0, uses_anonymous_args = 0
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1711              		.loc 1 293 5 view .LVU505
 1712 0778 000050E3 		cmp	r0, #0	@ wave_buffer
 1713              		.loc 1 293 5 is_stmt 0 view .LVU506
 1714 077c 0200000A 		beq	.L111		@,
 294:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1715              		.loc 1 294 5 is_stmt 1 view .LVU507
 1716              	@ armwave.c:294:     g_armwave_state.wave_buffer = wave_buffer;
 1717              		.loc 1 294 33 is_stmt 0 view .LVU508
 1718 0780 1C309FE5 		ldr	r3, .L112	@ tmp116,
 1719 0784 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1720 0788 1EFF2FE1 		bx	lr	@
 1721              	.L111:
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1722              		.loc 1 293 5 is_stmt 1 discriminator 1 view .LVU509
 1723              	@ armwave.c:292: {
 292:armwave.c     ****     assert(wave_buffer != NULL);
 1724              		.loc 1 292 1 is_stmt 0 discriminator 1 view .LVU510
 1725 078c 10402DE9 		push	{r4, lr}	@
 1726              		.cfi_def_cfa_offset 8
 1727              		.cfi_offset 4, -8
 1728              		.cfi_offset 14, -4
 1729              	@ armwave.c:293:     assert(wave_buffer != NULL);
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1730              		.loc 1 293 5 discriminator 1 view .LVU511
 1731 0790 10309FE5 		ldr	r3, .L112+4	@,
 1732 0794 10209FE5 		ldr	r2, .L112+8	@,
 1733 0798 10109FE5 		ldr	r1, .L112+12	@,
 1734 079c 10009FE5 		ldr	r0, .L112+16	@,
 1735              	.LVL129:
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1736              		.loc 1 293 5 discriminator 1 view .LVU512
 1737 07a0 FEFFFFEB 		bl	__assert_fail		@
 1738              	.LVL130:
 1739              	.L113:
 1740              		.align	2
 1741              	.L112:
 1742 07a4 00000000 		.word	g_armwave_state
 1743 07a8 4C000000 		.word	.LANCHOR0+76
 1744 07ac 25010000 		.word	293
 1745 07b0 20000000 		.word	.LC2
 1746 07b4 48010000 		.word	.LC10
 1747              		.cfi_endproc
 1748              	.LFE63:
 1750              		.align	2
 1751              		.global	armwave_set_wave_pointer_as_testbuf
 1752              		.syntax unified
 1753              		.arm
 1754              		.fpu vfp
 1756              	armwave_set_wave_pointer_as_testbuf:
 1757              	.LFB64:
 295:armwave.c     **** }
 296:armwave.c     **** 
 297:armwave.c     **** /*
 298:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 299:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 300:armwave.c     ****  */
 301:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 302:armwave.c     **** {
 1758              		.loc 1 302 1 is_stmt 1 view -0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
 1762              		@ link register save eliminated.
 303:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1763              		.loc 1 303 5 view .LVU514
 1764              	@ armwave.c:303:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1765              		.loc 1 303 33 is_stmt 0 view .LVU515
 1766 07b8 08309FE5 		ldr	r3, .L115	@ tmp111,
 1767 07bc 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1768 07c0 142083E5 		str	r2, [r3, #20]	@ g_armwave_state.test_wave_buffer, g_armwave_state.wave_buffer
 1769              	@ armwave.c:304: }
 304:armwave.c     **** }
 1770              		.loc 1 304 1 view .LVU516
 1771 07c4 1EFF2FE1 		bx	lr	@
 1772              	.L116:
 1773              		.align	2
 1774              	.L115:
 1775 07c8 00000000 		.word	g_armwave_state
 1776              		.cfi_endproc
 1777              	.LFE64:
 1779              		.align	2
 1780              		.global	armwave_set_wave_pointer_u32
 1781              		.syntax unified
 1782              		.arm
 1783              		.fpu vfp
 1785              	armwave_set_wave_pointer_u32:
 1786              	.LVL131:
 1787              	.LFB65:
 305:armwave.c     **** 
 306:armwave.c     **** /*
 307:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 308:armwave.c     ****  * disjointed buffers in the future.
 309:armwave.c     ****  */
 310:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 311:armwave.c     **** {
 1788              		.loc 1 311 1 is_stmt 1 view -0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 0
 1791              		@ frame_needed = 0, uses_anonymous_args = 0
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1792              		.loc 1 312 5 view .LVU518
 1793 07cc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1794              		.loc 1 312 5 is_stmt 0 view .LVU519
 1795 07d0 0200000A 		beq	.L122		@,
 313:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1796              		.loc 1 313 5 is_stmt 1 view .LVU520
 1797              	@ armwave.c:313:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1798              		.loc 1 313 33 is_stmt 0 view .LVU521
 1799 07d4 1C309FE5 		ldr	r3, .L123	@ tmp116,
 1800 07d8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1801 07dc 1EFF2FE1 		bx	lr	@
 1802              	.L122:
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1803              		.loc 1 312 5 is_stmt 1 discriminator 1 view .LVU522
 1804              	@ armwave.c:311: {
 311:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1805              		.loc 1 311 1 is_stmt 0 discriminator 1 view .LVU523
 1806 07e0 10402DE9 		push	{r4, lr}	@
 1807              		.cfi_def_cfa_offset 8
 1808              		.cfi_offset 4, -8
 1809              		.cfi_offset 14, -4
 1810              	@ armwave.c:312:     assert(wave_buffer_ptr != 0);
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1811              		.loc 1 312 5 discriminator 1 view .LVU524
 1812 07e4 4E2FA0E3 		mov	r2, #312	@,
 1813 07e8 0C309FE5 		ldr	r3, .L123+4	@,
 1814 07ec 0C109FE5 		ldr	r1, .L123+8	@,
 1815 07f0 0C009FE5 		ldr	r0, .L123+12	@,
 1816              	.LVL132:
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1817              		.loc 1 312 5 discriminator 1 view .LVU525
 1818 07f4 FEFFFFEB 		bl	__assert_fail		@
 1819              	.LVL133:
 1820              	.L124:
 1821              		.align	2
 1822              	.L123:
 1823 07f8 00000000 		.word	g_armwave_state
 1824 07fc 68000000 		.word	.LANCHOR0+104
 1825 0800 20000000 		.word	.LC2
 1826 0804 5C010000 		.word	.LC11
 1827              		.cfi_endproc
 1828              	.LFE65:
 1830              		.align	2
 1831              		.global	armwave_clear_buffer
 1832              		.syntax unified
 1833              		.arm
 1834              		.fpu vfp
 1836              	armwave_clear_buffer:
 1837              	.LVL134:
 1838              	.LFB66:
 314:armwave.c     **** }
 315:armwave.c     **** 
 316:armwave.c     **** /*
 317:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 318:armwave.c     ****  */
 319:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 320:armwave.c     **** {
 1839              		.loc 1 320 1 is_stmt 1 view -0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
 321:armwave.c     ****     // Flags ignored, only one buffer cleared
 322:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1844              		.loc 1 322 5 view .LVU527
 1845 0808 0C309FE5 		ldr	r3, .L126	@ tmp113,
 1846 080c 0010A0E3 		mov	r1, #0	@,
 1847 0810 402093E5 		ldr	r2, [r3, #64]	@, g_armwave_state.ch_buff_size
 1848 0814 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1849              	.LVL135:
 1850              		.loc 1 322 5 is_stmt 0 view .LVU528
 1851 0818 FEFFFFEA 		b	memset		@
 1852              	.LVL136:
 1853              	.L127:
 1854              		.align	2
 1855              	.L126:
 1856 081c 00000000 		.word	g_armwave_state
 1857              		.cfi_endproc
 1858              	.LFE66:
 1860              		.align	2
 1861              		.global	armwave_set_channel_colour
 1862              		.syntax unified
 1863              		.arm
 1864              		.fpu vfp
 1866              	armwave_set_channel_colour:
 1867              	.LVL137:
 1868              	.LFB67:
 323:armwave.c     **** }
 324:armwave.c     **** 
 325:armwave.c     **** /*
 326:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 327:armwave.c     ****  */
 328:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 329:armwave.c     **** {
 1869              		.loc 1 329 1 is_stmt 1 view -0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 0
 1872              		@ frame_needed = 0, uses_anonymous_args = 0
 1873              		@ link register save eliminated.
 330:armwave.c     ****     // Only 1ch supported for now
 331:armwave.c     ****     switch(ch) {
 1874              		.loc 1 331 5 view .LVU530
 1875 0820 010050E3 		cmp	r0, #1	@ ch,
 332:armwave.c     ****         case 1:
 333:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1876              		.loc 1 333 13 view .LVU531
 1877              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 1878              		.loc 1 333 41 is_stmt 0 view .LVU532
 1879 0824 0C009F05 		ldreq	r0, .L130	@ tmp117,
 1880              	.LVL138:
 1881              		.loc 1 333 41 view .LVU533
 1882 0828 BC15C001 		strheq	r1, [r0, #92]	@ movhi	@ r, g_armwave_state.ch1_color.r
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1883              		.loc 1 334 13 is_stmt 1 view .LVU534
 1884              	@ armwave.c:334:             g_armwave_state.ch1_color.g = g;
 1885              		.loc 1 334 41 is_stmt 0 view .LVU535
 1886 082c BE25C001 		strheq	r2, [r0, #94]	@ movhi	@ g, g_armwave_state.ch1_color.g
 335:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1887              		.loc 1 335 13 is_stmt 1 view .LVU536
 1888              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 1889              		.loc 1 335 41 is_stmt 0 view .LVU537
 1890 0830 B036C001 		strheq	r3, [r0, #96]	@ movhi	@ b, g_armwave_state.ch1_color.b
 336:armwave.c     ****             break;
 1891              		.loc 1 336 13 is_stmt 1 view .LVU538
 1892              	@ armwave.c:338: }
 337:armwave.c     ****     }
 338:armwave.c     **** }
 1893              		.loc 1 338 1 is_stmt 0 view .LVU539
 1894 0834 1EFF2FE1 		bx	lr	@
 1895              	.L131:
 1896              		.align	2
 1897              	.L130:
 1898 0838 00000000 		.word	g_armwave_state
 1899              		.cfi_endproc
 1900              	.LFE67:
 1902              		.align	2
 1903              		.global	armwave_dump_ppm_debug
 1904              		.syntax unified
 1905              		.arm
 1906              		.fpu vfp
 1908              	armwave_dump_ppm_debug:
 1909              	.LVL139:
 1910              	.LFB68:
 339:armwave.c     **** 
 340:armwave.c     **** /*
 341:armwave.c     ****  * Dump a ppm of a buffer to a file.
 342:armwave.c     ****  */
 343:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 344:armwave.c     **** {
 1911              		.loc 1 344 1 is_stmt 1 view -0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 345:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1915              		.loc 1 345 5 view .LVU541
 1916              	@ armwave.c:344: {
 344:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1917              		.loc 1 344 1 is_stmt 0 view .LVU542
 1918 083c 0130A0E1 		mov	r3, r1	@ fn, fn
 1919 0840 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1920              		.cfi_def_cfa_offset 28
 1921              		.cfi_offset 4, -28
 1922              		.cfi_offset 5, -24
 1923              		.cfi_offset 6, -20
 1924              		.cfi_offset 7, -16
 1925              		.cfi_offset 8, -12
 1926              		.cfi_offset 9, -8
 1927              		.cfi_offset 14, -4
 1928 0844 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1929 0848 0CD04DE2 		sub	sp, sp, #12	@,,
 1930              		.cfi_def_cfa_offset 40
 1931              	@ armwave.c:345:     FILE *fp = fopen(fn, "wb");
 1932              		.loc 1 345 16 view .LVU543
 1933 084c D4109FE5 		ldr	r1, .L144	@,
 1934              	.LVL140:
 1935              		.loc 1 345 16 view .LVU544
 1936 0850 0300A0E1 		mov	r0, r3	@, fn
 1937              	.LVL141:
 1938              		.loc 1 345 16 view .LVU545
 1939 0854 FEFFFFEB 		bl	fopen64		@
 1940              	.LVL142:
 1941              	@ armwave.c:352:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 346:armwave.c     ****     uint32_t data;
 347:armwave.c     ****     int xx, yy;
 348:armwave.c     **** 
 349:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 350:armwave.c     **** 
 351:armwave.c     ****     fputs("P3\n", fp);
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1942              		.loc 1 352 5 view .LVU546
 1943 0858 CC609FE5 		ldr	r6, .L144+4	@ tmp154,
 1944              	@ armwave.c:351:     fputs("P3\n", fp);
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1945              		.loc 1 351 5 view .LVU547
 1946 085c 0320A0E3 		mov	r2, #3	@,
 1947 0860 0110A0E3 		mov	r1, #1	@,
 1948              	@ armwave.c:345:     FILE *fp = fopen(fn, "wb");
 345:armwave.c     ****     uint32_t data;
 1949              		.loc 1 345 16 view .LVU548
 1950 0864 0070A0E1 		mov	r7, r0	@ fp,
 1951              	.LVL143:
 346:armwave.c     ****     uint32_t data;
 1952              		.loc 1 346 5 is_stmt 1 view .LVU549
 347:armwave.c     **** 
 1953              		.loc 1 347 5 view .LVU550
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1954              		.loc 1 351 5 view .LVU551
 1955 0868 0030A0E1 		mov	r3, r0	@, fp
 1956 086c BC009FE5 		ldr	r0, .L144+8	@,
 1957              	.LVL144:
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1958              		.loc 1 351 5 is_stmt 0 view .LVU552
 1959 0870 FEFFFFEB 		bl	fwrite		@
 1960              	.LVL145:
 1961              		.loc 1 352 5 is_stmt 1 view .LVU553
 1962 0874 D824C6E1 		ldrd	r2, [r6, #72]	@, tmp154,
 1963 0878 B4109FE5 		ldr	r1, .L144+12	@,
 1964 087c 0700A0E1 		mov	r0, r7	@, fp
 1965 0880 FEFFFFEB 		bl	fprintf		@
 1966              	.LVL146:
 353:armwave.c     ****     fputs("255\n", fp);
 1967              		.loc 1 353 5 view .LVU554
 1968 0884 0420A0E3 		mov	r2, #4	@,
 1969 0888 0730A0E1 		mov	r3, r7	@, fp
 1970 088c 0110A0E3 		mov	r1, #1	@,
 1971 0890 A0009FE5 		ldr	r0, .L144+16	@,
 1972 0894 FEFFFFEB 		bl	fwrite		@
 1973              	.LVL147:
 354:armwave.c     **** 
 355:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1974              		.loc 1 355 5 view .LVU555
 1975              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1976              		.loc 1 355 37 is_stmt 0 view .LVU556
 1977 0898 4C2096E5 		ldr	r2, [r6, #76]	@ prephitmp_57, g_armwave_state.target_height
 1978              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1979              		.loc 1 355 5 view .LVU557
 1980 089c 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1981 08a0 1800000A 		beq	.L133		@,
 1982 08a4 483096E5 		ldr	r3, [r6, #72]	@ _12, g_armwave_state.target_width
 1983              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 359:armwave.c     **** 
 360:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1984              		.loc 1 360 13 view .LVU558
 1985 08a8 8C909FE5 		ldr	r9, .L144+20	@ tmp156,
 1986              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1987              		.loc 1 355 12 view .LVU559
 1988 08ac 0050A0E3 		mov	r5, #0	@ yy,
 1989              	.LVL148:
 1990              	.L134:
 1991              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1992              		.loc 1 356 9 view .LVU560
 1993 08b0 000053E3 		cmp	r3, #0	@ _12,
 1994              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1995              		.loc 1 356 16 view .LVU561
 1996 08b4 0040A013 		movne	r4, #0	@ xx,
 1997              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1998              		.loc 1 356 9 view .LVU562
 1999 08b8 1600000A 		beq	.L143		@,
 2000              	.LVL149:
 2001              	.L135:
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2002              		.loc 1 357 13 is_stmt 1 discriminator 3 view .LVU563
 2003              	@ armwave.c:357:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2004              		.loc 1 357 29 is_stmt 0 discriminator 3 view .LVU564
 2005 08bc 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2006              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2007              		.loc 1 360 13 discriminator 3 view .LVU565
 2008 08c0 0910A0E1 		mov	r1, r9	@, tmp156
 2009 08c4 0700A0E1 		mov	r0, r7	@, fp
 2010              	@ armwave.c:357:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2011              		.loc 1 357 18 discriminator 3 view .LVU566
 2012 08c8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2013              	.LVL150:
 2014              		.loc 1 360 13 is_stmt 1 discriminator 3 view .LVU567
 2015              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2016              		.loc 1 356 58 is_stmt 0 discriminator 3 view .LVU568
 2017 08cc 014084E2 		add	r4, r4, #1	@ xx, xx,
 2018              	.LVL151:
 2019              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2020              		.loc 1 360 81 discriminator 3 view .LVU569
 2021 08d0 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2022              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2023              		.loc 1 360 61 discriminator 3 view .LVU570
 2024 08d4 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2025              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2026              		.loc 1 360 13 discriminator 3 view .LVU571
 2027 08d8 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2028 08dc 7330EFE6 		uxtb	r3, r3	@, tmp146
 2029 08e0 00C08DE5 		str	ip, [sp]	@ tmp151,
 2030 08e4 7220EFE6 		uxtb	r2, r2	@, data
 2031              	.LVL152:
 2032              		.loc 1 360 13 discriminator 3 view .LVU572
 2033 08e8 FEFFFFEB 		bl	fprintf		@
 2034              	.LVL153:
 2035              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2036              		.loc 1 356 41 discriminator 3 view .LVU573
 2037 08ec 483096E5 		ldr	r3, [r6, #72]	@ _12, g_armwave_state.target_width
 2038              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2039              		.loc 1 356 9 discriminator 3 view .LVU574
 2040 08f0 040053E1 		cmp	r3, r4	@ _12, xx
 2041 08f4 F0FFFF8A 		bhi	.L135		@,
 2042 08f8 4C2096E5 		ldr	r2, [r6, #76]	@ prephitmp_57, g_armwave_state.target_height
 2043              	.LVL154:
 2044              	.L136:
 2045              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2046              		.loc 1 355 55 discriminator 2 view .LVU575
 2047 08fc 015085E2 		add	r5, r5, #1	@ yy, yy,
 2048              	.LVL155:
 2049              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2050              		.loc 1 355 5 discriminator 2 view .LVU576
 2051 0900 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2052 0904 E9FFFF3A 		bcc	.L134		@,
 2053              	.LVL156:
 2054              	.L133:
 361:armwave.c     ****         }
 362:armwave.c     ****     }
 363:armwave.c     **** 
 364:armwave.c     ****     fclose(fp);
 2055              		.loc 1 364 5 is_stmt 1 view .LVU577
 2056 0908 0700A0E1 		mov	r0, r7	@, fp
 2057              	@ armwave.c:365: }
 365:armwave.c     **** }
 2058              		.loc 1 365 1 is_stmt 0 view .LVU578
 2059 090c 0CD08DE2 		add	sp, sp, #12	@,,
 2060              		.cfi_remember_state
 2061              		.cfi_def_cfa_offset 28
 2062              		@ sp needed	@
 2063 0910 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2064              		.cfi_restore 14
 2065              		.cfi_restore 9
 2066              		.cfi_restore 8
 2067              		.cfi_restore 7
 2068              		.cfi_restore 6
 2069              		.cfi_restore 5
 2070              		.cfi_restore 4
 2071              		.cfi_def_cfa_offset 0
 2072              	.LVL157:
 2073              	@ armwave.c:364:     fclose(fp);
 364:armwave.c     **** }
 2074              		.loc 1 364 5 view .LVU579
 2075 0914 FEFFFFEA 		b	fclose		@
 2076              	.LVL158:
 2077              	.L143:
 2078              		.cfi_restore_state
 2079              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2080              		.loc 1 355 55 view .LVU580
 2081 0918 015085E2 		add	r5, r5, #1	@ yy, yy,
 2082              	.LVL159:
 2083              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2084              		.loc 1 355 5 view .LVU581
 2085 091c 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2086 0920 F5FFFF8A 		bhi	.L136		@,
 2087 0924 F7FFFFEA 		b	.L133		@
 2088              	.L145:
 2089              		.align	2
 2090              	.L144:
 2091 0928 74010000 		.word	.LC12
 2092 092c 00000000 		.word	g_armwave_state
 2093 0930 78010000 		.word	.LC13
 2094 0934 7C010000 		.word	.LC14
 2095 0938 84010000 		.word	.LC15
 2096 093c 8C010000 		.word	.LC16
 2097              		.cfi_endproc
 2098              	.LFE68:
 2100              		.align	2
 2101              		.global	armwave_test_init
 2102              		.syntax unified
 2103              		.arm
 2104              		.fpu vfp
 2106              	armwave_test_init:
 2107              	.LVL160:
 2108              	.LFB69:
 366:armwave.c     **** 
 367:armwave.c     **** /*
 368:armwave.c     ****  * Initialise some test functionry.
 369:armwave.c     ****  */
 370:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 371:armwave.c     **** {
 2109              		.loc 1 371 1 is_stmt 1 view -0
 2110              		.cfi_startproc
 2111              		@ args = 0, pretend = 0, frame = 0
 2112              		@ frame_needed = 0, uses_anonymous_args = 0
 372:armwave.c     ****     test_create_gamma();
 2113              		.loc 1 372 5 view .LVU583
 2114              	.LBB10:
 2115              	.LBI10:
  44:armwave.c     **** {
 2116              		.loc 1 44 6 view .LVU584
  44:armwave.c     **** {
 2117              		.loc 1 44 6 is_stmt 0 view .LVU585
 2118              	.LBE10:
 2119              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2120              		.loc 1 371 1 view .LVU586
 2121 0940 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2122              		.cfi_def_cfa_offset 32
 2123              		.cfi_offset 4, -32
 2124              		.cfi_offset 5, -28
 2125              		.cfi_offset 6, -24
 2126              		.cfi_offset 7, -20
 2127              		.cfi_offset 8, -16
 2128              		.cfi_offset 9, -12
 2129              		.cfi_offset 10, -8
 2130              		.cfi_offset 14, -4
 2131 0944 068B2DED 		vpush.64	{d8, d9, d10}	@
 2132              		.cfi_def_cfa_offset 56
 2133              		.cfi_offset 80, -56
 2134              		.cfi_offset 81, -52
 2135              		.cfi_offset 82, -48
 2136              		.cfi_offset 83, -44
 2137              		.cfi_offset 84, -40
 2138              		.cfi_offset 85, -36
 2139 0948 BC409FE5 		ldr	r4, .L150+20	@ ivtmp.100,
 2140              	.LBB13:
 2141              	.LBB11:
 2142              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2143              		.loc 1 50 32 view .LVU587
 2144 094c 2DAA9FED 		vldr.32	s20, .L150+16	@ tmp136,
 2145              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2146              		.loc 1 50 26 view .LVU588
 2147 0950 289B9FED 		vldr.64	d9, .L150	@ tmp151,
 2148              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2149              		.loc 1 50 49 view .LVU589
 2150 0954 298B9FED 		vldr.64	d8, .L150+8	@ tmp139,
 2151 0958 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.100,
 2152              	.LBE11:
 2153              	.LBE13:
 2154              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2155              		.loc 1 371 1 view .LVU590
 2156 095c 10D04DE2 		sub	sp, sp, #16	@,,
 2157              		.cfi_def_cfa_offset 72
 2158              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2159              		.loc 1 371 1 view .LVU591
 2160 0960 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2161 0964 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2162 0968 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2163 096c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2164 0970 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.100,
 2165 0974 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2166              	.LVL161:
 2167              	.L147:
 2168              	.LBB14:
 2169              	.LBB12:
  50:armwave.c     ****     }
 2170              		.loc 1 50 9 is_stmt 1 view .LVU592
 2171              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2172              		.loc 1 50 32 is_stmt 0 view .LVU593
 2173 0978 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.100
 2174              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2175              		.loc 1 50 26 view .LVU594
 2176 097c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2177              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2178              		.loc 1 50 32 view .LVU595
 2179 0980 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2180 0984 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2181 0988 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2182              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2183              		.loc 1 50 26 view .LVU596
 2184 098c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2185 0990 FEFFFFEB 		bl	pow		@
 2186              	.LVL162:
 2187              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2188              		.loc 1 50 49 view .LVU597
 2189 0994 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2190              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2191              		.loc 1 50 24 view .LVU598
 2192 0998 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2193 099c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2194 09a0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2195              	.LVL163:
 2196              	@ armwave.c:49:     for(i = 0; i < 256; i++) {
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2197              		.loc 1 49 5 view .LVU599
 2198 09a4 0A0054E1 		cmp	r4, r10	@ ivtmp.100, _39
 2199 09a8 F2FFFF1A 		bne	.L147		@,
 2200              	.LVL164:
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2201              		.loc 1 49 5 view .LVU600
 2202              	.LBE12:
 2203              	.LBE14:
 373:armwave.c     **** 
 374:armwave.c     ****     // make ch1 yellowish by default
 375:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2204              		.loc 1 375 5 is_stmt 1 view .LVU601
 2205              	.LBB15:
 2206              	.LBI15:
 328:armwave.c     **** {
 2207              		.loc 1 328 6 view .LVU602
 2208              	.LBB16:
 331:armwave.c     ****         case 1:
 2209              		.loc 1 331 5 view .LVU603
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2210              		.loc 1 333 13 view .LVU604
 334:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2211              		.loc 1 334 13 view .LVU605
 2212              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2213              		.loc 1 333 41 is_stmt 0 view .LVU606
 2214 09ac 5CC09FE5 		ldr	ip, .L150+24	@ tmp142,
 2215 09b0 5C409FE5 		ldr	r4, .L150+28	@ tmp143,
 2216              	.LBE16:
 2217              	.LBE15:
 2218              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 376:armwave.c     **** 
 377:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2219              		.loc 1 377 5 view .LVU607
 2220 09b4 0000A0E3 		mov	r0, #0	@ tmp147,
 2221              	.LBB20:
 2222              	.LBB17:
 2223              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 335:armwave.c     ****             break;
 2224              		.loc 1 335 41 view .LVU608
 2225 09b8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2226              	.LBE17:
 2227              	.LBE20:
 2228              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2229              		.loc 1 377 5 view .LVU609
 2230 09bc 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2231 09c0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2232 09c4 00808DE5 		str	r8, [sp]	@ render_width,
 2233 09c8 0610A0E1 		mov	r1, r6	@, tmp3
 2234 09cc 0720A0E1 		mov	r2, r7	@, nwaves
 2235              	.LBB21:
 2236              	.LBB18:
 2237              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2238              		.loc 1 333 41 view .LVU610
 2239 09d0 5C408CE5 		str	r4, [ip, #92]	@ tmp143, MEM[(short int *)&g_armwave_state + 92B]
 335:armwave.c     ****             break;
 2240              		.loc 1 335 13 is_stmt 1 view .LVU611
 2241              	.LBE18:
 2242              	.LBE21:
 2243              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2244              		.loc 1 377 5 is_stmt 0 view .LVU612
 2245 09d4 0630A0E1 		mov	r3, r6	@, wave_size
 2246              	.LBB22:
 2247              	.LBB19:
 2248              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 335:armwave.c     ****             break;
 2249              		.loc 1 335 41 view .LVU613
 2250 09d8 B0E6CCE1 		strh	lr, [ip, #96]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 336:armwave.c     ****     }
 2251              		.loc 1 336 13 is_stmt 1 view .LVU614
 2252              	.LVL165:
 336:armwave.c     ****     }
 2253              		.loc 1 336 13 is_stmt 0 view .LVU615
 2254              	.LBE19:
 2255              	.LBE22:
 2256              		.loc 1 377 5 is_stmt 1 view .LVU616
 2257 09dc FEFFFFEB 		bl	armwave_setup_render		@
 2258              	.LVL166:
 378:armwave.c     **** 
 379:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2259              		.loc 1 379 5 view .LVU617
 2260 09e0 30109FE5 		ldr	r1, .L150+32	@,
 2261 09e4 30009FE5 		ldr	r0, .L150+36	@,
 2262              	@ armwave.c:380: }
 380:armwave.c     **** }
 2263              		.loc 1 380 1 is_stmt 0 view .LVU618
 2264 09e8 10D08DE2 		add	sp, sp, #16	@,,
 2265              		.cfi_def_cfa_offset 56
 2266              		@ sp needed	@
 2267 09ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2268              		.cfi_restore 84
 2269              		.cfi_restore 85
 2270              		.cfi_restore 82
 2271              		.cfi_restore 83
 2272              		.cfi_restore 80
 2273              		.cfi_restore 81
 2274              		.cfi_def_cfa_offset 32
 2275 09f0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2276              		.cfi_restore 14
 2277              		.cfi_restore 10
 2278              		.cfi_restore 9
 2279              		.cfi_restore 8
 2280              		.cfi_restore 7
 2281              		.cfi_restore 6
 2282              		.cfi_restore 5
 2283              		.cfi_restore 4
 2284              		.cfi_def_cfa_offset 0
 2285              	.LVL167:
 2286              	@ armwave.c:379:     printf("armwave version: %s\n", ARMWAVE_VER);
 379:armwave.c     **** }
 2287              		.loc 1 379 5 view .LVU619
 2288 09f4 FEFFFFEA 		b	printf		@
 2289              	.LVL168:
 2290              	.L151:
 2291              		.align	3
 2292              	.L150:
 2293 09f8 000000C0 		.word	-1073741824
 2294 09fc CCCCEC3F 		.word	1072483532
 2295 0a00 00000000 		.word	0
 2296 0a04 00E06F40 		.word	1081073664
 2297 0a08 00007F43 		.word	1132396544
 2298 0a0c FFFFFFFF 		.word	gamma_table-1
 2299 0a10 00000000 		.word	g_armwave_state
 2300 0a14 F609F406 		.word	116656630
 2301 0a18 00000000 		.word	.LC0
 2302 0a1c 08000000 		.word	.LC1
 2303              		.cfi_endproc
 2304              	.LFE69:
 2306              		.global	__aeabi_uidiv
 2307              		.align	2
 2308              		.global	armwave_test_generate
 2309              		.syntax unified
 2310              		.arm
 2311              		.fpu vfp
 2313              	armwave_test_generate:
 2314              	.LFB70:
 381:armwave.c     **** 
 382:armwave.c     **** /*
 383:armwave.c     ****  * Fill buffers with test funtionry.
 384:armwave.c     ****  */
 385:armwave.c     **** void armwave_test_generate()
 386:armwave.c     **** {
 2315              		.loc 1 386 1 is_stmt 1 view -0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 0
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 387:armwave.c     ****     uint32_t yy;
 2319              		.loc 1 387 5 view .LVU621
 388:armwave.c     **** 
 389:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2320              		.loc 1 389 5 view .LVU622
 2321              	@ armwave.c:386: {
 386:armwave.c     ****     uint32_t yy;
 2322              		.loc 1 386 1 is_stmt 0 view .LVU623
 2323 0a20 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2324              		.cfi_def_cfa_offset 40
 2325              		.cfi_offset 3, -40
 2326              		.cfi_offset 4, -36
 2327              		.cfi_offset 5, -32
 2328              		.cfi_offset 6, -28
 2329              		.cfi_offset 7, -24
 2330              		.cfi_offset 8, -20
 2331              		.cfi_offset 9, -16
 2332              		.cfi_offset 10, -12
 2333              		.cfi_offset 11, -8
 2334              		.cfi_offset 14, -4
 2335              	@ armwave.c:389:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2336              		.loc 1 389 5 view .LVU624
 2337 0a24 0010A0E3 		mov	r1, #0	@,
 2338 0a28 2C419FE5 		ldr	r4, .L170	@ tmp274,
 2339 0a2c 402094E5 		ldr	r2, [r4, #64]	@, g_armwave_state.ch_buff_size
 2340 0a30 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2341 0a34 FEFFFFEB 		bl	memset		@
 2342              	.LVL169:
 390:armwave.c     **** 
 391:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 2343              		.loc 1 391 5 is_stmt 1 view .LVU625
 2344              	@ armwave.c:391:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2345              		.loc 1 391 69 is_stmt 0 view .LVU626
 2346 0a38 346094E5 		ldr	r6, [r4, #52]	@ _78, g_armwave_state.slice_height
 2347              	@ armwave.c:391:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2348              		.loc 1 391 5 view .LVU627
 2349 0a3c 483094E5 		ldr	r3, [r4, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2350 0a40 060053E1 		cmp	r3, r6	@ g_armwave_state.target_width, _78
 2351 0a44 F88FBD38 		popcc	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2352              	@ armwave.c:391:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2353              		.loc 1 391 12 view .LVU628
 2354 0a48 0050A0E3 		mov	r5, #0	@ yy,
 2355              	.LVL170:
 2356              	.L153:
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2357              		.loc 1 392 9 is_stmt 1 discriminator 3 view .LVU629
 2358 0a4c 960502E0 		mul	r2, r6, r5	@, _78, yy
 2359 0a50 383094E5 		ldr	r3, [r4, #56]	@, g_armwave_state.slice_record_height
 2360 0a54 0510A0E1 		mov	r1, r5	@, yy
 2361 0a58 00019FE5 		ldr	r0, .L170+4	@,
 2362 0a5c FEFFFFEB 		bl	printf		@
 2363              	.LVL171:
 393:armwave.c     **** 
 394:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2364              		.loc 1 394 9 discriminator 3 view .LVU630
 2365              	@ armwave.c:394:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2366              		.loc 1 394 62 is_stmt 0 discriminator 3 view .LVU631
 2367 0a60 346094E5 		ldr	r6, [r4, #52]	@ _78, g_armwave_state.slice_height
 2368              	.LBB25:
 2369              	.LBB26:
 2370              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2371              		.loc 1 84 5 discriminator 3 view .LVU632
 2372 0a64 283094E5 		ldr	r3, [r4, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 2373              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2374              		.loc 1 81 63 discriminator 3 view .LVU633
 2375 0a68 300094E5 		ldr	r0, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2376              	.LBE26:
 2377              	.LBE25:
 2378              	@ armwave.c:394:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2379              		.loc 1 394 9 discriminator 3 view .LVU634
 2380 0a6c 950608E0 		mul	r8, r5, r6	@ _6, yy, _78
 2381              	.LBB29:
 2382              	.LBB27:
 2383              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2384              		.loc 1 84 5 discriminator 3 view .LVU635
 2385 0a70 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 2386              	.LBE27:
 2387              	.LBE29:
 2388              	@ armwave.c:394:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2389              		.loc 1 394 9 discriminator 3 view .LVU636
 2390 0a74 389094E5 		ldr	r9, [r4, #56]	@ _7, g_armwave_state.slice_record_height
 2391              	.LVL172:
 2392              	.LBB30:
 2393              	.LBI25:
  72:armwave.c     **** {
 2394              		.loc 1 72 6 is_stmt 1 discriminator 3 view .LVU637
 2395              	.LBB28:
  74:armwave.c     ****     uint32_t value, word;
 2396              		.loc 1 74 5 discriminator 3 view .LVU638
  75:armwave.c     ****     uint8_t *wave_base;
 2397              		.loc 1 75 5 discriminator 3 view .LVU639
  76:armwave.c     ****     uint8_t *write_buffer_base;
 2398              		.loc 1 76 5 discriminator 3 view .LVU640
  77:armwave.c     ****     uint8_t *write_buffer;
 2399              		.loc 1 77 5 discriminator 3 view .LVU641
  78:armwave.c     **** 
 2400              		.loc 1 78 5 discriminator 3 view .LVU642
  81:armwave.c     **** 
 2401              		.loc 1 81 5 discriminator 3 view .LVU643
 2402              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2403              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU644
 2404 0a78 900800E0 		mul	r0, r0, r8	@ _20, g_armwave_state.bitdepth_height, _6
 2405              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2406              		.loc 1 81 40 discriminator 3 view .LVU645
 2407 0a7c 043094E5 		ldr	r3, [r4, #4]	@ _18, g_armwave_state.ch1_buffer
 2408              	.LVL173:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2409              		.loc 1 84 5 is_stmt 1 discriminator 3 view .LVU646
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2410              		.loc 1 84 5 is_stmt 0 discriminator 3 view .LVU647
 2411 0a80 2E00000A 		beq	.L154		@,
 2412 0a84 000059E3 		cmp	r9, #0	@ _7,
 2413 0a88 2B00000A 		beq	.L155		@,
 2414 0a8c 048048E2 		sub	r8, r8, #4	@ tmp273, _6,
 2415              	.LVL174:
 2416              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2417              		.loc 1 84 11 view .LVU648
 2418 0a90 0070A0E3 		mov	r7, #0	@ w,
 2419              	.LVL175:
 2420              	.L157:
  86:armwave.c     **** 
 2421              		.loc 1 86 9 is_stmt 1 view .LVU649
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2422              		.loc 1 90 9 view .LVU650
 2423              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2424              		.loc 1 86 64 is_stmt 0 view .LVU651
 2425 0a94 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2426 0a98 14C094E5 		ldr	ip, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2427              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2428              		.loc 1 90 16 view .LVU652
 2429 0a9c 0020A0E3 		mov	r2, #0	@ yy,
 2430 0aa0 918721E0 		mla	r1, r1, r7, r8	@ tmp218, g_armwave_state.wave_stride, w, tmp273
 2431 0aa4 01C08CE0 		add	ip, ip, r1	@ ivtmp.106, g_armwave_state.wave_buffer, tmp218
 2432              	.LVL176:
 2433              	.L156:
  91:armwave.c     **** 
 2434              		.loc 1 91 13 is_stmt 1 view .LVU653
 2435              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
  91:armwave.c     **** 
 2436              		.loc 1 91 18 is_stmt 0 view .LVU654
 2437 0aa8 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _196, offset: 0B]
 2438              	.LVL177:
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2439              		.loc 1 93 13 is_stmt 1 view .LVU655
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2440              		.loc 1 95 17 view .LVU656
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2441              		.loc 1 96 17 view .LVU657
  97:armwave.c     ****                 word >>= 8;
 2442              		.loc 1 97 17 view .LVU658
 2443              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2444              		.loc 1 96 63 is_stmt 0 view .LVU659
 2445 0aac 306094E5 		ldr	r6, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2446 0ab0 01B082E2 		add	fp, r2, #1	@ tmp231, yy,
 2447              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2448              		.loc 1 97 47 view .LVU660
 2449 0ab4 71E0E0E6 		uxtab	lr, r0, r1	@ tmp224, _20, word
 2450 0ab8 96E226E0 		mla	r6, r6, r2, lr	@ tmp225, g_armwave_state.bitdepth_height, yy, tmp224
 2451              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****             }
 2452              		.loc 1 98 22 view .LVU661
 2453 0abc 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2454              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2455              		.loc 1 97 47 view .LVU662
 2456 0ac0 06E0D3E7 		ldrb	lr, [r3, r6]	@ zero_extendqisi2	@ *_68, *_68
 2457 0ac4 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp236, _20, word
 2458 0ac8 01E08EE2 		add	lr, lr, #1	@ tmp228, *_68,
 2459 0acc 06E0C3E7 		strb	lr, [r3, r6]	@ tmp228, *_68
 2460              	.LVL178:
  98:armwave.c     ****             }
 2461              		.loc 1 98 17 is_stmt 1 view .LVU663
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2462              		.loc 1 95 17 view .LVU664
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2463              		.loc 1 96 17 view .LVU665
  97:armwave.c     ****                 word >>= 8;
 2464              		.loc 1 97 17 view .LVU666
 2465              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2466              		.loc 1 96 63 is_stmt 0 view .LVU667
 2467 0ad0 30E094E5 		ldr	lr, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2468              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****             }
 2469              		.loc 1 98 22 view .LVU668
 2470 0ad4 2168A0E1 		lsr	r6, r1, #16	@ word, word,
 2471              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2472              		.loc 1 97 47 view .LVU669
 2473 0ad8 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp259, _20, word,
 2474              	.LVL179:
  97:armwave.c     ****                 word >>= 8;
 2475              		.loc 1 97 47 view .LVU670
 2476 0adc 9EAB2EE0 		mla	lr, lr, fp, r10	@ tmp237, g_armwave_state.bitdepth_height, tmp231, tmp236
 2477 0ae0 76A0E0E6 		uxtab	r10, r0, r6	@ tmp244, _20, word
 2478 0ae4 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_88, *_88
 2479              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2480              		.loc 1 96 63 view .LVU671
 2481 0ae8 026082E2 		add	r6, r2, #2	@ tmp246, yy,
 2482              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2483              		.loc 1 97 47 view .LVU672
 2484 0aec 01B08BE2 		add	fp, fp, #1	@ tmp240, *_88,
 2485 0af0 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp240, *_88
 2486              	.LVL180:
  98:armwave.c     ****             }
 2487              		.loc 1 98 17 is_stmt 1 view .LVU673
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2488              		.loc 1 95 17 view .LVU674
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2489              		.loc 1 96 17 view .LVU675
  97:armwave.c     ****                 word >>= 8;
 2490              		.loc 1 97 17 view .LVU676
 2491              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2492              		.loc 1 96 63 is_stmt 0 view .LVU677
 2493 0af4 30B094E5 		ldr	fp, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2494 0af8 03E082E2 		add	lr, r2, #3	@ tmp255, yy,
 2495              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2496              		.loc 1 90 37 view .LVU678
 2497 0afc 042082E2 		add	r2, r2, #4	@ yy, yy,
 2498              	.LVL181:
 2499              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2500              		.loc 1 97 47 view .LVU679
 2501 0b00 9BA626E0 		mla	r6, fp, r6, r10	@ tmp249, g_armwave_state.bitdepth_height, tmp246, tmp244
 2502              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2503              		.loc 1 90 9 view .LVU680
 2504 0b04 020059E1 		cmp	r9, r2	@ _7, yy
 2505              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2506              		.loc 1 97 47 view .LVU681
 2507 0b08 06A0D3E7 		ldrb	r10, [r3, r6]	@ zero_extendqisi2	@ *_108, *_108
 2508 0b0c 01A08AE2 		add	r10, r10, #1	@ tmp252, *_108,
 2509 0b10 06A0C3E7 		strb	r10, [r3, r6]	@ tmp252, *_108
 2510              	.LVL182:
  98:armwave.c     ****             }
 2511              		.loc 1 98 17 is_stmt 1 view .LVU682
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2512              		.loc 1 95 17 view .LVU683
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2513              		.loc 1 96 17 view .LVU684
  97:armwave.c     ****                 word >>= 8;
 2514              		.loc 1 97 17 view .LVU685
 2515              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2516              		.loc 1 96 63 is_stmt 0 view .LVU686
 2517 0b14 306094E5 		ldr	r6, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2518              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2519              		.loc 1 97 47 view .LVU687
 2520 0b18 961E21E0 		mla	r1, r6, lr, r1	@ tmp260, g_armwave_state.bitdepth_height, tmp255, tmp259
 2521 0b1c 01E0D3E7 		ldrb	lr, [r3, r1]	@ zero_extendqisi2	@ *_128, *_128
 2522 0b20 01E08EE2 		add	lr, lr, #1	@ tmp263, *_128,
 2523 0b24 01E0C3E7 		strb	lr, [r3, r1]	@ tmp263, *_128
  98:armwave.c     ****             }
 2524              		.loc 1 98 17 is_stmt 1 view .LVU688
 2525              	.LVL183:
 2526              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2527              		.loc 1 90 9 is_stmt 0 view .LVU689
 2528 0b28 DEFFFF8A 		bhi	.L156		@,
 2529              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2530              		.loc 1 84 5 view .LVU690
 2531 0b2c 282094E5 		ldr	r2, [r4, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 2532              	.LVL184:
 2533              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2534              		.loc 1 84 44 view .LVU691
 2535 0b30 017087E2 		add	r7, r7, #1	@ w, w,
 2536              	.LVL185:
 2537              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2538              		.loc 1 84 5 view .LVU692
 2539 0b34 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 2540 0b38 D5FFFF3A 		bcc	.L157		@,
 2541              	.LVL186:
 2542              	.L155:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2543              		.loc 1 84 5 view .LVU693
 2544 0b3c 346094E5 		ldr	r6, [r4, #52]	@ _78, g_armwave_state.slice_height
 2545              	.L154:
 2546              	.LVL187:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2547              		.loc 1 84 5 view .LVU694
 2548              	.LBE28:
 2549              	.LBE30:
 2550              	@ armwave.c:391:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2551              		.loc 1 391 52 discriminator 3 view .LVU695
 2552 0b40 0610A0E1 		mov	r1, r6	@, _78
 2553 0b44 480094E5 		ldr	r0, [r4, #72]	@, g_armwave_state.target_width
 2554              	.LVL188:
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2555              		.loc 1 391 52 discriminator 3 view .LVU696
 2556 0b48 FEFFFFEB 		bl	__aeabi_uidiv		@
 2557              	.LVL189:
 2558              	@ armwave.c:391:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2559              		.loc 1 391 87 discriminator 3 view .LVU697
 2560 0b4c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2561              	.LVL190:
 2562              	@ armwave.c:391:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2563              		.loc 1 391 5 discriminator 3 view .LVU698
 2564 0b50 050050E1 		cmp	r0, r5	@, yy
 2565 0b54 BCFFFF8A 		bhi	.L153		@,
 2566 0b58 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2567              	.L171:
 2568              		.align	2
 2569              	.L170:
 2570 0b5c 00000000 		.word	g_armwave_state
 2571 0b60 9C010000 		.word	.LC17
 2572              		.cfi_endproc
 2573              	.LFE70:
 2575              		.align	2
 2576              		.global	armwave_test_fill_outbuf
 2577              		.syntax unified
 2578              		.arm
 2579              		.fpu vfp
 2581              	armwave_test_fill_outbuf:
 2582              	.LFB71:
 395:armwave.c     ****     }
 396:armwave.c     **** }
 397:armwave.c     **** 
 398:armwave.c     **** /*
 399:armwave.c     ****  * Render image to the local allocated buffer.
 400:armwave.c     ****  */
 401:armwave.c     **** void armwave_test_fill_outbuf()
 402:armwave.c     **** {
 2583              		.loc 1 402 1 is_stmt 1 view -0
 2584              		.cfi_startproc
 2585              		@ args = 0, pretend = 0, frame = 8
 2586              		@ frame_needed = 0, uses_anonymous_args = 0
 403:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2587              		.loc 1 403 5 view .LVU700
 2588 0b64 40219FE5 		ldr	r2, .L196	@ tmp203,
 2589              	@ armwave.c:402: {
 402:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2590              		.loc 1 402 1 is_stmt 0 view .LVU701
 2591 0b68 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2592              		.cfi_def_cfa_offset 36
 2593              		.cfi_offset 4, -36
 2594              		.cfi_offset 5, -32
 2595              		.cfi_offset 6, -28
 2596              		.cfi_offset 7, -24
 2597              		.cfi_offset 8, -20
 2598              		.cfi_offset 9, -16
 2599              		.cfi_offset 10, -12
 2600              		.cfi_offset 11, -8
 2601              		.cfi_offset 14, -4
 2602 0b6c 0CD04DE2 		sub	sp, sp, #12	@,,
 2603              		.cfi_def_cfa_offset 48
 2604              	@ armwave.c:403:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2605              		.loc 1 403 5 view .LVU702
 2606 0b70 588092E5 		ldr	r8, [r2, #88]	@ _1, g_armwave_state.out_pixbuf
 2607              	.LVL191:
 2608              	.LBB33:
 2609              	.LBI33:
 161:armwave.c     **** {
 2610              		.loc 1 161 6 is_stmt 1 view .LVU703
 2611              	.LBB34:
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2612              		.loc 1 163 5 view .LVU704
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 2613              		.loc 1 164 5 view .LVU705
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2614              		.loc 1 165 5 view .LVU706
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2615              		.loc 1 166 5 view .LVU707
 2616              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2617              		.loc 1 166 15 is_stmt 0 view .LVU708
 2618 0b74 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2619              	.LVL192:
 167:armwave.c     ****     uint32_t offset;
 2620              		.loc 1 167 5 is_stmt 1 view .LVU709
 168:armwave.c     **** 
 2621              		.loc 1 168 5 view .LVU710
 170:armwave.c     **** 
 2622              		.loc 1 170 5 view .LVU711
 2623 0b78 000058E3 		cmp	r8, #0	@ _1,
 2624 0b7c 4500000A 		beq	.L194		@,
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2625              		.loc 1 172 5 view .LVU712
 2626              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2627              		.loc 1 172 41 is_stmt 0 view .LVU713
 2628 0b80 485092E5 		ldr	r5, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2629 0b84 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2630              	.LVL193:
 173:armwave.c     **** 
 2631              		.loc 1 173 5 is_stmt 1 view .LVU714
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2632              		.loc 1 175 5 view .LVU715
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2633              		.loc 1 175 5 is_stmt 0 view .LVU716
 2634 0b88 000055E3 		cmp	r5, #0	@ npix,
 2635 0b8c 0B0000DA 		ble	.L172		@,
 2636              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2637              		.loc 1 188 52 view .LVU717
 2638 0b90 FE35D2E1 		ldrsh	r3, [r2, #94]	@ _24, g_armwave_state.ch1_color.g
 2639              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2640              		.loc 1 187 52 view .LVU718
 2641 0b94 FCB5D2E1 		ldrsh	fp, [r2, #92]	@ _18, g_armwave_state.ch1_color.r
 2642              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2643              		.loc 1 175 11 view .LVU719
 2644 0b98 0010A0E3 		mov	r1, #0	@ n,
 2645              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2646              		.loc 1 188 52 view .LVU720
 2647 0b9c 00308DE5 		str	r3, [sp]	@ _24, %sfp
 2648              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2649              		.loc 1 189 52 view .LVU721
 2650 0ba0 F036D2E1 		ldrsh	r3, [r2, #96]	@ _28, g_armwave_state.ch1_color.b
 2651 0ba4 04308DE5 		str	r3, [sp, #4]	@ _28, %sfp
 2652              	.LVL194:
 2653              	.L179:
 179:armwave.c     **** 
 2654              		.loc 1 179 9 is_stmt 1 view .LVU722
 2655              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 2656              		.loc 1 179 19 is_stmt 0 view .LVU723
 2657 0ba8 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2658              	.LVL195:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2659              		.loc 1 181 9 is_stmt 1 view .LVU724
 2660              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2661              		.loc 1 181 11 is_stmt 0 view .LVU725
 2662 0bac 000050E3 		cmp	r0, #0	@ wave_word,
 2663 0bb0 0400001A 		bne	.L191		@,
 2664 0bb4 041081E2 		add	r1, r1, #4	@ n, n,
 2665              	.L175:
 2666              	.LVL196:
 2667              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2668              		.loc 1 175 5 view .LVU726
 2669 0bb8 010055E1 		cmp	r5, r1	@ npix, n
 2670 0bbc F9FFFFCA 		bgt	.L179		@,
 2671              	.LVL197:
 2672              	.L172:
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2673              		.loc 1 175 5 view .LVU727
 2674              	.LBE34:
 2675              	.LBE33:
 2676              	@ armwave.c:404: }
 404:armwave.c     **** }
 2677              		.loc 1 404 1 view .LVU728
 2678 0bc0 0CD08DE2 		add	sp, sp, #12	@,,
 2679              		.cfi_remember_state
 2680              		.cfi_def_cfa_offset 36
 2681              		@ sp needed	@
 2682 0bc4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2683              	.LVL198:
 2684              	.L191:
 2685              		.cfi_restore_state
 2686              	.LBB36:
 2687              	.LBB35:
 2688              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2689              		.loc 1 186 19 view .LVU729
 2690 0bc8 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2691              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2692              		.loc 1 181 11 view .LVU730
 2693 0bcc 0160A0E1 		mov	r6, r1	@ ivtmp.123, n
 2694              	.LVL199:
 183:armwave.c     ****                 wave_word >>= 8;
 2695              		.loc 1 183 17 is_stmt 1 view .LVU731
 184:armwave.c     **** 
 2696              		.loc 1 184 17 view .LVU732
 2697              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2698              		.loc 1 184 27 is_stmt 0 view .LVU733
 2699 0bd0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2700              	.LVL200:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2701              		.loc 1 186 17 is_stmt 1 view .LVU734
 2702 0bd4 041081E2 		add	r1, r1, #4	@ n, ivtmp.123,
 2703              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2704              		.loc 1 186 19 is_stmt 0 view .LVU735
 2705 0bd8 0500001A 		bne	.L195		@,
 2706              	.L176:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2707              		.loc 1 186 19 view .LVU736
 2708 0bdc 016086E2 		add	r6, r6, #1	@ ivtmp.123, ivtmp.123,
 2709              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 2710              		.loc 1 182 13 view .LVU737
 2711 0be0 060051E1 		cmp	r1, r6	@ n, ivtmp.123
 2712 0be4 F3FFFF0A 		beq	.L175		@,
 183:armwave.c     ****                 wave_word >>= 8;
 2713              		.loc 1 183 17 is_stmt 1 view .LVU738
 2714              	.LVL201:
 184:armwave.c     **** 
 2715              		.loc 1 184 17 view .LVU739
 2716              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2717              		.loc 1 186 19 is_stmt 0 view .LVU740
 2718 0be8 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2719              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2720              		.loc 1 184 27 view .LVU741
 2721 0bec 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2722              	.LVL202:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2723              		.loc 1 186 17 is_stmt 1 view .LVU742
 2724              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2725              		.loc 1 186 19 is_stmt 0 view .LVU743
 2726 0bf0 F9FFFF0A 		beq	.L176		@,
 2727              	.L195:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2728              		.loc 1 187 21 is_stmt 1 view .LVU744
 2729              	.LVL203:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2730              		.loc 1 188 21 view .LVU745
 189:armwave.c     **** 
 2731              		.loc 1 189 21 view .LVU746
 191:armwave.c     ****                     g = MIN(gg, 255);
 2732              		.loc 1 191 21 view .LVU747
 192:armwave.c     ****                     b = MIN(bb, 255);
 2733              		.loc 1 192 21 view .LVU748
 193:armwave.c     **** 
 2734              		.loc 1 193 21 view .LVU749
 196:armwave.c     **** 
 2735              		.loc 1 196 21 view .LVU750
 2736              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2737              		.loc 1 189 55 is_stmt 0 view .LVU751
 2738 0bf4 04309DE5 		ldr	r3, [sp, #4]	@ _28, %sfp
 2739              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2740              		.loc 1 200 57 view .LVU752
 2741 0bf8 20A092E5 		ldr	r10, [r2, #32]	@ _50, g_armwave_state.vscale
 2742              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2743              		.loc 1 200 32 view .LVU753
 2744 0bfc 7670EFE6 		uxtb	r7, r6	@ ivtmp.123, ivtmp.123
 2745              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2746              		.loc 1 189 55 view .LVU754
 2747 0c00 930E0CE0 		mul	ip, r3, lr	@ tmp179, _28, _20
 2748              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2749              		.loc 1 188 55 view .LVU755
 2750 0c04 00309DE5 		ldr	r3, [sp]	@ _24, %sfp
 2751              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2752              		.loc 1 200 24 view .LVU756
 2753 0c08 9A0707E0 		mul	r7, r10, r7	@ yy, _50, ivtmp.123
 2754              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2755              		.loc 1 188 55 view .LVU757
 2756 0c0c 930E04E0 		mul	r4, r3, lr	@ tmp183, _24, _20
 2757              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2758              		.loc 1 189 24 view .LVU758
 2759 0c10 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp179,
 2760              	.LVL204:
 2761              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2762              		.loc 1 187 55 view .LVU759
 2763 0c14 9E0B0EE0 		mul	lr, lr, fp	@ tmp189, _20, _18
 2764              	.LVL205:
 2765              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2766              		.loc 1 188 24 view .LVU760
 2767 0c18 4444A0E1 		asr	r4, r4, #8	@ gg, tmp183,
 2768              	.LVL206:
 2769              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 2770              		.loc 1 193 25 view .LVU761
 2771 0c1c FF005CE3 		cmp	ip, #255	@ bb,
 2772 0c20 FFC0A0A3 		movge	ip, #255	@ bb,
 2773              	.LVL207:
 2774              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 2775              		.loc 1 192 25 view .LVU762
 2776 0c24 FF0054E3 		cmp	r4, #255	@ gg,
 2777 0c28 FF40A0A3 		movge	r4, #255	@ gg,
 2778              	.LVL208:
 2779              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2780              		.loc 1 187 24 view .LVU763
 2781 0c2c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp189,
 2782              	.LVL209:
 2783              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 2784              		.loc 1 191 25 view .LVU764
 2785 0c30 FF005EE3 		cmp	lr, #255	@ rr,
 2786              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2787              		.loc 1 196 56 view .LVU765
 2788 0c34 0444A0E1 		lsl	r4, r4, #8	@ tmp184, gg,
 2789              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 2790              		.loc 1 191 25 view .LVU766
 2791 0c38 FFE0A0A3 		movge	lr, #255	@ rr,
 2792              	.LVL210:
 2793              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2794              		.loc 1 196 44 view .LVU767
 2795 0c3c 0C38A0E1 		lsl	r3, ip, #16	@ tmp180, bb,
 2796 0c40 FF3803E2 		and	r3, r3, #16711680	@ tmp181, tmp180,
 2797              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2798              		.loc 1 196 56 view .LVU768
 2799 0c44 7440FFE6 		uxth	r4, r4	@ tmp185, tmp184
 2800              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2801              		.loc 1 196 51 view .LVU769
 2802 0c48 043083E1 		orr	r3, r3, r4	@ tmp187, tmp181, tmp185
 2803              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2804              		.loc 1 196 62 view .LVU770
 2805 0c4c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 2806 0c50 0E3083E1 		orr	r3, r3, lr	@ tmp191, tmp187, rr
 2807              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2808              		.loc 1 203 21 view .LVU771
 2809 0c54 00005AE3 		cmp	r10, #0	@ _50,
 2810              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2811              		.loc 1 196 26 view .LVU772
 2812 0c58 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp191,
 2813              	.LVL211:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 2814              		.loc 1 199 21 is_stmt 1 view .LVU773
 200:armwave.c     ****                     xx = (nsub >> 8);
 2815              		.loc 1 200 21 view .LVU774
 201:armwave.c     **** 
 2816              		.loc 1 201 21 view .LVU775
 2817              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 2818              		.loc 1 201 32 is_stmt 0 view .LVU776
 2819 0c5c 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.123,
 2820              	.LVL212:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2821              		.loc 1 203 21 is_stmt 1 view .LVU777
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2822              		.loc 1 203 21 is_stmt 0 view .LVU778
 2823 0c60 DDFFFF0A 		beq	.L176		@,
 2824              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2825              		.loc 1 203 29 view .LVU779
 2826 0c64 00C0A0E3 		mov	ip, #0	@ row,
 2827              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2828              		.loc 1 203 38 view .LVU780
 2829 0c68 0CE0A0E1 		mov	lr, ip	@ _54, row
 2830              	.LVL213:
 2831              	.L177:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2832              		.loc 1 204 25 is_stmt 1 view .LVU781
 205:armwave.c     ****                     }
 2833              		.loc 1 205 25 view .LVU782
 2834              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2835              		.loc 1 204 52 is_stmt 0 view .LVU783
 2836 0c6c 484092E5 		ldr	r4, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2837              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2838              		.loc 1 204 45 view .LVU784
 2839 0c70 0EE087E0 		add	lr, r7, lr	@ tmp194, yy, _54
 2840              	.LVL214:
 2841              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2842              		.loc 1 203 67 view .LVU785
 2843 0c74 01C08CE2 		add	ip, ip, #1	@ tmp199, row,
 2844              	.LVL215:
 2845              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 2846              		.loc 1 205 43 view .LVU786
 2847 0c78 94AE24E0 		mla	r4, r4, lr, r10	@ tmp198, g_armwave_state.target_width, tmp194, xx
 2848              	.LVL216:
 2849              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2850              		.loc 1 203 67 view .LVU787
 2851 0c7c 7CC0EFE6 		uxtb	ip, ip	@ row, tmp199
 2852              	.LVL217:
 2853              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2854              		.loc 1 203 38 view .LVU788
 2855 0c80 0CE0A0E1 		mov	lr, ip	@ _54, row
 2856              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 2857              		.loc 1 205 53 view .LVU789
 2858 0c84 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_60
 2859              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2860              		.loc 1 203 21 view .LVU790
 2861 0c88 204092E5 		ldr	r4, [r2, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2862              	.LVL218:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2863              		.loc 1 203 21 view .LVU791
 2864 0c8c 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 2865 0c90 F5FFFF3A 		bcc	.L177		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2866              		.loc 1 203 21 view .LVU792
 2867 0c94 D0FFFFEA 		b	.L176		@
 2868              	.LVL219:
 2869              	.L194:
 170:armwave.c     **** 
 2870              		.loc 1 170 5 is_stmt 1 view .LVU793
 2871 0c98 10309FE5 		ldr	r3, .L196+4	@,
 2872 0c9c AA20A0E3 		mov	r2, #170	@,
 2873 0ca0 0C109FE5 		ldr	r1, .L196+8	@,
 2874 0ca4 0C009FE5 		ldr	r0, .L196+12	@,
 2875 0ca8 FEFFFFEB 		bl	__assert_fail		@
 2876              	.LVL220:
 2877              	.L197:
 2878              		.align	2
 2879              	.L196:
 2880 0cac 00000000 		.word	g_armwave_state
 2881 0cb0 18000000 		.word	.LANCHOR0+24
 2882 0cb4 20000000 		.word	.LC2
 2883 0cb8 2C000000 		.word	.LC3
 2884              	.LBE35:
 2885              	.LBE36:
 2886              		.cfi_endproc
 2887              	.LFE71:
 2889              		.align	2
 2890              		.global	armwave_test_dump_buffer_to_ppm
 2891              		.syntax unified
 2892              		.arm
 2893              		.fpu vfp
 2895              	armwave_test_dump_buffer_to_ppm:
 2896              	.LVL221:
 2897              	.LFB72:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 410:armwave.c     **** {
 2898              		.loc 1 410 1 view -0
 2899              		.cfi_startproc
 2900              		@ args = 0, pretend = 0, frame = 0
 2901              		@ frame_needed = 0, uses_anonymous_args = 0
 2902              		@ link register save eliminated.
 411:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2903              		.loc 1 411 5 view .LVU795
 2904 0cbc 08309FE5 		ldr	r3, .L199	@ tmp112,
 2905 0cc0 0010A0E1 		mov	r1, r0	@, fn
 2906 0cc4 580093E5 		ldr	r0, [r3, #88]	@, g_armwave_state.out_pixbuf
 2907              	.LVL222:
 2908              		.loc 1 411 5 is_stmt 0 view .LVU796
 2909 0cc8 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2910              	.LVL223:
 2911              	.L200:
 2912              		.loc 1 411 5 view .LVU797
 2913              		.align	2
 2914              	.L199:
 2915 0ccc 00000000 		.word	g_armwave_state
 2916              		.cfi_endproc
 2917              	.LFE72:
 2919              		.align	2
 2920              		.global	armwave_test_fill_gdkbuf
 2921              		.syntax unified
 2922              		.arm
 2923              		.fpu vfp
 2925              	armwave_test_fill_gdkbuf:
 2926              	.LVL224:
 2927              	.LFB73:
 412:armwave.c     **** }
 413:armwave.c     **** 
 414:armwave.c     **** /*
 415:armwave.c     ****  * Render GDK buffer with test funtionry.
 416:armwave.c     ****  */
 417:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 418:armwave.c     **** {
 2928              		.loc 1 418 1 is_stmt 1 view -0
 2929              		.cfi_startproc
 2930              		@ args = 0, pretend = 0, frame = 8
 2931              		@ frame_needed = 0, uses_anonymous_args = 0
 419:armwave.c     ****     //PyObject *mv;
 420:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 421:armwave.c     **** 
 422:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 423:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2932              		.loc 1 423 5 view .LVU799
 2933              	@ armwave.c:423:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2934              		.loc 1 423 11 is_stmt 0 view .LVU800
 2935 0cd0 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2936              	@ armwave.c:418: {
 418:armwave.c     ****     //PyObject *mv;
 2937              		.loc 1 418 1 view .LVU801
 2938 0cd4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2939              		.cfi_def_cfa_offset 36
 2940              		.cfi_offset 4, -36
 2941              		.cfi_offset 5, -32
 2942              		.cfi_offset 6, -28
 2943              		.cfi_offset 7, -24
 2944              		.cfi_offset 8, -20
 2945              		.cfi_offset 9, -16
 2946              		.cfi_offset 10, -12
 2947              		.cfi_offset 11, -8
 2948              		.cfi_offset 14, -4
 2949 0cd8 0CD04DE2 		sub	sp, sp, #12	@,,
 2950              		.cfi_def_cfa_offset 48
 2951              	.LBB39:
 2952              	.LBB40:
 2953              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2954              		.loc 1 166 15 view .LVU802
 2955 0cdc 38219FE5 		ldr	r2, .L225	@ tmp206,
 2956              	.LBE40:
 2957              	.LBE39:
 2958              	@ armwave.c:423:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2959              		.loc 1 423 11 view .LVU803
 2960 0ce0 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2961              	.LVL225:
 424:armwave.c     ****     
 425:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2962              		.loc 1 426 5 is_stmt 1 view .LVU804
 2963              	.LBB43:
 2964              	.LBI39:
 161:armwave.c     **** {
 2965              		.loc 1 161 6 view .LVU805
 2966              	.LBB41:
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2967              		.loc 1 163 5 view .LVU806
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 2968              		.loc 1 164 5 view .LVU807
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2969              		.loc 1 165 5 view .LVU808
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2970              		.loc 1 166 5 view .LVU809
 2971              	@ armwave.c:170:     assert(out_buffer != NULL);
 170:armwave.c     **** 
 2972              		.loc 1 170 5 is_stmt 0 view .LVU810
 2973 0ce4 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2974              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2975              		.loc 1 166 15 view .LVU811
 2976 0ce8 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2977              	.LVL226:
 167:armwave.c     ****     uint32_t offset;
 2978              		.loc 1 167 5 is_stmt 1 view .LVU812
 168:armwave.c     **** 
 2979              		.loc 1 168 5 view .LVU813
 170:armwave.c     **** 
 2980              		.loc 1 170 5 view .LVU814
 2981 0cec 4500000A 		beq	.L223		@,
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2982              		.loc 1 172 5 view .LVU815
 2983              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2984              		.loc 1 172 41 is_stmt 0 view .LVU816
 2985 0cf0 485092E5 		ldr	r5, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2986 0cf4 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2987              	.LVL227:
 173:armwave.c     **** 
 2988              		.loc 1 173 5 is_stmt 1 view .LVU817
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2989              		.loc 1 175 5 view .LVU818
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2990              		.loc 1 175 5 is_stmt 0 view .LVU819
 2991 0cf8 000055E3 		cmp	r5, #0	@ npix,
 2992 0cfc 0B0000DA 		ble	.L201		@,
 2993              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2994              		.loc 1 188 52 view .LVU820
 2995 0d00 FE35D2E1 		ldrsh	r3, [r2, #94]	@ _26, g_armwave_state.ch1_color.g
 2996              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2997              		.loc 1 187 52 view .LVU821
 2998 0d04 FCB5D2E1 		ldrsh	fp, [r2, #92]	@ _20, g_armwave_state.ch1_color.r
 2999              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3000              		.loc 1 175 11 view .LVU822
 3001 0d08 0010A0E3 		mov	r1, #0	@ n,
 3002              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3003              		.loc 1 188 52 view .LVU823
 3004 0d0c 00308DE5 		str	r3, [sp]	@ _26, %sfp
 3005              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3006              		.loc 1 189 52 view .LVU824
 3007 0d10 F036D2E1 		ldrsh	r3, [r2, #96]	@ _30, g_armwave_state.ch1_color.b
 3008 0d14 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 3009              	.LVL228:
 3010              	.L208:
 179:armwave.c     **** 
 3011              		.loc 1 179 9 is_stmt 1 view .LVU825
 3012              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 3013              		.loc 1 179 19 is_stmt 0 view .LVU826
 3014 0d18 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 3015              	.LVL229:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3016              		.loc 1 181 9 is_stmt 1 view .LVU827
 3017              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3018              		.loc 1 181 11 is_stmt 0 view .LVU828
 3019 0d1c 000050E3 		cmp	r0, #0	@ wave_word,
 3020 0d20 0400001A 		bne	.L220		@,
 3021 0d24 041081E2 		add	r1, r1, #4	@ n, n,
 3022              	.L204:
 3023              	.LVL230:
 3024              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3025              		.loc 1 175 5 view .LVU829
 3026 0d28 010055E1 		cmp	r5, r1	@ npix, n
 3027 0d2c F9FFFFCA 		bgt	.L208		@,
 3028              	.LVL231:
 3029              	.L201:
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3030              		.loc 1 175 5 view .LVU830
 3031              	.LBE41:
 3032              	.LBE43:
 3033              	@ armwave.c:427: }
 427:armwave.c     **** }
 3034              		.loc 1 427 1 view .LVU831
 3035 0d30 0CD08DE2 		add	sp, sp, #12	@,,
 3036              		.cfi_remember_state
 3037              		.cfi_def_cfa_offset 36
 3038              		@ sp needed	@
 3039 0d34 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3040              	.LVL232:
 3041              	.L220:
 3042              		.cfi_restore_state
 3043              	.LBB44:
 3044              	.LBB42:
 3045              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3046              		.loc 1 186 19 view .LVU832
 3047 0d38 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3048              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3049              		.loc 1 181 11 view .LVU833
 3050 0d3c 0160A0E1 		mov	r6, r1	@ ivtmp.139, n
 3051              	.LVL233:
 183:armwave.c     ****                 wave_word >>= 8;
 3052              		.loc 1 183 17 is_stmt 1 view .LVU834
 184:armwave.c     **** 
 3053              		.loc 1 184 17 view .LVU835
 3054              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 3055              		.loc 1 184 27 is_stmt 0 view .LVU836
 3056 0d40 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3057              	.LVL234:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3058              		.loc 1 186 17 is_stmt 1 view .LVU837
 3059 0d44 041081E2 		add	r1, r1, #4	@ n, ivtmp.139,
 3060              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3061              		.loc 1 186 19 is_stmt 0 view .LVU838
 3062 0d48 0500001A 		bne	.L224		@,
 3063              	.L205:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3064              		.loc 1 186 19 view .LVU839
 3065 0d4c 016086E2 		add	r6, r6, #1	@ ivtmp.139, ivtmp.139,
 3066              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 3067              		.loc 1 182 13 view .LVU840
 3068 0d50 060051E1 		cmp	r1, r6	@ n, ivtmp.139
 3069 0d54 F3FFFF0A 		beq	.L204		@,
 183:armwave.c     ****                 wave_word >>= 8;
 3070              		.loc 1 183 17 is_stmt 1 view .LVU841
 3071              	.LVL235:
 184:armwave.c     **** 
 3072              		.loc 1 184 17 view .LVU842
 3073              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3074              		.loc 1 186 19 is_stmt 0 view .LVU843
 3075 0d58 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3076              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 3077              		.loc 1 184 27 view .LVU844
 3078 0d5c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3079              	.LVL236:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3080              		.loc 1 186 17 is_stmt 1 view .LVU845
 3081              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3082              		.loc 1 186 19 is_stmt 0 view .LVU846
 3083 0d60 F9FFFF0A 		beq	.L205		@,
 3084              	.L224:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3085              		.loc 1 187 21 is_stmt 1 view .LVU847
 3086              	.LVL237:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3087              		.loc 1 188 21 view .LVU848
 189:armwave.c     **** 
 3088              		.loc 1 189 21 view .LVU849
 191:armwave.c     ****                     g = MIN(gg, 255);
 3089              		.loc 1 191 21 view .LVU850
 192:armwave.c     ****                     b = MIN(bb, 255);
 3090              		.loc 1 192 21 view .LVU851
 193:armwave.c     **** 
 3091              		.loc 1 193 21 view .LVU852
 196:armwave.c     **** 
 3092              		.loc 1 196 21 view .LVU853
 3093              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3094              		.loc 1 189 55 is_stmt 0 view .LVU854
 3095 0d64 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 3096              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 3097              		.loc 1 200 57 view .LVU855
 3098 0d68 20A092E5 		ldr	r10, [r2, #32]	@ _52, g_armwave_state.vscale
 3099              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 3100              		.loc 1 200 32 view .LVU856
 3101 0d6c 7670EFE6 		uxtb	r7, r6	@ ivtmp.139, ivtmp.139
 3102              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3103              		.loc 1 189 55 view .LVU857
 3104 0d70 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 3105              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3106              		.loc 1 188 55 view .LVU858
 3107 0d74 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 3108              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 3109              		.loc 1 200 24 view .LVU859
 3110 0d78 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.139
 3111              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3112              		.loc 1 188 55 view .LVU860
 3113 0d7c 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 3114              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3115              		.loc 1 189 24 view .LVU861
 3116 0d80 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 3117              	.LVL238:
 3118              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3119              		.loc 1 187 55 view .LVU862
 3120 0d84 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 3121              	.LVL239:
 3122              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3123              		.loc 1 188 24 view .LVU863
 3124 0d88 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 3125              	.LVL240:
 3126              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 3127              		.loc 1 193 25 view .LVU864
 3128 0d8c FF005CE3 		cmp	ip, #255	@ bb,
 3129 0d90 FFC0A0A3 		movge	ip, #255	@ bb,
 3130              	.LVL241:
 3131              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 3132              		.loc 1 192 25 view .LVU865
 3133 0d94 FF0054E3 		cmp	r4, #255	@ gg,
 3134 0d98 FF40A0A3 		movge	r4, #255	@ gg,
 3135              	.LVL242:
 3136              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3137              		.loc 1 187 24 view .LVU866
 3138 0d9c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3139              	.LVL243:
 3140              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3141              		.loc 1 191 25 view .LVU867
 3142 0da0 FF005EE3 		cmp	lr, #255	@ rr,
 3143              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3144              		.loc 1 196 56 view .LVU868
 3145 0da4 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3146              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3147              		.loc 1 191 25 view .LVU869
 3148 0da8 FFE0A0A3 		movge	lr, #255	@ rr,
 3149              	.LVL244:
 3150              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3151              		.loc 1 196 44 view .LVU870
 3152 0dac 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3153 0db0 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3154              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3155              		.loc 1 196 56 view .LVU871
 3156 0db4 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3157              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3158              		.loc 1 196 51 view .LVU872
 3159 0db8 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3160              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3161              		.loc 1 196 62 view .LVU873
 3162 0dbc 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3163 0dc0 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3164              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3165              		.loc 1 203 21 view .LVU874
 3166 0dc4 00005AE3 		cmp	r10, #0	@ _52,
 3167              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3168              		.loc 1 196 26 view .LVU875
 3169 0dc8 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3170              	.LVL245:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3171              		.loc 1 199 21 is_stmt 1 view .LVU876
 200:armwave.c     ****                     xx = (nsub >> 8);
 3172              		.loc 1 200 21 view .LVU877
 201:armwave.c     **** 
 3173              		.loc 1 201 21 view .LVU878
 3174              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 3175              		.loc 1 201 32 is_stmt 0 view .LVU879
 3176 0dcc 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.139,
 3177              	.LVL246:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3178              		.loc 1 203 21 is_stmt 1 view .LVU880
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3179              		.loc 1 203 21 is_stmt 0 view .LVU881
 3180 0dd0 DDFFFF0A 		beq	.L205		@,
 3181              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3182              		.loc 1 203 29 view .LVU882
 3183 0dd4 00C0A0E3 		mov	ip, #0	@ row,
 3184              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3185              		.loc 1 203 38 view .LVU883
 3186 0dd8 0CE0A0E1 		mov	lr, ip	@ _56, row
 3187              	.LVL247:
 3188              	.L206:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3189              		.loc 1 204 25 is_stmt 1 view .LVU884
 205:armwave.c     ****                     }
 3190              		.loc 1 205 25 view .LVU885
 3191              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3192              		.loc 1 204 52 is_stmt 0 view .LVU886
 3193 0ddc 484092E5 		ldr	r4, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3194              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3195              		.loc 1 204 45 view .LVU887
 3196 0de0 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3197              	.LVL248:
 3198              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3199              		.loc 1 203 67 view .LVU888
 3200 0de4 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3201              	.LVL249:
 3202              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 3203              		.loc 1 205 43 view .LVU889
 3204 0de8 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3205              	.LVL250:
 3206              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3207              		.loc 1 203 67 view .LVU890
 3208 0dec 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3209              	.LVL251:
 3210              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3211              		.loc 1 203 38 view .LVU891
 3212 0df0 0CE0A0E1 		mov	lr, ip	@ _56, row
 3213              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 3214              		.loc 1 205 53 view .LVU892
 3215 0df4 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3216              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3217              		.loc 1 203 21 view .LVU893
 3218 0df8 204092E5 		ldr	r4, [r2, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3219              	.LVL252:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3220              		.loc 1 203 21 view .LVU894
 3221 0dfc 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3222 0e00 F5FFFF3A 		bcc	.L206		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3223              		.loc 1 203 21 view .LVU895
 3224 0e04 D0FFFFEA 		b	.L205		@
 3225              	.LVL253:
 3226              	.L223:
 170:armwave.c     **** 
 3227              		.loc 1 170 5 is_stmt 1 view .LVU896
 3228 0e08 10309FE5 		ldr	r3, .L225+4	@,
 3229 0e0c AA20A0E3 		mov	r2, #170	@,
 3230 0e10 0C109FE5 		ldr	r1, .L225+8	@,
 3231 0e14 0C009FE5 		ldr	r0, .L225+12	@,
 3232              	.LVL254:
 170:armwave.c     **** 
 3233              		.loc 1 170 5 is_stmt 0 view .LVU897
 3234 0e18 FEFFFFEB 		bl	__assert_fail		@
 3235              	.LVL255:
 3236              	.L226:
 3237              		.align	2
 3238              	.L225:
 3239 0e1c 00000000 		.word	g_armwave_state
 3240 0e20 18000000 		.word	.LANCHOR0+24
 3241 0e24 20000000 		.word	.LC2
 3242 0e28 2C000000 		.word	.LC3
 3243              	.LBE42:
 3244              	.LBE44:
 3245              		.cfi_endproc
 3246              	.LFE73:
 3248              		.align	2
 3249              		.global	armwave_test_buffer_alloc
 3250              		.syntax unified
 3251              		.arm
 3252              		.fpu vfp
 3254              	armwave_test_buffer_alloc:
 3255              	.LFB74:
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_buffer_alloc()
 433:armwave.c     **** {
 3256              		.loc 1 433 1 is_stmt 1 view -0
 3257              		.cfi_startproc
 3258              		@ args = 0, pretend = 0, frame = 0
 3259              		@ frame_needed = 0, uses_anonymous_args = 0
 434:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3260              		.loc 1 434 5 view .LVU899
 3261              	@ armwave.c:433: {
 433:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3262              		.loc 1 433 1 is_stmt 0 view .LVU900
 3263 0e2c 70402DE9 		push	{r4, r5, r6, lr}	@
 3264              		.cfi_def_cfa_offset 16
 3265              		.cfi_offset 4, -16
 3266              		.cfi_offset 5, -12
 3267              		.cfi_offset 6, -8
 3268              		.cfi_offset 14, -4
 3269              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 3270              		.loc 1 434 23 view .LVU901
 3271 0e30 50409FE5 		ldr	r4, .L234	@ tmp130,
 3272 0e34 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3273              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 3274              		.loc 1 434 7 view .LVU902
 3275 0e38 000050E3 		cmp	r0, #0	@ _1,
 3276 0e3c 0000000A 		beq	.L228		@,
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3277              		.loc 1 435 9 is_stmt 1 view .LVU903
 3278 0e40 FEFFFFEB 		bl	free		@
 3279              	.LVL256:
 3280              	.L228:
 436:armwave.c     ****     }
 437:armwave.c     **** 
 438:armwave.c     ****     printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwave_
 3281              		.loc 1 438 5 view .LVU904
 3282 0e44 2C2094E5 		ldr	r2, [r4, #44]	@, g_armwave_state.waves_max
 3283 0e48 3C1094E5 		ldr	r1, [r4, #60]	@, g_armwave_state.wave_length
 3284 0e4c 38009FE5 		ldr	r0, .L234+4	@,
 3285 0e50 FEFFFFEB 		bl	printf		@
 3286              	.LVL257:
 439:armwave.c     **** 
 440:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3287              		.loc 1 440 5 view .LVU905
 3288              	@ armwave.c:440:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3289              		.loc 1 440 40 is_stmt 0 view .LVU906
 3290 0e54 3C3094E5 		ldr	r3, [r4, #60]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3291 0e58 2C5094E5 		ldr	r5, [r4, #44]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3292 0e5c 0110A0E3 		mov	r1, #1	@,
 3293 0e60 950305E0 		mul	r5, r5, r3	@ _6, g_armwave_state.waves_max, g_armwave_state.wave_length
 3294 0e64 0500A0E1 		mov	r0, r5	@, _6
 3295 0e68 FEFFFFEB 		bl	calloc		@
 3296              	.LVL258:
 3297              	@ armwave.c:442:     if(g_armwave_state.test_wave_buffer == NULL) {
 441:armwave.c     **** 
 442:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3298              		.loc 1 442 7 view .LVU907
 3299 0e6c 000050E3 		cmp	r0, #0	@ tmp127,
 3300              	@ armwave.c:440:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 440:armwave.c     **** 
 3301              		.loc 1 440 38 view .LVU908
 3302 0e70 180084E5 		str	r0, [r4, #24]	@ tmp127, g_armwave_state.test_wave_buffer
 3303              		.loc 1 442 5 is_stmt 1 view .LVU909
 3304              	@ armwave.c:442:     if(g_armwave_state.test_wave_buffer == NULL) {
 3305              		.loc 1 442 7 is_stmt 0 view .LVU910
 3306 0e74 7080BD18 		popne	{r4, r5, r6, pc}	@
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3307              		.loc 1 443 9 is_stmt 1 view .LVU911
 3308 0e78 0510A0E1 		mov	r1, r5	@, _6
 3309 0e7c 0C009FE5 		ldr	r0, .L234+8	@,
 3310              	@ armwave.c:446: }
 444:armwave.c     ****         return;
 445:armwave.c     ****     }
 446:armwave.c     **** }
 3311              		.loc 1 446 1 is_stmt 0 view .LVU912
 3312 0e80 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3313              		.cfi_restore 14
 3314              		.cfi_restore 6
 3315              		.cfi_restore 5
 3316              		.cfi_restore 4
 3317              		.cfi_def_cfa_offset 0
 3318              	@ armwave.c:443:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3319              		.loc 1 443 9 view .LVU913
 3320 0e84 FEFFFFEA 		b	printf		@
 3321              	.LVL259:
 3322              	.L235:
 3323              		.align	2
 3324              	.L234:
 3325 0e88 00000000 		.word	g_armwave_state
 3326 0e8c CC010000 		.word	.LC18
 3327 0e90 FC010000 		.word	.LC19
 3328              		.cfi_endproc
 3329              	.LFE74:
 3331              		.align	2
 3332              		.global	armwave_fill_pixbuf_into_pybuffer
 3333              		.syntax unified
 3334              		.arm
 3335              		.fpu vfp
 3337              	armwave_fill_pixbuf_into_pybuffer:
 3338              	.LVL260:
 3339              	.LFB75:
 447:armwave.c     **** 
 448:armwave.c     **** /*
 449:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 450:armwave.c     ****  */
 451:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 452:armwave.c     **** {
 3340              		.loc 1 452 1 is_stmt 1 view -0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 48
 3343              		@ frame_needed = 0, uses_anonymous_args = 0
 453:armwave.c     ****     Py_buffer buffer;
 3344              		.loc 1 453 5 view .LVU915
 454:armwave.c     ****     int ret;
 3345              		.loc 1 454 5 view .LVU916
 455:armwave.c     **** 
 456:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3346              		.loc 1 456 5 view .LVU917
 3347              	@ armwave.c:452: {
 452:armwave.c     ****     Py_buffer buffer;
 3348              		.loc 1 452 1 is_stmt 0 view .LVU918
 3349 0e94 10402DE9 		push	{r4, lr}	@
 3350              		.cfi_def_cfa_offset 8
 3351              		.cfi_offset 4, -8
 3352              		.cfi_offset 14, -4
 3353 0e98 0040A0E1 		mov	r4, r0	@ buf_obj, buf_obj
 3354 0e9c 30D04DE2 		sub	sp, sp, #48	@,,
 3355              		.cfi_def_cfa_offset 56
 3356              	@ armwave.c:456:     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3357              		.loc 1 456 5 view .LVU919
 3358 0ea0 64009FE5 		ldr	r0, .L240	@,
 3359              	.LVL261:
 3360              		.loc 1 456 5 view .LVU920
 3361 0ea4 FEFFFFEB 		bl	puts		@
 3362              	.LVL262:
 457:armwave.c     **** 
 458:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3363              		.loc 1 458 5 is_stmt 1 view .LVU921
 3364              	@ armwave.c:458:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3365              		.loc 1 458 11 is_stmt 0 view .LVU922
 3366 0ea8 0400A0E1 		mov	r0, r4	@, buf_obj
 3367 0eac 04108DE2 		add	r1, sp, #4	@ tmp128,,
 3368 0eb0 0120A0E3 		mov	r2, #1	@,
 3369 0eb4 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3370              	.LVL263:
 459:armwave.c     **** 
 460:armwave.c     ****     if(ret != 0) {
 3371              		.loc 1 460 5 is_stmt 1 view .LVU923
 3372              	@ armwave.c:460:     if(ret != 0) {
 3373              		.loc 1 460 7 is_stmt 0 view .LVU924
 3374 0eb8 000050E3 		cmp	r0, #0	@,
 3375 0ebc 0900001A 		bne	.L239		@,
 461:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 462:armwave.c     ****         Py_RETURN_FALSE;
 463:armwave.c     ****     }
 464:armwave.c     **** 
 465:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 466:armwave.c     **** 
 467:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3376              		.loc 1 467 5 is_stmt 1 view .LVU925
 3377 0ec0 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3378              	.LVL264:
 3379              		.loc 1 467 5 is_stmt 0 view .LVU926
 3380 0ec4 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3381              	.LVL265:
 468:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 3382              		.loc 1 468 5 is_stmt 1 view .LVU927
 3383 0ec8 40009FE5 		ldr	r0, .L240+4	@,
 3384 0ecc FEFFFFEB 		bl	puts		@
 3385              	.LVL266:
 469:armwave.c     **** 
 470:armwave.c     ****     PyBuffer_Release(&buffer);
 3386              		.loc 1 470 5 view .LVU928
 3387 0ed0 04008DE2 		add	r0, sp, #4	@ tmp129,,
 3388 0ed4 FEFFFFEB 		bl	PyBuffer_Release		@
 3389              	.LVL267:
 471:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 3390              		.loc 1 471 5 view .LVU929
 3391 0ed8 34009FE5 		ldr	r0, .L240+8	@,
 3392 0edc FEFFFFEB 		bl	puts		@
 3393              	.LVL268:
 3394              	@ armwave.c:472: }
 472:armwave.c     **** }
 3395              		.loc 1 472 1 is_stmt 0 view .LVU930
 3396 0ee0 30D08DE2 		add	sp, sp, #48	@,,
 3397              		.cfi_remember_state
 3398              		.cfi_def_cfa_offset 8
 3399              		@ sp needed	@
 3400 0ee4 1080BDE8 		pop	{r4, pc}	@
 3401              	.LVL269:
 3402              	.L239:
 3403              		.cfi_restore_state
 461:armwave.c     ****         Py_RETURN_FALSE;
 3404              		.loc 1 461 9 is_stmt 1 view .LVU931
 3405 0ee8 28009FE5 		ldr	r0, .L240+12	@,
 3406              	.LVL270:
 461:armwave.c     ****         Py_RETURN_FALSE;
 3407              		.loc 1 461 9 is_stmt 0 view .LVU932
 3408 0eec FEFFFFEB 		bl	puts		@
 3409              	.LVL271:
 462:armwave.c     ****     }
 3410              		.loc 1 462 9 is_stmt 1 view .LVU933
 3411              	.LBB45:
 3412              	.LBI45:
 3413              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3414              		.loc 2 456 20 view .LVU934
 3415              	.LBB46:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3416              		.loc 2 458 21 view .LVU935
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3417              		.loc 2 459 5 view .LVU936
 3418              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3419              		.loc 2 459 18 is_stmt 0 view .LVU937
 3420 0ef0 24309FE5 		ldr	r3, .L240+16	@ tmp119,
 3421              	.LBE46:
 3422              	.LBE45:
 3423              	@ armwave.c:462:         Py_RETURN_FALSE;
 462:armwave.c     ****     }
 3424              		.loc 1 462 9 view .LVU938
 3425 0ef4 0300A0E1 		mov	r0, r3	@ <retval>, tmp119
 3426              	.LBB48:
 3427              	.LBB47:
 3428              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3429              		.loc 2 459 18 view .LVU939
 3430 0ef8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct], MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3431 0efc 012082E2 		add	r2, r2, #1	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3432 0f00 002083E5 		str	r2, [r3]	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3433              	.LBE47:
 3434              	.LBE48:
 3435              	@ armwave.c:472: }
 3436              		.loc 1 472 1 view .LVU940
 3437 0f04 30D08DE2 		add	sp, sp, #48	@,,
 3438              		.cfi_def_cfa_offset 8
 3439              		@ sp needed	@
 3440 0f08 1080BDE8 		pop	{r4, pc}	@
 3441              	.LVL272:
 3442              	.L241:
 3443              		.loc 1 472 1 view .LVU941
 3444              		.align	2
 3445              	.L240:
 3446 0f0c 48020000 		.word	.LC20
 3447 0f10 C8020000 		.word	.LC22
 3448 0f14 FC020000 		.word	.LC23
 3449 0f18 74020000 		.word	.LC21
 3450 0f1c 00000000 		.word	_Py_FalseStruct
 3451              		.cfi_endproc
 3452              	.LFE75:
 3454              		.align	2
 3455              		.global	armwave_test_create_am_sine
 3456              		.syntax unified
 3457              		.arm
 3458              		.fpu vfp
 3460              	armwave_test_create_am_sine:
 3461              	.LVL273:
 3462              	.LFB76:
 473:armwave.c     **** 
 474:armwave.c     **** /*
 475:armwave.c     ****  * Make a test AM waveform for render tests.
 476:armwave.c     ****  *
 477:armwave.c     ****  * @param   mod                 modulation depth
 478:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 479:armwave.c     ****  */
 480:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 481:armwave.c     **** {
 3463              		.loc 1 481 1 is_stmt 1 view -0
 3464              		.cfi_startproc
 3465              		@ args = 0, pretend = 0, frame = 8
 3466              		@ frame_needed = 0, uses_anonymous_args = 0
 482:armwave.c     ****     float v, noise, xnoise, mod_val;
 3467              		.loc 1 482 5 view .LVU943
 483:armwave.c     ****     int w, x;
 3468              		.loc 1 483 5 view .LVU944
 484:armwave.c     **** 
 485:armwave.c     ****     armwave_test_buffer_alloc();
 3469              		.loc 1 485 5 view .LVU945
 3470              	.LBB51:
 3471              	.LBI51:
 432:armwave.c     **** {
 3472              		.loc 1 432 6 view .LVU946
 3473              	.LBB52:
 434:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3474              		.loc 1 434 5 view .LVU947
 3475              	.LBE52:
 3476              	.LBE51:
 3477              	@ armwave.c:481: {
 481:armwave.c     ****     float v, noise, xnoise, mod_val;
 3478              		.loc 1 481 1 is_stmt 0 view .LVU948
 3479 0f20 70402DE9 		push	{r4, r5, r6, lr}	@
 3480              		.cfi_def_cfa_offset 16
 3481              		.cfi_offset 4, -16
 3482              		.cfi_offset 5, -12
 3483              		.cfi_offset 6, -8
 3484              		.cfi_offset 14, -4
 3485 0f24 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3486              		.cfi_def_cfa_offset 72
 3487              		.cfi_offset 80, -72
 3488              		.cfi_offset 81, -68
 3489              		.cfi_offset 82, -64
 3490              		.cfi_offset 83, -60
 3491              		.cfi_offset 84, -56
 3492              		.cfi_offset 85, -52
 3493              		.cfi_offset 86, -48
 3494              		.cfi_offset 87, -44
 3495              		.cfi_offset 88, -40
 3496              		.cfi_offset 89, -36
 3497              		.cfi_offset 90, -32
 3498              		.cfi_offset 91, -28
 3499              		.cfi_offset 92, -24
 3500              		.cfi_offset 93, -20
 3501              	.LBB57:
 3502              	.LBB53:
 3503              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 434:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3504              		.loc 1 434 23 view .LVU949
 3505 0f28 B8519FE5 		ldr	r5, .L273+32	@ tmp232,
 3506              	.LBE53:
 3507              	.LBE57:
 3508              	@ armwave.c:481: {
 481:armwave.c     ****     float v, noise, xnoise, mod_val;
 3509              		.loc 1 481 1 view .LVU950
 3510 0f2c 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3511 0f30 60BAB0EE 		vmov.f32	s22, s1	@ noise_fraction, noise_fraction
 3512              	.LBB58:
 3513              	.LBB54:
 3514              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 434:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3515              		.loc 1 434 23 view .LVU951
 3516 0f34 180095E5 		ldr	r0, [r5, #24]	@ _63, g_armwave_state.test_wave_buffer
 3517              	.LBE54:
 3518              	.LBE58:
 3519              	@ armwave.c:481: {
 481:armwave.c     ****     float v, noise, xnoise, mod_val;
 3520              		.loc 1 481 1 view .LVU952
 3521 0f38 08D04DE2 		sub	sp, sp, #8	@,,
 3522              		.cfi_def_cfa_offset 80
 3523              	.LBB59:
 3524              	.LBB55:
 3525              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 434:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3526              		.loc 1 434 7 view .LVU953
 3527 0f3c 000050E3 		cmp	r0, #0	@ _63,
 3528 0f40 0000000A 		beq	.L243		@,
 435:armwave.c     ****     }
 3529              		.loc 1 435 9 is_stmt 1 view .LVU954
 3530 0f44 FEFFFFEB 		bl	free		@
 3531              	.LVL274:
 3532              	.L243:
 438:armwave.c     **** 
 3533              		.loc 1 438 5 view .LVU955
 3534 0f48 2C2095E5 		ldr	r2, [r5, #44]	@, g_armwave_state.waves_max
 3535 0f4c 3C1095E5 		ldr	r1, [r5, #60]	@, g_armwave_state.wave_length
 3536 0f50 94019FE5 		ldr	r0, .L273+36	@,
 3537 0f54 FEFFFFEB 		bl	printf		@
 3538              	.LVL275:
 440:armwave.c     **** 
 3539              		.loc 1 440 5 view .LVU956
 3540              	@ armwave.c:440:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 440:armwave.c     **** 
 3541              		.loc 1 440 40 is_stmt 0 view .LVU957
 3542 0f58 3C3095E5 		ldr	r3, [r5, #60]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3543 0f5c 2C4095E5 		ldr	r4, [r5, #44]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3544 0f60 0110A0E3 		mov	r1, #1	@,
 3545 0f64 940304E0 		mul	r4, r4, r3	@ _68, g_armwave_state.waves_max, g_armwave_state.wave_length
 3546 0f68 0400A0E1 		mov	r0, r4	@, _68
 3547 0f6c FEFFFFEB 		bl	calloc		@
 3548              	.LVL276:
 3549              	@ armwave.c:442:     if(g_armwave_state.test_wave_buffer == NULL) {
 442:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3550              		.loc 1 442 7 view .LVU958
 3551 0f70 000050E3 		cmp	r0, #0	@ tmp177,
 3552              	@ armwave.c:440:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 440:armwave.c     **** 
 3553              		.loc 1 440 38 view .LVU959
 3554 0f74 180085E5 		str	r0, [r5, #24]	@ tmp177, g_armwave_state.test_wave_buffer
 442:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3555              		.loc 1 442 5 is_stmt 1 view .LVU960
 3556              	@ armwave.c:442:     if(g_armwave_state.test_wave_buffer == NULL) {
 442:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3557              		.loc 1 442 7 is_stmt 0 view .LVU961
 3558 0f78 4E00000A 		beq	.L272		@,
 3559              	.L244:
 3560              	.LVL277:
 442:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3561              		.loc 1 442 7 view .LVU962
 3562              	.LBE55:
 3563              	.LBE59:
 3564              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 486:armwave.c     **** 
 487:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3565              		.loc 1 487 35 discriminator 1 view .LVU963
 3566 0f7c 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_80, g_armwave_state.waves
 3567              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 3568              		.loc 1 487 5 discriminator 1 view .LVU964
 3569 0f80 000052E3 		cmp	r2, #0	@ prephitmp_80,
 3570 0f84 4800000A 		beq	.L242		@,
 3571              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3572              		.loc 1 488 37 view .LVU965
 3573 0f88 4EDADFED 		vldr.32	s27, .L273	@ tmp184,
 3574              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3575              		.loc 1 488 17 view .LVU966
 3576 0f8c 4EDA9FED 		vldr.32	s26, .L273+4	@ tmp186,
 3577              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 489:armwave.c     ****         //mod = 1.0f;
 490:armwave.c     **** 
 491:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****             noise *= noise;
 494:armwave.c     ****             noise *= noise;
 495:armwave.c     ****             noise *= noise;
 496:armwave.c     **** 
 497:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 498:armwave.c     ****                 noise = -noise;
 499:armwave.c     **** 
 500:armwave.c     ****             noise += 1.0f;
 501:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 503:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3578              		.loc 1 503 41 view .LVU967
 3579 0f90 4E8A9FED 		vldr.32	s16, .L273+8	@ tmp234,
 3580              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 3581              		.loc 1 503 29 view .LVU968
 3582 0f94 4EBADFED 		vldr.32	s23, .L273+12	@ tmp235,
 3583              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 505:armwave.c     ****             //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127), 0
 506:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = (uint8_t)MIN(
 3584              		.loc 1 506 87 view .LVU969
 3585 0f98 4ECA9FED 		vldr.32	s24, .L273+16	@ tmp236,
 3586 0f9c 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_96, g_armwave_state.wave_length
 3587              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 487:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3588              		.loc 1 487 5 view .LVU970
 3589 0fa0 0060A0E3 		mov	r6, #0	@ w,
 3590              	.LVL278:
 3591              	.L252:
 488:armwave.c     ****         //mod = 1.0f;
 3592              		.loc 1 488 9 is_stmt 1 view .LVU971
 3593              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3594              		.loc 1 488 28 is_stmt 0 view .LVU972
 3595 0fa4 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3596              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3597              		.loc 1 488 17 view .LVU973
 3598 0fa8 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp186
 3599              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3600              		.loc 1 491 9 view .LVU974
 3601 0fac 000053E3 		cmp	r3, #0	@ prephitmp_96,
 3602              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3603              		.loc 1 488 28 view .LVU975
 3604 0fb0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp182, w
 3605              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3606              		.loc 1 488 37 view .LVU976
 3607 0fb4 AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp183, tmp182, tmp184
 3608              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3609              		.loc 1 488 17 view .LVU977
 3610 0fb8 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp183, mod
 3611              	.LVL279:
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3612              		.loc 1 491 9 is_stmt 1 view .LVU978
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3613              		.loc 1 491 9 is_stmt 0 view .LVU979
 3614 0fbc 3700000A 		beq	.L246		@,
 3615 0fc0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp231, mod_val
 3616              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3617              		.loc 1 501 20 view .LVU980
 3618 0fc4 44AADFED 		vldr.32	s21, .L273+20	@ tmp204,
 3619              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3620              		.loc 1 506 96 view .LVU981
 3621 0fc8 44AA9FED 		vldr.32	s20, .L273+24	@ tmp215,
 3622 0fcc 448ADFED 		vldr.32	s17, .L273+28	@ tmp216,
 3623              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3624              		.loc 1 491 15 view .LVU982
 3625 0fd0 0040A0E3 		mov	r4, #0	@ x,
 3626              	.LVL280:
 3627              	.L251:
 492:armwave.c     ****             noise *= noise;
 3628              		.loc 1 492 13 is_stmt 1 view .LVU983
 3629              	@ armwave.c:492:             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 3630              		.loc 1 492 24 is_stmt 0 view .LVU984
 3631 0fd4 FEFFFFEB 		bl	rand		@
 3632              	.LVL281:
 3633              	@ armwave.c:492:             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 3634              		.loc 1 492 31 view .LVU985
 3635 0fd8 7000FFE6 		uxth	r0, r0	@ tmp187,
 3636              	@ armwave.c:492:             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 3637              		.loc 1 492 41 view .LVU986
 3638 0fdc 900A07EE 		vmov	s15, r0	@ int	@ tmp187, tmp187
 3639 0fe0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp189, tmp187
 3640              	@ armwave.c:492:             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 3641              		.loc 1 492 20 view .LVU987
 3642 0fe4 8B7A67EE 		vmul.f32	s15, s15, s22	@ noise, tmp189, noise_fraction
 3643              	.LVL282:
 493:armwave.c     ****             noise *= noise;
 3644              		.loc 1 493 13 is_stmt 1 view .LVU988
 3645              	@ armwave.c:493:             noise *= noise;
 493:armwave.c     ****             noise *= noise;
 3646              		.loc 1 493 19 is_stmt 0 view .LVU989
 3647 0fe8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3648              	.LVL283:
 494:armwave.c     ****             noise *= noise;
 3649              		.loc 1 494 13 is_stmt 1 view .LVU990
 3650              	@ armwave.c:494:             noise *= noise;
 494:armwave.c     ****             noise *= noise;
 3651              		.loc 1 494 19 is_stmt 0 view .LVU991
 3652 0fec A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3653              	.LVL284:
 495:armwave.c     **** 
 3654              		.loc 1 495 13 is_stmt 1 view .LVU992
 3655              	@ armwave.c:495:             noise *= noise;
 495:armwave.c     **** 
 3656              		.loc 1 495 19 is_stmt 0 view .LVU993
 3657 0ff0 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3658              	.LVL285:
 497:armwave.c     ****                 noise = -noise;
 3659              		.loc 1 497 13 is_stmt 1 view .LVU994
 3660              	@ armwave.c:497:             if((rand() & 0xffff) > 0x7fff)
 497:armwave.c     ****                 noise = -noise;
 3661              		.loc 1 497 17 is_stmt 0 view .LVU995
 3662 0ff4 FEFFFFEB 		bl	rand		@
 3663              	.LVL286:
 498:armwave.c     **** 
 3664              		.loc 1 498 17 is_stmt 1 view .LVU996
 3665              	@ armwave.c:497:             if((rand() & 0xffff) > 0x7fff)
 497:armwave.c     ****                 noise = -noise;
 3666              		.loc 1 497 15 is_stmt 0 view .LVU997
 3667 0ff8 020910E3 		tst	r0, #32768	@,
 3668              	@ armwave.c:498:                 noise = -noise;
 498:armwave.c     **** 
 3669              		.loc 1 498 23 view .LVU998
 3670 0ffc 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3671              	.LVL287:
 500:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3672              		.loc 1 500 13 is_stmt 1 view .LVU999
 501:armwave.c     **** 
 3673              		.loc 1 501 13 view .LVU1000
 3674              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3675              		.loc 1 501 23 is_stmt 0 view .LVU1001
 3676 1000 FEFFFFEB 		bl	rand		@
 3677              	.LVL288:
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3678              		.loc 1 503 13 is_stmt 1 view .LVU1002
 3679              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3680              		.loc 1 503 41 is_stmt 0 view .LVU1003
 3681 1004 0F7A95ED 		vldr.32	s14, [r5, #60]	@ int	@ tmp242, g_armwave_state.wave_length
 3682              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3683              		.loc 1 503 29 view .LVU1004
 3684 1008 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3685              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3686              		.loc 1 503 41 view .LVU1005
 3687 100c 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp192, tmp242
 3688              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3689              		.loc 1 503 29 view .LVU1006
 3690 1010 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, x
 3691              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3692              		.loc 1 503 41 view .LVU1007
 3693 1014 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp194, tmp234, tmp192
 3694              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3695              		.loc 1 503 29 view .LVU1008
 3696 1018 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp197, tmp196, tmp235
 3697              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3698              		.loc 1 501 30 view .LVU1009
 3699 101c 7000FFE6 		uxth	r0, r0	@ tmp200,
 3700              	.LVL289:
 3701              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3702              		.loc 1 501 40 view .LVU1010
 3703 1020 100A07EE 		vmov	s14, r0	@ int	@ tmp200, tmp200
 3704 1024 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp202, tmp200
 3705              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3706              		.loc 1 501 20 view .LVU1011
 3707 1028 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp202, tmp204
 3708              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3709              		.loc 1 503 73 view .LVU1012
 3710 102c A70A06EE 		vmla.f32	s0, s13, s15	@ tmp205, tmp194, tmp197
 3711              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3712              		.loc 1 503 18 view .LVU1013
 3713 1030 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp205
 3714 1034 FEFFFFEB 		bl	sin		@
 3715              	.LVL290:
 3716              		.loc 1 506 13 is_stmt 1 view .LVU1014
 3717              	@ armwave.c:500:             noise += 1.0f;
 500:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3718              		.loc 1 500 19 is_stmt 0 view .LVU1015
 3719 1038 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp234
 3720              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3721              		.loc 1 506 87 view .LVU1016
 3722 103c 0020A0E3 		mov	r2, #0	@ iftmp.22_39,
 3723              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3724              		.loc 1 503 94 view .LVU1017
 3725 1040 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp211, noise
 3726              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3727              		.loc 1 503 83 view .LVU1018
 3728 1044 000B29EE 		vmul.f64	d0, d9, d0	@ tmp208, tmp231,
 3729              	.LVL291:
 3730              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3731              		.loc 1 503 94 view .LVU1019
 3732 1048 077B20EE 		vmul.f64	d7, d0, d7	@ tmp212, tmp208, tmp211
 3733              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3734              		.loc 1 503 15 view .LVU1020
 3735 104c C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp212
 3736              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3737              		.loc 1 506 96 view .LVU1021
 3738 1050 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp216
 3739 1054 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp215
 3740 1058 C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3741 105c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3742 1060 050000DA 		ble	.L248		@,
 3743              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3744              		.loc 1 506 87 discriminator 1 view .LVU1022
 3745 1064 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp236
 3746 1068 FF20A0E3 		mov	r2, #255	@ iftmp.22_39,
 3747 106c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3748 1070 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp220, _26
 3749 1074 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp220, %sfp
 3750 1078 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_39, %sfp
 3751              	.L248:
 3752              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3753              		.loc 1 506 53 discriminator 12 view .LVU1023
 3754 107c 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3755              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3756              		.loc 1 506 85 discriminator 12 view .LVU1024
 3757 1080 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3758 1084 931623E0 		mla	r3, r3, r6, r1	@ tmp226, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 3759 1088 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.22_39, *_31
 3760              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3761              		.loc 1 491 39 discriminator 12 view .LVU1025
 3762 108c 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_96, g_armwave_state.wave_length
 3763              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3764              		.loc 1 491 54 discriminator 12 view .LVU1026
 3765 1090 014084E2 		add	r4, r4, #1	@ x, x,
 3766              	.LVL292:
 3767              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3768              		.loc 1 491 9 discriminator 12 view .LVU1027
 3769 1094 040053E1 		cmp	r3, r4	@ prephitmp_96, x
 3770 1098 CDFFFF8A 		bhi	.L251		@,
 3771 109c 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_80, g_armwave_state.waves
 3772              	.LVL293:
 3773              	.L246:
 3774              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 487:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3775              		.loc 1 487 44 discriminator 2 view .LVU1028
 3776 10a0 016086E2 		add	r6, r6, #1	@ w, w,
 3777              	.LVL294:
 3778              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 487:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3779              		.loc 1 487 5 discriminator 2 view .LVU1029
 3780 10a4 020056E1 		cmp	r6, r2	@ w, prephitmp_80
 3781 10a8 BDFFFF3A 		bcc	.L252		@,
 3782              	.LVL295:
 3783              	.L242:
 3784              	@ armwave.c:509: }
 507:armwave.c     ****         }
 508:armwave.c     ****     }
 509:armwave.c     **** }
 3785              		.loc 1 509 1 view .LVU1030
 3786 10ac 08D08DE2 		add	sp, sp, #8	@,,
 3787              		.cfi_remember_state
 3788              		.cfi_def_cfa_offset 72
 3789              		@ sp needed	@
 3790 10b0 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3791              		.cfi_restore 92
 3792              		.cfi_restore 93
 3793              		.cfi_restore 90
 3794              		.cfi_restore 91
 3795              		.cfi_restore 88
 3796              		.cfi_restore 89
 3797              		.cfi_restore 86
 3798              		.cfi_restore 87
 3799              		.cfi_restore 84
 3800              		.cfi_restore 85
 3801              		.cfi_restore 82
 3802              		.cfi_restore 83
 3803              		.cfi_restore 80
 3804              		.cfi_restore 81
 3805              		.cfi_def_cfa_offset 16
 3806              	.LVL296:
 3807              		.loc 1 509 1 view .LVU1031
 3808 10b4 7080BDE8 		pop	{r4, r5, r6, pc}	@
 3809              	.LVL297:
 3810              	.L272:
 3811              		.cfi_restore_state
 3812              	.LBB60:
 3813              	.LBB56:
 443:armwave.c     ****         return;
 3814              		.loc 1 443 9 is_stmt 1 view .LVU1032
 3815 10b8 0410A0E1 		mov	r1, r4	@, _68
 3816 10bc 2C009FE5 		ldr	r0, .L273+40	@,
 3817 10c0 FEFFFFEB 		bl	printf		@
 3818              	.LVL298:
 444:armwave.c     ****     }
 3819              		.loc 1 444 9 view .LVU1033
 3820 10c4 ACFFFFEA 		b	.L244		@
 3821              	.L274:
 3822              		.align	2
 3823              	.L273:
 3824 10c8 0000803C 		.word	1015021568
 3825 10cc 0000003F 		.word	1056964608
 3826 10d0 0000803F 		.word	1065353216
 3827 10d4 C3F5C840 		.word	1086911939
 3828 10d8 00007F43 		.word	1132396544
 3829 10dc 38FFC74A 		.word	1254620984
 3830 10e0 0000FE42 		.word	1123942400
 3831 10e4 00000043 		.word	1124073472
 3832 10e8 00000000 		.word	g_armwave_state
 3833 10ec CC010000 		.word	.LC18
 3834 10f0 FC010000 		.word	.LC19
 3835              	.LBE56:
 3836              	.LBE60:
 3837              		.cfi_endproc
 3838              	.LFE76:
 3840              		.align	2
 3841              		.global	armwave_test_create_square
 3842              		.syntax unified
 3843              		.arm
 3844              		.fpu vfp
 3846              	armwave_test_create_square:
 3847              	.LVL299:
 3848              	.LFB77:
 510:armwave.c     **** 
 511:armwave.c     **** /*
 512:armwave.c     ****  * Make a test square waveform.
 513:armwave.c     ****  *
 514:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 515:armwave.c     ****  */
 516:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 517:armwave.c     **** {
 3849              		.loc 1 517 1 view -0
 3850              		.cfi_startproc
 3851              		@ args = 0, pretend = 0, frame = 8
 3852              		@ frame_needed = 0, uses_anonymous_args = 0
 518:armwave.c     ****     uint8_t v;
 3853              		.loc 1 518 5 view .LVU1035
 519:armwave.c     ****     float noise, xnoise;
 3854              		.loc 1 519 5 view .LVU1036
 520:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 3855              		.loc 1 520 5 view .LVU1037
 521:armwave.c     ****     int w, x;
 3856              		.loc 1 521 5 view .LVU1038
 522:armwave.c     **** 
 523:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3857              		.loc 1 523 5 view .LVU1039
 3858              	@ armwave.c:517: {
 517:armwave.c     ****     uint8_t v;
 3859              		.loc 1 517 1 is_stmt 0 view .LVU1040
 3860 10f4 70402DE9 		push	{r4, r5, r6, lr}	@
 3861              		.cfi_def_cfa_offset 16
 3862              		.cfi_offset 4, -16
 3863              		.cfi_offset 5, -12
 3864              		.cfi_offset 6, -8
 3865              		.cfi_offset 14, -4
 3866 10f8 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 3867              		.cfi_def_cfa_offset 56
 3868              		.cfi_offset 80, -56
 3869              		.cfi_offset 81, -52
 3870              		.cfi_offset 82, -48
 3871              		.cfi_offset 83, -44
 3872              		.cfi_offset 84, -40
 3873              		.cfi_offset 85, -36
 3874              		.cfi_offset 86, -32
 3875              		.cfi_offset 87, -28
 3876              		.cfi_offset 88, -24
 3877              		.cfi_offset 89, -20
 3878              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 3879              		.loc 1 523 35 view .LVU1041
 3880 10fc 54519FE5 		ldr	r5, .L303+32	@ tmp179,
 3881 1100 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_33, g_armwave_state.waves
 3882              	@ armwave.c:517: {
 517:armwave.c     ****     uint8_t v;
 3883              		.loc 1 517 1 view .LVU1042
 3884 1104 08D04DE2 		sub	sp, sp, #8	@,,
 3885              		.cfi_def_cfa_offset 64
 3886              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 3887              		.loc 1 523 5 view .LVU1043
 3888 1108 000052E3 		cmp	r2, #0	@ prephitmp_33,
 3889 110c 4600000A 		beq	.L275		@,
 3890 1110 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 3891              	@ armwave.c:520:     float level = 0.8f, new_level = 0.8f;
 520:armwave.c     ****     int w, x;
 3892              		.loc 1 520 11 view .LVU1044
 3893 1114 47CA9FED 		vldr.32	s24, .L303	@ level,
 3894              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 524:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****             noise *= noise;
 527:armwave.c     ****             noise *= noise;
 528:armwave.c     ****             noise *= noise;
 529:armwave.c     **** 
 530:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 531:armwave.c     ****                 noise = -noise;
 532:armwave.c     **** 
 533:armwave.c     ****             //noise += 1.0f;
 534:armwave.c     **** 
 535:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 3895              		.loc 1 535 49 view .LVU1045
 3896 1118 47AA9FED 		vldr.32	s20, .L303+4	@ tmp186,
 3897              	@ armwave.c:540:                 new_level = 0.2f;
 536:armwave.c     ****                 new_level = 0.2f;
 537:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 538:armwave.c     ****                 new_level = 0.8f;
 539:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 540:armwave.c     ****                 new_level = 0.2f;
 3898              		.loc 1 540 27 view .LVU1046
 3899 111c 47AADFED 		vldr.32	s21, .L303+8	@ new_level,
 3900              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3901              		.loc 1 537 56 view .LVU1047
 3902 1120 47BADFED 		vldr.32	s23, .L303+12	@ tmp188,
 3903              	@ armwave.c:539:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 539:armwave.c     ****                 new_level = 0.2f;
 3904              		.loc 1 539 56 view .LVU1048
 3905 1124 478ADFED 		vldr.32	s17, .L303+16	@ tmp189,
 3906 1128 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_70, g_armwave_state.wave_length
 3907              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3908              		.loc 1 523 11 view .LVU1049
 3909 112c 0060A0E3 		mov	r6, #0	@ w,
 3910              	.LVL300:
 3911              	.L277:
 3912              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3913              		.loc 1 524 9 view .LVU1050
 3914 1130 000053E3 		cmp	r3, #0	@ prephitmp_70,
 3915 1134 3900000A 		beq	.L284		@,
 3916              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3917              		.loc 1 538 27 view .LVU1051
 3918 1138 3EBA9FED 		vldr.32	s22, .L303	@ new_level,
 3919              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 541:armwave.c     ****             } else {
 542:armwave.c     ****                 new_level = 0.8f;
 543:armwave.c     ****             }
 544:armwave.c     **** 
 545:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 3920              		.loc 1 545 29 view .LVU1052
 3921 113c 429A9FED 		vldr.32	s18, .L303+20	@ tmp161,
 3922              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3923              		.loc 1 524 15 view .LVU1053
 3924 1140 0040A0E3 		mov	r4, #0	@ x,
 3925              	.LVL301:
 3926              	.L283:
 525:armwave.c     ****             noise *= noise;
 3927              		.loc 1 525 13 is_stmt 1 view .LVU1054
 3928              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3929              		.loc 1 525 24 is_stmt 0 view .LVU1055
 3930 1144 FEFFFFEB 		bl	rand		@
 3931              	.LVL302:
 3932              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3933              		.loc 1 525 31 view .LVU1056
 3934 1148 7000FFE6 		uxth	r0, r0	@ tmp148,
 3935              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3936              		.loc 1 525 41 view .LVU1057
 3937 114c 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 3938 1150 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 3939              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3940              		.loc 1 525 20 view .LVU1058
 3941 1154 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 3942              	.LVL303:
 526:armwave.c     ****             noise *= noise;
 3943              		.loc 1 526 13 is_stmt 1 view .LVU1059
 3944              	@ armwave.c:526:             noise *= noise;
 526:armwave.c     ****             noise *= noise;
 3945              		.loc 1 526 19 is_stmt 0 view .LVU1060
 3946 1158 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3947              	.LVL304:
 527:armwave.c     ****             noise *= noise;
 3948              		.loc 1 527 13 is_stmt 1 view .LVU1061
 3949              	@ armwave.c:527:             noise *= noise;
 527:armwave.c     ****             noise *= noise;
 3950              		.loc 1 527 19 is_stmt 0 view .LVU1062
 3951 115c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3952              	.LVL305:
 528:armwave.c     **** 
 3953              		.loc 1 528 13 is_stmt 1 view .LVU1063
 3954              	@ armwave.c:528:             noise *= noise;
 528:armwave.c     **** 
 3955              		.loc 1 528 19 is_stmt 0 view .LVU1064
 3956 1160 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 3957              	.LVL306:
 530:armwave.c     ****                 noise = -noise;
 3958              		.loc 1 530 13 is_stmt 1 view .LVU1065
 3959              	@ armwave.c:530:             if((rand() & 0xff) > 0x7f)
 530:armwave.c     ****                 noise = -noise;
 3960              		.loc 1 530 17 is_stmt 0 view .LVU1066
 3961 1164 FEFFFFEB 		bl	rand		@
 3962              	.LVL307:
 3963              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3964              		.loc 1 535 18 view .LVU1067
 3965 1168 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3966 116c E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 3967              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3968              		.loc 1 535 49 view .LVU1068
 3969 1170 0F7AD5ED 		vldr.32	s15, [r5, #60]	@ int	@ tmp195, g_armwave_state.wave_length
 3970 1174 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp195
 3971 1178 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp186
 3972              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3973              		.loc 1 535 15 view .LVU1069
 3974 117c E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 3975              	@ armwave.c:530:             if((rand() & 0xff) > 0x7f)
 530:armwave.c     ****                 noise = -noise;
 3976              		.loc 1 530 15 view .LVU1070
 3977 1180 800010E3 		tst	r0, #128	@,
 531:armwave.c     **** 
 3978              		.loc 1 531 17 is_stmt 1 view .LVU1071
 3979              	@ armwave.c:531:                 noise = -noise;
 531:armwave.c     **** 
 3980              		.loc 1 531 23 is_stmt 0 view .LVU1072
 3981 1184 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 3982              	.LVL308:
 535:armwave.c     ****                 new_level = 0.2f;
 3983              		.loc 1 535 13 is_stmt 1 view .LVU1073
 3984              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3985              		.loc 1 535 15 is_stmt 0 view .LVU1074
 3986 1188 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3987              	@ armwave.c:540:                 new_level = 0.2f;
 540:armwave.c     ****             } else {
 3988              		.loc 1 540 27 view .LVU1075
 3989 118c 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 3990              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3991              		.loc 1 535 15 view .LVU1076
 3992 1190 090000CA 		bgt	.L279		@,
 537:armwave.c     ****                 new_level = 0.8f;
 3993              		.loc 1 537 20 is_stmt 1 view .LVU1077
 3994              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3995              		.loc 1 537 56 is_stmt 0 view .LVU1078
 3996 1194 AB6A67EE 		vmul.f32	s13, s15, s23	@ tmp156, _8, tmp188
 3997              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3998              		.loc 1 537 22 view .LVU1079
 3999 1198 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 4000 119c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4001              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4002              		.loc 1 538 27 view .LVU1080
 4003 11a0 4B7AF0CE 		vmovgt.f32	s15, s22	@ new_level, new_level
 4004              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 4005              		.loc 1 537 22 view .LVU1081
 4006 11a4 040000CA 		bgt	.L279		@,
 539:armwave.c     ****                 new_level = 0.2f;
 4007              		.loc 1 539 20 is_stmt 1 view .LVU1082
 4008              	@ armwave.c:539:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 539:armwave.c     ****                 new_level = 0.2f;
 4009              		.loc 1 539 56 is_stmt 0 view .LVU1083
 4010 11a8 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp189
 4011              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4012              		.loc 1 538 27 view .LVU1084
 4013 11ac E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 4014 11b0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4015 11b4 4B7AF0DE 		vmovle.f32	s15, s22	@, new_level, new_level
 4016 11b8 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 4017              	.L279:
 4018              	.LVL309:
 4019              		.loc 1 545 13 is_stmt 1 view .LVU1085
 4020              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 4021              		.loc 1 545 34 is_stmt 0 view .LVU1086
 4022 11bc 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 4023              	.LVL310:
 4024              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 4025              		.loc 1 545 19 view .LVU1087
 4026 11c0 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp189
 4027              	.LVL311:
 546:armwave.c     **** 
 547:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4028              		.loc 1 547 13 is_stmt 1 view .LVU1088
 4029              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4030              		.loc 1 547 27 is_stmt 0 view .LVU1089
 4031 11c4 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 4032 11c8 C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 4033 11cc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4034              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4035              		.loc 1 547 17 view .LVU1090
 4036 11d0 0020A0D3 		movle	r2, #0	@ iftmp.29_32,
 4037              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4038              		.loc 1 547 27 view .LVU1091
 4039 11d4 080000DA 		ble	.L280		@,
 4040              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4041              		.loc 1 547 17 discriminator 1 view .LVU1092
 4042 11d8 1C7A9FED 		vldr.32	s14, .L303+24	@ tmp164,
 4043 11dc C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 4044 11e0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4045              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4046              		.loc 1 547 60 discriminator 1 view .LVU1093
 4047 11e4 1A7A9F4D 		vldrmi.32	s14, .L303+28	@ tmp166,
 4048              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4049              		.loc 1 547 17 discriminator 1 view .LVU1094
 4050 11e8 FF20A053 		movpl	r2, #255	@ iftmp.29_32,
 4051              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4052              		.loc 1 547 60 discriminator 1 view .LVU1095
 4053 11ec 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 4054              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4055              		.loc 1 547 17 discriminator 1 view .LVU1096
 4056 11f0 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 4057 11f4 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 4058 11f8 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.29_32, %sfp
 4059              	.L280:
 4060              	.LVL312:
 548:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 4061              		.loc 1 548 13 is_stmt 1 discriminator 12 view .LVU1097
 4062              	@ armwave.c:548:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4063              		.loc 1 548 53 is_stmt 0 discriminator 12 view .LVU1098
 4064 11fc 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4065              	@ armwave.c:548:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4066              		.loc 1 548 85 discriminator 12 view .LVU1099
 4067 1200 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4068 1204 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 4069 1208 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.29_32, *_21
 4070              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4071              		.loc 1 524 39 discriminator 12 view .LVU1100
 4072 120c 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_70, g_armwave_state.wave_length
 4073              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4074              		.loc 1 524 54 discriminator 12 view .LVU1101
 4075 1210 014084E2 		add	r4, r4, #1	@ x, x,
 4076              	.LVL313:
 4077              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4078              		.loc 1 524 9 discriminator 12 view .LVU1102
 4079 1214 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 4080 1218 C9FFFF8A 		bhi	.L283		@,
 4081 121c 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_33, g_armwave_state.waves
 4082              	.LVL314:
 4083              	.L284:
 4084              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4085              		.loc 1 523 44 discriminator 2 view .LVU1103
 4086 1220 016086E2 		add	r6, r6, #1	@ w, w,
 4087              	.LVL315:
 4088              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4089              		.loc 1 523 5 discriminator 2 view .LVU1104
 4090 1224 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 4091 1228 C0FFFF3A 		bcc	.L277		@,
 4092              	.LVL316:
 4093              	.L275:
 4094              	@ armwave.c:551: }
 549:armwave.c     ****         }
 550:armwave.c     ****     }
 551:armwave.c     **** }
 4095              		.loc 1 551 1 view .LVU1105
 4096 122c 08D08DE2 		add	sp, sp, #8	@,,
 4097              		.cfi_def_cfa_offset 56
 4098              		@ sp needed	@
 4099 1230 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 4100              		.cfi_restore 88
 4101              		.cfi_restore 89
 4102              		.cfi_restore 86
 4103              		.cfi_restore 87
 4104              		.cfi_restore 84
 4105              		.cfi_restore 85
 4106              		.cfi_restore 82
 4107              		.cfi_restore 83
 4108              		.cfi_restore 80
 4109              		.cfi_restore 81
 4110              		.cfi_def_cfa_offset 16
 4111 1234 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4112              	.L304:
 4113              		.align	2
 4114              	.L303:
 4115 1238 CDCC4C3F 		.word	1061997773
 4116 123c 0000403F 		.word	1061158912
 4117 1240 CDCC4C3E 		.word	1045220557
 4118 1244 0000003F 		.word	1056964608
 4119 1248 0000803E 		.word	1048576000
 4120 124c 00004040 		.word	1077936128
 4121 1250 0000803F 		.word	1065353216
 4122 1254 00007F43 		.word	1132396544
 4123 1258 00000000 		.word	g_armwave_state
 4124              		.cfi_endproc
 4125              	.LFE77:
 4127              		.align	2
 4128              		.global	armwave_cleanup
 4129              		.syntax unified
 4130              		.arm
 4131              		.fpu vfp
 4133              	armwave_cleanup:
 4134              	.LFB78:
 552:armwave.c     **** 
 553:armwave.c     **** /*
 554:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 555:armwave.c     ****  */
 556:armwave.c     **** void armwave_cleanup()
 557:armwave.c     **** {
 4135              		.loc 1 557 1 is_stmt 1 view -0
 4136              		.cfi_startproc
 4137              		@ args = 0, pretend = 0, frame = 0
 4138              		@ frame_needed = 0, uses_anonymous_args = 0
 558:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4139              		.loc 1 558 5 view .LVU1107
 4140              	@ armwave.c:557: {
 557:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4141              		.loc 1 557 1 is_stmt 0 view .LVU1108
 4142 125c 10402DE9 		push	{r4, lr}	@
 4143              		.cfi_def_cfa_offset 8
 4144              		.cfi_offset 4, -8
 4145              		.cfi_offset 14, -4
 4146              	@ armwave.c:558:     free(g_armwave_state.out_pixbuf);
 4147              		.loc 1 558 25 view .LVU1109
 4148 1260 34409FE5 		ldr	r4, .L307	@ tmp114,
 4149              	@ armwave.c:558:     free(g_armwave_state.out_pixbuf);
 4150              		.loc 1 558 5 view .LVU1110
 4151 1264 580094E5 		ldr	r0, [r4, #88]	@, g_armwave_state.out_pixbuf
 4152 1268 FEFFFFEB 		bl	free		@
 4153              	.LVL317:
 559:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4154              		.loc 1 559 5 is_stmt 1 view .LVU1111
 4155 126c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4156 1270 FEFFFFEB 		bl	free		@
 4157              	.LVL318:
 560:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4158              		.loc 1 560 5 view .LVU1112
 4159 1274 740094E5 		ldr	r0, [r4, #116]	@, g_armwave_state.xcoord_to_xpixel
 4160 1278 FEFFFFEB 		bl	free		@
 4161              	.LVL319:
 561:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4162              		.loc 1 561 5 view .LVU1113
 4163 127c 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4164 1280 FEFFFFEB 		bl	free		@
 4165              	.LVL320:
 562:armwave.c     **** 
 563:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4166              		.loc 1 563 5 view .LVU1114
 4167              	@ armwave.c:563:     g_armwave_state.out_pixbuf = NULL;
 4168              		.loc 1 563 32 is_stmt 0 view .LVU1115
 4169 1284 0030A0E3 		mov	r3, #0	@ tmp123,
 4170 1288 583084E5 		str	r3, [r4, #88]	@ tmp123, g_armwave_state.out_pixbuf
 564:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4171              		.loc 1 564 5 is_stmt 1 view .LVU1116
 4172              	@ armwave.c:564:     g_armwave_state.ch1_buffer = NULL;
 4173              		.loc 1 564 32 is_stmt 0 view .LVU1117
 4174 128c 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 565:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4175              		.loc 1 565 5 is_stmt 1 view .LVU1118
 4176              	@ armwave.c:565:     g_armwave_state.xcoord_to_xpixel = NULL;
 4177              		.loc 1 565 38 is_stmt 0 view .LVU1119
 4178 1290 743084E5 		str	r3, [r4, #116]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 566:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4179              		.loc 1 566 5 is_stmt 1 view .LVU1120
 4180              	@ armwave.c:566:     g_armwave_state.test_wave_buffer = NULL;
 4181              		.loc 1 566 38 is_stmt 0 view .LVU1121
 4182 1294 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4183              	@ armwave.c:567: }
 567:armwave.c     **** }
 4184              		.loc 1 567 1 view .LVU1122
 4185 1298 1080BDE8 		pop	{r4, pc}	@
 4186              	.L308:
 4187              		.align	2
 4188              	.L307:
 4189 129c 00000000 		.word	g_armwave_state
 4190              		.cfi_endproc
 4191              	.LFE78:
 4193              		.comm	gamma_table,256,4
 4194              		.comm	g_armwave_state,120,4
 4195              		.section	.rodata
 4196              		.align	2
 4197              		.set	.LANCHOR0,. + 0
 4200              	__PRETTY_FUNCTION__.17017:
 4201 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4201      6176655F 
 4201      66696C6C 
 4201      5F706978 
 4201      6275665F 
 4204              	__PRETTY_FUNCTION__.17048:
 4205 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4205      6176655F 
 4205      66696C6C 
 4205      5F706978 
 4205      6275665F 
 4206 0033 00       		.space	1
 4209              	__PRETTY_FUNCTION__.17070:
 4210 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4210      6176655F 
 4210      73657475 
 4210      705F7265 
 4210      6E646572 
 4211 0049 000000   		.space	3
 4214              	__PRETTY_FUNCTION__.17077:
 4215 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4215      6176655F 
 4215      7365745F 
 4215      77617665 
 4215      5F706F69 
 4216 0065 000000   		.space	3
 4219              	__PRETTY_FUNCTION__.17083:
 4220 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4220      6176655F 
 4220      7365745F 
 4220      77617665 
 4220      5F706F69 
 4221              		.section	.rodata.str1.4,"aMS",%progbits,1
 4222              		.align	2
 4223              	.LC0:
 4224 0000 76302E30 		.ascii	"v0.0.1\000"
 4224      2E3100
 4225 0007 00       		.space	1
 4226              	.LC1:
 4227 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4227      61766520 
 4227      76657273 
 4227      696F6E3A 
 4227      2025730A 
 4228 001d 000000   		.space	3
 4229              	.LC2:
 4230 0020 61726D77 		.ascii	"armwave.c\000"
 4230      6176652E 
 4230      6300
 4231 002a 0000     		.space	2
 4232              	.LC3:
 4233 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4233      62756666 
 4233      65722021 
 4233      3D204E55 
 4233      4C4C00
 4234 003f 00       		.space	1
 4235              	.LC4:
 4236 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4236      20653D25 
 4236      6420773D 
 4236      25642077 
 4236      733D2564 
 4237              	.LC5:
 4238 006c 73746172 		.ascii	"start_point < end_point\000"
 4238      745F706F 
 4238      696E7420 
 4238      3C20656E 
 4238      645F706F 
 4239              	.LC6:
 4240 0084 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 4240      65745F68 
 4240      65696768 
 4240      74203D3D 
 4240      20323536 
 4241 00b7 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4241      68656967 
 4241      6874203D 
 4241      3D203130 
 4241      3234207C 
 4242 00e3 00       		.space	1
 4243              	.LC7:
 4244 00e4 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4244      7566665F 
 4244      73697A65 
 4244      3D25640A 
 4244      00
 4245 00f5 000000   		.space	3
 4246              	.LC8:
 4247 00f8 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4247      6D776176 
 4247      655F7374 
 4247      6174652E 
 4247      6368315F 
 4248 011b 00       		.space	1
 4249              	.LC9:
 4250 011c 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4250      6D776176 
 4250      655F7374 
 4250      6174652E 
 4250      78636F6F 
 4251 0145 000000   		.space	3
 4252              	.LC10:
 4253 0148 77617665 		.ascii	"wave_buffer != NULL\000"
 4253      5F627566 
 4253      66657220 
 4253      213D204E 
 4253      554C4C00 
 4254              	.LC11:
 4255 015c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4255      5F627566 
 4255      6665725F 
 4255      70747220 
 4255      213D2030 
 4256 0171 000000   		.space	3
 4257              	.LC12:
 4258 0174 776200   		.ascii	"wb\000"
 4259 0177 00       		.space	1
 4260              	.LC13:
 4261 0178 50330A00 		.ascii	"P3\012\000"
 4262              	.LC14:
 4263 017c 25642025 		.ascii	"%d %d\012\000"
 4263      640A00
 4264 0183 00       		.space	1
 4265              	.LC15:
 4266 0184 3235350A 		.ascii	"255\012\000"
 4266      00
 4267 0189 000000   		.space	3
 4268              	.LC16:
 4269 018c 25336420 		.ascii	"%3d %3d %3d\012\000"
 4269      25336420 
 4269      2533640A 
 4269      00
 4270 0199 000000   		.space	3
 4271              	.LC17:
 4272 019c 61726D77 		.ascii	"armwave_test_generate: slice %d (y=%d, h=%d)\012\000"
 4272      6176655F 
 4272      74657374 
 4272      5F67656E 
 4272      65726174 
 4273 01ca 0000     		.space	2
 4274              	.LC18:
 4275 01cc 61726D77 		.ascii	"armwave_test_buffer_alloc: length=%d max=%d\012\000"
 4275      6176655F 
 4275      74657374 
 4275      5F627566 
 4275      6665725F 
 4276 01f9 000000   		.space	3
 4277              	.LC19:
 4278 01fc 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 4278      6176655F 
 4278      74657374 
 4278      5F627566 
 4278      6665725F 
 4279 022f 77617665 		.ascii	"wave buffer (%d bytes)\012\000"
 4279      20627566 
 4279      66657220 
 4279      28256420 
 4279      62797465 
 4280 0247 00       		.space	1
 4281              	.LC20:
 4282 0248 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: start\000"
 4282      6176655F 
 4282      66696C6C 
 4282      5F706978 
 4282      6275665F 
 4283 0271 000000   		.space	3
 4284              	.LC21:
 4285 0274 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4285      6176655F 
 4285      66696C6C 
 4285      5F706978 
 4285      6275665F 
 4286 02a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4286      20666169 
 4286      6C65642C 
 4286      20726574 
 4286      75726E69 
 4287 02c6 0000     		.space	2
 4288              	.LC22:
 4289 02c8 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: buffer fill done"
 4289      6176655F 
 4289      66696C6C 
 4289      5F706978 
 4289      6275665F 
 4290 02fb 00       		.ascii	"\000"
 4291              	.LC23:
 4292 02fc 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: done\000"
 4292      6176655F 
 4292      66696C6C 
 4292      5F706978 
 4292      6275665F 
 4293              		.text
 4294              	.Letext0:
 4295              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4296              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4297              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4298              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4299              		.file 7 "/usr/include/stdio.h"
 4300              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4301              		.file 9 "/usr/include/errno.h"
 4302              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4303              		.file 11 "/usr/include/unistd.h"
 4304              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4305              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4306              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4307              		.file 15 "/usr/include/math.h"
 4308              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4309              		.file 17 "/usr/include/time.h"
 4310              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4311              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4312              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4313              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4314              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4315              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4316              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4317              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4318              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4319              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4320              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4321              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4322              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4323              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4324              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4325              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4326              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4327              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4328              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4329              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4330              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4331              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4332              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4333              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4334              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4335              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4336              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4337              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4338              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4339              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4340              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4341              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4342              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4343              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4344              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4345              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4346              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4347              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4348              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4349              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4350              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4351              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4352              		.file 60 "/usr/local/include/python3.8/context.h"
 4353              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4354              		.file 62 "/usr/local/include/python3.8/code.h"
 4355              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4356              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4357              		.file 65 "/usr/local/include/python3.8/import.h"
 4358              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4359              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4360              		.file 68 "armwave.h"
 4361              		.file 69 "/usr/include/stdlib.h"
 4362              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4363              		.file 71 "/usr/include/assert.h"
 4364              		.file 72 "<built-in>"
 4365              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
