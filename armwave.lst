   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C0C19FE5 		ldr	ip, .L27	@ tmp318,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 130 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp216, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp218, tmp216,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 130 view .LVU41
 279 00c8 950305E0 		mul	r5, r5, r3	@ _7, g_armwave_state.bitdepth_height, tmp218
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 610000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 5F00000A 		beq	.L11		@,
 289 00dc 043040E2 		sub	r3, r0, #4	@ tmp317, slice_y,
 290 00e0 0C308DE5 		str	r3, [sp, #12]	@ tmp317, %sfp
 291              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 292              		.loc 1 79 11 view .LVU45
 293 00e4 0030A0E3 		mov	r3, #0	@ w,
 294 00e8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 295              	.LVL8:
 296              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 297              		.loc 1 80 9 is_stmt 1 view .LVU46
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 298              		.loc 1 84 9 view .LVU47
 299              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 64 is_stmt 0 view .LVU48
 301 00ec 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 302 00f0 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 303 00f4 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp317, %sfp
 304 00f8 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 305 00fc 93E223E0 		mla	r3, r3, r2, lr	@ tmp228, g_armwave_state.wave_stride, w, tmp317
 306              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 84 16 view .LVU49
 308 0100 0000A0E3 		mov	r0, #0	@ yy,
 309 0104 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 310 0108 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 311              	.LVL9:
 312              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 313              		.loc 1 87 13 is_stmt 1 view .LVU50
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 314              		.loc 1 101 17 view .LVU51
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 315              		.loc 1 106 17 view .LVU52
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 316              		.loc 1 101 17 view .LVU53
 317              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 318              		.loc 1 101 17 view .LVU55
 319              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 320              		.loc 1 101 17 view .LVU57
 321              		.loc 1 106 17 view .LVU58
 322              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 323              		.loc 1 87 18 is_stmt 0 view .LVU59
 324 010c 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 325              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 326              		.loc 1 102 34 view .LVU60
 327 0110 019080E2 		add	r9, r0, #1	@ tmp259, yy,
 328 0114 028080E2 		add	r8, r0, #2	@ tmp281, yy,
 329              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 330              		.loc 1 87 18 view .LVU61
 331 0118 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _185, offset: 0B]
 332              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 102 34 view .LVU62
 334 011c 037080E2 		add	r7, r0, #3	@ tmp301, yy,
 335              	.LVL10:
 336              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 337              		.loc 1 94 20 view .LVU63
 338 0120 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 339              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 340              		.loc 1 87 18 view .LVU64
 341 0124 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 342              	.LVL11:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 343              		.loc 1 89 13 is_stmt 1 view .LVU65
  91:armwave.c     ****                 
 344              		.loc 1 91 17 view .LVU66
  94:armwave.c     ****                     continue;
 345              		.loc 1 94 17 view .LVU67
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 is_stmt 0 view .LVU68
 348 0128 0120A003 		moveq	r2, #1	@ tmp231,
 349 012c 0020A013 		movne	r2, #0	@ tmp231,
 350              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 351              		.loc 1 94 19 view .LVU69
 352 0130 FF005AE3 		cmp	r10, #255	@ scale_value,
 353 0134 01208203 		orreq	r2, r2, #1	@,, tmp236, tmp231
 354 0138 000052E3 		cmp	r2, #0	@ tmp236,
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU70
 357 013c 05B08AE0 		add	fp, r10, r5	@ tmp244, scale_value, _7
 358              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 359              		.loc 1 107 22 view .LVU71
 360 0140 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 361 0144 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 362              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 363              		.loc 1 94 19 view .LVU72
 364 0148 3900001A 		bne	.L20		@,
 365              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 366              		.loc 1 102 34 view .LVU73
 367 014c 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 369              		.loc 1 106 47 view .LVU74
 370 0150 40609CE5 		ldr	r6, [ip, #64]	@ tmp330, g_armwave_state.bitdepth_height
 371              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 372              		.loc 1 94 20 view .LVU75
 373 0154 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 374              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 375              		.loc 1 102 34 view .LVU76
 376 0158 920002E0 		mul	r2, r2, r0	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 377              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 378              		.loc 1 106 47 view .LVU77
 379 015c 05A084E0 		add	r10, r4, r5	@ tmp266, scale_value, _7
 380              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 381              		.loc 1 102 74 view .LVU78
 382 0160 2228A0E1 		lsr	r2, r2, #16	@ tmp240, tmp238,
 383              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 384              		.loc 1 106 47 view .LVU79
 385 0164 96B222E0 		mla	r2, r6, r2, fp	@ tmp245, tmp330, tmp240, tmp244
 386              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 387              		.loc 1 94 20 view .LVU80
 388 0168 01B0A003 		moveq	fp, #1	@ tmp252,
 389 016c 00B0A013 		movne	fp, #0	@ tmp252,
 390              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 391              		.loc 1 94 19 view .LVU81
 392 0170 FF0054E3 		cmp	r4, #255	@ scale_value,
 393 0174 0B40A011 		movne	r4, fp	@, tmp257, tmp252
 394 0178 01408B03 		orreq	r4, fp, #1	@,, tmp257, tmp252
 395              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 396              		.loc 1 106 47 view .LVU82
 397 017c 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_79, *_79
 398              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 399              		.loc 1 94 19 view .LVU83
 400 0180 000054E3 		cmp	r4, #0	@ tmp257,
 401              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 402              		.loc 1 106 47 view .LVU84
 403 0184 01B08BE2 		add	fp, fp, #1	@ tmp248, *_79,
 404 0188 02B0C1E7 		strb	fp, [r1, r2]	@ tmp248, *_79
 405              	.LVL12:
 406              		.loc 1 107 17 is_stmt 1 view .LVU85
  91:armwave.c     ****                 
 407              		.loc 1 91 17 view .LVU86
  94:armwave.c     ****                     continue;
 408              		.loc 1 94 17 view .LVU87
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 is_stmt 0 view .LVU88
 411 018c 2800001A 		bne	.L20		@,
 412              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 413              		.loc 1 102 34 view .LVU89
 414 0190 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 99 view .LVU90
 417 0194 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 418              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 419              		.loc 1 94 20 view .LVU91
 420 0198 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 421              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 422              		.loc 1 102 34 view .LVU92
 423 019c 920909E0 		mul	r9, r2, r9	@ tmp260, g_armwave_state.cmp_x_bitdepth_scale, tmp259
 424              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 425              		.loc 1 94 20 view .LVU93
 426 01a0 0120A003 		moveq	r2, #1	@ tmp274,
 427 01a4 0020A013 		movne	r2, #0	@ tmp274,
 428              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 429              		.loc 1 102 74 view .LVU94
 430 01a8 2998A0E1 		lsr	r9, r9, #16	@ tmp262, tmp260,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU95
 433 01ac 05408EE0 		add	r4, lr, r5	@ tmp288, scale_value, _7
 434 01b0 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp267, g_armwave_state.bitdepth_height, tmp262, tmp266
 435              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 19 view .LVU96
 437 01b4 FF005EE3 		cmp	lr, #255	@ scale_value,
 438 01b8 02E0A011 		movne	lr, r2	@, tmp279, tmp274
 439 01bc 01E08203 		orreq	lr, r2, #1	@,, tmp279, tmp274
 440 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 441              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 442              		.loc 1 106 47 view .LVU97
 443 01c4 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_110, *_110
 444 01c8 012082E2 		add	r2, r2, #1	@ tmp270, *_110,
 445 01cc 0A20C1E7 		strb	r2, [r1, r10]	@ tmp270, *_110
 446              		.loc 1 107 17 is_stmt 1 view .LVU98
 447              	.LVL13:
  91:armwave.c     ****                 
 448              		.loc 1 91 17 view .LVU99
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 17 view .LVU100
 450              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 451              		.loc 1 94 19 is_stmt 0 view .LVU101
 452 01d0 1700001A 		bne	.L20		@,
 453              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 454              		.loc 1 102 34 view .LVU102
 455 01d4 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 456              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 20 view .LVU103
 458 01d8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 459              	.LVL14:
 460              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 461              		.loc 1 106 47 view .LVU104
 462 01dc 032085E0 		add	r2, r5, r3	@ tmp309, _7, word
 463              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 464              		.loc 1 102 34 view .LVU105
 465 01e0 9E0808E0 		mul	r8, lr, r8	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 99 view .LVU106
 468 01e4 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 74 view .LVU107
 471 01e8 2888A0E1 		lsr	r8, r8, #16	@ tmp284, tmp282,
 472              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 473              		.loc 1 106 47 view .LVU108
 474 01ec 9E4828E0 		mla	r8, lr, r8, r4	@ tmp289, g_armwave_state.bitdepth_height, tmp284, tmp288
 475              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 476              		.loc 1 94 20 view .LVU109
 477 01f0 01E0A003 		moveq	lr, #1	@ tmp295,
 478 01f4 00E0A013 		movne	lr, #0	@ tmp295,
 479              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 480              		.loc 1 94 19 view .LVU110
 481 01f8 FF0053E3 		cmp	r3, #255	@ word,
 482 01fc 01E08E03 		orreq	lr, lr, #1	@,, tmp300, tmp295
 483              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 484              		.loc 1 106 47 view .LVU111
 485 0200 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_141, *_141
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 19 view .LVU112
 488 0204 00005EE3 		cmp	lr, #0	@ tmp300,
 489              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 490              		.loc 1 106 47 view .LVU113
 491 0208 013083E2 		add	r3, r3, #1	@ tmp292, *_141,
 492 020c 0830C1E7 		strb	r3, [r1, r8]	@ tmp292, *_141
 493              		.loc 1 107 17 is_stmt 1 view .LVU114
 494              	.LVL15:
  91:armwave.c     ****                 
 495              		.loc 1 91 17 view .LVU115
  94:armwave.c     ****                     continue;
 496              		.loc 1 94 17 view .LVU116
 497              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 498              		.loc 1 94 19 is_stmt 0 view .LVU117
 499 0210 0700001A 		bne	.L20		@,
 500              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 501              		.loc 1 102 34 view .LVU118
 502 0214 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 99 view .LVU119
 505 0218 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 34 view .LVU120
 508 021c 930707E0 		mul	r7, r3, r7	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 74 view .LVU121
 511 0220 2778A0E1 		lsr	r7, r7, #16	@ tmp305, tmp303,
 512              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 513              		.loc 1 106 47 view .LVU122
 514 0224 9E2727E0 		mla	r7, lr, r7, r2	@ tmp310, g_armwave_state.bitdepth_height, tmp305, tmp309
 515 0228 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_172, *_172
 516 022c 013083E2 		add	r3, r3, #1	@ tmp313, *_172,
 517 0230 0730C1E7 		strb	r3, [r1, r7]	@ tmp313, *_172
 518              		.loc 1 107 17 is_stmt 1 view .LVU123
 519              	.LVL16:
 520              	.L20:
 521              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 522              		.loc 1 84 9 is_stmt 0 view .LVU124
 523 0234 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 37 view .LVU125
 526 0238 040080E2 		add	r0, r0, #4	@ yy, yy,
 527              	.LVL17:
 528              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 529              		.loc 1 84 9 view .LVU126
 530 023c 000053E1 		cmp	r3, r0	@ height, yy
 531 0240 B1FFFF8A 		bhi	.L17		@,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 44 view .LVU127
 534 0244 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 5 view .LVU128
 537 0248 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU129
 540 024c 012082E2 		add	r2, r2, #1	@ w, w,
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 5 view .LVU130
 543 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 44 view .LVU131
 546 0254 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 547              	.LVL18:
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 view .LVU132
 550 0258 A3FFFFBA 		blt	.L18		@,
 551              	.LVL19:
 552              	.L11:
 553              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 554              		.loc 1 111 1 view .LVU133
 555 025c 14D08DE2 		add	sp, sp, #20	@,,
 556              		.cfi_def_cfa_offset 36
 557              		@ sp needed	@
 558 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 559              	.LVL20:
 560              	.L28:
 561              		.loc 1 111 1 view .LVU134
 562              		.align	2
 563              	.L27:
 564 0264 00000000 		.word	g_armwave_state
 565              		.cfi_endproc
 566              	.LFE59:
 568              		.align	2
 569              		.global	armwave_fill_pixbuf_scaled
 570              		.syntax unified
 571              		.arm
 572              		.fpu vfp
 574              	armwave_fill_pixbuf_scaled:
 575              	.LVL21:
 576              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 577              		.loc 1 173 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 581              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 582              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 583              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 584              		.loc 1 179 5 view .LVU139
 585              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 586              		.loc 1 173 1 is_stmt 0 view .LVU140
 587 0268 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 588              		.cfi_def_cfa_offset 36
 589              		.cfi_offset 4, -36
 590              		.cfi_offset 5, -32
 591              		.cfi_offset 6, -28
 592              		.cfi_offset 7, -24
 593              		.cfi_offset 8, -20
 594              		.cfi_offset 9, -16
 595              		.cfi_offset 10, -12
 596              		.cfi_offset 11, -8
 597              		.cfi_offset 14, -4
 598              	@ armwave.c:183:     assert(out_buffer != NULL);
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 181:armwave.c     ****     uint32_t offset;
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 599              		.loc 1 183 5 view .LVU141
 600 026c 000050E3 		cmp	r0, #0	@ out_buffer
 601              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 602              		.loc 1 179 15 view .LVU142
 603 0270 44619FE5 		ldr	r6, .L51	@ tmp203,
 604              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 605              		.loc 1 173 1 view .LVU143
 606 0274 0CD04DE2 		sub	sp, sp, #12	@,,
 607              		.cfi_def_cfa_offset 48
 608              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 609              		.loc 1 179 15 view .LVU144
 610 0278 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 611              	.LVL22:
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 612              		.loc 1 180 5 is_stmt 1 view .LVU145
 181:armwave.c     **** 
 613              		.loc 1 181 5 view .LVU146
 614              		.loc 1 183 5 view .LVU147
 615 027c 4900000A 		beq	.L48		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this
 186:armwave.c     ****     //memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 616              		.loc 1 188 5 view .LVU148
 617              	@ armwave.c:188:     npix = g_armwave_state.target_width * 256; 
 618              		.loc 1 188 10 is_stmt 0 view .LVU149
 619 0280 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 620 0284 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 621              	.LVL23:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 622              		.loc 1 191 5 is_stmt 1 view .LVU150
 623              		.loc 1 191 5 is_stmt 0 view .LVU151
 624 0288 000058E3 		cmp	r8, #0	@ npix,
 625 028c 0C0000DA 		ble	.L29		@,
 626              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 193:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 194:armwave.c     ****         // most normal waveforms.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 4; w++) {
 199:armwave.c     ****                 value = wave_word & 0xff;
 200:armwave.c     ****                 wave_word >>= 8;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 627              		.loc 1 204 52 view .LVU152
 628 0290 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 629              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 630              		.loc 1 203 52 view .LVU153
 631 0294 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 632              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // Do line scaling as necessary.
 215:armwave.c     ****                     /*
 216:armwave.c     ****                     nsub = n + w;
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 221:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                     */
 225:armwave.c     **** 
 226:armwave.c     ****                     nsub = n + w;
 227:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 633              		.loc 1 227 57 view .LVU154
 634 0298 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 635              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 204 52 view .LVU155
 637 029c 00308DE5 		str	r3, [sp]	@ _10, %sfp
 638              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 639              		.loc 1 205 52 view .LVU156
 640 02a0 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 641              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 642              		.loc 1 191 11 view .LVU157
 643 02a4 0010A0E3 		mov	r1, #0	@ n,
 644              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 645              		.loc 1 205 52 view .LVU158
 646 02a8 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 647              	.LVL24:
 648              	.L36:
 195:armwave.c     **** 
 649              		.loc 1 195 9 is_stmt 1 view .LVU159
 650              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 651              		.loc 1 195 19 is_stmt 0 view .LVU160
 652 02ac 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 653              	.LVL25:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 654              		.loc 1 197 9 is_stmt 1 view .LVU161
 655              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 656              		.loc 1 197 11 is_stmt 0 view .LVU162
 657 02b0 000053E3 		cmp	r3, #0	@ wave_word,
 658 02b4 0400001A 		bne	.L49		@,
 659              	.L32:
 660              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 661              		.loc 1 191 28 view .LVU163
 662 02b8 041081E2 		add	r1, r1, #4	@ n, n,
 663              	.LVL26:
 664              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 665              		.loc 1 191 5 view .LVU164
 666 02bc 010058E1 		cmp	r8, r1	@ npix, n
 667 02c0 F9FFFFCA 		bgt	.L36		@,
 668              	.LVL27:
 669              	.L29:
 670              	@ armwave.c:239: }
 228:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 229:armwave.c     ****                     xx = (nsub >> 8);
 230:armwave.c     **** 
 231:armwave.c     ****                     for(y = yy; y < ye; y++) {
 232:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 233:armwave.c     ****                         *(out_buffer_base + offset) = word;
 234:armwave.c     ****                     }
 235:armwave.c     ****                 }
 236:armwave.c     ****             }
 237:armwave.c     ****         }
 238:armwave.c     ****     }
 239:armwave.c     **** }
 671              		.loc 1 239 1 view .LVU165
 672 02c4 0CD08DE2 		add	sp, sp, #12	@,,
 673              		.cfi_remember_state
 674              		.cfi_def_cfa_offset 36
 675              		@ sp needed	@
 676 02c8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 677              	.LVL28:
 678              	.L49:
 679              		.cfi_restore_state
 680              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 681              		.loc 1 202 19 view .LVU166
 682 02cc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 683              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 684              		.loc 1 198 19 view .LVU167
 685 02d0 0070A0E3 		mov	r7, #0	@ w,
 686              	.LVL29:
 199:armwave.c     ****                 wave_word >>= 8;
 687              		.loc 1 199 17 is_stmt 1 view .LVU168
 200:armwave.c     **** 
 688              		.loc 1 200 17 view .LVU169
 689              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 690              		.loc 1 200 27 is_stmt 0 view .LVU170
 691 02d4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 692              	.LVL30:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 693              		.loc 1 202 17 is_stmt 1 view .LVU171
 694              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 695              		.loc 1 202 19 is_stmt 0 view .LVU172
 696 02d8 0500001A 		bne	.L50		@,
 697              	.L33:
 698              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 699              		.loc 1 198 32 view .LVU173
 700 02dc 017087E2 		add	r7, r7, #1	@ w, w,
 701              	.LVL31:
 702              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 703              		.loc 1 198 13 view .LVU174
 704 02e0 040057E3 		cmp	r7, #4	@ w,
 705 02e4 F3FFFF0A 		beq	.L32		@,
 199:armwave.c     ****                 wave_word >>= 8;
 706              		.loc 1 199 17 is_stmt 1 view .LVU175
 707              	.LVL32:
 200:armwave.c     **** 
 708              		.loc 1 200 17 view .LVU176
 709              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 710              		.loc 1 202 19 is_stmt 0 view .LVU177
 711 02e8 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 712              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 713              		.loc 1 200 27 view .LVU178
 714 02ec 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 715              	.LVL33:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 716              		.loc 1 202 17 is_stmt 1 view .LVU179
 717              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 718              		.loc 1 202 19 is_stmt 0 view .LVU180
 719 02f0 F9FFFF0A 		beq	.L33		@,
 720              	.L50:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 721              		.loc 1 203 21 is_stmt 1 view .LVU181
 722              	.LVL34:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 723              		.loc 1 204 21 view .LVU182
 205:armwave.c     **** 
 724              		.loc 1 205 21 view .LVU183
 207:armwave.c     ****                     g = MIN(gg, 255);
 725              		.loc 1 207 21 view .LVU184
 208:armwave.c     ****                     b = MIN(bb, 255);
 726              		.loc 1 208 21 view .LVU185
 209:armwave.c     **** 
 727              		.loc 1 209 21 view .LVU186
 212:armwave.c     **** 
 728              		.loc 1 212 21 view .LVU187
 729              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 730              		.loc 1 205 55 is_stmt 0 view .LVU188
 731 02f4 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 732 02f8 075081E0 		add	r5, r1, r7	@ _120, n, w
 733 02fc 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 734              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 735              		.loc 1 227 32 view .LVU189
 736 0300 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 737              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 738              		.loc 1 228 41 view .LVU190
 739 0304 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 740              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 741              		.loc 1 227 40 view .LVU191
 742 0308 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 743              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 744              		.loc 1 228 41 view .LVU192
 745 030c 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 746              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 747              		.loc 1 204 55 view .LVU193
 748 0310 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 749              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 750              		.loc 1 205 24 view .LVU194
 751 0314 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 752              	.LVL35:
 753              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 754              		.loc 1 227 40 view .LVU195
 755 0318 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 756              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 757              		.loc 1 228 46 view .LVU196
 758 031c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 759              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 760              		.loc 1 204 55 view .LVU197
 761 0320 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 762              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 763              		.loc 1 203 55 view .LVU198
 764 0324 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 765              	.LVL36:
 766              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 767              		.loc 1 209 25 view .LVU199
 768 0328 FF005AE3 		cmp	r10, #255	@ bb,
 769              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 770              		.loc 1 204 24 view .LVU200
 771 032c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 772              	.LVL37:
 773              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 774              		.loc 1 227 40 view .LVU201
 775 0330 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 776              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 777              		.loc 1 228 46 view .LVU202
 778 0334 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 779              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 780              		.loc 1 203 24 view .LVU203
 781 0338 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 782              	.LVL38:
 783              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 784              		.loc 1 209 25 view .LVU204
 785 033c FFA0A0A3 		movge	r10, #255	@ bb,
 786              	.LVL39:
 787              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 788              		.loc 1 208 25 view .LVU205
 789 0340 FF0054E3 		cmp	r4, #255	@ gg,
 790 0344 FF40A0A3 		movge	r4, #255	@ gg,
 791              	.LVL40:
 792              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 793              		.loc 1 207 25 view .LVU206
 794 0348 FF005CE3 		cmp	ip, #255	@ rr,
 795              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 796              		.loc 1 212 56 view .LVU207
 797 034c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 798              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 799              		.loc 1 227 24 view .LVU208
 800 0350 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 801              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 802              		.loc 1 207 25 view .LVU209
 803 0354 FFC0A0A3 		movge	ip, #255	@ rr,
 804              	.LVL41:
 805              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 806              		.loc 1 212 44 view .LVU210
 807 0358 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 808 035c FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 809              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 810              		.loc 1 212 56 view .LVU211
 811 0360 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 812              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 813              		.loc 1 212 51 view .LVU212
 814 0364 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 815              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 816              		.loc 1 212 62 view .LVU213
 817 0368 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 818 036c 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 819              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 820              		.loc 1 227 24 view .LVU214
 821 0370 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 822              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 823              		.loc 1 228 24 view .LVU215
 824 0374 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 825              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 826              		.loc 1 212 26 view .LVU216
 827 0378 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 828              	.LVL42:
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 829              		.loc 1 226 21 is_stmt 1 view .LVU217
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 830              		.loc 1 227 21 view .LVU218
 228:armwave.c     ****                     xx = (nsub >> 8);
 831              		.loc 1 228 21 view .LVU219
 832              	@ armwave.c:229:                     xx = (nsub >> 8);
 229:armwave.c     **** 
 833              		.loc 1 229 32 is_stmt 0 view .LVU220
 834 037c 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 835              	.LVL43:
 836              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 837              		.loc 1 228 24 view .LVU221
 838 0380 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 839              	.LVL44:
 229:armwave.c     **** 
 840              		.loc 1 229 21 is_stmt 1 view .LVU222
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 841              		.loc 1 231 21 view .LVU223
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 842              		.loc 1 231 21 is_stmt 0 view .LVU224
 843 0384 090052E1 		cmp	r2, r9	@ yy, ye
 844 0388 D3FFFF2A 		bcs	.L33		@,
 845              	.LVL45:
 846              	.L34:
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 847              		.loc 1 232 25 is_stmt 1 discriminator 3 view .LVU225
 233:armwave.c     ****                     }
 848              		.loc 1 233 25 discriminator 3 view .LVU226
 849              	@ armwave.c:232:                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 850              		.loc 1 232 43 is_stmt 0 discriminator 3 view .LVU227
 851 038c 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 852              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 853              		.loc 1 233 43 discriminator 3 view .LVU228
 854 0390 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 855              	.LVL46:
 856              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 857              		.loc 1 231 42 discriminator 3 view .LVU229
 858 0394 012082E2 		add	r2, r2, #1	@ yy, yy,
 859              	.LVL47:
 860              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 861              		.loc 1 231 21 discriminator 3 view .LVU230
 862 0398 020059E1 		cmp	r9, r2	@ ye, yy
 863              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 864              		.loc 1 233 53 discriminator 3 view .LVU231
 865 039c 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 866              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 867              		.loc 1 231 21 discriminator 3 view .LVU232
 868 03a0 F9FFFF1A 		bne	.L34		@,
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 869              		.loc 1 231 21 discriminator 3 view .LVU233
 870 03a4 CCFFFFEA 		b	.L33		@
 871              	.LVL48:
 872              	.L48:
 183:armwave.c     **** 
 873              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU234
 874 03a8 10309FE5 		ldr	r3, .L51+4	@,
 875 03ac B720A0E3 		mov	r2, #183	@,
 876 03b0 0C109FE5 		ldr	r1, .L51+8	@,
 877 03b4 0C009FE5 		ldr	r0, .L51+12	@,
 878              	.LVL49:
 183:armwave.c     **** 
 879              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU235
 880 03b8 FEFFFFEB 		bl	__assert_fail		@
 881              	.LVL50:
 882              	.L52:
 183:armwave.c     **** 
 883              		.loc 1 183 5 discriminator 1 view .LVU236
 884              		.align	2
 885              	.L51:
 886 03bc 00000000 		.word	g_armwave_state
 887 03c0 00000000 		.word	.LANCHOR0
 888 03c4 20000000 		.word	.LC2
 889 03c8 2C000000 		.word	.LC3
 890              		.cfi_endproc
 891              	.LFE60:
 893              		.global	__aeabi_idiv
 894              		.align	2
 895              		.global	armwave_generate
 896              		.syntax unified
 897              		.arm
 898              		.fpu vfp
 900              	armwave_generate:
 901              	.LFB61:
 240:armwave.c     **** 
 241:armwave.c     **** /*
 242:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 243:armwave.c     ****  */
 244:armwave.c     **** void armwave_generate()
 245:armwave.c     **** {
 902              		.loc 1 245 1 is_stmt 1 view -0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 16
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 246:armwave.c     ****     uint32_t yy;
 906              		.loc 1 246 5 view .LVU238
 247:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 907              		.loc 1 247 5 view .LVU239
 908              	.LVL51:
 248:armwave.c     **** 
 249:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 909              		.loc 1 249 5 view .LVU240
 910              	@ armwave.c:245: {
 245:armwave.c     ****     uint32_t yy;
 911              		.loc 1 245 1 is_stmt 0 view .LVU241
 912 03cc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 913              		.cfi_def_cfa_offset 36
 914              		.cfi_offset 4, -36
 915              		.cfi_offset 5, -32
 916              		.cfi_offset 6, -28
 917              		.cfi_offset 7, -24
 918              		.cfi_offset 8, -20
 919              		.cfi_offset 9, -16
 920              		.cfi_offset 10, -12
 921              		.cfi_offset 11, -8
 922              		.cfi_offset 14, -4
 923              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 924              		.loc 1 249 5 view .LVU242
 925 03d0 0010A0E3 		mov	r1, #0	@,
 926              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 927              		.loc 1 249 58 view .LVU243
 928 03d4 10829FE5 		ldr	r8, .L72	@ tmp340,
 929              	@ armwave.c:245: {
 245:armwave.c     ****     uint32_t yy;
 930              		.loc 1 245 1 view .LVU244
 931 03d8 14D04DE2 		sub	sp, sp, #20	@,,
 932              		.cfi_def_cfa_offset 56
 933              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 934              		.loc 1 249 5 view .LVU245
 935 03dc 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 936 03e0 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 937 03e4 FEFFFFEB 		bl	memset		@
 938              	.LVL52:
 250:armwave.c     **** 
 251:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 939              		.loc 1 251 5 is_stmt 1 view .LVU246
 940              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 941              		.loc 1 251 68 is_stmt 0 view .LVU247
 942 03e8 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 943              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 944              		.loc 1 251 38 view .LVU248
 945 03ec 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 946              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 947              		.loc 1 251 51 view .LVU249
 948 03f0 0310A0E1 		mov	r1, r3	@, _34
 949 03f4 0500A0E1 		mov	r0, r5	@, prephitmp_217
 950              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 951              		.loc 1 251 68 view .LVU250
 952 03f8 00308DE5 		str	r3, [sp]	@ _34, %sfp
 953              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 954              		.loc 1 251 51 view .LVU251
 955 03fc FEFFFFEB 		bl	__aeabi_idiv		@
 956              	.LVL53:
 957              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 958              		.loc 1 251 5 view .LVU252
 959 0400 000050E3 		cmp	r0, #0	@,
 960 0404 7600000A 		beq	.L53		@,
 961 0408 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 962              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 963              		.loc 1 251 12 view .LVU253
 964 040c 0030A0E3 		mov	r3, #0	@ yy,
 965 0410 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 966              	.LVL54:
 967              	.L62:
 252:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 253:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 254:armwave.c     **** 
 255:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 968              		.loc 1 255 9 is_stmt 1 discriminator 3 view .LVU254
 969 0414 D020CDE1 		ldrd	r2, [sp]	@, %sfp
 970              	.LBB10:
 971              	.LBB11:
 972              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 973              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU255
 974 0418 40C098E5 		ldr	ip, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 975              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 976              		.loc 1 79 5 discriminator 3 view .LVU256
 977 041c 000054E3 		cmp	r4, #0	@ prephitmp_227,
 978              	.LBE11:
 979              	.LBE10:
 980              	@ armwave.c:255:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 981              		.loc 1 255 9 discriminator 3 view .LVU257
 982 0420 930202E0 		mul	r2, r3, r2	@ _5, yy, _34
 983              	.LVL55:
 984              	.LBB13:
 985              	.LBI10:
  62:armwave.c     **** {
 986              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU258
 987              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 988              		.loc 1 64 5 discriminator 3 view .LVU259
  65:armwave.c     ****     uint8_t *wave_base;
 989              		.loc 1 65 5 discriminator 3 view .LVU260
  66:armwave.c     ****     uint8_t *write_buffer_base;
 990              		.loc 1 66 5 discriminator 3 view .LVU261
  67:armwave.c     ****     uint8_t *write_buffer;
 991              		.loc 1 67 5 discriminator 3 view .LVU262
  68:armwave.c     **** 
 992              		.loc 1 68 5 discriminator 3 view .LVU263
  71:armwave.c     **** 
 993              		.loc 1 71 5 discriminator 3 view .LVU264
 994              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 995              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU265
 996 0424 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 997              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 998              		.loc 1 71 40 discriminator 3 view .LVU266
 999 0428 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1000              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1001              		.loc 1 71 65 discriminator 3 view .LVU267
 1002 042c 930203E0 		mul	r3, r3, r2	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, _5
 1003              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1004              		.loc 1 71 105 discriminator 3 view .LVU268
 1005 0430 2338A0E1 		lsr	r3, r3, #16	@ tmp240, tmp238,
 1006              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1007              		.loc 1 71 130 discriminator 3 view .LVU269
 1008 0434 9C030CE0 		mul	ip, ip, r3	@ _22, g_armwave_state.bitdepth_height, tmp240
 1009              	.LVL56:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1010              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU270
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1011              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU271
 1012 0438 610000DA 		ble	.L55		@,
 1013              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1014              		.loc 1 79 11 view .LVU272
 1015 043c 0070A0E3 		mov	r7, #0	@ w,
 1016 0440 043042E2 		sub	r3, r2, #4	@ _31, _5,
 1017 0444 08308DE5 		str	r3, [sp, #8]	@ _31, %sfp
 1018              	.LVL57:
 1019              	.L61:
  80:armwave.c     **** 
 1020              		.loc 1 80 9 is_stmt 1 view .LVU273
 1021              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1022              		.loc 1 84 9 is_stmt 0 view .LVU274
 1023 0448 00209DE5 		ldr	r2, [sp]	@ _34, %sfp
 1024              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1025              		.loc 1 80 64 view .LVU275
 1026 044c 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1027              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1028              		.loc 1 84 9 view .LVU276
 1029 0450 000052E3 		cmp	r2, #0	@ _34,
 1030              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1031              		.loc 1 80 36 view .LVU277
 1032 0454 142098E5 		ldr	r2, [r8, #20]	@ _23, g_armwave_state.wave_buffer
 1033              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1034              		.loc 1 80 64 view .LVU278
 1035 0458 930703E0 		mul	r3, r3, r7	@ _27, g_armwave_state.wave_stride, w
 1036              	.LVL58:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1037              		.loc 1 84 9 is_stmt 1 view .LVU279
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1038              		.loc 1 84 9 is_stmt 0 view .LVU280
 1039 045c 5200000A 		beq	.L56		@,
 1040 0460 08009DE5 		ldr	r0, [sp, #8]	@ _31, %sfp
 1041 0464 003083E0 		add	r3, r3, r0	@ tmp246, _27, _31
 1042              	.LVL59:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1043              		.loc 1 84 9 view .LVU281
 1044 0468 036082E0 		add	r6, r2, r3	@ ivtmp.66, _23, tmp246
 1045              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1046              		.loc 1 84 16 view .LVU282
 1047 046c 0000A0E3 		mov	r0, #0	@ yy,
 1048              	.LVL60:
 1049              	.L60:
  87:armwave.c     **** 
 1050              		.loc 1 87 13 is_stmt 1 view .LVU283
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1051              		.loc 1 101 17 view .LVU284
 106:armwave.c     ****                 word >>= 8;
 1052              		.loc 1 106 17 view .LVU285
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1053              		.loc 1 101 17 view .LVU286
 106:armwave.c     ****                 word >>= 8;
 1054              		.loc 1 106 17 view .LVU287
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1055              		.loc 1 101 17 view .LVU288
 106:armwave.c     ****                 word >>= 8;
 1056              		.loc 1 106 17 view .LVU289
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1057              		.loc 1 101 17 view .LVU290
 106:armwave.c     ****                 word >>= 8;
 1058              		.loc 1 106 17 view .LVU291
 1059              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1060              		.loc 1 87 18 is_stmt 0 view .LVU292
 1061 0470 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _260, offset: 0B]
 1062              	.LVL61:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1063              		.loc 1 89 13 is_stmt 1 view .LVU293
  91:armwave.c     ****                 
 1064              		.loc 1 91 17 view .LVU294
  94:armwave.c     ****                     continue;
 1065              		.loc 1 94 17 view .LVU295
 1066              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1067              		.loc 1 102 34 is_stmt 0 view .LVU296
 1068 0474 01A080E2 		add	r10, r0, #1	@ tmp276, yy,
 1069              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1070              		.loc 1 94 20 view .LVU297
 1071 0478 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1072 047c 0120A003 		moveq	r2, #1	@ tmp248,
 1073 0480 0020A013 		movne	r2, #0	@ tmp248,
 1074              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1075              		.loc 1 94 19 view .LVU298
 1076 0484 FF0059E3 		cmp	r9, #255	@ scale_value,
 1077 0488 01208203 		orreq	r2, r2, #1	@,, tmp253, tmp248
 1078              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1079              		.loc 1 107 22 view .LVU299
 1080 048c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1081              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1082              		.loc 1 94 19 view .LVU300
 1083 0490 000052E3 		cmp	r2, #0	@ tmp253,
 1084              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1085              		.loc 1 102 34 view .LVU301
 1086 0494 025080E2 		add	r5, r0, #2	@ tmp298, yy,
 1087              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1088              		.loc 1 106 47 view .LVU302
 1089 0498 0CB089E0 		add	fp, r9, ip	@ tmp261, scale_value, _22
 1090              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1091              		.loc 1 107 22 view .LVU303
 1092 049c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1093 04a0 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1094              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1095              		.loc 1 94 19 view .LVU304
 1096 04a4 3B00001A 		bne	.L64		@,
 1097              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1098              		.loc 1 102 34 view .LVU305
 1099 04a8 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1100              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1101              		.loc 1 106 47 view .LVU306
 1102 04ac 40E098E5 		ldr	lr, [r8, #64]	@ tmp360, g_armwave_state.bitdepth_height
 1103              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1104              		.loc 1 94 20 view .LVU307
 1105 04b0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1106              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1107              		.loc 1 102 34 view .LVU308
 1108 04b4 920002E0 		mul	r2, r2, r0	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, yy
 1109              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1110              		.loc 1 106 47 view .LVU309
 1111 04b8 0C9084E0 		add	r9, r4, ip	@ tmp283, scale_value, _22
 1112              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1113              		.loc 1 102 74 view .LVU310
 1114 04bc 2228A0E1 		lsr	r2, r2, #16	@ tmp257, tmp255,
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU311
 1117 04c0 9EB222E0 		mla	r2, lr, r2, fp	@ tmp262, tmp360, tmp257, tmp261
 1118              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1119              		.loc 1 94 20 view .LVU312
 1120 04c4 01B0A003 		moveq	fp, #1	@ tmp269,
 1121 04c8 00B0A013 		movne	fp, #0	@ tmp269,
 1122              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1123              		.loc 1 94 19 view .LVU313
 1124 04cc FF0054E3 		cmp	r4, #255	@ scale_value,
 1125 04d0 0B40A011 		movne	r4, fp	@, tmp274, tmp269
 1126 04d4 01408B03 		orreq	r4, fp, #1	@,, tmp274, tmp269
 1127              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1128              		.loc 1 106 47 view .LVU314
 1129 04d8 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_90, *_90
 1130              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1131              		.loc 1 94 19 view .LVU315
 1132 04dc 000054E3 		cmp	r4, #0	@ tmp274,
 1133              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1134              		.loc 1 106 47 view .LVU316
 1135 04e0 01B08BE2 		add	fp, fp, #1	@ tmp265, *_90,
 1136 04e4 02B0C1E7 		strb	fp, [r1, r2]	@ tmp265, *_90
 1137              	.LVL62:
 107:armwave.c     ****             }
 1138              		.loc 1 107 17 is_stmt 1 view .LVU317
  91:armwave.c     ****                 
 1139              		.loc 1 91 17 view .LVU318
  94:armwave.c     ****                     continue;
 1140              		.loc 1 94 17 view .LVU319
 1141              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1142              		.loc 1 94 19 is_stmt 0 view .LVU320
 1143 04e8 2A00001A 		bne	.L64		@,
 1144              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1145              		.loc 1 102 34 view .LVU321
 1146 04ec 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1147              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1148              		.loc 1 102 99 view .LVU322
 1149 04f0 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1150              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1151              		.loc 1 94 20 view .LVU323
 1152 04f4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1153              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1154              		.loc 1 102 34 view .LVU324
 1155 04f8 920A0AE0 		mul	r10, r2, r10	@ tmp277, g_armwave_state.cmp_x_bitdepth_scale, tmp276
 1156              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1157              		.loc 1 94 20 view .LVU325
 1158 04fc FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1159 0500 0120A003 		moveq	r2, #1	@ tmp291,
 1160              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1161              		.loc 1 102 74 view .LVU326
 1162 0504 2AA8A0E1 		lsr	r10, r10, #16	@ tmp279, tmp277,
 1163              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1164              		.loc 1 94 20 view .LVU327
 1165 0508 0020A013 		movne	r2, #0	@ tmp291,
 1166              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1167              		.loc 1 106 47 view .LVU328
 1168 050c 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp284, g_armwave_state.bitdepth_height, tmp279, tmp283
 1169 0510 0C408EE0 		add	r4, lr, ip	@ tmp305, scale_value, _22
 1170              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1171              		.loc 1 94 19 view .LVU329
 1172 0514 FF005EE3 		cmp	lr, #255	@ scale_value,
 1173 0518 02E0A011 		movne	lr, r2	@, tmp296, tmp291
 1174 051c 01E08203 		orreq	lr, r2, #1	@,, tmp296, tmp291
 1175              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1176              		.loc 1 106 47 view .LVU330
 1177 0520 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_121, *_121
 1178              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1179              		.loc 1 94 19 view .LVU331
 1180 0524 00005EE3 		cmp	lr, #0	@ tmp296,
 1181              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1182              		.loc 1 106 47 view .LVU332
 1183 0528 012082E2 		add	r2, r2, #1	@ tmp287, *_121,
 1184 052c 0920C1E7 		strb	r2, [r1, r9]	@ tmp287, *_121
 107:armwave.c     ****             }
 1185              		.loc 1 107 17 is_stmt 1 view .LVU333
 1186              	.LVL63:
  91:armwave.c     ****                 
 1187              		.loc 1 91 17 view .LVU334
  94:armwave.c     ****                     continue;
 1188              		.loc 1 94 17 view .LVU335
 1189              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1190              		.loc 1 94 19 is_stmt 0 view .LVU336
 1191 0530 1800001A 		bne	.L64		@,
 1192              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1193              		.loc 1 102 34 view .LVU337
 1194 0534 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1195              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1196              		.loc 1 94 20 view .LVU338
 1197 0538 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1198              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1199              		.loc 1 106 47 view .LVU339
 1200 053c 03208CE0 		add	r2, ip, r3	@ tmp326, _22, word
 1201              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1202              		.loc 1 102 34 view .LVU340
 1203 0540 9E0505E0 		mul	r5, lr, r5	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 1204              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1205              		.loc 1 102 99 view .LVU341
 1206 0544 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1207              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1208              		.loc 1 102 74 view .LVU342
 1209 0548 2558A0E1 		lsr	r5, r5, #16	@ tmp301, tmp299,
 1210              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1211              		.loc 1 106 47 view .LVU343
 1212 054c 9E4525E0 		mla	r5, lr, r5, r4	@ tmp306, g_armwave_state.bitdepth_height, tmp301, tmp305
 1213              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1214              		.loc 1 94 20 view .LVU344
 1215 0550 01E0A003 		moveq	lr, #1	@ tmp312,
 1216 0554 00E0A013 		movne	lr, #0	@ tmp312,
 1217              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1218              		.loc 1 94 19 view .LVU345
 1219 0558 FF0053E3 		cmp	r3, #255	@ word,
 1220 055c 01E08E03 		orreq	lr, lr, #1	@,, tmp317, tmp312
 1221              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1222              		.loc 1 106 47 view .LVU346
 1223 0560 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_152, *_152
 1224              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1225              		.loc 1 94 19 view .LVU347
 1226 0564 00005EE3 		cmp	lr, #0	@ tmp317,
 1227              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1228              		.loc 1 106 47 view .LVU348
 1229 0568 013083E2 		add	r3, r3, #1	@ tmp309, *_152,
 1230 056c 0530C1E7 		strb	r3, [r1, r5]	@ tmp309, *_152
 107:armwave.c     ****             }
 1231              		.loc 1 107 17 is_stmt 1 view .LVU349
 1232              	.LVL64:
  91:armwave.c     ****                 
 1233              		.loc 1 91 17 view .LVU350
  94:armwave.c     ****                     continue;
 1234              		.loc 1 94 17 view .LVU351
 1235              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1236              		.loc 1 94 19 is_stmt 0 view .LVU352
 1237 0570 0800001A 		bne	.L64		@,
 1238              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1239              		.loc 1 102 34 view .LVU353
 1240 0574 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1241 0578 034080E2 		add	r4, r0, #3	@ tmp319, yy,
 1242              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1243              		.loc 1 102 99 view .LVU354
 1244 057c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1245              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1246              		.loc 1 102 34 view .LVU355
 1247 0580 930403E0 		mul	r3, r3, r4	@ tmp320, g_armwave_state.cmp_x_bitdepth_scale, tmp319
 1248              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1249              		.loc 1 102 74 view .LVU356
 1250 0584 2338A0E1 		lsr	r3, r3, #16	@ tmp322, tmp320,
 1251              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1252              		.loc 1 106 47 view .LVU357
 1253 0588 9E2323E0 		mla	r3, lr, r3, r2	@ tmp327, g_armwave_state.bitdepth_height, tmp322, tmp326
 1254 058c 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_183, *_183
 1255 0590 012082E2 		add	r2, r2, #1	@ tmp330, *_183,
 1256 0594 0320C1E7 		strb	r2, [r1, r3]	@ tmp330, *_183
 107:armwave.c     ****             }
 1257              		.loc 1 107 17 is_stmt 1 view .LVU358
 1258              	.LVL65:
 1259              	.L64:
 1260              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1261              		.loc 1 84 9 is_stmt 0 view .LVU359
 1262 0598 00309DE5 		ldr	r3, [sp]	@ _34, %sfp
 1263              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1264              		.loc 1 84 37 view .LVU360
 1265 059c 040080E2 		add	r0, r0, #4	@ yy, yy,
 1266              	.LVL66:
 1267              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1268              		.loc 1 84 9 view .LVU361
 1269 05a0 000053E1 		cmp	r3, r0	@ _34, yy
 1270 05a4 B1FFFF8A 		bhi	.L60		@,
 1271 05a8 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 1272              	.LVL67:
 1273              	.L56:
 1274              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1275              		.loc 1 79 44 view .LVU362
 1276 05ac 017087E2 		add	r7, r7, #1	@ w, w,
 1277              	.LVL68:
 1278              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1279              		.loc 1 79 5 view .LVU363
 1280 05b0 040057E1 		cmp	r7, r4	@ w, prephitmp_227
 1281 05b4 A3FFFFBA 		blt	.L61		@,
 1282 05b8 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 1283 05bc 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 1284 05c0 00308DE5 		str	r3, [sp]	@ _34, %sfp
 1285              	.LVL69:
 1286              	.L55:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1287              		.loc 1 79 5 view .LVU364
 1288              	.LBE12:
 1289              	.LBE13:
 256:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1290              		.loc 1 256 9 is_stmt 1 discriminator 3 view .LVU365
 257:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1291              		.loc 1 257 9 discriminator 3 view .LVU366
 1292              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1293              		.loc 1 251 51 is_stmt 0 discriminator 3 view .LVU367
 1294 05c4 00109DE5 		ldr	r1, [sp]	@, %sfp
 1295              	.LVL70:
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1296              		.loc 1 251 51 discriminator 3 view .LVU368
 1297 05c8 0500A0E1 		mov	r0, r5	@, prephitmp_217
 1298 05cc FEFFFFEB 		bl	__aeabi_idiv		@
 1299              	.LVL71:
 1300              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1301              		.loc 1 251 86 discriminator 3 view .LVU369
 1302 05d0 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1303 05d4 013083E2 		add	r3, r3, #1	@ yy, yy,
 1304 05d8 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1305              	.LVL72:
 1306              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1307              		.loc 1 251 5 discriminator 3 view .LVU370
 1308 05dc 030050E1 		cmp	r0, r3	@, yy
 1309 05e0 8BFFFF8A 		bhi	.L62		@,
 1310              	.LVL73:
 1311              	.L53:
 1312              	@ armwave.c:261: }
 258:armwave.c     ****     }
 259:armwave.c     **** 
 260:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 261:armwave.c     **** }
 1313              		.loc 1 261 1 view .LVU371
 1314 05e4 14D08DE2 		add	sp, sp, #20	@,,
 1315              		.cfi_def_cfa_offset 36
 1316              		@ sp needed	@
 1317 05e8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1318              	.L73:
 1319              		.align	2
 1320              	.L72:
 1321 05ec 00000000 		.word	g_armwave_state
 1322              		.cfi_endproc
 1323              	.LFE61:
 1325              		.align	2
 1326              		.global	armwave_setup_render
 1327              		.syntax unified
 1328              		.arm
 1329              		.fpu vfp
 1331              	armwave_setup_render:
 1332              	.LVL74:
 1333              	.LFB62:
 262:armwave.c     **** 
 263:armwave.c     **** /*
 264:armwave.c     ****  * Setup the renderer with passed parameters.
 265:armwave.c     ****  */
 266:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 267:armwave.c     **** {
 1334              		.loc 1 267 1 is_stmt 1 view -0
 1335              		.cfi_startproc
 1336              		@ args = 12, pretend = 0, frame = 0
 1337              		@ frame_needed = 0, uses_anonymous_args = 0
 268:armwave.c     ****     uint32_t length, xx;
 1338              		.loc 1 268 5 view .LVU373
 269:armwave.c     ****     float points_per_pixel;
 1339              		.loc 1 269 5 view .LVU374
 270:armwave.c     **** 
 271:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1340              		.loc 1 271 5 view .LVU375
 1341              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t length, xx;
 1342              		.loc 1 267 1 is_stmt 0 view .LVU376
 1343 05f0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1344              		.cfi_def_cfa_offset 28
 1345              		.cfi_offset 4, -28
 1346              		.cfi_offset 5, -24
 1347              		.cfi_offset 6, -20
 1348              		.cfi_offset 7, -16
 1349              		.cfi_offset 8, -12
 1350              		.cfi_offset 9, -8
 1351              		.cfi_offset 14, -4
 1352 05f4 028B2DED 		vpush.64	{d8}	@
 1353              		.cfi_def_cfa_offset 36
 1354              		.cfi_offset 80, -36
 1355              		.cfi_offset 81, -32
 1356 05f8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1357 05fc 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1358 0600 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1359 0604 14D04DE2 		sub	sp, sp, #20	@,,
 1360              		.cfi_def_cfa_offset 56
 1361              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t length, xx;
 1362              		.loc 1 267 1 view .LVU377
 1363 0608 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1364 060c D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1365 0610 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1366              	@ armwave.c:271:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1367              		.loc 1 271 5 view .LVU378
 1368 0614 00308DE5 		str	r3, [sp]	@ wave_stride,
 1369 0618 F460CDE1 		strd	r6, [sp, #4]	@,,
 1370 061c 0230A0E1 		mov	r3, r2	@, waves_max
 1371              	.LVL75:
 1372              		.loc 1 271 5 view .LVU379
 1373 0620 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1374 0624 0120A0E1 		mov	r2, r1	@, end_point
 1375              	.LVL76:
 1376              		.loc 1 271 5 view .LVU380
 1377 0628 0010A0E1 		mov	r1, r0	@, start_point
 1378              	.LVL77:
 1379              		.loc 1 271 5 view .LVU381
 1380 062c DC019FE5 		ldr	r0, .L88+12	@,
 1381              	.LVL78:
 1382              		.loc 1 271 5 view .LVU382
 1383 0630 FEFFFFEB 		bl	printf		@
 1384              	.LVL79:
 272:armwave.c     **** 
 273:armwave.c     ****     // TODO these asserts should instead raise PyExc
 274:armwave.c     ****     assert(start_point < end_point);
 1385              		.loc 1 274 5 is_stmt 1 view .LVU383
 1386 0634 050054E1 		cmp	r4, r5	@ start_point, end_point
 1387 0638 6200002A 		bcs	.L85		@,
 275:armwave.c     **** 
 276:armwave.c     ****     /*
 277:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 278:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 279:armwave.c     **** 
 280:armwave.c     ****     if(target_height == 256) {
 281:armwave.c     ****         g_armwave_state.row_shift = 8;
 282:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 283:armwave.c     ****     } else if(target_height == 512) {
 284:armwave.c     ****         g_armwave_state.row_shift = 9;
 285:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 286:armwave.c     ****     } else if(target_height == 1024) {
 287:armwave.c     ****         g_armwave_state.row_shift = 10;
 288:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 289:armwave.c     ****     } else if(target_height == 2048) {
 290:armwave.c     ****         g_armwave_state.row_shift = 11;
 291:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 292:armwave.c     ****     }
 293:armwave.c     ****     */
 294:armwave.c     **** 
 295:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 296:armwave.c     ****     g_armwave_state.xstride = target_height;
 1388              		.loc 1 296 5 view .LVU384
 1389              	@ armwave.c:307:     g_armwave_state.wave_length = end_point - start_point;
 297:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 298:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 299:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 300:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 301:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 302:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 303:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 304:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 305:armwave.c     ****     g_armwave_state.target_width = target_width;
 306:armwave.c     ****     g_armwave_state.target_height = target_height;
 307:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1390              		.loc 1 307 45 is_stmt 0 view .LVU385
 1391 063c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1392              	.LVL80:
 1393              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1394              		.loc 1 297 49 view .LVU386
 1395 0640 6F6A9FED 		vldr.32	s12, .L88	@ tmp175,
 1396              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 308:armwave.c     **** 
 309:armwave.c     ****     // Calculate compound scaler
 310:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 311:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1397              		.loc 1 311 48 view .LVU387
 1398 0644 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1399              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1400              		.loc 1 311 79 view .LVU388
 1401 0648 6E6ADFED 		vldr.32	s13, .L88+4	@ tmp199,
 1402              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1403              		.loc 1 304 90 view .LVU389
 1404 064c 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1405              	@ armwave.c:296:     g_armwave_state.xstride = target_height;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1406              		.loc 1 296 29 view .LVU390
 1407 0650 BC419FE5 		ldr	r4, .L88+16	@ tmp241,
 1408              	.LVL81:
 1409              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1410              		.loc 1 311 48 view .LVU391
 1411 0654 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1412              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1413              		.loc 1 297 49 view .LVU392
 1414 0658 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1415              	@ armwave.c:302:     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1416              		.loc 1 302 42 view .LVU393
 1417 065c 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1418              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1419              		.loc 1 304 74 view .LVU394
 1420 0660 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1421              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1422              		.loc 1 297 49 view .LVU395
 1423 0664 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1424              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1425              		.loc 1 311 48 view .LVU396
 1426 0668 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1427              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 312:armwave.c     **** 
 313:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1428              		.loc 1 313 5 view .LVU397
 1429 066c 04508DE5 		str	r5, [sp, #4]	@ _13,
 1430 0670 00608DE5 		str	r6, [sp]	@ target_width,
 1431              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1432              		.loc 1 304 74 view .LVU398
 1433 0674 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1434              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1435              		.loc 1 311 48 view .LVU399
 1436 0678 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1437              	@ armwave.c:296:     g_armwave_state.xstride = target_height;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1438              		.loc 1 296 29 view .LVU400
 1439 067c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1440              		.loc 1 297 5 is_stmt 1 view .LVU401
 1441              	@ armwave.c:306:     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1442              		.loc 1 306 35 is_stmt 0 view .LVU402
 1443 0680 F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1444              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1445              		.loc 1 313 5 view .LVU403
 1446 0684 0118A0E3 		mov	r1, #65536	@ tmp202,
 1447              	@ armwave.c:303:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1448              		.loc 1 303 37 view .LVU404
 1449 0688 017CA0E3 		mov	r7, #256	@ tmp185,
 1450              	@ armwave.c:299:     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1451              		.loc 1 299 33 view .LVU405
 1452 068c 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1453              	@ armwave.c:300:     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1454              		.loc 1 300 31 view .LVU406
 1455 0690 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1456              	@ armwave.c:301:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1457              		.loc 1 301 27 view .LVU407
 1458 0694 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1459              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1460              		.loc 1 311 48 view .LVU408
 1461 0698 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1462              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1463              		.loc 1 313 5 view .LVU409
 1464 069c 08108DE5 		str	r1, [sp, #8]	@ tmp202,
 1465 06a0 70019FE5 		ldr	r0, .L88+20	@,
 1466 06a4 0310A0E1 		mov	r1, r3	@, tmp190
 1467              	@ armwave.c:302:     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1468              		.loc 1 302 26 view .LVU410
 1469 06a8 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1470              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1471              		.loc 1 304 34 view .LVU411
 1472 06ac 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1473              	@ armwave.c:307:     g_armwave_state.wave_length = end_point - start_point;
 307:armwave.c     **** 
 1474              		.loc 1 307 33 view .LVU412
 1475 06b0 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1476              	@ armwave.c:303:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1477              		.loc 1 303 37 view .LVU413
 1478 06b4 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1479              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1480              		.loc 1 297 49 view .LVU414
 1481 06b8 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1482              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1483              		.loc 1 311 79 view .LVU415
 1484 06bc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1485              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1486              		.loc 1 310 42 view .LVU416
 1487 06c0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1488              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1489              		.loc 1 297 33 view .LVU417
 1490 06c4 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1491              		.loc 1 298 5 is_stmt 1 view .LVU418
 1492              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1493              		.loc 1 310 42 is_stmt 0 view .LVU419
 1494 06c8 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1495              	@ armwave.c:298:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1496              		.loc 1 298 30 view .LVU420
 1497 06cc C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1498              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1499              		.loc 1 313 5 view .LVU421
 1500 06d0 0C30A0E1 		mov	r3, ip	@, _19
 1501 06d4 0C20A0E1 		mov	r2, ip	@, tmp3
 1502              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1503              		.loc 1 310 42 view .LVU422
 1504 06d8 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1505              	@ armwave.c:298:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1506              		.loc 1 298 30 view .LVU423
 1507 06dc 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1508              		.loc 1 299 5 is_stmt 1 view .LVU424
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1509              		.loc 1 300 5 view .LVU425
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1510              		.loc 1 301 5 view .LVU426
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1511              		.loc 1 302 5 view .LVU427
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1512              		.loc 1 303 5 view .LVU428
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1513              		.loc 1 304 5 view .LVU429
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 1514              		.loc 1 305 5 view .LVU430
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1515              		.loc 1 306 5 view .LVU431
 307:armwave.c     **** 
 1516              		.loc 1 307 5 view .LVU432
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1517              		.loc 1 310 5 view .LVU433
 1518              		.loc 1 313 5 view .LVU434
 1519 06e0 FEFFFFEB 		bl	printf		@
 1520              	.LVL82:
 314:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 315:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 316:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 317:armwave.c     **** 
 318:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 319:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 320:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 321:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1521              		.loc 1 321 5 view .LVU435
 1522              	@ armwave.c:323:     if(g_armwave_state.ch1_buffer != NULL)
 322:armwave.c     **** 
 323:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1523              		.loc 1 323 23 is_stmt 0 view .LVU436
 1524 06e4 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1525              	@ armwave.c:321:     g_armwave_state.slice_height = 256; // 64;  
 321:armwave.c     **** 
 1526              		.loc 1 321 34 view .LVU437
 1527 06e8 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1528              		.loc 1 323 5 is_stmt 1 view .LVU438
 1529              	@ armwave.c:323:     if(g_armwave_state.ch1_buffer != NULL)
 1530              		.loc 1 323 7 is_stmt 0 view .LVU439
 1531 06ec 000050E3 		cmp	r0, #0	@ _20,
 1532 06f0 0000000A 		beq	.L76		@,
 324:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1533              		.loc 1 324 9 is_stmt 1 view .LVU440
 1534 06f4 FEFFFFEB 		bl	free		@
 1535              	.LVL83:
 1536              	.L76:
 325:armwave.c     **** 
 326:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1537              		.loc 1 326 5 view .LVU441
 1538              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1539              		.loc 1 326 34 is_stmt 0 view .LVU442
 1540 06f8 0110A0E3 		mov	r1, #1	@,
 1541 06fc 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1542 0700 FEFFFFEB 		bl	calloc		@
 1543              	.LVL84:
 1544              	@ armwave.c:328:     assert(g_armwave_state.ch1_buffer != NULL);
 327:armwave.c     **** 
 328:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1545              		.loc 1 328 5 view .LVU443
 1546 0704 000050E3 		cmp	r0, #0	@ _23,
 1547              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 326:armwave.c     **** 
 1548              		.loc 1 326 34 view .LVU444
 1549 0708 0070A0E1 		mov	r7, r0	@ _23,
 1550              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 326:armwave.c     **** 
 1551              		.loc 1 326 32 view .LVU445
 1552 070c 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1553              		.loc 1 328 5 is_stmt 1 view .LVU446
 1554 0710 3600000A 		beq	.L86		@,
 329:armwave.c     **** 
 330:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 331:armwave.c     ****     length = end_point - start_point;
 1555              		.loc 1 331 5 view .LVU447
 1556              	.LVL85:
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1557              		.loc 1 332 5 view .LVU448
 1558              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 1559              		.loc 1 332 34 is_stmt 0 view .LVU449
 1560 0714 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1561              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 1562              		.loc 1 332 22 view .LVU450
 1563 0718 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1564              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1565              		.loc 1 333 60 view .LVU451
 1566 071c 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1567              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1568              		.loc 1 334 40 view .LVU452
 1569 0720 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1570              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1571              		.loc 1 332 34 view .LVU453
 1572 0724 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1573              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1574              		.loc 1 332 22 view .LVU454
 1575 0728 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1576              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1577              		.loc 1 333 60 view .LVU455
 1578 072c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1579              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1580              		.loc 1 332 22 view .LVU456
 1581 0730 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1582              	.LVL86:
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1583              		.loc 1 333 5 is_stmt 1 view .LVU457
 1584              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1585              		.loc 1 333 60 is_stmt 0 view .LVU458
 1586 0734 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1587              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1588              		.loc 1 333 41 view .LVU459
 1589 0738 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1590 073c 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1591              		.loc 1 334 5 is_stmt 1 view .LVU460
 1592              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1593              		.loc 1 334 40 is_stmt 0 view .LVU461
 1594 0740 FEFFFFEB 		bl	malloc		@
 1595              	.LVL87:
 1596              	@ armwave.c:336:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 335:armwave.c     **** 
 336:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1597              		.loc 1 336 5 view .LVU462
 1598 0744 000050E3 		cmp	r0, #0	@ _31,
 1599              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1600              		.loc 1 334 40 view .LVU463
 1601 0748 0060A0E1 		mov	r6, r0	@ _31,
 1602              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1603              		.loc 1 334 38 view .LVU464
 1604 074c 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1605              		.loc 1 336 5 is_stmt 1 view .LVU465
 1606 0750 2100000A 		beq	.L87		@,
 1607              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 337:armwave.c     **** 
 338:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 339:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1608              		.loc 1 339 54 is_stmt 0 view .LVU466
 1609 0754 2C7ADFED 		vldr.32	s15, .L88+8	@ tmp229,
 1610 0758 020040E2 		sub	r0, r0, #2	@ ivtmp.78, _31,
 1611              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1612              		.loc 1 338 12 view .LVU467
 1613 075c 0030A0E3 		mov	r3, #0	@ xx,
 1614              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1615              		.loc 1 339 54 view .LVU468
 1616 0760 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1617              	.L79:
 1618              	.LVL88:
 1619              		.loc 1 339 9 is_stmt 1 discriminator 3 view .LVU469
 1620              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1621              		.loc 1 339 74 is_stmt 0 discriminator 3 view .LVU470
 1622 0764 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1623              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1624              		.loc 1 338 32 discriminator 3 view .LVU471
 1625 0768 013083E2 		add	r3, r3, #1	@ xx, xx,
 1626              	.LVL89:
 1627              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1628              		.loc 1 338 5 discriminator 3 view .LVU472
 1629 076c 030055E1 		cmp	r5, r3	@ _13, xx
 1630              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1631              		.loc 1 339 74 discriminator 3 view .LVU473
 1632 0770 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1633 0774 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1634              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1635              		.loc 1 339 46 discriminator 3 view .LVU474
 1636 0778 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1637 077c 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1638 0780 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1639              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1640              		.loc 1 338 5 discriminator 3 view .LVU475
 1641 0784 F6FFFF1A 		bne	.L79		@,
 340:armwave.c     **** 
 341:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 342:armwave.c     ****     }
 343:armwave.c     **** 
 344:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1642              		.loc 1 344 5 is_stmt 1 view .LVU476
 1643              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1644              		.loc 1 344 34 is_stmt 0 view .LVU477
 1645 0788 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1646 078c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1647 0790 FEFFFFEB 		bl	malloc		@
 1648              	.LVL90:
 1649              	@ armwave.c:346:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 345:armwave.c     **** 
 346:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1650              		.loc 1 346 5 view .LVU478
 1651 0794 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1652 0798 0620A0E1 		mov	r2, r6	@, _31
 1653 079c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1654 07a0 0710A0E1 		mov	r1, r7	@, _23
 1655              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 344:armwave.c     **** 
 1656              		.loc 1 344 34 view .LVU479
 1657 07a4 00C0A0E1 		mov	ip, r0	@ tmp236,
 1658              	@ armwave.c:346:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1659              		.loc 1 346 5 view .LVU480
 1660 07a8 0030A0E1 		mov	r3, r0	@, tmp236
 1661              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 344:armwave.c     **** 
 1662              		.loc 1 344 32 view .LVU481
 1663 07ac 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1664              		.loc 1 346 5 is_stmt 1 view .LVU482
 1665 07b0 64009FE5 		ldr	r0, .L88+24	@,
 1666 07b4 FEFFFFEB 		bl	printf		@
 1667              	.LVL91:
 347:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 348:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 349:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 350:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 351:armwave.c     **** 
 352:armwave.c     ****     malloc_stats();
 1668              		.loc 1 352 5 view .LVU483
 1669              	@ armwave.c:353: }
 353:armwave.c     **** }
 1670              		.loc 1 353 1 is_stmt 0 view .LVU484
 1671 07b8 14D08DE2 		add	sp, sp, #20	@,,
 1672              		.cfi_remember_state
 1673              		.cfi_def_cfa_offset 36
 1674              		@ sp needed	@
 1675 07bc 028BBDEC 		vldm	sp!, {d8}	@
 1676              		.cfi_restore 80
 1677              		.cfi_restore 81
 1678              		.cfi_def_cfa_offset 28
 1679              	.LVL92:
 1680              		.loc 1 353 1 view .LVU485
 1681 07c0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1682              		.cfi_restore 14
 1683              		.cfi_restore 9
 1684              		.cfi_restore 8
 1685              		.cfi_restore 7
 1686              		.cfi_restore 6
 1687              		.cfi_restore 5
 1688              		.cfi_restore 4
 1689              		.cfi_def_cfa_offset 0
 1690              	.LVL93:
 1691              	@ armwave.c:352:     malloc_stats();
 352:armwave.c     **** }
 1692              		.loc 1 352 5 view .LVU486
 1693 07c4 FEFFFFEA 		b	malloc_stats		@
 1694              	.LVL94:
 1695              	.L85:
 1696              		.cfi_restore_state
 274:armwave.c     **** 
 1697              		.loc 1 274 5 is_stmt 1 discriminator 1 view .LVU487
 1698 07c8 50309FE5 		ldr	r3, .L88+28	@,
 1699 07cc 50209FE5 		ldr	r2, .L88+32	@,
 1700 07d0 50109FE5 		ldr	r1, .L88+36	@,
 1701 07d4 50009FE5 		ldr	r0, .L88+40	@,
 1702 07d8 FEFFFFEB 		bl	__assert_fail		@
 1703              	.LVL95:
 1704              	.L87:
 336:armwave.c     **** 
 1705              		.loc 1 336 5 discriminator 1 view .LVU488
 1706 07dc 3C309FE5 		ldr	r3, .L88+28	@,
 1707 07e0 152EA0E3 		mov	r2, #336	@,
 1708 07e4 3C109FE5 		ldr	r1, .L88+36	@,
 1709 07e8 40009FE5 		ldr	r0, .L88+44	@,
 1710 07ec FEFFFFEB 		bl	__assert_fail		@
 1711              	.LVL96:
 1712              	.L86:
 328:armwave.c     **** 
 1713              		.loc 1 328 5 discriminator 1 view .LVU489
 1714 07f0 28309FE5 		ldr	r3, .L88+28	@,
 1715 07f4 522FA0E3 		mov	r2, #328	@,
 1716 07f8 28109FE5 		ldr	r1, .L88+36	@,
 1717 07fc 30009FE5 		ldr	r0, .L88+48	@,
 1718 0800 FEFFFFEB 		bl	__assert_fail		@
 1719              	.LVL97:
 1720              	.L89:
 1721              		.align	2
 1722              	.L88:
 1723 0804 00007F43 		.word	1132396544
 1724 0808 00008047 		.word	1199570944
 1725 080c 0000803F 		.word	1065353216
 1726 0810 40000000 		.word	.LC4
 1727 0814 00000000 		.word	g_armwave_state
 1728 0818 84000000 		.word	.LC6
 1729 081c 34010000 		.word	.LC9
 1730 0820 1C000000 		.word	.LANCHOR0+28
 1731 0824 12010000 		.word	274
 1732 0828 20000000 		.word	.LC2
 1733 082c 6C000000 		.word	.LC5
 1734 0830 08010000 		.word	.LC8
 1735 0834 E4000000 		.word	.LC7
 1736              		.cfi_endproc
 1737              	.LFE62:
 1739              		.align	2
 1740              		.global	armwave_set_wave_pointer
 1741              		.syntax unified
 1742              		.arm
 1743              		.fpu vfp
 1745              	armwave_set_wave_pointer:
 1746              	.LVL98:
 1747              	.LFB63:
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 357:armwave.c     ****  * in the future.
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 360:armwave.c     **** {
 1748              		.loc 1 360 1 view -0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 0
 1751              		@ frame_needed = 0, uses_anonymous_args = 0
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1752              		.loc 1 361 5 view .LVU491
 1753 0838 000050E3 		cmp	r0, #0	@ wave_buffer
 1754              		.loc 1 361 5 is_stmt 0 view .LVU492
 1755 083c 0200000A 		beq	.L95		@,
 362:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1756              		.loc 1 362 5 is_stmt 1 view .LVU493
 1757              	@ armwave.c:362:     g_armwave_state.wave_buffer = wave_buffer;
 1758              		.loc 1 362 33 is_stmt 0 view .LVU494
 1759 0840 1C309FE5 		ldr	r3, .L96	@ tmp116,
 1760 0844 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1761 0848 1EFF2FE1 		bx	lr	@
 1762              	.L95:
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1763              		.loc 1 361 5 is_stmt 1 discriminator 1 view .LVU495
 1764              	@ armwave.c:360: {
 360:armwave.c     ****     assert(wave_buffer != NULL);
 1765              		.loc 1 360 1 is_stmt 0 discriminator 1 view .LVU496
 1766 084c 10402DE9 		push	{r4, lr}	@
 1767              		.cfi_def_cfa_offset 8
 1768              		.cfi_offset 4, -8
 1769              		.cfi_offset 14, -4
 1770              	@ armwave.c:361:     assert(wave_buffer != NULL);
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1771              		.loc 1 361 5 discriminator 1 view .LVU497
 1772 0850 10309FE5 		ldr	r3, .L96+4	@,
 1773 0854 10209FE5 		ldr	r2, .L96+8	@,
 1774 0858 10109FE5 		ldr	r1, .L96+12	@,
 1775 085c 10009FE5 		ldr	r0, .L96+16	@,
 1776              	.LVL99:
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1777              		.loc 1 361 5 discriminator 1 view .LVU498
 1778 0860 FEFFFFEB 		bl	__assert_fail		@
 1779              	.LVL100:
 1780              	.L97:
 1781              		.align	2
 1782              	.L96:
 1783 0864 00000000 		.word	g_armwave_state
 1784 0868 34000000 		.word	.LANCHOR0+52
 1785 086c 69010000 		.word	361
 1786 0870 20000000 		.word	.LC2
 1787 0874 58010000 		.word	.LC10
 1788              		.cfi_endproc
 1789              	.LFE63:
 1791              		.align	2
 1792              		.global	armwave_set_wave_pointer_as_testbuf
 1793              		.syntax unified
 1794              		.arm
 1795              		.fpu vfp
 1797              	armwave_set_wave_pointer_as_testbuf:
 1798              	.LVL101:
 1799              	.LFB64:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 367:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 368:armwave.c     ****  */
 369:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 370:armwave.c     **** {
 1800              		.loc 1 370 1 is_stmt 1 view -0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 1804              		@ link register save eliminated.
 371:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1805              		.loc 1 371 5 view .LVU500
 1806              	@ armwave.c:371:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1807              		.loc 1 371 29 is_stmt 0 view .LVU501
 1808 0878 24309FE5 		ldr	r3, .L101	@ tmp117,
 1809              	@ armwave.c:371:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1810              		.loc 1 371 7 view .LVU502
 1811 087c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1812 0880 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1813 0884 0400003A 		bcc	.L100		@,
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 373:armwave.c     ****         return;
 374:armwave.c     ****     }
 375:armwave.c     **** 
 376:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1814              		.loc 1 376 5 is_stmt 1 view .LVU503
 1815              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1816              		.loc 1 376 111 is_stmt 0 view .LVU504
 1817 0888 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1818              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1819              		.loc 1 376 68 view .LVU505
 1820 088c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1821 0890 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1822              	.LVL102:
 1823              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1824              		.loc 1 376 33 view .LVU506
 1825 0894 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1826              	@ armwave.c:377: }
 377:armwave.c     **** }
 1827              		.loc 1 377 1 view .LVU507
 1828 0898 1EFF2FE1 		bx	lr	@
 1829              	.LVL103:
 1830              	.L100:
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1831              		.loc 1 372 9 is_stmt 1 view .LVU508
 1832 089c 04009FE5 		ldr	r0, .L101+4	@,
 1833              	.LVL104:
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1834              		.loc 1 372 9 is_stmt 0 view .LVU509
 1835 08a0 FEFFFFEA 		b	puts		@
 1836              	.LVL105:
 1837              	.L102:
 1838              		.align	2
 1839              	.L101:
 1840 08a4 00000000 		.word	g_armwave_state
 1841 08a8 6C010000 		.word	.LC11
 1842              		.cfi_endproc
 1843              	.LFE64:
 1845              		.align	2
 1846              		.global	armwave_set_wave_pointer_u32
 1847              		.syntax unified
 1848              		.arm
 1849              		.fpu vfp
 1851              	armwave_set_wave_pointer_u32:
 1852              	.LVL106:
 1853              	.LFB65:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 381:armwave.c     ****  * disjointed buffers in the future.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 384:armwave.c     **** {
 1854              		.loc 1 384 1 is_stmt 1 view -0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 0
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1858              		.loc 1 385 5 view .LVU511
 1859 08ac 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1860              		.loc 1 385 5 is_stmt 0 view .LVU512
 1861 08b0 0200000A 		beq	.L108		@,
 386:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1862              		.loc 1 386 5 is_stmt 1 view .LVU513
 1863              	@ armwave.c:386:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1864              		.loc 1 386 33 is_stmt 0 view .LVU514
 1865 08b4 1C309FE5 		ldr	r3, .L109	@ tmp117,
 1866 08b8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1867 08bc 1EFF2FE1 		bx	lr	@
 1868              	.L108:
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1869              		.loc 1 385 5 is_stmt 1 discriminator 1 view .LVU515
 1870              	@ armwave.c:384: {
 384:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1871              		.loc 1 384 1 is_stmt 0 discriminator 1 view .LVU516
 1872 08c0 10402DE9 		push	{r4, lr}	@
 1873              		.cfi_def_cfa_offset 8
 1874              		.cfi_offset 4, -8
 1875              		.cfi_offset 14, -4
 1876              	@ armwave.c:385:     assert(wave_buffer_ptr != 0);
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1877              		.loc 1 385 5 discriminator 1 view .LVU517
 1878 08c4 10309FE5 		ldr	r3, .L109+4	@,
 1879 08c8 10209FE5 		ldr	r2, .L109+8	@,
 1880 08cc 10109FE5 		ldr	r1, .L109+12	@,
 1881 08d0 10009FE5 		ldr	r0, .L109+16	@,
 1882              	.LVL107:
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1883              		.loc 1 385 5 discriminator 1 view .LVU518
 1884 08d4 FEFFFFEB 		bl	__assert_fail		@
 1885              	.LVL108:
 1886              	.L110:
 1887              		.align	2
 1888              	.L109:
 1889 08d8 00000000 		.word	g_armwave_state
 1890 08dc 50000000 		.word	.LANCHOR0+80
 1891 08e0 81010000 		.word	385
 1892 08e4 20000000 		.word	.LC2
 1893 08e8 A8010000 		.word	.LC12
 1894              		.cfi_endproc
 1895              	.LFE65:
 1897              		.align	2
 1898              		.global	armwave_clear_buffer
 1899              		.syntax unified
 1900              		.arm
 1901              		.fpu vfp
 1903              	armwave_clear_buffer:
 1904              	.LVL109:
 1905              	.LFB66:
 387:armwave.c     **** }
 388:armwave.c     **** 
 389:armwave.c     **** /*
 390:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 391:armwave.c     ****  */
 392:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 393:armwave.c     **** {
 1906              		.loc 1 393 1 is_stmt 1 view -0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 1910              		@ link register save eliminated.
 394:armwave.c     ****     // Flags ignored, only one buffer cleared
 395:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1911              		.loc 1 395 5 view .LVU520
 1912              	@ armwave.c:395:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1913              		.loc 1 395 58 is_stmt 0 view .LVU521
 1914 08ec 0C309FE5 		ldr	r3, .L112	@ tmp114,
 1915              	@ armwave.c:395:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1916              		.loc 1 395 5 view .LVU522
 1917 08f0 0010A0E3 		mov	r1, #0	@,
 1918 08f4 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1919 08f8 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1920              	.LVL110:
 1921              		.loc 1 395 5 view .LVU523
 1922 08fc FEFFFFEA 		b	memset		@
 1923              	.LVL111:
 1924              	.L113:
 1925              		.align	2
 1926              	.L112:
 1927 0900 00000000 		.word	g_armwave_state
 1928              		.cfi_endproc
 1929              	.LFE66:
 1931              		.align	2
 1932              		.global	armwave_set_channel_colour
 1933              		.syntax unified
 1934              		.arm
 1935              		.fpu vfp
 1937              	armwave_set_channel_colour:
 1938              	.LVL112:
 1939              	.LFB67:
 396:armwave.c     **** }
 397:armwave.c     **** 
 398:armwave.c     **** /*
 399:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 400:armwave.c     ****  */
 401:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 402:armwave.c     **** {
 1940              		.loc 1 402 1 is_stmt 1 view -0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 0
 1943              		@ frame_needed = 0, uses_anonymous_args = 0
 1944              		@ link register save eliminated.
 403:armwave.c     ****     // Only 1ch supported for now
 404:armwave.c     ****     switch(ch) {
 1945              		.loc 1 404 5 view .LVU525
 1946 0904 010050E3 		cmp	r0, #1	@ ch,
 405:armwave.c     ****         case 1:
 406:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1947              		.loc 1 406 13 view .LVU526
 1948              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 1949              		.loc 1 406 41 is_stmt 0 view .LVU527
 1950 0908 0C009F05 		ldreq	r0, .L116	@ tmp117,
 1951              	.LVL113:
 1952              		.loc 1 406 41 view .LVU528
 1953 090c BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 407:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1954              		.loc 1 407 13 is_stmt 1 view .LVU529
 1955              	@ armwave.c:407:             g_armwave_state.ch1_color.g = g;
 1956              		.loc 1 407 41 is_stmt 0 view .LVU530
 1957 0910 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 408:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1958              		.loc 1 408 13 is_stmt 1 view .LVU531
 1959              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 1960              		.loc 1 408 41 is_stmt 0 view .LVU532
 1961 0914 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 409:armwave.c     ****             break;
 1962              		.loc 1 409 13 is_stmt 1 view .LVU533
 1963              	@ armwave.c:411: }
 410:armwave.c     ****     }
 411:armwave.c     **** }
 1964              		.loc 1 411 1 is_stmt 0 view .LVU534
 1965 0918 1EFF2FE1 		bx	lr	@
 1966              	.L117:
 1967              		.align	2
 1968              	.L116:
 1969 091c 00000000 		.word	g_armwave_state
 1970              		.cfi_endproc
 1971              	.LFE67:
 1973              		.align	2
 1974              		.global	armwave_dump_ppm_debug
 1975              		.syntax unified
 1976              		.arm
 1977              		.fpu vfp
 1979              	armwave_dump_ppm_debug:
 1980              	.LVL114:
 1981              	.LFB68:
 412:armwave.c     **** 
 413:armwave.c     **** /*
 414:armwave.c     ****  * Dump a ppm of a buffer to a file.
 415:armwave.c     ****  */
 416:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 417:armwave.c     **** {
 1982              		.loc 1 417 1 is_stmt 1 view -0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 418:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1986              		.loc 1 418 5 view .LVU536
 1987              	@ armwave.c:417: {
 417:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1988              		.loc 1 417 1 is_stmt 0 view .LVU537
 1989 0920 0130A0E1 		mov	r3, r1	@ fn, fn
 1990 0924 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1991              		.cfi_def_cfa_offset 28
 1992              		.cfi_offset 4, -28
 1993              		.cfi_offset 5, -24
 1994              		.cfi_offset 6, -20
 1995              		.cfi_offset 7, -16
 1996              		.cfi_offset 8, -12
 1997              		.cfi_offset 9, -8
 1998              		.cfi_offset 14, -4
 1999 0928 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2000 092c 0CD04DE2 		sub	sp, sp, #12	@,,
 2001              		.cfi_def_cfa_offset 40
 2002              	@ armwave.c:418:     FILE *fp = fopen(fn, "wb");
 2003              		.loc 1 418 16 view .LVU538
 2004 0930 C4109FE5 		ldr	r1, .L126	@,
 2005              	.LVL115:
 2006              		.loc 1 418 16 view .LVU539
 2007 0934 0300A0E1 		mov	r0, r3	@, fn
 2008              	.LVL116:
 2009              		.loc 1 418 16 view .LVU540
 2010 0938 FEFFFFEB 		bl	fopen64		@
 2011              	.LVL117:
 2012              	@ armwave.c:425:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 419:armwave.c     ****     uint32_t data;
 420:armwave.c     ****     int xx, yy;
 421:armwave.c     **** 
 422:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 423:armwave.c     **** 
 424:armwave.c     ****     fputs("P3\n", fp);
 425:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2013              		.loc 1 425 5 view .LVU541
 2014 093c BC609FE5 		ldr	r6, .L126+4	@ tmp150,
 2015              	@ armwave.c:424:     fputs("P3\n", fp);
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2016              		.loc 1 424 5 view .LVU542
 2017 0940 0320A0E3 		mov	r2, #3	@,
 2018 0944 0110A0E3 		mov	r1, #1	@,
 2019              	@ armwave.c:418:     FILE *fp = fopen(fn, "wb");
 418:armwave.c     ****     uint32_t data;
 2020              		.loc 1 418 16 view .LVU543
 2021 0948 0070A0E1 		mov	r7, r0	@ fp,
 2022              	.LVL118:
 419:armwave.c     ****     uint32_t data;
 2023              		.loc 1 419 5 is_stmt 1 view .LVU544
 420:armwave.c     **** 
 2024              		.loc 1 420 5 view .LVU545
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2025              		.loc 1 424 5 view .LVU546
 2026 094c 0030A0E1 		mov	r3, r0	@, fp
 2027 0950 AC009FE5 		ldr	r0, .L126+8	@,
 2028              	.LVL119:
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2029              		.loc 1 424 5 is_stmt 0 view .LVU547
 2030 0954 FEFFFFEB 		bl	fwrite		@
 2031              	.LVL120:
 2032              		.loc 1 425 5 is_stmt 1 view .LVU548
 2033 0958 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2034 095c A4109FE5 		ldr	r1, .L126+12	@,
 2035 0960 0700A0E1 		mov	r0, r7	@, fp
 2036 0964 FEFFFFEB 		bl	fprintf		@
 2037              	.LVL121:
 426:armwave.c     ****     fputs("255\n", fp);
 2038              		.loc 1 426 5 view .LVU549
 2039 0968 0420A0E3 		mov	r2, #4	@,
 2040 096c 0730A0E1 		mov	r3, r7	@, fp
 2041 0970 0110A0E3 		mov	r1, #1	@,
 2042 0974 90009FE5 		ldr	r0, .L126+16	@,
 2043 0978 FEFFFFEB 		bl	fwrite		@
 2044              	.LVL122:
 427:armwave.c     **** 
 428:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2045              		.loc 1 428 5 view .LVU550
 2046              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2047              		.loc 1 428 37 is_stmt 0 view .LVU551
 2048 097c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2049              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2050              		.loc 1 428 5 view .LVU552
 2051 0980 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2052 0984 180000DA 		ble	.L119		@,
 2053 0988 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2054              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 430:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 431:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 432:armwave.c     **** 
 433:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2055              		.loc 1 433 13 view .LVU553
 2056 098c 7C909FE5 		ldr	r9, .L126+20	@ tmp152,
 2057              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2058              		.loc 1 428 12 view .LVU554
 2059 0990 0050A0E3 		mov	r5, #0	@ yy,
 2060              	.LVL123:
 2061              	.L120:
 2062              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2063              		.loc 1 429 9 view .LVU555
 2064 0994 000053E3 		cmp	r3, #0	@ _13,
 2065              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2066              		.loc 1 429 16 view .LVU556
 2067 0998 0040A0C3 		movgt	r4, #0	@ xx,
 2068              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2069              		.loc 1 429 9 view .LVU557
 2070 099c 0F0000DA 		ble	.L122		@,
 2071              	.LVL124:
 2072              	.L121:
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2073              		.loc 1 430 13 is_stmt 1 discriminator 3 view .LVU558
 2074              	@ armwave.c:430:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2075              		.loc 1 430 29 is_stmt 0 discriminator 3 view .LVU559
 2076 09a0 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2077              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2078              		.loc 1 433 13 discriminator 3 view .LVU560
 2079 09a4 0910A0E1 		mov	r1, r9	@, tmp152
 2080 09a8 0700A0E1 		mov	r0, r7	@, fp
 2081              	@ armwave.c:430:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2082              		.loc 1 430 18 discriminator 3 view .LVU561
 2083 09ac 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2084              	.LVL125:
 2085              		.loc 1 433 13 is_stmt 1 discriminator 3 view .LVU562
 2086              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2087              		.loc 1 429 58 is_stmt 0 discriminator 3 view .LVU563
 2088 09b0 014084E2 		add	r4, r4, #1	@ xx, xx,
 2089              	.LVL126:
 2090              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2091              		.loc 1 433 81 discriminator 3 view .LVU564
 2092 09b4 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2093              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2094              		.loc 1 433 61 discriminator 3 view .LVU565
 2095 09b8 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2096              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2097              		.loc 1 433 13 discriminator 3 view .LVU566
 2098 09bc 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2099 09c0 7330EFE6 		uxtb	r3, r3	@, tmp142
 2100 09c4 00C08DE5 		str	ip, [sp]	@ tmp147,
 2101 09c8 7220EFE6 		uxtb	r2, r2	@, data
 2102              	.LVL127:
 2103              		.loc 1 433 13 discriminator 3 view .LVU567
 2104 09cc FEFFFFEB 		bl	fprintf		@
 2105              	.LVL128:
 2106              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2107              		.loc 1 429 41 discriminator 3 view .LVU568
 2108 09d0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2109              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2110              		.loc 1 429 9 discriminator 3 view .LVU569
 2111 09d4 040053E1 		cmp	r3, r4	@ _13, xx
 2112 09d8 F0FFFFCA 		bgt	.L121		@,
 2113 09dc 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2114              	.LVL129:
 2115              	.L122:
 2116              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2117              		.loc 1 428 55 discriminator 2 view .LVU570
 2118 09e0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2119              	.LVL130:
 2120              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2121              		.loc 1 428 5 discriminator 2 view .LVU571
 2122 09e4 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2123 09e8 E9FFFFBA 		blt	.L120		@,
 2124              	.LVL131:
 2125              	.L119:
 434:armwave.c     ****         }
 435:armwave.c     ****     }
 436:armwave.c     **** 
 437:armwave.c     ****     fclose(fp);
 2126              		.loc 1 437 5 is_stmt 1 view .LVU572
 2127 09ec 0700A0E1 		mov	r0, r7	@, fp
 2128              	@ armwave.c:438: }
 438:armwave.c     **** }
 2129              		.loc 1 438 1 is_stmt 0 view .LVU573
 2130 09f0 0CD08DE2 		add	sp, sp, #12	@,,
 2131              		.cfi_def_cfa_offset 28
 2132              		@ sp needed	@
 2133 09f4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2134              		.cfi_restore 14
 2135              		.cfi_restore 9
 2136              		.cfi_restore 8
 2137              		.cfi_restore 7
 2138              		.cfi_restore 6
 2139              		.cfi_restore 5
 2140              		.cfi_restore 4
 2141              		.cfi_def_cfa_offset 0
 2142              	.LVL132:
 2143              	@ armwave.c:437:     fclose(fp);
 437:armwave.c     **** }
 2144              		.loc 1 437 5 view .LVU574
 2145 09f8 FEFFFFEA 		b	fclose		@
 2146              	.LVL133:
 2147              	.L127:
 437:armwave.c     **** }
 2148              		.loc 1 437 5 view .LVU575
 2149              		.align	2
 2150              	.L126:
 2151 09fc C0010000 		.word	.LC13
 2152 0a00 00000000 		.word	g_armwave_state
 2153 0a04 C4010000 		.word	.LC14
 2154 0a08 C8010000 		.word	.LC15
 2155 0a0c D0010000 		.word	.LC16
 2156 0a10 D8010000 		.word	.LC17
 2157              		.cfi_endproc
 2158              	.LFE68:
 2160              		.align	2
 2161              		.global	armwave_test_init
 2162              		.syntax unified
 2163              		.arm
 2164              		.fpu vfp
 2166              	armwave_test_init:
 2167              	.LVL134:
 2168              	.LFB69:
 439:armwave.c     **** 
 440:armwave.c     **** /*
 441:armwave.c     ****  * Initialise some test functionry.
 442:armwave.c     ****  */
 443:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 444:armwave.c     **** {
 2169              		.loc 1 444 1 is_stmt 1 view -0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 0
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 445:armwave.c     ****     test_create_gamma();
 2173              		.loc 1 445 5 view .LVU577
 2174              	.LBB18:
 2175              	.LBI18:
  34:armwave.c     **** {
 2176              		.loc 1 34 6 view .LVU578
  34:armwave.c     **** {
 2177              		.loc 1 34 6 is_stmt 0 view .LVU579
 2178              	.LBE18:
 2179              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2180              		.loc 1 444 1 view .LVU580
 2181 0a14 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2182              		.cfi_def_cfa_offset 32
 2183              		.cfi_offset 4, -32
 2184              		.cfi_offset 5, -28
 2185              		.cfi_offset 6, -24
 2186              		.cfi_offset 7, -20
 2187              		.cfi_offset 8, -16
 2188              		.cfi_offset 9, -12
 2189              		.cfi_offset 10, -8
 2190              		.cfi_offset 14, -4
 2191 0a18 068B2DED 		vpush.64	{d8, d9, d10}	@
 2192              		.cfi_def_cfa_offset 56
 2193              		.cfi_offset 80, -56
 2194              		.cfi_offset 81, -52
 2195              		.cfi_offset 82, -48
 2196              		.cfi_offset 83, -44
 2197              		.cfi_offset 84, -40
 2198              		.cfi_offset 85, -36
 2199 0a1c C0409FE5 		ldr	r4, .L132+20	@ ivtmp.92,
 2200              	.LBB21:
 2201              	.LBB19:
 2202              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2203              		.loc 1 40 32 view .LVU581
 2204 0a20 2EAA9FED 		vldr.32	s20, .L132+16	@ tmp136,
 2205              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2206              		.loc 1 40 26 view .LVU582
 2207 0a24 299B9FED 		vldr.64	d9, .L132	@ tmp151,
 2208              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2209              		.loc 1 40 49 view .LVU583
 2210 0a28 2A8B9FED 		vldr.64	d8, .L132+8	@ tmp139,
 2211 0a2c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.92,
 2212              	.LBE19:
 2213              	.LBE21:
 2214              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2215              		.loc 1 444 1 view .LVU584
 2216 0a30 10D04DE2 		sub	sp, sp, #16	@,,
 2217              		.cfi_def_cfa_offset 72
 2218              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2219              		.loc 1 444 1 view .LVU585
 2220 0a34 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2221 0a38 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2222 0a3c 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2223 0a40 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2224 0a44 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.92,
 2225 0a48 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2226              	.LVL135:
 2227              	.L129:
 2228              	.LBB22:
 2229              	.LBB20:
  40:armwave.c     ****     }
 2230              		.loc 1 40 9 is_stmt 1 view .LVU586
 2231              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2232              		.loc 1 40 32 is_stmt 0 view .LVU587
 2233 0a4c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.92
 2234              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2235              		.loc 1 40 26 view .LVU588
 2236 0a50 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2237              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2238              		.loc 1 40 32 view .LVU589
 2239 0a54 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2240 0a58 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2241 0a5c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2242              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2243              		.loc 1 40 26 view .LVU590
 2244 0a60 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2245 0a64 FEFFFFEB 		bl	pow		@
 2246              	.LVL136:
 2247              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2248              		.loc 1 40 49 view .LVU591
 2249 0a68 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2250              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2251              		.loc 1 40 24 view .LVU592
 2252 0a6c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2253 0a70 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2254 0a74 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2255              	.LVL137:
 2256              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2257              		.loc 1 39 5 view .LVU593
 2258 0a78 0A0054E1 		cmp	r4, r10	@ ivtmp.92, _39
 2259 0a7c F2FFFF1A 		bne	.L129		@,
 2260              	.LVL138:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2261              		.loc 1 39 5 view .LVU594
 2262              	.LBE20:
 2263              	.LBE22:
 446:armwave.c     **** 
 447:armwave.c     ****     // make ch1 yellowish by default
 448:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2264              		.loc 1 448 5 is_stmt 1 view .LVU595
 2265              	.LBB23:
 2266              	.LBI23:
 401:armwave.c     **** {
 2267              		.loc 1 401 6 view .LVU596
 2268              	.LBB24:
 404:armwave.c     ****         case 1:
 2269              		.loc 1 404 5 view .LVU597
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2270              		.loc 1 406 13 view .LVU598
 407:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2271              		.loc 1 407 13 view .LVU599
 2272              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2273              		.loc 1 406 41 is_stmt 0 view .LVU600
 2274 0a80 60C09FE5 		ldr	ip, .L132+24	@ tmp142,
 2275 0a84 60409FE5 		ldr	r4, .L132+28	@ tmp143,
 2276              	.LBE24:
 2277              	.LBE23:
 2278              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 449:armwave.c     **** 
 450:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2279              		.loc 1 450 5 view .LVU601
 2280 0a88 0000A0E3 		mov	r0, #0	@ tmp147,
 2281              	.LBB28:
 2282              	.LBB25:
 2283              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 408:armwave.c     ****             break;
 2284              		.loc 1 408 41 view .LVU602
 2285 0a8c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2286              	.LBE25:
 2287              	.LBE28:
 2288              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2289              		.loc 1 450 5 view .LVU603
 2290 0a90 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2291 0a94 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2292 0a98 00808DE5 		str	r8, [sp]	@ render_width,
 2293 0a9c 0610A0E1 		mov	r1, r6	@, tmp3
 2294 0aa0 0720A0E1 		mov	r2, r7	@, nwaves
 2295              	.LBB29:
 2296              	.LBB26:
 2297              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2298              		.loc 1 406 41 view .LVU604
 2299 0aa4 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 408:armwave.c     ****             break;
 2300              		.loc 1 408 13 is_stmt 1 view .LVU605
 2301              	.LBE26:
 2302              	.LBE29:
 2303              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2304              		.loc 1 450 5 is_stmt 0 view .LVU606
 2305 0aa8 0630A0E1 		mov	r3, r6	@, wave_size
 2306              	.LBB30:
 2307              	.LBB27:
 2308              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 408:armwave.c     ****             break;
 2309              		.loc 1 408 41 view .LVU607
 2310 0aac B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 409:armwave.c     ****     }
 2311              		.loc 1 409 13 is_stmt 1 view .LVU608
 2312              	.LVL139:
 409:armwave.c     ****     }
 2313              		.loc 1 409 13 is_stmt 0 view .LVU609
 2314              	.LBE27:
 2315              	.LBE30:
 2316              		.loc 1 450 5 is_stmt 1 view .LVU610
 2317 0ab0 FEFFFFEB 		bl	armwave_setup_render		@
 2318              	.LVL140:
 451:armwave.c     **** 
 452:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2319              		.loc 1 452 5 view .LVU611
 2320 0ab4 34109FE5 		ldr	r1, .L132+32	@,
 2321 0ab8 34009FE5 		ldr	r0, .L132+36	@,
 2322              	@ armwave.c:453: }
 453:armwave.c     **** }
 2323              		.loc 1 453 1 is_stmt 0 view .LVU612
 2324 0abc 10D08DE2 		add	sp, sp, #16	@,,
 2325              		.cfi_def_cfa_offset 56
 2326              		@ sp needed	@
 2327 0ac0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2328              		.cfi_restore 84
 2329              		.cfi_restore 85
 2330              		.cfi_restore 82
 2331              		.cfi_restore 83
 2332              		.cfi_restore 80
 2333              		.cfi_restore 81
 2334              		.cfi_def_cfa_offset 32
 2335 0ac4 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2336              		.cfi_restore 14
 2337              		.cfi_restore 10
 2338              		.cfi_restore 9
 2339              		.cfi_restore 8
 2340              		.cfi_restore 7
 2341              		.cfi_restore 6
 2342              		.cfi_restore 5
 2343              		.cfi_restore 4
 2344              		.cfi_def_cfa_offset 0
 2345              	.LVL141:
 2346              	@ armwave.c:452:     printf("armwave version: %s\n", ARMWAVE_VER);
 452:armwave.c     **** }
 2347              		.loc 1 452 5 view .LVU613
 2348 0ac8 FEFFFFEA 		b	printf		@
 2349              	.LVL142:
 2350              	.L133:
 2351 0acc 0000A0E1 		.align	3
 2352              	.L132:
 2353 0ad0 000000C0 		.word	-1073741824
 2354 0ad4 CCCCEC3F 		.word	1072483532
 2355 0ad8 00000000 		.word	0
 2356 0adc 00E06F40 		.word	1081073664
 2357 0ae0 00007F43 		.word	1132396544
 2358 0ae4 FFFFFFFF 		.word	gamma_table-1
 2359 0ae8 00000000 		.word	g_armwave_state
 2360 0aec F609F406 		.word	116656630
 2361 0af0 00000000 		.word	.LC0
 2362 0af4 08000000 		.word	.LC1
 2363              		.cfi_endproc
 2364              	.LFE69:
 2366              		.align	2
 2367              		.global	armwave_test_fill_outbuf
 2368              		.syntax unified
 2369              		.arm
 2370              		.fpu vfp
 2372              	armwave_test_fill_outbuf:
 2373              	.LFB70:
 454:armwave.c     **** 
 455:armwave.c     **** /*
 456:armwave.c     ****  * Render image to the local allocated buffer.
 457:armwave.c     ****  */
 458:armwave.c     **** void armwave_test_fill_outbuf()
 459:armwave.c     **** {
 2374              		.loc 1 459 1 is_stmt 1 view -0
 2375              		.cfi_startproc
 2376              		@ args = 0, pretend = 0, frame = 8
 2377              		@ frame_needed = 0, uses_anonymous_args = 0
 460:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2378              		.loc 1 460 5 view .LVU615
 2379 0af8 50C19FE5 		ldr	ip, .L155	@ tmp204,
 2380              	@ armwave.c:459: {
 459:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2381              		.loc 1 459 1 is_stmt 0 view .LVU616
 2382 0afc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2383              		.cfi_def_cfa_offset 36
 2384              		.cfi_offset 4, -36
 2385              		.cfi_offset 5, -32
 2386              		.cfi_offset 6, -28
 2387              		.cfi_offset 7, -24
 2388              		.cfi_offset 8, -20
 2389              		.cfi_offset 9, -16
 2390              		.cfi_offset 10, -12
 2391              		.cfi_offset 11, -8
 2392              		.cfi_offset 14, -4
 2393 0b00 0CD04DE2 		sub	sp, sp, #12	@,,
 2394              		.cfi_def_cfa_offset 48
 2395              	@ armwave.c:460:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2396              		.loc 1 460 5 view .LVU617
 2397 0b04 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2398              	.LVL143:
 2399              	.LBB33:
 2400              	.LBI33:
 172:armwave.c     **** {
 2401              		.loc 1 172 6 is_stmt 1 view .LVU618
 2402              	.LBB34:
 174:armwave.c     ****     // uint32_t ysub;
 2403              		.loc 1 174 5 view .LVU619
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2404              		.loc 1 176 5 view .LVU620
 177:armwave.c     ****     // uint8_t row;
 2405              		.loc 1 177 5 view .LVU621
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2406              		.loc 1 179 5 view .LVU622
 2407              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2408              		.loc 1 179 15 is_stmt 0 view .LVU623
 2409 0b08 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2410              	.LVL144:
 180:armwave.c     ****     uint32_t offset;
 2411              		.loc 1 180 5 is_stmt 1 view .LVU624
 181:armwave.c     **** 
 2412              		.loc 1 181 5 view .LVU625
 183:armwave.c     **** 
 2413              		.loc 1 183 5 view .LVU626
 2414 0b0c 000058E3 		cmp	r8, #0	@ _1,
 2415 0b10 4900000A 		beq	.L153		@,
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2416              		.loc 1 188 5 view .LVU627
 2417              	@ armwave.c:188:     npix = g_armwave_state.target_width * 256; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2418              		.loc 1 188 10 is_stmt 0 view .LVU628
 2419 0b14 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2420 0b18 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2421              	.LVL145:
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2422              		.loc 1 191 5 is_stmt 1 view .LVU629
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2423              		.loc 1 191 5 is_stmt 0 view .LVU630
 2424 0b1c 000057E3 		cmp	r7, #0	@ npix,
 2425 0b20 0A0000DA 		ble	.L134		@,
 2426              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2427              		.loc 1 203 52 view .LVU631
 2428 0b24 FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2429              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2430              		.loc 1 204 52 view .LVU632
 2431 0b28 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2432              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 2433              		.loc 1 205 52 view .LVU633
 2434 0b2c F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2435              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2436              		.loc 1 227 57 view .LVU634
 2437 0b30 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2438              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2439              		.loc 1 191 11 view .LVU635
 2440 0b34 00E0A0E3 		mov	lr, #0	@ n,
 2441              	.LVL146:
 2442              	.L141:
 195:armwave.c     **** 
 2443              		.loc 1 195 9 is_stmt 1 view .LVU636
 2444              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 2445              		.loc 1 195 19 is_stmt 0 view .LVU637
 2446 0b38 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2447              	.LVL147:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 2448              		.loc 1 197 9 is_stmt 1 view .LVU638
 2449              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 2450              		.loc 1 197 11 is_stmt 0 view .LVU639
 2451 0b3c 000050E3 		cmp	r0, #0	@ wave_word,
 2452 0b40 0400001A 		bne	.L150		@,
 2453 0b44 04E08EE2 		add	lr, lr, #4	@ n, n,
 2454              	.L137:
 2455              	.LVL148:
 2456              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2457              		.loc 1 191 5 view .LVU640
 2458 0b48 0E0057E1 		cmp	r7, lr	@ npix, n
 2459 0b4c F9FFFFCA 		bgt	.L141		@,
 2460              	.LVL149:
 2461              	.L134:
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2462              		.loc 1 191 5 view .LVU641
 2463              	.LBE34:
 2464              	.LBE33:
 2465              	@ armwave.c:461: }
 461:armwave.c     **** }
 2466              		.loc 1 461 1 view .LVU642
 2467 0b50 0CD08DE2 		add	sp, sp, #12	@,,
 2468              		.cfi_remember_state
 2469              		.cfi_def_cfa_offset 36
 2470              		@ sp needed	@
 2471 0b54 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2472              	.LVL150:
 2473              	.L150:
 2474              		.cfi_restore_state
 2475              	.LBB36:
 2476              	.LBB35:
 2477              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2478              		.loc 1 202 19 view .LVU643
 2479 0b58 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2480              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 2481              		.loc 1 197 11 view .LVU644
 2482 0b5c 0E60A0E1 		mov	r6, lr	@ ivtmp.102, n
 2483              	.LVL151:
 199:armwave.c     ****                 wave_word >>= 8;
 2484              		.loc 1 199 17 is_stmt 1 view .LVU645
 200:armwave.c     **** 
 2485              		.loc 1 200 17 view .LVU646
 2486              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 2487              		.loc 1 200 27 is_stmt 0 view .LVU647
 2488 0b60 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2489              	.LVL152:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2490              		.loc 1 202 17 is_stmt 1 view .LVU648
 2491 0b64 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.102,
 2492              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2493              		.loc 1 202 19 is_stmt 0 view .LVU649
 2494 0b68 0500001A 		bne	.L154		@,
 2495              	.LVL153:
 2496              	.L138:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2497              		.loc 1 202 19 view .LVU650
 2498 0b6c 016086E2 		add	r6, r6, #1	@ ivtmp.102, ivtmp.102,
 2499              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 2500              		.loc 1 198 13 view .LVU651
 2501 0b70 06005EE1 		cmp	lr, r6	@ n, ivtmp.102
 2502 0b74 F3FFFF0A 		beq	.L137		@,
 199:armwave.c     ****                 wave_word >>= 8;
 2503              		.loc 1 199 17 is_stmt 1 view .LVU652
 2504              	.LVL154:
 200:armwave.c     **** 
 2505              		.loc 1 200 17 view .LVU653
 2506              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2507              		.loc 1 202 19 is_stmt 0 view .LVU654
 2508 0b78 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2509              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 2510              		.loc 1 200 27 view .LVU655
 2511 0b7c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2512              	.LVL155:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2513              		.loc 1 202 17 is_stmt 1 view .LVU656
 2514              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2515              		.loc 1 202 19 is_stmt 0 view .LVU657
 2516 0b80 F9FFFF0A 		beq	.L138		@,
 2517              	.L154:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2518              		.loc 1 203 21 is_stmt 1 view .LVU658
 2519              	.LVL156:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2520              		.loc 1 204 21 view .LVU659
 205:armwave.c     **** 
 2521              		.loc 1 205 21 view .LVU660
 207:armwave.c     ****                     g = MIN(gg, 255);
 2522              		.loc 1 207 21 view .LVU661
 208:armwave.c     ****                     b = MIN(bb, 255);
 2523              		.loc 1 208 21 view .LVU662
 209:armwave.c     **** 
 2524              		.loc 1 209 21 view .LVU663
 212:armwave.c     **** 
 2525              		.loc 1 212 21 view .LVU664
 2526              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2527              		.loc 1 227 32 is_stmt 0 view .LVU665
 2528 0b84 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.102
 2529              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2530              		.loc 1 228 41 view .LVU666
 2531 0b88 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2532              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2533              		.loc 1 227 40 view .LVU667
 2534 0b8c 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2535              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2536              		.loc 1 228 41 view .LVU668
 2537 0b90 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2538              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 2539              		.loc 1 205 55 view .LVU669
 2540 0b94 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2541              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2542              		.loc 1 227 40 view .LVU670
 2543 0b98 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2544              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2545              		.loc 1 228 46 view .LVU671
 2546 0b9c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2547              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2548              		.loc 1 204 55 view .LVU672
 2549 0ba0 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2550              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 2551              		.loc 1 205 24 view .LVU673
 2552 0ba4 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2553              	.LVL157:
 2554              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 2555              		.loc 1 209 25 view .LVU674
 2556 0ba8 FF0053E3 		cmp	r3, #255	@ bb,
 2557              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2558              		.loc 1 204 24 view .LVU675
 2559 0bac 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2560              	.LVL158:
 2561              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 2562              		.loc 1 209 25 view .LVU676
 2563 0bb0 FF30A0A3 		movge	r3, #255	@ bb,
 2564              	.LVL159:
 2565              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2566              		.loc 1 227 40 view .LVU677
 2567 0bb4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2568              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2569              		.loc 1 228 46 view .LVU678
 2570 0bb8 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2571              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 2572              		.loc 1 208 25 view .LVU679
 2573 0bbc FF0052E3 		cmp	r2, #255	@ gg,
 2574 0bc0 FF20A0A3 		movge	r2, #255	@ gg,
 2575              	.LVL160:
 2576              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2577              		.loc 1 203 55 view .LVU680
 2578 0bc4 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2579              	.LVL161:
 2580              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2581              		.loc 1 212 56 view .LVU681
 2582 0bc8 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2583              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2584              		.loc 1 212 44 view .LVU682
 2585 0bcc 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2586              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2587              		.loc 1 227 24 view .LVU683
 2588 0bd0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2589              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2590              		.loc 1 203 24 view .LVU684
 2591 0bd4 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2592              	.LVL162:
 2593              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2594              		.loc 1 212 56 view .LVU685
 2595 0bd8 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2596              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2597              		.loc 1 212 44 view .LVU686
 2598 0bdc FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2599              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 2600              		.loc 1 207 25 view .LVU687
 2601 0be0 FF0051E3 		cmp	r1, #255	@ rr,
 2602              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2603              		.loc 1 212 51 view .LVU688
 2604 0be4 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2605              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 2606              		.loc 1 207 25 view .LVU689
 2607 0be8 FF10A0A3 		movge	r1, #255	@ rr,
 2608              	.LVL163:
 2609              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2610              		.loc 1 227 24 view .LVU690
 2611 0bec 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2612              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2613              		.loc 1 228 24 view .LVU691
 2614 0bf0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2615              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2616              		.loc 1 212 62 view .LVU692
 2617 0bf4 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2618 0bf8 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2619              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2620              		.loc 1 212 26 view .LVU693
 2621 0bfc FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2622              	.LVL164:
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2623              		.loc 1 226 21 is_stmt 1 view .LVU694
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2624              		.loc 1 227 21 view .LVU695
 228:armwave.c     ****                     xx = (nsub >> 8);
 2625              		.loc 1 228 21 view .LVU696
 229:armwave.c     **** 
 2626              		.loc 1 229 21 view .LVU697
 2627              	@ armwave.c:229:                     xx = (nsub >> 8);
 229:armwave.c     **** 
 2628              		.loc 1 229 32 is_stmt 0 view .LVU698
 2629 0c00 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.102,
 2630              	.LVL165:
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2631              		.loc 1 231 21 is_stmt 1 view .LVU699
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2632              		.loc 1 231 21 is_stmt 0 view .LVU700
 2633 0c04 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2634              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2635              		.loc 1 228 24 view .LVU701
 2636 0c08 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2637              	.LVL166:
 2638              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2639              		.loc 1 231 21 view .LVU702
 2640 0c0c 020054E1 		cmp	r4, r2	@ yy, ye
 2641 0c10 D5FFFF2A 		bcs	.L138		@,
 2642 0c14 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2643              	.LVL167:
 2644              	.L139:
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2645              		.loc 1 232 25 is_stmt 1 view .LVU703
 233:armwave.c     ****                     }
 2646              		.loc 1 233 25 view .LVU704
 2647              	@ armwave.c:232:                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2648              		.loc 1 232 43 is_stmt 0 view .LVU705
 2649 0c18 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2650              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2651              		.loc 1 231 21 view .LVU706
 2652 0c1c 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2653              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 2654              		.loc 1 233 43 view .LVU707
 2655 0c20 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2656              	.LVL168:
 2657              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2658              		.loc 1 231 42 view .LVU708
 2659 0c24 014084E2 		add	r4, r4, #1	@ yy, yy,
 2660              	.LVL169:
 2661              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2662              		.loc 1 231 21 view .LVU709
 2663 0c28 040050E1 		cmp	r0, r4	@ ye, yy
 2664              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 2665              		.loc 1 233 53 view .LVU710
 2666 0c2c 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2667              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2668              		.loc 1 231 21 view .LVU711
 2669 0c30 F8FFFF1A 		bne	.L139		@,
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2670              		.loc 1 231 21 view .LVU712
 2671 0c34 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2672 0c38 CBFFFFEA 		b	.L138		@
 2673              	.LVL170:
 2674              	.L153:
 183:armwave.c     **** 
 2675              		.loc 1 183 5 is_stmt 1 view .LVU713
 2676 0c3c 10309FE5 		ldr	r3, .L155+4	@,
 2677 0c40 B720A0E3 		mov	r2, #183	@,
 2678 0c44 0C109FE5 		ldr	r1, .L155+8	@,
 2679 0c48 0C009FE5 		ldr	r0, .L155+12	@,
 2680 0c4c FEFFFFEB 		bl	__assert_fail		@
 2681              	.LVL171:
 2682              	.L156:
 2683              		.align	2
 2684              	.L155:
 2685 0c50 00000000 		.word	g_armwave_state
 2686 0c54 00000000 		.word	.LANCHOR0
 2687 0c58 20000000 		.word	.LC2
 2688 0c5c 2C000000 		.word	.LC3
 2689              	.LBE35:
 2690              	.LBE36:
 2691              		.cfi_endproc
 2692              	.LFE70:
 2694              		.align	2
 2695              		.global	armwave_test_dump_buffer_to_ppm
 2696              		.syntax unified
 2697              		.arm
 2698              		.fpu vfp
 2700              	armwave_test_dump_buffer_to_ppm:
 2701              	.LVL172:
 2702              	.LFB71:
 462:armwave.c     **** 
 463:armwave.c     **** /*
 464:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 465:armwave.c     ****  */
 466:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 467:armwave.c     **** {
 2703              		.loc 1 467 1 view -0
 2704              		.cfi_startproc
 2705              		@ args = 0, pretend = 0, frame = 0
 2706              		@ frame_needed = 0, uses_anonymous_args = 0
 2707              		@ link register save eliminated.
 468:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2708              		.loc 1 468 5 view .LVU715
 2709 0c60 08309FE5 		ldr	r3, .L158	@ tmp112,
 2710 0c64 0010A0E1 		mov	r1, r0	@, fn
 2711 0c68 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2712              	.LVL173:
 2713              		.loc 1 468 5 is_stmt 0 view .LVU716
 2714 0c6c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2715              	.LVL174:
 2716              	.L159:
 2717              		.loc 1 468 5 view .LVU717
 2718              		.align	2
 2719              	.L158:
 2720 0c70 00000000 		.word	g_armwave_state
 2721              		.cfi_endproc
 2722              	.LFE71:
 2724              		.align	2
 2725              		.global	armwave_test_fill_gdkbuf
 2726              		.syntax unified
 2727              		.arm
 2728              		.fpu vfp
 2730              	armwave_test_fill_gdkbuf:
 2731              	.LVL175:
 2732              	.LFB72:
 469:armwave.c     **** }
 470:armwave.c     **** 
 471:armwave.c     **** /*
 472:armwave.c     ****  * Render GDK buffer with test funtionry.
 473:armwave.c     ****  */
 474:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 475:armwave.c     **** {
 2733              		.loc 1 475 1 is_stmt 1 view -0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 8
 2736              		@ frame_needed = 0, uses_anonymous_args = 0
 476:armwave.c     ****     //PyObject *mv;
 477:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 478:armwave.c     **** 
 479:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 480:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2737              		.loc 1 480 5 view .LVU719
 2738              	@ armwave.c:480:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2739              		.loc 1 480 11 is_stmt 0 view .LVU720
 2740 0c74 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2741              	@ armwave.c:475: {
 475:armwave.c     ****     //PyObject *mv;
 2742              		.loc 1 475 1 view .LVU721
 2743 0c78 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2744              		.cfi_def_cfa_offset 36
 2745              		.cfi_offset 4, -36
 2746              		.cfi_offset 5, -32
 2747              		.cfi_offset 6, -28
 2748              		.cfi_offset 7, -24
 2749              		.cfi_offset 8, -20
 2750              		.cfi_offset 9, -16
 2751              		.cfi_offset 10, -12
 2752              		.cfi_offset 11, -8
 2753              		.cfi_offset 14, -4
 2754 0c7c 0CD04DE2 		sub	sp, sp, #12	@,,
 2755              		.cfi_def_cfa_offset 48
 2756              	.LBB39:
 2757              	.LBB40:
 2758              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2759              		.loc 1 179 15 view .LVU722
 2760 0c80 48519FE5 		ldr	r5, .L181	@ tmp206,
 2761              	.LBE40:
 2762              	.LBE39:
 2763              	@ armwave.c:480:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2764              		.loc 1 480 11 view .LVU723
 2765 0c84 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2766              	.LVL176:
 481:armwave.c     ****     
 482:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 483:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2767              		.loc 1 483 5 is_stmt 1 view .LVU724
 2768              	.LBB43:
 2769              	.LBI39:
 172:armwave.c     **** {
 2770              		.loc 1 172 6 view .LVU725
 2771              	.LBB41:
 174:armwave.c     ****     // uint32_t ysub;
 2772              		.loc 1 174 5 view .LVU726
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2773              		.loc 1 176 5 view .LVU727
 177:armwave.c     ****     // uint8_t row;
 2774              		.loc 1 177 5 view .LVU728
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2775              		.loc 1 179 5 view .LVU729
 2776              	@ armwave.c:183:     assert(out_buffer != NULL);
 183:armwave.c     **** 
 2777              		.loc 1 183 5 is_stmt 0 view .LVU730
 2778 0c88 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2779              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2780              		.loc 1 179 15 view .LVU731
 2781 0c8c 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2782              	.LVL177:
 180:armwave.c     ****     uint32_t offset;
 2783              		.loc 1 180 5 is_stmt 1 view .LVU732
 181:armwave.c     **** 
 2784              		.loc 1 181 5 view .LVU733
 183:armwave.c     **** 
 2785              		.loc 1 183 5 view .LVU734
 2786 0c90 4900000A 		beq	.L179		@,
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2787              		.loc 1 188 5 view .LVU735
 2788              	@ armwave.c:188:     npix = g_armwave_state.target_width * 256; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2789              		.loc 1 188 10 is_stmt 0 view .LVU736
 2790 0c94 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2791 0c98 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2792              	.LVL178:
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2793              		.loc 1 191 5 is_stmt 1 view .LVU737
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2794              		.loc 1 191 5 is_stmt 0 view .LVU738
 2795 0c9c 000057E3 		cmp	r7, #0	@ npix,
 2796 0ca0 0A0000DA 		ble	.L160		@,
 2797              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2798              		.loc 1 203 52 view .LVU739
 2799 0ca4 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2800              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2801              		.loc 1 204 52 view .LVU740
 2802 0ca8 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2803              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 2804              		.loc 1 205 52 view .LVU741
 2805 0cac F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2806              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2807              		.loc 1 227 57 view .LVU742
 2808 0cb0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2809              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2810              		.loc 1 191 11 view .LVU743
 2811 0cb4 00C0A0E3 		mov	ip, #0	@ n,
 2812              	.LVL179:
 2813              	.L167:
 195:armwave.c     **** 
 2814              		.loc 1 195 9 is_stmt 1 view .LVU744
 2815              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 2816              		.loc 1 195 19 is_stmt 0 view .LVU745
 2817 0cb8 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2818              	.LVL180:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 2819              		.loc 1 197 9 is_stmt 1 view .LVU746
 2820              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 2821              		.loc 1 197 11 is_stmt 0 view .LVU747
 2822 0cbc 000050E3 		cmp	r0, #0	@ wave_word,
 2823 0cc0 0400001A 		bne	.L176		@,
 2824 0cc4 04C08CE2 		add	ip, ip, #4	@ n, n,
 2825              	.L163:
 2826              	.LVL181:
 2827              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2828              		.loc 1 191 5 view .LVU748
 2829 0cc8 0C0057E1 		cmp	r7, ip	@ npix, n
 2830 0ccc F9FFFFCA 		bgt	.L167		@,
 2831              	.LVL182:
 2832              	.L160:
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2833              		.loc 1 191 5 view .LVU749
 2834              	.LBE41:
 2835              	.LBE43:
 2836              	@ armwave.c:484: }
 484:armwave.c     **** }
 2837              		.loc 1 484 1 view .LVU750
 2838 0cd0 0CD08DE2 		add	sp, sp, #12	@,,
 2839              		.cfi_remember_state
 2840              		.cfi_def_cfa_offset 36
 2841              		@ sp needed	@
 2842 0cd4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2843              	.LVL183:
 2844              	.L176:
 2845              		.cfi_restore_state
 2846              	.LBB44:
 2847              	.LBB42:
 2848              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2849              		.loc 1 202 19 view .LVU751
 2850 0cd8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2851              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 2852              		.loc 1 197 11 view .LVU752
 2853 0cdc 0C60A0E1 		mov	r6, ip	@ ivtmp.118, n
 2854              	.LVL184:
 199:armwave.c     ****                 wave_word >>= 8;
 2855              		.loc 1 199 17 is_stmt 1 view .LVU753
 200:armwave.c     **** 
 2856              		.loc 1 200 17 view .LVU754
 2857              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 2858              		.loc 1 200 27 is_stmt 0 view .LVU755
 2859 0ce0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2860              	.LVL185:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2861              		.loc 1 202 17 is_stmt 1 view .LVU756
 2862 0ce4 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.118,
 2863              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2864              		.loc 1 202 19 is_stmt 0 view .LVU757
 2865 0ce8 0500001A 		bne	.L180		@,
 2866              	.LVL186:
 2867              	.L164:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2868              		.loc 1 202 19 view .LVU758
 2869 0cec 016086E2 		add	r6, r6, #1	@ ivtmp.118, ivtmp.118,
 2870              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 2871              		.loc 1 198 13 view .LVU759
 2872 0cf0 06005CE1 		cmp	ip, r6	@ n, ivtmp.118
 2873 0cf4 F3FFFF0A 		beq	.L163		@,
 199:armwave.c     ****                 wave_word >>= 8;
 2874              		.loc 1 199 17 is_stmt 1 view .LVU760
 2875              	.LVL187:
 200:armwave.c     **** 
 2876              		.loc 1 200 17 view .LVU761
 2877              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2878              		.loc 1 202 19 is_stmt 0 view .LVU762
 2879 0cf8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2880              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 2881              		.loc 1 200 27 view .LVU763
 2882 0cfc 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2883              	.LVL188:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2884              		.loc 1 202 17 is_stmt 1 view .LVU764
 2885              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2886              		.loc 1 202 19 is_stmt 0 view .LVU765
 2887 0d00 F9FFFF0A 		beq	.L164		@,
 2888              	.L180:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2889              		.loc 1 203 21 is_stmt 1 view .LVU766
 2890              	.LVL189:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2891              		.loc 1 204 21 view .LVU767
 205:armwave.c     **** 
 2892              		.loc 1 205 21 view .LVU768
 207:armwave.c     ****                     g = MIN(gg, 255);
 2893              		.loc 1 207 21 view .LVU769
 208:armwave.c     ****                     b = MIN(bb, 255);
 2894              		.loc 1 208 21 view .LVU770
 209:armwave.c     **** 
 2895              		.loc 1 209 21 view .LVU771
 212:armwave.c     **** 
 2896              		.loc 1 212 21 view .LVU772
 2897              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2898              		.loc 1 227 32 is_stmt 0 view .LVU773
 2899 0d04 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.118
 2900              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2901              		.loc 1 228 41 view .LVU774
 2902 0d08 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2903              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2904              		.loc 1 227 40 view .LVU775
 2905 0d0c 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2906              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2907              		.loc 1 228 41 view .LVU776
 2908 0d10 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2909              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 2910              		.loc 1 205 55 view .LVU777
 2911 0d14 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2912              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2913              		.loc 1 227 40 view .LVU778
 2914 0d18 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2915              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2916              		.loc 1 228 46 view .LVU779
 2917 0d1c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2918              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2919              		.loc 1 204 55 view .LVU780
 2920 0d20 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2921              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 2922              		.loc 1 205 24 view .LVU781
 2923 0d24 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2924              	.LVL190:
 2925              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 2926              		.loc 1 209 25 view .LVU782
 2927 0d28 FF0053E3 		cmp	r3, #255	@ bb,
 2928              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2929              		.loc 1 204 24 view .LVU783
 2930 0d2c 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2931              	.LVL191:
 2932              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 2933              		.loc 1 209 25 view .LVU784
 2934 0d30 FF30A0A3 		movge	r3, #255	@ bb,
 2935              	.LVL192:
 2936              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2937              		.loc 1 227 40 view .LVU785
 2938 0d34 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2939              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2940              		.loc 1 228 46 view .LVU786
 2941 0d38 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2942              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 2943              		.loc 1 208 25 view .LVU787
 2944 0d3c FF0052E3 		cmp	r2, #255	@ gg,
 2945 0d40 FF20A0A3 		movge	r2, #255	@ gg,
 2946              	.LVL193:
 2947              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2948              		.loc 1 203 55 view .LVU788
 2949 0d44 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2950              	.LVL194:
 2951              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2952              		.loc 1 212 56 view .LVU789
 2953 0d48 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2954              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2955              		.loc 1 212 44 view .LVU790
 2956 0d4c 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2957              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2958              		.loc 1 227 24 view .LVU791
 2959 0d50 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2960              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2961              		.loc 1 203 24 view .LVU792
 2962 0d54 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2963              	.LVL195:
 2964              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2965              		.loc 1 212 56 view .LVU793
 2966 0d58 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2967              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2968              		.loc 1 212 44 view .LVU794
 2969 0d5c FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2970              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 2971              		.loc 1 207 25 view .LVU795
 2972 0d60 FF0051E3 		cmp	r1, #255	@ rr,
 2973              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2974              		.loc 1 212 51 view .LVU796
 2975 0d64 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2976              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 2977              		.loc 1 207 25 view .LVU797
 2978 0d68 FF10A0A3 		movge	r1, #255	@ rr,
 2979              	.LVL196:
 2980              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2981              		.loc 1 227 24 view .LVU798
 2982 0d6c 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2983              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 2984              		.loc 1 228 24 view .LVU799
 2985 0d70 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2986              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2987              		.loc 1 212 62 view .LVU800
 2988 0d74 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2989 0d78 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2990              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 2991              		.loc 1 212 26 view .LVU801
 2992 0d7c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2993              	.LVL197:
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2994              		.loc 1 226 21 is_stmt 1 view .LVU802
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2995              		.loc 1 227 21 view .LVU803
 228:armwave.c     ****                     xx = (nsub >> 8);
 2996              		.loc 1 228 21 view .LVU804
 229:armwave.c     **** 
 2997              		.loc 1 229 21 view .LVU805
 2998              	@ armwave.c:229:                     xx = (nsub >> 8);
 229:armwave.c     **** 
 2999              		.loc 1 229 32 is_stmt 0 view .LVU806
 3000 0d80 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.118,
 3001              	.LVL198:
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3002              		.loc 1 231 21 is_stmt 1 view .LVU807
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3003              		.loc 1 231 21 is_stmt 0 view .LVU808
 3004 0d84 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3005              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 3006              		.loc 1 228 24 view .LVU809
 3007 0d88 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3008              	.LVL199:
 3009              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3010              		.loc 1 231 21 view .LVU810
 3011 0d8c 02005EE1 		cmp	lr, r2	@ yy, ye
 3012 0d90 D5FFFF2A 		bcs	.L164		@,
 3013 0d94 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3014              	.LVL200:
 3015              	.L165:
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3016              		.loc 1 232 25 is_stmt 1 view .LVU811
 233:armwave.c     ****                     }
 3017              		.loc 1 233 25 view .LVU812
 3018              	@ armwave.c:232:                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3019              		.loc 1 232 43 is_stmt 0 view .LVU813
 3020 0d98 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3021              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3022              		.loc 1 231 21 view .LVU814
 3023 0d9c 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3024              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 3025              		.loc 1 233 43 view .LVU815
 3026 0da0 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 3027              	.LVL201:
 3028              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3029              		.loc 1 231 42 view .LVU816
 3030 0da4 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 3031              	.LVL202:
 3032              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3033              		.loc 1 231 21 view .LVU817
 3034 0da8 0E0050E1 		cmp	r0, lr	@ ye, yy
 3035              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 3036              		.loc 1 233 53 view .LVU818
 3037 0dac 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3038              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3039              		.loc 1 231 21 view .LVU819
 3040 0db0 F8FFFF1A 		bne	.L165		@,
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3041              		.loc 1 231 21 view .LVU820
 3042 0db4 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3043 0db8 CBFFFFEA 		b	.L164		@
 3044              	.LVL203:
 3045              	.L179:
 183:armwave.c     **** 
 3046              		.loc 1 183 5 is_stmt 1 view .LVU821
 3047 0dbc 10309FE5 		ldr	r3, .L181+4	@,
 3048 0dc0 B720A0E3 		mov	r2, #183	@,
 3049 0dc4 0C109FE5 		ldr	r1, .L181+8	@,
 3050 0dc8 0C009FE5 		ldr	r0, .L181+12	@,
 3051              	.LVL204:
 183:armwave.c     **** 
 3052              		.loc 1 183 5 is_stmt 0 view .LVU822
 3053 0dcc FEFFFFEB 		bl	__assert_fail		@
 3054              	.LVL205:
 3055              	.L182:
 3056              		.align	2
 3057              	.L181:
 3058 0dd0 00000000 		.word	g_armwave_state
 3059 0dd4 00000000 		.word	.LANCHOR0
 3060 0dd8 20000000 		.word	.LC2
 3061 0ddc 2C000000 		.word	.LC3
 3062              	.LBE42:
 3063              	.LBE44:
 3064              		.cfi_endproc
 3065              	.LFE72:
 3067              		.align	2
 3068              		.global	armwave_test_buffer_alloc
 3069              		.syntax unified
 3070              		.arm
 3071              		.fpu vfp
 3073              	armwave_test_buffer_alloc:
 3074              	.LVL206:
 3075              	.LFB73:
 485:armwave.c     **** 
 486:armwave.c     **** /*
 487:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 488:armwave.c     ****  */
 489:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 490:armwave.c     **** {
 3076              		.loc 1 490 1 is_stmt 1 view -0
 3077              		.cfi_startproc
 3078              		@ args = 0, pretend = 0, frame = 0
 3079              		@ frame_needed = 0, uses_anonymous_args = 0
 491:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3080              		.loc 1 491 5 view .LVU824
 3081              	@ armwave.c:490: {
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3082              		.loc 1 490 1 is_stmt 0 view .LVU825
 3083 0de0 70402DE9 		push	{r4, r5, r6, lr}	@
 3084              		.cfi_def_cfa_offset 16
 3085              		.cfi_offset 4, -16
 3086              		.cfi_offset 5, -12
 3087              		.cfi_offset 6, -8
 3088              		.cfi_offset 14, -4
 3089              	@ armwave.c:490: {
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3090              		.loc 1 490 1 view .LVU826
 3091 0de4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3092              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 3093              		.loc 1 491 23 view .LVU827
 3094 0de8 44409FE5 		ldr	r4, .L190	@ tmp128,
 3095 0dec 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3096              	.LVL207:
 3097              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 3098              		.loc 1 491 7 view .LVU828
 3099 0df0 000050E3 		cmp	r0, #0	@ _1,
 3100 0df4 0000000A 		beq	.L184		@,
 492:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3101              		.loc 1 492 9 is_stmt 1 view .LVU829
 3102 0df8 FEFFFFEB 		bl	free		@
 3103              	.LVL208:
 3104              	.L184:
 493:armwave.c     ****     }
 494:armwave.c     **** 
 495:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 496:armwave.c     **** 
 497:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3105              		.loc 1 497 5 view .LVU830
 3106              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3107              		.loc 1 497 75 is_stmt 0 view .LVU831
 3108 0dfc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3109 0e00 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3110              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3111              		.loc 1 497 40 view .LVU832
 3112 0e04 0610A0E1 		mov	r1, r6	@, nsets
 3113              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3114              		.loc 1 497 75 view .LVU833
 3115 0e08 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3116              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3117              		.loc 1 497 40 view .LVU834
 3118 0e0c 0500A0E1 		mov	r0, r5	@, _4
 3119 0e10 FEFFFFEB 		bl	calloc		@
 3120              	.LVL209:
 3121              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 498:armwave.c     **** 
 499:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3122              		.loc 1 499 7 view .LVU835
 3123 0e14 000050E3 		cmp	r0, #0	@ tmp124,
 3124              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 3125              		.loc 1 497 38 view .LVU836
 3126 0e18 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3127              		.loc 1 499 5 is_stmt 1 view .LVU837
 3128              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 3129              		.loc 1 499 7 is_stmt 0 view .LVU838
 3130 0e1c 7080BD18 		popne	{r4, r5, r6, pc}	@
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3131              		.loc 1 500 9 is_stmt 1 view .LVU839
 3132 0e20 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3133 0e24 0620A0E1 		mov	r2, r6	@, nsets
 3134 0e28 08009FE5 		ldr	r0, .L190+4	@,
 3135              	@ armwave.c:504: }
 501:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 502:armwave.c     ****         return;
 503:armwave.c     ****     }
 504:armwave.c     **** }
 3136              		.loc 1 504 1 is_stmt 0 view .LVU840
 3137 0e2c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3138              		.cfi_restore 14
 3139              		.cfi_restore 6
 3140              		.cfi_restore 5
 3141              		.cfi_restore 4
 3142              		.cfi_def_cfa_offset 0
 3143              	.LVL210:
 3144              	@ armwave.c:500:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3145              		.loc 1 500 9 view .LVU841
 3146 0e30 FEFFFFEA 		b	printf		@
 3147              	.LVL211:
 3148              	.L191:
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3149              		.loc 1 500 9 view .LVU842
 3150              		.align	2
 3151              	.L190:
 3152 0e34 00000000 		.word	g_armwave_state
 3153 0e38 E8010000 		.word	.LC18
 3154              		.cfi_endproc
 3155              	.LFE73:
 3157              		.align	2
 3158              		.global	armwave_fill_pixbuf_into_pybuffer
 3159              		.syntax unified
 3160              		.arm
 3161              		.fpu vfp
 3163              	armwave_fill_pixbuf_into_pybuffer:
 3164              	.LVL212:
 3165              	.LFB74:
 505:armwave.c     **** 
 506:armwave.c     **** /*
 507:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 508:armwave.c     ****  */
 509:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 510:armwave.c     **** {
 3166              		.loc 1 510 1 is_stmt 1 view -0
 3167              		.cfi_startproc
 3168              		@ args = 0, pretend = 0, frame = 48
 3169              		@ frame_needed = 0, uses_anonymous_args = 0
 511:armwave.c     ****     Py_buffer buffer;
 3170              		.loc 1 511 5 view .LVU844
 512:armwave.c     ****     int ret;
 3171              		.loc 1 512 5 view .LVU845
 513:armwave.c     **** 
 514:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 515:armwave.c     **** 
 516:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3172              		.loc 1 516 5 view .LVU846
 3173              	@ armwave.c:510: {
 510:armwave.c     ****     Py_buffer buffer;
 3174              		.loc 1 510 1 is_stmt 0 view .LVU847
 3175 0e3c 04E02DE5 		str	lr, [sp, #-4]!	@,
 3176              		.cfi_def_cfa_offset 4
 3177              		.cfi_offset 14, -4
 3178 0e40 34D04DE2 		sub	sp, sp, #52	@,,
 3179              		.cfi_def_cfa_offset 56
 3180              	@ armwave.c:516:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3181              		.loc 1 516 11 view .LVU848
 3182 0e44 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3183 0e48 0120A0E3 		mov	r2, #1	@,
 3184 0e4c FEFFFFEB 		bl	PyObject_GetBuffer		@
 3185              	.LVL213:
 517:armwave.c     **** 
 518:armwave.c     ****     if(ret != 0) {
 3186              		.loc 1 518 5 is_stmt 1 view .LVU849
 3187              	@ armwave.c:518:     if(ret != 0) {
 3188              		.loc 1 518 7 is_stmt 0 view .LVU850
 3189 0e50 000050E3 		cmp	r0, #0	@,
 3190 0e54 0A00001A 		bne	.L196		@,
 519:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 520:armwave.c     ****         Py_RETURN_FALSE;
 521:armwave.c     ****     }
 522:armwave.c     **** 
 523:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 524:armwave.c     **** 
 525:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3191              		.loc 1 525 5 is_stmt 1 view .LVU851
 3192 0e58 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3193              	.LVL214:
 3194              		.loc 1 525 5 is_stmt 0 view .LVU852
 3195 0e5c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3196              	.LVL215:
 526:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 527:armwave.c     **** 
 528:armwave.c     ****     PyBuffer_Release(&buffer);
 3197              		.loc 1 528 5 is_stmt 1 view .LVU853
 3198 0e60 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3199 0e64 FEFFFFEB 		bl	PyBuffer_Release		@
 3200              	.LVL216:
 529:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 530:armwave.c     **** 
 531:armwave.c     ****     Py_RETURN_TRUE;
 3201              		.loc 1 531 5 view .LVU854
 3202              	.LBB45:
 3203              	.LBI45:
 3204              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3205              		.loc 2 456 20 view .LVU855
 3206              	.LBB46:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3207              		.loc 2 458 21 view .LVU856
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3208              		.loc 2 459 5 view .LVU857
 3209              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3210              		.loc 2 459 18 is_stmt 0 view .LVU858
 3211 0e68 38309FE5 		ldr	r3, .L197	@ tmp126,
 3212              	.LBE46:
 3213              	.LBE45:
 3214              	@ armwave.c:531:     Py_RETURN_TRUE;
 3215              		.loc 1 531 5 view .LVU859
 3216 0e6c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3217              	.LBB48:
 3218              	.LBB47:
 3219              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3220              		.loc 2 459 18 view .LVU860
 3221 0e70 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3222 0e74 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3223 0e78 002083E5 		str	r2, [r3]	@ tmp128,
 3224              	.LBE47:
 3225              	.LBE48:
 3226              	@ armwave.c:532: }
 532:armwave.c     **** }
 3227              		.loc 1 532 1 view .LVU861
 3228 0e7c 34D08DE2 		add	sp, sp, #52	@,,
 3229              		.cfi_remember_state
 3230              		.cfi_def_cfa_offset 4
 3231              		@ sp needed	@
 3232 0e80 04F09DE4 		ldr	pc, [sp], #4	@
 3233              	.LVL217:
 3234              	.L196:
 3235              		.cfi_restore_state
 519:armwave.c     ****         Py_RETURN_FALSE;
 3236              		.loc 1 519 9 is_stmt 1 view .LVU862
 3237 0e84 20009FE5 		ldr	r0, .L197+4	@,
 3238              	.LVL218:
 519:armwave.c     ****         Py_RETURN_FALSE;
 3239              		.loc 1 519 9 is_stmt 0 view .LVU863
 3240 0e88 FEFFFFEB 		bl	puts		@
 3241              	.LVL219:
 520:armwave.c     ****     }
 3242              		.loc 1 520 9 is_stmt 1 view .LVU864
 3243              	.LBB49:
 3244              	.LBI49:
 456:/usr/local/include/python3.8/object.h **** {
 3245              		.loc 2 456 20 view .LVU865
 3246              	.LBB50:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3247              		.loc 2 458 21 view .LVU866
 3248              		.loc 2 459 5 view .LVU867
 3249              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3250              		.loc 2 459 18 is_stmt 0 view .LVU868
 3251 0e8c 1C309FE5 		ldr	r3, .L197+8	@ tmp120,
 3252              	.LBE50:
 3253              	.LBE49:
 3254              	@ armwave.c:520:         Py_RETURN_FALSE;
 520:armwave.c     ****     }
 3255              		.loc 1 520 9 view .LVU869
 3256 0e90 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3257              	.LBB52:
 3258              	.LBB51:
 3259              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3260              		.loc 2 459 18 view .LVU870
 3261 0e94 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3262 0e98 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3263 0e9c 002083E5 		str	r2, [r3]	@ tmp122,
 3264              	.LBE51:
 3265              	.LBE52:
 3266              	@ armwave.c:532: }
 3267              		.loc 1 532 1 view .LVU871
 3268 0ea0 34D08DE2 		add	sp, sp, #52	@,,
 3269              		.cfi_def_cfa_offset 4
 3270              		@ sp needed	@
 3271 0ea4 04F09DE4 		ldr	pc, [sp], #4	@
 3272              	.L198:
 3273              		.align	2
 3274              	.L197:
 3275 0ea8 00000000 		.word	_Py_TrueStruct
 3276 0eac 3C020000 		.word	.LC19
 3277 0eb0 00000000 		.word	_Py_FalseStruct
 3278              		.cfi_endproc
 3279              	.LFE74:
 3281              		.align	2
 3282              		.global	armwave_test_create_am_sine
 3283              		.syntax unified
 3284              		.arm
 3285              		.fpu vfp
 3287              	armwave_test_create_am_sine:
 3288              	.LVL220:
 3289              	.LFB75:
 533:armwave.c     **** 
 534:armwave.c     **** /*
 535:armwave.c     ****  * Make a test AM waveform for render tests.
 536:armwave.c     ****  *
 537:armwave.c     ****  * @param   mod                     modulation depth
 538:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 539:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 540:armwave.c     ****  */
 541:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 542:armwave.c     **** {
 3290              		.loc 1 542 1 is_stmt 1 view -0
 3291              		.cfi_startproc
 3292              		@ args = 0, pretend = 0, frame = 8
 3293              		@ frame_needed = 0, uses_anonymous_args = 0
 543:armwave.c     ****     float v, noise, xnoise, mod_val;
 3294              		.loc 1 543 5 view .LVU873
 544:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3295              		.loc 1 544 5 view .LVU874
 3296              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 3297              		.loc 1 542 1 is_stmt 0 view .LVU875
 3298 0eb4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3299              		.cfi_def_cfa_offset 32
 3300              		.cfi_offset 4, -32
 3301              		.cfi_offset 5, -28
 3302              		.cfi_offset 6, -24
 3303              		.cfi_offset 7, -20
 3304              		.cfi_offset 8, -16
 3305              		.cfi_offset 9, -12
 3306              		.cfi_offset 10, -8
 3307              		.cfi_offset 14, -4
 3308              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3309              		.loc 1 544 38 view .LVU876
 3310 0eb8 7A7A9FED 		vldr.32	s14, .L230	@ tmp180,
 3311              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3312              		.loc 1 544 55 view .LVU877
 3313 0ebc 00529FE5 		ldr	r5, .L230+28	@ tmp250,
 3314              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 3315              		.loc 1 542 1 view .LVU878
 3316 0ec0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3317              		.cfi_def_cfa_offset 80
 3318              		.cfi_offset 80, -80
 3319              		.cfi_offset 81, -76
 3320              		.cfi_offset 82, -72
 3321              		.cfi_offset 83, -68
 3322              		.cfi_offset 84, -64
 3323              		.cfi_offset 85, -60
 3324              		.cfi_offset 86, -56
 3325              		.cfi_offset 87, -52
 3326              		.cfi_offset 88, -48
 3327              		.cfi_offset 89, -44
 3328              		.cfi_offset 90, -40
 3329              		.cfi_offset 91, -36
 3330 0ec4 0090A0E1 		mov	r9, r0	@ sets, sets
 3331              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3332              		.loc 1 544 38 view .LVU879
 3333 0ec8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3334              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 545:armwave.c     ****     int s, set_offset = 0;
 546:armwave.c     ****     int w, x;
 547:armwave.c     **** 
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3335              		.loc 1 548 70 view .LVU880
 3336 0ecc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3337 0ed0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3338              	.LBB55:
 3339              	.LBB56:
 3340              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3341              		.loc 1 491 23 view .LVU881
 3342 0ed4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3343              	.LVL221:
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3344              		.loc 1 491 23 view .LVU882
 3345              	.LBE56:
 3346              	.LBE55:
 3347              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 3348              		.loc 1 544 38 view .LVU883
 3349 0ed8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3350              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3351              		.loc 1 548 70 view .LVU884
 3352 0edc 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3353              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 3354              		.loc 1 542 1 view .LVU885
 3355 0ee0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3356              	.LBB60:
 3357              	.LBB57:
 3358              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3359              		.loc 1 491 7 view .LVU886
 3360 0ee4 000050E3 		cmp	r0, #0	@ _82,
 3361              	.LBE57:
 3362              	.LBE60:
 3363              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 3364              		.loc 1 542 1 view .LVU887
 3365 0ee8 08D04DE2 		sub	sp, sp, #8	@,,
 3366              		.cfi_def_cfa_offset 88
 3367              	@ armwave.c:549:     g_armwave_state.test_wave_buffer_nsets = sets;
 549:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3368              		.loc 1 549 44 view .LVU888
 3369 0eec 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3370              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3371              		.loc 1 548 45 view .LVU889
 3372 0ef0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3373              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 3374              		.loc 1 544 38 view .LVU890
 3375 0ef4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3376              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 3377              		.loc 1 544 11 view .LVU891
 3378 0ef8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3379              	.LVL222:
 545:armwave.c     ****     int w, x;
 3380              		.loc 1 545 5 is_stmt 1 view .LVU892
 546:armwave.c     **** 
 3381              		.loc 1 546 5 view .LVU893
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3382              		.loc 1 548 5 view .LVU894
 3383              		.loc 1 549 5 view .LVU895
 550:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3384              		.loc 1 550 5 view .LVU896
 3385              	.LBB61:
 3386              	.LBI55:
 489:armwave.c     **** {
 3387              		.loc 1 489 6 view .LVU897
 3388              	.LBB58:
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3389              		.loc 1 491 5 view .LVU898
 3390              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3391              		.loc 1 491 7 is_stmt 0 view .LVU899
 3392 0efc 0000000A 		beq	.L200		@,
 492:armwave.c     ****     }
 3393              		.loc 1 492 9 is_stmt 1 view .LVU900
 3394 0f00 FEFFFFEB 		bl	free		@
 3395              	.LVL223:
 3396              	.L200:
 497:armwave.c     **** 
 3397              		.loc 1 497 5 view .LVU901
 3398              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 3399              		.loc 1 497 75 is_stmt 0 view .LVU902
 3400 0f04 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3401 0f08 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3402              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 3403              		.loc 1 497 40 view .LVU903
 3404 0f0c 0910A0E1 		mov	r1, r9	@, sets
 3405              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 3406              		.loc 1 497 75 view .LVU904
 3407 0f10 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3408              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 3409              		.loc 1 497 40 view .LVU905
 3410 0f14 0400A0E1 		mov	r0, r4	@, _85
 3411 0f18 FEFFFFEB 		bl	calloc		@
 3412              	.LVL224:
 3413              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3414              		.loc 1 499 7 view .LVU906
 3415 0f1c 000050E3 		cmp	r0, #0	@ tmp191,
 3416              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 3417              		.loc 1 497 38 view .LVU907
 3418 0f20 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3419              		.loc 1 499 5 is_stmt 1 view .LVU908
 3420              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3421              		.loc 1 499 7 is_stmt 0 view .LVU909
 3422 0f24 5A00000A 		beq	.L229		@,
 3423              	.L201:
 3424              	.LVL225:
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3425              		.loc 1 499 7 view .LVU910
 3426              	.LBE58:
 3427              	.LBE61:
 3428              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 551:armwave.c     **** 
 552:armwave.c     ****     for(s = 0; s < sets; s++) {
 3429              		.loc 1 552 5 discriminator 1 view .LVU911
 3430 0f28 000059E3 		cmp	r9, #0	@ sets,
 3431 0f2c 550000DA 		ble	.L199		@,
 3432              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 554:armwave.c     ****     
 555:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 556:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 557:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 558:armwave.c     **** 
 559:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 560:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 561:armwave.c     ****                 noise *= noise;
 562:armwave.c     ****                 noise *= noise;
 563:armwave.c     ****                 noise *= noise;
 564:armwave.c     **** 
 565:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 566:armwave.c     ****                     noise = -noise;
 567:armwave.c     **** 
 568:armwave.c     ****                 noise += 1.0f;
 569:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 570:armwave.c     **** 
 571:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3433              		.loc 1 571 45 view .LVU912
 3434 0f30 5C8A9FED 		vldr.32	s16, .L230	@ tmp258,
 3435              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 572:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 573:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 574:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3436              		.loc 1 574 104 view .LVU913
 3437 0f34 5CCA9FED 		vldr.32	s24, .L230+4	@ tmp259,
 3438              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3439              		.loc 1 552 5 view .LVU914
 3440 0f38 0070A0E3 		mov	r7, #0	@ set_offset,
 3441              	@ armwave.c:553:         printf("Calculating test set %d\n", s);
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 3442              		.loc 1 553 9 view .LVU915
 3443 0f3c 84A19FE5 		ldr	r10, .L230+32	@ tmp257,
 3444              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3445              		.loc 1 552 5 view .LVU916
 3446 0f40 0780A0E1 		mov	r8, r7	@ s, set_offset
 3447              	.LVL226:
 3448              	.L202:
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 3449              		.loc 1 553 9 is_stmt 1 view .LVU917
 3450 0f44 0810A0E1 		mov	r1, r8	@, s
 3451 0f48 0A00A0E1 		mov	r0, r10	@, tmp257
 3452 0f4c FEFFFFEB 		bl	printf		@
 3453              	.LVL227:
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3454              		.loc 1 555 9 view .LVU918
 3455              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3456              		.loc 1 555 39 is_stmt 0 view .LVU919
 3457 0f50 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3458              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3459              		.loc 1 555 9 view .LVU920
 3460 0f54 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3461 0f58 450000DA 		ble	.L203		@,
 3462              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 3463              		.loc 1 557 21 view .LVU921
 3464 0f5c 53CADFED 		vldr.32	s25, .L230+8	@ tmp200,
 3465              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3466              		.loc 1 571 33 view .LVU922
 3467 0f60 53BA9FED 		vldr.32	s22, .L230+12	@ tmp253,
 3468              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 3469              		.loc 1 569 24 view .LVU923
 3470 0f64 53AADFED 		vldr.32	s21, .L230+16	@ tmp254,
 3471 0f68 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3472              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3473              		.loc 1 555 15 view .LVU924
 3474 0f6c 0060A0E3 		mov	r6, #0	@ w,
 3475              	.LVL228:
 3476              	.L210:
 557:armwave.c     **** 
 3477              		.loc 1 557 13 is_stmt 1 view .LVU925
 3478              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 3479              		.loc 1 557 21 is_stmt 0 view .LVU926
 3480 0f70 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3481 0f74 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3482              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3483              		.loc 1 559 13 view .LVU927
 3484 0f78 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3485              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 3486              		.loc 1 557 21 view .LVU928
 3487 0f7c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3488 0f80 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3489              	.LVL229:
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3490              		.loc 1 559 13 is_stmt 1 view .LVU929
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3491              		.loc 1 559 13 is_stmt 0 view .LVU930
 3492 0f84 370000DA 		ble	.L204		@,
 3493 0f88 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3494              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3495              		.loc 1 574 113 view .LVU931
 3496 0f8c 4AAA9FED 		vldr.32	s20, .L230+20	@ tmp229,
 3497 0f90 4A8ADFED 		vldr.32	s17, .L230+24	@ tmp230,
 3498              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3499              		.loc 1 559 19 view .LVU932
 3500 0f94 0040A0E3 		mov	r4, #0	@ x,
 3501              	.LVL230:
 3502              	.L209:
 560:armwave.c     ****                 noise *= noise;
 3503              		.loc 1 560 17 is_stmt 1 view .LVU933
 3504              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 3505              		.loc 1 560 28 is_stmt 0 view .LVU934
 3506 0f98 FEFFFFEB 		bl	rand		@
 3507              	.LVL231:
 3508              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 3509              		.loc 1 560 35 view .LVU935
 3510 0f9c 7000FFE6 		uxth	r0, r0	@ tmp201,
 3511              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 3512              		.loc 1 560 45 view .LVU936
 3513 0fa0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3514 0fa4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3515              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 3516              		.loc 1 560 24 view .LVU937
 3517 0fa8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3518              	.LVL232:
 561:armwave.c     ****                 noise *= noise;
 3519              		.loc 1 561 17 is_stmt 1 view .LVU938
 3520              	@ armwave.c:561:                 noise *= noise;
 561:armwave.c     ****                 noise *= noise;
 3521              		.loc 1 561 23 is_stmt 0 view .LVU939
 3522 0fac A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3523              	.LVL233:
 562:armwave.c     ****                 noise *= noise;
 3524              		.loc 1 562 17 is_stmt 1 view .LVU940
 3525              	@ armwave.c:562:                 noise *= noise;
 562:armwave.c     ****                 noise *= noise;
 3526              		.loc 1 562 23 is_stmt 0 view .LVU941
 3527 0fb0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3528              	.LVL234:
 563:armwave.c     **** 
 3529              		.loc 1 563 17 is_stmt 1 view .LVU942
 3530              	@ armwave.c:563:                 noise *= noise;
 563:armwave.c     **** 
 3531              		.loc 1 563 23 is_stmt 0 view .LVU943
 3532 0fb4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3533              	.LVL235:
 565:armwave.c     ****                     noise = -noise;
 3534              		.loc 1 565 17 is_stmt 1 view .LVU944
 3535              	@ armwave.c:565:                 if((rand() & 0xffff) > 0x7fff)
 565:armwave.c     ****                     noise = -noise;
 3536              		.loc 1 565 21 is_stmt 0 view .LVU945
 3537 0fb8 FEFFFFEB 		bl	rand		@
 3538              	.LVL236:
 566:armwave.c     **** 
 3539              		.loc 1 566 21 is_stmt 1 view .LVU946
 3540              	@ armwave.c:565:                 if((rand() & 0xffff) > 0x7fff)
 565:armwave.c     ****                     noise = -noise;
 3541              		.loc 1 565 19 is_stmt 0 view .LVU947
 3542 0fbc 020910E3 		tst	r0, #32768	@,
 3543              	@ armwave.c:566:                     noise = -noise;
 566:armwave.c     **** 
 3544              		.loc 1 566 27 view .LVU948
 3545 0fc0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3546              	.LVL237:
 568:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3547              		.loc 1 568 17 is_stmt 1 view .LVU949
 569:armwave.c     **** 
 3548              		.loc 1 569 17 view .LVU950
 3549              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 3550              		.loc 1 569 27 is_stmt 0 view .LVU951
 3551 0fc4 FEFFFFEB 		bl	rand		@
 3552              	.LVL238:
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3553              		.loc 1 571 17 is_stmt 1 view .LVU952
 3554              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3555              		.loc 1 571 45 is_stmt 0 view .LVU953
 3556 0fc8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3557              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3558              		.loc 1 571 33 view .LVU954
 3559 0fcc 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3560              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3561              		.loc 1 571 45 view .LVU955
 3562 0fd0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3563              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3564              		.loc 1 571 33 view .LVU956
 3565 0fd4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3566              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3567              		.loc 1 571 45 view .LVU957
 3568 0fd8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3569              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3570              		.loc 1 571 33 view .LVU958
 3571 0fdc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3572              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 3573              		.loc 1 569 34 view .LVU959
 3574 0fe0 7000FFE6 		uxth	r0, r0	@ tmp214,
 3575              	.LVL239:
 3576              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 3577              		.loc 1 569 44 view .LVU960
 3578 0fe4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3579 0fe8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3580              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 3581              		.loc 1 569 24 view .LVU961
 3582 0fec 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3583              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3584              		.loc 1 571 77 view .LVU962
 3585 0ff0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3586              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3587              		.loc 1 571 22 view .LVU963
 3588 0ff4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3589 0ff8 FEFFFFEB 		bl	sin		@
 3590              	.LVL240:
 3591              		.loc 1 574 17 is_stmt 1 view .LVU964
 3592              	@ armwave.c:568:                 noise += 1.0f;
 568:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3593              		.loc 1 568 23 is_stmt 0 view .LVU965
 3594 0ffc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3595              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3596              		.loc 1 574 104 view .LVU966
 3597 1000 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3598              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3599              		.loc 1 571 98 view .LVU967
 3600 1004 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3601              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3602              		.loc 1 571 87 view .LVU968
 3603 1008 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3604              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3605              		.loc 1 571 98 view .LVU969
 3606 100c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3607              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3608              		.loc 1 571 19 view .LVU970
 3609 1010 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3610              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3611              		.loc 1 574 113 view .LVU971
 3612 1014 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3613 1018 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3614 101c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3615 1020 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3616 1024 050000DA 		ble	.L206		@,
 3617              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3618              		.loc 1 574 104 discriminator 1 view .LVU972
 3619 1028 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3620 102c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3621 1030 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3622 1034 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3623 1038 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3624 103c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3625              	.L206:
 3626              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3627              		.loc 1 574 57 discriminator 12 view .LVU973
 3628 1040 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3629              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3630              		.loc 1 574 102 discriminator 12 view .LVU974
 3631 1044 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3632 1048 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3633 104c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3634              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3635              		.loc 1 559 58 discriminator 12 view .LVU975
 3636 1050 014084E2 		add	r4, r4, #1	@ x, x,
 3637              	.LVL241:
 3638              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3639              		.loc 1 574 102 discriminator 12 view .LVU976
 3640 1054 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3641              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3642              		.loc 1 559 43 discriminator 12 view .LVU977
 3643 1058 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3644              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3645              		.loc 1 559 13 discriminator 12 view .LVU978
 3646 105c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3647 1060 CCFFFFCA 		bgt	.L209		@,
 3648 1064 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3649              	.LVL242:
 3650              	.L204:
 3651              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3652              		.loc 1 555 48 discriminator 2 view .LVU979
 3653 1068 016086E2 		add	r6, r6, #1	@ w, w,
 3654              	.LVL243:
 3655              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3656              		.loc 1 555 9 discriminator 2 view .LVU980
 3657 106c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3658 1070 BEFFFFBA 		blt	.L210		@,
 3659              	.LVL244:
 3660              	.L203:
 575:armwave.c     ****             }
 576:armwave.c     ****         }
 577:armwave.c     **** 
 578:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3661              		.loc 1 578 9 is_stmt 1 discriminator 2 view .LVU981
 3662              	@ armwave.c:578:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3663              		.loc 1 578 46 is_stmt 0 discriminator 2 view .LVU982
 3664 1074 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3665              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3666              		.loc 1 552 27 discriminator 2 view .LVU983
 3667 1078 018088E2 		add	r8, r8, #1	@ s, s,
 3668              	.LVL245:
 3669              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3670              		.loc 1 552 5 discriminator 2 view .LVU984
 3671 107c 080059E1 		cmp	r9, r8	@ sets, s
 3672              	@ armwave.c:578:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3673              		.loc 1 578 20 discriminator 2 view .LVU985
 3674 1080 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3675              	.LVL246:
 3676              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3677              		.loc 1 552 5 discriminator 2 view .LVU986
 3678 1084 AEFFFF1A 		bne	.L202		@,
 3679              	.LVL247:
 3680              	.L199:
 3681              	@ armwave.c:580: }
 579:armwave.c     ****     }
 580:armwave.c     **** }
 3682              		.loc 1 580 1 view .LVU987
 3683 1088 08D08DE2 		add	sp, sp, #8	@,,
 3684              		.cfi_remember_state
 3685              		.cfi_def_cfa_offset 80
 3686              		@ sp needed	@
 3687 108c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3688              		.cfi_restore 90
 3689              		.cfi_restore 91
 3690              		.cfi_restore 88
 3691              		.cfi_restore 89
 3692              		.cfi_restore 86
 3693              		.cfi_restore 87
 3694              		.cfi_restore 84
 3695              		.cfi_restore 85
 3696              		.cfi_restore 82
 3697              		.cfi_restore 83
 3698              		.cfi_restore 80
 3699              		.cfi_restore 81
 3700              		.cfi_def_cfa_offset 32
 3701              	.LVL248:
 3702              		.loc 1 580 1 view .LVU988
 3703 1090 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3704              	.LVL249:
 3705              	.L229:
 3706              		.cfi_restore_state
 3707              	.LBB62:
 3708              	.LBB59:
 500:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3709              		.loc 1 500 9 is_stmt 1 view .LVU989
 3710 1094 940901E0 		mul	r1, r4, r9	@, _85, sets
 3711 1098 0920A0E1 		mov	r2, r9	@, sets
 3712 109c 28009FE5 		ldr	r0, .L230+36	@,
 3713 10a0 FEFFFFEB 		bl	printf		@
 3714              	.LVL250:
 502:armwave.c     ****     }
 3715              		.loc 1 502 9 view .LVU990
 3716 10a4 9FFFFFEA 		b	.L201		@
 3717              	.L231:
 3718              		.align	2
 3719              	.L230:
 3720 10a8 0000803F 		.word	1065353216
 3721 10ac 00007F43 		.word	1132396544
 3722 10b0 0000003F 		.word	1056964608
 3723 10b4 C3F5C840 		.word	1086911939
 3724 10b8 38FFC74A 		.word	1254620984
 3725 10bc 0000FE42 		.word	1123942400
 3726 10c0 00000043 		.word	1124073472
 3727 10c4 00000000 		.word	g_armwave_state
 3728 10c8 90020000 		.word	.LC20
 3729 10cc E8010000 		.word	.LC18
 3730              	.LBE59:
 3731              	.LBE62:
 3732              		.cfi_endproc
 3733              	.LFE75:
 3735              		.align	2
 3736              		.global	armwave_cleanup
 3737              		.syntax unified
 3738              		.arm
 3739              		.fpu vfp
 3741              	armwave_cleanup:
 3742              	.LFB76:
 581:armwave.c     **** 
 582:armwave.c     **** /*
 583:armwave.c     ****  * Make a test square waveform.
 584:armwave.c     ****  *
 585:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 586:armwave.c     ****  */
 587:armwave.c     **** #if 0
 588:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 589:armwave.c     **** {
 590:armwave.c     ****     uint8_t v;
 591:armwave.c     ****     float noise, xnoise;
 592:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 593:armwave.c     ****     int w, x;
 594:armwave.c     **** 
 595:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 596:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 597:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 598:armwave.c     ****             noise *= noise;
 599:armwave.c     ****             noise *= noise;
 600:armwave.c     ****             noise *= noise;
 601:armwave.c     **** 
 602:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 603:armwave.c     ****                 noise = -noise;
 604:armwave.c     **** 
 605:armwave.c     ****             //noise += 1.0f;
 606:armwave.c     **** 
 607:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 608:armwave.c     ****                 new_level = 0.2f;
 609:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 610:armwave.c     ****                 new_level = 0.8f;
 611:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 612:armwave.c     ****                 new_level = 0.2f;
 613:armwave.c     ****             } else {
 614:armwave.c     ****                 new_level = 0.8f;
 615:armwave.c     ****             }
 616:armwave.c     **** 
 617:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 618:armwave.c     **** 
 619:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 620:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 621:armwave.c     ****         }
 622:armwave.c     ****     }
 623:armwave.c     **** }
 624:armwave.c     **** #endif
 625:armwave.c     **** 
 626:armwave.c     **** /*
 627:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 628:armwave.c     ****  */
 629:armwave.c     **** void armwave_cleanup()
 630:armwave.c     **** {
 3743              		.loc 1 630 1 view -0
 3744              		.cfi_startproc
 3745              		@ args = 0, pretend = 0, frame = 0
 3746              		@ frame_needed = 0, uses_anonymous_args = 0
 631:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3747              		.loc 1 631 5 view .LVU992
 3748              	@ armwave.c:630: {
 630:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3749              		.loc 1 630 1 is_stmt 0 view .LVU993
 3750 10d0 10402DE9 		push	{r4, lr}	@
 3751              		.cfi_def_cfa_offset 8
 3752              		.cfi_offset 4, -8
 3753              		.cfi_offset 14, -4
 3754              	@ armwave.c:631:     free(g_armwave_state.out_pixbuf);
 3755              		.loc 1 631 25 view .LVU994
 3756 10d4 34409FE5 		ldr	r4, .L234	@ tmp114,
 3757              	@ armwave.c:631:     free(g_armwave_state.out_pixbuf);
 3758              		.loc 1 631 5 view .LVU995
 3759 10d8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3760 10dc FEFFFFEB 		bl	free		@
 3761              	.LVL251:
 632:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3762              		.loc 1 632 5 is_stmt 1 view .LVU996
 3763 10e0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3764 10e4 FEFFFFEB 		bl	free		@
 3765              	.LVL252:
 633:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3766              		.loc 1 633 5 view .LVU997
 3767 10e8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3768 10ec FEFFFFEB 		bl	free		@
 3769              	.LVL253:
 634:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3770              		.loc 1 634 5 view .LVU998
 3771 10f0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3772 10f4 FEFFFFEB 		bl	free		@
 3773              	.LVL254:
 635:armwave.c     **** 
 636:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3774              		.loc 1 636 5 view .LVU999
 3775              	@ armwave.c:636:     g_armwave_state.out_pixbuf = NULL;
 3776              		.loc 1 636 32 is_stmt 0 view .LVU1000
 3777 10f8 0030A0E3 		mov	r3, #0	@ tmp123,
 3778 10fc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 637:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3779              		.loc 1 637 5 is_stmt 1 view .LVU1001
 3780              	@ armwave.c:637:     g_armwave_state.ch1_buffer = NULL;
 3781              		.loc 1 637 32 is_stmt 0 view .LVU1002
 3782 1100 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 638:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3783              		.loc 1 638 5 is_stmt 1 view .LVU1003
 3784              	@ armwave.c:638:     g_armwave_state.xcoord_to_xpixel = NULL;
 3785              		.loc 1 638 38 is_stmt 0 view .LVU1004
 3786 1104 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 639:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3787              		.loc 1 639 5 is_stmt 1 view .LVU1005
 3788              	@ armwave.c:639:     g_armwave_state.test_wave_buffer = NULL;
 3789              		.loc 1 639 38 is_stmt 0 view .LVU1006
 3790 1108 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3791              	@ armwave.c:640: }
 640:armwave.c     **** }
 3792              		.loc 1 640 1 view .LVU1007
 3793 110c 1080BDE8 		pop	{r4, pc}	@
 3794              	.L235:
 3795              		.align	2
 3796              	.L234:
 3797 1110 00000000 		.word	g_armwave_state
 3798              		.cfi_endproc
 3799              	.LFE76:
 3801              		.comm	gamma_table,256,4
 3802              		.comm	g_armwave_state,136,4
 3803              		.section	.rodata
 3804              		.align	2
 3805              		.set	.LANCHOR0,. + 0
 3808              	__PRETTY_FUNCTION__.17095:
 3809 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3809      6176655F 
 3809      66696C6C 
 3809      5F706978 
 3809      6275665F 
 3810 001b 00       		.space	1
 3813              	__PRETTY_FUNCTION__.17125:
 3814 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3814      6176655F 
 3814      73657475 
 3814      705F7265 
 3814      6E646572 
 3815 0031 000000   		.space	3
 3818              	__PRETTY_FUNCTION__.17132:
 3819 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3819      6176655F 
 3819      7365745F 
 3819      77617665 
 3819      5F706F69 
 3820 004d 000000   		.space	3
 3823              	__PRETTY_FUNCTION__.17139:
 3824 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3824      6176655F 
 3824      7365745F 
 3824      77617665 
 3824      5F706F69 
 3825              		.section	.rodata.str1.4,"aMS",%progbits,1
 3826              		.align	2
 3827              	.LC0:
 3828 0000 76302E30 		.ascii	"v0.0.1\000"
 3828      2E3100
 3829 0007 00       		.space	1
 3830              	.LC1:
 3831 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3831      61766520 
 3831      76657273 
 3831      696F6E3A 
 3831      2025730A 
 3832 001d 000000   		.space	3
 3833              	.LC2:
 3834 0020 61726D77 		.ascii	"armwave.c\000"
 3834      6176652E 
 3834      6300
 3835 002a 0000     		.space	2
 3836              	.LC3:
 3837 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3837      62756666 
 3837      65722021 
 3837      3D204E55 
 3837      4C4C00
 3838 003f 00       		.space	1
 3839              	.LC4:
 3840 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3840      20653D25 
 3840      6420773D 
 3840      25642077 
 3840      733D2564 
 3841              	.LC5:
 3842 006c 73746172 		.ascii	"start_point < end_point\000"
 3842      745F706F 
 3842      696E7420 
 3842      3C20656E 
 3842      645F706F 
 3843              	.LC6:
 3844 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3844      7566665F 
 3844      73697A65 
 3844      3D25642C 
 3844      20636D70 
 3845 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3845      5F776964 
 3845      74683D25 
 3845      642C2077 
 3845      6176655F 
 3846 00e1 000000   		.space	3
 3847              	.LC7:
 3848 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3848      6D776176 
 3848      655F7374 
 3848      6174652E 
 3848      6368315F 
 3849 0107 00       		.space	1
 3850              	.LC8:
 3851 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3851      6D776176 
 3851      655F7374 
 3851      6174652E 
 3851      78636F6F 
 3852 0131 000000   		.space	3
 3853              	.LC9:
 3854 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3854      3A203078 
 3854      25303878 
 3854      20307825 
 3854      30387820 
 3855              	.LC10:
 3856 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3856      5F627566 
 3856      66657220 
 3856      213D204E 
 3856      554C4C00 
 3857              	.LC11:
 3858 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3858      6176655F 
 3858      7365745F 
 3858      77617665 
 3858      5F706F69 
 3859 019f 78636565 		.ascii	"xceeded\000"
 3859      64656400 
 3860 01a7 00       		.space	1
 3861              	.LC12:
 3862 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3862      5F627566 
 3862      6665725F 
 3862      70747220 
 3862      213D2030 
 3863 01bd 000000   		.space	3
 3864              	.LC13:
 3865 01c0 776200   		.ascii	"wb\000"
 3866 01c3 00       		.space	1
 3867              	.LC14:
 3868 01c4 50330A00 		.ascii	"P3\012\000"
 3869              	.LC15:
 3870 01c8 25642025 		.ascii	"%d %d\012\000"
 3870      640A00
 3871 01cf 00       		.space	1
 3872              	.LC16:
 3873 01d0 3235350A 		.ascii	"255\012\000"
 3873      00
 3874 01d5 000000   		.space	3
 3875              	.LC17:
 3876 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3876      25336420 
 3876      2533640A 
 3876      00
 3877 01e5 000000   		.space	3
 3878              	.LC18:
 3879 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3879      6176655F 
 3879      74657374 
 3879      5F627566 
 3879      6665725F 
 3880 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3880      20627566 
 3880      66657220 
 3880      28256420 
 3880      62797465 
 3881              	.LC19:
 3882 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3882      6176655F 
 3882      66696C6C 
 3882      5F706978 
 3882      6275665F 
 3883 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3883      20666169 
 3883      6C65642C 
 3883      20726574 
 3883      75726E69 
 3884 028e 0000     		.space	2
 3885              	.LC20:
 3886 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3886      756C6174 
 3886      696E6720 
 3886      74657374 
 3886      20736574 
 3887              		.text
 3888              	.Letext0:
 3889              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3890              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3891              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3892              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3893              		.file 7 "/usr/include/stdio.h"
 3894              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3895              		.file 9 "/usr/include/errno.h"
 3896              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3897              		.file 11 "/usr/include/unistd.h"
 3898              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3899              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3900              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3901              		.file 15 "/usr/include/math.h"
 3902              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3903              		.file 17 "/usr/include/time.h"
 3904              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3905              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3906              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3907              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3908              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3909              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3910              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3911              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3912              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3913              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3914              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3915              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3916              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3917              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3918              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3919              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3920              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3921              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3922              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3923              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3924              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3925              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3926              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3927              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3928              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3929              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3930              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3931              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3932              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3933              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3934              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3935              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3936              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3937              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3938              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3939              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3940              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3941              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3942              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3943              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3944              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3945              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3946              		.file 60 "/usr/local/include/python3.8/context.h"
 3947              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3948              		.file 62 "/usr/local/include/python3.8/code.h"
 3949              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3950              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3951              		.file 65 "/usr/local/include/python3.8/import.h"
 3952              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3953              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3954              		.file 68 "/usr/include/malloc.h"
 3955              		.file 69 "armwave.h"
 3956              		.file 70 "/usr/include/stdlib.h"
 3957              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3958              		.file 72 "/usr/include/assert.h"
 3959              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3960              		.file 74 "<built-in>"
