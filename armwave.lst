   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=94 --param ggc-min-heapsize=119998
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	rgb2yuv
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	rgb2yuv:
  83              	.LVL0:
  84              	.LFB57:
  85              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #ifndef NO_PYTHON
  12:armwave.c     **** #include <Python.h>
  13:armwave.c     **** #endif
  14:armwave.c     **** 
  15:armwave.c     **** #include <sys/ipc.h>
  16:armwave.c     **** #include <sys/shm.h>
  17:armwave.c     **** 
  18:armwave.c     **** #include <X11/Xlib.h>
  19:armwave.c     **** #include <X11/Xutil.h>
  20:armwave.c     **** #include <X11/extensions/XShm.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include <assert.h>
  23:armwave.c     **** #include <ctype.h>
  24:armwave.c     **** #include <stdio.h>
  25:armwave.c     **** #include <stdint.h>
  26:armwave.c     **** #include <stdlib.h>
  27:armwave.c     **** #include <stdbool.h>
  28:armwave.c     **** #include <malloc.h>
  29:armwave.c     **** #include <string.h>
  30:armwave.c     **** #include <math.h>
  31:armwave.c     **** #include <unistd.h>
  32:armwave.c     **** 
  33:armwave.c     **** #include <X11/Xlib.h>
  34:armwave.c     **** #include <X11/Xutil.h>
  35:armwave.c     **** #include <X11/Xatom.h>
  36:armwave.c     **** #include <X11/extensions/Xv.h>
  37:armwave.c     **** #include <X11/extensions/Xvlib.h>
  38:armwave.c     **** #include <X11/extensions/XShm.h>
  39:armwave.c     **** 
  40:armwave.c     **** #include <time.h>
  41:armwave.c     **** 
  42:armwave.c     **** #include "armwave.h"
  43:armwave.c     **** 
  44:armwave.c     **** #define ARMWAVE_VER  "v0.2.0"
  45:armwave.c     **** 
  46:armwave.c     **** struct armwave_state_t g_armwave_state;
  47:armwave.c     **** struct armwave_yuv_t g_yuv_lut[256];
  48:armwave.c     **** 
  49:armwave.c     **** const struct armwave_rgb_t g_fill_black = { 0, 0, 0 };
  50:armwave.c     **** 
  51:armwave.c     **** /*
  52:armwave.c     ****  * X11 properties.  Should these be commoned into one struct?
  53:armwave.c     ****  */ 
  54:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims;
  55:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims_last;
  56:armwave.c     **** 
  57:armwave.c     **** int g_frame_num, g_n_test_waves;
  58:armwave.c     **** Window g_window = 0;
  59:armwave.c     **** Display *g_dpy;
  60:armwave.c     **** int g_xv_port;
  61:armwave.c     **** XVisualInfo	g_vinfo;
  62:armwave.c     **** GC g_gc = NULL;
  63:armwave.c     **** XvImage *g_yuv_image = NULL;
  64:armwave.c     **** XShmSegmentInfo g_yuv_shminfo;
  65:armwave.c     **** XColor g_grat_colour, g_grat_subcolour; 
  66:armwave.c     **** XSetWindowAttributes g_xswa;
  67:armwave.c     ****     
  68:armwave.c     **** struct MwmHints {
  69:armwave.c     ****     unsigned long flags;
  70:armwave.c     ****     unsigned long functions;
  71:armwave.c     ****     unsigned long decorations;
  72:armwave.c     ****     long input_mode;
  73:armwave.c     ****     unsigned long status;
  74:armwave.c     **** };
  75:armwave.c     **** 
  76:armwave.c     **** enum {
  77:armwave.c     ****     MWM_HINTS_FUNCTIONS = (1L << 0),
  78:armwave.c     ****     MWM_HINTS_DECORATIONS =  (1L << 1),
  79:armwave.c     **** 
  80:armwave.c     ****     MWM_FUNC_ALL = (1L << 0),
  81:armwave.c     ****     MWM_FUNC_RESIZE = (1L << 1),
  82:armwave.c     ****     MWM_FUNC_MOVE = (1L << 2),
  83:armwave.c     ****     MWM_FUNC_MINIMIZE = (1L << 3),
  84:armwave.c     ****     MWM_FUNC_MAXIMIZE = (1L << 4),
  85:armwave.c     ****     MWM_FUNC_CLOSE = (1L << 5)
  86:armwave.c     **** };
  87:armwave.c     **** 
  88:armwave.c     **** static void plot_pixel_yuv(XvImage *img, int x, int y, struct armwave_yuv_t *yuv_in);
  89:armwave.c     **** static void plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct armwave_yuv_t *yuv_in);
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * Helper function to convert 8-bit RGB to 8-bit YUV values.
  93:armwave.c     ****  */
  94:armwave.c     **** void rgb2yuv(struct armwave_rgb_t *rgb_in, struct armwave_yuv_t *yuv_out)
  95:armwave.c     **** {
  86              		.loc 1 95 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
  91              		.loc 1 96 5 view .LVU1
  92              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93              		.loc 1 96 41 is_stmt 0 view .LVU2
  94 0000 0030D0E5 		ldrb	r3, [r0]	@ zero_extendqisi2	@ rgb_in_32(D)->r, rgb_in_32(D)->r
  95              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96              		.loc 1 96 33 view .LVU3
  97 0004 254A9FED 		vldr.32	s8, .L3	@ tmp146,
  98              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
  99              		.loc 1 97 22 view .LVU4
 100 0008 257ADFED 		vldr.32	s15, .L3+4	@ tmp160,
 101              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 102              		.loc 1 96 22 view .LVU5
 103 000c 257A9FED 		vldr.32	s14, .L3+8	@ tmp148,
 104              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 105              		.loc 1 96 41 view .LVU6
 106 0010 103A05EE 		vmov	s10, r3	@ int	@ rgb_in_32(D)->r, rgb_in_32(D)->r
 107              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 108              		.loc 1 96 64 view .LVU7
 109 0014 0130D0E5 		ldrb	r3, [r0, #1]	@ zero_extendqisi2	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 110              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 111              		.loc 1 97 33 view .LVU8
 112 0018 236ADFED 		vldr.32	s13, .L3+12	@ tmp158,
 113              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 114              		.loc 1 97 79 view .LVU9
 115 001c 234ADFED 		vldr.32	s9, .L3+16	@ tmp165,
 116              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 117              		.loc 1 96 33 view .LVU10
 118 0020 C55AB8EE 		vcvt.f32.s32	s10, s10	@ _3, rgb_in_32(D)->r
 119              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 120              		.loc 1 96 64 view .LVU11
 121 0024 903A05EE 		vmov	s11, r3	@ int	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 122              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 123              		.loc 1 96 87 view .LVU12
 124 0028 0230D0E5 		ldrb	r3, [r0, #2]	@ zero_extendqisi2	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 125              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 126              		.loc 1 96 56 view .LVU13
 127 002c 202ADFED 		vldr.32	s5, .L3+20	@ tmp150,
 128              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 129              		.loc 1 97 56 view .LVU14
 130 0030 203A9FED 		vldr.32	s6, .L3+24	@ tmp162,
 131              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 132              		.loc 1 96 56 view .LVU15
 133 0034 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _8, rgb_in_32(D)->g
 134              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 135              		.loc 1 96 87 view .LVU16
 136 0038 103A06EE 		vmov	s12, r3	@ int	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 137              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 138              		.loc 1 98 56 view .LVU17
 139 003c 1E3ADFED 		vldr.32	s7, .L3+28	@ tmp174,
 140              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 141              		.loc 1 96 22 view .LVU18
 142 0040 047A05EE 		vmla.f32	s14, s10, s8	@ tmp147, _3, tmp146
 143              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 144              		.loc 1 97 22 view .LVU19
 145 0044 674AB0EE 		vmov.f32	s8, s15	@ tmp159, tmp160
 146              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 147              		.loc 1 96 79 view .LVU20
 148 0048 C66AB8EE 		vcvt.f32.s32	s12, s12	@ _13, rgb_in_32(D)->b
 149              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 150              		.loc 1 98 22 view .LVU21
 151 004c 247A45EE 		vmla.f32	s15, s10, s9	@ tmp171, _3, tmp165
 152              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 153              		.loc 1 97 22 view .LVU22
 154 0050 264A05EE 		vmla.f32	s8, s10, s13	@ tmp159, _3, tmp158
 155              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 156              		.loc 1 98 79 view .LVU23
 157 0054 195A9FED 		vldr.32	s10, .L3+32	@ tmp177,
 158              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 159              		.loc 1 96 46 view .LVU24
 160 0058 A27A05EE 		vmla.f32	s14, s11, s5	@ tmp151, _8, tmp150
 161              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 162              		.loc 1 98 46 view .LVU25
 163 005c E37A45EE 		vmls.f32	s15, s11, s7	@ tmp175, _8, tmp174
 164              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 165              		.loc 1 97 22 view .LVU26
 166 0060 446AF0EE 		vmov.f32	s13, s8	@ tmp159, tmp159
 167              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 168              		.loc 1 96 79 view .LVU27
 169 0064 164A9FED 		vldr.32	s8, .L3+36	@ tmp153,
 170              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 171              		.loc 1 97 46 view .LVU28
 172 0068 C36A45EE 		vmls.f32	s13, s11, s6	@ tmp163, _8, tmp162
 173              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 174              		.loc 1 96 69 view .LVU29
 175 006c 047A06EE 		vmla.f32	s14, s12, s8	@ tmp154, _13, tmp153
 176              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 177              		.loc 1 98 69 view .LVU30
 178 0070 457A46EE 		vmls.f32	s15, s12, s10	@ tmp178, _13, tmp177
 179              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 180              		.loc 1 97 69 view .LVU31
 181 0074 246A46EE 		vmla.f32	s13, s12, s9	@ tmp166, _13, tmp165
 182              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 183              		.loc 1 96 16 view .LVU32
 184 0078 C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp155, tmp154
 185              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 186              		.loc 1 98 16 view .LVU33
 187 007c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 188              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 189              		.loc 1 96 16 view .LVU34
 190 0080 102A17EE 		vmov	r2, s14	@ int	@ tmp155, tmp155
 191              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 192              		.loc 1 97 16 view .LVU35
 193 0084 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp167, tmp166
 194              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 195              		.loc 1 98 16 view .LVU36
 196 0088 903A17EE 		vmov	r3, s15	@ int	@ tmp179, tmp179
 197              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 198              		.loc 1 96 16 view .LVU37
 199 008c 0020C1E5 		strb	r2, [r1]	@ tmp155, yuv_out_33(D)->y
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 200              		.loc 1 97 5 is_stmt 1 view .LVU38
 201              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 202              		.loc 1 98 16 is_stmt 0 view .LVU39
 203 0090 0230C1E5 		strb	r3, [r1, #2]	@ tmp179, yuv_out_33(D)->v
 204              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 205              		.loc 1 97 16 view .LVU40
 206 0094 100A17EE 		vmov	r0, s14	@ int	@ tmp167, tmp167
 207              	.LVL1:
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 208              		.loc 1 97 16 view .LVU41
 209 0098 0100C1E5 		strb	r0, [r1, #1]	@ tmp167, yuv_out_33(D)->u
 210              		.loc 1 98 5 is_stmt 1 view .LVU42
 211              	@ armwave.c:99: }
  99:armwave.c     **** }
 212              		.loc 1 99 1 is_stmt 0 view .LVU43
 213 009c 1EFF2FE1 		bx	lr	@
 214              	.L4:
 215              		.align	2
 216              	.L3:
 217 00a0 6F12833E 		.word	1048777327
 218 00a4 00000043 		.word	1124073472
 219 00a8 00008041 		.word	1098907648
 220 00ac 508D17BE 		.word	-1105752752
 221 00b0 9CC4E03E 		.word	1054917788
 222 00b4 2506013F 		.word	1057031717
 223 00b8 F4FD943E 		.word	1049951732
 224 00bc 7F6ABC3E 		.word	1052535423
 225 00c0 7368913D 		.word	1032939635
 226 00c4 F0A7C63D 		.word	1036429296
 227              		.cfi_endproc
 228              	.LFE57:
 230              		.align	2
 231              		.global	hsv2rgb
 232              		.syntax unified
 233              		.arm
 234              		.fpu vfp
 236              	hsv2rgb:
 237              	.LVL2:
 238              	.LFB58:
 100:armwave.c     **** 
 101:armwave.c     **** /*
 102:armwave.c     ****  * Helper function to convert 8-bit HSV to 8-bit RGB.
 103:armwave.c     ****  *
 104:armwave.c     ****  * https://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-ra
 105:armwave.c     ****  */
 106:armwave.c     **** void hsv2rgb(struct armwave_hsv_t *hsv_in, struct armwave_rgb_t *rgb_out)
 107:armwave.c     **** {
 239              		.loc 1 107 1 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 108:armwave.c     ****     unsigned char region, remainder, p, q, t;
 243              		.loc 1 108 5 view .LVU45
 109:armwave.c     **** 
 110:armwave.c     ****     if (hsv_in->s == 0)
 244              		.loc 1 110 5 view .LVU46
 245              	@ armwave.c:107: {
 107:armwave.c     ****     unsigned char region, remainder, p, q, t;
 246              		.loc 1 107 1 is_stmt 0 view .LVU47
 247 00c8 30402DE9 		push	{r4, r5, lr}	@
 248              		.cfi_def_cfa_offset 12
 249              		.cfi_offset 4, -12
 250              		.cfi_offset 5, -8
 251              		.cfi_offset 14, -4
 252              	@ armwave.c:110:     if (hsv_in->s == 0)
 253              		.loc 1 110 15 view .LVU48
 254 00cc 01E0D0E5 		ldrb	lr, [r0, #1]	@ zero_extendqisi2	@ _1, hsv_in_29(D)->s
 255 00d0 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2	@ pretmp_65, hsv_in_29(D)->v
 256              	@ armwave.c:110:     if (hsv_in->s == 0)
 257              		.loc 1 110 8 view .LVU49
 258 00d4 00005EE3 		cmp	lr, #0	@ _1,
 259 00d8 2100000A 		beq	.L16		@,
 111:armwave.c     ****     {
 112:armwave.c     ****         rgb_out->r = hsv_in->v;
 113:armwave.c     ****         rgb_out->g = hsv_in->v;
 114:armwave.c     ****         rgb_out->b = hsv_in->v;
 115:armwave.c     ****         return;
 116:armwave.c     ****     }
 117:armwave.c     **** 
 118:armwave.c     ****     region = hsv_in->h / 43;
 260              		.loc 1 118 5 is_stmt 1 view .LVU50
 261              	@ armwave.c:118:     region = hsv_in->h / 43;
 262              		.loc 1 118 20 is_stmt 0 view .LVU51
 263 00dc 0040D0E5 		ldrb	r4, [r0]	@ zero_extendqisi2	@ _3, hsv_in_29(D)->h
 264              	@ armwave.c:118:     region = hsv_in->h / 43;
 265              		.loc 1 118 12 view .LVU52
 266 00e0 EC209FE5 		ldr	r2, .L17	@ tmp149,
 267              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 268              		.loc 1 119 38 view .LVU53
 269 00e4 2A30E0E3 		mvn	r3, #42	@ tmp151,
 270              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 120:armwave.c     **** 
 121:armwave.c     ****     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 271              		.loc 1 121 27 view .LVU54
 272 00e8 FF006EE2 		rsb	r0, lr, #255	@ tmp160, _1,
 273              	.LVL3:
 274              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 275              		.loc 1 118 12 view .LVU55
 276 00ec 925482E0 		umull	r5, r2, r2, r4	@ tmp192, tmp148, tmp149, _3
 277              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 278              		.loc 1 121 20 view .LVU56
 279 00f0 9C0000E0 		mul	r0, ip, r0	@ tmp161, pretmp_65, tmp160
 280              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 281              		.loc 1 118 12 view .LVU57
 282 00f4 A221A0E1 		lsr	r2, r2, #3	@ region, tmp148,
 283              	.LVL4:
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 284              		.loc 1 119 5 is_stmt 1 view .LVU58
 285              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 286              		.loc 1 119 28 is_stmt 0 view .LVU59
 287 00f8 934223E0 		mla	r3, r3, r2, r4	@ tmp152, tmp151, region, _3
 288              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 289              		.loc 1 121 41 view .LVU60
 290 00fc 4004A0E1 		asr	r0, r0, #8	@ tmp162, tmp161,
 291              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 292              		.loc 1 119 15 view .LVU61
 293 0100 833083E0 		add	r3, r3, r3, lsl #1	@ tmp157, tmp152, tmp152,
 294              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 295              		.loc 1 121 7 view .LVU62
 296 0104 7000EFE6 		uxtb	r0, r0	@ p, tmp162
 297              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 298              		.loc 1 119 15 view .LVU63
 299 0108 8330A0E1 		lsl	r3, r3, #1	@ tmp159, tmp157,
 300 010c 7330EFE6 		uxtb	r3, r3	@ remainder, tmp159
 301              	.LVL5:
 302              		.loc 1 121 5 is_stmt 1 view .LVU64
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 303              		.loc 1 122 5 view .LVU65
 304              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 305              		.loc 1 123 48 is_stmt 0 view .LVU66
 306 0110 FF4063E2 		rsb	r4, r3, #255	@ tmp168, remainder,
 307              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 308              		.loc 1 122 41 view .LVU67
 309 0114 8E0363E1 		smulbb	r3, lr, r3	@ tmp163, _1, remainder
 310              	.LVL6:
 311              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 312              		.loc 1 123 41 view .LVU68
 313 0118 9E040EE0 		mul	lr, lr, r4	@ tmp169, _1, tmp168
 314              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 315              		.loc 1 122 54 view .LVU69
 316 011c 4334A0E1 		asr	r3, r3, #8	@ tmp164, tmp163,
 317              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 318              		.loc 1 122 27 view .LVU70
 319 0120 FF3063E2 		rsb	r3, r3, #255	@ tmp165, tmp164,
 320              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 321              		.loc 1 123 62 view .LVU71
 322 0124 4EE4A0E1 		asr	lr, lr, #8	@ tmp170, tmp169,
 323              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 324              		.loc 1 123 27 view .LVU72
 325 0128 FFE06EE2 		rsb	lr, lr, #255	@ tmp171, tmp170,
 326              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 327              		.loc 1 122 20 view .LVU73
 328 012c 9C0303E0 		mul	r3, ip, r3	@ tmp166, pretmp_65, tmp165
 329              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 330              		.loc 1 123 20 view .LVU74
 331 0130 9C0E0EE0 		mul	lr, ip, lr	@ tmp172, pretmp_65, tmp171
 332              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 333              		.loc 1 122 62 view .LVU75
 334 0134 4334A0E1 		asr	r3, r3, #8	@ tmp167, tmp166,
 335              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 336              		.loc 1 123 70 view .LVU76
 337 0138 4EE4A0E1 		asr	lr, lr, #8	@ tmp173, tmp172,
 338              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 339              		.loc 1 122 7 view .LVU77
 340 013c 7330EFE6 		uxtb	r3, r3	@ q, tmp167
 341              	.LVL7:
 342              		.loc 1 123 5 is_stmt 1 view .LVU78
 343              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 344              		.loc 1 123 7 is_stmt 0 view .LVU79
 345 0140 7EE0EFE6 		uxtb	lr, lr	@ t, tmp173
 346              	.LVL8:
 124:armwave.c     **** 
 125:armwave.c     ****     switch (region)
 347              		.loc 1 125 5 is_stmt 1 view .LVU80
 348 0144 040052E3 		cmp	r2, #4	@ region,
 349 0148 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 350 014c 1C0000EA 		b	.L8	@
 351              	.L10:
 352 0150 84010000 		.word	.L14
 353 0154 94010000 		.word	.L13
 354 0158 A4010000 		.word	.L12
 355 015c B4010000 		.word	.L11
 356 0160 74010000 		.word	.L9
 357              	.LVL9:
 358              	.L16:
 112:armwave.c     ****         rgb_out->g = hsv_in->v;
 359              		.loc 1 112 9 view .LVU81
 360              	@ armwave.c:112:         rgb_out->r = hsv_in->v;
 112:armwave.c     ****         rgb_out->g = hsv_in->v;
 361              		.loc 1 112 20 is_stmt 0 view .LVU82
 362 0164 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 113:armwave.c     ****         rgb_out->b = hsv_in->v;
 363              		.loc 1 113 9 is_stmt 1 view .LVU83
 364              	@ armwave.c:113:         rgb_out->g = hsv_in->v;
 113:armwave.c     ****         rgb_out->b = hsv_in->v;
 365              		.loc 1 113 20 is_stmt 0 view .LVU84
 366 0168 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 114:armwave.c     ****         return;
 367              		.loc 1 114 9 is_stmt 1 view .LVU85
 368              	@ armwave.c:114:         rgb_out->b = hsv_in->v;
 114:armwave.c     ****         return;
 369              		.loc 1 114 20 is_stmt 0 view .LVU86
 370 016c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 115:armwave.c     ****     }
 371              		.loc 1 115 9 is_stmt 1 view .LVU87
 372 0170 3080BDE8 		pop	{r4, r5, pc}	@
 373              	.LVL10:
 374              	.L9:
 126:armwave.c     ****     {
 127:armwave.c     ****         case 0:
 128:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 129:armwave.c     ****             break;
 130:armwave.c     ****         case 1:
 131:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 132:armwave.c     ****             break;
 133:armwave.c     ****         case 2:
 134:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 135:armwave.c     ****             break;
 136:armwave.c     ****         case 3:
 137:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 138:armwave.c     ****             break;
 139:armwave.c     ****         case 4:
 140:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 375              		.loc 1 140 13 view .LVU88
 376              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 377              		.loc 1 140 24 is_stmt 0 view .LVU89
 378 0174 00E0C1E5 		strb	lr, [r1]	@ t, rgb_out_30(D)->r
 379              	.LVL11:
 380              		.loc 1 140 29 is_stmt 1 view .LVU90
 381              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 382              		.loc 1 140 40 is_stmt 0 view .LVU91
 383 0178 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 384              		.loc 1 140 45 is_stmt 1 view .LVU92
 385              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 386              		.loc 1 140 56 is_stmt 0 view .LVU93
 387 017c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 141:armwave.c     ****             break;
 388              		.loc 1 141 13 is_stmt 1 view .LVU94
 389 0180 3080BDE8 		pop	{r4, r5, pc}	@
 390              	.LVL12:
 391              	.L14:
 128:armwave.c     ****             break;
 392              		.loc 1 128 13 view .LVU95
 393              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 394              		.loc 1 128 24 is_stmt 0 view .LVU96
 395 0184 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 396              	.LVL13:
 128:armwave.c     ****             break;
 397              		.loc 1 128 37 is_stmt 1 view .LVU97
 398              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 399              		.loc 1 128 48 is_stmt 0 view .LVU98
 400 0188 01E0C1E5 		strb	lr, [r1, #1]	@ t, rgb_out_30(D)->g
 128:armwave.c     ****             break;
 401              		.loc 1 128 53 is_stmt 1 view .LVU99
 402              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 403              		.loc 1 128 64 is_stmt 0 view .LVU100
 404 018c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 129:armwave.c     ****         case 1:
 405              		.loc 1 129 13 is_stmt 1 view .LVU101
 406 0190 3080BDE8 		pop	{r4, r5, pc}	@
 407              	.LVL14:
 408              	.L13:
 131:armwave.c     ****             break;
 409              		.loc 1 131 13 view .LVU102
 410              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 411              		.loc 1 131 24 is_stmt 0 view .LVU103
 412 0194 0030C1E5 		strb	r3, [r1]	@ q, rgb_out_30(D)->r
 413              	.LVL15:
 131:armwave.c     ****             break;
 414              		.loc 1 131 29 is_stmt 1 view .LVU104
 415              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 416              		.loc 1 131 40 is_stmt 0 view .LVU105
 417 0198 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 131:armwave.c     ****             break;
 418              		.loc 1 131 53 is_stmt 1 view .LVU106
 419              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 420              		.loc 1 131 64 is_stmt 0 view .LVU107
 421 019c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 132:armwave.c     ****         case 2:
 422              		.loc 1 132 13 is_stmt 1 view .LVU108
 423 01a0 3080BDE8 		pop	{r4, r5, pc}	@
 424              	.LVL16:
 425              	.L12:
 134:armwave.c     ****             break;
 426              		.loc 1 134 13 view .LVU109
 427              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 428              		.loc 1 134 24 is_stmt 0 view .LVU110
 429 01a4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 430              	.LVL17:
 134:armwave.c     ****             break;
 431              		.loc 1 134 29 is_stmt 1 view .LVU111
 432              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 433              		.loc 1 134 40 is_stmt 0 view .LVU112
 434 01a8 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 134:armwave.c     ****             break;
 435              		.loc 1 134 53 is_stmt 1 view .LVU113
 436              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 437              		.loc 1 134 64 is_stmt 0 view .LVU114
 438 01ac 02E0C1E5 		strb	lr, [r1, #2]	@ t, rgb_out_30(D)->b
 135:armwave.c     ****         case 3:
 439              		.loc 1 135 13 is_stmt 1 view .LVU115
 440 01b0 3080BDE8 		pop	{r4, r5, pc}	@
 441              	.LVL18:
 442              	.L11:
 137:armwave.c     ****             break;
 443              		.loc 1 137 13 view .LVU116
 444              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 445              		.loc 1 137 24 is_stmt 0 view .LVU117
 446 01b4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 447              	.LVL19:
 137:armwave.c     ****             break;
 448              		.loc 1 137 29 is_stmt 1 view .LVU118
 449              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 450              		.loc 1 137 40 is_stmt 0 view .LVU119
 451 01b8 0130C1E5 		strb	r3, [r1, #1]	@ q, rgb_out_30(D)->g
 137:armwave.c     ****             break;
 452              		.loc 1 137 45 is_stmt 1 view .LVU120
 453              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 454              		.loc 1 137 56 is_stmt 0 view .LVU121
 455 01bc 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 138:armwave.c     ****         case 4:
 456              		.loc 1 138 13 is_stmt 1 view .LVU122
 457 01c0 3080BDE8 		pop	{r4, r5, pc}	@
 458              	.LVL20:
 459              	.L8:
 142:armwave.c     ****         default:
 143:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 460              		.loc 1 143 13 view .LVU123
 461              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 462              		.loc 1 143 24 is_stmt 0 view .LVU124
 463 01c4 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 464              	.LVL21:
 465              		.loc 1 143 37 is_stmt 1 view .LVU125
 466              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 467              		.loc 1 143 48 is_stmt 0 view .LVU126
 468 01c8 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 469              		.loc 1 143 53 is_stmt 1 view .LVU127
 470              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 471              		.loc 1 143 64 is_stmt 0 view .LVU128
 472 01cc 0230C1E5 		strb	r3, [r1, #2]	@ q, rgb_out_30(D)->b
 144:armwave.c     ****             break;
 473              		.loc 1 144 13 is_stmt 1 view .LVU129
 474              	@ armwave.c:146: }
 145:armwave.c     ****     }
 146:armwave.c     **** }
 475              		.loc 1 146 1 is_stmt 0 view .LVU130
 476 01d0 3080BDE8 		pop	{r4, r5, pc}	@
 477              	.L18:
 478              		.align	2
 479              	.L17:
 480 01d4 83BEA02F 		.word	799063683
 481              		.cfi_endproc
 482              	.LFE58:
 484              		.align	2
 485              		.global	fill_rgb_xvimage
 486              		.syntax unified
 487              		.arm
 488              		.fpu vfp
 490              	fill_rgb_xvimage:
 491              	.LVL22:
 492              	.LFB61:
 147:armwave.c     **** 
 148:armwave.c     **** /*
 149:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.
 150:armwave.c     ****  */
 151:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv(XvImage *img, int x, int y, struct armwav
 152:armwave.c     **** {
 153:armwave.c     ****     int uv_base = img->width * img->height;
 154:armwave.c     ****     
 155:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 156:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 157:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 158:armwave.c     **** }
 159:armwave.c     **** 
 160:armwave.c     **** /*
 161:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.  Does not write
 162:armwave.c     ****  * U/V values if x or y are odd.
 163:armwave.c     ****  */
 164:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct 
 165:armwave.c     **** {
 166:armwave.c     ****     int uv_base = img->width * img->height;
 167:armwave.c     ****     
 168:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 169:armwave.c     ****     
 170:armwave.c     ****     if(!(x & 1) && !(y & 1)) {
 171:armwave.c     ****         img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 172:armwave.c     ****         img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 173:armwave.c     ****     }
 174:armwave.c     **** }
 175:armwave.c     **** 
 176:armwave.c     **** /*
 177:armwave.c     ****  * Fill an XvImage canvas with an RGB value.
 178:armwave.c     ****  */
 179:armwave.c     **** void fill_rgb_xvimage(XvImage *img, struct armwave_rgb_t *rgb)
 180:armwave.c     **** {
 493              		.loc 1 180 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 8
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 181:armwave.c     ****     struct armwave_yuv_t yuv;
 497              		.loc 1 181 5 view .LVU132
 182:armwave.c     ****     
 183:armwave.c     ****     // Compute the Y, U and V values, then use memset to block write them
 184:armwave.c     ****     rgb2yuv(rgb, &yuv);
 498              		.loc 1 184 5 view .LVU133
 499              	.LBB6:
 500              	.LBI6:
  94:armwave.c     **** {
 501              		.loc 1 94 6 view .LVU134
 502              	.LBB7:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 503              		.loc 1 96 5 view .LVU135
 504              	.LBE7:
 505              	.LBE6:
 506              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 507              		.loc 1 180 1 is_stmt 0 view .LVU136
 508 01d8 10402DE9 		push	{r4, lr}	@
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 512 01dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 513              		.cfi_def_cfa_offset 32
 514              		.cfi_offset 80, -32
 515              		.cfi_offset 81, -28
 516              		.cfi_offset 82, -24
 517              		.cfi_offset 83, -20
 518              		.cfi_offset 84, -16
 519              		.cfi_offset 85, -12
 520              	.LBB24:
 521              	.LBB8:
 522              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 523              		.loc 1 96 33 view .LVU137
 524 01e0 476A9FED 		vldr.32	s12, .L21	@ tmp204,
 525              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 526              		.loc 1 96 22 view .LVU138
 527 01e4 477ADFED 		vldr.32	s15, .L21+4	@ tmp206,
 528              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 529              		.loc 1 96 56 view .LVU139
 530 01e8 476ADFED 		vldr.32	s13, .L21+8	@ tmp208,
 531              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 532              		.loc 1 96 41 view .LVU140
 533 01ec 0030D1E5 		ldrb	r3, [r1]	@ zero_extendqisi2	@ rgb_39(D)->r, rgb_39(D)->r
 534              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 535              		.loc 1 96 79 view .LVU141
 536 01f0 467A9FED 		vldr.32	s14, .L21+12	@ tmp211,
 537              	.LBE8:
 538              	.LBE24:
 539              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 540              		.loc 1 180 1 view .LVU142
 541 01f4 08D04DE2 		sub	sp, sp, #8	@,,
 542              		.cfi_def_cfa_offset 40
 543              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 185:armwave.c     ****     
 186:armwave.c     ****     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 544              		.loc 1 186 36 view .LVU143
 545 01f8 182090E5 		ldr	r2, [r0, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 546              	.LBB25:
 547              	.LBB9:
 548              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 549              		.loc 1 96 41 view .LVU144
 550 01fc 903A09EE 		vmov	s19, r3	@ int	@ rgb_39(D)->r, rgb_39(D)->r
 551              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 552              		.loc 1 96 64 view .LVU145
 553 0200 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2	@ rgb_39(D)->g, rgb_39(D)->g
 554              	.LBE9:
 555              	.LBE25:
 556              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 557              		.loc 1 180 1 view .LVU146
 558 0204 0040A0E1 		mov	r4, r0	@ img, img
 559              	.LBB26:
 560              	.LBB10:
 561              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 562              		.loc 1 98 22 view .LVU147
 563 0208 418A9FED 		vldr.32	s16, .L21+16	@ tmp257,
 564              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 565              		.loc 1 96 33 view .LVU148
 566 020c E99AF8EE 		vcvt.f32.s32	s19, s19	@ _48, rgb_39(D)->r
 567              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 568              		.loc 1 96 64 view .LVU149
 569 0210 103A09EE 		vmov	s18, r3	@ int	@ rgb_39(D)->g, rgb_39(D)->g
 570              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 571              		.loc 1 96 87 view .LVU150
 572 0214 0230D1E5 		ldrb	r3, [r1, #2]	@ zero_extendqisi2	@ rgb_39(D)->b, rgb_39(D)->b
 573              	.LBE10:
 574              	.LBE26:
 575              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 576              		.loc 1 186 22 view .LVU151
 577 0218 001092E5 		ldr	r1, [r2]	@ *_2, *_2
 578              	.LVL23:
 579              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 580              		.loc 1 186 59 view .LVU152
 581 021c 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 582              	.LBB27:
 583              	.LBB11:
 584              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 585              		.loc 1 96 56 view .LVU153
 586 0220 C99AB8EE 		vcvt.f32.s32	s18, s18	@ _53, rgb_39(D)->g
 587              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 588              		.loc 1 96 87 view .LVU154
 589 0224 903A08EE 		vmov	s17, r3	@ int	@ rgb_39(D)->b, rgb_39(D)->b
 590              	.LBE11:
 591              	.LBE27:
 592              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 593              		.loc 1 186 59 view .LVU155
 594 0228 043090E5 		ldr	r3, [r0, #4]	@ img_41(D)->width, img_41(D)->width
 595              	.LBB28:
 596              	.LBB12:
 597              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 598              		.loc 1 96 22 view .LVU156
 599 022c 867A49EE 		vmla.f32	s15, s19, s12	@ tmp205, _48, tmp204
 600              	.LBE12:
 601              	.LBE28:
 602              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 603              		.loc 1 186 22 view .LVU157
 604 0230 1C0090E5 		ldr	r0, [r0, #28]	@ img_41(D)->data, img_41(D)->data
 605              	.LVL24:
 606              	.LBB29:
 607              	.LBB13:
 608              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 609              		.loc 1 96 79 view .LVU158
 610 0234 E88AF8EE 		vcvt.f32.s32	s17, s17	@ _58, rgb_39(D)->b
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 611              		.loc 1 97 5 is_stmt 1 view .LVU159
  98:armwave.c     **** }
 612              		.loc 1 98 5 view .LVU160
 613              	.LVL25:
  98:armwave.c     **** }
 614              		.loc 1 98 5 is_stmt 0 view .LVU161
 615              	.LBE13:
 616              	.LBE29:
 617              		.loc 1 186 5 is_stmt 1 view .LVU162
 618 0238 920302E0 		mul	r2, r2, r3	@, img_41(D)->height, img_41(D)->width
 619              	.LBB30:
 620              	.LBB14:
 621              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 622              		.loc 1 98 33 is_stmt 0 view .LVU163
 623 023c 35AA9FED 		vldr.32	s20, .L21+20	@ tmp255,
 624              	.LBE14:
 625              	.LBE30:
 626              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 627              		.loc 1 186 5 view .LVU164
 628 0240 010080E0 		add	r0, r0, r1	@, img_41(D)->data, *_2
 629              	.LBB31:
 630              	.LBB15:
 631              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 632              		.loc 1 96 46 view .LVU165
 633 0244 267A49EE 		vmla.f32	s15, s18, s13	@ tmp209, _53, tmp208
 634              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 635              		.loc 1 96 69 view .LVU166
 636 0248 877A48EE 		vmla.f32	s15, s17, s14	@ tmp212, _58, tmp211
 637              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 638              		.loc 1 96 16 view .LVU167
 639 024c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp214, tmp212
 640 0250 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp214, %sfp
 641              	.LBE15:
 642              	.LBE31:
 643              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 644              		.loc 1 186 5 view .LVU168
 645 0254 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 646 0258 FEFFFFEB 		bl	memset		@
 647              	.LVL26:
 187:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 648              		.loc 1 187 5 is_stmt 1 view .LVU169
 649              	.LBB32:
 650              	.LBB16:
 651              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 652              		.loc 1 98 22 is_stmt 0 view .LVU170
 653 025c 487AF0EE 		vmov.f32	s15, s16	@ tmp256, tmp257
 654              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 655              		.loc 1 98 56 view .LVU171
 656 0260 2D6ADFED 		vldr.32	s13, .L21+24	@ tmp259,
 657              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 658              		.loc 1 98 79 view .LVU172
 659 0264 2D7A9FED 		vldr.32	s14, .L21+28	@ tmp262,
 660              	.LBE16:
 661              	.LBE32:
 662              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 663              		.loc 1 187 61 view .LVU173
 664 0268 141094E5 		ldr	r1, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 665              	.LBB33:
 666              	.LBB17:
 667              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 668              		.loc 1 98 22 view .LVU174
 669 026c 8A7A49EE 		vmla.f32	s15, s19, s20	@ tmp256, _48, tmp255
 670              	.LBE17:
 671              	.LBE33:
 672              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 673              		.loc 1 187 65 view .LVU175
 674 0270 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 675 0274 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_19 + 4B], MEM[(int *)_19 + 4B]
 676              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 677              		.loc 1 187 36 view .LVU176
 678 0278 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 679              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 680              		.loc 1 187 22 view .LVU177
 681 027c 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 682              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 683              		.loc 1 187 65 view .LVU178
 684 0280 920102E0 		mul	r2, r2, r1	@ tmp247, img_41(D)->height, MEM[(int *)_19 + 4B]
 685              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 686              		.loc 1 187 22 view .LVU179
 687 0284 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_13 + 4B], MEM[(int *)_13 + 4B]
 688              	.LBB34:
 689              	.LBB18:
 690              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 691              		.loc 1 98 46 view .LVU180
 692 0288 667A49EE 		vmls.f32	s15, s18, s13	@ tmp260, _53, tmp259
 693              	.LBE18:
 694              	.LBE34:
 695              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 696              		.loc 1 187 80 view .LVU181
 697 028c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp252, tmp247, tmp247,
 698              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 699              		.loc 1 187 5 view .LVU182
 700 0290 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_13 + 4B]
 701 0294 C220A0E1 		asr	r2, r2, #1	@, tmp252,
 702              	.LBB35:
 703              	.LBB19:
 704              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 705              		.loc 1 98 69 view .LVU183
 706 0298 C77A48EE 		vmls.f32	s15, s17, s14	@ tmp263, _58, tmp262
 707              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 708              		.loc 1 98 16 view .LVU184
 709 029c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp265, tmp263
 710 02a0 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp265, %sfp
 711              	.LBE19:
 712              	.LBE35:
 713              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 714              		.loc 1 187 5 view .LVU185
 715 02a4 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 716 02a8 FEFFFFEB 		bl	memset		@
 717              	.LVL27:
 188:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 718              		.loc 1 188 5 is_stmt 1 view .LVU186
 719              	.LBB36:
 720              	.LBB20:
 721              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 722              		.loc 1 97 33 is_stmt 0 view .LVU187
 723 02ac 1C7A9FED 		vldr.32	s14, .L21+32	@ tmp306,
 724              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 725              		.loc 1 97 56 view .LVU188
 726 02b0 1C7ADFED 		vldr.32	s15, .L21+36	@ tmp310,
 727              	.LBE20:
 728              	.LBE36:
 729              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 730              		.loc 1 188 61 view .LVU189
 731 02b4 143094E5 		ldr	r3, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 732              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 733              		.loc 1 188 65 view .LVU190
 734 02b8 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 735              	.LBB37:
 736              	.LBB21:
 737              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 738              		.loc 1 97 22 view .LVU191
 739 02bc 878A09EE 		vmla.f32	s16, s19, s14	@ tmp307, _48, tmp306
 740              	.LBE21:
 741              	.LBE37:
 742              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 743              		.loc 1 188 65 view .LVU192
 744 02c0 081093E5 		ldr	r1, [r3, #8]	@ MEM[(int *)_32 + 8B], MEM[(int *)_32 + 8B]
 745              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 746              		.loc 1 188 36 view .LVU193
 747 02c4 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 748              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 749              		.loc 1 188 22 view .LVU194
 750 02c8 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 751              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 752              		.loc 1 188 65 view .LVU195
 753 02cc 920102E0 		mul	r2, r2, r1	@ tmp298, img_41(D)->height, MEM[(int *)_32 + 8B]
 754              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 755              		.loc 1 188 22 view .LVU196
 756 02d0 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_26 + 8B], MEM[(int *)_26 + 8B]
 757              	.LBB38:
 758              	.LBB22:
 759              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 760              		.loc 1 97 46 view .LVU197
 761 02d4 678A09EE 		vmls.f32	s16, s18, s15	@ tmp311, _53, tmp310
 762              	.LBE22:
 763              	.LBE38:
 764              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 765              		.loc 1 188 80 view .LVU198
 766 02d8 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp303, tmp298, tmp298,
 767              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 768              		.loc 1 188 5 view .LVU199
 769 02dc 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_26 + 8B]
 770 02e0 C220A0E1 		asr	r2, r2, #1	@, tmp303,
 771              	.LBB39:
 772              	.LBB23:
 773              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 774              		.loc 1 97 69 view .LVU200
 775 02e4 8A8A08EE 		vmla.f32	s16, s17, s20	@ tmp314, _58, tmp255
 776              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 777              		.loc 1 97 16 view .LVU201
 778 02e8 C87AFCEE 		vcvt.u32.f32	s15, s16	@ tmp316, tmp314
 779 02ec 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp316, %sfp
 780              	.LBE23:
 781              	.LBE39:
 782              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 783              		.loc 1 188 5 view .LVU202
 784 02f0 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 785              	@ armwave.c:189: }
 189:armwave.c     **** }
 786              		.loc 1 189 1 view .LVU203
 787 02f4 08D08DE2 		add	sp, sp, #8	@,,
 788              		.cfi_def_cfa_offset 32
 789              		@ sp needed	@
 790 02f8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 791              		.cfi_restore 84
 792              		.cfi_restore 85
 793              		.cfi_restore 82
 794              		.cfi_restore 83
 795              		.cfi_restore 80
 796              		.cfi_restore 81
 797              		.cfi_def_cfa_offset 8
 798 02fc 1040BDE8 		pop	{r4, lr}	@
 799              		.cfi_restore 14
 800              		.cfi_restore 4
 801              		.cfi_def_cfa_offset 0
 802              	.LVL28:
 803              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 804              		.loc 1 188 5 view .LVU204
 805 0300 FEFFFFEA 		b	memset		@
 806              	.LVL29:
 807              	.L22:
 808              		.align	2
 809              	.L21:
 810 0304 6F12833E 		.word	1048777327
 811 0308 00008041 		.word	1098907648
 812 030c 2506013F 		.word	1057031717
 813 0310 F0A7C63D 		.word	1036429296
 814 0314 00000043 		.word	1124073472
 815 0318 9CC4E03E 		.word	1054917788
 816 031c 7F6ABC3E 		.word	1052535423
 817 0320 7368913D 		.word	1032939635
 818 0324 508D17BE 		.word	-1105752752
 819 0328 F4FD943E 		.word	1049951732
 820              		.cfi_endproc
 821              	.LFE61:
 823              		.align	2
 824              		.global	armwave_prep_yuv_palette
 825              		.syntax unified
 826              		.arm
 827              		.fpu vfp
 829              	armwave_prep_yuv_palette:
 830              	.LVL30:
 831              	.LFB62:
 190:armwave.c     **** 
 191:armwave.c     **** /*
 192:armwave.c     ****  * Prepare the YUV table for a given range of intensities.
 193:armwave.c     ****  *
 194:armwave.c     ****  * This can be used to generate different palettes. Right now only
 195:armwave.c     ****  * the default palette '0' is supported which is linear intensity with
 196:armwave.c     ****  * given trace colour.
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_prep_yuv_palette(int palette, struct armwave_color_mix_t *color0, struct armwave_color
 199:armwave.c     **** {
 832              		.loc 1 199 1 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 8
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     int v;
 836              		.loc 1 200 5 view .LVU206
 201:armwave.c     ****     float h;
 837              		.loc 1 201 5 view .LVU207
 202:armwave.c     ****     struct armwave_rgb_t rgb_temp;
 838              		.loc 1 202 5 view .LVU208
 203:armwave.c     ****     struct armwave_hsv_t hsv_temp;
 839              		.loc 1 203 5 view .LVU209
 204:armwave.c     ****     
 205:armwave.c     ****     switch(palette) {
 840              		.loc 1 205 5 view .LVU210
 841              	@ armwave.c:199: {
 199:armwave.c     ****     int v;
 842              		.loc 1 199 1 is_stmt 0 view .LVU211
 843 032c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 844              		.cfi_def_cfa_offset 32
 845              		.cfi_offset 4, -32
 846              		.cfi_offset 5, -28
 847              		.cfi_offset 6, -24
 848              		.cfi_offset 7, -20
 849              		.cfi_offset 8, -16
 850              		.cfi_offset 9, -12
 851              		.cfi_offset 10, -8
 852              		.cfi_offset 14, -4
 853 0330 068B2DED 		vpush.64	{d8, d9, d10}	@
 854              		.cfi_def_cfa_offset 56
 855              		.cfi_offset 80, -56
 856              		.cfi_offset 81, -52
 857              		.cfi_offset 82, -48
 858              		.cfi_offset 83, -44
 859              		.cfi_offset 84, -40
 860              		.cfi_offset 85, -36
 861              	@ armwave.c:205:     switch(palette) {
 862              		.loc 1 205 5 view .LVU212
 863 0334 010050E3 		cmp	r0, #1	@ palette,
 864              	@ armwave.c:199: {
 199:armwave.c     ****     int v;
 865              		.loc 1 199 1 view .LVU213
 866 0338 0160A0E1 		mov	r6, r1	@ color0, color0
 867 033c 18D04DE2 		sub	sp, sp, #24	@,,
 868              		.cfi_def_cfa_offset 80
 869              	@ armwave.c:205:     switch(palette) {
 870              		.loc 1 205 5 view .LVU214
 871 0340 1500000A 		beq	.L24		@,
 872 0344 020050E3 		cmp	r0, #2	@ palette,
 873 0348 0050A0E1 		mov	r5, r0	@ palette, palette
 874 034c 9F00000A 		beq	.L25		@,
 875 0350 000050E3 		cmp	r0, #0	@ palette,
 876 0354 5700000A 		beq	.L48		@,
 877              	.LVL31:
 878              	.L26:
 879              		.loc 1 205 5 view .LVU215
 880 0358 54449FE5 		ldr	r4, .L49+36	@ ivtmp.131,
 881              	@ armwave.c:246:         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv
 206:armwave.c     ****         case PLT_SINGLE_COLOUR:
 207:armwave.c     ****             for(v = 0; v < 256; v++) {
 208:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 210:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 211:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 212:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 213:armwave.c     ****             }
 214:armwave.c     ****             break;
 215:armwave.c     ****         
 216:armwave.c     ****         case PLT_INVERT_SINGLE_COLOUR:
 217:armwave.c     ****             for(v = 0; v < 256; v++) {
 218:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 220:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 221:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 222:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 223:armwave.c     ****             }
 224:armwave.c     ****             break;
 225:armwave.c     ****         
 226:armwave.c     ****         case PLT_RAINBOW_THERMAL:
 227:armwave.c     ****             for(v = 0; v < 256; v++) {
 228:armwave.c     ****                 hsv_temp.h = v;
 229:armwave.c     ****                 hsv_temp.s = 255;
 230:armwave.c     ****                 
 231:armwave.c     ****                 if(v < 20) {
 232:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 233:armwave.c     ****                 } else {
 234:armwave.c     ****                     hsv_temp.v = 255;
 235:armwave.c     ****                 }
 236:armwave.c     ****                 
 237:armwave.c     ****                 hsv2rgb(&hsv_temp, &rgb_temp);
 238:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 239:armwave.c     ****                 
 240:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h, hsv_temp.s, hsv
 241:armwave.c     ****             }
 242:armwave.c     ****             break;
 243:armwave.c     ****     }
 244:armwave.c     ****     
 245:armwave.c     ****     for(v = 0; v < 256; v++) {
 246:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 882              		.loc 1 246 9 discriminator 3 view .LVU216
 883 035c 54649FE5 		ldr	r6, .L49+40	@ tmp518,
 884              	.LBB48:
 885              	.LBB49:
 886              	@ armwave.c:125:     switch (region)
 125:armwave.c     ****     {
 887              		.loc 1 125 5 discriminator 3 view .LVU217
 888 0360 0050A0E3 		mov	r5, #0	@ v,
 889              	.L40:
 890              	.LVL32:
 125:armwave.c     ****     {
 891              		.loc 1 125 5 discriminator 3 view .LVU218
 892              	.LBE49:
 893              	.LBE48:
 894              		.loc 1 246 9 is_stmt 1 discriminator 3 view .LVU219
 895 0364 0210D4E5 		ldrb	r1, [r4, #2]	@ zero_extendqisi2	@ MEM[base: _415, offset: 2B], MEM[base: _415, offset: 2B]
 896 0368 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2	@, MEM[base: _415, offset: 1B]
 897 036c 0020D4E5 		ldrb	r2, [r4]	@ zero_extendqisi2	@, MEM[base: _415, offset: 0B]
 898 0370 0600A0E1 		mov	r0, r6	@, tmp518
 899 0374 00108DE5 		str	r1, [sp]	@ MEM[base: _415, offset: 2B],
 900 0378 0510A0E1 		mov	r1, r5	@, v
 901              	@ armwave.c:245:     for(v = 0; v < 256; v++) {
 245:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 902              		.loc 1 245 26 is_stmt 0 discriminator 3 view .LVU220
 903 037c 015085E2 		add	r5, r5, #1	@ v, v,
 904              	.LVL33:
 905              	@ armwave.c:246:         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv
 906              		.loc 1 246 9 discriminator 3 view .LVU221
 907 0380 FEFFFFEB 		bl	printf		@
 908              	.LVL34:
 909              	@ armwave.c:245:     for(v = 0; v < 256; v++) {
 245:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 910              		.loc 1 245 5 discriminator 3 view .LVU222
 911 0384 010C55E3 		cmp	r5, #256	@ v,
 912 0388 034084E2 		add	r4, r4, #3	@ ivtmp.131, ivtmp.131,
 913 038c F4FFFF1A 		bne	.L40		@,
 914              	@ armwave.c:248: }
 247:armwave.c     ****     }
 248:armwave.c     **** }
 915              		.loc 1 248 1 view .LVU223
 916 0390 18D08DE2 		add	sp, sp, #24	@,,
 917              		.cfi_remember_state
 918              		.cfi_def_cfa_offset 56
 919              		@ sp needed	@
 920 0394 068BBDEC 		vldm	sp!, {d8-d10}	@,
 921              		.cfi_restore 84
 922              		.cfi_restore 85
 923              		.cfi_restore 82
 924              		.cfi_restore 83
 925              		.cfi_restore 80
 926              		.cfi_restore 81
 927              		.cfi_def_cfa_offset 32
 928 0398 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 929              	.LVL35:
 930              	.L24:
 931              		.cfi_restore_state
 932              	.LBB59:
 933              	.LBB60:
 934              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 935              		.loc 1 96 33 view .LVU224
 936 039c FBAA9FED 		vldr.32	s20, .L49	@ tmp352,
 937              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 938              		.loc 1 96 22 view .LVU225
 939 03a0 FB9ADFED 		vldr.32	s19, .L49+4	@ tmp354,
 940              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 941              		.loc 1 96 56 view .LVU226
 942 03a4 FB9A9FED 		vldr.32	s18, .L49+8	@ tmp356,
 943              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 944              		.loc 1 96 79 view .LVU227
 945 03a8 FB8ADFED 		vldr.32	s17, .L49+12	@ tmp359,
 946              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 947              		.loc 1 97 33 view .LVU228
 948 03ac FB8A9FED 		vldr.32	s16, .L49+16	@ tmp364,
 949 03b0 FC739FE5 		ldr	r7, .L49+36	@ ivtmp.145,
 950              	.LBE60:
 951              	.LBE59:
 952              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 953              		.loc 1 221 17 view .LVU229
 954 03b4 00849FE5 		ldr	r8, .L49+44	@ tmp525,
 955              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 956              		.loc 1 217 19 view .LVU230
 957 03b8 0050A0E3 		mov	r5, #0	@ v,
 958              	.LVL36:
 959              	.L28:
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 960              		.loc 1 218 17 is_stmt 1 discriminator 3 view .LVU231
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 961              		.loc 1 219 17 discriminator 3 view .LVU232
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 962              		.loc 1 220 17 discriminator 3 view .LVU233
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 963              		.loc 1 221 17 discriminator 3 view .LVU234
 964              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 965              		.loc 1 218 30 is_stmt 0 discriminator 3 view .LVU235
 966 03bc F020D6E1 		ldrsh	r2, [r6]	@ color0_82(D)->r, color0_82(D)->r
 967              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 968              		.loc 1 219 30 discriminator 3 view .LVU236
 969 03c0 F230D6E1 		ldrsh	r3, [r6, #2]	@ color0_82(D)->g, color0_82(D)->g
 970              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 971              		.loc 1 220 30 discriminator 3 view .LVU237
 972 03c4 F400D6E1 		ldrsh	r0, [r6, #4]	@ color0_82(D)->b, color0_82(D)->b
 973              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 974              		.loc 1 221 17 discriminator 3 view .LVU238
 975 03c8 FF1065E2 		rsb	r1, r5, #255	@, v,
 976              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 977              		.loc 1 218 30 discriminator 3 view .LVU239
 978 03cc 950202E0 		mul	r2, r5, r2	@ tmp342, v, color0_82(D)->r
 979              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 980              		.loc 1 219 30 discriminator 3 view .LVU240
 981 03d0 950303E0 		mul	r3, r5, r3	@ tmp345, v, color0_82(D)->g
 982              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 983              		.loc 1 220 30 discriminator 3 view .LVU241
 984 03d4 950000E0 		mul	r0, r5, r0	@ tmp348, v, color0_82(D)->b
 985              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 986              		.loc 1 218 30 discriminator 3 view .LVU242
 987 03d8 4224A0E1 		asr	r2, r2, #8	@ tmp340, tmp342,
 988              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 989              		.loc 1 219 30 discriminator 3 view .LVU243
 990 03dc 4334A0E1 		asr	r3, r3, #8	@ tmp343, tmp345,
 991              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 992              		.loc 1 218 30 discriminator 3 view .LVU244
 993 03e0 FF0052E3 		cmp	r2, #255	@ tmp340,
 994              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 995              		.loc 1 220 30 discriminator 3 view .LVU245
 996 03e4 4004A0E1 		asr	r0, r0, #8	@ tmp346, tmp348,
 997              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 998              		.loc 1 218 30 discriminator 3 view .LVU246
 999 03e8 FF20A0A3 		movge	r2, #255	@ tmp340,
 1000              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1001              		.loc 1 219 30 discriminator 3 view .LVU247
 1002 03ec FF0053E3 		cmp	r3, #255	@ tmp343,
 1003 03f0 FF30A0A3 		movge	r3, #255	@ tmp343,
 1004              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1005              		.loc 1 220 30 discriminator 3 view .LVU248
 1006 03f4 FF0050E3 		cmp	r0, #255	@ tmp346,
 1007 03f8 FF00A0A3 		movge	r0, #255	@ tmp346,
 1008 03fc 72A0EFE6 		uxtb	r10, r2	@ _78, tmp340
 1009 0400 7040EFE6 		uxtb	r4, r0	@ _100, tmp346
 1010 0404 7390EFE6 		uxtb	r9, r3	@ _99, tmp343
 1011              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 1012              		.loc 1 221 17 discriminator 3 view .LVU249
 1013 0408 0930A0E1 		mov	r3, r9	@, _99
 1014 040c 0A20A0E1 		mov	r2, r10	@, _78
 1015 0410 00408DE5 		str	r4, [sp]	@ _100,
 1016 0414 0800A0E1 		mov	r0, r8	@, tmp525
 1017 0418 FEFFFFEB 		bl	printf		@
 1018              	.LVL37:
 222:armwave.c     ****             }
 1019              		.loc 1 222 17 is_stmt 1 discriminator 3 view .LVU250
 1020              	.LBB63:
 1021              	.LBI59:
  94:armwave.c     **** {
 1022              		.loc 1 94 6 discriminator 3 view .LVU251
 1023              	.LBB61:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1024              		.loc 1 96 5 discriminator 3 view .LVU252
 1025              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1026              		.loc 1 96 33 is_stmt 0 discriminator 3 view .LVU253
 1027 041c 90AA07EE 		vmov	s15, r10	@ int	@ _78, _78
 1028              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1029              		.loc 1 97 22 discriminator 3 view .LVU254
 1030 0420 E86A9FED 		vldr.32	s12, .L49+56	@ tmp366,
 1031              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1032              		.loc 1 96 22 discriminator 3 view .LVU255
 1033 0424 695AB0EE 		vmov.f32	s10, s19	@ tmp353, tmp354
 1034              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1035              		.loc 1 97 79 discriminator 3 view .LVU256
 1036 0428 E74ADFED 		vldr.32	s9, .L49+60	@ tmp371,
 1037              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1038              		.loc 1 96 33 discriminator 3 view .LVU257
 1039 042c E76AF8EE 		vcvt.f32.s32	s13, s15	@ _139, _78
 1040              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1041              		.loc 1 96 56 discriminator 3 view .LVU258
 1042 0430 909A07EE 		vmov	s15, r9	@ int	@ _99, _99
 1043              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1044              		.loc 1 97 22 discriminator 3 view .LVU259
 1045 0434 465AF0EE 		vmov.f32	s11, s12	@ tmp365, tmp366
 1046              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1047              		.loc 1 97 56 discriminator 3 view .LVU260
 1048 0438 D93A9FED 		vldr.32	s6, .L49+20	@ tmp368,
 1049              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1050              		.loc 1 98 56 discriminator 3 view .LVU261
 1051 043c D93ADFED 		vldr.32	s7, .L49+24	@ tmp380,
 1052              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1053              		.loc 1 96 56 discriminator 3 view .LVU262
 1054 0440 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _144, _99
 1055              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1056              		.loc 1 96 79 discriminator 3 view .LVU263
 1057 0444 904A07EE 		vmov	s15, r4	@ int	@ _100, _100
 1058              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1059              		.loc 1 98 79 discriminator 3 view .LVU264
 1060 0448 E44A9FED 		vldr.32	s8, .L49+80	@ tmp383,
 1061              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1062              		.loc 1 96 22 discriminator 3 view .LVU265
 1063 044c 8A5A06EE 		vmla.f32	s10, s13, s20	@ tmp353, _139, tmp352
 1064              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1065              		.loc 1 97 22 discriminator 3 view .LVU266
 1066 0450 885A46EE 		vmla.f32	s11, s13, s16	@ tmp365, _139, tmp364
 1067              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1068              		.loc 1 96 79 discriminator 3 view .LVU267
 1069 0454 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _149, _100
 1070              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1071              		.loc 1 98 22 discriminator 3 view .LVU268
 1072 0458 A46A06EE 		vmla.f32	s12, s13, s9	@ tmp377, _139, tmp371
 1073              	.LBE61:
 1074              	.LBE63:
 1075              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1076              		.loc 1 217 34 discriminator 3 view .LVU269
 1077 045c 015085E2 		add	r5, r5, #1	@ v, v,
 1078              	.LVL38:
 1079              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1080              		.loc 1 217 13 discriminator 3 view .LVU270
 1081 0460 010C55E3 		cmp	r5, #256	@ v,
 1082 0464 037047E2 		sub	r7, r7, #3	@ ivtmp.145, ivtmp.145,
 1083              	.LBB64:
 1084              	.LBB62:
 1085              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1086              		.loc 1 96 46 discriminator 3 view .LVU271
 1087 0468 095A07EE 		vmla.f32	s10, s14, s18	@ tmp357, _144, tmp356
 1088              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1089              		.loc 1 97 46 discriminator 3 view .LVU272
 1090 046c 656AF0EE 		vmov.f32	s13, s11	@ tmp365, tmp365
 1091              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1092              		.loc 1 98 46 discriminator 3 view .LVU273
 1093 0470 636A07EE 		vmls.f32	s12, s14, s7	@ tmp381, _144, tmp380
 1094              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1095              		.loc 1 97 46 discriminator 3 view .LVU274
 1096 0474 436A47EE 		vmls.f32	s13, s14, s6	@ tmp365, _144, tmp368
 1097              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1098              		.loc 1 96 69 discriminator 3 view .LVU275
 1099 0478 455AF0EE 		vmov.f32	s11, s10	@ tmp357, tmp357
 1100              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1101              		.loc 1 98 69 discriminator 3 view .LVU276
 1102 047c C46A07EE 		vmls.f32	s12, s15, s8	@ tmp384, _149, tmp383
 1103              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1104              		.loc 1 96 69 discriminator 3 view .LVU277
 1105 0480 A85A47EE 		vmla.f32	s11, s15, s17	@ tmp357, _149, tmp359
 1106              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1107              		.loc 1 97 69 discriminator 3 view .LVU278
 1108 0484 667AB0EE 		vmov.f32	s14, s13	@ tmp369, tmp369
 1109 0488 A47A07EE 		vmla.f32	s14, s15, s9	@ tmp369, _149, tmp371
 1110              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1111              		.loc 1 96 16 discriminator 3 view .LVU279
 1112 048c E57AFCEE 		vcvt.u32.f32	s15, s11	@ tmp361, tmp360
 1113 0490 901A17EE 		vmov	r1, s15	@ int	@ tmp361, tmp361
 1114              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1115              		.loc 1 97 16 discriminator 3 view .LVU280
 1116 0494 C77AFCEE 		vcvt.u32.f32	s15, s14	@ tmp373, tmp372
 1117              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1118              		.loc 1 96 16 discriminator 3 view .LVU281
 1119 0498 0013C7E5 		strb	r1, [r7, #768]	@ tmp361, MEM[base: _399, offset: 765B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1120              		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU282
 1121              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1122              		.loc 1 97 16 is_stmt 0 discriminator 3 view .LVU283
 1123 049c 902A17EE 		vmov	r2, s15	@ int	@ tmp373, tmp373
 1124              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1125              		.loc 1 98 16 discriminator 3 view .LVU284
 1126 04a0 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp385, tmp384
 1127              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1128              		.loc 1 97 16 discriminator 3 view .LVU285
 1129 04a4 0123C7E5 		strb	r2, [r7, #769]	@ tmp373, MEM[base: _399, offset: 766B]
  98:armwave.c     **** }
 1130              		.loc 1 98 5 is_stmt 1 discriminator 3 view .LVU286
 1131              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1132              		.loc 1 98 16 is_stmt 0 discriminator 3 view .LVU287
 1133 04a8 903A17EE 		vmov	r3, s15	@ int	@ tmp385, tmp385
 1134 04ac 0233C7E5 		strb	r3, [r7, #770]	@ tmp385, MEM[base: _399, offset: 767B]
 1135              	.LVL39:
  98:armwave.c     **** }
 1136              		.loc 1 98 16 discriminator 3 view .LVU288
 1137              	.LBE62:
 1138              	.LBE64:
 1139              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1140              		.loc 1 217 13 discriminator 3 view .LVU289
 1141 04b0 C1FFFF1A 		bne	.L28		@,
 1142 04b4 A7FFFFEA 		b	.L26		@
 1143              	.LVL40:
 1144              	.L48:
 1145              	.LBB65:
 1146              	.LBB66:
 1147              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1148              		.loc 1 96 33 view .LVU290
 1149 04b8 B4AA9FED 		vldr.32	s20, .L49	@ tmp305,
 1150              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1151              		.loc 1 96 22 view .LVU291
 1152 04bc B49ADFED 		vldr.32	s19, .L49+4	@ tmp307,
 1153              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1154              		.loc 1 96 56 view .LVU292
 1155 04c0 B49A9FED 		vldr.32	s18, .L49+8	@ tmp309,
 1156              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1157              		.loc 1 96 79 view .LVU293
 1158 04c4 B48ADFED 		vldr.32	s17, .L49+12	@ tmp312,
 1159              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1160              		.loc 1 97 33 view .LVU294
 1161 04c8 B48A9FED 		vldr.32	s16, .L49+16	@ tmp317,
 1162 04cc E0729FE5 		ldr	r7, .L49+36	@ ivtmp.138,
 1163              	.LBE66:
 1164              	.LBE65:
 1165              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1166              		.loc 1 211 17 view .LVU295
 1167 04d0 E4829FE5 		ldr	r8, .L49+44	@ tmp519,
 1168              	.LVL41:
 1169              	.L27:
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1170              		.loc 1 208 17 is_stmt 1 discriminator 3 view .LVU296
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1171              		.loc 1 209 17 discriminator 3 view .LVU297
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1172              		.loc 1 210 17 discriminator 3 view .LVU298
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1173              		.loc 1 211 17 discriminator 3 view .LVU299
 1174              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1175              		.loc 1 208 30 is_stmt 0 discriminator 3 view .LVU300
 1176 04d4 F020D6E1 		ldrsh	r2, [r6]	@ color0_82(D)->r, color0_82(D)->r
 1177              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1178              		.loc 1 209 30 discriminator 3 view .LVU301
 1179 04d8 F230D6E1 		ldrsh	r3, [r6, #2]	@ color0_82(D)->g, color0_82(D)->g
 1180              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1181              		.loc 1 210 30 discriminator 3 view .LVU302
 1182 04dc F400D6E1 		ldrsh	r0, [r6, #4]	@ color0_82(D)->b, color0_82(D)->b
 1183              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1184              		.loc 1 211 17 discriminator 3 view .LVU303
 1185 04e0 0510A0E1 		mov	r1, r5	@, palette
 1186              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1187              		.loc 1 208 30 discriminator 3 view .LVU304
 1188 04e4 950202E0 		mul	r2, r5, r2	@ tmp296, palette, color0_82(D)->r
 1189              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1190              		.loc 1 209 30 discriminator 3 view .LVU305
 1191 04e8 950303E0 		mul	r3, r5, r3	@ tmp299, palette, color0_82(D)->g
 1192              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1193              		.loc 1 210 30 discriminator 3 view .LVU306
 1194 04ec 950000E0 		mul	r0, r5, r0	@ tmp302, palette, color0_82(D)->b
 1195              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1196              		.loc 1 208 30 discriminator 3 view .LVU307
 1197 04f0 4224A0E1 		asr	r2, r2, #8	@ tmp294, tmp296,
 1198              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1199              		.loc 1 209 30 discriminator 3 view .LVU308
 1200 04f4 4334A0E1 		asr	r3, r3, #8	@ tmp297, tmp299,
 1201              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1202              		.loc 1 208 30 discriminator 3 view .LVU309
 1203 04f8 FF0052E3 		cmp	r2, #255	@ tmp294,
 1204              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1205              		.loc 1 210 30 discriminator 3 view .LVU310
 1206 04fc 4004A0E1 		asr	r0, r0, #8	@ tmp300, tmp302,
 1207              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1208              		.loc 1 208 30 discriminator 3 view .LVU311
 1209 0500 FF20A0A3 		movge	r2, #255	@ tmp294,
 1210              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1211              		.loc 1 209 30 discriminator 3 view .LVU312
 1212 0504 FF0053E3 		cmp	r3, #255	@ tmp297,
 1213 0508 FF30A0A3 		movge	r3, #255	@ tmp297,
 1214              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1215              		.loc 1 210 30 discriminator 3 view .LVU313
 1216 050c FF0050E3 		cmp	r0, #255	@ tmp300,
 1217 0510 FF00A0A3 		movge	r0, #255	@ tmp300,
 1218 0514 72A0EFE6 		uxtb	r10, r2	@ _93, tmp294
 1219 0518 7040EFE6 		uxtb	r4, r0	@ _259, tmp300
 1220 051c 7390EFE6 		uxtb	r9, r3	@ _87, tmp297
 1221              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1222              		.loc 1 211 17 discriminator 3 view .LVU314
 1223 0520 0930A0E1 		mov	r3, r9	@, _87
 1224 0524 0A20A0E1 		mov	r2, r10	@, _93
 1225 0528 00408DE5 		str	r4, [sp]	@ _259,
 1226 052c 0800A0E1 		mov	r0, r8	@, tmp519
 1227 0530 FEFFFFEB 		bl	printf		@
 1228              	.LVL42:
 212:armwave.c     ****             }
 1229              		.loc 1 212 17 is_stmt 1 discriminator 3 view .LVU315
 1230              	.LBB69:
 1231              	.LBI65:
  94:armwave.c     **** {
 1232              		.loc 1 94 6 discriminator 3 view .LVU316
 1233              	.LBB67:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1234              		.loc 1 96 5 discriminator 3 view .LVU317
 1235              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1236              		.loc 1 96 33 is_stmt 0 discriminator 3 view .LVU318
 1237 0534 90AA07EE 		vmov	s15, r10	@ int	@ _93, _93
 1238              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1239              		.loc 1 97 22 discriminator 3 view .LVU319
 1240 0538 A26A9FED 		vldr.32	s12, .L49+56	@ tmp319,
 1241              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1242              		.loc 1 96 22 discriminator 3 view .LVU320
 1243 053c 695AB0EE 		vmov.f32	s10, s19	@ tmp306, tmp307
 1244              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1245              		.loc 1 97 79 discriminator 3 view .LVU321
 1246 0540 A14ADFED 		vldr.32	s9, .L49+60	@ tmp324,
 1247              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1248              		.loc 1 96 33 discriminator 3 view .LVU322
 1249 0544 E76AF8EE 		vcvt.f32.s32	s13, s15	@ _109, _93
 1250              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1251              		.loc 1 96 56 discriminator 3 view .LVU323
 1252 0548 909A07EE 		vmov	s15, r9	@ int	@ _87, _87
 1253              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1254              		.loc 1 97 22 discriminator 3 view .LVU324
 1255 054c 465AF0EE 		vmov.f32	s11, s12	@ tmp318, tmp319
 1256              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1257              		.loc 1 97 56 discriminator 3 view .LVU325
 1258 0550 933A9FED 		vldr.32	s6, .L49+20	@ tmp321,
 1259              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1260              		.loc 1 98 56 discriminator 3 view .LVU326
 1261 0554 933ADFED 		vldr.32	s7, .L49+24	@ tmp333,
 1262              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1263              		.loc 1 96 56 discriminator 3 view .LVU327
 1264 0558 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _114, _87
 1265              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1266              		.loc 1 96 79 discriminator 3 view .LVU328
 1267 055c 904A07EE 		vmov	s15, r4	@ int	@ _259, _259
 1268              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1269              		.loc 1 98 79 discriminator 3 view .LVU329
 1270 0560 9E4A9FED 		vldr.32	s8, .L49+80	@ tmp336,
 1271              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1272              		.loc 1 96 22 discriminator 3 view .LVU330
 1273 0564 8A5A06EE 		vmla.f32	s10, s13, s20	@ tmp306, _109, tmp305
 1274              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1275              		.loc 1 97 22 discriminator 3 view .LVU331
 1276 0568 885A46EE 		vmla.f32	s11, s13, s16	@ tmp318, _109, tmp317
 1277              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1278              		.loc 1 96 79 discriminator 3 view .LVU332
 1279 056c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _119, _259
 1280              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1281              		.loc 1 98 22 discriminator 3 view .LVU333
 1282 0570 A46A06EE 		vmla.f32	s12, s13, s9	@ tmp330, _109, tmp324
 1283              	.LBE67:
 1284              	.LBE69:
 1285              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1286              		.loc 1 207 34 discriminator 3 view .LVU334
 1287 0574 015085E2 		add	r5, r5, #1	@ palette, palette,
 1288              	.LVL43:
 1289              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1290              		.loc 1 207 13 discriminator 3 view .LVU335
 1291 0578 010C55E3 		cmp	r5, #256	@ palette,
 1292 057c 037087E2 		add	r7, r7, #3	@ ivtmp.138, ivtmp.138,
 1293              	.LBB70:
 1294              	.LBB68:
 1295              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1296              		.loc 1 96 46 discriminator 3 view .LVU336
 1297 0580 095A07EE 		vmla.f32	s10, s14, s18	@ tmp310, _114, tmp309
 1298              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1299              		.loc 1 97 46 discriminator 3 view .LVU337
 1300 0584 656AF0EE 		vmov.f32	s13, s11	@ tmp318, tmp318
 1301              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1302              		.loc 1 98 46 discriminator 3 view .LVU338
 1303 0588 636A07EE 		vmls.f32	s12, s14, s7	@ tmp334, _114, tmp333
 1304              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1305              		.loc 1 97 46 discriminator 3 view .LVU339
 1306 058c 436A47EE 		vmls.f32	s13, s14, s6	@ tmp318, _114, tmp321
 1307              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1308              		.loc 1 96 69 discriminator 3 view .LVU340
 1309 0590 455AF0EE 		vmov.f32	s11, s10	@ tmp310, tmp310
 1310              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1311              		.loc 1 98 69 discriminator 3 view .LVU341
 1312 0594 C46A07EE 		vmls.f32	s12, s15, s8	@ tmp337, _119, tmp336
 1313              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1314              		.loc 1 96 69 discriminator 3 view .LVU342
 1315 0598 A85A47EE 		vmla.f32	s11, s15, s17	@ tmp310, _119, tmp312
 1316              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1317              		.loc 1 97 69 discriminator 3 view .LVU343
 1318 059c 667AB0EE 		vmov.f32	s14, s13	@ tmp322, tmp322
 1319 05a0 A47A07EE 		vmla.f32	s14, s15, s9	@ tmp322, _119, tmp324
 1320              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1321              		.loc 1 96 16 discriminator 3 view .LVU344
 1322 05a4 E57AFCEE 		vcvt.u32.f32	s15, s11	@ tmp314, tmp313
 1323 05a8 901A17EE 		vmov	r1, s15	@ int	@ tmp314, tmp314
 1324              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1325              		.loc 1 97 16 discriminator 3 view .LVU345
 1326 05ac C77AFCEE 		vcvt.u32.f32	s15, s14	@ tmp326, tmp325
 1327              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1328              		.loc 1 96 16 discriminator 3 view .LVU346
 1329 05b0 031047E5 		strb	r1, [r7, #-3]	@ tmp314, MEM[base: _409, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1330              		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU347
 1331              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1332              		.loc 1 97 16 is_stmt 0 discriminator 3 view .LVU348
 1333 05b4 902A17EE 		vmov	r2, s15	@ int	@ tmp326, tmp326
 1334              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1335              		.loc 1 98 16 discriminator 3 view .LVU349
 1336 05b8 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp338, tmp337
 1337              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1338              		.loc 1 97 16 discriminator 3 view .LVU350
 1339 05bc 022047E5 		strb	r2, [r7, #-2]	@ tmp326, MEM[base: _409, offset: 1B]
  98:armwave.c     **** }
 1340              		.loc 1 98 5 is_stmt 1 discriminator 3 view .LVU351
 1341              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1342              		.loc 1 98 16 is_stmt 0 discriminator 3 view .LVU352
 1343 05c0 903A17EE 		vmov	r3, s15	@ int	@ tmp338, tmp338
 1344 05c4 013047E5 		strb	r3, [r7, #-1]	@ tmp338, MEM[base: _409, offset: 2B]
 1345              	.LVL44:
  98:armwave.c     **** }
 1346              		.loc 1 98 16 discriminator 3 view .LVU353
 1347              	.LBE68:
 1348              	.LBE70:
 1349              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1350              		.loc 1 207 13 discriminator 3 view .LVU354
 1351 05c8 C1FFFF1A 		bne	.L27		@,
 1352 05cc 61FFFFEA 		b	.L26		@
 1353              	.LVL45:
 1354              	.L25:
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1355              		.loc 1 207 13 discriminator 3 view .LVU355
 1356 05d0 758A9FED 		vldr.32	s16, .L49+28	@ _354,
 1357              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1358              		.loc 1 232 48 view .LVU356
 1359 05d4 75AA9FED 		vldr.32	s20, .L49+32	@ tmp521,
 1360 05d8 6E9ADFED 		vldr.32	s19, .L49+8	@ tmp522,
 1361 05dc 709A9FED 		vldr.32	s18, .L49+20	@ tmp523,
 1362 05e0 708ADFED 		vldr.32	s17, .L49+24	@ tmp524,
 1363 05e4 C8519FE5 		ldr	r5, .L49+36	@ ivtmp.152,
 1364              	.LBB71:
 1365              	.LBB50:
 1366              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1367              		.loc 1 118 12 view .LVU357
 1368 05e8 D0619FE5 		ldr	r6, .L49+48	@ tmp394,
 1369              	.LBE50:
 1370              	.LBE71:
 1371              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1372              		.loc 1 227 19 view .LVU358
 1373 05ec 0040A0E3 		mov	r4, #0	@ v,
 1374              	.LVL46:
 1375              	.L39:
 228:armwave.c     ****                 hsv_temp.s = 255;
 1376              		.loc 1 228 17 is_stmt 1 view .LVU359
 1377              	@ armwave.c:231:                 if(v < 20) {
 231:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1378              		.loc 1 231 19 is_stmt 0 view .LVU360
 1379 05f0 130054E3 		cmp	r4, #19	@ v,
 1380 05f4 7420EFE6 		uxtb	r2, r4	@ _390, v
 1381              	.LVL47:
 229:armwave.c     ****                 
 1382              		.loc 1 229 17 is_stmt 1 view .LVU361
 231:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1383              		.loc 1 231 17 view .LVU362
 232:armwave.c     ****                 } else {
 1384              		.loc 1 232 21 view .LVU363
 237:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1385              		.loc 1 237 17 view .LVU364
 1386              	.LBB72:
 1387              	.LBI48:
 106:armwave.c     **** {
 1388              		.loc 1 106 6 view .LVU365
 1389              	.LBB51:
 108:armwave.c     **** 
 1390              		.loc 1 108 5 view .LVU366
 110:armwave.c     ****     {
 1391              		.loc 1 110 5 view .LVU367
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1392              		.loc 1 118 5 view .LVU368
 1393              	.LBE51:
 1394              	.LBE72:
 1395              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1396              		.loc 1 232 48 is_stmt 0 view .LVU369
 1397 05f8 904A07DE 		vmovle	s15, r4	@ int	@ v, v
 1398              	.LBB73:
 1399              	.LBB52:
 1400              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1401              		.loc 1 118 12 view .LVU370
 1402 05fc 963282E0 		umull	r3, r2, r6, r2	@ tmp527, tmp393, tmp394, _390
 1403              	.LVL48:
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1404              		.loc 1 118 12 view .LVU371
 1405              	.LBE52:
 1406              	.LBE73:
 1407 0600 484AB0CE 		vmovgt.f32	s8, s16	@ _354, _354
 1408              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1409              		.loc 1 232 48 view .LVU372
 1410 0604 E77AF8DE 		vcvtle.f32.s32	s15, s15	@ tmp387, v
 1411              	.LBB74:
 1412              	.LBB53:
 1413              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1414              		.loc 1 119 38 view .LVU373
 1415 0608 2A30E0E3 		mvn	r3, #42	@ tmp396,
 1416              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1417              		.loc 1 118 12 view .LVU374
 1418 060c A221A0E1 		lsr	r2, r2, #3	@ region, tmp393,
 1419              	.LVL49:
 119:armwave.c     **** 
 1420              		.loc 1 119 5 is_stmt 1 view .LVU375
 1421              	.LBE53:
 1422              	.LBE74:
 1423 0610 FF10A0C3 		movgt	r1, #255	@ _352,
 1424              	.LBB75:
 1425              	.LBB54:
 1426              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1427              		.loc 1 119 28 is_stmt 0 view .LVU376
 1428 0614 934223E0 		mla	r3, r3, r2, r4	@ tmp397, tmp396, region, v
 1429              	.LBE54:
 1430              	.LBE75:
 1431              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1432              		.loc 1 232 48 view .LVU377
 1433 0618 8A7A67DE 		vmulle.f32	s15, s15, s20	@ tmp388, tmp387, tmp521
 1434              	.LBB76:
 1435              	.LBB55:
 1436              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1437              		.loc 1 119 15 view .LVU378
 1438 061c 833083E0 		add	r3, r3, r3, lsl #1	@ tmp402, tmp397, tmp397,
 1439 0620 8330A0E1 		lsl	r3, r3, #1	@ tmp404, tmp402,
 1440 0624 7330EFE6 		uxtb	r3, r3	@ remainder, tmp404
 1441              	.LVL50:
 121:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 1442              		.loc 1 121 5 is_stmt 1 view .LVU379
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1443              		.loc 1 122 5 view .LVU380
 1444              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1445              		.loc 1 123 48 is_stmt 0 view .LVU381
 1446 0628 FF0063E2 		rsb	r0, r3, #255	@ tmp412, remainder,
 1447              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1448              		.loc 1 122 41 view .LVU382
 1449 062c 033463E0 		rsb	r3, r3, r3, lsl #8	@ tmp408, remainder, remainder,
 1450              	.LVL51:
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1451              		.loc 1 122 41 view .LVU383
 1452              	.LBE55:
 1453              	.LBE76:
 1454              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1455              		.loc 1 232 32 view .LVU384
 1456 0630 E77AFCDE 		vcvtle.u32.f32	s15, s15	@ tmp391, tmp388
 1457              	.LBB77:
 1458              	.LBB56:
 1459              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1460              		.loc 1 123 41 view .LVU385
 1461 0634 000460E0 		rsb	r0, r0, r0, lsl #8	@ tmp415, tmp412, tmp412,
 1462              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1463              		.loc 1 122 54 view .LVU386
 1464 0638 4334A0E1 		asr	r3, r3, #8	@ tmp409, tmp408,
 1465              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1466              		.loc 1 123 62 view .LVU387
 1467 063c 4004A0E1 		asr	r0, r0, #8	@ tmp416, tmp415,
 1468              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1469              		.loc 1 123 27 view .LVU388
 1470 0640 FF0060E2 		rsb	r0, r0, #255	@ tmp417, tmp416,
 1471              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1472              		.loc 1 122 27 view .LVU389
 1473 0644 FF3063E2 		rsb	r3, r3, #255	@ tmp410, tmp409,
 1474              	.LBE56:
 1475              	.LBE77:
 1476              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1477              		.loc 1 232 32 view .LVU390
 1478 0648 057ACDDD 		vstrle.32	s15, [sp, #20]	@ int	@ tmp391, %sfp
 1479 064c 1410DDD5 		ldrble	r1, [sp, #20]	@ zero_extendqisi2	@ _352, %sfp
 1480 0650 901A07DE 		vmovle	s15, r1	@ int	@ _352, _352
 1481              	.LBB78:
 1482              	.LBB57:
 1483              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1484              		.loc 1 123 20 view .LVU391
 1485 0654 910000E0 		mul	r0, r1, r0	@ tmp418, _352, tmp417
 1486              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1487              		.loc 1 122 20 view .LVU392
 1488 0658 910303E0 		mul	r3, r1, r3	@ tmp411, _352, tmp410
 1489 065c E74AB8DE 		vcvtle.f32.s32	s8, s15	@ _354, _352
 1490              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1491              		.loc 1 123 70 view .LVU393
 1492 0660 4004A0E1 		asr	r0, r0, #8	@ _226, tmp418,
 1493              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1494              		.loc 1 122 62 view .LVU394
 1495 0664 4334A0E1 		asr	r3, r3, #8	@ _219, tmp411,
 1496              	.LVL52:
 123:armwave.c     **** 
 1497              		.loc 1 123 5 is_stmt 1 view .LVU395
 125:armwave.c     ****     {
 1498              		.loc 1 125 5 view .LVU396
 1499 0668 040052E3 		cmp	r2, #4	@ region,
 1500 066c 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 1501 0670 970000EA 		b	.L31	@
 1502              	.L33:
 1503 0674 88060000 		.word	.L37
 1504 0678 80080000 		.word	.L36
 1505 067c 34080000 		.word	.L35
 1506 0680 E8070000 		.word	.L34
 1507 0684 3C070000 		.word	.L32
 1508              	.L37:
 1509 0688 4E6ADFED 		vldr.32	s13, .L49+56	@ tmp426,
 1510 068c 437A9FED 		vldr.32	s14, .L49+16	@ tmp424,
 1511 0690 100A06EE 		vmov	s12, r0	@ int	@ _226, _226
 1512 0694 4C7ADFED 		vldr.32	s15, .L49+60	@ tmp430,
 1513 0698 665AB0EE 		vmov.f32	s10, s13	@ tmp425, tmp426
 1514 069c 503ADFED 		vldr.32	s7, .L49+84	@ _478,
 1515 06a0 C65AF8EE 		vcvt.f32.s32	s11, s12	@ _440, _226
 1516 06a4 276A44EE 		vmla.f32	s13, s8, s15	@ tmp431, _354, tmp430
 1517 06a8 075A04EE 		vmla.f32	s10, s8, s14	@ tmp425, _354, tmp424
 1518 06ac 376A9FED 		vldr.32	s12, .L49	@ tmp420,
 1519 06b0 377ADFED 		vldr.32	s15, .L49+4	@ tmp421,
 1520 06b4 0130A0E1 		mov	r3, r1	@ _219, _352
 1521              	.LVL53:
 125:armwave.c     ****     {
 1522              		.loc 1 125 5 is_stmt 0 view .LVU397
 1523 06b8 0020A0E3 		mov	r2, #0	@ prephitmp_447,
 1524              	.LVL54:
 125:armwave.c     ****     {
 1525              		.loc 1 125 5 view .LVU398
 1526 06bc 067A44EE 		vmla.f32	s15, s8, s12	@ _434, _354, tmp420
 1527 06c0 E86A45EE 		vmls.f32	s13, s11, s17	@ _501, _440, tmp524
 1528 06c4 457AB0EE 		vmov.f32	s14, s10	@ tmp425, tmp425
 1529 06c8 A95A25EE 		vmul.f32	s10, s11, s19	@ _445, _440, tmp522
 1530 06cc C97A05EE 		vmls.f32	s14, s11, s18	@ tmp425, _440, tmp523
 1531 06d0 635AF0EE 		vmov.f32	s11, s7	@ _453, _478
 1532 06d4 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp425
 1533              	.LVL55:
 1534              	.L38:
 125:armwave.c     ****     {
 1535              		.loc 1 125 5 view .LVU399
 1536              	.LBE57:
 1537              	.LBE78:
 238:armwave.c     ****                 
 1538              		.loc 1 238 17 is_stmt 1 view .LVU400
 1539              	.LBB79:
 1540              	.LBI79:
  94:armwave.c     **** {
 1541              		.loc 1 94 6 view .LVU401
 1542              	.LBB80:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1543              		.loc 1 96 5 view .LVU402
 1544              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1545              		.loc 1 96 46 is_stmt 0 view .LVU403
 1546 06d8 857A77EE 		vadd.f32	s15, s15, s10	@ tmp503, _434, _445
 1547              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1548              		.loc 1 97 69 view .LVU404
 1549 06dc 237A36EE 		vadd.f32	s14, s12, s7	@ tmp507, _476, _478
 1550              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1551              		.loc 1 98 16 view .LVU405
 1552 06e0 E66AFCEE 		vcvt.u32.f32	s13, s13	@ tmp510, _501
 1553              	.LBE80:
 1554              	.LBE79:
 1555              	@ armwave.c:240:                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h
 240:armwave.c     ****             }
 1556              		.loc 1 240 17 view .LVU406
 1557 06e4 0A008DE8 		stm	sp, {r1, r3}	@,,
 1558 06e8 0C208DE5 		str	r2, [sp, #12]	@ prephitmp_447,
 1559 06ec 08008DE5 		str	r0, [sp, #8]	@ _226,
 1560 06f0 0420A0E1 		mov	r2, r4	@, v
 1561 06f4 0410A0E1 		mov	r1, r4	@, v
 1562              	.LBB83:
 1563              	.LBB81:
 1564              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1565              		.loc 1 96 69 view .LVU407
 1566 06f8 A57A77EE 		vadd.f32	s15, s15, s11	@ tmp504, tmp503, _453
 1567              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1568              		.loc 1 97 16 view .LVU408
 1569 06fc C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp508, tmp507
 1570              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1571              		.loc 1 98 16 view .LVU409
 1572 0700 90CA16EE 		vmov	ip, s13	@ int	@ tmp510, tmp510
 1573              	.LBE81:
 1574              	.LBE83:
 1575              	@ armwave.c:240:                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h
 240:armwave.c     ****             }
 1576              		.loc 1 240 17 view .LVU410
 1577 0704 FF30A0E3 		mov	r3, #255	@,
 1578 0708 B4009FE5 		ldr	r0, .L49+52	@,
 1579              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1580              		.loc 1 227 34 view .LVU411
 1581 070c 014084E2 		add	r4, r4, #1	@ v, v,
 1582              	.LVL56:
 1583              	.LBB84:
 1584              	.LBB82:
 1585              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1586              		.loc 1 98 16 view .LVU412
 1587 0710 02C0C5E5 		strb	ip, [r5, #2]	@ tmp510, MEM[base: _393, offset: 2B]
 1588 0714 035085E2 		add	r5, r5, #3	@ ivtmp.152, ivtmp.152,
 1589              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1590              		.loc 1 96 16 view .LVU413
 1591 0718 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp505, tmp504
 1592              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1593              		.loc 1 97 16 view .LVU414
 1594 071c 10EA17EE 		vmov	lr, s14	@ int	@ tmp508, tmp508
 1595 0720 02E045E5 		strb	lr, [r5, #-2]	@ tmp508, MEM[base: _393, offset: 1B]
 1596              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1597              		.loc 1 96 16 view .LVU415
 1598 0724 90CA17EE 		vmov	ip, s15	@ int	@ tmp505, tmp505
 1599 0728 03C045E5 		strb	ip, [r5, #-3]	@ tmp505, MEM[base: _393, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1600              		.loc 1 97 5 is_stmt 1 view .LVU416
  98:armwave.c     **** }
 1601              		.loc 1 98 5 view .LVU417
 1602              	.LVL57:
  98:armwave.c     **** }
 1603              		.loc 1 98 5 is_stmt 0 view .LVU418
 1604              	.LBE82:
 1605              	.LBE84:
 240:armwave.c     ****             }
 1606              		.loc 1 240 17 is_stmt 1 view .LVU419
 1607 072c FEFFFFEB 		bl	printf		@
 1608              	.LVL58:
 1609              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1610              		.loc 1 227 13 is_stmt 0 view .LVU420
 1611 0730 010C54E3 		cmp	r4, #256	@ v,
 1612 0734 ADFFFF1A 		bne	.L39		@,
 1613 0738 06FFFFEA 		b	.L26		@
 1614              	.LVL59:
 1615              	.L32:
 1616              	.LBB85:
 1617              	.LBB58:
 140:armwave.c     ****             break;
 1618              		.loc 1 140 13 is_stmt 1 view .LVU421
 140:armwave.c     ****             break;
 1619              		.loc 1 140 29 view .LVU422
 140:armwave.c     ****             break;
 1620              		.loc 1 140 45 view .LVU423
 141:armwave.c     ****         default:
 1621              		.loc 1 141 13 view .LVU424
 1622 073c 900A07EE 		vmov	s15, r0	@ int	@ _226, _226
 1623 0740 206A9FED 		vldr.32	s12, .L49+56	@ tmp481,
 1624 0744 207A9FED 		vldr.32	s14, .L49+60	@ tmp482,
 1625 0748 103ADFED 		vldr.32	s7, .L49	@ tmp476,
 1626 074c E75AB8EE 		vcvt.f32.s32	s10, s15	@ _423, _226
 1627 0750 466AF0EE 		vmov.f32	s13, s12	@ tmp485, tmp481
 1628 0754 0E7ADFED 		vldr.32	s15, .L49+4	@ tmp477,
 1629 0758 204ADFED 		vldr.32	s9, .L49+80	@ tmp488,
 1630 075c 0F3A9FED 		vldr.32	s6, .L49+16	@ tmp480,
 1631 0760 0D5ADFED 		vldr.32	s11, .L49+12	@ tmp478,
 1632              	@ armwave.c:139:         case 4:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1633              		.loc 1 139 9 is_stmt 0 view .LVU425
 1634 0764 0030A0E1 		mov	r3, r0	@ _219, _226
 1635              	.LVL60:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1636              		.loc 1 139 9 view .LVU426
 1637 0768 0120A0E1 		mov	r2, r1	@ prephitmp_447, _352
 1638              	.LVL61:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1639              		.loc 1 139 9 view .LVU427
 1640 076c 076A45EE 		vmla.f32	s13, s10, s14	@ tmp485, _423, tmp482
 1641 0770 237A45EE 		vmla.f32	s15, s10, s7	@ _434, _423, tmp476
 1642 0774 036A05EE 		vmla.f32	s12, s10, s6	@ _476, _423, tmp480
 1643 0778 073A64EE 		vmul.f32	s7, s8, s14	@ _478, _354, tmp482
 1644 077c 255A64EE 		vmul.f32	s11, s8, s11	@ _453, _354, tmp478
 1645 0780 175A9FED 		vldr.32	s10, .L49+84	@ _445,
 1646 0784 0000A0E3 		mov	r0, #0	@ _226,
 1647              	.LVL62:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1648              		.loc 1 139 9 view .LVU428
 1649 0788 646A44EE 		vmls.f32	s13, s8, s9	@ _501, _354, tmp488
 1650 078c D1FFFFEA 		b	.L38		@
 1651              	.L50:
 1652              		.align	2
 1653              	.L49:
 1654 0790 6F12833E 		.word	1048777327
 1655 0794 00008041 		.word	1098907648
 1656 0798 2506013F 		.word	1057031717
 1657 079c F0A7C63D 		.word	1036429296
 1658 07a0 508D17BE 		.word	-1105752752
 1659 07a4 F4FD943E 		.word	1049951732
 1660 07a8 7F6ABC3E 		.word	1052535423
 1661 07ac 00007F43 		.word	1132396544
 1662 07b0 00004C41 		.word	1095499776
 1663 07b4 00000000 		.word	g_yuv_lut
 1664 07b8 44000000 		.word	.LC2
 1665 07bc 00000000 		.word	.LC0
 1666 07c0 83BEA02F 		.word	799063683
 1667 07c4 18000000 		.word	.LC1
 1668 07c8 00000043 		.word	1124073472
 1669 07cc 9CC4E03E 		.word	1054917788
 1670 07d0 00008041 		.word	1098907648
 1671 07d4 F0A7C63D 		.word	1036429296
 1672 07d8 508D17BE 		.word	-1105752752
 1673 07dc 6F12833E 		.word	1048777327
 1674 07e0 7368913D 		.word	1032939635
 1675 07e4 00000000 		.word	0
 1676              	.LVL63:
 1677              	.L34:
 137:armwave.c     ****             break;
 1678              		.loc 1 137 13 is_stmt 1 view .LVU429
 137:armwave.c     ****             break;
 1679              		.loc 1 137 29 view .LVU430
 137:armwave.c     ****             break;
 1680              		.loc 1 137 45 view .LVU431
 138:armwave.c     ****         case 4:
 1681              		.loc 1 138 13 view .LVU432
 1682 07e8 903A07EE 		vmov	s15, r3	@ int	@ _219, _219
 1683 07ec 0B7A1FED 		vldr.32	s14, .L49+56	@ tmp467,
 1684 07f0 064A5FED 		vldr.32	s9, .L49+80	@ tmp474,
 1685 07f4 0C3A5FED 		vldr.32	s7, .L49+60	@ tmp468,
 1686 07f8 E75AB8EE 		vcvt.f32.s32	s10, s15	@ _439, _219
 1687 07fc 476AF0EE 		vmov.f32	s13, s14	@ tmp471, tmp467
 1688 0800 0D7A5FED 		vldr.32	s15, .L49+68	@ tmp464,
 1689              	@ armwave.c:136:         case 3:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1690              		.loc 1 136 9 is_stmt 0 view .LVU433
 1691 0804 0300A0E1 		mov	r0, r3	@ _226, _219
 1692              	.LVL64:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1693              		.loc 1 136 9 view .LVU434
 1694 0808 0120A0E1 		mov	r2, r1	@ prephitmp_447, _352
 1695              	.LVL65:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1696              		.loc 1 136 9 view .LVU435
 1697 080c 233A64EE 		vmul.f32	s7, s8, s7	@ _478, _354, tmp468
 1698 0810 275A64EE 		vmul.f32	s11, s8, s15	@ _453, _354, tmp464
 1699 0814 0030A0E3 		mov	r3, #0	@ _219,
 1700              	.LVL66:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1701              		.loc 1 136 9 view .LVU436
 1702 0818 686A45EE 		vmls.f32	s13, s10, s17	@ tmp471, _439, tmp524
 1703 081c 497A05EE 		vmls.f32	s14, s10, s18	@ tmp467, _439, tmp523
 1704 0820 167A5FED 		vldr.32	s15, .L49+64	@ _434,
 1705 0824 295A25EE 		vmul.f32	s10, s10, s19	@ _445, _439, tmp522
 1706 0828 646A44EE 		vmls.f32	s13, s8, s9	@ _501, _354, tmp474
 1707 082c 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp467
 1708 0830 A8FFFFEA 		b	.L38		@
 1709              	.LVL67:
 1710              	.L35:
 134:armwave.c     ****             break;
 1711              		.loc 1 134 13 is_stmt 1 view .LVU437
 134:armwave.c     ****             break;
 1712              		.loc 1 134 29 view .LVU438
 134:armwave.c     ****             break;
 1713              		.loc 1 134 53 view .LVU439
 135:armwave.c     ****         case 3:
 1714              		.loc 1 135 13 view .LVU440
 1715 0834 1D7A1FED 		vldr.32	s14, .L49+56	@ tmp455,
 1716 0838 900A07EE 		vmov	s15, r0	@ int	@ _226, _226
 1717 083c 193A1FED 		vldr.32	s6, .L49+80	@ tmp462,
 1718 0840 1F3A5FED 		vldr.32	s7, .L49+60	@ tmp456,
 1719 0844 476AF0EE 		vmov.f32	s13, s14	@ tmp459, tmp455
 1720 0848 E74AF8EE 		vcvt.f32.s32	s9, s15	@ _450, _226
 1721 084c 497A04EE 		vmls.f32	s14, s8, s18	@ tmp455, _354, tmp523
 1722 0850 217A5FED 		vldr.32	s15, .L49+68	@ tmp452,
 1723 0854 686A44EE 		vmls.f32	s13, s8, s17	@ tmp459, _354, tmp524
 1724              	@ armwave.c:133:         case 2:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1725              		.loc 1 133 9 is_stmt 0 view .LVU441
 1726 0858 0020A0E1 		mov	r2, r0	@ prephitmp_447, _226
 1727              	.LVL68:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1728              		.loc 1 133 9 view .LVU442
 1729 085c 295A24EE 		vmul.f32	s10, s8, s19	@ _445, _354, tmp522
 1730 0860 0100A0E1 		mov	r0, r1	@ _226, _352
 1731              	.LVL69:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1732              		.loc 1 133 9 view .LVU443
 1733 0864 0030A0E3 		mov	r3, #0	@ _219,
 1734              	.LVL70:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1735              		.loc 1 133 9 view .LVU444
 1736 0868 A75A64EE 		vmul.f32	s11, s9, s15	@ _453, _450, tmp452
 1737 086c 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp455
 1738 0870 A33A64EE 		vmul.f32	s7, s9, s7	@ _478, _450, tmp456
 1739 0874 C36A44EE 		vmls.f32	s13, s9, s6	@ _501, _450, tmp462
 1740 0878 2C7A5FED 		vldr.32	s15, .L49+64	@ _434,
 1741 087c 95FFFFEA 		b	.L38		@
 1742              	.LVL71:
 1743              	.L36:
 131:armwave.c     ****             break;
 1744              		.loc 1 131 13 is_stmt 1 view .LVU445
 131:armwave.c     ****             break;
 1745              		.loc 1 131 29 view .LVU446
 131:armwave.c     ****             break;
 1746              		.loc 1 131 53 view .LVU447
 132:armwave.c     ****         case 2:
 1747              		.loc 1 132 13 view .LVU448
 1748 0880 903A05EE 		vmov	s11, r3	@ int	@ _219, _219
 1749 0884 316A5FED 		vldr.32	s13, .L49+56	@ tmp442,
 1750 0888 2E7A1FED 		vldr.32	s14, .L49+72	@ tmp440,
 1751 088c 324A5FED 		vldr.32	s9, .L49+60	@ tmp446,
 1752 0890 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _424, _219
 1753 0894 663AB0EE 		vmov.f32	s6, s13	@ tmp441, tmp442
 1754 0898 316A1FED 		vldr.32	s12, .L49+76	@ tmp436,
 1755 089c 357A5FED 		vldr.32	s15, .L49+64	@ tmp437,
 1756              	@ armwave.c:130:         case 1:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1757              		.loc 1 130 9 is_stmt 0 view .LVU449
 1758 08a0 313A5FED 		vldr.32	s7, .L49+84	@ _478,
 1759 08a4 295A24EE 		vmul.f32	s10, s8, s19	@ _445, _354, tmp522
 1760 08a8 0100A0E1 		mov	r0, r1	@ _226, _352
 1761              	.LVL72:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1762              		.loc 1 130 9 view .LVU450
 1763 08ac 0020A0E3 		mov	r2, #0	@ prephitmp_447,
 1764              	.LVL73:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1765              		.loc 1 130 9 view .LVU451
 1766 08b0 873A05EE 		vmla.f32	s6, s11, s14	@ tmp441, _424, tmp440
 1767 08b4 A46A45EE 		vmla.f32	s13, s11, s9	@ tmp447, _424, tmp446
 1768 08b8 867A45EE 		vmla.f32	s15, s11, s12	@ _434, _424, tmp436
 1769 08bc 635AF0EE 		vmov.f32	s11, s7	@ _453, _478
 1770 08c0 437AB0EE 		vmov.f32	s14, s6	@ tmp441, tmp441
 1771 08c4 686A44EE 		vmls.f32	s13, s8, s17	@ _501, _354, tmp524
 1772 08c8 497A04EE 		vmls.f32	s14, s8, s18	@ tmp441, _354, tmp523
 1773 08cc 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp441
 1774 08d0 80FFFFEA 		b	.L38		@
 1775              	.LVL74:
 1776              	.L31:
 143:armwave.c     ****             break;
 1777              		.loc 1 143 13 is_stmt 1 view .LVU452
 143:armwave.c     ****             break;
 1778              		.loc 1 143 37 view .LVU453
 143:armwave.c     ****             break;
 1779              		.loc 1 143 53 view .LVU454
 144:armwave.c     ****     }
 1780              		.loc 1 144 13 view .LVU455
 1781 08d4 903A07EE 		vmov	s15, r3	@ int	@ _219, _219
 1782 08d8 466A1FED 		vldr.32	s12, .L49+56	@ tmp495,
 1783 08dc 463A5FED 		vldr.32	s7, .L49+60	@ tmp496,
 1784 08e0 467A1FED 		vldr.32	s14, .L49+64	@ tmp491,
 1785 08e4 E74AF8EE 		vcvt.f32.s32	s9, s15	@ _448, _219
 1786 08e8 466AF0EE 		vmov.f32	s13, s12	@ tmp499, tmp495
 1787 08ec 487A5FED 		vldr.32	s15, .L49+68	@ tmp492,
 1788 08f0 462A5FED 		vldr.32	s5, .L49+80	@ tmp502,
 1789 08f4 492A1FED 		vldr.32	s4, .L49+72	@ tmp494,
 1790 08f8 236A44EE 		vmla.f32	s13, s8, s7	@ tmp499, _354, tmp496
 1791 08fc 4A3A1FED 		vldr.32	s6, .L49+76	@ tmp490,
 1792              	@ armwave.c:142:         default:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1793              		.loc 1 142 9 is_stmt 0 view .LVU456
 1794 0900 0320A0E1 		mov	r2, r3	@ prephitmp_447, _219
 1795              	.LVL75:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1796              		.loc 1 142 9 view .LVU457
 1797 0904 A75A64EE 		vmul.f32	s11, s9, s15	@ _453, _448, tmp492
 1798 0908 477AF0EE 		vmov.f32	s15, s14	@ tmp491, tmp491
 1799 090c 4C5A1FED 		vldr.32	s10, .L49+84	@ _445,
 1800 0910 A33A64EE 		vmul.f32	s7, s9, s7	@ _478, _448, tmp496
 1801 0914 026A04EE 		vmla.f32	s12, s8, s4	@ _476, _354, tmp494
 1802 0918 E26A44EE 		vmls.f32	s13, s9, s5	@ _501, _448, tmp502
 1803 091c 037A44EE 		vmla.f32	s15, s8, s6	@ tmp491, _354, tmp490
 1804 0920 0000A0E3 		mov	r0, #0	@ _226,
 1805              	.LVL76:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1806              		.loc 1 142 9 view .LVU458
 1807 0924 0130A0E1 		mov	r3, r1	@ _219, _352
 1808              	.LVL77:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1809              		.loc 1 142 9 view .LVU459
 1810 0928 6AFFFFEA 		b	.L38		@
 1811              	.LBE58:
 1812              	.LBE85:
 1813              		.cfi_endproc
 1814              	.LFE62:
 1816              		.align	2
 1817              		.global	armwave_init
 1818              		.syntax unified
 1819              		.arm
 1820              		.fpu vfp
 1822              	armwave_init:
 1823              	.LFB63:
 249:armwave.c     **** 
 250:armwave.c     **** /*
 251:armwave.c     ****  * Initialise things.  STUB, mostly.
 252:armwave.c     ****  */
 253:armwave.c     **** void armwave_init()
 254:armwave.c     **** {
 1824              		.loc 1 254 1 is_stmt 1 view -0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 255:armwave.c     ****     g_armwave_state.flags = 0;
 1828              		.loc 1 255 5 view .LVU461
 1829              	@ armwave.c:255:     g_armwave_state.flags = 0;
 1830              		.loc 1 255 27 is_stmt 0 view .LVU462
 1831 092c 20309FE5 		ldr	r3, .L53	@ tmp110,
 1832              	@ armwave.c:254: {
 254:armwave.c     ****     g_armwave_state.flags = 0;
 1833              		.loc 1 254 1 view .LVU463
 1834 0930 10402DE9 		push	{r4, lr}	@
 1835              		.cfi_def_cfa_offset 8
 1836              		.cfi_offset 4, -8
 1837              		.cfi_offset 14, -4
 1838              	@ armwave.c:255:     g_armwave_state.flags = 0;
 1839              		.loc 1 255 27 view .LVU464
 1840 0934 0020A0E3 		mov	r2, #0	@ tmp111,
 1841              	@ armwave.c:257:     printf("armwave version: %s\n", ARMWAVE_VER);
 256:armwave.c     **** 
 257:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1842              		.loc 1 257 5 view .LVU465
 1843 0938 18109FE5 		ldr	r1, .L53+4	@,
 1844 093c 18009FE5 		ldr	r0, .L53+8	@,
 1845              	@ armwave.c:255:     g_armwave_state.flags = 0;
 255:armwave.c     **** 
 1846              		.loc 1 255 27 view .LVU466
 1847 0940 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1848              		.loc 1 257 5 is_stmt 1 view .LVU467
 1849 0944 FEFFFFEB 		bl	printf		@
 1850              	.LVL78:
 258:armwave.c     ****     
 259:armwave.c     **** #ifndef NO_PYTHON
 260:armwave.c     ****     printf("built without Python linkings\n");
 1851              		.loc 1 260 5 view .LVU468
 1852 0948 10009FE5 		ldr	r0, .L53+12	@,
 1853              	@ armwave.c:262: }
 261:armwave.c     **** #endif
 262:armwave.c     **** }
 1854              		.loc 1 262 1 is_stmt 0 view .LVU469
 1855 094c 1040BDE8 		pop	{r4, lr}	@
 1856              		.cfi_restore 14
 1857              		.cfi_restore 4
 1858              		.cfi_def_cfa_offset 0
 1859              	@ armwave.c:260:     printf("built without Python linkings\n");
 260:armwave.c     **** #endif
 1860              		.loc 1 260 5 view .LVU470
 1861 0950 FEFFFFEA 		b	puts		@
 1862              	.LVL79:
 1863              	.L54:
 1864              		.align	2
 1865              	.L53:
 1866 0954 00000000 		.word	g_armwave_state
 1867 0958 5C000000 		.word	.LC3
 1868 095c 64000000 		.word	.LC4
 1869 0960 7C000000 		.word	.LC5
 1870              		.cfi_endproc
 1871              	.LFE63:
 1873              		.align	2
 1874              		.global	render_nonaa_to_buffer_1ch_slice
 1875              		.syntax unified
 1876              		.arm
 1877              		.fpu vfp
 1879              	render_nonaa_to_buffer_1ch_slice:
 1880              	.LVL80:
 1881              	.LFB64:
 263:armwave.c     **** 
 264:armwave.c     **** /*
 265:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
 266:armwave.c     ****  * pre-computed.
 267:armwave.c     ****  *
 268:armwave.c     ****  * @param    slice_y        Slice to render at
 269:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
 270:armwave.c     ****  *                          accounting for cache behaviour, etc.)
 271:armwave.c     ****  */
 272:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 273:armwave.c     **** {
 1882              		.loc 1 273 1 is_stmt 1 view -0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 8
 1885              		@ frame_needed = 0, uses_anonymous_args = 0
 274:armwave.c     ****     int yy, ys, yi, w, scale_value;
 1886              		.loc 1 274 5 view .LVU472
 275:armwave.c     ****     uint32_t value, word;
 1887              		.loc 1 275 5 view .LVU473
 276:armwave.c     ****     uint8_t *wave_base;
 1888              		.loc 1 276 5 view .LVU474
 277:armwave.c     ****     bufftyp_t *write_buffer_base;
 1889              		.loc 1 277 5 view .LVU475
 278:armwave.c     ****     bufftyp_t *write_buffer;
 1890              		.loc 1 278 5 view .LVU476
 279:armwave.c     **** 
 280:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 281:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 1891              		.loc 1 281 5 view .LVU477
 1892              	@ armwave.c:281:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 1893              		.loc 1 281 40 is_stmt 0 view .LVU478
 1894 0964 04319FE5 		ldr	r3, .L65	@ tmp187,
 1895              	@ armwave.c:273: {
 273:armwave.c     ****     int yy, ys, yi, w, scale_value;
 1896              		.loc 1 273 1 view .LVU479
 1897 0968 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1898              		.cfi_def_cfa_offset 36
 1899              		.cfi_offset 4, -36
 1900              		.cfi_offset 5, -32
 1901              		.cfi_offset 6, -28
 1902              		.cfi_offset 7, -24
 1903              		.cfi_offset 8, -20
 1904              		.cfi_offset 9, -16
 1905              		.cfi_offset 10, -12
 1906              		.cfi_offset 11, -8
 1907              		.cfi_offset 14, -4
 1908 096c 0CD04DE2 		sub	sp, sp, #12	@,,
 1909              		.cfi_def_cfa_offset 48
 1910              	@ armwave.c:281:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 1911              		.loc 1 281 82 view .LVU480
 1912 0970 246093E5 		ldr	r6, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 1913              	@ armwave.c:289:     for(w = 0; w < g_armwave_state.waves; w++) {
 282:armwave.c     **** 
 283:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
 284:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 285:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
 286:armwave.c     ****         g_armwave_state.bitdepth_height);
 287:armwave.c     **** 
 288:armwave.c     ****     // roll through each waveform
 289:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 1914              		.loc 1 289 35 view .LVU481
 1915 0974 38B093E5 		ldr	fp, [r3, #56]	@ _134, g_armwave_state.waves
 1916              	@ armwave.c:281:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 281:armwave.c     **** 
 1917              		.loc 1 281 40 view .LVU482
 1918 0978 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 1919              	@ armwave.c:289:     for(w = 0; w < g_armwave_state.waves; w++) {
 1920              		.loc 1 289 5 view .LVU483
 1921 097c 00005BE3 		cmp	fp, #0	@ _134,
 1922              	@ armwave.c:281:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 281:armwave.c     **** 
 1923              		.loc 1 281 65 view .LVU484
 1924 0980 900605E0 		mul	r5, r0, r6	@ tmp189, slice_y, _2
 1925              	.LVL81:
 1926              		.loc 1 289 5 is_stmt 1 view .LVU485
 1927              		.loc 1 289 5 is_stmt 0 view .LVU486
 1928 0984 370000DA 		ble	.L55		@,
 1929              	@ armwave.c:290:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1930              		.loc 1 290 36 view .LVU487
 1931 0988 149093E5 		ldr	r9, [r3, #20]	@ _5, g_armwave_state.wave_buffer
 1932              	@ armwave.c:290:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1933              		.loc 1 290 81 view .LVU488
 1934 098c 343093E5 		ldr	r3, [r3, #52]	@ _6, g_armwave_state.wave_stride
 1935 0990 000051E3 		cmp	r1, #0	@ height,
 1936 0994 04308DE5 		str	r3, [sp, #4]	@ _6, %sfp
 1937 0998 3200000A 		beq	.L55		@,
 1938 099c 2558A0E1 		lsr	r5, r5, #16	@ _4, tmp189,
 1939              	.LVL82:
 1940              		.loc 1 290 81 view .LVU489
 1941 09a0 009089E0 		add	r9, r9, r0	@ ivtmp.168, _5, slice_y
 1942              	@ armwave.c:289:     for(w = 0; w < g_armwave_state.waves; w++) {
 289:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1943              		.loc 1 289 11 view .LVU490
 1944 09a4 00A0A0E3 		mov	r10, #0	@ w,
 1945              	.LVL83:
 1946              	.L58:
 1947              		.loc 1 290 9 is_stmt 1 view .LVU491
 291:armwave.c     **** 
 292:armwave.c     ****         // roll through y and render the slice into the out buffer
 293:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 294:armwave.c     ****         for(yy = 0, yi = 0; yy < height; yy += 4) {
 1948              		.loc 1 294 9 view .LVU492
 1949              		.loc 1 294 9 is_stmt 0 view .LVU493
 1950 09a8 044049E2 		sub	r4, r9, #4	@ ivtmp.158, ivtmp.168,
 1951              	@ armwave.c:289:     for(w = 0; w < g_armwave_state.waves; w++) {
 289:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1952              		.loc 1 289 11 view .LVU494
 1953 09ac 0030A0E3 		mov	r3, #0	@ ivtmp.161,
 1954              	.LVL84:
 1955              	.L57:
 295:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1956              		.loc 1 295 13 is_stmt 1 view .LVU495
 1957              	@ armwave.c:295:             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1958              		.loc 1 295 18 is_stmt 0 view .LVU496
 1959 09b0 042094E5 		ldr	r2, [r4, #4]	@ word, MEM[base: _266, offset: 0B]
 1960              	.LVL85:
 296:armwave.c     ****             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likely next intent
 1961              		.loc 1 296 13 is_stmt 1 view .LVU497
 1962              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 297:armwave.c     ****             
 298:armwave.c     ****             for(ys = 0; ys < 4; ys++, yi++) {
 299:armwave.c     ****                 scale_value = word & 0xff;
 300:armwave.c     ****                 
 301:armwave.c     **** #if USE_ALU_XCOORD == 1
 302:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
 303:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 304:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 305:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 306:armwave.c     ****                 write_buffer = write_buffer_base + \
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 308:armwave.c     **** #else
 309:armwave.c     ****                 write_buffer = write_buffer_base + \
 310:armwave.c     ****                     (g_armwave_state.xcoord_to_xpixel[yi] * 256 * sizeof(bufftyp_t));
 311:armwave.c     **** #endif
 312:armwave.c     **** 
 313:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1963              		.loc 1 313 47 is_stmt 0 view .LVU498
 1964 09b4 230885E0 		add	r0, r5, r3, lsr #16	@ tmp195, _4, ivtmp.161,
 1965              	@ armwave.c:307:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 307:armwave.c     **** #else
 1966              		.loc 1 307 34 view .LVU499
 1967 09b8 033086E0 		add	r3, r6, r3	@ _77, _2, ivtmp.161
 1968              	@ armwave.c:299:                 scale_value = word & 0xff;
 299:armwave.c     ****                 
 1969              		.loc 1 299 29 view .LVU500
 1970 09bc 7270EFE6 		uxtb	r7, r2	@ scale_value, word
 1971              	@ armwave.c:314:                 word >>= 8;
 314:armwave.c     ****                 word >>= 8;
 1972              		.loc 1 314 22 view .LVU501
 1973 09c0 22C4A0E1 		lsr	ip, r2, #8	@ word, word,
 1974              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 1975              		.loc 1 313 47 view .LVU502
 1976 09c4 8770A0E1 		lsl	r7, r7, #1	@ tmp198, scale_value,
 1977 09c8 007587E0 		add	r7, r7, r0, lsl #10	@ tmp199, tmp198, tmp195,
 1978              	@ armwave.c:299:                 scale_value = word & 0xff;
 299:armwave.c     ****                 
 1979              		.loc 1 299 29 view .LVU503
 1980 09cc 7CC0EFE6 		uxtb	ip, ip	@ scale_value, word
 1981              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 1982              		.loc 1 313 47 view .LVU504
 1983 09d0 230885E0 		add	r0, r5, r3, lsr #16	@ tmp204, _4, _77,
 1984 09d4 B7809EE1 		ldrh	r8, [lr, r7]	@ *_62, *_62
 1985 09d8 8CC0A0E1 		lsl	ip, ip, #1	@ tmp208, scale_value,
 1986 09dc 00C58CE0 		add	ip, ip, r0, lsl #10	@ tmp209, tmp208, tmp204,
 1987              	@ armwave.c:314:                 word >>= 8;
 1988              		.loc 1 314 22 view .LVU505
 1989 09e0 2208A0E1 		lsr	r0, r2, #16	@ word, word,
 1990              	@ armwave.c:307:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 307:armwave.c     **** #else
 1991              		.loc 1 307 34 view .LVU506
 1992 09e4 033086E0 		add	r3, r6, r3	@ _99, _2, _77
 1993              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 1994              		.loc 1 313 47 view .LVU507
 1995 09e8 018088E2 		add	r8, r8, #1	@ tmp202, *_62,
 1996              	@ armwave.c:299:                 scale_value = word & 0xff;
 299:armwave.c     ****                 
 1997              		.loc 1 299 29 view .LVU508
 1998 09ec 7000EFE6 		uxtb	r0, r0	@ scale_value, word
 1999              	@ armwave.c:296:             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likel
 296:armwave.c     ****             
 2000              		.loc 1 296 13 view .LVU509
 2001 09f0 44F0D4F5 		pld	[r4, #68]		@
 298:armwave.c     ****                 scale_value = word & 0xff;
 2002              		.loc 1 298 13 is_stmt 1 view .LVU510
 2003              	.LVL86:
 299:armwave.c     ****                 
 2004              		.loc 1 299 17 view .LVU511
 306:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2005              		.loc 1 306 17 view .LVU512
 313:armwave.c     ****                 word >>= 8;
 2006              		.loc 1 313 17 view .LVU513
 2007              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 2008              		.loc 1 313 47 is_stmt 0 view .LVU514
 2009 09f4 B7808EE1 		strh	r8, [lr, r7]	@ movhi	@ tmp202, *_62
 2010              		.loc 1 314 17 is_stmt 1 view .LVU515
 2011              	.LVL87:
 299:armwave.c     ****                 
 2012              		.loc 1 299 17 view .LVU516
 306:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2013              		.loc 1 306 17 view .LVU517
 313:armwave.c     ****                 word >>= 8;
 2014              		.loc 1 313 17 view .LVU518
 2015              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 2016              		.loc 1 313 47 is_stmt 0 view .LVU519
 2017 09f8 238885E0 		add	r8, r5, r3, lsr #16	@ tmp214, _4, _99,
 2018 09fc BC709EE1 		ldrh	r7, [lr, ip]	@ *_84, *_84
 2019 0a00 8000A0E1 		lsl	r0, r0, #1	@ tmp218, scale_value,
 2020 0a04 080580E0 		add	r0, r0, r8, lsl #10	@ tmp219, tmp218, tmp214,
 2021              	@ armwave.c:307:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 307:armwave.c     **** #else
 2022              		.loc 1 307 34 view .LVU520
 2023 0a08 033086E0 		add	r3, r6, r3	@ _121, _2, _99
 2024              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 2025              		.loc 1 313 47 view .LVU521
 2026 0a0c 017087E2 		add	r7, r7, #1	@ tmp212, *_84,
 2027              	@ armwave.c:314:                 word >>= 8;
 2028              		.loc 1 314 22 view .LVU522
 2029 0a10 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 2030              	.LVL88:
 2031              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 2032              		.loc 1 313 47 view .LVU523
 2033 0a14 BC708EE1 		strh	r7, [lr, ip]	@ movhi	@ tmp212, *_84
 2034              		.loc 1 314 17 is_stmt 1 view .LVU524
 2035              	.LVL89:
 299:armwave.c     ****                 
 2036              		.loc 1 299 17 view .LVU525
 306:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2037              		.loc 1 306 17 view .LVU526
 313:armwave.c     ****                 word >>= 8;
 2038              		.loc 1 313 17 view .LVU527
 2039              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 2040              		.loc 1 313 47 is_stmt 0 view .LVU528
 2041 0a18 237885E0 		add	r7, r5, r3, lsr #16	@ tmp224, _4, _121,
 2042 0a1c B0C09EE1 		ldrh	ip, [lr, r0]	@ *_106, *_106
 2043 0a20 8220A0E1 		lsl	r2, r2, #1	@ tmp227, word,
 2044 0a24 072582E0 		add	r2, r2, r7, lsl #10	@ tmp228, tmp227, tmp224,
 2045 0a28 01C08CE2 		add	ip, ip, #1	@ tmp222, *_106,
 2046 0a2c B0C08EE1 		strh	ip, [lr, r0]	@ movhi	@ tmp222, *_106
 2047              		.loc 1 314 17 is_stmt 1 view .LVU529
 2048              	.LVL90:
 299:armwave.c     ****                 
 2049              		.loc 1 299 17 view .LVU530
 306:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2050              		.loc 1 306 17 view .LVU531
 313:armwave.c     ****                 word >>= 8;
 2051              		.loc 1 313 17 view .LVU532
 2052              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 2053              		.loc 1 313 47 is_stmt 0 view .LVU533
 2054 0a30 B2009EE1 		ldrh	r0, [lr, r2]	@ *_128, *_128
 2055 0a34 08C084E2 		add	ip, r4, #8	@ tmp232, ivtmp.158,
 2056 0a38 09C04CE0 		sub	ip, ip, r9	@ _259, tmp232, ivtmp.168
 2057 0a3c 010080E2 		add	r0, r0, #1	@ tmp231, *_128,
 2058              	@ armwave.c:294:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 294:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2059              		.loc 1 294 9 view .LVU534
 2060 0a40 0C0051E1 		cmp	r1, ip	@ height, _259
 2061 0a44 033086E0 		add	r3, r6, r3	@ ivtmp.161, _2, _121
 2062              	.LVL91:
 2063              	@ armwave.c:313:                 *(write_buffer + scale_value) += 1;
 313:armwave.c     ****                 word >>= 8;
 2064              		.loc 1 313 47 view .LVU535
 2065 0a48 B2008EE1 		strh	r0, [lr, r2]	@ movhi	@ tmp231, *_128
 2066              		.loc 1 314 17 is_stmt 1 view .LVU536
 2067              	.LVL92:
 2068              		.loc 1 314 17 is_stmt 0 view .LVU537
 2069 0a4c 044084E2 		add	r4, r4, #4	@ ivtmp.158, ivtmp.158,
 2070              	.LVL93:
 2071              	@ armwave.c:294:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 294:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2072              		.loc 1 294 9 view .LVU538
 2073 0a50 D6FFFF8A 		bhi	.L57		@,
 2074              	@ armwave.c:289:     for(w = 0; w < g_armwave_state.waves; w++) {
 289:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2075              		.loc 1 289 44 view .LVU539
 2076 0a54 01A08AE2 		add	r10, r10, #1	@ w, w,
 2077              	.LVL94:
 289:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2078              		.loc 1 289 44 view .LVU540
 2079 0a58 04309DE5 		ldr	r3, [sp, #4]	@ _6, %sfp
 2080              	@ armwave.c:289:     for(w = 0; w < g_armwave_state.waves; w++) {
 289:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2081              		.loc 1 289 5 view .LVU541
 2082 0a5c 0B005AE1 		cmp	r10, fp	@ w, _134
 2083 0a60 039089E0 		add	r9, r9, r3	@ ivtmp.168, ivtmp.168, _6
 2084              	.LVL95:
 289:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2085              		.loc 1 289 5 view .LVU542
 2086 0a64 CFFFFF1A 		bne	.L58		@,
 2087              	.LVL96:
 2088              	.L55:
 2089              	@ armwave.c:320: }
 315:armwave.c     ****             }
 316:armwave.c     ****         }
 317:armwave.c     ****     }
 318:armwave.c     **** 
 319:armwave.c     ****     //printf("wb_end=%d\n", write_buffer - write_buffer_base);
 320:armwave.c     **** }
 2090              		.loc 1 320 1 view .LVU543
 2091 0a68 0CD08DE2 		add	sp, sp, #12	@,,
 2092              		.cfi_def_cfa_offset 36
 2093              		@ sp needed	@
 2094 0a6c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2095              	.LVL97:
 2096              	.L66:
 2097              		.loc 1 320 1 view .LVU544
 2098              		.align	2
 2099              	.L65:
 2100 0a70 00000000 		.word	g_armwave_state
 2101              		.cfi_endproc
 2102              	.LFE64:
 2104              		.align	2
 2105              		.global	fill_xvimage_scaled
 2106              		.syntax unified
 2107              		.arm
 2108              		.fpu vfp
 2110              	fill_xvimage_scaled:
 2111              	.LVL98:
 2112              	.LFB65:
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Render buffer to an XvImage canvas.
 324:armwave.c     ****  */
 325:armwave.c     **** void fill_xvimage_scaled(XvImage *img)
 326:armwave.c     **** {
 2113              		.loc 1 326 1 is_stmt 1 view -0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 8
 2116              		@ frame_needed = 0, uses_anonymous_args = 0
 327:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2117              		.loc 1 327 5 view .LVU546
 328:armwave.c     ****     // uint32_t ysub;
 329:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 2118              		.loc 1 329 5 view .LVU547
 330:armwave.c     ****     uint8_t r, g, b;
 2119              		.loc 1 330 5 view .LVU548
 331:armwave.c     ****     int value; 
 2120              		.loc 1 331 5 view .LVU549
 332:armwave.c     ****     // uint8_t row;
 333:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2121              		.loc 1 333 5 view .LVU550
 2122              	@ armwave.c:326: {
 326:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2123              		.loc 1 326 1 is_stmt 0 view .LVU551
 2124 0a74 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2125              		.cfi_def_cfa_offset 36
 2126              		.cfi_offset 4, -36
 2127              		.cfi_offset 5, -32
 2128              		.cfi_offset 6, -28
 2129              		.cfi_offset 7, -24
 2130              		.cfi_offset 8, -20
 2131              		.cfi_offset 9, -16
 2132              		.cfi_offset 10, -12
 2133              		.cfi_offset 11, -8
 2134              		.cfi_offset 14, -4
 2135 0a78 0040A0E1 		mov	r4, r0	@ img, img
 2136              	.LBB92:
 2137              	.LBB93:
 2138              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2139              		.loc 1 186 36 view .LVU552
 2140 0a7c 180090E5 		ldr	r0, [r0, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2141              	.LVL99:
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2142              		.loc 1 186 36 view .LVU553
 2143              	.LBE93:
 2144              	.LBE92:
 2145              	@ armwave.c:333:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2146              		.loc 1 333 15 view .LVU554
 2147 0a80 10329FE5 		ldr	r3, .L83	@ tmp228,
 2148              	.LBB99:
 2149              	.LBB94:
 2150              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2151              		.loc 1 186 22 view .LVU555
 2152 0a84 1CE094E5 		ldr	lr, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2153 0a88 000090E5 		ldr	r0, [r0]	@ *_68, *_68
 2154              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2155              		.loc 1 186 59 view .LVU556
 2156 0a8c 081094E5 		ldr	r1, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2157 0a90 042094E5 		ldr	r2, [r4, #4]	@ img_23(D)->width, img_23(D)->width
 2158              	.LBE94:
 2159              	.LBE99:
 2160              	@ armwave.c:339:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 334:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 335:armwave.c     ****     uint32_t offset;
 336:armwave.c     **** 
 337:armwave.c     ****     //printf("output buffer: 0x%08x\n", out_buffer);
 338:armwave.c     **** 
 339:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2161              		.loc 1 339 10 view .LVU557
 2162 0a94 70C093E5 		ldr	ip, [r3, #112]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2163              	.LBB100:
 2164              	.LBB95:
 2165              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2166              		.loc 1 186 5 view .LVU558
 2167 0a98 00008EE0 		add	r0, lr, r0	@, img_23(D)->data, *_68
 2168              	.LBE95:
 2169              	.LBE100:
 2170              	@ armwave.c:339:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2171              		.loc 1 339 10 view .LVU559
 2172 0a9c 40E093E5 		ldr	lr, [r3, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2173              	@ armwave.c:326: {
 326:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2174              		.loc 1 326 1 view .LVU560
 2175 0aa0 0CD04DE2 		sub	sp, sp, #12	@,,
 2176              		.cfi_def_cfa_offset 48
 2177              	.LBB101:
 2178              	.LBB96:
 2179              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2180              		.loc 1 186 5 view .LVU561
 2181 0aa4 910202E0 		mul	r2, r1, r2	@, img_23(D)->height, img_23(D)->width
 2182 0aa8 1010A0E3 		mov	r1, #16	@,
 2183              	.LBE96:
 2184              	.LBE101:
 2185              	@ armwave.c:339:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2186              		.loc 1 339 10 view .LVU562
 2187 0aac 9E0C07E0 		mul	r7, lr, ip	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2188              	@ armwave.c:333:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 333:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 2189              		.loc 1 333 15 view .LVU563
 2190 0ab0 049093E5 		ldr	r9, [r3, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2191              	.LVL100:
 335:armwave.c     **** 
 2192              		.loc 1 335 5 is_stmt 1 view .LVU564
 2193              		.loc 1 339 5 view .LVU565
 340:armwave.c     ****     
 341:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 342:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 343:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 344:armwave.c     **** 
 345:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 346:armwave.c     ****     //memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 347:armwave.c     ****     fill_rgb_xvimage(img, &g_fill_black);
 2194              		.loc 1 347 5 view .LVU566
 2195              	.LBB102:
 2196              	.LBI92:
 179:armwave.c     **** {
 2197              		.loc 1 179 6 view .LVU567
 2198              	.LBB97:
 181:armwave.c     ****     
 2199              		.loc 1 181 5 view .LVU568
 184:armwave.c     ****     
 2200              		.loc 1 184 5 view .LVU569
 184:armwave.c     ****     
 2201              		.loc 1 184 5 is_stmt 0 view .LVU570
 2202              	.LBE97:
 2203              	.LBE102:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 2204              		.loc 1 96 5 is_stmt 1 view .LVU571
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 2205              		.loc 1 97 5 view .LVU572
  98:armwave.c     **** }
 2206              		.loc 1 98 5 view .LVU573
 2207              	.LBB103:
 2208              	.LBB98:
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2209              		.loc 1 186 5 view .LVU574
 2210 0ab4 FEFFFFEB 		bl	memset		@
 2211              	.LVL101:
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2212              		.loc 1 187 5 view .LVU575
 2213              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2214              		.loc 1 187 61 is_stmt 0 view .LVU576
 2215 0ab8 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2216              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2217              		.loc 1 187 65 view .LVU577
 2218 0abc 082094E5 		ldr	r2, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2219              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2220              		.loc 1 187 36 view .LVU578
 2221 0ac0 183094E5 		ldr	r3, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2222              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2223              		.loc 1 187 65 view .LVU579
 2224 0ac4 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_85 + 4B], MEM[(int *)_85 + 4B]
 2225              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2226              		.loc 1 187 22 view .LVU580
 2227 0ac8 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2228 0acc 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_79 + 4B], MEM[(int *)_79 + 4B]
 2229              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2230              		.loc 1 187 65 view .LVU581
 2231 0ad0 920102E0 		mul	r2, r2, r1	@ tmp262, img_23(D)->height, MEM[(int *)_85 + 4B]
 2232              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2233              		.loc 1 187 5 view .LVU582
 2234 0ad4 030080E0 		add	r0, r0, r3	@, img_23(D)->data, MEM[(int *)_79 + 4B]
 2235 0ad8 8010A0E3 		mov	r1, #128	@,
 2236              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2237              		.loc 1 187 80 view .LVU583
 2238 0adc A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp267, tmp262, tmp262,
 2239              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2240              		.loc 1 187 5 view .LVU584
 2241 0ae0 C220A0E1 		asr	r2, r2, #1	@, tmp267,
 2242 0ae4 FEFFFFEB 		bl	memset		@
 2243              	.LVL102:
 188:armwave.c     **** }
 2244              		.loc 1 188 5 is_stmt 1 view .LVU585
 2245              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2246              		.loc 1 188 61 is_stmt 0 view .LVU586
 2247 0ae8 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2248              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2249              		.loc 1 188 65 view .LVU587
 2250 0aec 082094E5 		ldr	r2, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2251              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2252              		.loc 1 188 36 view .LVU588
 2253 0af0 183094E5 		ldr	r3, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2254              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2255              		.loc 1 188 65 view .LVU589
 2256 0af4 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_98 + 8B], MEM[(int *)_98 + 8B]
 2257              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2258              		.loc 1 188 22 view .LVU590
 2259 0af8 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2260 0afc 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_92 + 8B], MEM[(int *)_92 + 8B]
 2261              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2262              		.loc 1 188 65 view .LVU591
 2263 0b00 920102E0 		mul	r2, r2, r1	@ tmp287, img_23(D)->height, MEM[(int *)_98 + 8B]
 2264              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2265              		.loc 1 188 5 view .LVU592
 2266 0b04 030080E0 		add	r0, r0, r3	@, img_23(D)->data, MEM[(int *)_92 + 8B]
 2267 0b08 8010A0E3 		mov	r1, #128	@,
 2268              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2269              		.loc 1 188 80 view .LVU593
 2270 0b0c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp292, tmp287, tmp287,
 2271              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2272              		.loc 1 188 5 view .LVU594
 2273 0b10 C220A0E1 		asr	r2, r2, #1	@, tmp292,
 2274 0b14 FEFFFFEB 		bl	memset		@
 2275              	.LVL103:
 188:armwave.c     **** }
 2276              		.loc 1 188 5 view .LVU595
 2277              	.LBE98:
 2278              	.LBE103:
 2279              	@ armwave.c:351:     for(n = 0; n < npix; n += 2) {
 348:armwave.c     ****     
 349:armwave.c     ****     //printf("iter...\n");
 350:armwave.c     **** 
 351:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 2280              		.loc 1 351 5 view .LVU596
 2281 0b18 000057E3 		cmp	r7, #0	@ npix,
 2282 0b1c 060000DA 		ble	.L67		@,
 2283              	@ armwave.c:351:     for(n = 0; n < npix; n += 2) {
 2284              		.loc 1 351 11 view .LVU597
 2285 0b20 00B0A0E3 		mov	fp, #0	@ n,
 2286              	.LVL104:
 2287              	.L73:
 352:armwave.c     ****         wave_word = *base_32ptr++;
 2288              		.loc 1 352 9 is_stmt 1 view .LVU598
 2289              	@ armwave.c:352:         wave_word = *base_32ptr++;
 2290              		.loc 1 352 19 is_stmt 0 view .LVU599
 2291 0b24 043099E4 		ldr	r3, [r9], #4	@ wave_word, MEM[base: base_32ptr_25, offset: 4294967292B]
 2292              	.LVL105:
 353:armwave.c     **** 
 354:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 2293              		.loc 1 354 9 is_stmt 1 view .LVU600
 2294              	@ armwave.c:354:         if(COND_UNLIKELY(wave_word != 0)) {
 2295              		.loc 1 354 11 is_stmt 0 view .LVU601
 2296 0b28 000053E3 		cmp	r3, #0	@ wave_word,
 2297 0b2c 0400001A 		bne	.L82		@,
 2298              	.LVL106:
 2299              	.L70:
 2300              	@ armwave.c:351:     for(n = 0; n < npix; n += 2) {
 351:armwave.c     ****         wave_word = *base_32ptr++;
 2301              		.loc 1 351 28 discriminator 2 view .LVU602
 2302 0b30 02B08BE2 		add	fp, fp, #2	@ n, n,
 2303              	.LVL107:
 2304              	@ armwave.c:351:     for(n = 0; n < npix; n += 2) {
 351:armwave.c     ****         wave_word = *base_32ptr++;
 2305              		.loc 1 351 5 discriminator 2 view .LVU603
 2306 0b34 0B0057E1 		cmp	r7, fp	@ npix, n
 2307 0b38 F9FFFFCA 		bgt	.L73		@,
 2308              	.LVL108:
 2309              	.L67:
 2310              	@ armwave.c:375: }
 355:armwave.c     ****             for(w = 0; w < 2; w++) {
 356:armwave.c     ****                 value = wave_word & 0xffff;
 357:armwave.c     ****                 wave_word >>= 16;
 358:armwave.c     **** 
 359:armwave.c     ****                 if(value != 0) {
 360:armwave.c     ****                     // Plot the pixels
 361:armwave.c     ****                     nsub = n + w;
 362:armwave.c     ****                     yy = (nsub & 0xff); 
 363:armwave.c     ****                     xx = (nsub >> 8) / 2;
 364:armwave.c     **** 
 365:armwave.c     ****                     // FASTQ does not paint U/V for odd pixels; works OK for most purposes.
 366:armwave.c     ****                     //plot_pixel_yuv_fastq(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 367:armwave.c     ****                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     painted++;
 369:armwave.c     ****                 }
 370:armwave.c     ****             }
 371:armwave.c     ****         }
 372:armwave.c     ****     }
 373:armwave.c     **** 
 374:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 375:armwave.c     **** }
 2311              		.loc 1 375 1 view .LVU604
 2312 0b3c 0CD08DE2 		add	sp, sp, #12	@,,
 2313              		.cfi_remember_state
 2314              		.cfi_def_cfa_offset 36
 2315              		@ sp needed	@
 2316 0b40 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2317              	.LVL109:
 2318              	.L82:
 2319              		.cfi_restore_state
 356:armwave.c     ****                 wave_word >>= 16;
 2320              		.loc 1 356 17 is_stmt 1 view .LVU605
 361:armwave.c     ****                     yy = (nsub & 0xff); 
 2321              		.loc 1 361 21 view .LVU606
 362:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2322              		.loc 1 362 21 view .LVU607
 363:armwave.c     **** 
 2323              		.loc 1 363 21 view .LVU608
 361:armwave.c     ****                     yy = (nsub & 0xff); 
 2324              		.loc 1 361 21 view .LVU609
 2325 0b44 01208BE2 		add	r2, fp, #1	@ _132, n,
 2326              	.LVL110:
 362:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2327              		.loc 1 362 21 view .LVU610
 363:armwave.c     **** 
 2328              		.loc 1 363 21 view .LVU611
 2329              	@ armwave.c:362:                     yy = (nsub & 0xff); 
 362:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2330              		.loc 1 362 24 is_stmt 0 view .LVU612
 2331 0b48 7B50EFE6 		uxtb	r5, fp	@ yy.10_115, n
 2332 0b4c 72E0EFE6 		uxtb	lr, r2	@ yy.10_170, _132
 2333              	@ armwave.c:363:                     xx = (nsub >> 8) / 2;
 363:armwave.c     **** 
 2334              		.loc 1 363 32 view .LVU613
 2335 0b50 4224A0E1 		asr	r2, r2, #8	@ _168, _132,
 2336 0b54 4BC4A0E1 		asr	ip, fp, #8	@ _113, n,
 2337              	.LVL111:
 367:armwave.c     ****                     painted++;
 2338              		.loc 1 367 21 is_stmt 1 view .LVU614
 367:armwave.c     ****                     painted++;
 2339              		.loc 1 367 21 view .LVU615
 2340              	@ armwave.c:363:                     xx = (nsub >> 8) / 2;
 363:armwave.c     **** 
 2341              		.loc 1 363 38 is_stmt 0 view .LVU616
 2342 0b58 A21F82E0 		add	r1, r2, r2, lsr #31	@ tmp358, _168, _168,
 2343 0b5c 04108DE5 		str	r1, [sp, #4]	@ tmp358, %sfp
 2344              	.LBB104:
 2345              	.LBB105:
 2346              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2347              		.loc 1 156 55 view .LVU617
 2348 0b60 C510A0E1 		asr	r1, r5, #1	@ _130, yy.10_115,
 2349 0b64 00108DE5 		str	r1, [sp]	@ _130, %sfp
 2350              	.LBE105:
 2351              	.LBE104:
 2352              	@ armwave.c:356:                 value = wave_word & 0xffff;
 356:armwave.c     ****                 wave_word >>= 16;
 2353              		.loc 1 356 23 view .LVU618
 2354 0b68 7310FFE6 		uxth	r1, r3	@ value, wave_word
 2355              	.LVL112:
 357:armwave.c     **** 
 2356              		.loc 1 357 17 is_stmt 1 view .LVU619
 2357              	@ armwave.c:359:                 if(value != 0) {
 359:armwave.c     ****                     // Plot the pixels
 2358              		.loc 1 359 19 is_stmt 0 view .LVU620
 2359 0b6c 000051E3 		cmp	r1, #0	@ value,
 2360              	@ armwave.c:363:                     xx = (nsub >> 8) / 2;
 363:armwave.c     **** 
 2361              		.loc 1 363 38 view .LVU621
 2362 0b70 AC6F8CE0 		add	r6, ip, ip, lsr #31	@ tmp308, _113, _113,
 2363              	.LBB111:
 2364              	.LBB106:
 2365              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2366              		.loc 1 156 55 view .LVU622
 2367 0b74 CEA0A0E1 		asr	r10, lr, #1	@ _185, yy.10_170,
 2368              	.LBE106:
 2369              	.LBE111:
 2370              	@ armwave.c:357:                 wave_word >>= 16;
 357:armwave.c     **** 
 2371              		.loc 1 357 27 view .LVU623
 2372 0b78 2338A0E1 		lsr	r3, r3, #16	@ wave_word, wave_word,
 2373              	.LVL113:
 359:armwave.c     ****                     // Plot the pixels
 2374              		.loc 1 359 17 is_stmt 1 view .LVU624
 356:armwave.c     ****                 wave_word >>= 16;
 2375              		.loc 1 356 17 view .LVU625
 357:armwave.c     **** 
 2376              		.loc 1 357 17 view .LVU626
 359:armwave.c     ****                     // Plot the pixels
 2377              		.loc 1 359 17 view .LVU627
 2378              	@ armwave.c:359:                 if(value != 0) {
 359:armwave.c     ****                     // Plot the pixels
 2379              		.loc 1 359 19 is_stmt 0 view .LVU628
 2380 0b7c 2100000A 		beq	.L71		@,
 2381              	.LBB112:
 2382              	.LBB107:
 2383              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2384              		.loc 1 155 37 view .LVU629
 2385 0b80 048094E5 		ldr	r8, [r4, #4]	@ tmp408, img_23(D)->width
 2386 0b84 1C0094E5 		ldr	r0, [r4, #28]	@ tmp409, img_23(D)->data
 2387              	.LBE107:
 2388              	.LBE112:
 2389              	@ armwave.c:367:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 367:armwave.c     ****                     painted++;
 2390              		.loc 1 367 60 view .LVU630
 2391 0b88 FF0051E3 		cmp	r1, #255	@ value,
 2392 0b8c FF10A0A3 		movge	r1, #255	@ _116,
 2393              	.LVL114:
 2394              	.LBB113:
 2395              	.LBI104:
 151:armwave.c     **** {
 2396              		.loc 1 151 44 is_stmt 1 view .LVU631
 2397              	.LBB108:
 153:armwave.c     ****     
 2398              		.loc 1 153 5 view .LVU632
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2399              		.loc 1 155 5 view .LVU633
 2400              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2401              		.loc 1 155 37 is_stmt 0 view .LVU634
 2402 0b90 980525E0 		mla	r5, r8, r5, r0	@ tmp311, tmp408, yy.10_115, tmp409
 2403              	.LVL115:
 2404              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2405              		.loc 1 155 45 view .LVU635
 2406 0b94 00019FE5 		ldr	r0, .L83+4	@ tmp425,
 2407 0b98 811081E0 		add	r1, r1, r1, lsl #1	@ tmp302, _116, _116,
 2408              	.LVL116:
 2409              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2410              		.loc 1 156 66 view .LVU636
 2411 0b9c 03808CE2 		add	r8, ip, #3	@ tmp315, _113,
 2412              	.LVL117:
 2413              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2414              		.loc 1 155 45 view .LVU637
 2415 0ba0 0100D0E7 		ldrb	r0, [r0, r1]	@ zero_extendqisi2	@ _123, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].y
 2416              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2417              		.loc 1 156 66 view .LVU638
 2418 0ba4 00005CE3 		cmp	ip, #0	@ _113,
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2419              		.loc 1 156 66 view .LVU639
 2420 0ba8 08C0A0B1 		movlt	ip, r8	@ _113, tmp315
 2421              	.LVL118:
 2422              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2423              		.loc 1 155 37 view .LVU640
 2424 0bac C600C5E7 		strb	r0, [r5, r6, asr #1]	@ _123, *_122
 2425              	.LVL119:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2426              		.loc 1 156 5 is_stmt 1 view .LVU641
 2427              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2428              		.loc 1 156 46 is_stmt 0 view .LVU642
 2429 0bb0 140094E5 		ldr	r0, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2430              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2431              		.loc 1 155 45 view .LVU643
 2432 0bb4 E0809FE5 		ldr	r8, .L83+4	@ tmp426,
 2433              	.LVL120:
 2434              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2435              		.loc 1 156 72 view .LVU644
 2436 0bb8 1C6094E5 		ldr	r6, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2437              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2438              		.loc 1 156 50 view .LVU645
 2439 0bbc 045090E5 		ldr	r5, [r0, #4]	@ MEM[(int *)_128 + 4B], MEM[(int *)_128 + 4B]
 2440              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2441              		.loc 1 155 45 view .LVU646
 2442 0bc0 011088E0 		add	r1, r8, r1	@ tmp303, tmp426, tmp302
 2443              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2444              		.loc 1 156 72 view .LVU647
 2445 0bc4 00809DE5 		ldr	r8, [sp]	@ _130, %sfp
 2446              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2447              		.loc 1 156 66 view .LVU648
 2448 0bc8 4CC1A0E1 		asr	ip, ip, #2	@ tmp316, _113,
 2449              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2450              		.loc 1 156 72 view .LVU649
 2451 0bcc 0C0086E0 		add	r0, r6, ip	@ tmp329, img_23(D)->data, tmp316
 2452 0bd0 950820E0 		mla	r0, r5, r8, r0	@ tmp330, MEM[(int *)_128 + 4B], _130, tmp329
 2453 0bd4 185094E5 		ldr	r5, [r4, #24]	@ tmp413, img_23(D)->offsets
 2454              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2455              		.loc 1 156 80 view .LVU650
 2456 0bd8 0260D1E5 		ldrb	r6, [r1, #2]	@ zero_extendqisi2	@ _143, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].v
 2457              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2458              		.loc 1 156 72 view .LVU651
 2459 0bdc 045095E5 		ldr	r5, [r5, #4]	@ MEM[(int *)_126 + 4B], MEM[(int *)_126 + 4B]
 2460 0be0 0560C0E7 		strb	r6, [r0, r5]	@ _143, *_142
 157:armwave.c     **** }
 2461              		.loc 1 157 5 is_stmt 1 view .LVU652
 2462              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2463              		.loc 1 157 46 is_stmt 0 view .LVU653
 2464 0be4 140094E5 		ldr	r0, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2465              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2466              		.loc 1 157 72 view .LVU654
 2467 0be8 1C6094E5 		ldr	r6, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2468              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2469              		.loc 1 157 80 view .LVU655
 2470 0bec 0110D1E5 		ldrb	r1, [r1, #1]	@ zero_extendqisi2	@ _155, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].u
 2471              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2472              		.loc 1 157 50 view .LVU656
 2473 0bf0 085090E5 		ldr	r5, [r0, #8]	@ MEM[(int *)_148 + 8B], MEM[(int *)_148 + 8B]
 2474              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2475              		.loc 1 157 72 view .LVU657
 2476 0bf4 180094E5 		ldr	r0, [r4, #24]	@ tmp415, img_23(D)->offsets
 2477 0bf8 0CC086E0 		add	ip, r6, ip	@ tmp345, img_23(D)->data, tmp316
 2478 0bfc 95C82CE0 		mla	ip, r5, r8, ip	@ tmp346, MEM[(int *)_148 + 8B], _130, tmp345
 2479 0c00 080090E5 		ldr	r0, [r0, #8]	@ MEM[(int *)_146 + 8B], MEM[(int *)_146 + 8B]
 2480 0c04 0010CCE7 		strb	r1, [ip, r0]	@ _155, *_154
 2481              	.LVL121:
 157:armwave.c     **** }
 2482              		.loc 1 157 72 view .LVU658
 2483              	.LBE108:
 2484              	.LBE113:
 368:armwave.c     ****                 }
 2485              		.loc 1 368 21 is_stmt 1 view .LVU659
 2486              	.L71:
 2487              	@ armwave.c:359:                 if(value != 0) {
 359:armwave.c     ****                     // Plot the pixels
 2488              		.loc 1 359 19 is_stmt 0 view .LVU660
 2489 0c08 000053E3 		cmp	r3, #0	@ wave_word,
 2490 0c0c C7FFFF0A 		beq	.L70		@,
 2491              	@ armwave.c:367:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 367:armwave.c     ****                     painted++;
 2492              		.loc 1 367 60 view .LVU661
 2493 0c10 FF0053E3 		cmp	r3, #255	@ wave_word,
 2494              	.LBB114:
 2495              	.LBB109:
 2496              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2497              		.loc 1 155 27 view .LVU662
 2498 0c14 040094E5 		ldr	r0, [r4, #4]	@ img_23(D)->width, img_23(D)->width
 2499              	.LBE109:
 2500              	.LBE114:
 2501              	@ armwave.c:367:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 367:armwave.c     ****                     painted++;
 2502              		.loc 1 367 60 view .LVU663
 2503 0c18 FF30A0A3 		movge	r3, #255	@ _171,
 2504              	.LVL122:
 2505              	.LBB115:
 151:armwave.c     **** {
 2506              		.loc 1 151 44 is_stmt 1 view .LVU664
 2507              	.LBB110:
 153:armwave.c     ****     
 2508              		.loc 1 153 5 view .LVU665
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2509              		.loc 1 155 5 view .LVU666
 2510              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2511              		.loc 1 155 37 is_stmt 0 view .LVU667
 2512 0c1c 1C1094E5 		ldr	r1, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2513              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2514              		.loc 1 155 45 view .LVU668
 2515 0c20 74C09FE5 		ldr	ip, .L83+4	@ tmp421,
 2516 0c24 833083E0 		add	r3, r3, r3, lsl #1	@ tmp352, _171, _171,
 2517              	.LVL123:
 2518              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2519              		.loc 1 155 37 view .LVU669
 2520 0c28 901E2EE0 		mla	lr, r0, lr, r1	@ tmp361, img_23(D)->width, yy.10_170, img_23(D)->data
 2521              	.LVL124:
 2522              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2523              		.loc 1 156 66 view .LVU670
 2524 0c2c 000052E3 		cmp	r2, #0	@ _168,
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2525              		.loc 1 156 66 view .LVU671
 2526 0c30 030082E2 		add	r0, r2, #3	@ tmp365, _168,
 2527              	.LVL125:
 2528              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2529              		.loc 1 155 45 view .LVU672
 2530 0c34 0310DCE7 		ldrb	r1, [ip, r3]	@ zero_extendqisi2	@ _178, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].y
 2531              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2532              		.loc 1 156 66 view .LVU673
 2533 0c38 0020A0B1 		movlt	r2, r0	@ _168, tmp365
 2534              	.LVL126:
 2535              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2536              		.loc 1 155 37 view .LVU674
 2537 0c3c 04009DE5 		ldr	r0, [sp, #4]	@ tmp358, %sfp
 2538              	.LVL127:
 2539              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2540              		.loc 1 155 45 view .LVU675
 2541 0c40 03308CE0 		add	r3, ip, r3	@ tmp353, tmp422, tmp352
 2542              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2543              		.loc 1 156 66 view .LVU676
 2544 0c44 4221A0E1 		asr	r2, r2, #2	@ tmp366, _168,
 2545              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2546              		.loc 1 155 37 view .LVU677
 2547 0c48 C010CEE7 		strb	r1, [lr, r0, asr #1]	@ _178, *_177
 2548              	.LVL128:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2549              		.loc 1 156 5 is_stmt 1 view .LVU678
 2550              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2551              		.loc 1 156 46 is_stmt 0 view .LVU679
 2552 0c4c 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2553              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2554              		.loc 1 156 72 view .LVU680
 2555 0c50 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2556              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2557              		.loc 1 156 27 view .LVU681
 2558 0c54 18C094E5 		ldr	ip, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2559              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2560              		.loc 1 156 50 view .LVU682
 2561 0c58 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_183 + 4B], MEM[(int *)_183 + 4B]
 2562              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2563              		.loc 1 156 72 view .LVU683
 2564 0c5c 020080E0 		add	r0, r0, r2	@ tmp379, img_23(D)->data, tmp366
 2565 0c60 910A21E0 		mla	r1, r1, r10, r0	@ tmp380, MEM[(int *)_183 + 4B], _185, tmp379
 2566 0c64 04009CE5 		ldr	r0, [ip, #4]	@ MEM[(int *)_181 + 4B], MEM[(int *)_181 + 4B]
 2567              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2568              		.loc 1 156 80 view .LVU684
 2569 0c68 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2	@ _192, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].v
 2570              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2571              		.loc 1 156 72 view .LVU685
 2572 0c6c 00C0C1E7 		strb	ip, [r1, r0]	@ _192, *_191
 157:armwave.c     **** }
 2573              		.loc 1 157 5 is_stmt 1 view .LVU686
 2574              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2575              		.loc 1 157 46 is_stmt 0 view .LVU687
 2576 0c70 14C094E5 		ldr	ip, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2577              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2578              		.loc 1 157 80 view .LVU688
 2579 0c74 0100D3E5 		ldrb	r0, [r3, #1]	@ zero_extendqisi2	@ _204, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].u
 2580              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2581              		.loc 1 157 72 view .LVU689
 2582 0c78 1C3094E5 		ldr	r3, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2583              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2584              		.loc 1 157 50 view .LVU690
 2585 0c7c 08C09CE5 		ldr	ip, [ip, #8]	@ MEM[(int *)_197 + 8B], MEM[(int *)_197 + 8B]
 2586              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2587              		.loc 1 157 27 view .LVU691
 2588 0c80 181094E5 		ldr	r1, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2589              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2590              		.loc 1 157 72 view .LVU692
 2591 0c84 022083E0 		add	r2, r3, r2	@ tmp395, img_23(D)->data, tmp366
 2592 0c88 9C2A22E0 		mla	r2, ip, r10, r2	@ tmp396, MEM[(int *)_197 + 8B], _185, tmp395
 2593 0c8c 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_195 + 8B], MEM[(int *)_195 + 8B]
 2594 0c90 0100C2E7 		strb	r0, [r2, r1]	@ _204, *_203
 2595              	.LVL129:
 157:armwave.c     **** }
 2596              		.loc 1 157 72 view .LVU693
 2597              	.LBE110:
 2598              	.LBE115:
 368:armwave.c     ****                 }
 2599              		.loc 1 368 21 is_stmt 1 view .LVU694
 2600 0c94 A5FFFFEA 		b	.L70		@
 2601              	.L84:
 2602              		.align	2
 2603              	.L83:
 2604 0c98 00000000 		.word	g_armwave_state
 2605 0c9c 00000000 		.word	g_yuv_lut
 2606              		.cfi_endproc
 2607              	.LFE65:
 2609              		.global	__aeabi_idiv
 2610              		.align	2
 2611              		.global	armwave_generate
 2612              		.syntax unified
 2613              		.arm
 2614              		.fpu vfp
 2616              	armwave_generate:
 2617              	.LFB66:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_generate()
 381:armwave.c     **** {
 2618              		.loc 1 381 1 view -0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 0
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     uint32_t yy;
 2622              		.loc 1 382 5 view .LVU696
 383:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 2623              		.loc 1 383 5 view .LVU697
 2624              	@ armwave.c:381: {
 381:armwave.c     ****     uint32_t yy;
 2625              		.loc 1 381 1 is_stmt 0 view .LVU698
 2626 0ca0 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2627              		.cfi_def_cfa_offset 24
 2628              		.cfi_offset 4, -24
 2629              		.cfi_offset 5, -20
 2630              		.cfi_offset 6, -16
 2631              		.cfi_offset 7, -12
 2632              		.cfi_offset 8, -8
 2633              		.cfi_offset 14, -4
 2634              	@ armwave.c:386:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 384:armwave.c     **** 
 385:armwave.c     ****     // Zero the buffer
 386:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2635              		.loc 1 386 5 view .LVU699
 2636 0ca4 0010A0E3 		mov	r1, #0	@,
 2637              	@ armwave.c:383:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 383:armwave.c     **** 
 2638              		.loc 1 383 38 view .LVU700
 2639 0ca8 80609FE5 		ldr	r6, .L91	@ tmp147,
 2640              	@ armwave.c:386:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2641              		.loc 1 386 5 view .LVU701
 2642 0cac 502096E5 		ldr	r2, [r6, #80]	@, g_armwave_state.ch_buff_size
 2643 0cb0 040096E5 		ldr	r0, [r6, #4]	@, g_armwave_state.ch1_buffer
 2644              	@ armwave.c:383:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 383:armwave.c     **** 
 2645              		.loc 1 383 14 view .LVU702
 2646 0cb4 4C8096E5 		ldr	r8, [r6, #76]	@ xx_rem, g_armwave_state.wave_length
 2647              	.LVL130:
 2648              		.loc 1 386 5 is_stmt 1 view .LVU703
 2649 0cb8 FEFFFFEB 		bl	memset		@
 2650              	.LVL131:
 387:armwave.c     **** 
 388:armwave.c     ****     // Render the main slices
 389:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 2651              		.loc 1 389 5 view .LVU704
 2652              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2653              		.loc 1 389 68 is_stmt 0 view .LVU705
 2654 0cbc 444096E5 		ldr	r4, [r6, #68]	@ _9, g_armwave_state.slice_height
 2655              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2656              		.loc 1 389 51 view .LVU706
 2657 0cc0 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 2658 0cc4 0410A0E1 		mov	r1, r4	@, _9
 2659 0cc8 FEFFFFEB 		bl	__aeabi_idiv		@
 2660              	.LVL132:
 2661              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2662              		.loc 1 389 5 view .LVU707
 2663 0ccc 000050E3 		cmp	r0, #0	@ tmp139
 2664 0cd0 1100000A 		beq	.L88		@,
 2665              	@ armwave.c:383:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 383:armwave.c     **** 
 2666              		.loc 1 383 52 view .LVU708
 2667 0cd4 0070A0E3 		mov	r7, #0	@ ypos,
 2668              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2669              		.loc 1 389 12 view .LVU709
 2670 0cd8 0750A0E1 		mov	r5, r7	@ yy, ypos
 2671              	.LVL133:
 2672              	.L87:
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2673              		.loc 1 390 9 is_stmt 1 discriminator 3 view .LVU710
 2674 0cdc 950400E0 		mul	r0, r5, r4	@, yy, tmp1
 2675 0ce0 0410A0E1 		mov	r1, r4	@, _9
 2676 0ce4 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 2677              	.LVL134:
 391:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2678              		.loc 1 391 9 discriminator 3 view .LVU711
 2679              	@ armwave.c:391:         xx_rem -= g_armwave_state.slice_height;
 2680              		.loc 1 391 34 is_stmt 0 discriminator 3 view .LVU712
 2681 0ce8 444096E5 		ldr	r4, [r6, #68]	@ _9, g_armwave_state.slice_height
 2682              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2683              		.loc 1 389 51 discriminator 3 view .LVU713
 2684 0cec 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 2685 0cf0 0410A0E1 		mov	r1, r4	@, _9
 2686 0cf4 FEFFFFEB 		bl	__aeabi_idiv		@
 2687              	.LVL135:
 2688              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2689              		.loc 1 389 86 discriminator 3 view .LVU714
 2690 0cf8 015085E2 		add	r5, r5, #1	@ yy, yy,
 2691              	.LVL136:
 2692              	@ armwave.c:391:         xx_rem -= g_armwave_state.slice_height;
 2693              		.loc 1 391 16 discriminator 3 view .LVU715
 2694 0cfc 048048E0 		sub	r8, r8, r4	@ xx_rem, xx_rem, _9
 2695              	.LVL137:
 392:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 2696              		.loc 1 392 9 is_stmt 1 discriminator 3 view .LVU716
 2697              	@ armwave.c:392:         ypos += g_armwave_state.slice_height;   
 2698              		.loc 1 392 14 is_stmt 0 discriminator 3 view .LVU717
 2699 0d00 047087E0 		add	r7, r7, r4	@ ypos, ypos, _9
 2700              	.LVL138:
 2701              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2702              		.loc 1 389 5 discriminator 3 view .LVU718
 2703 0d04 050050E1 		cmp	r0, r5	@, yy
 2704 0d08 F3FFFF8A 		bhi	.L87		@,
 393:armwave.c     ****     }
 394:armwave.c     **** 
 395:armwave.c     ****     // Render whatever is left over
 396:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2705              		.loc 1 396 5 is_stmt 1 view .LVU719
 2706 0d0c 0810A0E1 		mov	r1, r8	@, xx_rem
 2707 0d10 0700A0E1 		mov	r0, r7	@, ypos
 2708              	@ armwave.c:397: }
 397:armwave.c     **** }
 2709              		.loc 1 397 1 is_stmt 0 view .LVU720
 2710 0d14 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2711              		.cfi_remember_state
 2712              		.cfi_restore 14
 2713              		.cfi_restore 8
 2714              		.cfi_restore 7
 2715              		.cfi_restore 6
 2716              		.cfi_restore 5
 2717              		.cfi_restore 4
 2718              		.cfi_def_cfa_offset 0
 2719              	.LVL139:
 2720              	@ armwave.c:396:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 396:armwave.c     **** }
 2721              		.loc 1 396 5 view .LVU721
 2722 0d18 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2723              	.LVL140:
 2724              	.L88:
 2725              		.cfi_restore_state
 2726              	@ armwave.c:383:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 383:armwave.c     **** 
 2727              		.loc 1 383 52 view .LVU722
 2728 0d1c 0070A0E1 		mov	r7, r0	@ ypos, tmp139
 396:armwave.c     **** }
 2729              		.loc 1 396 5 is_stmt 1 view .LVU723
 2730 0d20 0810A0E1 		mov	r1, r8	@, xx_rem
 2731 0d24 0700A0E1 		mov	r0, r7	@, ypos
 2732              	@ armwave.c:397: }
 2733              		.loc 1 397 1 is_stmt 0 view .LVU724
 2734 0d28 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2735              		.cfi_restore 14
 2736              		.cfi_restore 8
 2737              		.cfi_restore 7
 2738              		.cfi_restore 6
 2739              		.cfi_restore 5
 2740              		.cfi_restore 4
 2741              		.cfi_def_cfa_offset 0
 2742              	.LVL141:
 2743              	@ armwave.c:396:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 396:armwave.c     **** }
 2744              		.loc 1 396 5 view .LVU725
 2745 0d2c FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2746              	.LVL142:
 2747              	.L92:
 2748              		.align	2
 2749              	.L91:
 2750 0d30 00000000 		.word	g_armwave_state
 2751              		.cfi_endproc
 2752              	.LFE66:
 2754              		.align	2
 2755              		.global	armwave_setup_render
 2756              		.syntax unified
 2757              		.arm
 2758              		.fpu vfp
 2760              	armwave_setup_render:
 2761              	.LVL143:
 2762              	.LFB67:
 398:armwave.c     **** 
 399:armwave.c     **** /*
 400:armwave.c     ****  * Setup the renderer with passed parameters.
 401:armwave.c     ****  */
 402:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 403:armwave.c     **** {
 2763              		.loc 1 403 1 is_stmt 1 view -0
 2764              		.cfi_startproc
 2765              		@ args = 12, pretend = 0, frame = 0
 2766              		@ frame_needed = 0, uses_anonymous_args = 0
 404:armwave.c     ****     uint32_t length, xx;
 2767              		.loc 1 404 5 view .LVU727
 405:armwave.c     ****     float points_per_pixel;
 2768              		.loc 1 405 5 view .LVU728
 406:armwave.c     **** 
 407:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 2769              		.loc 1 407 5 view .LVU729
 2770              	@ armwave.c:403: {
 403:armwave.c     ****     uint32_t length, xx;
 2771              		.loc 1 403 1 is_stmt 0 view .LVU730
 2772 0d34 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2773              		.cfi_def_cfa_offset 32
 2774              		.cfi_offset 4, -32
 2775              		.cfi_offset 5, -28
 2776              		.cfi_offset 6, -24
 2777              		.cfi_offset 7, -20
 2778              		.cfi_offset 8, -16
 2779              		.cfi_offset 9, -12
 2780              		.cfi_offset 10, -8
 2781              		.cfi_offset 14, -4
 2782 0d38 10D04DE2 		sub	sp, sp, #16	@,,
 2783              		.cfi_def_cfa_offset 48
 2784              	@ armwave.c:403: {
 403:armwave.c     ****     uint32_t length, xx;
 2785              		.loc 1 403 1 view .LVU731
 2786 0d3c 0040A0E1 		mov	r4, r0	@ start_point, start_point
 2787 0d40 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 2788 0d44 38809DE5 		ldr	r8, [sp, #56]	@ render_flags, render_flags
 2789 0d48 0150A0E1 		mov	r5, r1	@ end_point, end_point
 2790              	@ armwave.c:407:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 2791              		.loc 1 407 5 view .LVU732
 2792 0d4c 00308DE5 		str	r3, [sp]	@ wave_stride,
 2793              	@ armwave.c:403: {
 403:armwave.c     ****     uint32_t length, xx;
 2794              		.loc 1 403 1 view .LVU733
 2795 0d50 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 2796 0d54 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 2797              	@ armwave.c:407:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 2798              		.loc 1 407 5 view .LVU734
 2799 0d58 F460CDE1 		strd	r6, [sp, #4]	@,,
 2800 0d5c 0230A0E1 		mov	r3, r2	@, waves_max
 2801              	.LVL144:
 2802              		.loc 1 407 5 view .LVU735
 2803 0d60 0C808DE5 		str	r8, [sp, #12]	@ render_flags,
 2804 0d64 0120A0E1 		mov	r2, r1	@, end_point
 2805              	.LVL145:
 2806              		.loc 1 407 5 view .LVU736
 2807 0d68 0010A0E1 		mov	r1, r0	@, start_point
 2808              	.LVL146:
 2809              		.loc 1 407 5 view .LVU737
 2810 0d6c 0C029FE5 		ldr	r0, .L108+12	@,
 2811              	.LVL147:
 2812              		.loc 1 407 5 view .LVU738
 2813 0d70 FEFFFFEB 		bl	printf		@
 2814              	.LVL148:
 408:armwave.c     **** 
 409:armwave.c     ****     if(start_point > end_point) {
 2815              		.loc 1 409 5 is_stmt 1 view .LVU739
 2816              	@ armwave.c:409:     if(start_point > end_point) {
 2817              		.loc 1 409 7 is_stmt 0 view .LVU740
 2818 0d74 050054E1 		cmp	r4, r5	@ start_point, end_point
 2819 0d78 6D00008A 		bhi	.L106		@,
 410:armwave.c     ****         printf("Error: start point more than end point\n");
 411:armwave.c     ****         return;
 412:armwave.c     ****     }
 413:armwave.c     **** 
 414:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 415:armwave.c     ****     g_armwave_state.xstride = target_height;
 2820              		.loc 1 415 5 is_stmt 1 view .LVU741
 2821              	@ armwave.c:426:     g_armwave_state.wave_length = end_point - start_point;
 416:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 418:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 419:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 420:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 421:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 422:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 423:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 425:armwave.c     ****     g_armwave_state.target_height = target_height;
 426:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2822              		.loc 1 426 45 is_stmt 0 view .LVU742
 2823 0d7c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 2824              	.LVL149:
 2825              	@ armwave.c:431:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 427:armwave.c     ****     g_armwave_state.flags = render_flags;
 428:armwave.c     **** 
 429:armwave.c     ****     // Calculate compound scaler
 430:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 431:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2826              		.loc 1 431 48 view .LVU743
 2827 0d80 7B5A9FED 		vldr.32	s10, .L108	@ tmp197,
 2828 0d84 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 2829              	@ armwave.c:416:     g_armwave_state.vscale_frac = target_height / 255.0f;
 416:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2830              		.loc 1 416 49 view .LVU744
 2831 0d88 7A7A9FED 		vldr.32	s14, .L108+4	@ tmp174,
 2832              	@ armwave.c:431:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 2833              		.loc 1 431 81 view .LVU745
 2834 0d8c 7A6A9FED 		vldr.32	s12, .L108+8	@ tmp201,
 2835              	@ armwave.c:423:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 423:armwave.c     ****     g_armwave_state.target_width = target_width;
 2836              		.loc 1 423 90 view .LVU746
 2837 0d90 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 2838              	@ armwave.c:431:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 2839              		.loc 1 431 48 view .LVU747
 2840 0d94 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp195, _13
 2841              	@ armwave.c:416:     g_armwave_state.vscale_frac = target_height / 255.0f;
 416:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2842              		.loc 1 416 49 view .LVU748
 2843 0d98 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 2844              	@ armwave.c:415:     g_armwave_state.xstride = target_height;
 415:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2845              		.loc 1 415 29 view .LVU749
 2846 0d9c E0419FE5 		ldr	r4, .L108+16	@ tmp246,
 2847              	.LVL150:
 2848              	@ armwave.c:421:     g_armwave_state.size = target_height * target_width;
 421:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2849              		.loc 1 421 42 view .LVU750
 2850 0da0 970600E0 		mul	r0, r7, r6	@ tmp182, target_height, target_width
 2851              	@ armwave.c:416:     g_armwave_state.vscale_frac = target_height / 255.0f;
 416:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2852              		.loc 1 416 49 view .LVU751
 2853 0da4 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 2854              	@ armwave.c:423:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 423:armwave.c     ****     g_armwave_state.target_width = target_width;
 2855              		.loc 1 423 95 view .LVU752
 2856 0da8 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 2857              	@ armwave.c:433:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 432:armwave.c     **** 
 433:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 2858              		.loc 1 433 5 view .LVU753
 2859 0dac 0128A0E3 		mov	r2, #65536	@ tmp204,
 2860              	@ armwave.c:431:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 431:armwave.c     **** 
 2861              		.loc 1 431 48 view .LVU754
 2862 0db0 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp196, tmp197, tmp195
 2863              	@ armwave.c:433:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2864              		.loc 1 433 5 view .LVU755
 2865 0db4 04508DE5 		str	r5, [sp, #4]	@ _13,
 2866 0db8 00608DE5 		str	r6, [sp]	@ target_width,
 2867              	@ armwave.c:423:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 423:armwave.c     ****     g_armwave_state.target_width = target_width;
 2868              		.loc 1 423 95 view .LVU756
 2869 0dbc 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 2870              	@ armwave.c:415:     g_armwave_state.xstride = target_height;
 415:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2871              		.loc 1 415 29 view .LVU757
 2872 0dc0 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 416:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2873              		.loc 1 416 5 is_stmt 1 view .LVU758
 2874              	@ armwave.c:418:     g_armwave_state.wave_stride = wave_stride;
 418:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2875              		.loc 1 418 33 is_stmt 0 view .LVU759
 2876 0dc4 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 2877              	@ armwave.c:419:     g_armwave_state.waves_max = waves_max;
 419:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2878              		.loc 1 419 31 view .LVU760
 2879 0dc8 3C9084E5 		str	r9, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 2880              	@ armwave.c:420:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 420:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2881              		.loc 1 420 27 view .LVU761
 2882 0dcc 389084E5 		str	r9, [r4, #56]	@ waves_max, g_armwave_state.waves
 2883              	@ armwave.c:425:     g_armwave_state.target_height = target_height;
 425:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2884              		.loc 1 425 35 view .LVU762
 2885 0dd0 F067C4E1 		strd	r6, [r4, #112]	@, tmp246,
 2886              	@ armwave.c:433:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2887              		.loc 1 433 5 view .LVU763
 2888 0dd4 08208DE5 		str	r2, [sp, #8]	@ tmp204,
 2889              	@ armwave.c:422:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 422:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2890              		.loc 1 422 37 view .LVU764
 2891 0dd8 022CA0E3 		mov	r2, #512	@ tmp184,
 2892              	@ armwave.c:433:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2893              		.loc 1 433 5 view .LVU765
 2894 0ddc 0310A0E1 		mov	r1, r3	@, tmp189
 2895              	@ armwave.c:421:     g_armwave_state.size = target_height * target_width;
 421:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2896              		.loc 1 421 26 view .LVU766
 2897 0de0 540084E5 		str	r0, [r4, #84]	@ tmp182, g_armwave_state.size
 2898              	@ armwave.c:422:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 422:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2899              		.loc 1 422 37 view .LVU767
 2900 0de4 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 2901              	@ armwave.c:423:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 423:armwave.c     ****     g_armwave_state.target_width = target_width;
 2902              		.loc 1 423 34 view .LVU768
 2903 0de8 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 2904              	@ armwave.c:416:     g_armwave_state.vscale_frac = target_height / 255.0f;
 416:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2905              		.loc 1 416 49 view .LVU769
 2906 0dec 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp173, tmp174
 2907              	@ armwave.c:431:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 431:armwave.c     **** 
 2908              		.loc 1 431 40 view .LVU770
 2909 0df0 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 2910              	@ armwave.c:426:     g_armwave_state.wave_length = end_point - start_point;
 426:armwave.c     ****     g_armwave_state.flags = render_flags;
 2911              		.loc 1 426 33 view .LVU771
 2912 0df4 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 2913              	@ armwave.c:427:     g_armwave_state.flags = render_flags;
 427:armwave.c     **** 
 2914              		.loc 1 427 27 view .LVU772
 2915 0df8 008084E5 		str	r8, [r4]	@ render_flags, g_armwave_state.flags
 2916              	@ armwave.c:433:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2917              		.loc 1 433 5 view .LVU773
 2918 0dfc 84019FE5 		ldr	r0, .L108+20	@,
 2919              	@ armwave.c:431:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 431:armwave.c     **** 
 2920              		.loc 1 431 40 view .LVU774
 2921 0e00 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, target_width
 2922 0e04 877A67EE 		vmul.f32	s15, s15, s14	@ tmp199, tmp196, tmp198
 2923              	@ armwave.c:417:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 417:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2924              		.loc 1 417 30 view .LVU775
 2925 0e08 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp177, _3
 2926              	@ armwave.c:416:     g_armwave_state.vscale_frac = target_height / 255.0f;
 416:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2927              		.loc 1 416 33 view .LVU776
 2928 0e0c 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 417:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2929              		.loc 1 417 5 is_stmt 1 view .LVU777
 2930              	@ armwave.c:431:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 431:armwave.c     **** 
 2931              		.loc 1 431 81 is_stmt 0 view .LVU778
 2932 0e10 867A67EE 		vmul.f32	s15, s15, s12	@ tmp200, tmp199, tmp201
 2933              	@ armwave.c:417:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 417:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2934              		.loc 1 417 30 view .LVU779
 2935 0e14 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 418:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2936              		.loc 1 418 5 is_stmt 1 view .LVU780
 419:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2937              		.loc 1 419 5 view .LVU781
 420:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2938              		.loc 1 420 5 view .LVU782
 421:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2939              		.loc 1 421 5 view .LVU783
 422:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2940              		.loc 1 422 5 view .LVU784
 423:armwave.c     ****     g_armwave_state.target_width = target_width;
 2941              		.loc 1 423 5 view .LVU785
 424:armwave.c     ****     g_armwave_state.target_height = target_height;
 2942              		.loc 1 424 5 view .LVU786
 425:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2943              		.loc 1 425 5 view .LVU787
 426:armwave.c     ****     g_armwave_state.flags = render_flags;
 2944              		.loc 1 426 5 view .LVU788
 427:armwave.c     **** 
 2945              		.loc 1 427 5 view .LVU789
 430:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2946              		.loc 1 430 5 view .LVU790
 2947              	@ armwave.c:430:     g_armwave_state.cmp_x_bitdepth_scale = \
 430:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2948              		.loc 1 430 42 is_stmt 0 view .LVU791
 2949 0e18 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp200
 2950 0e1c 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 2951              	@ armwave.c:433:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2952              		.loc 1 433 5 view .LVU792
 2953 0e20 903A17EE 		vmov	r3, s15	@ int	@, _20
 2954              	@ armwave.c:430:     g_armwave_state.cmp_x_bitdepth_scale = \
 430:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2955              		.loc 1 430 42 view .LVU793
 2956 0e24 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 2957              		.loc 1 433 5 is_stmt 1 view .LVU794
 2958 0e28 0C20A0E1 		mov	r2, ip	@, tmp3
 2959 0e2c FEFFFFEB 		bl	printf		@
 2960              	.LVL151:
 434:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 435:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 436:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 437:armwave.c     **** 
 438:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 439:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 440:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 441:armwave.c     ****     g_armwave_state.slice_height = 16; // 64;  
 2961              		.loc 1 441 5 view .LVU795
 2962              	@ armwave.c:443:     if(g_armwave_state.ch1_buffer != NULL)
 442:armwave.c     **** 
 443:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 2963              		.loc 1 443 23 is_stmt 0 view .LVU796
 2964 0e30 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 2965              	@ armwave.c:441:     g_armwave_state.slice_height = 16; // 64;  
 441:armwave.c     **** 
 2966              		.loc 1 441 34 view .LVU797
 2967 0e34 1030A0E3 		mov	r3, #16	@ tmp206,
 2968              	@ armwave.c:443:     if(g_armwave_state.ch1_buffer != NULL)
 2969              		.loc 1 443 7 view .LVU798
 2970 0e38 000050E3 		cmp	r0, #0	@ _21,
 2971              	@ armwave.c:441:     g_armwave_state.slice_height = 16; // 64;  
 441:armwave.c     **** 
 2972              		.loc 1 441 34 view .LVU799
 2973 0e3c 443084E5 		str	r3, [r4, #68]	@ tmp206, g_armwave_state.slice_height
 2974              		.loc 1 443 5 is_stmt 1 view .LVU800
 2975              	@ armwave.c:443:     if(g_armwave_state.ch1_buffer != NULL)
 2976              		.loc 1 443 7 is_stmt 0 view .LVU801
 2977 0e40 0000000A 		beq	.L95		@,
 444:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2978              		.loc 1 444 9 is_stmt 1 view .LVU802
 2979 0e44 FEFFFFEB 		bl	free		@
 2980              	.LVL152:
 2981              	.L95:
 445:armwave.c     **** 
 446:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2982              		.loc 1 446 5 view .LVU803
 2983              	@ armwave.c:446:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2984              		.loc 1 446 56 is_stmt 0 view .LVU804
 2985 0e48 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 2986              	@ armwave.c:446:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2987              		.loc 1 446 34 view .LVU805
 2988 0e4c 0110A0E3 		mov	r1, #1	@,
 2989 0e50 0800A0E1 		mov	r0, r8	@, _22
 2990 0e54 FEFFFFEB 		bl	calloc		@
 2991              	.LVL153:
 2992              	@ armwave.c:448:     if(g_armwave_state.ch1_buffer == NULL) {
 447:armwave.c     **** 
 448:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 2993              		.loc 1 448 7 view .LVU806
 2994 0e58 000050E3 		cmp	r0, #0	@ pretmp_124,
 2995              	@ armwave.c:446:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 446:armwave.c     **** 
 2996              		.loc 1 446 34 view .LVU807
 2997 0e5c 0070A0E1 		mov	r7, r0	@ pretmp_124,
 2998              	@ armwave.c:446:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 446:armwave.c     **** 
 2999              		.loc 1 446 32 view .LVU808
 3000 0e60 040084E5 		str	r0, [r4, #4]	@ pretmp_124, g_armwave_state.ch1_buffer
 3001              		.loc 1 448 5 is_stmt 1 view .LVU809
 3002              	@ armwave.c:448:     if(g_armwave_state.ch1_buffer == NULL) {
 3003              		.loc 1 448 7 is_stmt 0 view .LVU810
 3004 0e64 3B00000A 		beq	.L107		@,
 449:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 450:armwave.c     ****         exit(-1);
 451:armwave.c     ****     }
 452:armwave.c     **** 
 453:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 454:armwave.c     ****     length = end_point - start_point;
 3005              		.loc 1 454 5 is_stmt 1 view .LVU811
 3006              	.LVL154:
 455:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3007              		.loc 1 455 5 view .LVU812
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3008              		.loc 1 456 5 view .LVU813
 3009              	@ armwave.c:455:     points_per_pixel = length / ((float)(target_width));
 455:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3010              		.loc 1 455 31 is_stmt 0 view .LVU814
 3011 0e68 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 3012              	@ armwave.c:456:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 3013              		.loc 1 456 77 view .LVU815
 3014 0e6c 448094E5 		ldr	r8, [r4, #68]	@ _28, g_armwave_state.slice_height
 3015              	@ armwave.c:458:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 457:armwave.c     **** 
 458:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 3016              		.loc 1 458 40 view .LVU816
 3017 0e70 8500A0E1 		lsl	r0, r5, #1	@, _13,
 3018              	@ armwave.c:455:     points_per_pixel = length / ((float)(target_width));
 455:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3019              		.loc 1 455 31 view .LVU817
 3020 0e74 676AB8EE 		vcvt.f32.u32	s12, s15	@ tmp215, _13
 3021              	@ armwave.c:455:     points_per_pixel = length / ((float)(target_width));
 455:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3022              		.loc 1 455 34 view .LVU818
 3023 0e78 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 3024              	@ armwave.c:456:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3025              		.loc 1 456 60 view .LVU819
 3026 0e7c 108A07EE 		vmov	s14, r8	@ int	@ _28, _28
 3027              	@ armwave.c:455:     points_per_pixel = length / ((float)(target_width));
 455:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3028              		.loc 1 455 34 view .LVU820
 3029 0e80 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 3030              	@ armwave.c:456:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3031              		.loc 1 456 60 view .LVU821
 3032 0e84 C76AF8EE 		vcvt.f32.s32	s13, s14	@ tmp218, _28
 3033              	@ armwave.c:455:     points_per_pixel = length / ((float)(target_width));
 455:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3034              		.loc 1 455 22 view .LVU822
 3035 0e88 277A86EE 		vdiv.f32	s14, s12, s15	@ points_per_pixel, tmp215, tmp216
 3036              	.LVL155:
 3037              	@ armwave.c:456:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3038              		.loc 1 456 60 view .LVU823
 3039 0e8c 267A67EE 		vmul.f32	s15, s14, s13	@ tmp219, points_per_pixel, tmp218
 3040              	@ armwave.c:456:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3041              		.loc 1 456 41 view .LVU824
 3042 0e90 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 3043 0e94 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 3044              		.loc 1 458 5 is_stmt 1 view .LVU825
 3045              	@ armwave.c:458:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 3046              		.loc 1 458 40 is_stmt 0 view .LVU826
 3047 0e98 FEFFFFEB 		bl	malloc		@
 3048              	.LVL156:
 3049              	@ armwave.c:460:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 459:armwave.c     **** 
 460:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 3050              		.loc 1 460 5 view .LVU827
 3051 0e9c 000050E3 		cmp	r0, #0	@ pretmp_119,
 3052              	@ armwave.c:458:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 458:armwave.c     **** 
 3053              		.loc 1 458 40 view .LVU828
 3054 0ea0 0060A0E1 		mov	r6, r0	@ pretmp_119,
 3055              	.LVL157:
 3056              	@ armwave.c:458:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 458:armwave.c     **** 
 3057              		.loc 1 458 38 view .LVU829
 3058 0ea4 9C0084E5 		str	r0, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3059              		.loc 1 460 5 is_stmt 1 view .LVU830
 3060 0ea8 2500000A 		beq	.L97		@,
 3061              	.LVL158:
 3062              	@ armwave.c:462:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 461:armwave.c     **** 
 462:armwave.c     ****     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3063              		.loc 1 462 5 is_stmt 0 view .LVU831
 3064 0eac 000058E3 		cmp	r8, #0	@ _28,
 3065              	@ armwave.c:462:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3066              		.loc 1 462 12 view .LVU832
 3067 0eb0 0050A013 		movne	r5, #0	@ xx,
 3068              	.LVL159:
 3069              	@ armwave.c:464:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 464:armwave.c     ****         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpixel[xx]);
 3070              		.loc 1 464 9 view .LVU833
 3071 0eb4 D0709F15 		ldrne	r7, .L108+24	@ tmp247,
 3072              	@ armwave.c:462:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 462:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3073              		.loc 1 462 5 view .LVU834
 3074 0eb8 0100001A 		bne	.L98		@,
 3075 0ebc 0E0000EA 		b	.L99		@
 3076              	.LVL160:
 3077              	.L100:
 462:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3078              		.loc 1 462 5 view .LVU835
 3079 0ec0 9C6094E5 		ldr	r6, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3080              	.LVL161:
 3081              	.L98:
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3082              		.loc 1 463 9 is_stmt 1 discriminator 3 view .LVU836
 3083              	@ armwave.c:463:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3084              		.loc 1 463 53 is_stmt 0 discriminator 3 view .LVU837
 3085 0ec4 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3086              	@ armwave.c:463:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3087              		.loc 1 463 46 discriminator 3 view .LVU838
 3088 0ec8 85C0A0E1 		lsl	ip, r5, #1	@ tmp230, xx,
 3089              	@ armwave.c:464:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 3090              		.loc 1 464 9 discriminator 3 view .LVU839
 3091 0ecc 0510A0E1 		mov	r1, r5	@, xx
 3092              	@ armwave.c:463:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3093              		.loc 1 463 53 discriminator 3 view .LVU840
 3094 0ed0 930503E0 		mul	r3, r3, r5	@ tmp228, g_armwave_state.cmp_x_bitdepth_scale, xx
 3095              	@ armwave.c:464:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 3096              		.loc 1 464 9 discriminator 3 view .LVU841
 3097 0ed4 0700A0E1 		mov	r0, r7	@, tmp247
 3098              	@ armwave.c:462:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 462:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3099              		.loc 1 462 54 discriminator 3 view .LVU842
 3100 0ed8 015085E2 		add	r5, r5, #1	@ xx, xx,
 3101              	.LVL162:
 3102              	@ armwave.c:463:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3103              		.loc 1 463 93 discriminator 3 view .LVU843
 3104 0edc 2328A0E1 		lsr	r2, r3, #16	@ _36, tmp228,
 3105              	@ armwave.c:463:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3106              		.loc 1 463 46 discriminator 3 view .LVU844
 3107 0ee0 BC2086E1 		strh	r2, [r6, ip]	@ movhi	@ _36, *_39
 3108              		.loc 1 464 9 is_stmt 1 discriminator 3 view .LVU845
 3109 0ee4 FEFFFFEB 		bl	printf		@
 3110              	.LVL163:
 3111              	@ armwave.c:462:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 462:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3112              		.loc 1 462 5 is_stmt 0 discriminator 3 view .LVU846
 3113 0ee8 443094E5 		ldr	r3, [r4, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 3114 0eec 050053E1 		cmp	r3, r5	@ g_armwave_state.slice_height, xx
 3115 0ef0 F2FFFF8A 		bhi	.L100		@,
 3116 0ef4 047094E5 		ldr	r7, [r4, #4]	@ pretmp_124, g_armwave_state.ch1_buffer
 3117 0ef8 9C6094E5 		ldr	r6, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3118              	.LVL164:
 3119              	.L99:
 465:armwave.c     ****     }
 466:armwave.c     ****     
 467:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3120              		.loc 1 467 5 is_stmt 1 view .LVU847
 3121              	@ armwave.c:467:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3122              		.loc 1 467 34 is_stmt 0 view .LVU848
 3123 0efc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 3124 0f00 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 3125 0f04 FEFFFFEB 		bl	malloc		@
 3126              	.LVL165:
 3127              	@ armwave.c:469:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 468:armwave.c     **** 
 469:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3128              		.loc 1 469 5 view .LVU849
 3129 0f08 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3130 0f0c 0620A0E1 		mov	r2, r6	@, pretmp_119
 3131 0f10 30308DE5 		str	r3, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 3132 0f14 0710A0E1 		mov	r1, r7	@, pretmp_124
 3133              	@ armwave.c:467:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 467:armwave.c     **** 
 3134              		.loc 1 467 34 view .LVU850
 3135 0f18 00C0A0E1 		mov	ip, r0	@ tmp241,
 3136              	@ armwave.c:469:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3137              		.loc 1 469 5 view .LVU851
 3138 0f1c 0030A0E1 		mov	r3, r0	@, tmp241
 3139              	@ armwave.c:467:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 467:armwave.c     **** 
 3140              		.loc 1 467 32 view .LVU852
 3141 0f20 80C084E5 		str	ip, [r4, #128]	@ tmp241, g_armwave_state.out_pixbuf
 3142              		.loc 1 469 5 is_stmt 1 view .LVU853
 3143 0f24 64009FE5 		ldr	r0, .L108+28	@,
 3144              	@ armwave.c:476: }
 470:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 471:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 472:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 473:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 474:armwave.c     **** 
 475:armwave.c     ****      //malloc_stats();
 476:armwave.c     **** }
 3145              		.loc 1 476 1 is_stmt 0 view .LVU854
 3146 0f28 10D08DE2 		add	sp, sp, #16	@,,
 3147              		.cfi_remember_state
 3148              		.cfi_def_cfa_offset 32
 3149              		@ sp needed	@
 3150 0f2c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3151              		.cfi_restore 14
 3152              		.cfi_restore 10
 3153              		.cfi_restore 9
 3154              		.cfi_restore 8
 3155              		.cfi_restore 7
 3156              		.cfi_restore 6
 3157              		.cfi_restore 5
 3158              		.cfi_restore 4
 3159              		.cfi_def_cfa_offset 0
 3160              	.LVL166:
 3161              	@ armwave.c:469:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 469:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 3162              		.loc 1 469 5 view .LVU855
 3163 0f30 FEFFFFEA 		b	printf		@
 3164              	.LVL167:
 3165              	.L106:
 3166              		.cfi_restore_state
 410:armwave.c     ****         return;
 3167              		.loc 1 410 9 is_stmt 1 view .LVU856
 3168 0f34 58009FE5 		ldr	r0, .L108+32	@,
 3169              	@ armwave.c:476: }
 3170              		.loc 1 476 1 is_stmt 0 view .LVU857
 3171 0f38 10D08DE2 		add	sp, sp, #16	@,,
 3172              		.cfi_remember_state
 3173              		.cfi_def_cfa_offset 32
 3174              		@ sp needed	@
 3175 0f3c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3176              		.cfi_restore 14
 3177              		.cfi_restore 10
 3178              		.cfi_restore 9
 3179              		.cfi_restore 8
 3180              		.cfi_restore 7
 3181              		.cfi_restore 6
 3182              		.cfi_restore 5
 3183              		.cfi_restore 4
 3184              		.cfi_def_cfa_offset 0
 3185              	.LVL168:
 3186              	@ armwave.c:410:         printf("Error: start point more than end point\n");
 410:armwave.c     ****         return;
 3187              		.loc 1 410 9 view .LVU858
 3188 0f40 FEFFFFEA 		b	puts		@
 3189              	.LVL169:
 3190              	.L97:
 3191              		.cfi_restore_state
 460:armwave.c     **** 
 3192              		.loc 1 460 5 is_stmt 1 discriminator 1 view .LVU859
 3193 0f44 4C309FE5 		ldr	r3, .L108+36	@,
 3194 0f48 732FA0E3 		mov	r2, #460	@,
 3195 0f4c 48109FE5 		ldr	r1, .L108+40	@,
 3196 0f50 48009FE5 		ldr	r0, .L108+44	@,
 3197 0f54 FEFFFFEB 		bl	__assert_fail		@
 3198              	.LVL170:
 3199              	.L107:
 449:armwave.c     ****         exit(-1);
 3200              		.loc 1 449 9 view .LVU860
 3201 0f58 44309FE5 		ldr	r3, .L108+48	@ tmp212,
 3202 0f5c 0820A0E1 		mov	r2, r8	@, _22
 3203 0f60 40109FE5 		ldr	r1, .L108+52	@,
 3204 0f64 000093E5 		ldr	r0, [r3]	@, stderr
 3205 0f68 FEFFFFEB 		bl	fprintf		@
 3206              	.LVL171:
 450:armwave.c     ****     }
 3207              		.loc 1 450 9 view .LVU861
 3208 0f6c 0000E0E3 		mvn	r0, #0	@,
 3209 0f70 FEFFFFEB 		bl	exit		@
 3210              	.LVL172:
 3211              	.L109:
 3212              		.align	2
 3213              	.L108:
 3214 0f74 0000803F 		.word	1065353216
 3215 0f78 00007F43 		.word	1132396544
 3216 0f7c 00008047 		.word	1199570944
 3217 0f80 9C000000 		.word	.LC6
 3218 0f84 00000000 		.word	g_armwave_state
 3219 0f88 F0000000 		.word	.LC8
 3220 0f8c CC010000 		.word	.LC12
 3221 0f90 EC010000 		.word	.LC13
 3222 0f94 C8000000 		.word	.LC7
 3223 0f98 00000000 		.word	.LANCHOR0
 3224 0f9c 94010000 		.word	.LC10
 3225 0fa0 A0010000 		.word	.LC11
 3226 0fa4 00000000 		.word	stderr
 3227 0fa8 50010000 		.word	.LC9
 3228              		.cfi_endproc
 3229              	.LFE67:
 3231              		.align	2
 3232              		.global	armwave_set_wave_pointer
 3233              		.syntax unified
 3234              		.arm
 3235              		.fpu vfp
 3237              	armwave_set_wave_pointer:
 3238              	.LVL173:
 3239              	.LFB68:
 477:armwave.c     **** 
 478:armwave.c     **** /*
 479:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 480:armwave.c     ****  * in the future.
 481:armwave.c     ****  */
 482:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 483:armwave.c     **** {
 3240              		.loc 1 483 1 view -0
 3241              		.cfi_startproc
 3242              		@ args = 0, pretend = 0, frame = 0
 3243              		@ frame_needed = 0, uses_anonymous_args = 0
 484:armwave.c     ****     assert(wave_buffer != NULL);
 3244              		.loc 1 484 5 view .LVU863
 3245 0fac 000050E3 		cmp	r0, #0	@ wave_buffer
 3246              		.loc 1 484 5 is_stmt 0 view .LVU864
 3247 0fb0 0200000A 		beq	.L115		@,
 485:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 3248              		.loc 1 485 5 is_stmt 1 view .LVU865
 3249              	@ armwave.c:485:     g_armwave_state.wave_buffer = wave_buffer;
 3250              		.loc 1 485 33 is_stmt 0 view .LVU866
 3251 0fb4 1C309FE5 		ldr	r3, .L116	@ tmp115,
 3252 0fb8 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 3253 0fbc 1EFF2FE1 		bx	lr	@
 3254              	.L115:
 484:armwave.c     ****     assert(wave_buffer != NULL);
 3255              		.loc 1 484 5 is_stmt 1 discriminator 1 view .LVU867
 3256              	@ armwave.c:483: {
 483:armwave.c     ****     assert(wave_buffer != NULL);
 3257              		.loc 1 483 1 is_stmt 0 discriminator 1 view .LVU868
 3258 0fc0 10402DE9 		push	{r4, lr}	@
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 4, -8
 3261              		.cfi_offset 14, -4
 3262              	@ armwave.c:484:     assert(wave_buffer != NULL);
 484:armwave.c     ****     assert(wave_buffer != NULL);
 3263              		.loc 1 484 5 discriminator 1 view .LVU869
 3264 0fc4 792FA0E3 		mov	r2, #484	@,
 3265 0fc8 0C309FE5 		ldr	r3, .L116+4	@,
 3266 0fcc 0C109FE5 		ldr	r1, .L116+8	@,
 3267 0fd0 0C009FE5 		ldr	r0, .L116+12	@,
 3268              	.LVL174:
 484:armwave.c     ****     assert(wave_buffer != NULL);
 3269              		.loc 1 484 5 discriminator 1 view .LVU870
 3270 0fd4 FEFFFFEB 		bl	__assert_fail		@
 3271              	.LVL175:
 3272              	.L117:
 3273              		.align	2
 3274              	.L116:
 3275 0fd8 00000000 		.word	g_armwave_state
 3276 0fdc 18000000 		.word	.LANCHOR0+24
 3277 0fe0 94010000 		.word	.LC10
 3278 0fe4 10020000 		.word	.LC14
 3279              		.cfi_endproc
 3280              	.LFE68:
 3282              		.align	2
 3283              		.global	armwave_set_wave_pointer_as_testbuf
 3284              		.syntax unified
 3285              		.arm
 3286              		.fpu vfp
 3288              	armwave_set_wave_pointer_as_testbuf:
 3289              	.LVL176:
 3290              	.LFB69:
 486:armwave.c     **** }
 487:armwave.c     **** 
 488:armwave.c     **** /*
 489:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 490:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 491:armwave.c     ****  */
 492:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 493:armwave.c     **** {
 3291              		.loc 1 493 1 is_stmt 1 view -0
 3292              		.cfi_startproc
 3293              		@ args = 0, pretend = 0, frame = 0
 3294              		@ frame_needed = 0, uses_anonymous_args = 0
 3295              		@ link register save eliminated.
 494:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3296              		.loc 1 494 5 view .LVU872
 3297              	@ armwave.c:494:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3298              		.loc 1 494 29 is_stmt 0 view .LVU873
 3299 0fe8 24309FE5 		ldr	r3, .L121	@ tmp117,
 3300              	@ armwave.c:494:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3301              		.loc 1 494 7 view .LVU874
 3302 0fec 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 3303 0ff0 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 3304 0ff4 0400003A 		bcc	.L120		@,
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 496:armwave.c     ****         return;
 497:armwave.c     ****     }
 498:armwave.c     **** 
 499:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 3305              		.loc 1 499 5 is_stmt 1 view .LVU875
 3306              	@ armwave.c:499:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3307              		.loc 1 499 111 is_stmt 0 view .LVU876
 3308 0ff8 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 3309              	@ armwave.c:499:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3310              		.loc 1 499 68 view .LVU877
 3311 0ffc 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3312 1000 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 3313              	.LVL177:
 3314              	@ armwave.c:499:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3315              		.loc 1 499 33 view .LVU878
 3316 1004 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 3317              	@ armwave.c:500: }
 500:armwave.c     **** }
 3318              		.loc 1 500 1 view .LVU879
 3319 1008 1EFF2FE1 		bx	lr	@
 3320              	.LVL178:
 3321              	.L120:
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3322              		.loc 1 495 9 is_stmt 1 view .LVU880
 3323 100c 04009FE5 		ldr	r0, .L121+4	@,
 3324              	.LVL179:
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3325              		.loc 1 495 9 is_stmt 0 view .LVU881
 3326 1010 FEFFFFEA 		b	puts		@
 3327              	.LVL180:
 3328              	.L122:
 3329              		.align	2
 3330              	.L121:
 3331 1014 00000000 		.word	g_armwave_state
 3332 1018 24020000 		.word	.LC15
 3333              		.cfi_endproc
 3334              	.LFE69:
 3336              		.align	2
 3337              		.global	armwave_set_wave_pointer_u32
 3338              		.syntax unified
 3339              		.arm
 3340              		.fpu vfp
 3342              	armwave_set_wave_pointer_u32:
 3343              	.LVL181:
 3344              	.LFB70:
 501:armwave.c     **** 
 502:armwave.c     **** /*
 503:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 504:armwave.c     ****  * disjointed buffers in the future.
 505:armwave.c     ****  */
 506:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 507:armwave.c     **** {
 3345              		.loc 1 507 1 is_stmt 1 view -0
 3346              		.cfi_startproc
 3347              		@ args = 0, pretend = 0, frame = 0
 3348              		@ frame_needed = 0, uses_anonymous_args = 0
 508:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3349              		.loc 1 508 5 view .LVU883
 3350 101c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 3351              		.loc 1 508 5 is_stmt 0 view .LVU884
 3352 1020 0200000A 		beq	.L128		@,
 509:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3353              		.loc 1 509 5 is_stmt 1 view .LVU885
 3354              	@ armwave.c:509:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3355              		.loc 1 509 33 is_stmt 0 view .LVU886
 3356 1024 1C309FE5 		ldr	r3, .L129	@ tmp116,
 3357 1028 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 3358 102c 1EFF2FE1 		bx	lr	@
 3359              	.L128:
 508:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3360              		.loc 1 508 5 is_stmt 1 discriminator 1 view .LVU887
 3361              	@ armwave.c:507: {
 507:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3362              		.loc 1 507 1 is_stmt 0 discriminator 1 view .LVU888
 3363 1030 10402DE9 		push	{r4, lr}	@
 3364              		.cfi_def_cfa_offset 8
 3365              		.cfi_offset 4, -8
 3366              		.cfi_offset 14, -4
 3367              	@ armwave.c:508:     assert(wave_buffer_ptr != 0);
 508:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3368              		.loc 1 508 5 discriminator 1 view .LVU889
 3369 1034 7F2FA0E3 		mov	r2, #508	@,
 3370 1038 0C309FE5 		ldr	r3, .L129+4	@,
 3371 103c 0C109FE5 		ldr	r1, .L129+8	@,
 3372 1040 0C009FE5 		ldr	r0, .L129+12	@,
 3373              	.LVL182:
 508:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3374              		.loc 1 508 5 discriminator 1 view .LVU890
 3375 1044 FEFFFFEB 		bl	__assert_fail		@
 3376              	.LVL183:
 3377              	.L130:
 3378              		.align	2
 3379              	.L129:
 3380 1048 00000000 		.word	g_armwave_state
 3381 104c 34000000 		.word	.LANCHOR0+52
 3382 1050 94010000 		.word	.LC10
 3383 1054 60020000 		.word	.LC16
 3384              		.cfi_endproc
 3385              	.LFE70:
 3387              		.align	2
 3388              		.global	armwave_clear_buffer
 3389              		.syntax unified
 3390              		.arm
 3391              		.fpu vfp
 3393              	armwave_clear_buffer:
 3394              	.LVL184:
 3395              	.LFB71:
 510:armwave.c     **** }
 511:armwave.c     **** 
 512:armwave.c     **** /*
 513:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 514:armwave.c     ****  */
 515:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 516:armwave.c     **** {
 3396              		.loc 1 516 1 is_stmt 1 view -0
 3397              		.cfi_startproc
 3398              		@ args = 0, pretend = 0, frame = 0
 3399              		@ frame_needed = 0, uses_anonymous_args = 0
 3400              		@ link register save eliminated.
 517:armwave.c     ****     // Flags ignored, only one buffer cleared
 518:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3401              		.loc 1 518 5 view .LVU892
 3402              	@ armwave.c:518:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3403              		.loc 1 518 58 is_stmt 0 view .LVU893
 3404 1058 0C309FE5 		ldr	r3, .L132	@ tmp114,
 3405              	@ armwave.c:518:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3406              		.loc 1 518 5 view .LVU894
 3407 105c 0010A0E3 		mov	r1, #0	@,
 3408 1060 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 3409 1064 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 3410              	.LVL185:
 3411              		.loc 1 518 5 view .LVU895
 3412 1068 FEFFFFEA 		b	memset		@
 3413              	.LVL186:
 3414              	.L133:
 3415              		.align	2
 3416              	.L132:
 3417 106c 00000000 		.word	g_armwave_state
 3418              		.cfi_endproc
 3419              	.LFE71:
 3421              		.align	2
 3422              		.global	armwave_set_channel_colour
 3423              		.syntax unified
 3424              		.arm
 3425              		.fpu vfp
 3427              	armwave_set_channel_colour:
 3428              	.LVL187:
 3429              	.LFB72:
 519:armwave.c     **** }
 520:armwave.c     **** 
 521:armwave.c     **** /*
 522:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.  
 523:armwave.c     ****  * `I` sets intensity multiplier for all colours.
 524:armwave.c     ****  */
 525:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b, float i)
 526:armwave.c     **** {
 3430              		.loc 1 526 1 is_stmt 1 view -0
 3431              		.cfi_startproc
 3432              		@ args = 0, pretend = 0, frame = 16
 3433              		@ frame_needed = 0, uses_anonymous_args = 0
 3434              		@ link register save eliminated.
 527:armwave.c     ****     // Only 1ch supported for now
 528:armwave.c     ****     switch(ch) {
 3435              		.loc 1 528 5 view .LVU897
 3436              	@ armwave.c:526: {
 526:armwave.c     ****     // Only 1ch supported for now
 3437              		.loc 1 526 1 is_stmt 0 view .LVU898
 3438 1070 10D04DE2 		sub	sp, sp, #16	@,,
 3439              		.cfi_def_cfa_offset 16
 3440              	@ armwave.c:528:     switch(ch) {
 3441              		.loc 1 528 5 view .LVU899
 3442 1074 010050E3 		cmp	r0, #1	@ ch,
 3443              	@ armwave.c:526: {
 526:armwave.c     ****     // Only 1ch supported for now
 3444              		.loc 1 526 1 view .LVU900
 3445 1078 0E008DE9 		stmib	sp, {r1, r2, r3}	@,,,
 3446              	@ armwave.c:528:     switch(ch) {
 3447              		.loc 1 528 5 view .LVU901
 3448 107c 1200001A 		bne	.L134		@,
 529:armwave.c     ****         case 1:
 530:armwave.c     ****             g_armwave_state.ch1_color.r = r * i;
 3449              		.loc 1 530 13 is_stmt 1 view .LVU902
 3450              	@ armwave.c:530:             g_armwave_state.ch1_color.r = r * i;
 3451              		.loc 1 530 45 is_stmt 0 view .LVU903
 3452 1080 901A07EE 		vmov	s15, r1	@ int	@ r,
 3453 1084 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp125, r
 3454              	@ armwave.c:531:             g_armwave_state.ch1_color.g = g * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3455              		.loc 1 531 45 view .LVU904
 3456 1088 902A07EE 		vmov	s15, r2	@ int	@ g,
 3457 108c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp129, g
 3458              	@ armwave.c:532:             g_armwave_state.ch1_color.b = b * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.b = b * i;
 3459              		.loc 1 532 45 view .LVU905
 3460 1090 903A07EE 		vmov	s15, r3	@ int	@ b,
 3461              	@ armwave.c:530:             g_armwave_state.ch1_color.r = r * i;
 530:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3462              		.loc 1 530 41 view .LVU906
 3463 1094 38309FE5 		ldr	r3, .L137	@ tmp124,
 3464              	.LVL188:
 3465              	@ armwave.c:530:             g_armwave_state.ch1_color.r = r * i;
 530:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3466              		.loc 1 530 45 view .LVU907
 3467 1098 806A66EE 		vmul.f32	s13, s13, s0	@ tmp126, tmp125, i
 3468              	@ armwave.c:532:             g_armwave_state.ch1_color.b = b * i;
 3469              		.loc 1 532 45 view .LVU908
 3470 109c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp133, b
 3471              	.LVL189:
 3472              	@ armwave.c:531:             g_armwave_state.ch1_color.g = g * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3473              		.loc 1 531 45 view .LVU909
 3474 10a0 007A27EE 		vmul.f32	s14, s14, s0	@ tmp130, tmp129, i
 3475              	@ armwave.c:530:             g_armwave_state.ch1_color.r = r * i;
 530:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3476              		.loc 1 530 41 view .LVU910
 3477 10a4 E66AFDEE 		vcvt.s32.f32	s13, s13	@ tmp127, tmp126
 3478              	@ armwave.c:532:             g_armwave_state.ch1_color.b = b * i;
 3479              		.loc 1 532 45 view .LVU911
 3480 10a8 807A67EE 		vmul.f32	s15, s15, s0	@ tmp134, tmp133, i
 3481              	@ armwave.c:531:             g_armwave_state.ch1_color.g = g * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3482              		.loc 1 531 41 view .LVU912
 3483 10ac C77ABDEE 		vcvt.s32.f32	s14, s14	@ tmp131, tmp130
 3484              	@ armwave.c:530:             g_armwave_state.ch1_color.r = r * i;
 530:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3485              		.loc 1 530 41 view .LVU913
 3486 10b0 902A16EE 		vmov	r2, s13	@ int	@ tmp127, tmp127
 3487              	.LVL190:
 3488              	@ armwave.c:532:             g_armwave_state.ch1_color.b = b * i;
 3489              		.loc 1 532 41 view .LVU914
 3490 10b4 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp135, tmp134
 3491              	@ armwave.c:530:             g_armwave_state.ch1_color.r = r * i;
 530:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3492              		.loc 1 530 41 view .LVU915
 3493 10b8 B428C3E1 		strh	r2, [r3, #132]	@ movhi	@ tmp127, g_armwave_state.ch1_color.r
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3494              		.loc 1 531 13 is_stmt 1 view .LVU916
 3495              	@ armwave.c:531:             g_armwave_state.ch1_color.g = g * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3496              		.loc 1 531 41 is_stmt 0 view .LVU917
 3497 10bc 102A17EE 		vmov	r2, s14	@ int	@ tmp131, tmp131
 3498 10c0 B628C3E1 		strh	r2, [r3, #134]	@ movhi	@ tmp131, g_armwave_state.ch1_color.g
 3499              		.loc 1 532 13 is_stmt 1 view .LVU918
 3500              	@ armwave.c:532:             g_armwave_state.ch1_color.b = b * i;
 3501              		.loc 1 532 41 is_stmt 0 view .LVU919
 3502 10c4 902A17EE 		vmov	r2, s15	@ int	@ tmp135, tmp135
 3503 10c8 B828C3E1 		strh	r2, [r3, #136]	@ movhi	@ tmp135, g_armwave_state.ch1_color.b
 533:armwave.c     ****             break;
 3504              		.loc 1 533 13 is_stmt 1 view .LVU920
 3505              	.L134:
 3506              	@ armwave.c:535: }
 534:armwave.c     ****     }
 535:armwave.c     **** }
 3507              		.loc 1 535 1 is_stmt 0 view .LVU921
 3508 10cc 10D08DE2 		add	sp, sp, #16	@,,
 3509              		.cfi_def_cfa_offset 0
 3510              		@ sp needed	@
 3511 10d0 1EFF2FE1 		bx	lr	@
 3512              	.L138:
 3513              		.align	2
 3514              	.L137:
 3515 10d4 00000000 		.word	g_armwave_state
 3516              		.cfi_endproc
 3517              	.LFE72:
 3519              		.align	2
 3520              		.global	armwave_set_graticule_colour
 3521              		.syntax unified
 3522              		.arm
 3523              		.fpu vfp
 3525              	armwave_set_graticule_colour:
 3526              	.LVL191:
 3527              	.LFB73:
 536:armwave.c     **** 
 537:armwave.c     **** /*
 538:armwave.c     ****  * Set the graticule colour.
 539:armwave.c     ****  */
 540:armwave.c     **** void armwave_set_graticule_colour(int r, int g, int b)
 541:armwave.c     **** {
 3528              		.loc 1 541 1 is_stmt 1 view -0
 3529              		.cfi_startproc
 3530              		@ args = 0, pretend = 0, frame = 0
 3531              		@ frame_needed = 0, uses_anonymous_args = 0
 542:armwave.c     ****     g_grat_colour.red = r * 255;
 3532              		.loc 1 542 5 view .LVU923
 3533              	@ armwave.c:542:     g_grat_colour.red = r * 255;
 3534              		.loc 1 542 23 is_stmt 0 view .LVU924
 3535 10d8 3C309FE5 		ldr	r3, .L141	@ tmp121,
 3536              	@ armwave.c:541: {
 541:armwave.c     ****     g_grat_colour.red = r * 255;
 3537              		.loc 1 541 1 view .LVU925
 3538 10dc 70402DE9 		push	{r4, r5, r6, lr}	@
 3539              		.cfi_def_cfa_offset 16
 3540              		.cfi_offset 4, -16
 3541              		.cfi_offset 5, -12
 3542              		.cfi_offset 6, -8
 3543              		.cfi_offset 14, -4
 3544              	@ armwave.c:542:     g_grat_colour.red = r * 255;
 3545              		.loc 1 542 23 view .LVU926
 3546 10e0 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 3547              	@ armwave.c:546:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 543:armwave.c     ****     g_grat_colour.green = g * 255;
 544:armwave.c     ****     g_grat_colour.blue = b * 255;
 545:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 546:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3548              		.loc 1 546 5 view .LVU927
 3549 10e4 34609FE5 		ldr	r6, .L141+4	@ tmp143,
 3550 10e8 34509FE5 		ldr	r5, .L141+8	@ tmp145,
 3551              	@ armwave.c:543:     g_grat_colour.green = g * 255;
 543:armwave.c     ****     g_grat_colour.green = g * 255;
 3552              		.loc 1 543 25 view .LVU928
 3553 10ec 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 3554              	@ armwave.c:544:     g_grat_colour.blue = b * 255;
 544:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3555              		.loc 1 544 24 view .LVU929
 3556 10f0 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 3557              	@ armwave.c:542:     g_grat_colour.red = r * 255;
 542:armwave.c     ****     g_grat_colour.green = g * 255;
 3558              		.loc 1 542 23 view .LVU930
 3559 10f4 B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_colour.red
 543:armwave.c     ****     g_grat_colour.green = g * 255;
 3560              		.loc 1 543 5 is_stmt 1 view .LVU931
 3561              	@ armwave.c:545:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 545:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3562              		.loc 1 545 25 is_stmt 0 view .LVU932
 3563 10f8 07C0A0E3 		mov	ip, #7	@ tmp140,
 3564              	@ armwave.c:546:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3565              		.loc 1 546 5 view .LVU933
 3566 10fc 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 3567              	.LVL192:
 3568              		.loc 1 546 5 view .LVU934
 3569 1100 000095E5 		ldr	r0, [r5]	@, g_dpy
 3570              	.LVL193:
 3571              	@ armwave.c:543:     g_grat_colour.green = g * 255;
 543:armwave.c     ****     g_grat_colour.blue = b * 255;
 3572              		.loc 1 543 25 view .LVU935
 3573 1104 B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_colour.green
 544:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3574              		.loc 1 544 5 is_stmt 1 view .LVU936
 3575              	@ armwave.c:544:     g_grat_colour.blue = b * 255;
 544:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3576              		.loc 1 544 24 is_stmt 0 view .LVU937
 3577 1108 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_colour.blue
 545:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3578              		.loc 1 545 5 is_stmt 1 view .LVU938
 3579              	@ armwave.c:545:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 545:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3580              		.loc 1 545 25 is_stmt 0 view .LVU939
 3581 110c 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_colour.flags
 3582              		.loc 1 546 5 is_stmt 1 view .LVU940
 3583 1110 0320A0E1 		mov	r2, r3	@, tmp121
 3584              	.LVL194:
 3585              	@ armwave.c:547: }
 547:armwave.c     **** }
 3586              		.loc 1 547 1 is_stmt 0 view .LVU941
 3587 1114 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3588              		.cfi_restore 14
 3589              		.cfi_restore 6
 3590              		.cfi_restore 5
 3591              		.cfi_restore 4
 3592              		.cfi_def_cfa_offset 0
 3593              	@ armwave.c:546:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 546:armwave.c     **** }
 3594              		.loc 1 546 5 view .LVU942
 3595 1118 FEFFFFEA 		b	XAllocColor		@
 3596              	.LVL195:
 3597              	.L142:
 3598              		.align	2
 3599              	.L141:
 3600 111c 00000000 		.word	g_grat_colour
 3601 1120 00000000 		.word	g_xswa
 3602 1124 00000000 		.word	g_dpy
 3603              		.cfi_endproc
 3604              	.LFE73:
 3606              		.align	2
 3607              		.global	armwave_set_graticule_subcolour
 3608              		.syntax unified
 3609              		.arm
 3610              		.fpu vfp
 3612              	armwave_set_graticule_subcolour:
 3613              	.LVL196:
 3614              	.LFB74:
 548:armwave.c     **** 
 549:armwave.c     **** /*
 550:armwave.c     ****  * Set the graticule sub colour.
 551:armwave.c     ****  */
 552:armwave.c     **** void armwave_set_graticule_subcolour(int r, int g, int b)
 553:armwave.c     **** {
 3615              		.loc 1 553 1 is_stmt 1 view -0
 3616              		.cfi_startproc
 3617              		@ args = 0, pretend = 0, frame = 0
 3618              		@ frame_needed = 0, uses_anonymous_args = 0
 554:armwave.c     ****     g_grat_subcolour.red = r * 255;
 3619              		.loc 1 554 5 view .LVU944
 3620              	@ armwave.c:554:     g_grat_subcolour.red = r * 255;
 3621              		.loc 1 554 26 is_stmt 0 view .LVU945
 3622 1128 3C309FE5 		ldr	r3, .L145	@ tmp121,
 3623              	@ armwave.c:553: {
 553:armwave.c     ****     g_grat_subcolour.red = r * 255;
 3624              		.loc 1 553 1 view .LVU946
 3625 112c 70402DE9 		push	{r4, r5, r6, lr}	@
 3626              		.cfi_def_cfa_offset 16
 3627              		.cfi_offset 4, -16
 3628              		.cfi_offset 5, -12
 3629              		.cfi_offset 6, -8
 3630              		.cfi_offset 14, -4
 3631              	@ armwave.c:554:     g_grat_subcolour.red = r * 255;
 3632              		.loc 1 554 26 view .LVU947
 3633 1130 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 3634              	@ armwave.c:558:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 555:armwave.c     ****     g_grat_subcolour.green = g * 255;
 556:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 557:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 558:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3635              		.loc 1 558 5 view .LVU948
 3636 1134 34609FE5 		ldr	r6, .L145+4	@ tmp143,
 3637 1138 34509FE5 		ldr	r5, .L145+8	@ tmp145,
 3638              	@ armwave.c:555:     g_grat_subcolour.green = g * 255;
 555:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3639              		.loc 1 555 28 view .LVU949
 3640 113c 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 3641              	@ armwave.c:556:     g_grat_subcolour.blue = b * 255;
 556:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3642              		.loc 1 556 27 view .LVU950
 3643 1140 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 3644              	@ armwave.c:554:     g_grat_subcolour.red = r * 255;
 554:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3645              		.loc 1 554 26 view .LVU951
 3646 1144 B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_subcolour.red
 555:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3647              		.loc 1 555 5 is_stmt 1 view .LVU952
 3648              	@ armwave.c:557:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 557:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3649              		.loc 1 557 28 is_stmt 0 view .LVU953
 3650 1148 07C0A0E3 		mov	ip, #7	@ tmp140,
 3651              	@ armwave.c:558:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3652              		.loc 1 558 5 view .LVU954
 3653 114c 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 3654              	.LVL197:
 3655              		.loc 1 558 5 view .LVU955
 3656 1150 000095E5 		ldr	r0, [r5]	@, g_dpy
 3657              	.LVL198:
 3658              	@ armwave.c:555:     g_grat_subcolour.green = g * 255;
 555:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 3659              		.loc 1 555 28 view .LVU956
 3660 1154 B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_subcolour.green
 556:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3661              		.loc 1 556 5 is_stmt 1 view .LVU957
 3662              	@ armwave.c:556:     g_grat_subcolour.blue = b * 255;
 556:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3663              		.loc 1 556 27 is_stmt 0 view .LVU958
 3664 1158 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_subcolour.blue
 557:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3665              		.loc 1 557 5 is_stmt 1 view .LVU959
 3666              	@ armwave.c:557:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 557:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3667              		.loc 1 557 28 is_stmt 0 view .LVU960
 3668 115c 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_subcolour.flags
 3669              		.loc 1 558 5 is_stmt 1 view .LVU961
 3670 1160 0320A0E1 		mov	r2, r3	@, tmp121
 3671              	.LVL199:
 3672              	@ armwave.c:559: }
 559:armwave.c     **** }
 3673              		.loc 1 559 1 is_stmt 0 view .LVU962
 3674 1164 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3675              		.cfi_restore 14
 3676              		.cfi_restore 6
 3677              		.cfi_restore 5
 3678              		.cfi_restore 4
 3679              		.cfi_def_cfa_offset 0
 3680              	@ armwave.c:558:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 558:armwave.c     **** }
 3681              		.loc 1 558 5 view .LVU963
 3682 1168 FEFFFFEA 		b	XAllocColor		@
 3683              	.LVL200:
 3684              	.L146:
 3685              		.align	2
 3686              	.L145:
 3687 116c 00000000 		.word	g_grat_subcolour
 3688 1170 00000000 		.word	g_xswa
 3689 1174 00000000 		.word	g_dpy
 3690              		.cfi_endproc
 3691              	.LFE74:
 3693              		.align	2
 3694              		.global	armwave_set_graticule_dims
 3695              		.syntax unified
 3696              		.arm
 3697              		.fpu vfp
 3699              	armwave_set_graticule_dims:
 3700              	.LVL201:
 3701              	.LFB75:
 560:armwave.c     **** 
 561:armwave.c     **** /*
 562:armwave.c     ****  * Set the graticule dimensions.
 563:armwave.c     ****  */
 564:armwave.c     **** void armwave_set_graticule_dims(int marg, int n_hdiv, int n_vdiv, int n_subhdiv, int n_subvdiv, flo
 565:armwave.c     **** {
 3702              		.loc 1 565 1 is_stmt 1 view -0
 3703              		.cfi_startproc
 3704              		@ args = 4, pretend = 0, frame = 0
 3705              		@ frame_needed = 0, uses_anonymous_args = 0
 566:armwave.c     ****     if(marg > 0) {
 3706              		.loc 1 566 5 view .LVU965
 3707              	@ armwave.c:566:     if(marg > 0) {
 3708              		.loc 1 566 7 is_stmt 0 view .LVU966
 3709 1178 000050E3 		cmp	r0, #0	@ marg
 3710              	@ armwave.c:565: {
 565:armwave.c     ****     if(marg > 0) {
 3711              		.loc 1 565 1 view .LVU967
 3712 117c 04E02DE5 		str	lr, [sp, #-4]!	@,
 3713              		.cfi_def_cfa_offset 4
 3714              		.cfi_offset 14, -4
 3715              	@ armwave.c:567:         g_armwave_state.frame_margin = marg;
 567:armwave.c     ****         g_armwave_state.frame_margin = marg;
 3716              		.loc 1 567 38 view .LVU968
 3717 1180 58E09FC5 		ldrgt	lr, .L157	@ tmp120,
 3718              	@ armwave.c:565: {
 565:armwave.c     ****     if(marg > 0) {
 3719              		.loc 1 565 1 view .LVU969
 3720 1184 04C09DE5 		ldr	ip, [sp, #4]	@ n_subvdiv, n_subvdiv
 3721              		.loc 1 567 9 is_stmt 1 view .LVU970
 3722              	@ armwave.c:567:         g_armwave_state.frame_margin = marg;
 3723              		.loc 1 567 38 is_stmt 0 view .LVU971
 3724 1188 58008EC5 		strgt	r0, [lr, #88]	@ marg, g_armwave_state.frame_margin
 568:armwave.c     ****     }
 569:armwave.c     ****     
 570:armwave.c     ****     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3725              		.loc 1 570 5 is_stmt 1 view .LVU972
 3726              	@ armwave.c:570:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3727              		.loc 1 570 7 is_stmt 0 view .LVU973
 3728 118c 000051E3 		cmp	r1, #0	@ n_hdiv,
 3729 1190 020000DA 		ble	.L149		@,
 3730              	@ armwave.c:570:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3731              		.loc 1 570 19 discriminator 1 view .LVU974
 3732 1194 010011E3 		tst	r1, #1	@ n_hdiv,
 571:armwave.c     ****         g_armwave_state.n_hdiv = n_hdiv;
 3733              		.loc 1 571 9 is_stmt 1 discriminator 1 view .LVU975
 3734              	@ armwave.c:571:         g_armwave_state.n_hdiv = n_hdiv;
 3735              		.loc 1 571 32 is_stmt 0 discriminator 1 view .LVU976
 3736 1198 40009F05 		ldreq	r0, .L157	@ tmp122,
 3737              	.LVL202:
 3738              		.loc 1 571 32 discriminator 1 view .LVU977
 3739 119c 5C108005 		streq	r1, [r0, #92]	@ n_hdiv, g_armwave_state.n_hdiv
 3740              	.L149:
 572:armwave.c     ****     }
 573:armwave.c     ****     
 574:armwave.c     ****     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3741              		.loc 1 574 5 is_stmt 1 view .LVU978
 3742              	@ armwave.c:574:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3743              		.loc 1 574 7 is_stmt 0 view .LVU979
 3744 11a0 000052E3 		cmp	r2, #0	@ n_vdiv,
 3745 11a4 020000DA 		ble	.L150		@,
 3746              	@ armwave.c:574:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3747              		.loc 1 574 19 discriminator 1 view .LVU980
 3748 11a8 010012E3 		tst	r2, #1	@ n_vdiv,
 575:armwave.c     ****         g_armwave_state.n_vdiv = n_vdiv;
 3749              		.loc 1 575 9 is_stmt 1 discriminator 1 view .LVU981
 3750              	@ armwave.c:575:         g_armwave_state.n_vdiv = n_vdiv;
 3751              		.loc 1 575 32 is_stmt 0 discriminator 1 view .LVU982
 3752 11ac 2C109F05 		ldreq	r1, .L157	@ tmp124,
 3753              	.LVL203:
 3754              		.loc 1 575 32 discriminator 1 view .LVU983
 3755 11b0 60208105 		streq	r2, [r1, #96]	@ n_vdiv, g_armwave_state.n_vdiv
 3756              	.L150:
 576:armwave.c     ****     }
 577:armwave.c     ****     
 578:armwave.c     ****     if(n_subhdiv > 0) {
 3757              		.loc 1 578 5 is_stmt 1 view .LVU984
 3758              	@ armwave.c:578:     if(n_subhdiv > 0) {
 3759              		.loc 1 578 7 is_stmt 0 view .LVU985
 3760 11b4 000053E3 		cmp	r3, #0	@ n_subhdiv,
 579:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3761              		.loc 1 579 9 is_stmt 1 view .LVU986
 3762              	@ armwave.c:586:     if(subdiv_frac > 0) {
 580:armwave.c     ****     }
 581:armwave.c     ****     
 582:armwave.c     ****     if(n_subvdiv > 0) {
 583:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 584:armwave.c     ****     }
 585:armwave.c     ****     
 586:armwave.c     ****     if(subdiv_frac > 0) {
 3763              		.loc 1 586 7 is_stmt 0 view .LVU987
 3764 11b8 C00AB5EE 		vcmpe.f32	s0, #0	@ subdiv_frac
 3765              	@ armwave.c:579:         g_armwave_state.n_subhdiv = n_subhdiv;
 579:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3766              		.loc 1 579 35 view .LVU988
 3767 11bc 1C209FC5 		ldrgt	r2, .L157	@ tmp125,
 3768              	.LVL204:
 579:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3769              		.loc 1 579 35 view .LVU989
 3770 11c0 643082C5 		strgt	r3, [r2, #100]	@ n_subhdiv, g_armwave_state.n_subhdiv
 582:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 3771              		.loc 1 582 5 is_stmt 1 view .LVU990
 3772              	@ armwave.c:582:     if(n_subvdiv > 0) {
 582:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 3773              		.loc 1 582 7 is_stmt 0 view .LVU991
 3774 11c4 00005CE3 		cmp	ip, #0	@ n_subvdiv,
 583:armwave.c     ****     }
 3775              		.loc 1 583 9 is_stmt 1 view .LVU992
 3776              	@ armwave.c:583:         g_armwave_state.n_subvdiv = n_subvdiv;
 583:armwave.c     ****     }
 3777              		.loc 1 583 35 is_stmt 0 view .LVU993
 3778 11c8 10309FC5 		ldrgt	r3, .L157	@ tmp126,
 3779              	.LVL205:
 583:armwave.c     ****     }
 3780              		.loc 1 583 35 view .LVU994
 3781 11cc 68C083C5 		strgt	ip, [r3, #104]	@ n_subvdiv, g_armwave_state.n_subvdiv
 3782              		.loc 1 586 5 is_stmt 1 view .LVU995
 3783              	@ armwave.c:586:     if(subdiv_frac > 0) {
 3784              		.loc 1 586 7 is_stmt 0 view .LVU996
 3785 11d0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 587:armwave.c     ****         g_armwave_state.subdiv_frac = subdiv_frac;
 3786              		.loc 1 587 9 is_stmt 1 view .LVU997
 3787              	@ armwave.c:587:         g_armwave_state.subdiv_frac = subdiv_frac;
 3788              		.loc 1 587 37 is_stmt 0 view .LVU998
 3789 11d4 04309FC5 		ldrgt	r3, .L157	@ tmp128,
 3790 11d8 1B0A83CD 		vstrgt.32	s0, [r3, #108]	@ subdiv_frac, g_armwave_state.subdiv_frac
 3791              	@ armwave.c:589: }
 588:armwave.c     ****     }
 589:armwave.c     **** }
 3792              		.loc 1 589 1 view .LVU999
 3793 11dc 04F09DE4 		ldr	pc, [sp], #4	@
 3794              	.L158:
 3795              		.align	2
 3796              	.L157:
 3797 11e0 00000000 		.word	g_armwave_state
 3798              		.cfi_endproc
 3799              	.LFE75:
 3801              		.align	2
 3802              		.global	armwave_test_buffer_alloc
 3803              		.syntax unified
 3804              		.arm
 3805              		.fpu vfp
 3807              	armwave_test_buffer_alloc:
 3808              	.LVL206:
 3809              	.LFB76:
 590:armwave.c     **** 
 591:armwave.c     **** /*
 592:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 593:armwave.c     ****  */
 594:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 595:armwave.c     **** {
 3810              		.loc 1 595 1 is_stmt 1 view -0
 3811              		.cfi_startproc
 3812              		@ args = 0, pretend = 0, frame = 0
 3813              		@ frame_needed = 0, uses_anonymous_args = 0
 596:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3814              		.loc 1 596 5 view .LVU1001
 3815              	@ armwave.c:595: {
 595:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3816              		.loc 1 595 1 is_stmt 0 view .LVU1002
 3817 11e4 70402DE9 		push	{r4, r5, r6, lr}	@
 3818              		.cfi_def_cfa_offset 16
 3819              		.cfi_offset 4, -16
 3820              		.cfi_offset 5, -12
 3821              		.cfi_offset 6, -8
 3822              		.cfi_offset 14, -4
 3823              	@ armwave.c:595: {
 595:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3824              		.loc 1 595 1 view .LVU1003
 3825 11e8 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3826              	@ armwave.c:596:     if(g_armwave_state.test_wave_buffer != NULL) {
 3827              		.loc 1 596 23 view .LVU1004
 3828 11ec 44409FE5 		ldr	r4, .L166	@ tmp128,
 3829 11f0 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3830              	.LVL207:
 3831              	@ armwave.c:596:     if(g_armwave_state.test_wave_buffer != NULL) {
 3832              		.loc 1 596 7 view .LVU1005
 3833 11f4 000050E3 		cmp	r0, #0	@ _1,
 3834 11f8 0000000A 		beq	.L160		@,
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3835              		.loc 1 597 9 is_stmt 1 view .LVU1006
 3836 11fc FEFFFFEB 		bl	free		@
 3837              	.LVL208:
 3838              	.L160:
 598:armwave.c     ****     }
 599:armwave.c     **** 
 600:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 601:armwave.c     **** 
 602:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3839              		.loc 1 602 5 view .LVU1007
 3840              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3841              		.loc 1 602 75 is_stmt 0 view .LVU1008
 3842 1200 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3843 1204 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3844              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3845              		.loc 1 602 40 view .LVU1009
 3846 1208 0610A0E1 		mov	r1, r6	@, nsets
 3847              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3848              		.loc 1 602 75 view .LVU1010
 3849 120c 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3850              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3851              		.loc 1 602 40 view .LVU1011
 3852 1210 0500A0E1 		mov	r0, r5	@, _4
 3853 1214 FEFFFFEB 		bl	calloc		@
 3854              	.LVL209:
 3855              	@ armwave.c:604:     if(g_armwave_state.test_wave_buffer == NULL) {
 603:armwave.c     **** 
 604:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3856              		.loc 1 604 7 view .LVU1012
 3857 1218 000050E3 		cmp	r0, #0	@ tmp124,
 3858              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 602:armwave.c     **** 
 3859              		.loc 1 602 38 view .LVU1013
 3860 121c 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3861              		.loc 1 604 5 is_stmt 1 view .LVU1014
 3862              	@ armwave.c:604:     if(g_armwave_state.test_wave_buffer == NULL) {
 3863              		.loc 1 604 7 is_stmt 0 view .LVU1015
 3864 1220 7080BD18 		popne	{r4, r5, r6, pc}	@
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3865              		.loc 1 605 9 is_stmt 1 view .LVU1016
 3866 1224 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3867 1228 0620A0E1 		mov	r2, r6	@, nsets
 3868 122c 08009FE5 		ldr	r0, .L166+4	@,
 3869              	@ armwave.c:609: }
 606:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 607:armwave.c     ****         return;
 608:armwave.c     ****     }
 609:armwave.c     **** }
 3870              		.loc 1 609 1 is_stmt 0 view .LVU1017
 3871 1230 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3872              		.cfi_restore 14
 3873              		.cfi_restore 6
 3874              		.cfi_restore 5
 3875              		.cfi_restore 4
 3876              		.cfi_def_cfa_offset 0
 3877              	.LVL210:
 3878              	@ armwave.c:605:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3879              		.loc 1 605 9 view .LVU1018
 3880 1234 FEFFFFEA 		b	printf		@
 3881              	.LVL211:
 3882              	.L167:
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3883              		.loc 1 605 9 view .LVU1019
 3884              		.align	2
 3885              	.L166:
 3886 1238 00000000 		.word	g_armwave_state
 3887 123c 78020000 		.word	.LC17
 3888              		.cfi_endproc
 3889              	.LFE76:
 3891              		.align	2
 3892              		.global	armwave_test_create_am_sine
 3893              		.syntax unified
 3894              		.arm
 3895              		.fpu vfp
 3897              	armwave_test_create_am_sine:
 3898              	.LVL212:
 3899              	.LFB77:
 610:armwave.c     **** 
 611:armwave.c     **** /*
 612:armwave.c     ****  * Make a test AM waveform for render tests.
 613:armwave.c     ****  *
 614:armwave.c     ****  * @param   mod                     modulation depth
 615:armwave.c     ****  * @param   noise_fraction          typically 1e-6`
 616:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 617:armwave.c     ****  */
 618:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 619:armwave.c     **** {
 3900              		.loc 1 619 1 is_stmt 1 view -0
 3901              		.cfi_startproc
 3902              		@ args = 0, pretend = 0, frame = 8
 3903              		@ frame_needed = 0, uses_anonymous_args = 0
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 3904              		.loc 1 620 5 view .LVU1021
 621:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3905              		.loc 1 621 5 view .LVU1022
 3906              	@ armwave.c:619: {
 619:armwave.c     ****     float v, noise, xnoise, mod_val;
 3907              		.loc 1 619 1 is_stmt 0 view .LVU1023
 3908 1240 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3909              		.cfi_def_cfa_offset 36
 3910              		.cfi_offset 4, -36
 3911              		.cfi_offset 5, -32
 3912              		.cfi_offset 6, -28
 3913              		.cfi_offset 7, -24
 3914              		.cfi_offset 8, -20
 3915              		.cfi_offset 9, -16
 3916              		.cfi_offset 10, -12
 3917              		.cfi_offset 11, -8
 3918              		.cfi_offset 14, -4
 3919              	@ armwave.c:621:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3920              		.loc 1 621 38 view .LVU1024
 3921 1244 857A9FED 		vldr.32	s14, .L199+16	@ tmp185,
 3922              	@ armwave.c:621:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3923              		.loc 1 621 55 view .LVU1025
 3924 1248 28529FE5 		ldr	r5, .L199+40	@ tmp260,
 3925              	@ armwave.c:619: {
 619:armwave.c     ****     float v, noise, xnoise, mod_val;
 3926              		.loc 1 619 1 view .LVU1026
 3927 124c 108B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14, d15}	@
 3928              		.cfi_def_cfa_offset 100
 3929              		.cfi_offset 80, -100
 3930              		.cfi_offset 81, -96
 3931              		.cfi_offset 82, -92
 3932              		.cfi_offset 83, -88
 3933              		.cfi_offset 84, -84
 3934              		.cfi_offset 85, -80
 3935              		.cfi_offset 86, -76
 3936              		.cfi_offset 87, -72
 3937              		.cfi_offset 88, -68
 3938              		.cfi_offset 89, -64
 3939              		.cfi_offset 90, -60
 3940              		.cfi_offset 91, -56
 3941              		.cfi_offset 92, -52
 3942              		.cfi_offset 93, -48
 3943              		.cfi_offset 94, -44
 3944              		.cfi_offset 95, -40
 3945 1250 0090A0E1 		mov	r9, r0	@ sets, sets
 3946              	@ armwave.c:621:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3947              		.loc 1 621 38 view .LVU1027
 3948 1254 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp272, g_armwave_state.waves
 3949              	@ armwave.c:625:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 622:armwave.c     ****     int s, set_offset = 0;
 623:armwave.c     ****     int w, x;
 624:armwave.c     **** 
 625:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3950              		.loc 1 625 70 view .LVU1028
 3951 1258 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3952 125c 382095E5 		ldr	r2, [r5, #56]	@ tmp273, g_armwave_state.waves
 3953              	.LBB118:
 3954              	.LBB119:
 3955              	@ armwave.c:596:     if(g_armwave_state.test_wave_buffer != NULL) {
 596:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3956              		.loc 1 596 23 view .LVU1029
 3957 1260 180095E5 		ldr	r0, [r5, #24]	@ _87, g_armwave_state.test_wave_buffer
 3958              	.LVL213:
 596:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3959              		.loc 1 596 23 view .LVU1030
 3960              	.LBE119:
 3961              	.LBE118:
 3962              	@ armwave.c:621:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 621:armwave.c     ****     int s, set_offset = 0;
 3963              		.loc 1 621 38 view .LVU1031
 3964 1264 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp183, tmp272
 3965              	@ armwave.c:625:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3966              		.loc 1 625 70 view .LVU1032
 3967 1268 920303E0 		mul	r3, r2, r3	@ tmp188, tmp273, g_armwave_state.wave_stride
 3968              	@ armwave.c:619: {
 619:armwave.c     ****     float v, noise, xnoise, mod_val;
 3969              		.loc 1 619 1 view .LVU1033
 3970 126c 60DAF0EE 		vmov.f32	s27, s1	@ noise_fraction, noise_fraction
 3971              	.LBB123:
 3972              	.LBB120:
 3973              	@ armwave.c:596:     if(g_armwave_state.test_wave_buffer != NULL) {
 596:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3974              		.loc 1 596 7 view .LVU1034
 3975 1270 000050E3 		cmp	r0, #0	@ _87,
 3976              	.LBE120:
 3977              	.LBE123:
 3978              	@ armwave.c:619: {
 619:armwave.c     ****     float v, noise, xnoise, mod_val;
 3979              		.loc 1 619 1 view .LVU1035
 3980 1274 0CD04DE2 		sub	sp, sp, #12	@,,
 3981              		.cfi_def_cfa_offset 112
 3982              	@ armwave.c:626:     g_armwave_state.test_wave_buffer_nsets = sets;
 626:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3983              		.loc 1 626 44 view .LVU1036
 3984 1278 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3985              	@ armwave.c:625:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 625:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3986              		.loc 1 625 45 view .LVU1037
 3987 127c 1C3085E5 		str	r3, [r5, #28]	@ tmp188, g_armwave_state.test_wave_buffer_stride
 3988              	@ armwave.c:621:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 621:armwave.c     ****     int s, set_offset = 0;
 3989              		.loc 1 621 38 view .LVU1038
 3990 1280 27EAC7EE 		vdiv.f32	s29, s14, s15	@ tmp184, tmp185, tmp183
 3991              	@ armwave.c:621:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 621:armwave.c     ****     int s, set_offset = 0;
 3992              		.loc 1 621 11 view .LVU1039
 3993 1284 80EA6EEE 		vmul.f32	s29, s29, s0	@ _1_waves_mod, tmp184, mod
 3994              	.LVL214:
 622:armwave.c     ****     int w, x;
 3995              		.loc 1 622 5 is_stmt 1 view .LVU1040
 623:armwave.c     **** 
 3996              		.loc 1 623 5 view .LVU1041
 625:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3997              		.loc 1 625 5 view .LVU1042
 3998              		.loc 1 626 5 view .LVU1043
 627:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3999              		.loc 1 627 5 view .LVU1044
 4000              	.LBB124:
 4001              	.LBI118:
 594:armwave.c     **** {
 4002              		.loc 1 594 6 view .LVU1045
 4003              	.LBB121:
 596:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 4004              		.loc 1 596 5 view .LVU1046
 4005              	@ armwave.c:596:     if(g_armwave_state.test_wave_buffer != NULL) {
 596:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 4006              		.loc 1 596 7 is_stmt 0 view .LVU1047
 4007 1288 0000000A 		beq	.L169		@,
 597:armwave.c     ****     }
 4008              		.loc 1 597 9 is_stmt 1 view .LVU1048
 4009 128c FEFFFFEB 		bl	free		@
 4010              	.LVL215:
 4011              	.L169:
 602:armwave.c     **** 
 4012              		.loc 1 602 5 view .LVU1049
 4013              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 602:armwave.c     **** 
 4014              		.loc 1 602 75 is_stmt 0 view .LVU1050
 4015 1290 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 4016 1294 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 4017              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 602:armwave.c     **** 
 4018              		.loc 1 602 40 view .LVU1051
 4019 1298 0910A0E1 		mov	r1, r9	@, sets
 4020              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 602:armwave.c     **** 
 4021              		.loc 1 602 75 view .LVU1052
 4022 129c 940304E0 		mul	r4, r4, r3	@ _90, g_armwave_state.waves_max, g_armwave_state.wave_length
 4023              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 602:armwave.c     **** 
 4024              		.loc 1 602 40 view .LVU1053
 4025 12a0 0400A0E1 		mov	r0, r4	@, _90
 4026 12a4 FEFFFFEB 		bl	calloc		@
 4027              	.LVL216:
 4028              	@ armwave.c:604:     if(g_armwave_state.test_wave_buffer == NULL) {
 604:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4029              		.loc 1 604 7 view .LVU1054
 4030 12a8 000050E3 		cmp	r0, #0	@ tmp196,
 4031              	@ armwave.c:602:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 602:armwave.c     **** 
 4032              		.loc 1 602 38 view .LVU1055
 4033 12ac 180085E5 		str	r0, [r5, #24]	@ tmp196, g_armwave_state.test_wave_buffer
 604:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4034              		.loc 1 604 5 is_stmt 1 view .LVU1056
 4035              	@ armwave.c:604:     if(g_armwave_state.test_wave_buffer == NULL) {
 604:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4036              		.loc 1 604 7 is_stmt 0 view .LVU1057
 4037 12b0 6000000A 		beq	.L198		@,
 4038              	.L170:
 4039              	.LVL217:
 604:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4040              		.loc 1 604 7 view .LVU1058
 4041              	.LBE121:
 4042              	.LBE124:
 4043              	@ armwave.c:629:     for(s = 0; s < sets; s++) {
 628:armwave.c     **** 
 629:armwave.c     ****     for(s = 0; s < sets; s++) {
 4044              		.loc 1 629 5 discriminator 1 view .LVU1059
 4045 12b4 000059E3 		cmp	r9, #0	@ sets,
 4046 12b8 5B0000DA 		ble	.L168		@,
 4047              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 630:armwave.c     ****         printf("Calculating test set %d\n", s);
 631:armwave.c     ****     
 632:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 634:armwave.c     ****             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 4048              		.loc 1 634 63 view .LVU1060
 4049 12bc 63BB9FED 		vldr.64	d11, .L199	@ tmp267,
 4050              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 4051              		.loc 1 634 28 view .LVU1061
 4052 12c0 64AB9FED 		vldr.64	d10, .L199+8	@ tmp268,
 4053              	@ armwave.c:651:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 635:armwave.c     **** 
 636:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 639:armwave.c     ****                 noise *= noise;
 640:armwave.c     ****                 noise *= noise;
 641:armwave.c     **** 
 642:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 643:armwave.c     ****                     noise = -noise;
 644:armwave.c     **** 
 645:armwave.c     ****                 noise += 1.0f;
 646:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 648:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 650:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 651:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 4054              		.loc 1 651 104 view .LVU1062
 4055 12c4 66EA9FED 		vldr.32	s28, .L199+20	@ tmp269,
 4056              	@ armwave.c:629:     for(s = 0; s < sets; s++) {
 629:armwave.c     ****         printf("Calculating test set %d\n", s);
 4057              		.loc 1 629 5 view .LVU1063
 4058 12c8 0070A0E3 		mov	r7, #0	@ set_offset,
 4059              	@ armwave.c:630:         printf("Calculating test set %d\n", s);
 630:armwave.c     ****         printf("Calculating test set %d\n", s);
 4060              		.loc 1 630 9 view .LVU1064
 4061 12cc A8A19FE5 		ldr	r10, .L199+44	@ tmp266,
 4062              	@ armwave.c:629:     for(s = 0; s < sets; s++) {
 629:armwave.c     ****         printf("Calculating test set %d\n", s);
 4063              		.loc 1 629 5 view .LVU1065
 4064 12d0 0780A0E1 		mov	r8, r7	@ s, set_offset
 4065              	.LVL218:
 4066              	.L171:
 630:armwave.c     ****         printf("Calculating test set %d\n", s);
 4067              		.loc 1 630 9 is_stmt 1 view .LVU1066
 4068 12d4 0810A0E1 		mov	r1, r8	@, s
 4069 12d8 0A00A0E1 		mov	r0, r10	@, tmp266
 4070 12dc FEFFFFEB 		bl	printf		@
 4071              	.LVL219:
 632:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4072              		.loc 1 632 9 view .LVU1067
 4073              	@ armwave.c:632:         for(w = 0; w < g_armwave_state.waves; w++) {
 632:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4074              		.loc 1 632 39 is_stmt 0 view .LVU1068
 4075 12e0 384095E5 		ldr	r4, [r5, #56]	@ prephitmp_135, g_armwave_state.waves
 4076              	@ armwave.c:632:         for(w = 0; w < g_armwave_state.waves; w++) {
 632:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4077              		.loc 1 632 9 view .LVU1069
 4078 12e4 000054E3 		cmp	r4, #0	@ prephitmp_135,
 4079 12e8 4A0000DA 		ble	.L172		@,
 4080              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 634:armwave.c     **** 
 4081              		.loc 1 634 54 view .LVU1070
 4082 12ec 5D8ADFED 		vldr.32	s17, .L199+24	@ tmp206,
 4083              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4084              		.loc 1 648 45 view .LVU1071
 4085 12f0 5A8A9FED 		vldr.32	s16, .L199+16	@ tmp263,
 4086 12f4 4CB095E5 		ldr	fp, [r5, #76]	@ prephitmp_139, g_armwave_state.wave_length
 4087              	@ armwave.c:632:         for(w = 0; w < g_armwave_state.waves; w++) {
 632:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4088              		.loc 1 632 15 view .LVU1072
 4089 12f8 0060A0E3 		mov	r6, #0	@ w,
 4090              	.LVL220:
 4091              	.L179:
 634:armwave.c     **** 
 4092              		.loc 1 634 13 is_stmt 1 view .LVU1073
 4093              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 634:armwave.c     **** 
 4094              		.loc 1 634 49 is_stmt 0 view .LVU1074
 4095 12fc 906A07EE 		vmov	s15, r6	@ int	@ w, w
 4096 1300 E70AB8EE 		vcvt.f32.s32	s0, s15	@ tmp203, w
 4097 1304 2E0A20EE 		vmul.f32	s0, s0, s29	@ tmp204, tmp203, _1_waves_mod
 4098              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 634:armwave.c     **** 
 4099              		.loc 1 634 54 view .LVU1075
 4100 1308 280A20EE 		vmul.f32	s0, s0, s17	@ tmp205, tmp204, tmp206
 4101              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 634:armwave.c     **** 
 4102              		.loc 1 634 31 view .LVU1076
 4103 130c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp205
 4104 1310 FEFFFFEB 		bl	sin		@
 4105              	.LVL221:
 4106              	@ armwave.c:636:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 636:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4107              		.loc 1 636 13 view .LVU1077
 4108 1314 00005BE3 		cmp	fp, #0	@ prephitmp_139,
 4109              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 634:armwave.c     **** 
 4110              		.loc 1 634 63 view .LVU1078
 4111 1318 0B0B30EE 		vadd.f64	d0, d0, d11	@ tmp208,, tmp267
 4112              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 634:armwave.c     **** 
 4113              		.loc 1 634 28 view .LVU1079
 4114 131c 0A0B20EE 		vmul.f64	d0, d0, d10	@ tmp210, tmp208, tmp268
 4115              	@ armwave.c:634:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 634:armwave.c     **** 
 4116              		.loc 1 634 21 view .LVU1080
 4117 1320 C00BB7EE 		vcvt.f32.f64	s0, d0	@ mod_val, tmp210
 4118              	.LVL222:
 636:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4119              		.loc 1 636 13 is_stmt 1 view .LVU1081
 636:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4120              		.loc 1 636 13 is_stmt 0 view .LVU1082
 4121 1324 380000DA 		ble	.L173		@,
 4122 1328 C09AB7EE 		vcvt.f64.f32	d9, s0	@ tmp261, mod_val
 4123              	@ armwave.c:646:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 646:armwave.c     **** 
 4124              		.loc 1 646 24 view .LVU1083
 4125 132c 4EDA9FED 		vldr.32	s26, .L199+28	@ tmp229,
 4126              	@ armwave.c:651:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4127              		.loc 1 651 113 view .LVU1084
 4128 1330 4ECADFED 		vldr.32	s25, .L199+32	@ tmp240,
 4129 1334 4ECA9FED 		vldr.32	s24, .L199+36	@ tmp241,
 4130              	@ armwave.c:636:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 636:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4131              		.loc 1 636 19 view .LVU1085
 4132 1338 0040A0E3 		mov	r4, #0	@ x,
 4133              	.LVL223:
 4134              	.L178:
 637:armwave.c     ****                 noise *= noise;
 4135              		.loc 1 637 17 is_stmt 1 view .LVU1086
 4136              	@ armwave.c:637:                 noise  = ((rand() & 0xffff) * noise_fraction);
 637:armwave.c     ****                 noise *= noise;
 4137              		.loc 1 637 28 is_stmt 0 view .LVU1087
 4138 133c FEFFFFEB 		bl	rand		@
 4139              	.LVL224:
 4140              	@ armwave.c:637:                 noise  = ((rand() & 0xffff) * noise_fraction);
 637:armwave.c     ****                 noise *= noise;
 4141              		.loc 1 637 35 view .LVU1088
 4142 1340 7000FFE6 		uxth	r0, r0	@ tmp212,
 4143              	@ armwave.c:637:                 noise  = ((rand() & 0xffff) * noise_fraction);
 637:armwave.c     ****                 noise *= noise;
 4144              		.loc 1 637 45 view .LVU1089
 4145 1344 900A07EE 		vmov	s15, r0	@ int	@ tmp212, tmp212
 4146 1348 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp214, tmp212
 4147              	@ armwave.c:637:                 noise  = ((rand() & 0xffff) * noise_fraction);
 637:armwave.c     ****                 noise *= noise;
 4148              		.loc 1 637 24 view .LVU1090
 4149 134c AD7A67EE 		vmul.f32	s15, s15, s27	@ noise, tmp214, noise_fraction
 4150              	.LVL225:
 638:armwave.c     ****                 noise *= noise;
 4151              		.loc 1 638 17 is_stmt 1 view .LVU1091
 4152              	@ armwave.c:638:                 noise *= noise;
 638:armwave.c     ****                 noise *= noise;
 4153              		.loc 1 638 23 is_stmt 0 view .LVU1092
 4154 1350 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4155              	.LVL226:
 639:armwave.c     ****                 noise *= noise;
 4156              		.loc 1 639 17 is_stmt 1 view .LVU1093
 4157              	@ armwave.c:639:                 noise *= noise;
 639:armwave.c     ****                 noise *= noise;
 4158              		.loc 1 639 23 is_stmt 0 view .LVU1094
 4159 1354 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4160              	.LVL227:
 640:armwave.c     **** 
 4161              		.loc 1 640 17 is_stmt 1 view .LVU1095
 4162              	@ armwave.c:640:                 noise *= noise;
 640:armwave.c     **** 
 4163              		.loc 1 640 23 is_stmt 0 view .LVU1096
 4164 1358 A7FA27EE 		vmul.f32	s30, s15, s15	@ noise, noise, noise
 4165              	.LVL228:
 642:armwave.c     ****                     noise = -noise;
 4166              		.loc 1 642 17 is_stmt 1 view .LVU1097
 4167              	@ armwave.c:642:                 if((rand() & 0xffff) > 0x7fff)
 642:armwave.c     ****                     noise = -noise;
 4168              		.loc 1 642 21 is_stmt 0 view .LVU1098
 4169 135c FEFFFFEB 		bl	rand		@
 4170              	.LVL229:
 643:armwave.c     **** 
 4171              		.loc 1 643 21 is_stmt 1 view .LVU1099
 4172              	@ armwave.c:642:                 if((rand() & 0xffff) > 0x7fff)
 642:armwave.c     ****                     noise = -noise;
 4173              		.loc 1 642 19 is_stmt 0 view .LVU1100
 4174 1360 020910E3 		tst	r0, #32768	@,
 4175              	@ armwave.c:643:                     noise = -noise;
 643:armwave.c     **** 
 4176              		.loc 1 643 27 view .LVU1101
 4177 1364 4FFAB11E 		vnegne.f32	s30, s30	@ noise, noise
 4178              	.LVL230:
 645:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4179              		.loc 1 645 17 is_stmt 1 view .LVU1102
 646:armwave.c     **** 
 4180              		.loc 1 646 17 view .LVU1103
 4181              	@ armwave.c:646:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 646:armwave.c     **** 
 4182              		.loc 1 646 27 is_stmt 0 view .LVU1104
 4183 1368 FEFFFFEB 		bl	rand		@
 4184              	.LVL231:
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4185              		.loc 1 648 17 is_stmt 1 view .LVU1105
 4186              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4187              		.loc 1 648 45 is_stmt 0 view .LVU1106
 4188 136c 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp277, g_armwave_state.wave_length
 4189              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4190              		.loc 1 648 33 view .LVU1107
 4191 1370 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4192              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4193              		.loc 1 648 45 view .LVU1108
 4194 1374 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp277
 4195              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4196              		.loc 1 648 33 view .LVU1109
 4197 1378 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp221, x
 4198              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4199              		.loc 1 648 45 view .LVU1110
 4200 137c 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp219, tmp263, tmp217
 4201              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4202              		.loc 1 648 33 view .LVU1111
 4203 1380 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp222, tmp221, tmp206
 4204              	@ armwave.c:646:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 646:armwave.c     **** 
 4205              		.loc 1 646 34 view .LVU1112
 4206 1384 7000FFE6 		uxth	r0, r0	@ tmp225,
 4207              	.LVL232:
 4208              	@ armwave.c:646:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 646:armwave.c     **** 
 4209              		.loc 1 646 44 view .LVU1113
 4210 1388 100A07EE 		vmov	s14, r0	@ int	@ tmp225, tmp225
 4211 138c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp227, tmp225
 4212              	@ armwave.c:646:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 646:armwave.c     **** 
 4213              		.loc 1 646 24 view .LVU1114
 4214 1390 0D0A87EE 		vdiv.f32	s0, s14, s26	@ xnoise, tmp227, tmp229
 4215              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4216              		.loc 1 648 77 view .LVU1115
 4217 1394 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp230, tmp219, tmp222
 4218              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4219              		.loc 1 648 22 view .LVU1116
 4220 1398 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp230
 4221 139c FEFFFFEB 		bl	sin		@
 4222              	.LVL233:
 4223              		.loc 1 651 17 is_stmt 1 view .LVU1117
 4224              	@ armwave.c:645:                 noise += 1.0f;
 645:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4225              		.loc 1 645 23 is_stmt 0 view .LVU1118
 4226 13a0 087A7FEE 		vadd.f32	s15, s30, s16	@ noise, noise, tmp263
 4227              	@ armwave.c:651:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4228              		.loc 1 651 104 view .LVU1119
 4229 13a4 0010A0E3 		mov	r1, #0	@ iftmp.27_55,
 4230              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4231              		.loc 1 648 98 view .LVU1120
 4232 13a8 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp236, noise
 4233              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4234              		.loc 1 648 87 view .LVU1121
 4235 13ac 000B29EE 		vmul.f64	d0, d9, d0	@ tmp233, tmp261,
 4236              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4237              		.loc 1 648 98 view .LVU1122
 4238 13b0 077B20EE 		vmul.f64	d7, d0, d7	@ tmp237, tmp233, tmp236
 4239              	@ armwave.c:648:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 648:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4240              		.loc 1 648 19 view .LVU1123
 4241 13b4 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp237
 4242              	@ armwave.c:651:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4243              		.loc 1 651 113 view .LVU1124
 4244 13b8 4C7AF0EE 		vmov.f32	s15, s24	@ _38, tmp241
 4245 13bc 2C7A47EE 		vmla.f32	s15, s14, s25	@ _38, v, tmp240
 4246 13c0 C07AF5EE 		vcmpe.f32	s15, #0	@ _38
 4247 13c4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4248 13c8 050000DA 		ble	.L175		@,
 4249              	@ armwave.c:651:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4250              		.loc 1 651 104 discriminator 1 view .LVU1125
 4251 13cc CE7AF4EE 		vcmpe.f32	s15, s28	@ _38, tmp269
 4252 13d0 FF10A0E3 		mov	r1, #255	@ iftmp.27_55,
 4253 13d4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4254 13d8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp245, _38
 4255 13dc 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp245, %sfp
 4256 13e0 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_55, %sfp
 4257              	.L175:
 4258              	@ armwave.c:651:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4259              		.loc 1 651 57 discriminator 12 view .LVU1126
 4260 13e4 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4261              	@ armwave.c:651:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4262              		.loc 1 651 102 discriminator 12 view .LVU1127
 4263 13e8 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4264 13ec 927622E0 		mla	r2, r2, r6, r7	@ tmp252, g_armwave_state.wave_stride, w, set_offset
 4265 13f0 043083E0 		add	r3, r3, r4	@ tmp251, g_armwave_state.test_wave_buffer, x
 4266              	@ armwave.c:636:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 636:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4267              		.loc 1 636 58 discriminator 12 view .LVU1128
 4268 13f4 014084E2 		add	r4, r4, #1	@ x, x,
 4269              	.LVL234:
 4270              	@ armwave.c:651:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4271              		.loc 1 651 102 discriminator 12 view .LVU1129
 4272 13f8 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_55, *_45
 4273              	@ armwave.c:636:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 636:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4274              		.loc 1 636 43 discriminator 12 view .LVU1130
 4275 13fc 4CB095E5 		ldr	fp, [r5, #76]	@ prephitmp_139, g_armwave_state.wave_length
 4276              	@ armwave.c:636:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 636:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4277              		.loc 1 636 13 discriminator 12 view .LVU1131
 4278 1400 04005BE1 		cmp	fp, r4	@ prephitmp_139, x
 4279 1404 CCFFFFCA 		bgt	.L178		@,
 4280 1408 384095E5 		ldr	r4, [r5, #56]	@ prephitmp_135, g_armwave_state.waves
 4281              	.LVL235:
 4282              	.L173:
 4283              	@ armwave.c:632:         for(w = 0; w < g_armwave_state.waves; w++) {
 632:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4284              		.loc 1 632 48 discriminator 2 view .LVU1132
 4285 140c 016086E2 		add	r6, r6, #1	@ w, w,
 4286              	.LVL236:
 4287              	@ armwave.c:632:         for(w = 0; w < g_armwave_state.waves; w++) {
 632:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4288              		.loc 1 632 9 discriminator 2 view .LVU1133
 4289 1410 040056E1 		cmp	r6, r4	@ w, prephitmp_135
 4290 1414 B8FFFFBA 		blt	.L179		@,
 4291              	.LVL237:
 4292              	.L172:
 652:armwave.c     ****             }
 653:armwave.c     ****         }
 654:armwave.c     **** 
 655:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4293              		.loc 1 655 9 is_stmt 1 discriminator 2 view .LVU1134
 4294              	@ armwave.c:655:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4295              		.loc 1 655 46 is_stmt 0 discriminator 2 view .LVU1135
 4296 1418 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4297              	@ armwave.c:629:     for(s = 0; s < sets; s++) {
 629:armwave.c     ****         printf("Calculating test set %d\n", s);
 4298              		.loc 1 629 27 discriminator 2 view .LVU1136
 4299 141c 018088E2 		add	r8, r8, #1	@ s, s,
 4300              	.LVL238:
 4301              	@ armwave.c:629:     for(s = 0; s < sets; s++) {
 629:armwave.c     ****         printf("Calculating test set %d\n", s);
 4302              		.loc 1 629 5 discriminator 2 view .LVU1137
 4303 1420 080059E1 		cmp	r9, r8	@ sets, s
 4304              	@ armwave.c:655:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4305              		.loc 1 655 20 discriminator 2 view .LVU1138
 4306 1424 937427E0 		mla	r7, r3, r4, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_135, set_offset
 4307              	.LVL239:
 4308              	@ armwave.c:629:     for(s = 0; s < sets; s++) {
 629:armwave.c     ****         printf("Calculating test set %d\n", s);
 4309              		.loc 1 629 5 discriminator 2 view .LVU1139
 4310 1428 A9FFFF1A 		bne	.L171		@,
 4311              	.LVL240:
 4312              	.L168:
 4313              	@ armwave.c:657: }
 656:armwave.c     ****     }
 657:armwave.c     **** }
 4314              		.loc 1 657 1 view .LVU1140
 4315 142c 0CD08DE2 		add	sp, sp, #12	@,,
 4316              		.cfi_remember_state
 4317              		.cfi_def_cfa_offset 100
 4318              		@ sp needed	@
 4319 1430 108BBDEC 		vldm	sp!, {d8-d15}	@,
 4320              		.cfi_restore 94
 4321              		.cfi_restore 95
 4322              		.cfi_restore 92
 4323              		.cfi_restore 93
 4324              		.cfi_restore 90
 4325              		.cfi_restore 91
 4326              		.cfi_restore 88
 4327              		.cfi_restore 89
 4328              		.cfi_restore 86
 4329              		.cfi_restore 87
 4330              		.cfi_restore 84
 4331              		.cfi_restore 85
 4332              		.cfi_restore 82
 4333              		.cfi_restore 83
 4334              		.cfi_restore 80
 4335              		.cfi_restore 81
 4336              		.cfi_def_cfa_offset 36
 4337 1434 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 4338              	.LVL241:
 4339              	.L198:
 4340              		.cfi_restore_state
 4341              	.LBB125:
 4342              	.LBB122:
 605:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 4343              		.loc 1 605 9 is_stmt 1 view .LVU1141
 4344 1438 940901E0 		mul	r1, r4, r9	@, _90, sets
 4345 143c 0920A0E1 		mov	r2, r9	@, sets
 4346 1440 38009FE5 		ldr	r0, .L199+48	@,
 4347 1444 FEFFFFEB 		bl	printf		@
 4348              	.LVL242:
 607:armwave.c     ****     }
 4349              		.loc 1 607 9 view .LVU1142
 4350 1448 99FFFFEA 		b	.L170		@
 4351              	.L200:
 4352 144c 0000A0E1 		.align	3
 4353              	.L199:
 4354 1450 00000000 		.word	0
 4355 1454 0000F03F 		.word	1072693248
 4356 1458 00000000 		.word	0
 4357 145c 0000E03F 		.word	1071644672
 4358 1460 0000803F 		.word	1065353216
 4359 1464 00007F43 		.word	1132396544
 4360 1468 C3F5C840 		.word	1086911939
 4361 146c 38FFC74A 		.word	1254620984
 4362 1470 0000FE42 		.word	1123942400
 4363 1474 00000043 		.word	1124073472
 4364 1478 00000000 		.word	g_armwave_state
 4365 147c CC020000 		.word	.LC18
 4366 1480 78020000 		.word	.LC17
 4367              	.LBE122:
 4368              	.LBE125:
 4369              		.cfi_endproc
 4370              	.LFE77:
 4372              		.align	2
 4373              		.global	armwave_cleanup
 4374              		.syntax unified
 4375              		.arm
 4376              		.fpu vfp
 4378              	armwave_cleanup:
 4379              	.LFB78:
 658:armwave.c     **** 
 659:armwave.c     **** /*
 660:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 661:armwave.c     ****  */
 662:armwave.c     **** void armwave_cleanup()
 663:armwave.c     **** {
 4380              		.loc 1 663 1 view -0
 4381              		.cfi_startproc
 4382              		@ args = 0, pretend = 0, frame = 0
 4383              		@ frame_needed = 0, uses_anonymous_args = 0
 664:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4384              		.loc 1 664 5 view .LVU1144
 4385              	@ armwave.c:663: {
 663:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4386              		.loc 1 663 1 is_stmt 0 view .LVU1145
 4387 1484 10402DE9 		push	{r4, lr}	@
 4388              		.cfi_def_cfa_offset 8
 4389              		.cfi_offset 4, -8
 4390              		.cfi_offset 14, -4
 4391              	@ armwave.c:664:     free(g_armwave_state.out_pixbuf);
 4392              		.loc 1 664 25 view .LVU1146
 4393 1488 34409FE5 		ldr	r4, .L203	@ tmp114,
 4394              	@ armwave.c:664:     free(g_armwave_state.out_pixbuf);
 4395              		.loc 1 664 5 view .LVU1147
 4396 148c 800094E5 		ldr	r0, [r4, #128]	@, g_armwave_state.out_pixbuf
 4397 1490 FEFFFFEB 		bl	free		@
 4398              	.LVL243:
 665:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4399              		.loc 1 665 5 is_stmt 1 view .LVU1148
 4400 1494 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4401 1498 FEFFFFEB 		bl	free		@
 4402              	.LVL244:
 666:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4403              		.loc 1 666 5 view .LVU1149
 4404 149c 9C0094E5 		ldr	r0, [r4, #156]	@, g_armwave_state.xcoord_to_xpixel
 4405 14a0 FEFFFFEB 		bl	free		@
 4406              	.LVL245:
 667:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4407              		.loc 1 667 5 view .LVU1150
 4408 14a4 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4409 14a8 FEFFFFEB 		bl	free		@
 4410              	.LVL246:
 668:armwave.c     **** 
 669:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4411              		.loc 1 669 5 view .LVU1151
 4412              	@ armwave.c:669:     g_armwave_state.out_pixbuf = NULL;
 4413              		.loc 1 669 32 is_stmt 0 view .LVU1152
 4414 14ac 0030A0E3 		mov	r3, #0	@ tmp123,
 4415 14b0 803084E5 		str	r3, [r4, #128]	@ tmp123, g_armwave_state.out_pixbuf
 670:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4416              		.loc 1 670 5 is_stmt 1 view .LVU1153
 4417              	@ armwave.c:670:     g_armwave_state.ch1_buffer = NULL;
 4418              		.loc 1 670 32 is_stmt 0 view .LVU1154
 4419 14b4 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 671:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4420              		.loc 1 671 5 is_stmt 1 view .LVU1155
 4421              	@ armwave.c:671:     g_armwave_state.xcoord_to_xpixel = NULL;
 4422              		.loc 1 671 38 is_stmt 0 view .LVU1156
 4423 14b8 9C3084E5 		str	r3, [r4, #156]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 672:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4424              		.loc 1 672 5 is_stmt 1 view .LVU1157
 4425              	@ armwave.c:672:     g_armwave_state.test_wave_buffer = NULL;
 4426              		.loc 1 672 38 is_stmt 0 view .LVU1158
 4427 14bc 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4428              	@ armwave.c:673: }
 673:armwave.c     **** }
 4429              		.loc 1 673 1 view .LVU1159
 4430 14c0 1080BDE8 		pop	{r4, pc}	@
 4431              	.L204:
 4432              		.align	2
 4433              	.L203:
 4434 14c4 00000000 		.word	g_armwave_state
 4435              		.cfi_endproc
 4436              	.LFE78:
 4438              		.align	2
 4439              		.global	armwave_grab_xid
 4440              		.syntax unified
 4441              		.arm
 4442              		.fpu vfp
 4444              	armwave_grab_xid:
 4445              	.LVL247:
 4446              	.LFB79:
 674:armwave.c     **** 
 675:armwave.c     **** /*
 676:armwave.c     ****  * Grab a given XWindow by ID.
 677:armwave.c     ****  */
 678:armwave.c     **** void armwave_grab_xid(int id)
 679:armwave.c     **** {
 4447              		.loc 1 679 1 is_stmt 1 view -0
 4448              		.cfi_startproc
 4449              		@ args = 0, pretend = 0, frame = 96
 4450              		@ frame_needed = 0, uses_anonymous_args = 0
 680:armwave.c     ****     XEvent event;
 4451              		.loc 1 680 5 view .LVU1161
 681:armwave.c     ****     
 682:armwave.c     ****     if(g_window != 0) {
 4452              		.loc 1 682 5 view .LVU1162
 4453              	@ armwave.c:679: {
 679:armwave.c     ****     XEvent event;
 4454              		.loc 1 679 1 is_stmt 0 view .LVU1163
 4455 14c8 70402DE9 		push	{r4, r5, r6, lr}	@
 4456              		.cfi_def_cfa_offset 16
 4457              		.cfi_offset 4, -16
 4458              		.cfi_offset 5, -12
 4459              		.cfi_offset 6, -8
 4460              		.cfi_offset 14, -4
 4461 14cc 0060A0E1 		mov	r6, r0	@ id, id
 4462              	@ armwave.c:682:     if(g_window != 0) {
 4463              		.loc 1 682 17 view .LVU1164
 4464 14d0 9C509FE5 		ldr	r5, .L214	@ tmp151,
 4465 14d4 9C409FE5 		ldr	r4, .L214+4	@ tmp152,
 4466              	@ armwave.c:679: {
 679:armwave.c     ****     XEvent event;
 4467              		.loc 1 679 1 view .LVU1165
 4468 14d8 60D04DE2 		sub	sp, sp, #96	@,,
 4469              		.cfi_def_cfa_offset 112
 4470              	@ armwave.c:682:     if(g_window != 0) {
 4471              		.loc 1 682 17 view .LVU1166
 4472 14dc 001095E5 		ldr	r1, [r5]	@ g_window.30_1, g_window
 4473 14e0 000094E5 		ldr	r0, [r4]	@ pretmp_30, g_dpy
 4474              	.LVL248:
 4475              	@ armwave.c:682:     if(g_window != 0) {
 4476              		.loc 1 682 7 view .LVU1167
 4477 14e4 000051E3 		cmp	r1, #0	@ g_window.30_1,
 4478 14e8 1E00001A 		bne	.L213		@,
 4479              	.L206:
 683:armwave.c     ****         XUnmapWindow(g_dpy, g_window);
 684:armwave.c     ****     }
 685:armwave.c     ****     
 686:armwave.c     ****     g_window = id;
 4480              		.loc 1 686 5 is_stmt 1 view .LVU1168
 4481              	@ armwave.c:688:     XStoreName(g_dpy, g_window, "ArmWave");
 687:armwave.c     ****     
 688:armwave.c     ****     XStoreName(g_dpy, g_window, "ArmWave");
 4482              		.loc 1 688 5 is_stmt 0 view .LVU1169
 4483 14ec 0610A0E1 		mov	r1, r6	@, id
 4484 14f0 84209FE5 		ldr	r2, .L214+8	@,
 4485              	@ armwave.c:686:     g_window = id;
 686:armwave.c     ****     
 4486              		.loc 1 686 14 view .LVU1170
 4487 14f4 006085E5 		str	r6, [r5]	@ id, g_window
 4488              		.loc 1 688 5 is_stmt 1 view .LVU1171
 4489 14f8 FEFFFFEB 		bl	XStoreName		@
 4490              	.LVL249:
 689:armwave.c     ****     XSetIconName(g_dpy, g_window, "ArmWave");
 4491              		.loc 1 689 5 view .LVU1172
 4492 14fc 78209FE5 		ldr	r2, .L214+8	@,
 4493 1500 001095E5 		ldr	r1, [r5]	@, g_window
 4494 1504 000094E5 		ldr	r0, [r4]	@, g_dpy
 4495 1508 FEFFFFEB 		bl	XSetIconName		@
 4496              	.LVL250:
 690:armwave.c     ****     XSelectInput(g_dpy, g_window, StructureNotifyMask);
 4497              		.loc 1 690 5 view .LVU1173
 4498 150c 001095E5 		ldr	r1, [r5]	@, g_window
 4499 1510 0228A0E3 		mov	r2, #131072	@,
 4500 1514 000094E5 		ldr	r0, [r4]	@, g_dpy
 4501 1518 FEFFFFEB 		bl	XSelectInput		@
 4502              	.LVL251:
 691:armwave.c     ****     
 692:armwave.c     ****     printf("Window done, mapping...\n");
 4503              		.loc 1 692 5 view .LVU1174
 4504 151c 5C009FE5 		ldr	r0, .L214+12	@,
 4505 1520 FEFFFFEB 		bl	puts		@
 4506              	.LVL252:
 693:armwave.c     ****     
 694:armwave.c     ****     XMapWindow(g_dpy, g_window);
 4507              		.loc 1 694 5 view .LVU1175
 4508 1524 001095E5 		ldr	r1, [r5]	@, g_window
 4509 1528 000094E5 		ldr	r0, [r4]	@, g_dpy
 4510 152c FEFFFFEB 		bl	XMapWindow		@
 4511              	.LVL253:
 4512              	.L210:
 695:armwave.c     ****     
 696:armwave.c     ****     do {
 4513              		.loc 1 696 5 discriminator 3 view .LVU1176
 697:armwave.c     ****         XNextEvent(g_dpy, &event);
 4514              		.loc 1 697 9 discriminator 3 view .LVU1177
 4515 1530 0D10A0E1 		mov	r1, sp	@,
 4516 1534 000094E5 		ldr	r0, [r4]	@, g_dpy
 4517 1538 FEFFFFEB 		bl	XNextEvent		@
 4518              	.LVL254:
 4519              	@ armwave.c:699:     while(event.type != MapNotify || event.xmap.event != g_window);
 698:armwave.c     ****     }
 699:armwave.c     ****     while(event.type != MapNotify || event.xmap.event != g_window);
 4520              		.loc 1 699 5 is_stmt 0 discriminator 3 view .LVU1178
 4521 153c 00309DE5 		ldr	r3, [sp]	@ event.type, event.type
 4522 1540 130053E3 		cmp	r3, #19	@ event.type,
 4523 1544 F9FFFF1A 		bne	.L210		@,
 4524              	@ armwave.c:699:     while(event.type != MapNotify || event.xmap.event != g_window);
 4525              		.loc 1 699 35 discriminator 2 view .LVU1179
 4526 1548 10209DE5 		ldr	r2, [sp, #16]	@ event.xmap.event, event.xmap.event
 4527 154c 003095E5 		ldr	r3, [r5]	@ g_window, g_window
 4528 1550 030052E1 		cmp	r2, r3	@ event.xmap.event, g_window
 4529 1554 F5FFFF1A 		bne	.L210		@,
 700:armwave.c     ****     
 701:armwave.c     ****     printf("All done in window\n");
 4530              		.loc 1 701 5 is_stmt 1 view .LVU1180
 4531 1558 24009FE5 		ldr	r0, .L214+16	@,
 4532 155c FEFFFFEB 		bl	puts		@
 4533              	.LVL255:
 4534              	@ armwave.c:702: }
 702:armwave.c     **** }
 4535              		.loc 1 702 1 is_stmt 0 view .LVU1181
 4536 1560 60D08DE2 		add	sp, sp, #96	@,,
 4537              		.cfi_remember_state
 4538              		.cfi_def_cfa_offset 16
 4539              		@ sp needed	@
 4540 1564 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4541              	.LVL256:
 4542              	.L213:
 4543              		.cfi_restore_state
 683:armwave.c     ****     }
 4544              		.loc 1 683 9 is_stmt 1 view .LVU1182
 4545 1568 FEFFFFEB 		bl	XUnmapWindow		@
 4546              	.LVL257:
 4547 156c 000094E5 		ldr	r0, [r4]	@ pretmp_30, g_dpy
 4548 1570 DDFFFFEA 		b	.L206		@
 4549              	.L215:
 4550              		.align	2
 4551              	.L214:
 4552 1574 00000000 		.word	.LANCHOR1
 4553 1578 00000000 		.word	g_dpy
 4554 157c E8020000 		.word	.LC19
 4555 1580 F0020000 		.word	.LC20
 4556 1584 08030000 		.word	.LC21
 4557              		.cfi_endproc
 4558              	.LFE79:
 4560              		.align	2
 4561              		.global	armwave_init_x11
 4562              		.syntax unified
 4563              		.arm
 4564              		.fpu vfp
 4566              	armwave_init_x11:
 4567              	.LFB80:
 703:armwave.c     **** 
 704:armwave.c     **** /*
 705:armwave.c     ****  * Initialise the Xvideo and MITSHM extension.
 706:armwave.c     ****  */
 707:armwave.c     **** void armwave_init_x11()
 708:armwave.c     **** {
 4568              		.loc 1 708 1 view -0
 4569              		.cfi_startproc
 4570              		@ args = 0, pretend = 0, frame = 0
 4571              		@ frame_needed = 0, uses_anonymous_args = 0
 709:armwave.c     ****     int screen;
 4572              		.loc 1 709 5 view .LVU1184
 710:armwave.c     ****     
 711:armwave.c     ****     printf("armwave: initialising for X11...\n");
 4573              		.loc 1 711 5 view .LVU1185
 4574              	@ armwave.c:708: {
 708:armwave.c     ****     int screen;
 4575              		.loc 1 708 1 is_stmt 0 view .LVU1186
 4576 1588 04E02DE5 		str	lr, [sp, #-4]!	@,
 4577              		.cfi_def_cfa_offset 4
 4578              		.cfi_offset 14, -4
 4579 158c 0CD04DE2 		sub	sp, sp, #12	@,,
 4580              		.cfi_def_cfa_offset 16
 4581              	@ armwave.c:711:     printf("armwave: initialising for X11...\n");
 4582              		.loc 1 711 5 view .LVU1187
 4583 1590 68009FE5 		ldr	r0, .L221	@,
 4584 1594 FEFFFFEB 		bl	puts		@
 4585              	.LVL258:
 712:armwave.c     ****         
 713:armwave.c     ****     /*
 714:armwave.c     ****      * Try to open the display.
 715:armwave.c     ****      */
 716:armwave.c     ****     g_dpy = XOpenDisplay(NULL);
 4586              		.loc 1 716 5 is_stmt 1 view .LVU1188
 4587              	@ armwave.c:716:     g_dpy = XOpenDisplay(NULL);
 4588              		.loc 1 716 13 is_stmt 0 view .LVU1189
 4589 1598 0000A0E3 		mov	r0, #0	@,
 4590 159c FEFFFFEB 		bl	XOpenDisplay		@
 4591              	.LVL259:
 4592              	@ armwave.c:716:     g_dpy = XOpenDisplay(NULL);
 4593              		.loc 1 716 11 view .LVU1190
 4594 15a0 5C209FE5 		ldr	r2, .L221+4	@ tmp114,
 4595              	@ armwave.c:717:     if (g_dpy == NULL) {
 717:armwave.c     ****     if (g_dpy == NULL) {
 4596              		.loc 1 717 8 view .LVU1191
 4597 15a4 000050E3 		cmp	r0, #0	@ _1,
 4598              	@ armwave.c:716:     g_dpy = XOpenDisplay(NULL);
 716:armwave.c     ****     if (g_dpy == NULL) {
 4599              		.loc 1 716 11 view .LVU1192
 4600 15a8 000082E5 		str	r0, [r2]	@ _1, g_dpy
 4601              		.loc 1 717 5 is_stmt 1 view .LVU1193
 4602              	@ armwave.c:717:     if (g_dpy == NULL) {
 4603              		.loc 1 717 8 is_stmt 0 view .LVU1194
 4604 15ac 0B00000A 		beq	.L220		@,
 718:armwave.c     ****         printf("Error: Fatal X11: Cannot open display.\n");
 719:armwave.c     ****         exit (-1);
 720:armwave.c     ****     }
 721:armwave.c     ****     
 722:armwave.c     ****     screen = DefaultScreen(g_dpy);
 4605              		.loc 1 722 5 is_stmt 1 view .LVU1195
 4606              	.LVL260:
 723:armwave.c     ****     
 724:armwave.c     ****     /*
 725:armwave.c     ****      * Check the display supports 24-bit TrueColor, if not then abort early.
 726:armwave.c     ****      */
 727:armwave.c     ****     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4607              		.loc 1 727 5 view .LVU1196
 4608              	@ armwave.c:727:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4609              		.loc 1 727 9 is_stmt 0 view .LVU1197
 4610 15b0 50309FE5 		ldr	r3, .L221+8	@ tmp117,
 4611 15b4 841090E5 		ldr	r1, [r0, #132]	@ MEM[(struct  *)_1].default_screen, MEM[(struct  *)_1].default_screen
 4612 15b8 1820A0E3 		mov	r2, #24	@,
 4613 15bc 00308DE5 		str	r3, [sp]	@ tmp117,
 4614              	.LVL261:
 4615              		.loc 1 727 9 view .LVU1198
 4616 15c0 0430A0E3 		mov	r3, #4	@,
 4617 15c4 FEFFFFEB 		bl	XMatchVisualInfo		@
 4618              	.LVL262:
 4619              	@ armwave.c:727:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4620              		.loc 1 727 8 view .LVU1199
 4621 15c8 000050E3 		cmp	r0, #0	@,
 4622 15cc 0700000A 		beq	.L218		@,
 728:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 4623              		.loc 1 728 9 is_stmt 1 view .LVU1200
 4624 15d0 34009FE5 		ldr	r0, .L221+12	@,
 4625              	@ armwave.c:733: }
 729:armwave.c     ****     } else {
 730:armwave.c     ****         printf("Error: Fatal X11: not supported 24-bit TrueColor display.\n");
 731:armwave.c     ****         exit(-1);
 732:armwave.c     ****     }
 733:armwave.c     **** }
 4626              		.loc 1 733 1 is_stmt 0 view .LVU1201
 4627 15d4 0CD08DE2 		add	sp, sp, #12	@,,
 4628              		.cfi_remember_state
 4629              		.cfi_def_cfa_offset 4
 4630              		@ sp needed	@
 4631 15d8 04E09DE4 		ldr	lr, [sp], #4	@,
 4632              		.cfi_restore 14
 4633              		.cfi_def_cfa_offset 0
 4634              	@ armwave.c:728:         printf("Found 24bit TrueColor.\n");
 728:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 4635              		.loc 1 728 9 view .LVU1202
 4636 15dc FEFFFFEA 		b	puts		@
 4637              	.LVL263:
 4638              	.L220:
 4639              		.cfi_restore_state
 718:armwave.c     ****         exit (-1);
 4640              		.loc 1 718 9 is_stmt 1 view .LVU1203
 4641 15e0 28009FE5 		ldr	r0, .L221+16	@,
 4642 15e4 FEFFFFEB 		bl	puts		@
 4643              	.LVL264:
 719:armwave.c     ****     }
 4644              		.loc 1 719 9 view .LVU1204
 4645 15e8 0000E0E3 		mvn	r0, #0	@,
 4646 15ec FEFFFFEB 		bl	exit		@
 4647              	.LVL265:
 4648              	.L218:
 730:armwave.c     ****         exit(-1);
 4649              		.loc 1 730 9 view .LVU1205
 4650 15f0 1C009FE5 		ldr	r0, .L221+20	@,
 4651 15f4 FEFFFFEB 		bl	puts		@
 4652              	.LVL266:
 731:armwave.c     ****     }
 4653              		.loc 1 731 9 view .LVU1206
 4654 15f8 0000E0E3 		mvn	r0, #0	@,
 4655 15fc FEFFFFEB 		bl	exit		@
 4656              	.LVL267:
 4657              	.L222:
 4658              		.align	2
 4659              	.L221:
 4660 1600 1C030000 		.word	.LC22
 4661 1604 00000000 		.word	g_dpy
 4662 1608 00000000 		.word	g_vinfo
 4663 160c 68030000 		.word	.LC24
 4664 1610 40030000 		.word	.LC23
 4665 1614 80030000 		.word	.LC25
 4666              		.cfi_endproc
 4667              	.LFE80:
 4669              		.align	2
 4670              		.global	armwave_init_xvimage_shared
 4671              		.syntax unified
 4672              		.arm
 4673              		.fpu vfp
 4675              	armwave_init_xvimage_shared:
 4676              	.LVL268:
 4677              	.LFB81:
 734:armwave.c     **** 
 735:armwave.c     **** /*
 736:armwave.c     ****  * Create the shared memory buffer for the XvImage.
 737:armwave.c     ****  */
 738:armwave.c     **** void armwave_init_xvimage_shared(int tex_width, int tex_height)
 739:armwave.c     **** {
 4678              		.loc 1 739 1 view -0
 4679              		.cfi_startproc
 4680              		@ args = 0, pretend = 0, frame = 120
 4681              		@ frame_needed = 0, uses_anonymous_args = 0
 740:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4682              		.loc 1 740 5 view .LVU1208
 741:armwave.c     ****     int	p_num_adaptors, ret, n;
 4683              		.loc 1 741 5 view .LVU1209
 742:armwave.c     ****     XGCValues gc_values;
 4684              		.loc 1 742 5 view .LVU1210
 743:armwave.c     ****     XvAdaptorInfo *ai;
 4685              		.loc 1 743 5 view .LVU1211
 744:armwave.c     ****     
 745:armwave.c     ****     /*
 746:armwave.c     ****      * Query the MITSHM extension - check it is available.
 747:armwave.c     ****      */
 748:armwave.c     ****     if(!XShmQueryExtension(g_dpy)) {
 4686              		.loc 1 748 5 view .LVU1212
 4687              	@ armwave.c:739: {
 739:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4688              		.loc 1 739 1 is_stmt 0 view .LVU1213
 4689 1618 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 4690              		.cfi_def_cfa_offset 32
 4691              		.cfi_offset 4, -32
 4692              		.cfi_offset 5, -28
 4693              		.cfi_offset 6, -24
 4694              		.cfi_offset 7, -20
 4695              		.cfi_offset 8, -16
 4696              		.cfi_offset 9, -12
 4697              		.cfi_offset 10, -8
 4698              		.cfi_offset 14, -4
 4699 161c 0060A0E1 		mov	r6, r0	@ tex_width, tex_width
 4700              	@ armwave.c:748:     if(!XShmQueryExtension(g_dpy)) {
 4701              		.loc 1 748 9 view .LVU1214
 4702 1620 18729FE5 		ldr	r7, .L246	@ tmp251,
 4703              	@ armwave.c:739: {
 739:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4704              		.loc 1 739 1 view .LVU1215
 4705 1624 88D04DE2 		sub	sp, sp, #136	@,,
 4706              		.cfi_def_cfa_offset 168
 4707              	@ armwave.c:739: {
 739:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4708              		.loc 1 739 1 view .LVU1216
 4709 1628 01A0A0E1 		mov	r10, r1	@ tex_height, tex_height
 4710              	@ armwave.c:748:     if(!XShmQueryExtension(g_dpy)) {
 4711              		.loc 1 748 9 view .LVU1217
 4712 162c 000097E5 		ldr	r0, [r7]	@, g_dpy
 4713              	.LVL269:
 4714              		.loc 1 748 9 view .LVU1218
 4715 1630 FEFFFFEB 		bl	XShmQueryExtension		@
 4716              	.LVL270:
 4717              	@ armwave.c:748:     if(!XShmQueryExtension(g_dpy)) {
 4718              		.loc 1 748 7 view .LVU1219
 4719 1634 000050E3 		cmp	r0, #0	@,
 4720 1638 6900000A 		beq	.L241		@,
 749:armwave.c     ****         printf("Error: Fatal X11: Shared memory extension not available or failed to allocate share
 750:armwave.c     ****         exit(-1);
 751:armwave.c     ****     }
 752:armwave.c     ****     
 753:armwave.c     ****     XShmGetEventBase(g_dpy);  // What does this do? 
 4721              		.loc 1 753 5 is_stmt 1 view .LVU1220
 4722 163c 000097E5 		ldr	r0, [r7]	@, g_dpy
 4723 1640 FEFFFFEB 		bl	XShmGetEventBase		@
 4724              	.LVL271:
 754:armwave.c     ****     
 755:armwave.c     ****     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 4725              		.loc 1 755 5 view .LVU1221
 4726              	@ armwave.c:755:     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 4727              		.loc 1 755 11 is_stmt 0 view .LVU1222
 4728 1644 20208DE2 		add	r2, sp, #32	@ tmp176,,
 4729 1648 1C308DE2 		add	r3, sp, #28	@ tmp177,,
 4730 164c 04208DE5 		str	r2, [sp, #4]	@ tmp176,
 4731 1650 00308DE5 		str	r3, [sp]	@ tmp177,
 4732 1654 14208DE2 		add	r2, sp, #20	@,,
 4733 1658 18308DE2 		add	r3, sp, #24	@,,
 4734 165c 10108DE2 		add	r1, sp, #16	@,,
 4735 1660 000097E5 		ldr	r0, [r7]	@, g_dpy
 4736 1664 FEFFFFEB 		bl	XvQueryExtension		@
 4737              	.LVL272:
 756:armwave.c     **** 			 &p_event_base, &p_error_base);
 757:armwave.c     ****     if(ret != Success) {
 4738              		.loc 1 757 5 is_stmt 1 view .LVU1223
 4739              	@ armwave.c:757:     if(ret != Success) {
 4740              		.loc 1 757 7 is_stmt 0 view .LVU1224
 4741 1668 000050E3 		cmp	r0, #0	@ ret
 4742              		.loc 1 757 7 view .LVU1225
 4743 166c 6E00001A 		bne	.L242		@,
 758:armwave.c     ****         printf("Error: Fatal X11: Unable to find XVideo extension (%d).  Is it configured correctly
 759:armwave.c     ****         exit(-1);
 760:armwave.c     ****     }
 761:armwave.c     ****     
 762:armwave.c     ****     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4744              		.loc 1 762 5 is_stmt 1 view .LVU1226
 4745              	@ armwave.c:762:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4746              		.loc 1 762 11 is_stmt 0 view .LVU1227
 4747 1670 002097E5 		ldr	r2, [r7]	@ g_dpy.50_5, g_dpy
 4748 1674 28308DE2 		add	r3, sp, #40	@,,
 4749 1678 0200A0E1 		mov	r0, r2	@, g_dpy.50_5
 4750              	.LVL273:
 4751              	@ armwave.c:762:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4752              		.loc 1 762 34 view .LVU1228
 4753 167c 841092E5 		ldr	r1, [r2, #132]	@ MEM[(struct  *)g_dpy.50_5].default_screen, MEM[(struct  *)g_dpy.50_5].default
 4754              	@ armwave.c:762:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4755              		.loc 1 762 11 view .LVU1229
 4756 1680 8CC092E5 		ldr	ip, [r2, #140]	@ MEM[(struct  *)g_dpy.50_5].screens, MEM[(struct  *)g_dpy.50_5].screens
 4757 1684 24208DE2 		add	r2, sp, #36	@,,
 4758 1688 011181E0 		add	r1, r1, r1, lsl #2	@ tmp186, MEM[(struct  *)g_dpy.50_5].default_screen, MEM[(struct  *)g_dpy.5
 4759 168c 01128CE0 		add	r1, ip, r1, lsl #4	@ tmp188, MEM[(struct  *)g_dpy.50_5].screens, tmp186,
 4760 1690 081091E5 		ldr	r1, [r1, #8]	@, _10->root
 4761 1694 FEFFFFEB 		bl	XvQueryAdaptors		@
 4762              	.LVL274:
 763:armwave.c     **** 			&p_num_adaptors, &ai);
 764:armwave.c     ****     
 765:armwave.c     ****     if(ret != Success) {
 4763              		.loc 1 765 5 is_stmt 1 view .LVU1230
 4764              	@ armwave.c:765:     if(ret != Success) {
 4765              		.loc 1 765 7 is_stmt 0 view .LVU1231
 4766 1698 004050E2 		subs	r4, r0, #0	@ n,
 4767 169c 5D00001A 		bne	.L243		@,
 766:armwave.c     ****         printf("Error: Fatal X11: Unable to query XVideo extension (%d).  Is it configured correctl
 767:armwave.c     ****         exit(-1);
 768:armwave.c     ****     }
 769:armwave.c     ****     
 770:armwave.c     ****     // Use the last port available
 771:armwave.c     ****     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4768              		.loc 1 771 5 is_stmt 1 view .LVU1232
 4769              	@ armwave.c:771:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4770              		.loc 1 771 19 is_stmt 0 view .LVU1233
 4771 16a0 24109DE5 		ldr	r1, [sp, #36]	@ p_num_adaptors.54_13, p_num_adaptors
 4772              	@ armwave.c:771:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4773              		.loc 1 771 39 view .LVU1234
 4774 16a4 28309DE5 		ldr	r3, [sp, #40]	@ ai, ai
 4775              	@ armwave.c:771:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4776              		.loc 1 771 15 view .LVU1235
 4777 16a8 94919FE5 		ldr	r9, .L246+4	@ tmp249,
 4778              	@ armwave.c:771:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4779              		.loc 1 771 39 view .LVU1236
 4780 16ac 812161E0 		rsb	r2, r1, r1, lsl #3	@ tmp194, p_num_adaptors.54_13, p_num_adaptors.54_13,
 4781 16b0 023183E0 		add	r3, r3, r2, lsl #2	@ tmp196, ai, tmp194,
 4782 16b4 1C5013E5 		ldr	r5, [r3, #-28]	@ _19, _17->base_id
 4783              	@ armwave.c:772:     if(g_xv_port == -1) {
 772:armwave.c     ****     if(g_xv_port == -1) {
 4784              		.loc 1 772 7 view .LVU1237
 4785 16b8 010075E3 		cmn	r5, #1	@ _19,
 4786              	@ armwave.c:771:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 771:armwave.c     ****     if(g_xv_port == -1) {
 4787              		.loc 1 771 15 view .LVU1238
 4788 16bc 005089E5 		str	r5, [r9]	@ _19, g_xv_port
 4789              		.loc 1 772 5 is_stmt 1 view .LVU1239
 4790              	@ armwave.c:772:     if(g_xv_port == -1) {
 4791              		.loc 1 772 7 is_stmt 0 view .LVU1240
 4792 16c0 4F00000A 		beq	.L244		@,
 773:armwave.c     ****         printf("Error: Fatal X11: Unable to use the port %d\n\n", p_num_adaptors - 1);
 774:armwave.c     ****         exit(-1);
 775:armwave.c     ****     }
 776:armwave.c     ****     
 777:armwave.c     ****     /*
 778:armwave.c     ****      * Create the shared image and attach to it.
 779:armwave.c     ****      */
 780:armwave.c     ****     printf("Attaching XvShm...\n");
 4793              		.loc 1 780 5 is_stmt 1 view .LVU1241
 4794              	@ armwave.c:782:     if(g_yuv_image != NULL) {
 781:armwave.c     ****     
 782:armwave.c     ****     if(g_yuv_image != NULL) {
 4795              		.loc 1 782 20 is_stmt 0 view .LVU1242
 4796 16c4 7C519FE5 		ldr	r5, .L246+8	@ tmp252,
 4797              	@ armwave.c:780:     printf("Attaching XvShm...\n");
 780:armwave.c     ****     
 4798              		.loc 1 780 5 view .LVU1243
 4799 16c8 7C019FE5 		ldr	r0, .L246+12	@,
 4800              	.LVL275:
 780:armwave.c     ****     
 4801              		.loc 1 780 5 view .LVU1244
 4802 16cc FEFFFFEB 		bl	puts		@
 4803              	.LVL276:
 4804              		.loc 1 782 5 is_stmt 1 view .LVU1245
 4805              	@ armwave.c:782:     if(g_yuv_image != NULL) {
 4806              		.loc 1 782 20 is_stmt 0 view .LVU1246
 4807 16d0 040095E5 		ldr	r0, [r5, #4]	@ g_yuv_image.58_21, g_yuv_image
 4808              	@ armwave.c:782:     if(g_yuv_image != NULL) {
 4809              		.loc 1 782 7 view .LVU1247
 4810 16d4 000050E3 		cmp	r0, #0	@ g_yuv_image.58_21,
 4811 16d8 0100000A 		beq	.L228		@,
 783:armwave.c     ****         // Unsure if this is reasonable
 784:armwave.c     ****         XFree(g_yuv_image);
 4812              		.loc 1 784 9 is_stmt 1 view .LVU1248
 4813 16dc FEFFFFEB 		bl	XFree		@
 4814              	.LVL277:
 785:armwave.c     ****         g_yuv_image = NULL;
 4815              		.loc 1 785 9 view .LVU1249
 4816              	@ armwave.c:785:         g_yuv_image = NULL;
 4817              		.loc 1 785 21 is_stmt 0 view .LVU1250
 4818 16e0 044085E5 		str	r4, [r5, #4]	@ n, g_yuv_image
 4819              	.L228:
 786:armwave.c     ****     }
 787:armwave.c     ****     
 788:armwave.c     ****     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_width, tex_height, &
 4820              		.loc 1 788 5 is_stmt 1 view .LVU1251
 4821              	@ armwave.c:788:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 4822              		.loc 1 788 19 is_stmt 0 view .LVU1252
 4823 16e4 64819FE5 		ldr	r8, .L246+16	@ tmp250,
 4824 16e8 40048DE8 		stm	sp, {r6, r10}	@,,
 4825 16ec 0030A0E3 		mov	r3, #0	@,
 4826 16f0 5C219FE5 		ldr	r2, .L246+20	@,
 4827 16f4 001099E5 		ldr	r1, [r9]	@, g_xv_port
 4828 16f8 08808DE5 		str	r8, [sp, #8]	@ tmp250,
 4829 16fc 000097E5 		ldr	r0, [r7]	@, g_dpy
 4830 1700 FEFFFFEB 		bl	XvShmCreateImage		@
 4831              	.LVL278:
 4832              	@ armwave.c:789:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 789:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4833              		.loc 1 789 27 view .LVU1253
 4834 1704 4C219FE5 		ldr	r2, .L246+24	@,
 4835              	@ armwave.c:788:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 788:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4836              		.loc 1 788 19 view .LVU1254
 4837 1708 0030A0E1 		mov	r3, r0	@ _25,
 4838              	@ armwave.c:789:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 4839              		.loc 1 789 27 view .LVU1255
 4840 170c 0C1090E5 		ldr	r1, [r0, #12]	@, _25->data_size
 4841 1710 0000A0E3 		mov	r0, #0	@,
 4842              	@ armwave.c:788:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 788:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4843              		.loc 1 788 17 view .LVU1256
 4844 1714 043085E5 		str	r3, [r5, #4]	@ _25, g_yuv_image
 4845              		.loc 1 789 5 is_stmt 1 view .LVU1257
 4846              	@ armwave.c:789:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 4847              		.loc 1 789 27 is_stmt 0 view .LVU1258
 4848 1718 FEFFFFEB 		bl	shmget		@
 4849              	.LVL279:
 4850              	@ armwave.c:790:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 790:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4851              		.loc 1 790 49 view .LVU1259
 4852 171c 0020A0E3 		mov	r2, #0	@,
 4853 1720 0210A0E1 		mov	r1, r2	@,
 4854              	@ armwave.c:790:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4855              		.loc 1 790 40 view .LVU1260
 4856 1724 046095E5 		ldr	r6, [r5, #4]	@ g_yuv_image.64_29, g_yuv_image
 4857              	.LVL280:
 4858              	@ armwave.c:789:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 789:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4859              		.loc 1 789 25 view .LVU1261
 4860 1728 040088E5 		str	r0, [r8, #4]	@, g_yuv_shminfo.shmid
 4861              		.loc 1 790 5 is_stmt 1 view .LVU1262
 4862              	@ armwave.c:790:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4863              		.loc 1 790 49 is_stmt 0 view .LVU1263
 4864 172c FEFFFFEB 		bl	shmat		@
 4865              	.LVL281:
 4866              	@ armwave.c:793:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 791:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 792:armwave.c     ****     
 793:armwave.c     ****     for(n = 0; n < g_yuv_image->num_planes; n++) {
 4867              		.loc 1 793 31 view .LVU1264
 4868 1730 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.69_39, g_yuv_image
 4869              	@ armwave.c:791:     g_yuv_shminfo.readOnly = False;
 791:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 4870              		.loc 1 791 28 view .LVU1265
 4871 1734 0020A0E3 		mov	r2, #0	@ tmp218,
 4872 1738 0C2088E5 		str	r2, [r8, #12]	@ tmp218, g_yuv_shminfo.readOnly
 4873              	@ armwave.c:793:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 4874              		.loc 1 793 5 view .LVU1266
 4875 173c 101093E5 		ldr	r1, [r3, #16]	@ g_yuv_image.69_106->num_planes, g_yuv_image.69_106->num_planes
 4876 1740 020051E1 		cmp	r1, r2	@ g_yuv_image.69_106->num_planes,
 4877              	@ armwave.c:790:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 790:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4878              		.loc 1 790 47 view .LVU1267
 4879 1744 1C0086E5 		str	r0, [r6, #28]	@ _30, g_yuv_image.64_29->data
 4880              	@ armwave.c:790:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 790:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4881              		.loc 1 790 27 view .LVU1268
 4882 1748 080088E5 		str	r0, [r8, #8]	@ _30, g_yuv_shminfo.shmaddr
 791:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 4883              		.loc 1 791 5 is_stmt 1 view .LVU1269
 4884              		.loc 1 793 5 view .LVU1270
 4885              	.LVL282:
 4886              		.loc 1 793 5 is_stmt 0 view .LVU1271
 4887 174c 0C0000DA 		ble	.L229		@,
 4888              	@ armwave.c:794:         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[
 794:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4889              		.loc 1 794 9 view .LVU1272
 4890 1750 04619FE5 		ldr	r6, .L246+28	@ tmp253,
 4891              	.LVL283:
 4892              	.L230:
 4893              		.loc 1 794 9 is_stmt 1 discriminator 3 view .LVU1273
 4894 1754 140093E5 		ldr	r0, [r3, #20]	@ g_yuv_image.69_108->pitches, g_yuv_image.69_108->pitches
 4895 1758 182093E5 		ldr	r2, [r3, #24]	@ g_yuv_image.69_108->offsets, g_yuv_image.69_108->offsets
 4896 175c 0410A0E1 		mov	r1, r4	@, n
 4897 1760 043190E7 		ldr	r3, [r0, r4, lsl #2]	@, *_37
 4898 1764 042192E7 		ldr	r2, [r2, r4, lsl #2]	@, *_34
 4899 1768 0600A0E1 		mov	r0, r6	@, tmp253
 4900 176c FEFFFFEB 		bl	printf		@
 4901              	.LVL284:
 4902              	@ armwave.c:793:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 793:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4903              		.loc 1 793 31 is_stmt 0 discriminator 3 view .LVU1274
 4904 1770 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.69_39, g_yuv_image
 4905              	@ armwave.c:793:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 793:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4906              		.loc 1 793 46 discriminator 3 view .LVU1275
 4907 1774 014084E2 		add	r4, r4, #1	@ n, n,
 4908              	.LVL285:
 4909              	@ armwave.c:793:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 793:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4910              		.loc 1 793 5 discriminator 3 view .LVU1276
 4911 1778 102093E5 		ldr	r2, [r3, #16]	@ g_yuv_image.69_39->num_planes, g_yuv_image.69_39->num_planes
 4912 177c 040052E1 		cmp	r2, r4	@ g_yuv_image.69_39->num_planes, n
 4913 1780 F3FFFFCA 		bgt	.L230		@,
 4914              	.LVL286:
 4915              	.L229:
 795:armwave.c     ****     }
 796:armwave.c     ****     
 797:armwave.c     ****     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4916              		.loc 1 797 5 is_stmt 1 view .LVU1277
 4917              	@ armwave.c:797:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4918              		.loc 1 797 9 is_stmt 0 view .LVU1278
 4919 1784 C4109FE5 		ldr	r1, .L246+16	@,
 4920 1788 000097E5 		ldr	r0, [r7]	@, g_dpy
 4921 178c FEFFFFEB 		bl	XShmAttach		@
 4922              	.LVL287:
 4923              	@ armwave.c:797:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4924              		.loc 1 797 7 view .LVU1279
 4925 1790 000050E3 		cmp	r0, #0	@,
 4926 1794 1600000A 		beq	.L245		@,
 798:armwave.c     ****         printf("Error: Fatal X11: XShmAttached failed\n");
 799:armwave.c     ****         exit (-1);
 800:armwave.c     ****     }
 801:armwave.c     ****     
 802:armwave.c     ****     printf("%d bytes for XvImage, shmid %d, xv_port %d\n", g_yuv_image->data_size, g_yuv_shminfo.sh
 4927              		.loc 1 802 5 is_stmt 1 view .LVU1280
 4928 1798 041095E5 		ldr	r1, [r5, #4]	@ g_yuv_image, g_yuv_image
 4929 179c 003099E5 		ldr	r3, [r9]	@, g_xv_port
 4930 17a0 042098E5 		ldr	r2, [r8, #4]	@, g_yuv_shminfo.shmid
 4931 17a4 0C1091E5 		ldr	r1, [r1, #12]	@, g_yuv_image.71_43->data_size
 4932 17a8 B0009FE5 		ldr	r0, .L246+32	@,
 4933 17ac FEFFFFEB 		bl	printf		@
 4934              	.LVL288:
 803:armwave.c     ****     
 804:armwave.c     ****     // Create the GC
 805:armwave.c     ****     if(g_gc != NULL) {
 4935              		.loc 1 805 5 view .LVU1281
 4936              	@ armwave.c:805:     if(g_gc != NULL) {
 4937              		.loc 1 805 13 is_stmt 0 view .LVU1282
 4938 17b0 081095E5 		ldr	r1, [r5, #8]	@ g_gc.73_47, g_gc
 4939              	@ armwave.c:805:     if(g_gc != NULL) {
 4940              		.loc 1 805 7 view .LVU1283
 4941 17b4 000051E3 		cmp	r1, #0	@ g_gc.73_47,
 4942 17b8 0100000A 		beq	.L232		@,
 806:armwave.c     ****         XFreeGC(g_dpy, g_gc);
 4943              		.loc 1 806 9 is_stmt 1 view .LVU1284
 4944 17bc 000097E5 		ldr	r0, [r7]	@, g_dpy
 4945 17c0 FEFFFFEB 		bl	XFreeGC		@
 4946              	.LVL289:
 4947              	.L232:
 807:armwave.c     ****     }
 808:armwave.c     ****     
 809:armwave.c     ****     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4948              		.loc 1 809 5 view .LVU1285
 4949              	@ armwave.c:809:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4950              		.loc 1 809 12 is_stmt 0 view .LVU1286
 4951 17c4 000097E5 		ldr	r0, [r7]	@, g_dpy
 4952 17c8 2C308DE2 		add	r3, sp, #44	@,,
 4953 17cc 3020A0E3 		mov	r2, #48	@,
 4954 17d0 001095E5 		ldr	r1, [r5]	@, g_window
 4955 17d4 FEFFFFEB 		bl	XCreateGC		@
 4956              	.LVL290:
 4957              	@ armwave.c:809:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4958              		.loc 1 809 10 view .LVU1287
 4959 17d8 080085E5 		str	r0, [r5, #8]	@, g_gc
 810:armwave.c     ****     gc_values.line_width = 1;
 4960              		.loc 1 810 5 is_stmt 1 view .LVU1288
 811:armwave.c     ****     gc_values.cap_style = CapNotLast;
 4961              		.loc 1 811 5 view .LVU1289
 4962              	@ armwave.c:812: }
 812:armwave.c     **** }
 4963              		.loc 1 812 1 is_stmt 0 view .LVU1290
 4964 17dc 88D08DE2 		add	sp, sp, #136	@,,
 4965              		.cfi_remember_state
 4966              		.cfi_def_cfa_offset 32
 4967              		@ sp needed	@
 4968 17e0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 4969              	.LVL291:
 4970              	.L241:
 4971              		.cfi_restore_state
 749:armwave.c     ****         exit(-1);
 4972              		.loc 1 749 9 is_stmt 1 view .LVU1291
 4973 17e4 78009FE5 		ldr	r0, .L246+36	@,
 4974 17e8 FEFFFFEB 		bl	puts		@
 4975              	.LVL292:
 750:armwave.c     ****     }
 4976              		.loc 1 750 9 view .LVU1292
 4977 17ec 0000E0E3 		mvn	r0, #0	@,
 4978 17f0 FEFFFFEB 		bl	exit		@
 4979              	.LVL293:
 4980              	.L245:
 798:armwave.c     ****         exit (-1);
 4981              		.loc 1 798 9 view .LVU1293
 4982 17f4 6C009FE5 		ldr	r0, .L246+40	@,
 4983 17f8 FEFFFFEB 		bl	puts		@
 4984              	.LVL294:
 799:armwave.c     ****     }
 4985              		.loc 1 799 9 view .LVU1294
 4986 17fc 0000E0E3 		mvn	r0, #0	@,
 4987 1800 FEFFFFEB 		bl	exit		@
 4988              	.LVL295:
 4989              	.L244:
 773:armwave.c     ****         exit(-1);
 4990              		.loc 1 773 9 view .LVU1295
 4991 1804 011041E2 		sub	r1, r1, #1	@, p_num_adaptors.54_13,
 4992 1808 5C009FE5 		ldr	r0, .L246+44	@,
 4993              	.LVL296:
 773:armwave.c     ****         exit(-1);
 4994              		.loc 1 773 9 is_stmt 0 view .LVU1296
 4995 180c FEFFFFEB 		bl	printf		@
 4996              	.LVL297:
 774:armwave.c     ****     }
 4997              		.loc 1 774 9 is_stmt 1 view .LVU1297
 4998 1810 0500A0E1 		mov	r0, r5	@, _19
 4999 1814 FEFFFFEB 		bl	exit		@
 5000              	.LVL298:
 5001              	.L243:
 766:armwave.c     ****         exit(-1);
 5002              		.loc 1 766 9 view .LVU1298
 5003 1818 0410A0E1 		mov	r1, r4	@, n
 5004 181c 4C009FE5 		ldr	r0, .L246+48	@,
 5005              	.LVL299:
 766:armwave.c     ****         exit(-1);
 5006              		.loc 1 766 9 is_stmt 0 view .LVU1299
 5007 1820 FEFFFFEB 		bl	printf		@
 5008              	.LVL300:
 767:armwave.c     ****     }
 5009              		.loc 1 767 9 is_stmt 1 view .LVU1300
 5010 1824 0000E0E3 		mvn	r0, #0	@,
 5011 1828 FEFFFFEB 		bl	exit		@
 5012              	.LVL301:
 5013              	.L242:
 758:armwave.c     ****         exit(-1);
 5014              		.loc 1 758 9 view .LVU1301
 5015 182c 0010A0E1 		mov	r1, r0	@, ret
 5016 1830 3C009FE5 		ldr	r0, .L246+52	@,
 5017              	.LVL302:
 758:armwave.c     ****         exit(-1);
 5018              		.loc 1 758 9 is_stmt 0 view .LVU1302
 5019 1834 FEFFFFEB 		bl	printf		@
 5020              	.LVL303:
 759:armwave.c     ****     }
 5021              		.loc 1 759 9 is_stmt 1 view .LVU1303
 5022 1838 0000E0E3 		mvn	r0, #0	@,
 5023 183c FEFFFFEB 		bl	exit		@
 5024              	.LVL304:
 5025              	.L247:
 5026              		.align	2
 5027              	.L246:
 5028 1840 00000000 		.word	g_dpy
 5029 1844 00000000 		.word	g_xv_port
 5030 1848 00000000 		.word	.LANCHOR1
 5031 184c FC040000 		.word	.LC30
 5032 1850 00000000 		.word	g_yuv_shminfo
 5033 1854 59563132 		.word	842094169
 5034 1858 FF030000 		.word	1023
 5035 185c 10050000 		.word	.LC31
 5036 1860 60050000 		.word	.LC33
 5037 1864 BC030000 		.word	.LC26
 5038 1868 38050000 		.word	.LC32
 5039 186c CC040000 		.word	.LC29
 5040 1870 74040000 		.word	.LC28
 5041 1874 1C040000 		.word	.LC27
 5042              		.cfi_endproc
 5043              	.LFE81:
 5045              		.align	2
 5046              		.global	armwave_render_graticule
 5047              		.syntax unified
 5048              		.arm
 5049              		.fpu vfp
 5051              	armwave_render_graticule:
 5052              	.LFB82:
 813:armwave.c     **** 
 814:armwave.c     **** /*
 815:armwave.c     ****  * Render the graticule.
 816:armwave.c     ****  */
 817:armwave.c     **** void armwave_render_graticule()
 818:armwave.c     **** {
 5053              		.loc 1 818 1 view -0
 5054              		.cfi_startproc
 5055              		@ args = 0, pretend = 0, frame = 24
 5056              		@ frame_needed = 0, uses_anonymous_args = 0
 819:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5057              		.loc 1 819 5 view .LVU1305
 820:armwave.c     ****     float gr_size;
 5058              		.loc 1 820 5 view .LVU1306
 821:armwave.c     ****     m = g_armwave_state.frame_margin;
 5059              		.loc 1 821 5 view .LVU1307
 5060              	@ armwave.c:818: {
 818:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5061              		.loc 1 818 1 is_stmt 0 view .LVU1308
 5062 1878 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 5063              		.cfi_def_cfa_offset 36
 5064              		.cfi_offset 4, -36
 5065              		.cfi_offset 5, -32
 5066              		.cfi_offset 6, -28
 5067              		.cfi_offset 7, -24
 5068              		.cfi_offset 8, -20
 5069              		.cfi_offset 9, -16
 5070              		.cfi_offset 10, -12
 5071              		.cfi_offset 11, -8
 5072              		.cfi_offset 14, -4
 5073 187c 028B2DED 		vpush.64	{d8}	@
 5074              		.cfi_def_cfa_offset 44
 5075              		.cfi_offset 80, -44
 5076              		.cfi_offset 81, -40
 5077              	@ armwave.c:822:     w = g_canvas_dims.w - m;
 822:armwave.c     ****     w = g_canvas_dims.w - m;
 5078              		.loc 1 822 22 view .LVU1309
 5079 1880 9C329FE5 		ldr	r3, .L270+4	@ tmp177,
 5080              	@ armwave.c:821:     m = g_armwave_state.frame_margin;
 821:armwave.c     ****     m = g_armwave_state.frame_margin;
 5081              		.loc 1 821 7 view .LVU1310
 5082 1884 9C629FE5 		ldr	r6, .L270+8	@ tmp261,
 5083              	@ armwave.c:830:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 823:armwave.c     ****     h = g_canvas_dims.h - m;
 824:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 825:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 826:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
 827:armwave.c     ****     ch = h - m;
 828:armwave.c     ****     cw = w - m;
 829:armwave.c     ****     
 830:armwave.c     ****     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5084              		.loc 1 830 5 view .LVU1311
 5085 1888 9C229FE5 		ldr	r2, .L270+12	@ tmp181,
 5086 188c 9C529FE5 		ldr	r5, .L270+16	@ tmp263,
 5087 1890 9C729FE5 		ldr	r7, .L270+20	@ tmp262,
 5088              	@ armwave.c:821:     m = g_armwave_state.frame_margin;
 821:armwave.c     ****     w = g_canvas_dims.w - m;
 5089              		.loc 1 821 7 view .LVU1312
 5090 1894 589096E5 		ldr	r9, [r6, #88]	@ m, g_armwave_state.frame_margin
 5091              	.LVL305:
 822:armwave.c     ****     w = g_canvas_dims.w - m;
 5092              		.loc 1 822 5 is_stmt 1 view .LVU1313
 5093              	@ armwave.c:822:     w = g_canvas_dims.w - m;
 822:armwave.c     ****     w = g_canvas_dims.w - m;
 5094              		.loc 1 822 7 is_stmt 0 view .LVU1314
 5095 1898 00C093E5 		ldr	ip, [r3]	@ g_canvas_dims.w, g_canvas_dims.w
 5096              	@ armwave.c:818: {
 818:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5097              		.loc 1 818 1 view .LVU1315
 5098 189c 2CD04DE2 		sub	sp, sp, #44	@,,
 5099              		.cfi_def_cfa_offset 88
 5100              	@ armwave.c:830:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5101              		.loc 1 830 5 view .LVU1316
 5102 18a0 002092E5 		ldr	r2, [r2]	@, g_grat_colour.pixel
 5103              	@ armwave.c:822:     w = g_canvas_dims.w - m;
 822:armwave.c     ****     h = g_canvas_dims.h - m;
 5104              		.loc 1 822 7 view .LVU1317
 5105 18a4 09C04CE0 		sub	ip, ip, r9	@ w, g_canvas_dims.w, m
 5106              	@ armwave.c:830:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5107              		.loc 1 830 5 view .LVU1318
 5108 18a8 081095E5 		ldr	r1, [r5, #8]	@, g_gc
 5109 18ac 000097E5 		ldr	r0, [r7]	@, g_dpy
 5110              	@ armwave.c:823:     h = g_canvas_dims.h - m;
 823:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5111              		.loc 1 823 22 view .LVU1319
 5112 18b0 044093E5 		ldr	r4, [r3, #4]	@ _2, g_canvas_dims.h
 5113              	@ armwave.c:822:     w = g_canvas_dims.w - m;
 822:armwave.c     ****     h = g_canvas_dims.h - m;
 5114              		.loc 1 822 7 view .LVU1320
 5115 18b4 1CC08DE5 		str	ip, [sp, #28]	@ w, %sfp
 5116              	.LVL306:
 823:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5117              		.loc 1 823 5 is_stmt 1 view .LVU1321
 5118              	@ armwave.c:824:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 824:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5119              		.loc 1 824 35 is_stmt 0 view .LVU1322
 5120 18b8 1B8A96ED 		vldr.32	s16, [r6, #108]	@ _3, g_armwave_state.subdiv_frac
 5121              	@ armwave.c:830:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5122              		.loc 1 830 5 view .LVU1323
 5123 18bc FEFFFFEB 		bl	XSetForeground		@
 5124              	.LVL307:
 5125              	@ armwave.c:832:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 831:armwave.c     ****     
 832:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5126              		.loc 1 832 23 view .LVU1324
 5127 18c0 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5128              	@ armwave.c:823:     h = g_canvas_dims.h - m;
 823:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5129              		.loc 1 823 7 view .LVU1325
 5130 18c4 092044E0 		sub	r2, r4, r9	@ h, _2, m
 5131              	@ armwave.c:832:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5132              		.loc 1 832 7 view .LVU1326
 5133 18c8 010A13E3 		tst	r3, #4096	@ _8,
 5134              	@ armwave.c:823:     h = g_canvas_dims.h - m;
 823:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5135              		.loc 1 823 7 view .LVU1327
 5136 18cc 14208DE5 		str	r2, [sp, #20]	@ h, %sfp
 5137              	.LVL308:
 824:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5138              		.loc 1 824 5 is_stmt 1 view .LVU1328
 825:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
 5139              		.loc 1 825 5 view .LVU1329
 826:armwave.c     ****     ch = h - m;
 5140              		.loc 1 826 5 view .LVU1330
 827:armwave.c     ****     cw = w - m;
 5141              		.loc 1 827 5 view .LVU1331
 828:armwave.c     ****     
 5142              		.loc 1 828 5 view .LVU1332
 830:armwave.c     ****     
 5143              		.loc 1 830 5 view .LVU1333
 5144              		.loc 1 832 5 view .LVU1334
 5145              	@ armwave.c:832:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5146              		.loc 1 832 7 is_stmt 0 view .LVU1335
 5147 18d0 6E00001A 		bne	.L268		@,
 5148              	.LVL309:
 5149              	.L249:
 833:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, w, m);
 834:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 835:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 836:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, w, m, w, h);
 837:armwave.c     ****     }
 838:armwave.c     ****     
 839:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 5150              		.loc 1 839 5 is_stmt 1 view .LVU1336
 5151              	@ armwave.c:839:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 5152              		.loc 1 839 7 is_stmt 0 view .LVU1337
 5153 18d4 020A13E3 		tst	r3, #8192	@ _8,
 5154 18d8 6900000A 		beq	.L248		@,
 840:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5155              		.loc 1 840 9 is_stmt 1 view .LVU1338
 5156              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 5157              		.loc 1 841 9 is_stmt 0 view .LVU1339
 5158 18dc 5C2096E5 		ldr	r2, [r6, #92]	@ tmp290, g_armwave_state.n_hdiv
 5159              	@ armwave.c:840:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 840:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5160              		.loc 1 840 17 view .LVU1340
 5161 18e0 077A9DED 		vldr.32	s14, [sp, #28]	@ int	@ w, %sfp
 5162              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 5163              		.loc 1 841 9 view .LVU1341
 5164 18e4 000052E3 		cmp	r2, #0	@ tmp290,
 5165              	@ armwave.c:840:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 840:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5166              		.loc 1 840 24 view .LVU1342
 5167 18e8 902A07EE 		vmov	s15, r2	@ int	@ tmp291,
 5168              	@ armwave.c:840:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 840:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5169              		.loc 1 840 17 view .LVU1343
 5170 18ec C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, w
 5171              	@ armwave.c:840:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 840:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5172              		.loc 1 840 24 view .LVU1344
 5173 18f0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp217, tmp291
 5174              	@ armwave.c:840:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 840:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5175              		.loc 1 840 17 view .LVU1345
 5176 18f4 278AC7EE 		vdiv.f32	s17, s14, s15	@ gr_size, tmp216, tmp217
 5177              	.LVL310:
 5178              		.loc 1 841 9 is_stmt 1 view .LVU1346
 5179              		.loc 1 841 9 is_stmt 0 view .LVU1347
 5180 18f8 440000DA 		ble	.L258		@,
 5181              	@ armwave.c:824:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 824:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5182              		.loc 1 824 18 view .LVU1348
 5183 18fc 877A9FED 		vldr.32	s14, .L270	@ tmp224,
 5184              	@ armwave.c:850:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 842:armwave.c     ****             if(i > 0) {
 843:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, p, m, p, h);
 844:armwave.c     ****             }
 845:armwave.c     ****             
 846:armwave.c     ****             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 847:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 848:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 849:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 850:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5185              		.loc 1 850 66 view .LVU1349
 5186 1900 A44F84E0 		add	r4, r4, r4, lsr #31	@ tmp226, _2, _2,
 5187              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****             if(i > 0) {
 5188              		.loc 1 841 22 view .LVU1350
 5189 1904 10908DE5 		str	r9, [sp, #16]	@ m, %sfp
 5190              	@ armwave.c:850:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 5191              		.loc 1 850 66 view .LVU1351
 5192 1908 C440A0E1 		asr	r4, r4, #1	@ tmp227, tmp226,
 5193              	@ armwave.c:850:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 5194              		.loc 1 850 21 view .LVU1352
 5195 190c 082044E2 		sub	r2, r4, #8	@ _42, tmp227,
 5196 1910 24208DE5 		str	r2, [sp, #36]	@ _42, %sfp
 5197 1914 08B084E2 		add	fp, r4, #8	@ _43, tmp227,
 5198              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****             if(i > 0) {
 5199              		.loc 1 841 15 view .LVU1353
 5200 1918 0080A0E3 		mov	r8, #0	@ i,
 5201 191c 18908DE5 		str	r9, [sp, #24]	@ m, %sfp
 5202              	@ armwave.c:824:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 824:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5203              		.loc 1 824 18 view .LVU1354
 5204 1920 087AC7EE 		vdiv.f32	s15, s14, s16	@ tmp223, tmp224, _3
 5205              	@ armwave.c:824:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 824:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5206              		.loc 1 824 11 view .LVU1355
 5207 1924 E77AFDEE 		vcvt.s32.f32	s15, s15	@ n_sub, tmp223
 5208 1928 90AA17EE 		vmov	r10, s15	@ int	@ n_sub, n_sub
 5209 192c 140000EA 		b	.L254		@
 5210              	.LVL311:
 5211              	.L259:
 5212              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****             if(i > 0) {
 5213              		.loc 1 841 62 view .LVU1356
 5214 1930 888A38EE 		vadd.f32	s16, s17, s16	@ tmp236, gr_size, _157
 5215              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****             if(i > 0) {
 5216              		.loc 1 841 9 view .LVU1357
 5217 1934 5C3096E5 		ldr	r3, [r6, #92]	@ g_armwave_state.n_hdiv, g_armwave_state.n_hdiv
 5218              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****             if(i > 0) {
 5219              		.loc 1 841 56 view .LVU1358
 5220 1938 018088E2 		add	r8, r8, #1	@ i, i,
 5221              	.LVL312:
 5222              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****             if(i > 0) {
 5223              		.loc 1 841 9 view .LVU1359
 5224 193c 080053E1 		cmp	r3, r8	@ g_armwave_state.n_hdiv, i
 5225              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****             if(i > 0) {
 5226              		.loc 1 841 62 view .LVU1360
 5227 1940 C87AFDEE 		vcvt.s32.f32	s15, s16	@ p, tmp236
 5228 1944 047ACDED 		vstr.32	s15, [sp, #16]	@ int	@ p, %sfp
 5229              	.LVL313:
 5230              	@ armwave.c:841:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 841:armwave.c     ****             if(i > 0) {
 5231              		.loc 1 841 9 view .LVU1361
 5232 1948 2F0000DA 		ble	.L269		@,
 842:armwave.c     ****             if(i > 0) {
 5233              		.loc 1 842 13 is_stmt 1 view .LVU1362
 5234              	@ armwave.c:842:             if(i > 0) {
 842:armwave.c     ****             if(i > 0) {
 5235              		.loc 1 842 15 is_stmt 0 view .LVU1363
 5236 194c 000058E3 		cmp	r8, #0	@ i,
 5237 1950 0A0000DA 		ble	.L255		@,
 843:armwave.c     ****             }
 5238              		.loc 1 843 17 is_stmt 1 view .LVU1364
 5239 1954 14309DE5 		ldr	r3, [sp, #20]	@ h, %sfp
 5240 1958 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5241 195c 08308DE5 		str	r3, [sp, #8]	@ h,
 5242 1960 10309DE5 		ldr	r3, [sp, #16]	@ p, %sfp
 5243 1964 001095E5 		ldr	r1, [r5]	@, g_window
 5244 1968 04308DE5 		str	r3, [sp, #4]	@ p,
 5245 196c 18309DE5 		ldr	r3, [sp, #24]	@ m, %sfp
 5246 1970 000097E5 		ldr	r0, [r7]	@, g_dpy
 5247 1974 00308DE5 		str	r3, [sp]	@ m,
 5248 1978 10309DE5 		ldr	r3, [sp, #16]	@, %sfp
 5249 197c FEFFFFEB 		bl	XDrawLine		@
 5250              	.LVL314:
 5251              	.L255:
 843:armwave.c     ****             }
 5252              		.loc 1 843 17 is_stmt 0 view .LVU1365
 5253 1980 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5254              	.LVL315:
 5255              	.L254:
 846:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 5256              		.loc 1 846 13 is_stmt 1 view .LVU1366
 5257 1984 047ADDED 		vldr.32	s15, [sp, #16]	@ int	@ p, %sfp
 5258              	@ armwave.c:846:             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 846:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 5259              		.loc 1 846 15 is_stmt 0 view .LVU1367
 5260 1988 020913E3 		tst	r3, #32768	@ _8,
 5261 198c E78AB8EE 		vcvt.f32.s32	s16, s15	@ _157, p
 5262 1990 E6FFFF0A 		beq	.L259		@,
 5263              	.LVL316:
 5264              	@ armwave.c:847:                 for(j = 1; j < n_sub; j++) {
 847:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5265              		.loc 1 847 17 view .LVU1368
 5266 1994 01005AE3 		cmp	r10, #1	@ n_sub,
 5267 1998 E4FFFFDA 		ble	.L259		@,
 5268              	@ armwave.c:847:                 for(j = 1; j < n_sub; j++) {
 847:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5269              		.loc 1 847 23 view .LVU1369
 5270 199c 24909DE5 		ldr	r9, [sp, #36]	@ _42, %sfp
 5271 19a0 0140A0E3 		mov	r4, #1	@ j,
 5272 19a4 20808DE5 		str	r8, [sp, #32]	@ i, %sfp
 5273              	.LVL317:
 5274              	.L260:
 848:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5275              		.loc 1 848 21 is_stmt 1 discriminator 3 view .LVU1370
 5276              	@ armwave.c:848:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 848:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5277              		.loc 1 848 38 is_stmt 0 discriminator 3 view .LVU1371
 5278 19a8 1B7AD6ED 		vldr.32	s15, [r6, #108]	@ g_armwave_state.subdiv_frac, g_armwave_state.subdiv_frac
 5279              	@ armwave.c:848:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 848:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5280              		.loc 1 848 68 discriminator 3 view .LVU1372
 5281 19ac 104A07EE 		vmov	s14, r4	@ int	@ j, j
 5282              	@ armwave.c:848:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 848:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5283              		.loc 1 848 27 discriminator 3 view .LVU1373
 5284 19b0 486AF0EE 		vmov.f32	s13, s16	@ tmp244, _157
 5285              	@ armwave.c:849:                     printf("%3d, %3d\n", q, p);
 849:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5286              		.loc 1 849 21 discriminator 3 view .LVU1374
 5287 19b4 10209DE5 		ldr	r2, [sp, #16]	@, %sfp
 5288              	@ armwave.c:848:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 848:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5289              		.loc 1 848 38 discriminator 3 view .LVU1375
 5290 19b8 A77A68EE 		vmul.f32	s15, s17, s15	@ tmp240, gr_size, g_armwave_state.subdiv_frac
 5291              	@ armwave.c:848:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 848:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5292              		.loc 1 848 68 discriminator 3 view .LVU1376
 5293 19bc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp242, j
 5294              	@ armwave.c:849:                     printf("%3d, %3d\n", q, p);
 849:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5295              		.loc 1 849 21 discriminator 3 view .LVU1377
 5296 19c0 70019FE5 		ldr	r0, .L270+24	@,
 5297              	@ armwave.c:847:                 for(j = 1; j < n_sub; j++) {
 847:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5298              		.loc 1 847 40 discriminator 3 view .LVU1378
 5299 19c4 014084E2 		add	r4, r4, #1	@ j, j,
 5300              	.LVL318:
 5301              	@ armwave.c:848:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 848:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5302              		.loc 1 848 27 discriminator 3 view .LVU1379
 5303 19c8 876A47EE 		vmla.f32	s13, s15, s14	@ tmp244, tmp240, tmp242
 5304              	@ armwave.c:848:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 848:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5305              		.loc 1 848 23 discriminator 3 view .LVU1380
 5306 19cc E67AFDEE 		vcvt.s32.f32	s15, s13	@ q, tmp244
 5307 19d0 908A17EE 		vmov	r8, s15	@ int	@ q, q
 5308              	.LVL319:
 849:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5309              		.loc 1 849 21 is_stmt 1 discriminator 3 view .LVU1381
 5310 19d4 901A17EE 		vmov	r1, s15	@ int	@, q
 5311 19d8 FEFFFFEB 		bl	printf		@
 5312              	.LVL320:
 5313              		.loc 1 850 21 discriminator 3 view .LVU1382
 5314 19dc 08B08DE5 		str	fp, [sp, #8]	@ _43,
 5315 19e0 04808DE5 		str	r8, [sp, #4]	@ q,
 5316 19e4 0830A0E1 		mov	r3, r8	@, q
 5317 19e8 00908DE5 		str	r9, [sp]	@ _42,
 5318 19ec 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5319 19f0 001095E5 		ldr	r1, [r5]	@, g_window
 5320 19f4 000097E5 		ldr	r0, [r7]	@, g_dpy
 5321 19f8 FEFFFFEB 		bl	XDrawLine		@
 5322              	.LVL321:
 5323              	@ armwave.c:847:                 for(j = 1; j < n_sub; j++) {
 847:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5324              		.loc 1 847 17 is_stmt 0 discriminator 3 view .LVU1383
 5325 19fc 04005AE1 		cmp	r10, r4	@ n_sub, j
 5326 1a00 E8FFFF1A 		bne	.L260		@,
 5327 1a04 20809DE5 		ldr	r8, [sp, #32]	@ i, %sfp
 5328              	.LVL322:
 847:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5329              		.loc 1 847 17 discriminator 3 view .LVU1384
 5330 1a08 C8FFFFEA 		b	.L259		@
 5331              	.LVL323:
 5332              	.L269:
 847:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5333              		.loc 1 847 17 discriminator 3 view .LVU1385
 5334 1a0c 18909DE5 		ldr	r9, [sp, #24]	@ m, %sfp
 5335              	.LVL324:
 5336              	.L258:
 851:armwave.c     ****                 }
 852:armwave.c     ****             }
 853:armwave.c     ****         }
 854:armwave.c     ****         
 855:armwave.c     ****         gr_size = (h / (float)g_armwave_state.n_vdiv);
 5337              		.loc 1 855 9 is_stmt 1 view .LVU1386
 5338              	@ armwave.c:855:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 5339              		.loc 1 855 22 is_stmt 0 view .LVU1387
 5340 1a10 057ADDED 		vldr.32	s15, [sp, #20]	@ int	@ h, %sfp
 5341              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 856:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5342              		.loc 1 856 9 view .LVU1388
 5343 1a14 603096E5 		ldr	r3, [r6, #96]	@ tmp295, g_armwave_state.n_vdiv
 5344 1a18 010053E3 		cmp	r3, #1	@ tmp295,
 5345              	@ armwave.c:855:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 855:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5346              		.loc 1 855 22 view .LVU1389
 5347 1a1c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp219, h
 5348              	@ armwave.c:855:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 855:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5349              		.loc 1 855 24 view .LVU1390
 5350 1a20 187AD6ED 		vldr.32	s15, [r6, #96]	@ int	@ tmp294, g_armwave_state.n_vdiv
 5351              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5352              		.loc 1 856 15 view .LVU1391
 5353 1a24 0140A0C3 		movgt	r4, #1	@ i,
 5354 1a28 1C809DC5 		ldrgt	r8, [sp, #28]	@ w, %sfp
 5355              	@ armwave.c:855:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 855:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5356              		.loc 1 855 24 view .LVU1392
 5357 1a2c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, tmp294
 5358              	@ armwave.c:855:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 855:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5359              		.loc 1 855 17 view .LVU1393
 5360 1a30 278AC7EE 		vdiv.f32	s17, s14, s15	@ gr_size, tmp219, tmp220
 5361              	.LVL325:
 5362              		.loc 1 856 9 is_stmt 1 view .LVU1394
 5363              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5364              		.loc 1 856 26 is_stmt 0 view .LVU1395
 5365 1a34 909A07EE 		vmov	s15, r9	@ int	@ m, m
 5366 1a38 E78AB8EE 		vcvt.f32.s32	s16, s15	@ tmp221, m
 5367 1a3c 288A38EE 		vadd.f32	s16, s16, s17	@ tmp222, tmp221, gr_size
 5368              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5369              		.loc 1 856 22 view .LVU1396
 5370 1a40 C88ABDEE 		vcvt.s32.f32	s16, s16	@ p, tmp222
 5371              	.LVL326:
 5372              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5373              		.loc 1 856 9 view .LVU1397
 5374 1a44 0E0000DA 		ble	.L248		@,
 5375              	.LVL327:
 5376              	.L252:
 857:armwave.c     ****             XDrawLine(g_dpy, g_window, g_gc, m, p, w, p);
 5377              		.loc 1 857 13 is_stmt 1 discriminator 3 view .LVU1398
 5378 1a48 028A8DED 		vstr.32	s16, [sp, #8]	@ int	@ p,
 5379 1a4c 008A8DED 		vstr.32	s16, [sp]	@ int	@ p,
 5380 1a50 0930A0E1 		mov	r3, r9	@, m
 5381 1a54 04808DE5 		str	r8, [sp, #4]	@ w,
 5382 1a58 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5383 1a5c 001095E5 		ldr	r1, [r5]	@, g_window
 5384 1a60 000097E5 		ldr	r0, [r7]	@, g_dpy
 5385 1a64 FEFFFFEB 		bl	XDrawLine		@
 5386              	.LVL328:
 5387              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 856:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5388              		.loc 1 856 72 is_stmt 0 discriminator 3 view .LVU1399
 5389 1a68 C88AB8EE 		vcvt.f32.s32	s16, s16	@ tmp258, p
 5390              	.LVL329:
 5391              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 856:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5392              		.loc 1 856 9 discriminator 3 view .LVU1400
 5393 1a6c 603096E5 		ldr	r3, [r6, #96]	@ g_armwave_state.n_vdiv, g_armwave_state.n_vdiv
 5394              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 856:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5395              		.loc 1 856 66 discriminator 3 view .LVU1401
 5396 1a70 014084E2 		add	r4, r4, #1	@ i, i,
 5397              	.LVL330:
 5398              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 856:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5399              		.loc 1 856 9 discriminator 3 view .LVU1402
 5400 1a74 040053E1 		cmp	r3, r4	@ g_armwave_state.n_vdiv, i
 5401              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 856:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5402              		.loc 1 856 72 discriminator 3 view .LVU1403
 5403 1a78 288A38EE 		vadd.f32	s16, s16, s17	@ _56, tmp258, gr_size
 5404 1a7c C88ABDEE 		vcvt.s32.f32	s16, s16	@ p, _56
 5405              	.LVL331:
 5406              	@ armwave.c:856:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 856:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5407              		.loc 1 856 9 discriminator 3 view .LVU1404
 5408 1a80 F0FFFFCA 		bgt	.L252		@,
 5409              	.LVL332:
 5410              	.L248:
 5411              	@ armwave.c:874: }
 858:armwave.c     ****         }
 859:armwave.c     ****     }
 860:armwave.c     ****     
 861:armwave.c     ****     /*
 862:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 863:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 864:armwave.c     ****         
 865:armwave.c     ****         for(i = 0, p = m + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 866:armwave.c     ****             for(j = 0; j < n_sub; j++) {
 867:armwave.c     ****                 q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 868:armwave.c     ****                 printf("%3d, %3d\n", q, p);
 869:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, q, m + (ch / 2) - 16, q, m + (ch / 2) + 16);
 870:armwave.c     ****             }
 871:armwave.c     ****         }
 872:armwave.c     ****     }
 873:armwave.c     ****     */
 874:armwave.c     **** }
 5412              		.loc 1 874 1 view .LVU1405
 5413 1a84 2CD08DE2 		add	sp, sp, #44	@,,
 5414              		.cfi_remember_state
 5415              		.cfi_def_cfa_offset 44
 5416              		@ sp needed	@
 5417 1a88 028BBDEC 		vldm	sp!, {d8}	@
 5418              		.cfi_restore 80
 5419              		.cfi_restore 81
 5420              		.cfi_def_cfa_offset 36
 5421 1a8c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 5422              	.LVL333:
 5423              	.L268:
 5424              		.cfi_restore_state
 833:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5425              		.loc 1 833 9 is_stmt 1 view .LVU1406
 5426 1a90 1C809DE5 		ldr	r8, [sp, #28]	@ w, %sfp
 5427              	@ armwave.c:834:         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 834:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 5428              		.loc 1 834 9 is_stmt 0 view .LVU1407
 5429 1a94 09A044E0 		sub	r10, r4, r9	@ h, _2, m
 5430              	@ armwave.c:833:         XDrawLine(g_dpy, g_window, g_gc, m, m, w, m);
 833:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5431              		.loc 1 833 9 view .LVU1408
 5432 1a98 0930A0E1 		mov	r3, r9	@, m
 5433 1a9c 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5434              	.LVL334:
 833:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5435              		.loc 1 833 9 view .LVU1409
 5436 1aa0 001095E5 		ldr	r1, [r5]	@, g_window
 5437 1aa4 08908DE5 		str	r9, [sp, #8]	@ m,
 5438 1aa8 04808DE5 		str	r8, [sp, #4]	@ w,
 5439 1aac 00908DE5 		str	r9, [sp]	@ m,
 5440 1ab0 000097E5 		ldr	r0, [r7]	@, g_dpy
 5441 1ab4 FEFFFFEB 		bl	XDrawLine		@
 5442              	.LVL335:
 834:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 5443              		.loc 1 834 9 is_stmt 1 view .LVU1410
 5444 1ab8 0A30A0E1 		mov	r3, r10	@ h, h
 5445 1abc 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5446 1ac0 08018DE8 		stm	sp, {r3, r8}	@,,
 5447 1ac4 001095E5 		ldr	r1, [r5]	@, g_window
 5448 1ac8 0930A0E1 		mov	r3, r9	@, m
 5449 1acc 08A08DE5 		str	r10, [sp, #8]	@ h,
 5450 1ad0 000097E5 		ldr	r0, [r7]	@, g_dpy
 5451 1ad4 FEFFFFEB 		bl	XDrawLine		@
 5452              	.LVL336:
 835:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, w, m, w, h);
 5453              		.loc 1 835 9 view .LVU1411
 5454 1ad8 0930A0E1 		mov	r3, r9	@, m
 5455 1adc 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5456 1ae0 001095E5 		ldr	r1, [r5]	@, g_window
 5457 1ae4 08A08DE5 		str	r10, [sp, #8]	@ h,
 5458 1ae8 04908DE5 		str	r9, [sp, #4]	@ m,
 5459 1aec 00908DE5 		str	r9, [sp]	@ m,
 5460 1af0 000097E5 		ldr	r0, [r7]	@, g_dpy
 5461 1af4 FEFFFFEB 		bl	XDrawLine		@
 5462              	.LVL337:
 836:armwave.c     ****     }
 5463              		.loc 1 836 9 view .LVU1412
 5464 1af8 0830A0E1 		mov	r3, r8	@, w
 5465 1afc 08A08DE5 		str	r10, [sp, #8]	@ h,
 5466 1b00 04808DE5 		str	r8, [sp, #4]	@ w,
 5467 1b04 00908DE5 		str	r9, [sp]	@ m,
 5468 1b08 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5469 1b0c 001095E5 		ldr	r1, [r5]	@, g_window
 5470 1b10 000097E5 		ldr	r0, [r7]	@, g_dpy
 5471 1b14 FEFFFFEB 		bl	XDrawLine		@
 5472              	.LVL338:
 5473 1b18 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5474 1b1c 6CFFFFEA 		b	.L249		@
 5475              	.L271:
 5476              		.align	2
 5477              	.L270:
 5478 1b20 0000803F 		.word	1065353216
 5479 1b24 00000000 		.word	g_canvas_dims
 5480 1b28 00000000 		.word	g_armwave_state
 5481 1b2c 00000000 		.word	g_grat_colour
 5482 1b30 00000000 		.word	.LANCHOR1
 5483 1b34 00000000 		.word	g_dpy
 5484 1b38 8C050000 		.word	.LC34
 5485              		.cfi_endproc
 5486              	.LFE82:
 5488              		.global	__aeabi_idivmod
 5489              		.align	2
 5490              		.global	armwave_render_frame_x11
 5491              		.syntax unified
 5492              		.arm
 5493              		.fpu vfp
 5495              	armwave_render_frame_x11:
 5496              	.LFB83:
 875:armwave.c     **** 
 876:armwave.c     **** /*
 877:armwave.c     ****  * Run one rendering tick.
 878:armwave.c     ****  */
 879:armwave.c     **** void armwave_render_frame_x11()
 880:armwave.c     **** {
 5497              		.loc 1 880 1 view -0
 5498              		.cfi_startproc
 5499              		@ args = 0, pretend = 0, frame = 16
 5500              		@ frame_needed = 0, uses_anonymous_args = 0
 881:armwave.c     ****     Window _dw;
 5501              		.loc 1 881 5 view .LVU1414
 882:armwave.c     ****     int _d, _w, _h;
 5502              		.loc 1 882 5 view .LVU1415
 883:armwave.c     ****     int m = g_armwave_state.frame_margin; 
 5503              		.loc 1 883 5 view .LVU1416
 5504              	@ armwave.c:885:     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 884:armwave.c     ****     
 885:armwave.c     ****     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 5505              		.loc 1 885 5 is_stmt 0 view .LVU1417
 5506 1b3c B4319FE5 		ldr	r3, .L283	@ tmp162,
 5507 1b40 B4219FE5 		ldr	r2, .L283+4	@ tmp161,
 5508              	@ armwave.c:880: {
 880:armwave.c     ****     Window _dw;
 5509              		.loc 1 880 1 view .LVU1418
 5510 1b44 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 5511              		.cfi_def_cfa_offset 28
 5512              		.cfi_offset 4, -28
 5513              		.cfi_offset 5, -24
 5514              		.cfi_offset 6, -20
 5515              		.cfi_offset 7, -16
 5516              		.cfi_offset 8, -12
 5517              		.cfi_offset 9, -8
 5518              		.cfi_offset 14, -4
 5519 1b48 3CD04DE2 		sub	sp, sp, #60	@,,
 5520              		.cfi_def_cfa_offset 88
 5521              	@ armwave.c:885:     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 5522              		.loc 1 885 5 view .LVU1419
 5523 1b4c 001093E5 		ldr	r1, [r3]	@, g_n_test_waves
 5524 1b50 000092E5 		ldr	r0, [r2]	@, g_frame_num
 5525 1b54 FEFFFFEB 		bl	__aeabi_idivmod		@
 5526              	.LVL339:
 5527              	@ armwave.c:883:     int m = g_armwave_state.frame_margin; 
 883:armwave.c     ****     int m = g_armwave_state.frame_margin; 
 5528              		.loc 1 883 9 view .LVU1420
 5529 1b58 A0419FE5 		ldr	r4, .L283+8	@ tmp252,
 5530              	.LBB130:
 5531              	.LBB131:
 5532              	@ armwave.c:494:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 494:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5533              		.loc 1 494 7 view .LVU1421
 5534 1b5c 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 5535              	.LBE131:
 5536              	.LBE130:
 5537              	@ armwave.c:883:     int m = g_armwave_state.frame_margin; 
 883:armwave.c     ****     
 5538              		.loc 1 883 9 view .LVU1422
 5539 1b60 587094E5 		ldr	r7, [r4, #88]	@ m, g_armwave_state.frame_margin
 5540              	.LVL340:
 5541              		.loc 1 885 5 is_stmt 1 view .LVU1423
 5542              	.LBB134:
 5543              	.LBI130:
 492:armwave.c     **** {
 5544              		.loc 1 492 6 view .LVU1424
 5545              	.LBB132:
 494:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5546              		.loc 1 494 5 view .LVU1425
 5547              	@ armwave.c:494:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 494:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5548              		.loc 1 494 7 is_stmt 0 view .LVU1426
 5549 1b64 010053E1 		cmp	r3, r1	@ g_armwave_state.test_wave_buffer_nsets, tmp170
 5550 1b68 5D00003A 		bcc	.L282		@,
 499:armwave.c     **** }
 5551              		.loc 1 499 5 is_stmt 1 view .LVU1427
 5552              	@ armwave.c:499:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 499:armwave.c     **** }
 5553              		.loc 1 499 111 is_stmt 0 view .LVU1428
 5554 1b6c 1C2094E5 		ldr	r2, [r4, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 5555              	@ armwave.c:499:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 499:armwave.c     **** }
 5556              		.loc 1 499 68 view .LVU1429
 5557 1b70 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 5558 1b74 923121E0 		mla	r1, r2, r1, r3	@ tmp179, g_armwave_state.test_wave_buffer_stride, tmp170, g_armwave_state.test
 5559              	@ armwave.c:499:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 499:armwave.c     **** }
 5560              		.loc 1 499 33 view .LVU1430
 5561 1b78 141084E5 		str	r1, [r4, #20]	@ tmp179, g_armwave_state.wave_buffer
 5562              	.L274:
 499:armwave.c     **** }
 5563              		.loc 1 499 33 view .LVU1431
 5564              	.LBE132:
 5565              	.LBE134:
 886:armwave.c     ****     armwave_generate();
 5566              		.loc 1 886 5 is_stmt 1 view .LVU1432
 5567              	.LBB135:
 5568              	.LBI135:
 380:armwave.c     **** {
 5569              		.loc 1 380 6 view .LVU1433
 5570              	.LBB136:
 382:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 5571              		.loc 1 382 5 view .LVU1434
 383:armwave.c     **** 
 5572              		.loc 1 383 5 view .LVU1435
 5573              	@ armwave.c:386:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 386:armwave.c     **** 
 5574              		.loc 1 386 5 is_stmt 0 view .LVU1436
 5575 1b7c 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 5576 1b80 0010A0E3 		mov	r1, #0	@,
 5577 1b84 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 5578              	@ armwave.c:383:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 383:armwave.c     **** 
 5579              		.loc 1 383 14 view .LVU1437
 5580 1b88 4C9094E5 		ldr	r9, [r4, #76]	@ xx_rem, g_armwave_state.wave_length
 5581              	.LVL341:
 386:armwave.c     **** 
 5582              		.loc 1 386 5 is_stmt 1 view .LVU1438
 5583 1b8c FEFFFFEB 		bl	memset		@
 5584              	.LVL342:
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5585              		.loc 1 389 5 view .LVU1439
 5586              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5587              		.loc 1 389 68 is_stmt 0 view .LVU1440
 5588 1b90 445094E5 		ldr	r5, [r4, #68]	@ _56, g_armwave_state.slice_height
 5589              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5590              		.loc 1 389 51 view .LVU1441
 5591 1b94 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 5592 1b98 0510A0E1 		mov	r1, r5	@, _56
 5593 1b9c FEFFFFEB 		bl	__aeabi_idiv		@
 5594              	.LVL343:
 5595              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5596              		.loc 1 389 5 view .LVU1442
 5597 1ba0 000050E3 		cmp	r0, #0	@ tmp194
 5598 1ba4 5100000A 		beq	.L279		@,
 5599              	@ armwave.c:383:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 383:armwave.c     **** 
 5600              		.loc 1 383 52 view .LVU1443
 5601 1ba8 0060A0E3 		mov	r6, #0	@ ypos,
 5602              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5603              		.loc 1 389 12 view .LVU1444
 5604 1bac 0680A0E1 		mov	r8, r6	@ yy, ypos
 5605              	.LVL344:
 5606              	.L276:
 390:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 5607              		.loc 1 390 9 is_stmt 1 view .LVU1445
 5608 1bb0 980500E0 		mul	r0, r8, r5	@, yy, tmp1
 5609 1bb4 0510A0E1 		mov	r1, r5	@, _56
 5610 1bb8 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 5611              	.LVL345:
 391:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5612              		.loc 1 391 9 view .LVU1446
 5613              	@ armwave.c:391:         xx_rem -= g_armwave_state.slice_height;
 391:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5614              		.loc 1 391 34 is_stmt 0 view .LVU1447
 5615 1bbc 445094E5 		ldr	r5, [r4, #68]	@ _56, g_armwave_state.slice_height
 5616              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5617              		.loc 1 389 51 view .LVU1448
 5618 1bc0 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 5619 1bc4 0510A0E1 		mov	r1, r5	@, _56
 5620 1bc8 FEFFFFEB 		bl	__aeabi_idiv		@
 5621              	.LVL346:
 5622              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5623              		.loc 1 389 86 view .LVU1449
 5624 1bcc 018088E2 		add	r8, r8, #1	@ yy, yy,
 5625              	.LVL347:
 5626              	@ armwave.c:391:         xx_rem -= g_armwave_state.slice_height;
 391:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5627              		.loc 1 391 16 view .LVU1450
 5628 1bd0 059049E0 		sub	r9, r9, r5	@ xx_rem, xx_rem, _56
 5629              	.LVL348:
 392:armwave.c     ****     }
 5630              		.loc 1 392 9 is_stmt 1 view .LVU1451
 5631              	@ armwave.c:392:         ypos += g_armwave_state.slice_height;   
 392:armwave.c     ****     }
 5632              		.loc 1 392 14 is_stmt 0 view .LVU1452
 5633 1bd4 056086E0 		add	r6, r6, r5	@ ypos, ypos, _56
 5634              	.LVL349:
 5635              	@ armwave.c:389:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 389:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5636              		.loc 1 389 5 view .LVU1453
 5637 1bd8 000058E1 		cmp	r8, r0	@ yy,
 5638 1bdc F3FFFF3A 		bcc	.L276		@,
 5639              	.LVL350:
 5640              	.L275:
 396:armwave.c     **** }
 5641              		.loc 1 396 5 is_stmt 1 view .LVU1454
 5642              	.LBE136:
 5643              	.LBE135:
 5644              	@ armwave.c:887:     fill_xvimage_scaled(g_yuv_image);
 887:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 5645              		.loc 1 887 5 is_stmt 0 view .LVU1455
 5646 1be0 1C419FE5 		ldr	r4, .L283+12	@ tmp250,
 5647              	.LBB140:
 5648              	.LBB137:
 5649              	@ armwave.c:396:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 396:armwave.c     **** }
 5650              		.loc 1 396 5 view .LVU1456
 5651 1be4 0910A0E1 		mov	r1, r9	@, xx_rem
 5652 1be8 0600A0E1 		mov	r0, r6	@, ypos
 5653              	.LBE137:
 5654              	.LBE140:
 5655              	@ armwave.c:889:     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 888:armwave.c     ****     
 889:armwave.c     ****     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 5656              		.loc 1 889 5 view .LVU1457
 5657 1bec 14819FE5 		ldr	r8, .L283+16	@ tmp248,
 5658              	.LBB141:
 5659              	.LBB138:
 5660              	@ armwave.c:396:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 396:armwave.c     **** }
 5661              		.loc 1 396 5 view .LVU1458
 5662 1bf0 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 5663              	.LVL351:
 396:armwave.c     **** }
 5664              		.loc 1 396 5 view .LVU1459
 5665              	.LBE138:
 5666              	.LBE141:
 887:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 5667              		.loc 1 887 5 is_stmt 1 view .LVU1460
 5668 1bf4 040094E5 		ldr	r0, [r4, #4]	@, g_yuv_image
 5669 1bf8 FEFFFFEB 		bl	fill_xvimage_scaled		@
 5670              	.LVL352:
 5671              		.loc 1 889 5 view .LVU1461
 5672              	@ armwave.c:893:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 890:armwave.c     ****     g_canvas_dims.w = _w;
 891:armwave.c     ****     g_canvas_dims.h = _h;
 892:armwave.c     ****     
 893:armwave.c     ****     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas_dims.h) {
 5673              		.loc 1 893 26 is_stmt 0 view .LVU1462
 5674 1bfc 08619FE5 		ldr	r6, .L283+20	@ tmp251,
 5675              	@ armwave.c:889:     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 889:armwave.c     ****     g_canvas_dims.w = _w;
 5676              		.loc 1 889 5 view .LVU1463
 5677 1c00 34208DE2 		add	r2, sp, #52	@ tmp212,,
 5678 1c04 001094E5 		ldr	r1, [r4]	@, g_window
 5679 1c08 000098E5 		ldr	r0, [r8]	@, g_dpy
 5680 1c0c 2C308DE2 		add	r3, sp, #44	@ tmp204,,
 5681 1c10 08208DE5 		str	r2, [sp, #8]	@ tmp212,
 5682 1c14 30208DE2 		add	r2, sp, #48	@ tmp213,,
 5683 1c18 10308DE5 		str	r3, [sp, #16]	@ tmp204,
 5684 1c1c 0C308DE5 		str	r3, [sp, #12]	@ tmp204,
 5685 1c20 00308DE5 		str	r3, [sp]	@ tmp204,
 5686 1c24 04208DE5 		str	r2, [sp, #4]	@ tmp213,
 5687 1c28 28208DE2 		add	r2, sp, #40	@,,
 5688 1c2c FEFFFFEB 		bl	XGetGeometry		@
 5689              	.LVL353:
 890:armwave.c     ****     g_canvas_dims.w = _w;
 5690              		.loc 1 890 5 is_stmt 1 view .LVU1464
 5691              	@ armwave.c:890:     g_canvas_dims.w = _w;
 890:armwave.c     ****     g_canvas_dims.w = _w;
 5692              		.loc 1 890 21 is_stmt 0 view .LVU1465
 5693 1c30 D8509FE5 		ldr	r5, .L283+24	@ tmp249,
 5694 1c34 30109DE5 		ldr	r1, [sp, #48]	@ pretmp_106, _w
 5695              	@ armwave.c:893:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5696              		.loc 1 893 7 view .LVU1466
 5697 1c38 002096E5 		ldr	r2, [r6]	@ g_canvas_dims_last.w, g_canvas_dims_last.w
 5698              	@ armwave.c:891:     g_canvas_dims.h = _h;
 891:armwave.c     ****     
 5699              		.loc 1 891 21 view .LVU1467
 5700 1c3c 34309DE5 		ldr	r3, [sp, #52]	@ _h.107_8, _h
 5701              	@ armwave.c:893:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5702              		.loc 1 893 7 view .LVU1468
 5703 1c40 020051E1 		cmp	r1, r2	@ pretmp_106, g_canvas_dims_last.w
 5704              	@ armwave.c:891:     g_canvas_dims.h = _h;
 891:armwave.c     ****     
 5705              		.loc 1 891 21 view .LVU1469
 5706 1c44 0A0085E8 		stm	r5, {r1, r3}	@ tmp249,,
 5707              		.loc 1 893 5 is_stmt 1 view .LVU1470
 5708              	@ armwave.c:893:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5709              		.loc 1 893 7 is_stmt 0 view .LVU1471
 5710 1c48 0200001A 		bne	.L277		@,
 5711              	@ armwave.c:893:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5712              		.loc 1 893 69 discriminator 1 view .LVU1472
 5713 1c4c 042096E5 		ldr	r2, [r6, #4]	@ pretmp_108, g_canvas_dims_last.h
 5714              	@ armwave.c:893:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5715              		.loc 1 893 48 discriminator 1 view .LVU1473
 5716 1c50 020053E1 		cmp	r3, r2	@ _h.107_8, pretmp_108
 5717 1c54 0400000A 		beq	.L278		@,
 5718              	.L277:
 894:armwave.c     ****         XClearWindow(g_dpy, g_window);
 5719              		.loc 1 894 9 is_stmt 1 view .LVU1474
 5720 1c58 001094E5 		ldr	r1, [r4]	@, g_window
 5721 1c5c 000098E5 		ldr	r0, [r8]	@, g_dpy
 5722 1c60 FEFFFFEB 		bl	XClearWindow		@
 5723              	.LVL354:
 5724 1c64 30109DE5 		ldr	r1, [sp, #48]	@ pretmp_106, _w
 5725 1c68 34209DE5 		ldr	r2, [sp, #52]	@ pretmp_108, _h
 5726              	.L278:
 895:armwave.c     ****     }
 896:armwave.c     ****     
 897:armwave.c     ****     g_canvas_dims_last = g_canvas_dims;
 5727              		.loc 1 897 5 view .LVU1475
 5728              	@ armwave.c:901:         m, m, _w - (m * 2), _h - (m * 2), True);
 898:armwave.c     ****     
 899:armwave.c     ****     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 900:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 901:armwave.c     ****         m, m, _w - (m * 2), _h - (m * 2), True);
 5729              		.loc 1 901 23 is_stmt 0 view .LVU1476
 5730 1c6c 873F67E0 		rsb	r3, r7, r7, lsl #31	@ tmp231, m, m,
 5731              	@ armwave.c:899:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 899:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5732              		.loc 1 899 5 view .LVU1477
 5733 1c70 04C094E5 		ldr	ip, [r4, #4]	@ g_yuv_image.115_18, g_yuv_image
 5734              	@ armwave.c:901:         m, m, _w - (m * 2), _h - (m * 2), True);
 5735              		.loc 1 901 23 view .LVU1478
 5736 1c74 8330A0E1 		lsl	r3, r3, #1	@ tmp232, tmp231,
 5737              	@ armwave.c:901:         m, m, _w - (m * 2), _h - (m * 2), True);
 5738              		.loc 1 901 32 view .LVU1479
 5739 1c78 022083E0 		add	r2, r3, r2	@ tmp242, tmp232, pretmp_108
 5740              	@ armwave.c:901:         m, m, _w - (m * 2), _h - (m * 2), True);
 5741              		.loc 1 901 18 view .LVU1480
 5742 1c7c 013083E0 		add	r3, r3, r1	@ tmp243, tmp232, pretmp_106
 5743              	@ armwave.c:899:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 899:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5744              		.loc 1 899 5 view .LVU1481
 5745 1c80 0110A0E3 		mov	r1, #1	@ tmp241,
 5746 1c84 20208DE5 		str	r2, [sp, #32]	@ tmp242,
 5747 1c88 18708DE5 		str	r7, [sp, #24]	@ m,
 5748 1c8c 14708DE5 		str	r7, [sp, #20]	@ m,
 5749 1c90 1C308DE5 		str	r3, [sp, #28]	@ tmp243,
 5750 1c94 24108DE5 		str	r1, [sp, #36]	@ tmp241,
 5751 1c98 08309CE5 		ldr	r3, [ip, #8]	@ g_yuv_image.115_18->height, g_yuv_image.115_18->height
 5752              	@ armwave.c:897:     g_canvas_dims_last = g_canvas_dims;
 897:armwave.c     ****     
 5753              		.loc 1 897 24 view .LVU1482
 5754 1c9c 030095E8 		ldm	r5, {r0, r1}	@ tmp249,,
 5755              	@ armwave.c:899:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 899:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5756              		.loc 1 899 5 view .LVU1483
 5757 1ca0 6C209FE5 		ldr	r2, .L283+28	@ tmp237,
 5758 1ca4 10308DE5 		str	r3, [sp, #16]	@ g_yuv_image.115_18->height,
 5759 1ca8 04E09CE5 		ldr	lr, [ip, #4]	@ g_yuv_image.115_18->width, g_yuv_image.115_18->width
 5760 1cac 0030A0E3 		mov	r3, #0	@ tmp246,
 5761              	@ armwave.c:897:     g_canvas_dims_last = g_canvas_dims;
 897:armwave.c     ****     
 5762              		.loc 1 897 24 view .LVU1484
 5763 1cb0 030086E8 		stm	r6, {r0, r1}	@ tmp251,,
 899:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5764              		.loc 1 899 5 is_stmt 1 view .LVU1485
 5765 1cb4 0CE08DE5 		str	lr, [sp, #12]	@ g_yuv_image.115_18->width,
 5766 1cb8 00C08DE5 		str	ip, [sp]	@ g_yuv_image.115_18,
 5767 1cbc 001092E5 		ldr	r1, [r2]	@, g_xv_port
 5768 1cc0 000098E5 		ldr	r0, [r8]	@, g_dpy
 5769 1cc4 08308DE5 		str	r3, [sp, #8]	@ tmp246,
 5770 1cc8 04308DE5 		str	r3, [sp, #4]	@ tmp246,
 5771 1ccc 083094E5 		ldr	r3, [r4, #8]	@, g_gc
 5772 1cd0 002094E5 		ldr	r2, [r4]	@, g_window
 5773 1cd4 FEFFFFEB 		bl	XvShmPutImage		@
 5774              	.LVL355:
 902:armwave.c     ****     
 903:armwave.c     ****     armwave_render_graticule();
 5775              		.loc 1 903 5 view .LVU1486
 5776 1cd8 FEFFFFEB 		bl	armwave_render_graticule		@
 5777              	.LVL356:
 5778              	@ armwave.c:904: }
 904:armwave.c     **** }
 5779              		.loc 1 904 1 is_stmt 0 view .LVU1487
 5780 1cdc 3CD08DE2 		add	sp, sp, #60	@,,
 5781              		.cfi_remember_state
 5782              		.cfi_def_cfa_offset 28
 5783              		@ sp needed	@
 5784 1ce0 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 5785              	.LVL357:
 5786              	.L282:
 5787              		.cfi_restore_state
 5788              	.LBB142:
 5789              	.LBB133:
 495:armwave.c     ****         return;
 5790              		.loc 1 495 9 is_stmt 1 view .LVU1488
 5791 1ce4 2C009FE5 		ldr	r0, .L283+32	@,
 5792 1ce8 FEFFFFEB 		bl	puts		@
 5793              	.LVL358:
 496:armwave.c     ****     }
 5794              		.loc 1 496 9 view .LVU1489
 5795 1cec A2FFFFEA 		b	.L274		@
 5796              	.LVL359:
 5797              	.L279:
 496:armwave.c     ****     }
 5798              		.loc 1 496 9 is_stmt 0 view .LVU1490
 5799              	.LBE133:
 5800              	.LBE142:
 5801              	.LBB143:
 5802              	.LBB139:
 5803              	@ armwave.c:383:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 383:armwave.c     **** 
 5804              		.loc 1 383 52 view .LVU1491
 5805 1cf0 0060A0E1 		mov	r6, r0	@ ypos, tmp194
 5806 1cf4 B9FFFFEA 		b	.L275		@
 5807              	.L284:
 5808              		.align	2
 5809              	.L283:
 5810 1cf8 00000000 		.word	g_n_test_waves
 5811 1cfc 00000000 		.word	g_frame_num
 5812 1d00 00000000 		.word	g_armwave_state
 5813 1d04 00000000 		.word	.LANCHOR1
 5814 1d08 00000000 		.word	g_dpy
 5815 1d0c 00000000 		.word	g_canvas_dims_last
 5816 1d10 00000000 		.word	g_canvas_dims
 5817 1d14 00000000 		.word	g_xv_port
 5818 1d18 24020000 		.word	.LC15
 5819              	.LBE139:
 5820              	.LBE143:
 5821              		.cfi_endproc
 5822              	.LFE83:
 5824              		.comm	g_xswa,60,4
 5825              		.comm	g_grat_subcolour,12,4
 5826              		.comm	g_grat_colour,12,4
 5827              		.comm	g_yuv_shminfo,16,4
 5828              		.global	g_yuv_image
 5829              		.global	g_gc
 5830              		.comm	g_vinfo,40,4
 5831              		.comm	g_xv_port,4,4
 5832              		.comm	g_dpy,4,4
 5833              		.global	g_window
 5834              		.comm	g_n_test_waves,4,4
 5835              		.comm	g_frame_num,4,4
 5836              		.comm	g_canvas_dims_last,8,4
 5837              		.comm	g_canvas_dims,8,4
 5838              		.global	g_fill_black
 5839              		.comm	g_yuv_lut,768,4
 5840              		.comm	g_armwave_state,160,4
 5841              		.section	.rodata
 5842              		.align	2
 5843              		.set	.LANCHOR0,. + 0
 5846              	__PRETTY_FUNCTION__.20848:
 5847 0000 61726D77 		.ascii	"armwave_setup_render\000"
 5847      6176655F 
 5847      73657475 
 5847      705F7265 
 5847      6E646572 
 5848 0015 000000   		.space	3
 5851              	__PRETTY_FUNCTION__.20855:
 5852 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 5852      6176655F 
 5852      7365745F 
 5852      77617665 
 5852      5F706F69 
 5853 0031 000000   		.space	3
 5856              	__PRETTY_FUNCTION__.20862:
 5857 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 5857      6176655F 
 5857      7365745F 
 5857      77617665 
 5857      5F706F69 
 5858 0051 000000   		.space	3
 5861              	g_fill_black:
 5862 0054 000000   		.space	3
 5863              		.bss
 5864              		.align	2
 5865              		.set	.LANCHOR1,. + 0
 5868              	g_window:
 5869 0000 00000000 		.space	4
 5872              	g_yuv_image:
 5873 0004 00000000 		.space	4
 5876              	g_gc:
 5877 0008 00000000 		.space	4
 5878              		.section	.rodata.str1.4,"aMS",%progbits,1
 5879              		.align	2
 5880              	.LC0:
 5881 0000 25336420 		.ascii	"%3d = [%3d, %3d, %3d]\012\000"
 5881      3D205B25 
 5881      33642C20 
 5881      2533642C 
 5881      20253364 
 5882 0017 00       		.space	1
 5883              	.LC1:
 5884 0018 25336420 		.ascii	"%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\012\000"
 5884      3D205B25 
 5884      33642C20 
 5884      2533642C 
 5884      20253364 
 5885 0042 0000     		.space	2
 5886              	.LC2:
 5887 0044 25336420 		.ascii	"%3d = (%3d, %3d, %3d)\012\000"
 5887      3D202825 
 5887      33642C20 
 5887      2533642C 
 5887      20253364 
 5888 005b 00       		.space	1
 5889              	.LC3:
 5890 005c 76302E32 		.ascii	"v0.2.0\000"
 5890      2E3000
 5891 0063 00       		.space	1
 5892              	.LC4:
 5893 0064 61726D77 		.ascii	"armwave version: %s\012\000"
 5893      61766520 
 5893      76657273 
 5893      696F6E3A 
 5893      2025730A 
 5894 0079 000000   		.space	3
 5895              	.LC5:
 5896 007c 6275696C 		.ascii	"built without Python linkings\000"
 5896      74207769 
 5896      74686F75 
 5896      74205079 
 5896      74686F6E 
 5897 009a 0000     		.space	2
 5898              	.LC6:
 5899 009c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 5899      20653D25 
 5899      6420773D 
 5899      25642077 
 5899      733D2564 
 5900              	.LC7:
 5901 00c8 4572726F 		.ascii	"Error: start point more than end point\000"
 5901      723A2073 
 5901      74617274 
 5901      20706F69 
 5901      6E74206D 
 5902 00ef 00       		.space	1
 5903              	.LC8:
 5904 00f0 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 5904      7566665F 
 5904      73697A65 
 5904      3D25642C 
 5904      20636D70 
 5905 0123 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 5905      5F776964 
 5905      74683D25 
 5905      642C2077 
 5905      6176655F 
 5906 014d 000000   		.space	3
 5907              	.LC9:
 5908 0150 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 5908      6F632066 
 5908      61696C75 
 5908      72652061 
 5908      6C6C6F63 
 5909 0183 2E636831 		.ascii	".ch1_buffer)\012\000"
 5909      5F627566 
 5909      66657229 
 5909      0A00
 5910 0191 000000   		.space	3
 5911              	.LC10:
 5912 0194 61726D77 		.ascii	"armwave.c\000"
 5912      6176652E 
 5912      6300
 5913 019e 0000     		.space	2
 5914              	.LC11:
 5915 01a0 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 5915      6D776176 
 5915      655F7374 
 5915      6174652E 
 5915      78636F6F 
 5916 01c9 000000   		.space	3
 5917              	.LC12:
 5918 01cc 78636F6F 		.ascii	"xcoord_to_xpixel[%5d] = %5d\012\000"
 5918      72645F74 
 5918      6F5F7870 
 5918      6978656C 
 5918      5B253564 
 5919 01e9 000000   		.space	3
 5920              	.LC13:
 5921 01ec 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 5921      3A203078 
 5921      25303878 
 5921      20307825 
 5921      30387820 
 5922              	.LC14:
 5923 0210 77617665 		.ascii	"wave_buffer != NULL\000"
 5923      5F627566 
 5923      66657220 
 5923      213D204E 
 5923      554C4C00 
 5924              	.LC15:
 5925 0224 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 5925      6176655F 
 5925      7365745F 
 5925      77617665 
 5925      5F706F69 
 5926 0257 78636565 		.ascii	"xceeded\000"
 5926      64656400 
 5927 025f 00       		.space	1
 5928              	.LC16:
 5929 0260 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 5929      5F627566 
 5929      6665725F 
 5929      70747220 
 5929      213D2030 
 5930 0275 000000   		.space	3
 5931              	.LC17:
 5932 0278 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 5932      6176655F 
 5932      74657374 
 5932      5F627566 
 5932      6665725F 
 5933 02ab 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 5933      20627566 
 5933      66657220 
 5933      28256420 
 5933      62797465 
 5934              	.LC18:
 5935 02cc 43616C63 		.ascii	"Calculating test set %d\012\000"
 5935      756C6174 
 5935      696E6720 
 5935      74657374 
 5935      20736574 
 5936 02e5 000000   		.space	3
 5937              	.LC19:
 5938 02e8 41726D57 		.ascii	"ArmWave\000"
 5938      61766500 
 5939              	.LC20:
 5940 02f0 57696E64 		.ascii	"Window done, mapping...\000"
 5940      6F772064 
 5940      6F6E652C 
 5940      206D6170 
 5940      70696E67 
 5941              	.LC21:
 5942 0308 416C6C20 		.ascii	"All done in window\000"
 5942      646F6E65 
 5942      20696E20 
 5942      77696E64 
 5942      6F7700
 5943 031b 00       		.space	1
 5944              	.LC22:
 5945 031c 61726D77 		.ascii	"armwave: initialising for X11...\000"
 5945      6176653A 
 5945      20696E69 
 5945      7469616C 
 5945      6973696E 
 5946 033d 000000   		.space	3
 5947              	.LC23:
 5948 0340 4572726F 		.ascii	"Error: Fatal X11: Cannot open display.\000"
 5948      723A2046 
 5948      6174616C 
 5948      20583131 
 5948      3A204361 
 5949 0367 00       		.space	1
 5950              	.LC24:
 5951 0368 466F756E 		.ascii	"Found 24bit TrueColor.\000"
 5951      64203234 
 5951      62697420 
 5951      54727565 
 5951      436F6C6F 
 5952 037f 00       		.space	1
 5953              	.LC25:
 5954 0380 4572726F 		.ascii	"Error: Fatal X11: not supported 24-bit TrueColor di"
 5954      723A2046 
 5954      6174616C 
 5954      20583131 
 5954      3A206E6F 
 5955 03b3 73706C61 		.ascii	"splay.\000"
 5955      792E00
 5956 03ba 0000     		.space	2
 5957              	.LC26:
 5958 03bc 4572726F 		.ascii	"Error: Fatal X11: Shared memory extension not avail"
 5958      723A2046 
 5958      6174616C 
 5958      20583131 
 5958      3A205368 
 5959 03ef 61626C65 		.ascii	"able or failed to allocate shared memory.\000"
 5959      206F7220 
 5959      6661696C 
 5959      65642074 
 5959      6F20616C 
 5960 0419 000000   		.space	3
 5961              	.LC27:
 5962 041c 4572726F 		.ascii	"Error: Fatal X11: Unable to find XVideo extension ("
 5962      723A2046 
 5962      6174616C 
 5962      20583131 
 5962      3A20556E 
 5963 044f 2564292E 		.ascii	"%d).  Is it configured correctly?\012\000"
 5963      20204973 
 5963      20697420 
 5963      636F6E66 
 5963      69677572 
 5964 0472 0000     		.space	2
 5965              	.LC28:
 5966 0474 4572726F 		.ascii	"Error: Fatal X11: Unable to query XVideo extension "
 5966      723A2046 
 5966      6174616C 
 5966      20583131 
 5966      3A20556E 
 5967 04a7 28256429 		.ascii	"(%d).  Is it configured correctly?\012\000"
 5967      2E202049 
 5967      73206974 
 5967      20636F6E 
 5967      66696775 
 5968 04cb 00       		.space	1
 5969              	.LC29:
 5970 04cc 4572726F 		.ascii	"Error: Fatal X11: Unable to use the port %d\012\012"
 5970      723A2046 
 5970      6174616C 
 5970      20583131 
 5970      3A20556E 
 5971 04f9 00       		.ascii	"\000"
 5972 04fa 0000     		.space	2
 5973              	.LC30:
 5974 04fc 41747461 		.ascii	"Attaching XvShm...\000"
 5974      6368696E 
 5974      67205876 
 5974      53686D2E 
 5974      2E2E00
 5975 050f 00       		.space	1
 5976              	.LC31:
 5977 0510 7975765F 		.ascii	"yuv_image plane %d offset %d pitch %d\012\000"
 5977      696D6167 
 5977      6520706C 
 5977      616E6520 
 5977      2564206F 
 5978 0537 00       		.space	1
 5979              	.LC32:
 5980 0538 4572726F 		.ascii	"Error: Fatal X11: XShmAttached failed\000"
 5980      723A2046 
 5980      6174616C 
 5980      20583131 
 5980      3A205853 
 5981 055e 0000     		.space	2
 5982              	.LC33:
 5983 0560 25642062 		.ascii	"%d bytes for XvImage, shmid %d, xv_port %d\012\000"
 5983      79746573 
 5983      20666F72 
 5983      20587649 
 5983      6D616765 
 5984              	.LC34:
 5985 058c 2533642C 		.ascii	"%3d, %3d\012\000"
 5985      20253364 
 5985      0A00
 5986              		.text
 5987              	.Letext0:
 5988              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 5989              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 5990              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 5991              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 5992              		.file 6 "/usr/include/stdio.h"
 5993              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 5994              		.file 8 "/usr/include/errno.h"
 5995              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 5996              		.file 10 "/usr/include/unistd.h"
 5997              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 5998              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 5999              		.file 13 "/usr/local/include/python3.8/pyport.h"
 6000              		.file 14 "/usr/include/math.h"
 6001              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 6002              		.file 16 "/usr/include/time.h"
 6003              		.file 17 "/usr/local/include/python3.8/pymem.h"
 6004              		.file 18 "/usr/local/include/python3.8/object.h"
 6005              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 6006              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 6007              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 6008              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 6009              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 6010              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 6011              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 6012              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 6013              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 6014              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 6015              		.file 29 "/usr/local/include/python3.8/longobject.h"
 6016              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 6017              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 6018              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 6019              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 6020              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 6021              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 6022              		.file 36 "/usr/local/include/python3.8/listobject.h"
 6023              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 6024              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 6025              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 6026              		.file 40 "/usr/local/include/python3.8/setobject.h"
 6027              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 6028              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 6029              		.file 43 "/usr/local/include/python3.8/classobject.h"
 6030              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 6031              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 6032              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 6033              		.file 47 "/usr/local/include/python3.8/traceback.h"
 6034              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 6035              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 6036              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 6037              		.file 51 "/usr/local/include/python3.8/pystate.h"
 6038              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 6039              		.file 53 "/usr/local/include/python3.8/genobject.h"
 6040              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 6041              		.file 55 "/usr/local/include/python3.8/structseq.h"
 6042              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 6043              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 6044              		.file 58 "/usr/local/include/python3.8/codecs.h"
 6045              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 6046              		.file 60 "/usr/local/include/python3.8/context.h"
 6047              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 6048              		.file 62 "/usr/local/include/python3.8/code.h"
 6049              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 6050              		.file 64 "/usr/local/include/python3.8/ceval.h"
 6051              		.file 65 "/usr/local/include/python3.8/import.h"
 6052              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 6053              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 6054              		.file 68 "/usr/include/X11/X.h"
 6055              		.file 69 "/usr/include/X11/Xlib.h"
 6056              		.file 70 "/usr/include/X11/Xutil.h"
 6057              		.file 71 "/usr/include/X11/extensions/XShm.h"
 6058              		.file 72 "/usr/include/malloc.h"
 6059              		.file 73 "/usr/include/X11/extensions/Xv.h"
 6060              		.file 74 "/usr/include/X11/extensions/Xvlib.h"
 6061              		.file 75 "armwave.h"
 6062              		.file 76 "<built-in>"
 6063              		.file 77 "/usr/include/arm-linux-gnueabihf/sys/shm.h"
 6064              		.file 78 "/usr/include/stdlib.h"
 6065              		.file 79 "/usr/include/assert.h"
 6066              		.file 80 "/usr/include/string.h"
 6067              		.file 81 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
