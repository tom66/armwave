   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=94 --param ggc-min-heapsize=119998
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	rgb2yuv
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	rgb2yuv:
  83              	.LVL0:
  84              	.LFB57:
  85              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #ifndef NO_PYTHON
  12:armwave.c     **** #include <Python.h>
  13:armwave.c     **** #endif
  14:armwave.c     **** 
  15:armwave.c     **** #include <sys/ipc.h>
  16:armwave.c     **** #include <sys/shm.h>
  17:armwave.c     **** 
  18:armwave.c     **** #include <X11/Xlib.h>
  19:armwave.c     **** #include <X11/Xutil.h>
  20:armwave.c     **** #include <X11/extensions/XShm.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include <assert.h>
  23:armwave.c     **** #include <ctype.h>
  24:armwave.c     **** #include <stdio.h>
  25:armwave.c     **** #include <stdint.h>
  26:armwave.c     **** #include <stdlib.h>
  27:armwave.c     **** #include <stdbool.h>
  28:armwave.c     **** #include <malloc.h>
  29:armwave.c     **** #include <string.h>
  30:armwave.c     **** #include <math.h>
  31:armwave.c     **** #include <unistd.h>
  32:armwave.c     **** 
  33:armwave.c     **** #include <X11/Xlib.h>
  34:armwave.c     **** #include <X11/Xutil.h>
  35:armwave.c     **** #include <X11/Xatom.h>
  36:armwave.c     **** #include <X11/extensions/Xv.h>
  37:armwave.c     **** #include <X11/extensions/Xvlib.h>
  38:armwave.c     **** #include <X11/extensions/XShm.h>
  39:armwave.c     **** 
  40:armwave.c     **** #include <time.h>
  41:armwave.c     **** 
  42:armwave.c     **** #include "armwave.h"
  43:armwave.c     **** 
  44:armwave.c     **** #define ARMWAVE_VER  "v0.2.0"
  45:armwave.c     **** 
  46:armwave.c     **** struct armwave_state_t g_armwave_state;
  47:armwave.c     **** struct armwave_yuv_t g_yuv_lut[256];
  48:armwave.c     **** 
  49:armwave.c     **** const struct armwave_rgb_t g_fill_black = { 0, 0, 0 };
  50:armwave.c     **** 
  51:armwave.c     **** /*
  52:armwave.c     ****  * X11 properties.  Should these be commoned into one struct?
  53:armwave.c     ****  */ 
  54:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims;
  55:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims_last;
  56:armwave.c     **** 
  57:armwave.c     **** int g_frame_num, g_n_test_waves;
  58:armwave.c     **** Window g_window = 0;
  59:armwave.c     **** Display *g_dpy;
  60:armwave.c     **** int g_xv_port;
  61:armwave.c     **** XVisualInfo	g_vinfo;
  62:armwave.c     **** GC g_gc = NULL;
  63:armwave.c     **** XvImage *g_yuv_image = NULL;
  64:armwave.c     **** XShmSegmentInfo g_yuv_shminfo;
  65:armwave.c     **** XColor g_grat_colour, g_grat_subcolour; 
  66:armwave.c     **** XSetWindowAttributes g_xswa;
  67:armwave.c     ****     
  68:armwave.c     **** struct MwmHints {
  69:armwave.c     ****     unsigned long flags;
  70:armwave.c     ****     unsigned long functions;
  71:armwave.c     ****     unsigned long decorations;
  72:armwave.c     ****     long input_mode;
  73:armwave.c     ****     unsigned long status;
  74:armwave.c     **** };
  75:armwave.c     **** 
  76:armwave.c     **** enum {
  77:armwave.c     ****     MWM_HINTS_FUNCTIONS = (1L << 0),
  78:armwave.c     ****     MWM_HINTS_DECORATIONS =  (1L << 1),
  79:armwave.c     **** 
  80:armwave.c     ****     MWM_FUNC_ALL = (1L << 0),
  81:armwave.c     ****     MWM_FUNC_RESIZE = (1L << 1),
  82:armwave.c     ****     MWM_FUNC_MOVE = (1L << 2),
  83:armwave.c     ****     MWM_FUNC_MINIMIZE = (1L << 3),
  84:armwave.c     ****     MWM_FUNC_MAXIMIZE = (1L << 4),
  85:armwave.c     ****     MWM_FUNC_CLOSE = (1L << 5)
  86:armwave.c     **** };
  87:armwave.c     **** 
  88:armwave.c     **** /*
  89:armwave.c     ****  * Helper function to convert 8-bit RGB to 8-bit YUV values.
  90:armwave.c     ****  */
  91:armwave.c     **** void rgb2yuv(struct armwave_rgb_t *rgb_in, struct armwave_yuv_t *yuv_out)
  92:armwave.c     **** {
  86              		.loc 1 92 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
  91              		.loc 1 93 5 view .LVU1
  92              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93              		.loc 1 93 41 is_stmt 0 view .LVU2
  94 0000 0030D0E5 		ldrb	r3, [r0]	@ zero_extendqisi2	@ rgb_in_32(D)->r, rgb_in_32(D)->r
  95              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96              		.loc 1 93 33 view .LVU3
  97 0004 254A9FED 		vldr.32	s8, .L3	@ tmp146,
  98              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
  99              		.loc 1 94 22 view .LVU4
 100 0008 257ADFED 		vldr.32	s15, .L3+4	@ tmp160,
 101              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 102              		.loc 1 93 22 view .LVU5
 103 000c 257A9FED 		vldr.32	s14, .L3+8	@ tmp148,
 104              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 105              		.loc 1 93 41 view .LVU6
 106 0010 103A05EE 		vmov	s10, r3	@ int	@ rgb_in_32(D)->r, rgb_in_32(D)->r
 107              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 108              		.loc 1 93 64 view .LVU7
 109 0014 0130D0E5 		ldrb	r3, [r0, #1]	@ zero_extendqisi2	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 110              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 111              		.loc 1 94 33 view .LVU8
 112 0018 236ADFED 		vldr.32	s13, .L3+12	@ tmp158,
 113              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 114              		.loc 1 94 79 view .LVU9
 115 001c 234ADFED 		vldr.32	s9, .L3+16	@ tmp165,
 116              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 117              		.loc 1 93 33 view .LVU10
 118 0020 C55AB8EE 		vcvt.f32.s32	s10, s10	@ _3, rgb_in_32(D)->r
 119              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 120              		.loc 1 93 64 view .LVU11
 121 0024 903A05EE 		vmov	s11, r3	@ int	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 122              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 123              		.loc 1 93 87 view .LVU12
 124 0028 0230D0E5 		ldrb	r3, [r0, #2]	@ zero_extendqisi2	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 125              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 126              		.loc 1 93 56 view .LVU13
 127 002c 202ADFED 		vldr.32	s5, .L3+20	@ tmp150,
 128              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 129              		.loc 1 94 56 view .LVU14
 130 0030 203A9FED 		vldr.32	s6, .L3+24	@ tmp162,
 131              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 132              		.loc 1 93 56 view .LVU15
 133 0034 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _8, rgb_in_32(D)->g
 134              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 135              		.loc 1 93 87 view .LVU16
 136 0038 103A06EE 		vmov	s12, r3	@ int	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 137              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 138              		.loc 1 95 56 view .LVU17
 139 003c 1E3ADFED 		vldr.32	s7, .L3+28	@ tmp174,
 140              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 141              		.loc 1 93 22 view .LVU18
 142 0040 047A05EE 		vmla.f32	s14, s10, s8	@ tmp147, _3, tmp146
 143              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 144              		.loc 1 94 22 view .LVU19
 145 0044 674AB0EE 		vmov.f32	s8, s15	@ tmp159, tmp160
 146              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 147              		.loc 1 93 79 view .LVU20
 148 0048 C66AB8EE 		vcvt.f32.s32	s12, s12	@ _13, rgb_in_32(D)->b
 149              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 150              		.loc 1 95 22 view .LVU21
 151 004c 247A45EE 		vmla.f32	s15, s10, s9	@ tmp171, _3, tmp165
 152              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 153              		.loc 1 94 22 view .LVU22
 154 0050 264A05EE 		vmla.f32	s8, s10, s13	@ tmp159, _3, tmp158
 155              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 156              		.loc 1 95 79 view .LVU23
 157 0054 195A9FED 		vldr.32	s10, .L3+32	@ tmp177,
 158              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 159              		.loc 1 93 46 view .LVU24
 160 0058 A27A05EE 		vmla.f32	s14, s11, s5	@ tmp151, _8, tmp150
 161              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 162              		.loc 1 95 46 view .LVU25
 163 005c E37A45EE 		vmls.f32	s15, s11, s7	@ tmp175, _8, tmp174
 164              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 165              		.loc 1 94 22 view .LVU26
 166 0060 446AF0EE 		vmov.f32	s13, s8	@ tmp159, tmp159
 167              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 168              		.loc 1 93 79 view .LVU27
 169 0064 164A9FED 		vldr.32	s8, .L3+36	@ tmp153,
 170              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 171              		.loc 1 94 46 view .LVU28
 172 0068 C36A45EE 		vmls.f32	s13, s11, s6	@ tmp163, _8, tmp162
 173              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 174              		.loc 1 93 69 view .LVU29
 175 006c 047A06EE 		vmla.f32	s14, s12, s8	@ tmp154, _13, tmp153
 176              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 177              		.loc 1 95 69 view .LVU30
 178 0070 457A46EE 		vmls.f32	s15, s12, s10	@ tmp178, _13, tmp177
 179              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 180              		.loc 1 94 69 view .LVU31
 181 0074 246A46EE 		vmla.f32	s13, s12, s9	@ tmp166, _13, tmp165
 182              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 183              		.loc 1 93 16 view .LVU32
 184 0078 C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp155, tmp154
 185              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 186              		.loc 1 95 16 view .LVU33
 187 007c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 188              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 189              		.loc 1 93 16 view .LVU34
 190 0080 102A17EE 		vmov	r2, s14	@ int	@ tmp155, tmp155
 191              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 192              		.loc 1 94 16 view .LVU35
 193 0084 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp167, tmp166
 194              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 195              		.loc 1 95 16 view .LVU36
 196 0088 903A17EE 		vmov	r3, s15	@ int	@ tmp179, tmp179
 197              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 198              		.loc 1 93 16 view .LVU37
 199 008c 0020C1E5 		strb	r2, [r1]	@ tmp155, yuv_out_33(D)->y
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 200              		.loc 1 94 5 is_stmt 1 view .LVU38
 201              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 202              		.loc 1 95 16 is_stmt 0 view .LVU39
 203 0090 0230C1E5 		strb	r3, [r1, #2]	@ tmp179, yuv_out_33(D)->v
 204              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 205              		.loc 1 94 16 view .LVU40
 206 0094 100A17EE 		vmov	r0, s14	@ int	@ tmp167, tmp167
 207              	.LVL1:
  94:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 208              		.loc 1 94 16 view .LVU41
 209 0098 0100C1E5 		strb	r0, [r1, #1]	@ tmp167, yuv_out_33(D)->u
 210              		.loc 1 95 5 is_stmt 1 view .LVU42
 211              	@ armwave.c:96: }
  96:armwave.c     **** }
 212              		.loc 1 96 1 is_stmt 0 view .LVU43
 213 009c 1EFF2FE1 		bx	lr	@
 214              	.L4:
 215              		.align	2
 216              	.L3:
 217 00a0 6F12833E 		.word	1048777327
 218 00a4 00000043 		.word	1124073472
 219 00a8 00008041 		.word	1098907648
 220 00ac 508D17BE 		.word	-1105752752
 221 00b0 9CC4E03E 		.word	1054917788
 222 00b4 2506013F 		.word	1057031717
 223 00b8 F4FD943E 		.word	1049951732
 224 00bc 7F6ABC3E 		.word	1052535423
 225 00c0 7368913D 		.word	1032939635
 226 00c4 F0A7C63D 		.word	1036429296
 227              		.cfi_endproc
 228              	.LFE57:
 230              		.align	2
 231              		.global	hsv2rgb
 232              		.syntax unified
 233              		.arm
 234              		.fpu vfp
 236              	hsv2rgb:
 237              	.LVL2:
 238              	.LFB58:
  97:armwave.c     **** 
  98:armwave.c     **** /*
  99:armwave.c     ****  * Helper function to convert 8-bit HSV to 8-bit RGB.
 100:armwave.c     ****  *
 101:armwave.c     ****  * https://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-ra
 102:armwave.c     ****  */
 103:armwave.c     **** void hsv2rgb(struct armwave_hsv_t *hsv_in, struct armwave_rgb_t *rgb_out)
 104:armwave.c     **** {
 239              		.loc 1 104 1 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 105:armwave.c     ****     unsigned char region, remainder, p, q, t;
 243              		.loc 1 105 5 view .LVU45
 106:armwave.c     **** 
 107:armwave.c     ****     if (hsv_in->s == 0)
 244              		.loc 1 107 5 view .LVU46
 245              	@ armwave.c:104: {
 104:armwave.c     ****     unsigned char region, remainder, p, q, t;
 246              		.loc 1 104 1 is_stmt 0 view .LVU47
 247 00c8 30402DE9 		push	{r4, r5, lr}	@
 248              		.cfi_def_cfa_offset 12
 249              		.cfi_offset 4, -12
 250              		.cfi_offset 5, -8
 251              		.cfi_offset 14, -4
 252              	@ armwave.c:107:     if (hsv_in->s == 0)
 253              		.loc 1 107 15 view .LVU48
 254 00cc 01E0D0E5 		ldrb	lr, [r0, #1]	@ zero_extendqisi2	@ _1, hsv_in_29(D)->s
 255 00d0 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2	@ pretmp_65, hsv_in_29(D)->v
 256              	@ armwave.c:107:     if (hsv_in->s == 0)
 257              		.loc 1 107 8 view .LVU49
 258 00d4 00005EE3 		cmp	lr, #0	@ _1,
 259 00d8 2100000A 		beq	.L16		@,
 108:armwave.c     ****     {
 109:armwave.c     ****         rgb_out->r = hsv_in->v;
 110:armwave.c     ****         rgb_out->g = hsv_in->v;
 111:armwave.c     ****         rgb_out->b = hsv_in->v;
 112:armwave.c     ****         return;
 113:armwave.c     ****     }
 114:armwave.c     **** 
 115:armwave.c     ****     region = hsv_in->h / 43;
 260              		.loc 1 115 5 is_stmt 1 view .LVU50
 261              	@ armwave.c:115:     region = hsv_in->h / 43;
 262              		.loc 1 115 20 is_stmt 0 view .LVU51
 263 00dc 0040D0E5 		ldrb	r4, [r0]	@ zero_extendqisi2	@ _3, hsv_in_29(D)->h
 264              	@ armwave.c:115:     region = hsv_in->h / 43;
 265              		.loc 1 115 12 view .LVU52
 266 00e0 EC209FE5 		ldr	r2, .L17	@ tmp149,
 267              	@ armwave.c:116:     remainder = (hsv_in->h - (region * 43)) * 6; 
 116:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 268              		.loc 1 116 38 view .LVU53
 269 00e4 2A30E0E3 		mvn	r3, #42	@ tmp151,
 270              	@ armwave.c:118:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 117:armwave.c     **** 
 118:armwave.c     ****     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 271              		.loc 1 118 27 view .LVU54
 272 00e8 FF006EE2 		rsb	r0, lr, #255	@ tmp160, _1,
 273              	.LVL3:
 274              	@ armwave.c:115:     region = hsv_in->h / 43;
 115:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 275              		.loc 1 115 12 view .LVU55
 276 00ec 925482E0 		umull	r5, r2, r2, r4	@ tmp192, tmp148, tmp149, _3
 277              	@ armwave.c:118:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 278              		.loc 1 118 20 view .LVU56
 279 00f0 9C0000E0 		mul	r0, ip, r0	@ tmp161, pretmp_65, tmp160
 280              	@ armwave.c:115:     region = hsv_in->h / 43;
 115:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 281              		.loc 1 115 12 view .LVU57
 282 00f4 A221A0E1 		lsr	r2, r2, #3	@ region, tmp148,
 283              	.LVL4:
 116:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 284              		.loc 1 116 5 is_stmt 1 view .LVU58
 285              	@ armwave.c:116:     remainder = (hsv_in->h - (region * 43)) * 6; 
 116:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 286              		.loc 1 116 28 is_stmt 0 view .LVU59
 287 00f8 934223E0 		mla	r3, r3, r2, r4	@ tmp152, tmp151, region, _3
 288              	@ armwave.c:118:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 289              		.loc 1 118 41 view .LVU60
 290 00fc 4004A0E1 		asr	r0, r0, #8	@ tmp162, tmp161,
 291              	@ armwave.c:116:     remainder = (hsv_in->h - (region * 43)) * 6; 
 116:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 292              		.loc 1 116 15 view .LVU61
 293 0100 833083E0 		add	r3, r3, r3, lsl #1	@ tmp157, tmp152, tmp152,
 294              	@ armwave.c:118:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 295              		.loc 1 118 7 view .LVU62
 296 0104 7000EFE6 		uxtb	r0, r0	@ p, tmp162
 297              	@ armwave.c:116:     remainder = (hsv_in->h - (region * 43)) * 6; 
 116:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 298              		.loc 1 116 15 view .LVU63
 299 0108 8330A0E1 		lsl	r3, r3, #1	@ tmp159, tmp157,
 300 010c 7330EFE6 		uxtb	r3, r3	@ remainder, tmp159
 301              	.LVL5:
 302              		.loc 1 118 5 is_stmt 1 view .LVU64
 119:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 303              		.loc 1 119 5 view .LVU65
 304              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 120:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 305              		.loc 1 120 48 is_stmt 0 view .LVU66
 306 0110 FF4063E2 		rsb	r4, r3, #255	@ tmp168, remainder,
 307              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 308              		.loc 1 119 41 view .LVU67
 309 0114 8E0363E1 		smulbb	r3, lr, r3	@ tmp163, _1, remainder
 310              	.LVL6:
 311              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 312              		.loc 1 120 41 view .LVU68
 313 0118 9E040EE0 		mul	lr, lr, r4	@ tmp169, _1, tmp168
 314              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 315              		.loc 1 119 54 view .LVU69
 316 011c 4334A0E1 		asr	r3, r3, #8	@ tmp164, tmp163,
 317              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 318              		.loc 1 119 27 view .LVU70
 319 0120 FF3063E2 		rsb	r3, r3, #255	@ tmp165, tmp164,
 320              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 321              		.loc 1 120 62 view .LVU71
 322 0124 4EE4A0E1 		asr	lr, lr, #8	@ tmp170, tmp169,
 323              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 324              		.loc 1 120 27 view .LVU72
 325 0128 FFE06EE2 		rsb	lr, lr, #255	@ tmp171, tmp170,
 326              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 327              		.loc 1 119 20 view .LVU73
 328 012c 9C0303E0 		mul	r3, ip, r3	@ tmp166, pretmp_65, tmp165
 329              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 330              		.loc 1 120 20 view .LVU74
 331 0130 9C0E0EE0 		mul	lr, ip, lr	@ tmp172, pretmp_65, tmp171
 332              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 333              		.loc 1 119 62 view .LVU75
 334 0134 4334A0E1 		asr	r3, r3, #8	@ tmp167, tmp166,
 335              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 336              		.loc 1 120 70 view .LVU76
 337 0138 4EE4A0E1 		asr	lr, lr, #8	@ tmp173, tmp172,
 338              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 339              		.loc 1 119 7 view .LVU77
 340 013c 7330EFE6 		uxtb	r3, r3	@ q, tmp167
 341              	.LVL7:
 342              		.loc 1 120 5 is_stmt 1 view .LVU78
 343              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 344              		.loc 1 120 7 is_stmt 0 view .LVU79
 345 0140 7EE0EFE6 		uxtb	lr, lr	@ t, tmp173
 346              	.LVL8:
 121:armwave.c     **** 
 122:armwave.c     ****     switch (region)
 347              		.loc 1 122 5 is_stmt 1 view .LVU80
 348 0144 040052E3 		cmp	r2, #4	@ region,
 349 0148 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 350 014c 1C0000EA 		b	.L8	@
 351              	.L10:
 352 0150 84010000 		.word	.L14
 353 0154 94010000 		.word	.L13
 354 0158 A4010000 		.word	.L12
 355 015c B4010000 		.word	.L11
 356 0160 74010000 		.word	.L9
 357              	.LVL9:
 358              	.L16:
 109:armwave.c     ****         rgb_out->g = hsv_in->v;
 359              		.loc 1 109 9 view .LVU81
 360              	@ armwave.c:109:         rgb_out->r = hsv_in->v;
 109:armwave.c     ****         rgb_out->g = hsv_in->v;
 361              		.loc 1 109 20 is_stmt 0 view .LVU82
 362 0164 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 110:armwave.c     ****         rgb_out->b = hsv_in->v;
 363              		.loc 1 110 9 is_stmt 1 view .LVU83
 364              	@ armwave.c:110:         rgb_out->g = hsv_in->v;
 110:armwave.c     ****         rgb_out->b = hsv_in->v;
 365              		.loc 1 110 20 is_stmt 0 view .LVU84
 366 0168 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 111:armwave.c     ****         return;
 367              		.loc 1 111 9 is_stmt 1 view .LVU85
 368              	@ armwave.c:111:         rgb_out->b = hsv_in->v;
 111:armwave.c     ****         return;
 369              		.loc 1 111 20 is_stmt 0 view .LVU86
 370 016c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 112:armwave.c     ****     }
 371              		.loc 1 112 9 is_stmt 1 view .LVU87
 372 0170 3080BDE8 		pop	{r4, r5, pc}	@
 373              	.LVL10:
 374              	.L9:
 123:armwave.c     ****     {
 124:armwave.c     ****         case 0:
 125:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 126:armwave.c     ****             break;
 127:armwave.c     ****         case 1:
 128:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 129:armwave.c     ****             break;
 130:armwave.c     ****         case 2:
 131:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 132:armwave.c     ****             break;
 133:armwave.c     ****         case 3:
 134:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 135:armwave.c     ****             break;
 136:armwave.c     ****         case 4:
 137:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 375              		.loc 1 137 13 view .LVU88
 376              	@ armwave.c:137:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 377              		.loc 1 137 24 is_stmt 0 view .LVU89
 378 0174 00E0C1E5 		strb	lr, [r1]	@ t, rgb_out_30(D)->r
 379              	.LVL11:
 380              		.loc 1 137 29 is_stmt 1 view .LVU90
 381              	@ armwave.c:137:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 382              		.loc 1 137 40 is_stmt 0 view .LVU91
 383 0178 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 384              		.loc 1 137 45 is_stmt 1 view .LVU92
 385              	@ armwave.c:137:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 386              		.loc 1 137 56 is_stmt 0 view .LVU93
 387 017c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 138:armwave.c     ****             break;
 388              		.loc 1 138 13 is_stmt 1 view .LVU94
 389 0180 3080BDE8 		pop	{r4, r5, pc}	@
 390              	.LVL12:
 391              	.L14:
 125:armwave.c     ****             break;
 392              		.loc 1 125 13 view .LVU95
 393              	@ armwave.c:125:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 125:armwave.c     ****             break;
 394              		.loc 1 125 24 is_stmt 0 view .LVU96
 395 0184 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 396              	.LVL13:
 125:armwave.c     ****             break;
 397              		.loc 1 125 37 is_stmt 1 view .LVU97
 398              	@ armwave.c:125:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 125:armwave.c     ****             break;
 399              		.loc 1 125 48 is_stmt 0 view .LVU98
 400 0188 01E0C1E5 		strb	lr, [r1, #1]	@ t, rgb_out_30(D)->g
 125:armwave.c     ****             break;
 401              		.loc 1 125 53 is_stmt 1 view .LVU99
 402              	@ armwave.c:125:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 125:armwave.c     ****             break;
 403              		.loc 1 125 64 is_stmt 0 view .LVU100
 404 018c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 126:armwave.c     ****         case 1:
 405              		.loc 1 126 13 is_stmt 1 view .LVU101
 406 0190 3080BDE8 		pop	{r4, r5, pc}	@
 407              	.LVL14:
 408              	.L13:
 128:armwave.c     ****             break;
 409              		.loc 1 128 13 view .LVU102
 410              	@ armwave.c:128:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 128:armwave.c     ****             break;
 411              		.loc 1 128 24 is_stmt 0 view .LVU103
 412 0194 0030C1E5 		strb	r3, [r1]	@ q, rgb_out_30(D)->r
 413              	.LVL15:
 128:armwave.c     ****             break;
 414              		.loc 1 128 29 is_stmt 1 view .LVU104
 415              	@ armwave.c:128:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 128:armwave.c     ****             break;
 416              		.loc 1 128 40 is_stmt 0 view .LVU105
 417 0198 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 128:armwave.c     ****             break;
 418              		.loc 1 128 53 is_stmt 1 view .LVU106
 419              	@ armwave.c:128:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 128:armwave.c     ****             break;
 420              		.loc 1 128 64 is_stmt 0 view .LVU107
 421 019c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 129:armwave.c     ****         case 2:
 422              		.loc 1 129 13 is_stmt 1 view .LVU108
 423 01a0 3080BDE8 		pop	{r4, r5, pc}	@
 424              	.LVL16:
 425              	.L12:
 131:armwave.c     ****             break;
 426              		.loc 1 131 13 view .LVU109
 427              	@ armwave.c:131:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 131:armwave.c     ****             break;
 428              		.loc 1 131 24 is_stmt 0 view .LVU110
 429 01a4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 430              	.LVL17:
 131:armwave.c     ****             break;
 431              		.loc 1 131 29 is_stmt 1 view .LVU111
 432              	@ armwave.c:131:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 131:armwave.c     ****             break;
 433              		.loc 1 131 40 is_stmt 0 view .LVU112
 434 01a8 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 131:armwave.c     ****             break;
 435              		.loc 1 131 53 is_stmt 1 view .LVU113
 436              	@ armwave.c:131:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 131:armwave.c     ****             break;
 437              		.loc 1 131 64 is_stmt 0 view .LVU114
 438 01ac 02E0C1E5 		strb	lr, [r1, #2]	@ t, rgb_out_30(D)->b
 132:armwave.c     ****         case 3:
 439              		.loc 1 132 13 is_stmt 1 view .LVU115
 440 01b0 3080BDE8 		pop	{r4, r5, pc}	@
 441              	.LVL18:
 442              	.L11:
 134:armwave.c     ****             break;
 443              		.loc 1 134 13 view .LVU116
 444              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 134:armwave.c     ****             break;
 445              		.loc 1 134 24 is_stmt 0 view .LVU117
 446 01b4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 447              	.LVL19:
 134:armwave.c     ****             break;
 448              		.loc 1 134 29 is_stmt 1 view .LVU118
 449              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 134:armwave.c     ****             break;
 450              		.loc 1 134 40 is_stmt 0 view .LVU119
 451 01b8 0130C1E5 		strb	r3, [r1, #1]	@ q, rgb_out_30(D)->g
 134:armwave.c     ****             break;
 452              		.loc 1 134 45 is_stmt 1 view .LVU120
 453              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 134:armwave.c     ****             break;
 454              		.loc 1 134 56 is_stmt 0 view .LVU121
 455 01bc 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 135:armwave.c     ****         case 4:
 456              		.loc 1 135 13 is_stmt 1 view .LVU122
 457 01c0 3080BDE8 		pop	{r4, r5, pc}	@
 458              	.LVL20:
 459              	.L8:
 139:armwave.c     ****         default:
 140:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 460              		.loc 1 140 13 view .LVU123
 461              	@ armwave.c:140:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 462              		.loc 1 140 24 is_stmt 0 view .LVU124
 463 01c4 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 464              	.LVL21:
 465              		.loc 1 140 37 is_stmt 1 view .LVU125
 466              	@ armwave.c:140:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 467              		.loc 1 140 48 is_stmt 0 view .LVU126
 468 01c8 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 469              		.loc 1 140 53 is_stmt 1 view .LVU127
 470              	@ armwave.c:140:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 471              		.loc 1 140 64 is_stmt 0 view .LVU128
 472 01cc 0230C1E5 		strb	r3, [r1, #2]	@ q, rgb_out_30(D)->b
 141:armwave.c     ****             break;
 473              		.loc 1 141 13 is_stmt 1 view .LVU129
 474              	@ armwave.c:143: }
 142:armwave.c     ****     }
 143:armwave.c     **** }
 475              		.loc 1 143 1 is_stmt 0 view .LVU130
 476 01d0 3080BDE8 		pop	{r4, r5, pc}	@
 477              	.L18:
 478              		.align	2
 479              	.L17:
 480 01d4 83BEA02F 		.word	799063683
 481              		.cfi_endproc
 482              	.LFE58:
 484              		.align	2
 485              		.global	fill_rgb_xvimage
 486              		.syntax unified
 487              		.arm
 488              		.fpu vfp
 490              	fill_rgb_xvimage:
 491              	.LVL22:
 492              	.LFB61:
 144:armwave.c     **** 
 145:armwave.c     **** /*
 146:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.
 147:armwave.c     ****  */
 148:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv(XvImage *img, int x, int y, struct armwav
 149:armwave.c     **** {
 150:armwave.c     ****     int uv_base = img->width * img->height;
 151:armwave.c     ****     
 152:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 153:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 154:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 155:armwave.c     **** }
 156:armwave.c     **** 
 157:armwave.c     **** /*
 158:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.  Does not write
 159:armwave.c     ****  * U/V values if x or y are odd.
 160:armwave.c     ****  */
 161:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct 
 162:armwave.c     **** {
 163:armwave.c     ****     int uv_base = img->width * img->height;
 164:armwave.c     ****     
 165:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 166:armwave.c     ****     
 167:armwave.c     ****     if(!(x & 1) && !(y & 1)) {
 168:armwave.c     ****         img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 169:armwave.c     ****         img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 170:armwave.c     ****     }
 171:armwave.c     **** }
 172:armwave.c     **** 
 173:armwave.c     **** /*
 174:armwave.c     ****  * Fill an XvImage canvas with an RGB value.
 175:armwave.c     ****  */
 176:armwave.c     **** void fill_rgb_xvimage(XvImage *img, struct armwave_rgb_t *rgb)
 177:armwave.c     **** {
 493              		.loc 1 177 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 8
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 178:armwave.c     ****     struct armwave_yuv_t yuv;
 497              		.loc 1 178 5 view .LVU132
 179:armwave.c     ****     
 180:armwave.c     ****     // Compute the Y, U and V values, then use memset to block write them
 181:armwave.c     ****     rgb2yuv(rgb, &yuv);
 498              		.loc 1 181 5 view .LVU133
 499              	.LBB6:
 500              	.LBI6:
  91:armwave.c     **** {
 501              		.loc 1 91 6 view .LVU134
 502              	.LBB7:
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 503              		.loc 1 93 5 view .LVU135
 504              	.LBE7:
 505              	.LBE6:
 506              	@ armwave.c:177: {
 177:armwave.c     ****     struct armwave_yuv_t yuv;
 507              		.loc 1 177 1 is_stmt 0 view .LVU136
 508 01d8 10402DE9 		push	{r4, lr}	@
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 512 01dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 513              		.cfi_def_cfa_offset 32
 514              		.cfi_offset 80, -32
 515              		.cfi_offset 81, -28
 516              		.cfi_offset 82, -24
 517              		.cfi_offset 83, -20
 518              		.cfi_offset 84, -16
 519              		.cfi_offset 85, -12
 520              	.LBB24:
 521              	.LBB8:
 522              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 523              		.loc 1 93 33 view .LVU137
 524 01e0 476A9FED 		vldr.32	s12, .L21	@ tmp204,
 525              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 526              		.loc 1 93 22 view .LVU138
 527 01e4 477ADFED 		vldr.32	s15, .L21+4	@ tmp206,
 528              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 529              		.loc 1 93 56 view .LVU139
 530 01e8 476ADFED 		vldr.32	s13, .L21+8	@ tmp208,
 531              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 532              		.loc 1 93 41 view .LVU140
 533 01ec 0030D1E5 		ldrb	r3, [r1]	@ zero_extendqisi2	@ rgb_39(D)->r, rgb_39(D)->r
 534              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 535              		.loc 1 93 79 view .LVU141
 536 01f0 467A9FED 		vldr.32	s14, .L21+12	@ tmp211,
 537              	.LBE8:
 538              	.LBE24:
 539              	@ armwave.c:177: {
 177:armwave.c     ****     struct armwave_yuv_t yuv;
 540              		.loc 1 177 1 view .LVU142
 541 01f4 08D04DE2 		sub	sp, sp, #8	@,,
 542              		.cfi_def_cfa_offset 40
 543              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 182:armwave.c     ****     
 183:armwave.c     ****     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 544              		.loc 1 183 36 view .LVU143
 545 01f8 182090E5 		ldr	r2, [r0, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 546              	.LBB25:
 547              	.LBB9:
 548              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 549              		.loc 1 93 41 view .LVU144
 550 01fc 903A09EE 		vmov	s19, r3	@ int	@ rgb_39(D)->r, rgb_39(D)->r
 551              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 552              		.loc 1 93 64 view .LVU145
 553 0200 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2	@ rgb_39(D)->g, rgb_39(D)->g
 554              	.LBE9:
 555              	.LBE25:
 556              	@ armwave.c:177: {
 177:armwave.c     ****     struct armwave_yuv_t yuv;
 557              		.loc 1 177 1 view .LVU146
 558 0204 0040A0E1 		mov	r4, r0	@ img, img
 559              	.LBB26:
 560              	.LBB10:
 561              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 562              		.loc 1 95 22 view .LVU147
 563 0208 418A9FED 		vldr.32	s16, .L21+16	@ tmp257,
 564              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 565              		.loc 1 93 33 view .LVU148
 566 020c E99AF8EE 		vcvt.f32.s32	s19, s19	@ _48, rgb_39(D)->r
 567              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 568              		.loc 1 93 64 view .LVU149
 569 0210 103A09EE 		vmov	s18, r3	@ int	@ rgb_39(D)->g, rgb_39(D)->g
 570              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 571              		.loc 1 93 87 view .LVU150
 572 0214 0230D1E5 		ldrb	r3, [r1, #2]	@ zero_extendqisi2	@ rgb_39(D)->b, rgb_39(D)->b
 573              	.LBE10:
 574              	.LBE26:
 575              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 576              		.loc 1 183 22 view .LVU151
 577 0218 001092E5 		ldr	r1, [r2]	@ *_2, *_2
 578              	.LVL23:
 579              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 580              		.loc 1 183 59 view .LVU152
 581 021c 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 582              	.LBB27:
 583              	.LBB11:
 584              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 585              		.loc 1 93 56 view .LVU153
 586 0220 C99AB8EE 		vcvt.f32.s32	s18, s18	@ _53, rgb_39(D)->g
 587              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 588              		.loc 1 93 87 view .LVU154
 589 0224 903A08EE 		vmov	s17, r3	@ int	@ rgb_39(D)->b, rgb_39(D)->b
 590              	.LBE11:
 591              	.LBE27:
 592              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 593              		.loc 1 183 59 view .LVU155
 594 0228 043090E5 		ldr	r3, [r0, #4]	@ img_41(D)->width, img_41(D)->width
 595              	.LBB28:
 596              	.LBB12:
 597              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 598              		.loc 1 93 22 view .LVU156
 599 022c 867A49EE 		vmla.f32	s15, s19, s12	@ tmp205, _48, tmp204
 600              	.LBE12:
 601              	.LBE28:
 602              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 603              		.loc 1 183 22 view .LVU157
 604 0230 1C0090E5 		ldr	r0, [r0, #28]	@ img_41(D)->data, img_41(D)->data
 605              	.LVL24:
 606              	.LBB29:
 607              	.LBB13:
 608              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 609              		.loc 1 93 79 view .LVU158
 610 0234 E88AF8EE 		vcvt.f32.s32	s17, s17	@ _58, rgb_39(D)->b
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 611              		.loc 1 94 5 is_stmt 1 view .LVU159
  95:armwave.c     **** }
 612              		.loc 1 95 5 view .LVU160
 613              	.LVL25:
  95:armwave.c     **** }
 614              		.loc 1 95 5 is_stmt 0 view .LVU161
 615              	.LBE13:
 616              	.LBE29:
 617              		.loc 1 183 5 is_stmt 1 view .LVU162
 618 0238 920302E0 		mul	r2, r2, r3	@, img_41(D)->height, img_41(D)->width
 619              	.LBB30:
 620              	.LBB14:
 621              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 622              		.loc 1 95 33 is_stmt 0 view .LVU163
 623 023c 35AA9FED 		vldr.32	s20, .L21+20	@ tmp255,
 624              	.LBE14:
 625              	.LBE30:
 626              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 627              		.loc 1 183 5 view .LVU164
 628 0240 010080E0 		add	r0, r0, r1	@, img_41(D)->data, *_2
 629              	.LBB31:
 630              	.LBB15:
 631              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 632              		.loc 1 93 46 view .LVU165
 633 0244 267A49EE 		vmla.f32	s15, s18, s13	@ tmp209, _53, tmp208
 634              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 635              		.loc 1 93 69 view .LVU166
 636 0248 877A48EE 		vmla.f32	s15, s17, s14	@ tmp212, _58, tmp211
 637              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 638              		.loc 1 93 16 view .LVU167
 639 024c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp214, tmp212
 640 0250 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp214, %sfp
 641              	.LBE15:
 642              	.LBE31:
 643              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 644              		.loc 1 183 5 view .LVU168
 645 0254 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 646 0258 FEFFFFEB 		bl	memset		@
 647              	.LVL26:
 184:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 648              		.loc 1 184 5 is_stmt 1 view .LVU169
 649              	.LBB32:
 650              	.LBB16:
 651              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 652              		.loc 1 95 22 is_stmt 0 view .LVU170
 653 025c 487AF0EE 		vmov.f32	s15, s16	@ tmp256, tmp257
 654              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 655              		.loc 1 95 56 view .LVU171
 656 0260 2D6ADFED 		vldr.32	s13, .L21+24	@ tmp259,
 657              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 658              		.loc 1 95 79 view .LVU172
 659 0264 2D7A9FED 		vldr.32	s14, .L21+28	@ tmp262,
 660              	.LBE16:
 661              	.LBE32:
 662              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 663              		.loc 1 184 61 view .LVU173
 664 0268 141094E5 		ldr	r1, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 665              	.LBB33:
 666              	.LBB17:
 667              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 668              		.loc 1 95 22 view .LVU174
 669 026c 8A7A49EE 		vmla.f32	s15, s19, s20	@ tmp256, _48, tmp255
 670              	.LBE17:
 671              	.LBE33:
 672              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 673              		.loc 1 184 65 view .LVU175
 674 0270 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 675 0274 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_19 + 4B], MEM[(int *)_19 + 4B]
 676              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 677              		.loc 1 184 36 view .LVU176
 678 0278 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 679              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 680              		.loc 1 184 22 view .LVU177
 681 027c 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 682              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 683              		.loc 1 184 65 view .LVU178
 684 0280 920102E0 		mul	r2, r2, r1	@ tmp247, img_41(D)->height, MEM[(int *)_19 + 4B]
 685              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 686              		.loc 1 184 22 view .LVU179
 687 0284 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_13 + 4B], MEM[(int *)_13 + 4B]
 688              	.LBB34:
 689              	.LBB18:
 690              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 691              		.loc 1 95 46 view .LVU180
 692 0288 667A49EE 		vmls.f32	s15, s18, s13	@ tmp260, _53, tmp259
 693              	.LBE18:
 694              	.LBE34:
 695              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 696              		.loc 1 184 80 view .LVU181
 697 028c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp252, tmp247, tmp247,
 698              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 699              		.loc 1 184 5 view .LVU182
 700 0290 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_13 + 4B]
 701 0294 C220A0E1 		asr	r2, r2, #1	@, tmp252,
 702              	.LBB35:
 703              	.LBB19:
 704              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 705              		.loc 1 95 69 view .LVU183
 706 0298 C77A48EE 		vmls.f32	s15, s17, s14	@ tmp263, _58, tmp262
 707              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 708              		.loc 1 95 16 view .LVU184
 709 029c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp265, tmp263
 710 02a0 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp265, %sfp
 711              	.LBE19:
 712              	.LBE35:
 713              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 714              		.loc 1 184 5 view .LVU185
 715 02a4 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 716 02a8 FEFFFFEB 		bl	memset		@
 717              	.LVL27:
 185:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 718              		.loc 1 185 5 is_stmt 1 view .LVU186
 719              	.LBB36:
 720              	.LBB20:
 721              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 722              		.loc 1 94 33 is_stmt 0 view .LVU187
 723 02ac 1C7A9FED 		vldr.32	s14, .L21+32	@ tmp306,
 724              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 725              		.loc 1 94 56 view .LVU188
 726 02b0 1C7ADFED 		vldr.32	s15, .L21+36	@ tmp310,
 727              	.LBE20:
 728              	.LBE36:
 729              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 730              		.loc 1 185 61 view .LVU189
 731 02b4 143094E5 		ldr	r3, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 732              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 733              		.loc 1 185 65 view .LVU190
 734 02b8 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 735              	.LBB37:
 736              	.LBB21:
 737              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 738              		.loc 1 94 22 view .LVU191
 739 02bc 878A09EE 		vmla.f32	s16, s19, s14	@ tmp307, _48, tmp306
 740              	.LBE21:
 741              	.LBE37:
 742              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 743              		.loc 1 185 65 view .LVU192
 744 02c0 081093E5 		ldr	r1, [r3, #8]	@ MEM[(int *)_32 + 8B], MEM[(int *)_32 + 8B]
 745              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 746              		.loc 1 185 36 view .LVU193
 747 02c4 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 748              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 749              		.loc 1 185 22 view .LVU194
 750 02c8 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 751              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 752              		.loc 1 185 65 view .LVU195
 753 02cc 920102E0 		mul	r2, r2, r1	@ tmp298, img_41(D)->height, MEM[(int *)_32 + 8B]
 754              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 755              		.loc 1 185 22 view .LVU196
 756 02d0 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_26 + 8B], MEM[(int *)_26 + 8B]
 757              	.LBB38:
 758              	.LBB22:
 759              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 760              		.loc 1 94 46 view .LVU197
 761 02d4 678A09EE 		vmls.f32	s16, s18, s15	@ tmp311, _53, tmp310
 762              	.LBE22:
 763              	.LBE38:
 764              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 765              		.loc 1 185 80 view .LVU198
 766 02d8 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp303, tmp298, tmp298,
 767              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 768              		.loc 1 185 5 view .LVU199
 769 02dc 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_26 + 8B]
 770 02e0 C220A0E1 		asr	r2, r2, #1	@, tmp303,
 771              	.LBB39:
 772              	.LBB23:
 773              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 774              		.loc 1 94 69 view .LVU200
 775 02e4 8A8A08EE 		vmla.f32	s16, s17, s20	@ tmp314, _58, tmp255
 776              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 777              		.loc 1 94 16 view .LVU201
 778 02e8 C87AFCEE 		vcvt.u32.f32	s15, s16	@ tmp316, tmp314
 779 02ec 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp316, %sfp
 780              	.LBE23:
 781              	.LBE39:
 782              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 783              		.loc 1 185 5 view .LVU202
 784 02f0 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 785              	@ armwave.c:186: }
 186:armwave.c     **** }
 786              		.loc 1 186 1 view .LVU203
 787 02f4 08D08DE2 		add	sp, sp, #8	@,,
 788              		.cfi_def_cfa_offset 32
 789              		@ sp needed	@
 790 02f8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 791              		.cfi_restore 84
 792              		.cfi_restore 85
 793              		.cfi_restore 82
 794              		.cfi_restore 83
 795              		.cfi_restore 80
 796              		.cfi_restore 81
 797              		.cfi_def_cfa_offset 8
 798 02fc 1040BDE8 		pop	{r4, lr}	@
 799              		.cfi_restore 14
 800              		.cfi_restore 4
 801              		.cfi_def_cfa_offset 0
 802              	.LVL28:
 803              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 804              		.loc 1 185 5 view .LVU204
 805 0300 FEFFFFEA 		b	memset		@
 806              	.LVL29:
 807              	.L22:
 808              		.align	2
 809              	.L21:
 810 0304 6F12833E 		.word	1048777327
 811 0308 00008041 		.word	1098907648
 812 030c 2506013F 		.word	1057031717
 813 0310 F0A7C63D 		.word	1036429296
 814 0314 00000043 		.word	1124073472
 815 0318 9CC4E03E 		.word	1054917788
 816 031c 7F6ABC3E 		.word	1052535423
 817 0320 7368913D 		.word	1032939635
 818 0324 508D17BE 		.word	-1105752752
 819 0328 F4FD943E 		.word	1049951732
 820              		.cfi_endproc
 821              	.LFE61:
 823              		.align	2
 824              		.global	armwave_prep_yuv_palette
 825              		.syntax unified
 826              		.arm
 827              		.fpu vfp
 829              	armwave_prep_yuv_palette:
 830              	.LVL30:
 831              	.LFB62:
 187:armwave.c     **** 
 188:armwave.c     **** /*
 189:armwave.c     ****  * Prepare the YUV table for a given range of intensities.
 190:armwave.c     ****  *
 191:armwave.c     ****  * This can be used to generate different palettes. Right now only
 192:armwave.c     ****  * the default palette '0' is supported which is linear intensity with
 193:armwave.c     ****  * given trace colour.
 194:armwave.c     ****  */
 195:armwave.c     **** void armwave_prep_yuv_palette(int palette, struct armwave_color_mix_t *color0, struct armwave_color
 196:armwave.c     **** {
 832              		.loc 1 196 1 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 8
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 197:armwave.c     ****     int v;
 836              		.loc 1 197 5 view .LVU206
 198:armwave.c     ****     float h;
 837              		.loc 1 198 5 view .LVU207
 199:armwave.c     ****     struct armwave_rgb_t rgb_temp;
 838              		.loc 1 199 5 view .LVU208
 200:armwave.c     ****     struct armwave_hsv_t hsv_temp;
 839              		.loc 1 200 5 view .LVU209
 201:armwave.c     ****     
 202:armwave.c     ****     switch(palette) {
 840              		.loc 1 202 5 view .LVU210
 841              	@ armwave.c:196: {
 196:armwave.c     ****     int v;
 842              		.loc 1 196 1 is_stmt 0 view .LVU211
 843 032c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 844              		.cfi_def_cfa_offset 32
 845              		.cfi_offset 4, -32
 846              		.cfi_offset 5, -28
 847              		.cfi_offset 6, -24
 848              		.cfi_offset 7, -20
 849              		.cfi_offset 8, -16
 850              		.cfi_offset 9, -12
 851              		.cfi_offset 10, -8
 852              		.cfi_offset 14, -4
 853 0330 068B2DED 		vpush.64	{d8, d9, d10}	@
 854              		.cfi_def_cfa_offset 56
 855              		.cfi_offset 80, -56
 856              		.cfi_offset 81, -52
 857              		.cfi_offset 82, -48
 858              		.cfi_offset 83, -44
 859              		.cfi_offset 84, -40
 860              		.cfi_offset 85, -36
 861              	@ armwave.c:202:     switch(palette) {
 862              		.loc 1 202 5 view .LVU212
 863 0334 010050E3 		cmp	r0, #1	@ palette,
 864              	@ armwave.c:196: {
 196:armwave.c     ****     int v;
 865              		.loc 1 196 1 view .LVU213
 866 0338 0160A0E1 		mov	r6, r1	@ color0, color0
 867 033c 18D04DE2 		sub	sp, sp, #24	@,,
 868              		.cfi_def_cfa_offset 80
 869              	@ armwave.c:202:     switch(palette) {
 870              		.loc 1 202 5 view .LVU214
 871 0340 1500000A 		beq	.L24		@,
 872 0344 020050E3 		cmp	r0, #2	@ palette,
 873 0348 0050A0E1 		mov	r5, r0	@ palette, palette
 874 034c 9F00000A 		beq	.L25		@,
 875 0350 000050E3 		cmp	r0, #0	@ palette,
 876 0354 5700000A 		beq	.L48		@,
 877              	.LVL31:
 878              	.L26:
 879              		.loc 1 202 5 view .LVU215
 880 0358 54449FE5 		ldr	r4, .L49+36	@ ivtmp.131,
 881              	@ armwave.c:243:         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv
 203:armwave.c     ****         case PLT_SINGLE_COLOUR:
 204:armwave.c     ****             for(v = 0; v < 256; v++) {
 205:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 206:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 207:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 208:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 209:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 210:armwave.c     ****             }
 211:armwave.c     ****             break;
 212:armwave.c     ****         
 213:armwave.c     ****         case PLT_INVERT_SINGLE_COLOUR:
 214:armwave.c     ****             for(v = 0; v < 256; v++) {
 215:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 216:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 217:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 218:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 219:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 220:armwave.c     ****             }
 221:armwave.c     ****             break;
 222:armwave.c     ****         
 223:armwave.c     ****         case PLT_RAINBOW_THERMAL:
 224:armwave.c     ****             for(v = 0; v < 256; v++) {
 225:armwave.c     ****                 hsv_temp.h = v;
 226:armwave.c     ****                 hsv_temp.s = 255;
 227:armwave.c     ****                 
 228:armwave.c     ****                 if(v < 20) {
 229:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 230:armwave.c     ****                 } else {
 231:armwave.c     ****                     hsv_temp.v = 255;
 232:armwave.c     ****                 }
 233:armwave.c     ****                 
 234:armwave.c     ****                 hsv2rgb(&hsv_temp, &rgb_temp);
 235:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 236:armwave.c     ****                 
 237:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h, hsv_temp.s, hsv
 238:armwave.c     ****             }
 239:armwave.c     ****             break;
 240:armwave.c     ****     }
 241:armwave.c     ****     
 242:armwave.c     ****     for(v = 0; v < 256; v++) {
 243:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 882              		.loc 1 243 9 discriminator 3 view .LVU216
 883 035c 54649FE5 		ldr	r6, .L49+40	@ tmp518,
 884              	.LBB48:
 885              	.LBB49:
 886              	@ armwave.c:122:     switch (region)
 122:armwave.c     ****     {
 887              		.loc 1 122 5 discriminator 3 view .LVU217
 888 0360 0050A0E3 		mov	r5, #0	@ v,
 889              	.L40:
 890              	.LVL32:
 122:armwave.c     ****     {
 891              		.loc 1 122 5 discriminator 3 view .LVU218
 892              	.LBE49:
 893              	.LBE48:
 894              		.loc 1 243 9 is_stmt 1 discriminator 3 view .LVU219
 895 0364 0210D4E5 		ldrb	r1, [r4, #2]	@ zero_extendqisi2	@ MEM[base: _415, offset: 2B], MEM[base: _415, offset: 2B]
 896 0368 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2	@, MEM[base: _415, offset: 1B]
 897 036c 0020D4E5 		ldrb	r2, [r4]	@ zero_extendqisi2	@, MEM[base: _415, offset: 0B]
 898 0370 0600A0E1 		mov	r0, r6	@, tmp518
 899 0374 00108DE5 		str	r1, [sp]	@ MEM[base: _415, offset: 2B],
 900 0378 0510A0E1 		mov	r1, r5	@, v
 901              	@ armwave.c:242:     for(v = 0; v < 256; v++) {
 242:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 902              		.loc 1 242 26 is_stmt 0 discriminator 3 view .LVU220
 903 037c 015085E2 		add	r5, r5, #1	@ v, v,
 904              	.LVL33:
 905              	@ armwave.c:243:         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv
 906              		.loc 1 243 9 discriminator 3 view .LVU221
 907 0380 FEFFFFEB 		bl	printf		@
 908              	.LVL34:
 909              	@ armwave.c:242:     for(v = 0; v < 256; v++) {
 242:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 910              		.loc 1 242 5 discriminator 3 view .LVU222
 911 0384 010C55E3 		cmp	r5, #256	@ v,
 912 0388 034084E2 		add	r4, r4, #3	@ ivtmp.131, ivtmp.131,
 913 038c F4FFFF1A 		bne	.L40		@,
 914              	@ armwave.c:245: }
 244:armwave.c     ****     }
 245:armwave.c     **** }
 915              		.loc 1 245 1 view .LVU223
 916 0390 18D08DE2 		add	sp, sp, #24	@,,
 917              		.cfi_remember_state
 918              		.cfi_def_cfa_offset 56
 919              		@ sp needed	@
 920 0394 068BBDEC 		vldm	sp!, {d8-d10}	@,
 921              		.cfi_restore 84
 922              		.cfi_restore 85
 923              		.cfi_restore 82
 924              		.cfi_restore 83
 925              		.cfi_restore 80
 926              		.cfi_restore 81
 927              		.cfi_def_cfa_offset 32
 928 0398 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 929              	.LVL35:
 930              	.L24:
 931              		.cfi_restore_state
 932              	.LBB59:
 933              	.LBB60:
 934              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 935              		.loc 1 93 33 view .LVU224
 936 039c FBAA9FED 		vldr.32	s20, .L49	@ tmp352,
 937              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 938              		.loc 1 93 22 view .LVU225
 939 03a0 FB9ADFED 		vldr.32	s19, .L49+4	@ tmp354,
 940              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 941              		.loc 1 93 56 view .LVU226
 942 03a4 FB9A9FED 		vldr.32	s18, .L49+8	@ tmp356,
 943              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 944              		.loc 1 93 79 view .LVU227
 945 03a8 FB8ADFED 		vldr.32	s17, .L49+12	@ tmp359,
 946              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 947              		.loc 1 94 33 view .LVU228
 948 03ac FB8A9FED 		vldr.32	s16, .L49+16	@ tmp364,
 949 03b0 FC739FE5 		ldr	r7, .L49+36	@ ivtmp.145,
 950              	.LBE60:
 951              	.LBE59:
 952              	@ armwave.c:218:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 218:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 953              		.loc 1 218 17 view .LVU229
 954 03b4 00849FE5 		ldr	r8, .L49+44	@ tmp525,
 955              	@ armwave.c:214:             for(v = 0; v < 256; v++) {
 214:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 956              		.loc 1 214 19 view .LVU230
 957 03b8 0050A0E3 		mov	r5, #0	@ v,
 958              	.LVL36:
 959              	.L28:
 215:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 960              		.loc 1 215 17 is_stmt 1 discriminator 3 view .LVU231
 216:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 961              		.loc 1 216 17 discriminator 3 view .LVU232
 217:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 962              		.loc 1 217 17 discriminator 3 view .LVU233
 218:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 963              		.loc 1 218 17 discriminator 3 view .LVU234
 964              	@ armwave.c:215:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 215:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 965              		.loc 1 215 30 is_stmt 0 discriminator 3 view .LVU235
 966 03bc F020D6E1 		ldrsh	r2, [r6]	@ color0_82(D)->r, color0_82(D)->r
 967              	@ armwave.c:216:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 216:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 968              		.loc 1 216 30 discriminator 3 view .LVU236
 969 03c0 F230D6E1 		ldrsh	r3, [r6, #2]	@ color0_82(D)->g, color0_82(D)->g
 970              	@ armwave.c:217:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 217:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 971              		.loc 1 217 30 discriminator 3 view .LVU237
 972 03c4 F400D6E1 		ldrsh	r0, [r6, #4]	@ color0_82(D)->b, color0_82(D)->b
 973              	@ armwave.c:218:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 218:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 974              		.loc 1 218 17 discriminator 3 view .LVU238
 975 03c8 FF1065E2 		rsb	r1, r5, #255	@, v,
 976              	@ armwave.c:215:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 215:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 977              		.loc 1 215 30 discriminator 3 view .LVU239
 978 03cc 950202E0 		mul	r2, r5, r2	@ tmp342, v, color0_82(D)->r
 979              	@ armwave.c:216:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 216:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 980              		.loc 1 216 30 discriminator 3 view .LVU240
 981 03d0 950303E0 		mul	r3, r5, r3	@ tmp345, v, color0_82(D)->g
 982              	@ armwave.c:217:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 217:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 983              		.loc 1 217 30 discriminator 3 view .LVU241
 984 03d4 950000E0 		mul	r0, r5, r0	@ tmp348, v, color0_82(D)->b
 985              	@ armwave.c:215:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 215:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 986              		.loc 1 215 30 discriminator 3 view .LVU242
 987 03d8 4224A0E1 		asr	r2, r2, #8	@ tmp340, tmp342,
 988              	@ armwave.c:216:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 216:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 989              		.loc 1 216 30 discriminator 3 view .LVU243
 990 03dc 4334A0E1 		asr	r3, r3, #8	@ tmp343, tmp345,
 991              	@ armwave.c:215:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 215:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 992              		.loc 1 215 30 discriminator 3 view .LVU244
 993 03e0 FF0052E3 		cmp	r2, #255	@ tmp340,
 994              	@ armwave.c:217:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 217:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 995              		.loc 1 217 30 discriminator 3 view .LVU245
 996 03e4 4004A0E1 		asr	r0, r0, #8	@ tmp346, tmp348,
 997              	@ armwave.c:215:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 215:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 998              		.loc 1 215 30 discriminator 3 view .LVU246
 999 03e8 FF20A0A3 		movge	r2, #255	@ tmp340,
 1000              	@ armwave.c:216:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 216:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1001              		.loc 1 216 30 discriminator 3 view .LVU247
 1002 03ec FF0053E3 		cmp	r3, #255	@ tmp343,
 1003 03f0 FF30A0A3 		movge	r3, #255	@ tmp343,
 1004              	@ armwave.c:217:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 217:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1005              		.loc 1 217 30 discriminator 3 view .LVU248
 1006 03f4 FF0050E3 		cmp	r0, #255	@ tmp346,
 1007 03f8 FF00A0A3 		movge	r0, #255	@ tmp346,
 1008 03fc 72A0EFE6 		uxtb	r10, r2	@ _78, tmp340
 1009 0400 7040EFE6 		uxtb	r4, r0	@ _100, tmp346
 1010 0404 7390EFE6 		uxtb	r9, r3	@ _99, tmp343
 1011              	@ armwave.c:218:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 218:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 1012              		.loc 1 218 17 discriminator 3 view .LVU249
 1013 0408 0930A0E1 		mov	r3, r9	@, _99
 1014 040c 0A20A0E1 		mov	r2, r10	@, _78
 1015 0410 00408DE5 		str	r4, [sp]	@ _100,
 1016 0414 0800A0E1 		mov	r0, r8	@, tmp525
 1017 0418 FEFFFFEB 		bl	printf		@
 1018              	.LVL37:
 219:armwave.c     ****             }
 1019              		.loc 1 219 17 is_stmt 1 discriminator 3 view .LVU250
 1020              	.LBB63:
 1021              	.LBI59:
  91:armwave.c     **** {
 1022              		.loc 1 91 6 discriminator 3 view .LVU251
 1023              	.LBB61:
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1024              		.loc 1 93 5 discriminator 3 view .LVU252
 1025              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1026              		.loc 1 93 33 is_stmt 0 discriminator 3 view .LVU253
 1027 041c 90AA07EE 		vmov	s15, r10	@ int	@ _78, _78
 1028              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1029              		.loc 1 94 22 discriminator 3 view .LVU254
 1030 0420 E86A9FED 		vldr.32	s12, .L49+56	@ tmp366,
 1031              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1032              		.loc 1 93 22 discriminator 3 view .LVU255
 1033 0424 695AB0EE 		vmov.f32	s10, s19	@ tmp353, tmp354
 1034              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1035              		.loc 1 94 79 discriminator 3 view .LVU256
 1036 0428 E74ADFED 		vldr.32	s9, .L49+60	@ tmp371,
 1037              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1038              		.loc 1 93 33 discriminator 3 view .LVU257
 1039 042c E76AF8EE 		vcvt.f32.s32	s13, s15	@ _139, _78
 1040              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1041              		.loc 1 93 56 discriminator 3 view .LVU258
 1042 0430 909A07EE 		vmov	s15, r9	@ int	@ _99, _99
 1043              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1044              		.loc 1 94 22 discriminator 3 view .LVU259
 1045 0434 465AF0EE 		vmov.f32	s11, s12	@ tmp365, tmp366
 1046              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1047              		.loc 1 94 56 discriminator 3 view .LVU260
 1048 0438 D93A9FED 		vldr.32	s6, .L49+20	@ tmp368,
 1049              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1050              		.loc 1 95 56 discriminator 3 view .LVU261
 1051 043c D93ADFED 		vldr.32	s7, .L49+24	@ tmp380,
 1052              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1053              		.loc 1 93 56 discriminator 3 view .LVU262
 1054 0440 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _144, _99
 1055              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1056              		.loc 1 93 79 discriminator 3 view .LVU263
 1057 0444 904A07EE 		vmov	s15, r4	@ int	@ _100, _100
 1058              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1059              		.loc 1 95 79 discriminator 3 view .LVU264
 1060 0448 E44A9FED 		vldr.32	s8, .L49+80	@ tmp383,
 1061              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1062              		.loc 1 93 22 discriminator 3 view .LVU265
 1063 044c 8A5A06EE 		vmla.f32	s10, s13, s20	@ tmp353, _139, tmp352
 1064              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1065              		.loc 1 94 22 discriminator 3 view .LVU266
 1066 0450 885A46EE 		vmla.f32	s11, s13, s16	@ tmp365, _139, tmp364
 1067              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1068              		.loc 1 93 79 discriminator 3 view .LVU267
 1069 0454 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _149, _100
 1070              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1071              		.loc 1 95 22 discriminator 3 view .LVU268
 1072 0458 A46A06EE 		vmla.f32	s12, s13, s9	@ tmp377, _139, tmp371
 1073              	.LBE61:
 1074              	.LBE63:
 1075              	@ armwave.c:214:             for(v = 0; v < 256; v++) {
 214:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1076              		.loc 1 214 34 discriminator 3 view .LVU269
 1077 045c 015085E2 		add	r5, r5, #1	@ v, v,
 1078              	.LVL38:
 1079              	@ armwave.c:214:             for(v = 0; v < 256; v++) {
 214:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1080              		.loc 1 214 13 discriminator 3 view .LVU270
 1081 0460 010C55E3 		cmp	r5, #256	@ v,
 1082 0464 037047E2 		sub	r7, r7, #3	@ ivtmp.145, ivtmp.145,
 1083              	.LBB64:
 1084              	.LBB62:
 1085              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1086              		.loc 1 93 46 discriminator 3 view .LVU271
 1087 0468 095A07EE 		vmla.f32	s10, s14, s18	@ tmp357, _144, tmp356
 1088              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1089              		.loc 1 94 46 discriminator 3 view .LVU272
 1090 046c 656AF0EE 		vmov.f32	s13, s11	@ tmp365, tmp365
 1091              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1092              		.loc 1 95 46 discriminator 3 view .LVU273
 1093 0470 636A07EE 		vmls.f32	s12, s14, s7	@ tmp381, _144, tmp380
 1094              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1095              		.loc 1 94 46 discriminator 3 view .LVU274
 1096 0474 436A47EE 		vmls.f32	s13, s14, s6	@ tmp365, _144, tmp368
 1097              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1098              		.loc 1 93 69 discriminator 3 view .LVU275
 1099 0478 455AF0EE 		vmov.f32	s11, s10	@ tmp357, tmp357
 1100              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1101              		.loc 1 95 69 discriminator 3 view .LVU276
 1102 047c C46A07EE 		vmls.f32	s12, s15, s8	@ tmp384, _149, tmp383
 1103              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1104              		.loc 1 93 69 discriminator 3 view .LVU277
 1105 0480 A85A47EE 		vmla.f32	s11, s15, s17	@ tmp357, _149, tmp359
 1106              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1107              		.loc 1 94 69 discriminator 3 view .LVU278
 1108 0484 667AB0EE 		vmov.f32	s14, s13	@ tmp369, tmp369
 1109 0488 A47A07EE 		vmla.f32	s14, s15, s9	@ tmp369, _149, tmp371
 1110              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1111              		.loc 1 93 16 discriminator 3 view .LVU279
 1112 048c E57AFCEE 		vcvt.u32.f32	s15, s11	@ tmp361, tmp360
 1113 0490 901A17EE 		vmov	r1, s15	@ int	@ tmp361, tmp361
 1114              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1115              		.loc 1 94 16 discriminator 3 view .LVU280
 1116 0494 C77AFCEE 		vcvt.u32.f32	s15, s14	@ tmp373, tmp372
 1117              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1118              		.loc 1 93 16 discriminator 3 view .LVU281
 1119 0498 0013C7E5 		strb	r1, [r7, #768]	@ tmp361, MEM[base: _399, offset: 765B]
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1120              		.loc 1 94 5 is_stmt 1 discriminator 3 view .LVU282
 1121              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1122              		.loc 1 94 16 is_stmt 0 discriminator 3 view .LVU283
 1123 049c 902A17EE 		vmov	r2, s15	@ int	@ tmp373, tmp373
 1124              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1125              		.loc 1 95 16 discriminator 3 view .LVU284
 1126 04a0 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp385, tmp384
 1127              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1128              		.loc 1 94 16 discriminator 3 view .LVU285
 1129 04a4 0123C7E5 		strb	r2, [r7, #769]	@ tmp373, MEM[base: _399, offset: 766B]
  95:armwave.c     **** }
 1130              		.loc 1 95 5 is_stmt 1 discriminator 3 view .LVU286
 1131              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1132              		.loc 1 95 16 is_stmt 0 discriminator 3 view .LVU287
 1133 04a8 903A17EE 		vmov	r3, s15	@ int	@ tmp385, tmp385
 1134 04ac 0233C7E5 		strb	r3, [r7, #770]	@ tmp385, MEM[base: _399, offset: 767B]
 1135              	.LVL39:
  95:armwave.c     **** }
 1136              		.loc 1 95 16 discriminator 3 view .LVU288
 1137              	.LBE62:
 1138              	.LBE64:
 1139              	@ armwave.c:214:             for(v = 0; v < 256; v++) {
 214:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1140              		.loc 1 214 13 discriminator 3 view .LVU289
 1141 04b0 C1FFFF1A 		bne	.L28		@,
 1142 04b4 A7FFFFEA 		b	.L26		@
 1143              	.LVL40:
 1144              	.L48:
 1145              	.LBB65:
 1146              	.LBB66:
 1147              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1148              		.loc 1 93 33 view .LVU290
 1149 04b8 B4AA9FED 		vldr.32	s20, .L49	@ tmp305,
 1150              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1151              		.loc 1 93 22 view .LVU291
 1152 04bc B49ADFED 		vldr.32	s19, .L49+4	@ tmp307,
 1153              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1154              		.loc 1 93 56 view .LVU292
 1155 04c0 B49A9FED 		vldr.32	s18, .L49+8	@ tmp309,
 1156              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1157              		.loc 1 93 79 view .LVU293
 1158 04c4 B48ADFED 		vldr.32	s17, .L49+12	@ tmp312,
 1159              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1160              		.loc 1 94 33 view .LVU294
 1161 04c8 B48A9FED 		vldr.32	s16, .L49+16	@ tmp317,
 1162 04cc E0729FE5 		ldr	r7, .L49+36	@ ivtmp.138,
 1163              	.LBE66:
 1164              	.LBE65:
 1165              	@ armwave.c:208:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 208:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1166              		.loc 1 208 17 view .LVU295
 1167 04d0 E4829FE5 		ldr	r8, .L49+44	@ tmp519,
 1168              	.LVL41:
 1169              	.L27:
 205:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1170              		.loc 1 205 17 is_stmt 1 discriminator 3 view .LVU296
 206:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1171              		.loc 1 206 17 discriminator 3 view .LVU297
 207:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1172              		.loc 1 207 17 discriminator 3 view .LVU298
 208:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1173              		.loc 1 208 17 discriminator 3 view .LVU299
 1174              	@ armwave.c:205:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 205:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1175              		.loc 1 205 30 is_stmt 0 discriminator 3 view .LVU300
 1176 04d4 F020D6E1 		ldrsh	r2, [r6]	@ color0_82(D)->r, color0_82(D)->r
 1177              	@ armwave.c:206:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 206:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1178              		.loc 1 206 30 discriminator 3 view .LVU301
 1179 04d8 F230D6E1 		ldrsh	r3, [r6, #2]	@ color0_82(D)->g, color0_82(D)->g
 1180              	@ armwave.c:207:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 207:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1181              		.loc 1 207 30 discriminator 3 view .LVU302
 1182 04dc F400D6E1 		ldrsh	r0, [r6, #4]	@ color0_82(D)->b, color0_82(D)->b
 1183              	@ armwave.c:208:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 208:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1184              		.loc 1 208 17 discriminator 3 view .LVU303
 1185 04e0 0510A0E1 		mov	r1, r5	@, palette
 1186              	@ armwave.c:205:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 205:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1187              		.loc 1 205 30 discriminator 3 view .LVU304
 1188 04e4 950202E0 		mul	r2, r5, r2	@ tmp296, palette, color0_82(D)->r
 1189              	@ armwave.c:206:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 206:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1190              		.loc 1 206 30 discriminator 3 view .LVU305
 1191 04e8 950303E0 		mul	r3, r5, r3	@ tmp299, palette, color0_82(D)->g
 1192              	@ armwave.c:207:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 207:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1193              		.loc 1 207 30 discriminator 3 view .LVU306
 1194 04ec 950000E0 		mul	r0, r5, r0	@ tmp302, palette, color0_82(D)->b
 1195              	@ armwave.c:205:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 205:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1196              		.loc 1 205 30 discriminator 3 view .LVU307
 1197 04f0 4224A0E1 		asr	r2, r2, #8	@ tmp294, tmp296,
 1198              	@ armwave.c:206:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 206:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1199              		.loc 1 206 30 discriminator 3 view .LVU308
 1200 04f4 4334A0E1 		asr	r3, r3, #8	@ tmp297, tmp299,
 1201              	@ armwave.c:205:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 205:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1202              		.loc 1 205 30 discriminator 3 view .LVU309
 1203 04f8 FF0052E3 		cmp	r2, #255	@ tmp294,
 1204              	@ armwave.c:207:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 207:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1205              		.loc 1 207 30 discriminator 3 view .LVU310
 1206 04fc 4004A0E1 		asr	r0, r0, #8	@ tmp300, tmp302,
 1207              	@ armwave.c:205:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 205:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1208              		.loc 1 205 30 discriminator 3 view .LVU311
 1209 0500 FF20A0A3 		movge	r2, #255	@ tmp294,
 1210              	@ armwave.c:206:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 206:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1211              		.loc 1 206 30 discriminator 3 view .LVU312
 1212 0504 FF0053E3 		cmp	r3, #255	@ tmp297,
 1213 0508 FF30A0A3 		movge	r3, #255	@ tmp297,
 1214              	@ armwave.c:207:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 207:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1215              		.loc 1 207 30 discriminator 3 view .LVU313
 1216 050c FF0050E3 		cmp	r0, #255	@ tmp300,
 1217 0510 FF00A0A3 		movge	r0, #255	@ tmp300,
 1218 0514 72A0EFE6 		uxtb	r10, r2	@ _93, tmp294
 1219 0518 7040EFE6 		uxtb	r4, r0	@ _259, tmp300
 1220 051c 7390EFE6 		uxtb	r9, r3	@ _87, tmp297
 1221              	@ armwave.c:208:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 208:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1222              		.loc 1 208 17 discriminator 3 view .LVU314
 1223 0520 0930A0E1 		mov	r3, r9	@, _87
 1224 0524 0A20A0E1 		mov	r2, r10	@, _93
 1225 0528 00408DE5 		str	r4, [sp]	@ _259,
 1226 052c 0800A0E1 		mov	r0, r8	@, tmp519
 1227 0530 FEFFFFEB 		bl	printf		@
 1228              	.LVL42:
 209:armwave.c     ****             }
 1229              		.loc 1 209 17 is_stmt 1 discriminator 3 view .LVU315
 1230              	.LBB69:
 1231              	.LBI65:
  91:armwave.c     **** {
 1232              		.loc 1 91 6 discriminator 3 view .LVU316
 1233              	.LBB67:
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1234              		.loc 1 93 5 discriminator 3 view .LVU317
 1235              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1236              		.loc 1 93 33 is_stmt 0 discriminator 3 view .LVU318
 1237 0534 90AA07EE 		vmov	s15, r10	@ int	@ _93, _93
 1238              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1239              		.loc 1 94 22 discriminator 3 view .LVU319
 1240 0538 A26A9FED 		vldr.32	s12, .L49+56	@ tmp319,
 1241              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1242              		.loc 1 93 22 discriminator 3 view .LVU320
 1243 053c 695AB0EE 		vmov.f32	s10, s19	@ tmp306, tmp307
 1244              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1245              		.loc 1 94 79 discriminator 3 view .LVU321
 1246 0540 A14ADFED 		vldr.32	s9, .L49+60	@ tmp324,
 1247              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1248              		.loc 1 93 33 discriminator 3 view .LVU322
 1249 0544 E76AF8EE 		vcvt.f32.s32	s13, s15	@ _109, _93
 1250              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1251              		.loc 1 93 56 discriminator 3 view .LVU323
 1252 0548 909A07EE 		vmov	s15, r9	@ int	@ _87, _87
 1253              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1254              		.loc 1 94 22 discriminator 3 view .LVU324
 1255 054c 465AF0EE 		vmov.f32	s11, s12	@ tmp318, tmp319
 1256              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1257              		.loc 1 94 56 discriminator 3 view .LVU325
 1258 0550 933A9FED 		vldr.32	s6, .L49+20	@ tmp321,
 1259              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1260              		.loc 1 95 56 discriminator 3 view .LVU326
 1261 0554 933ADFED 		vldr.32	s7, .L49+24	@ tmp333,
 1262              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1263              		.loc 1 93 56 discriminator 3 view .LVU327
 1264 0558 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _114, _87
 1265              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1266              		.loc 1 93 79 discriminator 3 view .LVU328
 1267 055c 904A07EE 		vmov	s15, r4	@ int	@ _259, _259
 1268              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1269              		.loc 1 95 79 discriminator 3 view .LVU329
 1270 0560 9E4A9FED 		vldr.32	s8, .L49+80	@ tmp336,
 1271              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1272              		.loc 1 93 22 discriminator 3 view .LVU330
 1273 0564 8A5A06EE 		vmla.f32	s10, s13, s20	@ tmp306, _109, tmp305
 1274              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1275              		.loc 1 94 22 discriminator 3 view .LVU331
 1276 0568 885A46EE 		vmla.f32	s11, s13, s16	@ tmp318, _109, tmp317
 1277              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1278              		.loc 1 93 79 discriminator 3 view .LVU332
 1279 056c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _119, _259
 1280              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1281              		.loc 1 95 22 discriminator 3 view .LVU333
 1282 0570 A46A06EE 		vmla.f32	s12, s13, s9	@ tmp330, _109, tmp324
 1283              	.LBE67:
 1284              	.LBE69:
 1285              	@ armwave.c:204:             for(v = 0; v < 256; v++) {
 204:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1286              		.loc 1 204 34 discriminator 3 view .LVU334
 1287 0574 015085E2 		add	r5, r5, #1	@ palette, palette,
 1288              	.LVL43:
 1289              	@ armwave.c:204:             for(v = 0; v < 256; v++) {
 204:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1290              		.loc 1 204 13 discriminator 3 view .LVU335
 1291 0578 010C55E3 		cmp	r5, #256	@ palette,
 1292 057c 037087E2 		add	r7, r7, #3	@ ivtmp.138, ivtmp.138,
 1293              	.LBB70:
 1294              	.LBB68:
 1295              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1296              		.loc 1 93 46 discriminator 3 view .LVU336
 1297 0580 095A07EE 		vmla.f32	s10, s14, s18	@ tmp310, _114, tmp309
 1298              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1299              		.loc 1 94 46 discriminator 3 view .LVU337
 1300 0584 656AF0EE 		vmov.f32	s13, s11	@ tmp318, tmp318
 1301              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1302              		.loc 1 95 46 discriminator 3 view .LVU338
 1303 0588 636A07EE 		vmls.f32	s12, s14, s7	@ tmp334, _114, tmp333
 1304              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1305              		.loc 1 94 46 discriminator 3 view .LVU339
 1306 058c 436A47EE 		vmls.f32	s13, s14, s6	@ tmp318, _114, tmp321
 1307              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1308              		.loc 1 93 69 discriminator 3 view .LVU340
 1309 0590 455AF0EE 		vmov.f32	s11, s10	@ tmp310, tmp310
 1310              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1311              		.loc 1 95 69 discriminator 3 view .LVU341
 1312 0594 C46A07EE 		vmls.f32	s12, s15, s8	@ tmp337, _119, tmp336
 1313              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1314              		.loc 1 93 69 discriminator 3 view .LVU342
 1315 0598 A85A47EE 		vmla.f32	s11, s15, s17	@ tmp310, _119, tmp312
 1316              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1317              		.loc 1 94 69 discriminator 3 view .LVU343
 1318 059c 667AB0EE 		vmov.f32	s14, s13	@ tmp322, tmp322
 1319 05a0 A47A07EE 		vmla.f32	s14, s15, s9	@ tmp322, _119, tmp324
 1320              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1321              		.loc 1 93 16 discriminator 3 view .LVU344
 1322 05a4 E57AFCEE 		vcvt.u32.f32	s15, s11	@ tmp314, tmp313
 1323 05a8 901A17EE 		vmov	r1, s15	@ int	@ tmp314, tmp314
 1324              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1325              		.loc 1 94 16 discriminator 3 view .LVU345
 1326 05ac C77AFCEE 		vcvt.u32.f32	s15, s14	@ tmp326, tmp325
 1327              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1328              		.loc 1 93 16 discriminator 3 view .LVU346
 1329 05b0 031047E5 		strb	r1, [r7, #-3]	@ tmp314, MEM[base: _409, offset: 0B]
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1330              		.loc 1 94 5 is_stmt 1 discriminator 3 view .LVU347
 1331              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1332              		.loc 1 94 16 is_stmt 0 discriminator 3 view .LVU348
 1333 05b4 902A17EE 		vmov	r2, s15	@ int	@ tmp326, tmp326
 1334              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1335              		.loc 1 95 16 discriminator 3 view .LVU349
 1336 05b8 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp338, tmp337
 1337              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1338              		.loc 1 94 16 discriminator 3 view .LVU350
 1339 05bc 022047E5 		strb	r2, [r7, #-2]	@ tmp326, MEM[base: _409, offset: 1B]
  95:armwave.c     **** }
 1340              		.loc 1 95 5 is_stmt 1 discriminator 3 view .LVU351
 1341              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1342              		.loc 1 95 16 is_stmt 0 discriminator 3 view .LVU352
 1343 05c0 903A17EE 		vmov	r3, s15	@ int	@ tmp338, tmp338
 1344 05c4 013047E5 		strb	r3, [r7, #-1]	@ tmp338, MEM[base: _409, offset: 2B]
 1345              	.LVL44:
  95:armwave.c     **** }
 1346              		.loc 1 95 16 discriminator 3 view .LVU353
 1347              	.LBE68:
 1348              	.LBE70:
 1349              	@ armwave.c:204:             for(v = 0; v < 256; v++) {
 204:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1350              		.loc 1 204 13 discriminator 3 view .LVU354
 1351 05c8 C1FFFF1A 		bne	.L27		@,
 1352 05cc 61FFFFEA 		b	.L26		@
 1353              	.LVL45:
 1354              	.L25:
 204:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1355              		.loc 1 204 13 discriminator 3 view .LVU355
 1356 05d0 758A9FED 		vldr.32	s16, .L49+28	@ _354,
 1357              	@ armwave.c:229:                     hsv_temp.v = (255 / 20.0f) * v;
 229:armwave.c     ****                 } else {
 1358              		.loc 1 229 48 view .LVU356
 1359 05d4 75AA9FED 		vldr.32	s20, .L49+32	@ tmp521,
 1360 05d8 6E9ADFED 		vldr.32	s19, .L49+8	@ tmp522,
 1361 05dc 709A9FED 		vldr.32	s18, .L49+20	@ tmp523,
 1362 05e0 708ADFED 		vldr.32	s17, .L49+24	@ tmp524,
 1363 05e4 C8519FE5 		ldr	r5, .L49+36	@ ivtmp.152,
 1364              	.LBB71:
 1365              	.LBB50:
 1366              	@ armwave.c:115:     region = hsv_in->h / 43;
 115:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1367              		.loc 1 115 12 view .LVU357
 1368 05e8 D0619FE5 		ldr	r6, .L49+48	@ tmp394,
 1369              	.LBE50:
 1370              	.LBE71:
 1371              	@ armwave.c:224:             for(v = 0; v < 256; v++) {
 224:armwave.c     ****                 hsv_temp.h = v;
 1372              		.loc 1 224 19 view .LVU358
 1373 05ec 0040A0E3 		mov	r4, #0	@ v,
 1374              	.LVL46:
 1375              	.L39:
 225:armwave.c     ****                 hsv_temp.s = 255;
 1376              		.loc 1 225 17 is_stmt 1 view .LVU359
 1377              	@ armwave.c:228:                 if(v < 20) {
 228:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1378              		.loc 1 228 19 is_stmt 0 view .LVU360
 1379 05f0 130054E3 		cmp	r4, #19	@ v,
 1380 05f4 7420EFE6 		uxtb	r2, r4	@ _390, v
 1381              	.LVL47:
 226:armwave.c     ****                 
 1382              		.loc 1 226 17 is_stmt 1 view .LVU361
 228:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1383              		.loc 1 228 17 view .LVU362
 229:armwave.c     ****                 } else {
 1384              		.loc 1 229 21 view .LVU363
 234:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1385              		.loc 1 234 17 view .LVU364
 1386              	.LBB72:
 1387              	.LBI48:
 103:armwave.c     **** {
 1388              		.loc 1 103 6 view .LVU365
 1389              	.LBB51:
 105:armwave.c     **** 
 1390              		.loc 1 105 5 view .LVU366
 107:armwave.c     ****     {
 1391              		.loc 1 107 5 view .LVU367
 115:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1392              		.loc 1 115 5 view .LVU368
 1393              	.LBE51:
 1394              	.LBE72:
 1395              	@ armwave.c:229:                     hsv_temp.v = (255 / 20.0f) * v;
 229:armwave.c     ****                 } else {
 1396              		.loc 1 229 48 is_stmt 0 view .LVU369
 1397 05f8 904A07DE 		vmovle	s15, r4	@ int	@ v, v
 1398              	.LBB73:
 1399              	.LBB52:
 1400              	@ armwave.c:115:     region = hsv_in->h / 43;
 115:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1401              		.loc 1 115 12 view .LVU370
 1402 05fc 963282E0 		umull	r3, r2, r6, r2	@ tmp527, tmp393, tmp394, _390
 1403              	.LVL48:
 115:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1404              		.loc 1 115 12 view .LVU371
 1405              	.LBE52:
 1406              	.LBE73:
 1407 0600 484AB0CE 		vmovgt.f32	s8, s16	@ _354, _354
 1408              	@ armwave.c:229:                     hsv_temp.v = (255 / 20.0f) * v;
 229:armwave.c     ****                 } else {
 1409              		.loc 1 229 48 view .LVU372
 1410 0604 E77AF8DE 		vcvtle.f32.s32	s15, s15	@ tmp387, v
 1411              	.LBB74:
 1412              	.LBB53:
 1413              	@ armwave.c:116:     remainder = (hsv_in->h - (region * 43)) * 6; 
 116:armwave.c     **** 
 1414              		.loc 1 116 38 view .LVU373
 1415 0608 2A30E0E3 		mvn	r3, #42	@ tmp396,
 1416              	@ armwave.c:115:     region = hsv_in->h / 43;
 115:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1417              		.loc 1 115 12 view .LVU374
 1418 060c A221A0E1 		lsr	r2, r2, #3	@ region, tmp393,
 1419              	.LVL49:
 116:armwave.c     **** 
 1420              		.loc 1 116 5 is_stmt 1 view .LVU375
 1421              	.LBE53:
 1422              	.LBE74:
 1423 0610 FF10A0C3 		movgt	r1, #255	@ _352,
 1424              	.LBB75:
 1425              	.LBB54:
 1426              	@ armwave.c:116:     remainder = (hsv_in->h - (region * 43)) * 6; 
 116:armwave.c     **** 
 1427              		.loc 1 116 28 is_stmt 0 view .LVU376
 1428 0614 934223E0 		mla	r3, r3, r2, r4	@ tmp397, tmp396, region, v
 1429              	.LBE54:
 1430              	.LBE75:
 1431              	@ armwave.c:229:                     hsv_temp.v = (255 / 20.0f) * v;
 229:armwave.c     ****                 } else {
 1432              		.loc 1 229 48 view .LVU377
 1433 0618 8A7A67DE 		vmulle.f32	s15, s15, s20	@ tmp388, tmp387, tmp521
 1434              	.LBB76:
 1435              	.LBB55:
 1436              	@ armwave.c:116:     remainder = (hsv_in->h - (region * 43)) * 6; 
 116:armwave.c     **** 
 1437              		.loc 1 116 15 view .LVU378
 1438 061c 833083E0 		add	r3, r3, r3, lsl #1	@ tmp402, tmp397, tmp397,
 1439 0620 8330A0E1 		lsl	r3, r3, #1	@ tmp404, tmp402,
 1440 0624 7330EFE6 		uxtb	r3, r3	@ remainder, tmp404
 1441              	.LVL50:
 118:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 1442              		.loc 1 118 5 is_stmt 1 view .LVU379
 119:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1443              		.loc 1 119 5 view .LVU380
 1444              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 120:armwave.c     **** 
 1445              		.loc 1 120 48 is_stmt 0 view .LVU381
 1446 0628 FF0063E2 		rsb	r0, r3, #255	@ tmp412, remainder,
 1447              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1448              		.loc 1 119 41 view .LVU382
 1449 062c 033463E0 		rsb	r3, r3, r3, lsl #8	@ tmp408, remainder, remainder,
 1450              	.LVL51:
 119:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1451              		.loc 1 119 41 view .LVU383
 1452              	.LBE55:
 1453              	.LBE76:
 1454              	@ armwave.c:229:                     hsv_temp.v = (255 / 20.0f) * v;
 229:armwave.c     ****                 } else {
 1455              		.loc 1 229 32 view .LVU384
 1456 0630 E77AFCDE 		vcvtle.u32.f32	s15, s15	@ tmp391, tmp388
 1457              	.LBB77:
 1458              	.LBB56:
 1459              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 120:armwave.c     **** 
 1460              		.loc 1 120 41 view .LVU385
 1461 0634 000460E0 		rsb	r0, r0, r0, lsl #8	@ tmp415, tmp412, tmp412,
 1462              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1463              		.loc 1 119 54 view .LVU386
 1464 0638 4334A0E1 		asr	r3, r3, #8	@ tmp409, tmp408,
 1465              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 120:armwave.c     **** 
 1466              		.loc 1 120 62 view .LVU387
 1467 063c 4004A0E1 		asr	r0, r0, #8	@ tmp416, tmp415,
 1468              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 120:armwave.c     **** 
 1469              		.loc 1 120 27 view .LVU388
 1470 0640 FF0060E2 		rsb	r0, r0, #255	@ tmp417, tmp416,
 1471              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1472              		.loc 1 119 27 view .LVU389
 1473 0644 FF3063E2 		rsb	r3, r3, #255	@ tmp410, tmp409,
 1474              	.LBE56:
 1475              	.LBE77:
 1476              	@ armwave.c:229:                     hsv_temp.v = (255 / 20.0f) * v;
 229:armwave.c     ****                 } else {
 1477              		.loc 1 229 32 view .LVU390
 1478 0648 057ACDDD 		vstrle.32	s15, [sp, #20]	@ int	@ tmp391, %sfp
 1479 064c 1410DDD5 		ldrble	r1, [sp, #20]	@ zero_extendqisi2	@ _352, %sfp
 1480 0650 901A07DE 		vmovle	s15, r1	@ int	@ _352, _352
 1481              	.LBB78:
 1482              	.LBB57:
 1483              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 120:armwave.c     **** 
 1484              		.loc 1 120 20 view .LVU391
 1485 0654 910000E0 		mul	r0, r1, r0	@ tmp418, _352, tmp417
 1486              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1487              		.loc 1 119 20 view .LVU392
 1488 0658 910303E0 		mul	r3, r1, r3	@ tmp411, _352, tmp410
 1489 065c E74AB8DE 		vcvtle.f32.s32	s8, s15	@ _354, _352
 1490              	@ armwave.c:120:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 120:armwave.c     **** 
 1491              		.loc 1 120 70 view .LVU393
 1492 0660 4004A0E1 		asr	r0, r0, #8	@ _226, tmp418,
 1493              	@ armwave.c:119:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 119:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1494              		.loc 1 119 62 view .LVU394
 1495 0664 4334A0E1 		asr	r3, r3, #8	@ _219, tmp411,
 1496              	.LVL52:
 120:armwave.c     **** 
 1497              		.loc 1 120 5 is_stmt 1 view .LVU395
 122:armwave.c     ****     {
 1498              		.loc 1 122 5 view .LVU396
 1499 0668 040052E3 		cmp	r2, #4	@ region,
 1500 066c 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 1501 0670 970000EA 		b	.L31	@
 1502              	.L33:
 1503 0674 88060000 		.word	.L37
 1504 0678 80080000 		.word	.L36
 1505 067c 34080000 		.word	.L35
 1506 0680 E8070000 		.word	.L34
 1507 0684 3C070000 		.word	.L32
 1508              	.L37:
 1509 0688 4E6ADFED 		vldr.32	s13, .L49+56	@ tmp426,
 1510 068c 437A9FED 		vldr.32	s14, .L49+16	@ tmp424,
 1511 0690 100A06EE 		vmov	s12, r0	@ int	@ _226, _226
 1512 0694 4C7ADFED 		vldr.32	s15, .L49+60	@ tmp430,
 1513 0698 665AB0EE 		vmov.f32	s10, s13	@ tmp425, tmp426
 1514 069c 503ADFED 		vldr.32	s7, .L49+84	@ _478,
 1515 06a0 C65AF8EE 		vcvt.f32.s32	s11, s12	@ _440, _226
 1516 06a4 276A44EE 		vmla.f32	s13, s8, s15	@ tmp431, _354, tmp430
 1517 06a8 075A04EE 		vmla.f32	s10, s8, s14	@ tmp425, _354, tmp424
 1518 06ac 376A9FED 		vldr.32	s12, .L49	@ tmp420,
 1519 06b0 377ADFED 		vldr.32	s15, .L49+4	@ tmp421,
 1520 06b4 0130A0E1 		mov	r3, r1	@ _219, _352
 1521              	.LVL53:
 122:armwave.c     ****     {
 1522              		.loc 1 122 5 is_stmt 0 view .LVU397
 1523 06b8 0020A0E3 		mov	r2, #0	@ prephitmp_447,
 1524              	.LVL54:
 122:armwave.c     ****     {
 1525              		.loc 1 122 5 view .LVU398
 1526 06bc 067A44EE 		vmla.f32	s15, s8, s12	@ _434, _354, tmp420
 1527 06c0 E86A45EE 		vmls.f32	s13, s11, s17	@ _501, _440, tmp524
 1528 06c4 457AB0EE 		vmov.f32	s14, s10	@ tmp425, tmp425
 1529 06c8 A95A25EE 		vmul.f32	s10, s11, s19	@ _445, _440, tmp522
 1530 06cc C97A05EE 		vmls.f32	s14, s11, s18	@ tmp425, _440, tmp523
 1531 06d0 635AF0EE 		vmov.f32	s11, s7	@ _453, _478
 1532 06d4 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp425
 1533              	.LVL55:
 1534              	.L38:
 122:armwave.c     ****     {
 1535              		.loc 1 122 5 view .LVU399
 1536              	.LBE57:
 1537              	.LBE78:
 235:armwave.c     ****                 
 1538              		.loc 1 235 17 is_stmt 1 view .LVU400
 1539              	.LBB79:
 1540              	.LBI79:
  91:armwave.c     **** {
 1541              		.loc 1 91 6 view .LVU401
 1542              	.LBB80:
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1543              		.loc 1 93 5 view .LVU402
 1544              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1545              		.loc 1 93 46 is_stmt 0 view .LVU403
 1546 06d8 857A77EE 		vadd.f32	s15, s15, s10	@ tmp503, _434, _445
 1547              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1548              		.loc 1 94 69 view .LVU404
 1549 06dc 237A36EE 		vadd.f32	s14, s12, s7	@ tmp507, _476, _478
 1550              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1551              		.loc 1 95 16 view .LVU405
 1552 06e0 E66AFCEE 		vcvt.u32.f32	s13, s13	@ tmp510, _501
 1553              	.LBE80:
 1554              	.LBE79:
 1555              	@ armwave.c:237:                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h
 237:armwave.c     ****             }
 1556              		.loc 1 237 17 view .LVU406
 1557 06e4 0A008DE8 		stm	sp, {r1, r3}	@,,
 1558 06e8 0C208DE5 		str	r2, [sp, #12]	@ prephitmp_447,
 1559 06ec 08008DE5 		str	r0, [sp, #8]	@ _226,
 1560 06f0 0420A0E1 		mov	r2, r4	@, v
 1561 06f4 0410A0E1 		mov	r1, r4	@, v
 1562              	.LBB83:
 1563              	.LBB81:
 1564              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1565              		.loc 1 93 69 view .LVU407
 1566 06f8 A57A77EE 		vadd.f32	s15, s15, s11	@ tmp504, tmp503, _453
 1567              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1568              		.loc 1 94 16 view .LVU408
 1569 06fc C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp508, tmp507
 1570              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1571              		.loc 1 95 16 view .LVU409
 1572 0700 90CA16EE 		vmov	ip, s13	@ int	@ tmp510, tmp510
 1573              	.LBE81:
 1574              	.LBE83:
 1575              	@ armwave.c:237:                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h
 237:armwave.c     ****             }
 1576              		.loc 1 237 17 view .LVU410
 1577 0704 FF30A0E3 		mov	r3, #255	@,
 1578 0708 B4009FE5 		ldr	r0, .L49+52	@,
 1579              	@ armwave.c:224:             for(v = 0; v < 256; v++) {
 224:armwave.c     ****                 hsv_temp.h = v;
 1580              		.loc 1 224 34 view .LVU411
 1581 070c 014084E2 		add	r4, r4, #1	@ v, v,
 1582              	.LVL56:
 1583              	.LBB84:
 1584              	.LBB82:
 1585              	@ armwave.c:95:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  95:armwave.c     **** }
 1586              		.loc 1 95 16 view .LVU412
 1587 0710 02C0C5E5 		strb	ip, [r5, #2]	@ tmp510, MEM[base: _393, offset: 2B]
 1588 0714 035085E2 		add	r5, r5, #3	@ ivtmp.152, ivtmp.152,
 1589              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1590              		.loc 1 93 16 view .LVU413
 1591 0718 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp505, tmp504
 1592              	@ armwave.c:94:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1593              		.loc 1 94 16 view .LVU414
 1594 071c 10EA17EE 		vmov	lr, s14	@ int	@ tmp508, tmp508
 1595 0720 02E045E5 		strb	lr, [r5, #-2]	@ tmp508, MEM[base: _393, offset: 1B]
 1596              	@ armwave.c:93:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1597              		.loc 1 93 16 view .LVU415
 1598 0724 90CA17EE 		vmov	ip, s15	@ int	@ tmp505, tmp505
 1599 0728 03C045E5 		strb	ip, [r5, #-3]	@ tmp505, MEM[base: _393, offset: 0B]
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1600              		.loc 1 94 5 is_stmt 1 view .LVU416
  95:armwave.c     **** }
 1601              		.loc 1 95 5 view .LVU417
 1602              	.LVL57:
  95:armwave.c     **** }
 1603              		.loc 1 95 5 is_stmt 0 view .LVU418
 1604              	.LBE82:
 1605              	.LBE84:
 237:armwave.c     ****             }
 1606              		.loc 1 237 17 is_stmt 1 view .LVU419
 1607 072c FEFFFFEB 		bl	printf		@
 1608              	.LVL58:
 1609              	@ armwave.c:224:             for(v = 0; v < 256; v++) {
 224:armwave.c     ****                 hsv_temp.h = v;
 1610              		.loc 1 224 13 is_stmt 0 view .LVU420
 1611 0730 010C54E3 		cmp	r4, #256	@ v,
 1612 0734 ADFFFF1A 		bne	.L39		@,
 1613 0738 06FFFFEA 		b	.L26		@
 1614              	.LVL59:
 1615              	.L32:
 1616              	.LBB85:
 1617              	.LBB58:
 137:armwave.c     ****             break;
 1618              		.loc 1 137 13 is_stmt 1 view .LVU421
 137:armwave.c     ****             break;
 1619              		.loc 1 137 29 view .LVU422
 137:armwave.c     ****             break;
 1620              		.loc 1 137 45 view .LVU423
 138:armwave.c     ****         default:
 1621              		.loc 1 138 13 view .LVU424
 1622 073c 900A07EE 		vmov	s15, r0	@ int	@ _226, _226
 1623 0740 206A9FED 		vldr.32	s12, .L49+56	@ tmp481,
 1624 0744 207A9FED 		vldr.32	s14, .L49+60	@ tmp482,
 1625 0748 103ADFED 		vldr.32	s7, .L49	@ tmp476,
 1626 074c E75AB8EE 		vcvt.f32.s32	s10, s15	@ _423, _226
 1627 0750 466AF0EE 		vmov.f32	s13, s12	@ tmp485, tmp481
 1628 0754 0E7ADFED 		vldr.32	s15, .L49+4	@ tmp477,
 1629 0758 204ADFED 		vldr.32	s9, .L49+80	@ tmp488,
 1630 075c 0F3A9FED 		vldr.32	s6, .L49+16	@ tmp480,
 1631 0760 0D5ADFED 		vldr.32	s11, .L49+12	@ tmp478,
 1632              	@ armwave.c:136:         case 4:
 136:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1633              		.loc 1 136 9 is_stmt 0 view .LVU425
 1634 0764 0030A0E1 		mov	r3, r0	@ _219, _226
 1635              	.LVL60:
 136:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1636              		.loc 1 136 9 view .LVU426
 1637 0768 0120A0E1 		mov	r2, r1	@ prephitmp_447, _352
 1638              	.LVL61:
 136:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1639              		.loc 1 136 9 view .LVU427
 1640 076c 076A45EE 		vmla.f32	s13, s10, s14	@ tmp485, _423, tmp482
 1641 0770 237A45EE 		vmla.f32	s15, s10, s7	@ _434, _423, tmp476
 1642 0774 036A05EE 		vmla.f32	s12, s10, s6	@ _476, _423, tmp480
 1643 0778 073A64EE 		vmul.f32	s7, s8, s14	@ _478, _354, tmp482
 1644 077c 255A64EE 		vmul.f32	s11, s8, s11	@ _453, _354, tmp478
 1645 0780 175A9FED 		vldr.32	s10, .L49+84	@ _445,
 1646 0784 0000A0E3 		mov	r0, #0	@ _226,
 1647              	.LVL62:
 136:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1648              		.loc 1 136 9 view .LVU428
 1649 0788 646A44EE 		vmls.f32	s13, s8, s9	@ _501, _354, tmp488
 1650 078c D1FFFFEA 		b	.L38		@
 1651              	.L50:
 1652              		.align	2
 1653              	.L49:
 1654 0790 6F12833E 		.word	1048777327
 1655 0794 00008041 		.word	1098907648
 1656 0798 2506013F 		.word	1057031717
 1657 079c F0A7C63D 		.word	1036429296
 1658 07a0 508D17BE 		.word	-1105752752
 1659 07a4 F4FD943E 		.word	1049951732
 1660 07a8 7F6ABC3E 		.word	1052535423
 1661 07ac 00007F43 		.word	1132396544
 1662 07b0 00004C41 		.word	1095499776
 1663 07b4 00000000 		.word	g_yuv_lut
 1664 07b8 44000000 		.word	.LC2
 1665 07bc 00000000 		.word	.LC0
 1666 07c0 83BEA02F 		.word	799063683
 1667 07c4 18000000 		.word	.LC1
 1668 07c8 00000043 		.word	1124073472
 1669 07cc 9CC4E03E 		.word	1054917788
 1670 07d0 00008041 		.word	1098907648
 1671 07d4 F0A7C63D 		.word	1036429296
 1672 07d8 508D17BE 		.word	-1105752752
 1673 07dc 6F12833E 		.word	1048777327
 1674 07e0 7368913D 		.word	1032939635
 1675 07e4 00000000 		.word	0
 1676              	.LVL63:
 1677              	.L34:
 134:armwave.c     ****             break;
 1678              		.loc 1 134 13 is_stmt 1 view .LVU429
 134:armwave.c     ****             break;
 1679              		.loc 1 134 29 view .LVU430
 134:armwave.c     ****             break;
 1680              		.loc 1 134 45 view .LVU431
 135:armwave.c     ****         case 4:
 1681              		.loc 1 135 13 view .LVU432
 1682 07e8 903A07EE 		vmov	s15, r3	@ int	@ _219, _219
 1683 07ec 0B7A1FED 		vldr.32	s14, .L49+56	@ tmp467,
 1684 07f0 064A5FED 		vldr.32	s9, .L49+80	@ tmp474,
 1685 07f4 0C3A5FED 		vldr.32	s7, .L49+60	@ tmp468,
 1686 07f8 E75AB8EE 		vcvt.f32.s32	s10, s15	@ _439, _219
 1687 07fc 476AF0EE 		vmov.f32	s13, s14	@ tmp471, tmp467
 1688 0800 0D7A5FED 		vldr.32	s15, .L49+68	@ tmp464,
 1689              	@ armwave.c:133:         case 3:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1690              		.loc 1 133 9 is_stmt 0 view .LVU433
 1691 0804 0300A0E1 		mov	r0, r3	@ _226, _219
 1692              	.LVL64:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1693              		.loc 1 133 9 view .LVU434
 1694 0808 0120A0E1 		mov	r2, r1	@ prephitmp_447, _352
 1695              	.LVL65:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1696              		.loc 1 133 9 view .LVU435
 1697 080c 233A64EE 		vmul.f32	s7, s8, s7	@ _478, _354, tmp468
 1698 0810 275A64EE 		vmul.f32	s11, s8, s15	@ _453, _354, tmp464
 1699 0814 0030A0E3 		mov	r3, #0	@ _219,
 1700              	.LVL66:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1701              		.loc 1 133 9 view .LVU436
 1702 0818 686A45EE 		vmls.f32	s13, s10, s17	@ tmp471, _439, tmp524
 1703 081c 497A05EE 		vmls.f32	s14, s10, s18	@ tmp467, _439, tmp523
 1704 0820 167A5FED 		vldr.32	s15, .L49+64	@ _434,
 1705 0824 295A25EE 		vmul.f32	s10, s10, s19	@ _445, _439, tmp522
 1706 0828 646A44EE 		vmls.f32	s13, s8, s9	@ _501, _354, tmp474
 1707 082c 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp467
 1708 0830 A8FFFFEA 		b	.L38		@
 1709              	.LVL67:
 1710              	.L35:
 131:armwave.c     ****             break;
 1711              		.loc 1 131 13 is_stmt 1 view .LVU437
 131:armwave.c     ****             break;
 1712              		.loc 1 131 29 view .LVU438
 131:armwave.c     ****             break;
 1713              		.loc 1 131 53 view .LVU439
 132:armwave.c     ****         case 3:
 1714              		.loc 1 132 13 view .LVU440
 1715 0834 1D7A1FED 		vldr.32	s14, .L49+56	@ tmp455,
 1716 0838 900A07EE 		vmov	s15, r0	@ int	@ _226, _226
 1717 083c 193A1FED 		vldr.32	s6, .L49+80	@ tmp462,
 1718 0840 1F3A5FED 		vldr.32	s7, .L49+60	@ tmp456,
 1719 0844 476AF0EE 		vmov.f32	s13, s14	@ tmp459, tmp455
 1720 0848 E74AF8EE 		vcvt.f32.s32	s9, s15	@ _450, _226
 1721 084c 497A04EE 		vmls.f32	s14, s8, s18	@ tmp455, _354, tmp523
 1722 0850 217A5FED 		vldr.32	s15, .L49+68	@ tmp452,
 1723 0854 686A44EE 		vmls.f32	s13, s8, s17	@ tmp459, _354, tmp524
 1724              	@ armwave.c:130:         case 2:
 130:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1725              		.loc 1 130 9 is_stmt 0 view .LVU441
 1726 0858 0020A0E1 		mov	r2, r0	@ prephitmp_447, _226
 1727              	.LVL68:
 130:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1728              		.loc 1 130 9 view .LVU442
 1729 085c 295A24EE 		vmul.f32	s10, s8, s19	@ _445, _354, tmp522
 1730 0860 0100A0E1 		mov	r0, r1	@ _226, _352
 1731              	.LVL69:
 130:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1732              		.loc 1 130 9 view .LVU443
 1733 0864 0030A0E3 		mov	r3, #0	@ _219,
 1734              	.LVL70:
 130:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1735              		.loc 1 130 9 view .LVU444
 1736 0868 A75A64EE 		vmul.f32	s11, s9, s15	@ _453, _450, tmp452
 1737 086c 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp455
 1738 0870 A33A64EE 		vmul.f32	s7, s9, s7	@ _478, _450, tmp456
 1739 0874 C36A44EE 		vmls.f32	s13, s9, s6	@ _501, _450, tmp462
 1740 0878 2C7A5FED 		vldr.32	s15, .L49+64	@ _434,
 1741 087c 95FFFFEA 		b	.L38		@
 1742              	.LVL71:
 1743              	.L36:
 128:armwave.c     ****             break;
 1744              		.loc 1 128 13 is_stmt 1 view .LVU445
 128:armwave.c     ****             break;
 1745              		.loc 1 128 29 view .LVU446
 128:armwave.c     ****             break;
 1746              		.loc 1 128 53 view .LVU447
 129:armwave.c     ****         case 2:
 1747              		.loc 1 129 13 view .LVU448
 1748 0880 903A05EE 		vmov	s11, r3	@ int	@ _219, _219
 1749 0884 316A5FED 		vldr.32	s13, .L49+56	@ tmp442,
 1750 0888 2E7A1FED 		vldr.32	s14, .L49+72	@ tmp440,
 1751 088c 324A5FED 		vldr.32	s9, .L49+60	@ tmp446,
 1752 0890 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _424, _219
 1753 0894 663AB0EE 		vmov.f32	s6, s13	@ tmp441, tmp442
 1754 0898 316A1FED 		vldr.32	s12, .L49+76	@ tmp436,
 1755 089c 357A5FED 		vldr.32	s15, .L49+64	@ tmp437,
 1756              	@ armwave.c:127:         case 1:
 127:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1757              		.loc 1 127 9 is_stmt 0 view .LVU449
 1758 08a0 313A5FED 		vldr.32	s7, .L49+84	@ _478,
 1759 08a4 295A24EE 		vmul.f32	s10, s8, s19	@ _445, _354, tmp522
 1760 08a8 0100A0E1 		mov	r0, r1	@ _226, _352
 1761              	.LVL72:
 127:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1762              		.loc 1 127 9 view .LVU450
 1763 08ac 0020A0E3 		mov	r2, #0	@ prephitmp_447,
 1764              	.LVL73:
 127:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1765              		.loc 1 127 9 view .LVU451
 1766 08b0 873A05EE 		vmla.f32	s6, s11, s14	@ tmp441, _424, tmp440
 1767 08b4 A46A45EE 		vmla.f32	s13, s11, s9	@ tmp447, _424, tmp446
 1768 08b8 867A45EE 		vmla.f32	s15, s11, s12	@ _434, _424, tmp436
 1769 08bc 635AF0EE 		vmov.f32	s11, s7	@ _453, _478
 1770 08c0 437AB0EE 		vmov.f32	s14, s6	@ tmp441, tmp441
 1771 08c4 686A44EE 		vmls.f32	s13, s8, s17	@ _501, _354, tmp524
 1772 08c8 497A04EE 		vmls.f32	s14, s8, s18	@ tmp441, _354, tmp523
 1773 08cc 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp441
 1774 08d0 80FFFFEA 		b	.L38		@
 1775              	.LVL74:
 1776              	.L31:
 140:armwave.c     ****             break;
 1777              		.loc 1 140 13 is_stmt 1 view .LVU452
 140:armwave.c     ****             break;
 1778              		.loc 1 140 37 view .LVU453
 140:armwave.c     ****             break;
 1779              		.loc 1 140 53 view .LVU454
 141:armwave.c     ****     }
 1780              		.loc 1 141 13 view .LVU455
 1781 08d4 903A07EE 		vmov	s15, r3	@ int	@ _219, _219
 1782 08d8 466A1FED 		vldr.32	s12, .L49+56	@ tmp495,
 1783 08dc 463A5FED 		vldr.32	s7, .L49+60	@ tmp496,
 1784 08e0 467A1FED 		vldr.32	s14, .L49+64	@ tmp491,
 1785 08e4 E74AF8EE 		vcvt.f32.s32	s9, s15	@ _448, _219
 1786 08e8 466AF0EE 		vmov.f32	s13, s12	@ tmp499, tmp495
 1787 08ec 487A5FED 		vldr.32	s15, .L49+68	@ tmp492,
 1788 08f0 462A5FED 		vldr.32	s5, .L49+80	@ tmp502,
 1789 08f4 492A1FED 		vldr.32	s4, .L49+72	@ tmp494,
 1790 08f8 236A44EE 		vmla.f32	s13, s8, s7	@ tmp499, _354, tmp496
 1791 08fc 4A3A1FED 		vldr.32	s6, .L49+76	@ tmp490,
 1792              	@ armwave.c:139:         default:
 139:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1793              		.loc 1 139 9 is_stmt 0 view .LVU456
 1794 0900 0320A0E1 		mov	r2, r3	@ prephitmp_447, _219
 1795              	.LVL75:
 139:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1796              		.loc 1 139 9 view .LVU457
 1797 0904 A75A64EE 		vmul.f32	s11, s9, s15	@ _453, _448, tmp492
 1798 0908 477AF0EE 		vmov.f32	s15, s14	@ tmp491, tmp491
 1799 090c 4C5A1FED 		vldr.32	s10, .L49+84	@ _445,
 1800 0910 A33A64EE 		vmul.f32	s7, s9, s7	@ _478, _448, tmp496
 1801 0914 026A04EE 		vmla.f32	s12, s8, s4	@ _476, _354, tmp494
 1802 0918 E26A44EE 		vmls.f32	s13, s9, s5	@ _501, _448, tmp502
 1803 091c 037A44EE 		vmla.f32	s15, s8, s6	@ tmp491, _354, tmp490
 1804 0920 0000A0E3 		mov	r0, #0	@ _226,
 1805              	.LVL76:
 139:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1806              		.loc 1 139 9 view .LVU458
 1807 0924 0130A0E1 		mov	r3, r1	@ _219, _352
 1808              	.LVL77:
 139:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1809              		.loc 1 139 9 view .LVU459
 1810 0928 6AFFFFEA 		b	.L38		@
 1811              	.LBE58:
 1812              	.LBE85:
 1813              		.cfi_endproc
 1814              	.LFE62:
 1816              		.align	2
 1817              		.global	armwave_init
 1818              		.syntax unified
 1819              		.arm
 1820              		.fpu vfp
 1822              	armwave_init:
 1823              	.LFB63:
 246:armwave.c     **** 
 247:armwave.c     **** /*
 248:armwave.c     ****  * Initialise things.  STUB, mostly.
 249:armwave.c     ****  */
 250:armwave.c     **** void armwave_init()
 251:armwave.c     **** {
 1824              		.loc 1 251 1 is_stmt 1 view -0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 252:armwave.c     ****     g_armwave_state.flags = 0;
 1828              		.loc 1 252 5 view .LVU461
 1829              	@ armwave.c:252:     g_armwave_state.flags = 0;
 1830              		.loc 1 252 27 is_stmt 0 view .LVU462
 1831 092c 20309FE5 		ldr	r3, .L53	@ tmp110,
 1832              	@ armwave.c:251: {
 251:armwave.c     ****     g_armwave_state.flags = 0;
 1833              		.loc 1 251 1 view .LVU463
 1834 0930 10402DE9 		push	{r4, lr}	@
 1835              		.cfi_def_cfa_offset 8
 1836              		.cfi_offset 4, -8
 1837              		.cfi_offset 14, -4
 1838              	@ armwave.c:252:     g_armwave_state.flags = 0;
 1839              		.loc 1 252 27 view .LVU464
 1840 0934 0020A0E3 		mov	r2, #0	@ tmp111,
 1841              	@ armwave.c:254:     printf("armwave version: %s\n", ARMWAVE_VER);
 253:armwave.c     **** 
 254:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1842              		.loc 1 254 5 view .LVU465
 1843 0938 18109FE5 		ldr	r1, .L53+4	@,
 1844 093c 18009FE5 		ldr	r0, .L53+8	@,
 1845              	@ armwave.c:252:     g_armwave_state.flags = 0;
 252:armwave.c     **** 
 1846              		.loc 1 252 27 view .LVU466
 1847 0940 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1848              		.loc 1 254 5 is_stmt 1 view .LVU467
 1849 0944 FEFFFFEB 		bl	printf		@
 1850              	.LVL78:
 255:armwave.c     ****     
 256:armwave.c     **** #ifndef NO_PYTHON
 257:armwave.c     ****     printf("built without Python linkings\n");
 1851              		.loc 1 257 5 view .LVU468
 1852 0948 10009FE5 		ldr	r0, .L53+12	@,
 1853              	@ armwave.c:259: }
 258:armwave.c     **** #endif
 259:armwave.c     **** }
 1854              		.loc 1 259 1 is_stmt 0 view .LVU469
 1855 094c 1040BDE8 		pop	{r4, lr}	@
 1856              		.cfi_restore 14
 1857              		.cfi_restore 4
 1858              		.cfi_def_cfa_offset 0
 1859              	@ armwave.c:257:     printf("built without Python linkings\n");
 257:armwave.c     **** #endif
 1860              		.loc 1 257 5 view .LVU470
 1861 0950 FEFFFFEA 		b	puts		@
 1862              	.LVL79:
 1863              	.L54:
 1864              		.align	2
 1865              	.L53:
 1866 0954 00000000 		.word	g_armwave_state
 1867 0958 5C000000 		.word	.LC3
 1868 095c 64000000 		.word	.LC4
 1869 0960 7C000000 		.word	.LC5
 1870              		.cfi_endproc
 1871              	.LFE63:
 1873              		.align	2
 1874              		.global	render_nonaa_to_buffer_1ch_slice
 1875              		.syntax unified
 1876              		.arm
 1877              		.fpu vfp
 1879              	render_nonaa_to_buffer_1ch_slice:
 1880              	.LVL80:
 1881              	.LFB64:
 260:armwave.c     **** 
 261:armwave.c     **** /*
 262:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
 263:armwave.c     ****  * pre-computed.
 264:armwave.c     ****  *
 265:armwave.c     ****  * @param    slice_y        Slice to render at
 266:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
 267:armwave.c     ****  *                          accounting for cache behaviour, etc.)
 268:armwave.c     ****  */
 269:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 270:armwave.c     **** {
 1882              		.loc 1 270 1 is_stmt 1 view -0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 8
 1885              		@ frame_needed = 0, uses_anonymous_args = 0
 271:armwave.c     ****     int yy, ys, yi, w, scale_value;
 1886              		.loc 1 271 5 view .LVU472
 272:armwave.c     ****     uint32_t value, word;
 1887              		.loc 1 272 5 view .LVU473
 273:armwave.c     ****     uint8_t *wave_base;
 1888              		.loc 1 273 5 view .LVU474
 274:armwave.c     ****     bufftyp_t *write_buffer_base;
 1889              		.loc 1 274 5 view .LVU475
 275:armwave.c     ****     bufftyp_t *write_buffer;
 1890              		.loc 1 275 5 view .LVU476
 276:armwave.c     **** 
 277:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 278:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 1891              		.loc 1 278 5 view .LVU477
 1892              	@ armwave.c:278:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 1893              		.loc 1 278 40 is_stmt 0 view .LVU478
 1894 0964 04319FE5 		ldr	r3, .L65	@ tmp187,
 1895              	@ armwave.c:270: {
 270:armwave.c     ****     int yy, ys, yi, w, scale_value;
 1896              		.loc 1 270 1 view .LVU479
 1897 0968 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1898              		.cfi_def_cfa_offset 36
 1899              		.cfi_offset 4, -36
 1900              		.cfi_offset 5, -32
 1901              		.cfi_offset 6, -28
 1902              		.cfi_offset 7, -24
 1903              		.cfi_offset 8, -20
 1904              		.cfi_offset 9, -16
 1905              		.cfi_offset 10, -12
 1906              		.cfi_offset 11, -8
 1907              		.cfi_offset 14, -4
 1908 096c 0CD04DE2 		sub	sp, sp, #12	@,,
 1909              		.cfi_def_cfa_offset 48
 1910              	@ armwave.c:278:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 1911              		.loc 1 278 82 view .LVU480
 1912 0970 246093E5 		ldr	r6, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 1913              	@ armwave.c:286:     for(w = 0; w < g_armwave_state.waves; w++) {
 279:armwave.c     **** 
 280:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
 281:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 282:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
 283:armwave.c     ****         g_armwave_state.bitdepth_height);
 284:armwave.c     **** 
 285:armwave.c     ****     // roll through each waveform
 286:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 1914              		.loc 1 286 35 view .LVU481
 1915 0974 38B093E5 		ldr	fp, [r3, #56]	@ _134, g_armwave_state.waves
 1916              	@ armwave.c:278:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 278:armwave.c     **** 
 1917              		.loc 1 278 40 view .LVU482
 1918 0978 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 1919              	@ armwave.c:286:     for(w = 0; w < g_armwave_state.waves; w++) {
 1920              		.loc 1 286 5 view .LVU483
 1921 097c 00005BE3 		cmp	fp, #0	@ _134,
 1922              	@ armwave.c:278:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 278:armwave.c     **** 
 1923              		.loc 1 278 65 view .LVU484
 1924 0980 900605E0 		mul	r5, r0, r6	@ tmp189, slice_y, _2
 1925              	.LVL81:
 1926              		.loc 1 286 5 is_stmt 1 view .LVU485
 1927              		.loc 1 286 5 is_stmt 0 view .LVU486
 1928 0984 370000DA 		ble	.L55		@,
 1929              	@ armwave.c:287:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 287:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1930              		.loc 1 287 36 view .LVU487
 1931 0988 149093E5 		ldr	r9, [r3, #20]	@ _5, g_armwave_state.wave_buffer
 1932              	@ armwave.c:287:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1933              		.loc 1 287 81 view .LVU488
 1934 098c 343093E5 		ldr	r3, [r3, #52]	@ _6, g_armwave_state.wave_stride
 1935 0990 000051E3 		cmp	r1, #0	@ height,
 1936 0994 04308DE5 		str	r3, [sp, #4]	@ _6, %sfp
 1937 0998 3200000A 		beq	.L55		@,
 1938 099c 2558A0E1 		lsr	r5, r5, #16	@ _4, tmp189,
 1939              	.LVL82:
 1940              		.loc 1 287 81 view .LVU489
 1941 09a0 009089E0 		add	r9, r9, r0	@ ivtmp.168, _5, slice_y
 1942              	@ armwave.c:286:     for(w = 0; w < g_armwave_state.waves; w++) {
 286:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1943              		.loc 1 286 11 view .LVU490
 1944 09a4 00A0A0E3 		mov	r10, #0	@ w,
 1945              	.LVL83:
 1946              	.L58:
 1947              		.loc 1 287 9 is_stmt 1 view .LVU491
 288:armwave.c     **** 
 289:armwave.c     ****         // roll through y and render the slice into the out buffer
 290:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 291:armwave.c     ****         for(yy = 0, yi = 0; yy < height; yy += 4) {
 1948              		.loc 1 291 9 view .LVU492
 1949              		.loc 1 291 9 is_stmt 0 view .LVU493
 1950 09a8 044049E2 		sub	r4, r9, #4	@ ivtmp.158, ivtmp.168,
 1951              	@ armwave.c:286:     for(w = 0; w < g_armwave_state.waves; w++) {
 286:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1952              		.loc 1 286 11 view .LVU494
 1953 09ac 0030A0E3 		mov	r3, #0	@ ivtmp.161,
 1954              	.LVL84:
 1955              	.L57:
 292:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1956              		.loc 1 292 13 is_stmt 1 view .LVU495
 1957              	@ armwave.c:292:             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1958              		.loc 1 292 18 is_stmt 0 view .LVU496
 1959 09b0 042094E5 		ldr	r2, [r4, #4]	@ word, MEM[base: _266, offset: 0B]
 1960              	.LVL85:
 293:armwave.c     ****             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likely next intent
 1961              		.loc 1 293 13 is_stmt 1 view .LVU497
 1962              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 294:armwave.c     ****             
 295:armwave.c     ****             for(ys = 0; ys < 4; ys++, yi++) {
 296:armwave.c     ****                 scale_value = word & 0xff;
 297:armwave.c     ****                 
 298:armwave.c     **** #if USE_ALU_XCOORD == 1
 299:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
 300:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 301:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 302:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 303:armwave.c     ****                 write_buffer = write_buffer_base + \
 304:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 305:armwave.c     **** #else
 306:armwave.c     ****                 write_buffer = write_buffer_base + \
 307:armwave.c     ****                     (g_armwave_state.xcoord_to_xpixel[yi] * 256 * sizeof(bufftyp_t));
 308:armwave.c     **** #endif
 309:armwave.c     **** 
 310:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1963              		.loc 1 310 47 is_stmt 0 view .LVU498
 1964 09b4 230885E0 		add	r0, r5, r3, lsr #16	@ tmp195, _4, ivtmp.161,
 1965              	@ armwave.c:304:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 304:armwave.c     **** #else
 1966              		.loc 1 304 34 view .LVU499
 1967 09b8 033086E0 		add	r3, r6, r3	@ _77, _2, ivtmp.161
 1968              	@ armwave.c:296:                 scale_value = word & 0xff;
 296:armwave.c     ****                 
 1969              		.loc 1 296 29 view .LVU500
 1970 09bc 7270EFE6 		uxtb	r7, r2	@ scale_value, word
 1971              	@ armwave.c:311:                 word >>= 8;
 311:armwave.c     ****                 word >>= 8;
 1972              		.loc 1 311 22 view .LVU501
 1973 09c0 22C4A0E1 		lsr	ip, r2, #8	@ word, word,
 1974              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 1975              		.loc 1 310 47 view .LVU502
 1976 09c4 8770A0E1 		lsl	r7, r7, #1	@ tmp198, scale_value,
 1977 09c8 007587E0 		add	r7, r7, r0, lsl #10	@ tmp199, tmp198, tmp195,
 1978              	@ armwave.c:296:                 scale_value = word & 0xff;
 296:armwave.c     ****                 
 1979              		.loc 1 296 29 view .LVU503
 1980 09cc 7CC0EFE6 		uxtb	ip, ip	@ scale_value, word
 1981              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 1982              		.loc 1 310 47 view .LVU504
 1983 09d0 230885E0 		add	r0, r5, r3, lsr #16	@ tmp204, _4, _77,
 1984 09d4 B7809EE1 		ldrh	r8, [lr, r7]	@ *_62, *_62
 1985 09d8 8CC0A0E1 		lsl	ip, ip, #1	@ tmp208, scale_value,
 1986 09dc 00C58CE0 		add	ip, ip, r0, lsl #10	@ tmp209, tmp208, tmp204,
 1987              	@ armwave.c:311:                 word >>= 8;
 1988              		.loc 1 311 22 view .LVU505
 1989 09e0 2208A0E1 		lsr	r0, r2, #16	@ word, word,
 1990              	@ armwave.c:304:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 304:armwave.c     **** #else
 1991              		.loc 1 304 34 view .LVU506
 1992 09e4 033086E0 		add	r3, r6, r3	@ _99, _2, _77
 1993              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 1994              		.loc 1 310 47 view .LVU507
 1995 09e8 018088E2 		add	r8, r8, #1	@ tmp202, *_62,
 1996              	@ armwave.c:296:                 scale_value = word & 0xff;
 296:armwave.c     ****                 
 1997              		.loc 1 296 29 view .LVU508
 1998 09ec 7000EFE6 		uxtb	r0, r0	@ scale_value, word
 1999              	@ armwave.c:293:             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likel
 293:armwave.c     ****             
 2000              		.loc 1 293 13 view .LVU509
 2001 09f0 44F0D4F5 		pld	[r4, #68]		@
 295:armwave.c     ****                 scale_value = word & 0xff;
 2002              		.loc 1 295 13 is_stmt 1 view .LVU510
 2003              	.LVL86:
 296:armwave.c     ****                 
 2004              		.loc 1 296 17 view .LVU511
 303:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2005              		.loc 1 303 17 view .LVU512
 310:armwave.c     ****                 word >>= 8;
 2006              		.loc 1 310 17 view .LVU513
 2007              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 2008              		.loc 1 310 47 is_stmt 0 view .LVU514
 2009 09f4 B7808EE1 		strh	r8, [lr, r7]	@ movhi	@ tmp202, *_62
 2010              		.loc 1 311 17 is_stmt 1 view .LVU515
 2011              	.LVL87:
 296:armwave.c     ****                 
 2012              		.loc 1 296 17 view .LVU516
 303:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2013              		.loc 1 303 17 view .LVU517
 310:armwave.c     ****                 word >>= 8;
 2014              		.loc 1 310 17 view .LVU518
 2015              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 2016              		.loc 1 310 47 is_stmt 0 view .LVU519
 2017 09f8 238885E0 		add	r8, r5, r3, lsr #16	@ tmp214, _4, _99,
 2018 09fc BC709EE1 		ldrh	r7, [lr, ip]	@ *_84, *_84
 2019 0a00 8000A0E1 		lsl	r0, r0, #1	@ tmp218, scale_value,
 2020 0a04 080580E0 		add	r0, r0, r8, lsl #10	@ tmp219, tmp218, tmp214,
 2021              	@ armwave.c:304:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 304:armwave.c     **** #else
 2022              		.loc 1 304 34 view .LVU520
 2023 0a08 033086E0 		add	r3, r6, r3	@ _121, _2, _99
 2024              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 2025              		.loc 1 310 47 view .LVU521
 2026 0a0c 017087E2 		add	r7, r7, #1	@ tmp212, *_84,
 2027              	@ armwave.c:311:                 word >>= 8;
 2028              		.loc 1 311 22 view .LVU522
 2029 0a10 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 2030              	.LVL88:
 2031              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 2032              		.loc 1 310 47 view .LVU523
 2033 0a14 BC708EE1 		strh	r7, [lr, ip]	@ movhi	@ tmp212, *_84
 2034              		.loc 1 311 17 is_stmt 1 view .LVU524
 2035              	.LVL89:
 296:armwave.c     ****                 
 2036              		.loc 1 296 17 view .LVU525
 303:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2037              		.loc 1 303 17 view .LVU526
 310:armwave.c     ****                 word >>= 8;
 2038              		.loc 1 310 17 view .LVU527
 2039              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 2040              		.loc 1 310 47 is_stmt 0 view .LVU528
 2041 0a18 237885E0 		add	r7, r5, r3, lsr #16	@ tmp224, _4, _121,
 2042 0a1c B0C09EE1 		ldrh	ip, [lr, r0]	@ *_106, *_106
 2043 0a20 8220A0E1 		lsl	r2, r2, #1	@ tmp227, word,
 2044 0a24 072582E0 		add	r2, r2, r7, lsl #10	@ tmp228, tmp227, tmp224,
 2045 0a28 01C08CE2 		add	ip, ip, #1	@ tmp222, *_106,
 2046 0a2c B0C08EE1 		strh	ip, [lr, r0]	@ movhi	@ tmp222, *_106
 2047              		.loc 1 311 17 is_stmt 1 view .LVU529
 2048              	.LVL90:
 296:armwave.c     ****                 
 2049              		.loc 1 296 17 view .LVU530
 303:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2050              		.loc 1 303 17 view .LVU531
 310:armwave.c     ****                 word >>= 8;
 2051              		.loc 1 310 17 view .LVU532
 2052              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 2053              		.loc 1 310 47 is_stmt 0 view .LVU533
 2054 0a30 B2009EE1 		ldrh	r0, [lr, r2]	@ *_128, *_128
 2055 0a34 08C084E2 		add	ip, r4, #8	@ tmp232, ivtmp.158,
 2056 0a38 09C04CE0 		sub	ip, ip, r9	@ _259, tmp232, ivtmp.168
 2057 0a3c 010080E2 		add	r0, r0, #1	@ tmp231, *_128,
 2058              	@ armwave.c:291:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 291:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2059              		.loc 1 291 9 view .LVU534
 2060 0a40 0C0051E1 		cmp	r1, ip	@ height, _259
 2061 0a44 033086E0 		add	r3, r6, r3	@ ivtmp.161, _2, _121
 2062              	.LVL91:
 2063              	@ armwave.c:310:                 *(write_buffer + scale_value) += 1;
 310:armwave.c     ****                 word >>= 8;
 2064              		.loc 1 310 47 view .LVU535
 2065 0a48 B2008EE1 		strh	r0, [lr, r2]	@ movhi	@ tmp231, *_128
 2066              		.loc 1 311 17 is_stmt 1 view .LVU536
 2067              	.LVL92:
 2068              		.loc 1 311 17 is_stmt 0 view .LVU537
 2069 0a4c 044084E2 		add	r4, r4, #4	@ ivtmp.158, ivtmp.158,
 2070              	.LVL93:
 2071              	@ armwave.c:291:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 291:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2072              		.loc 1 291 9 view .LVU538
 2073 0a50 D6FFFF8A 		bhi	.L57		@,
 2074              	@ armwave.c:286:     for(w = 0; w < g_armwave_state.waves; w++) {
 286:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2075              		.loc 1 286 44 view .LVU539
 2076 0a54 01A08AE2 		add	r10, r10, #1	@ w, w,
 2077              	.LVL94:
 286:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2078              		.loc 1 286 44 view .LVU540
 2079 0a58 04309DE5 		ldr	r3, [sp, #4]	@ _6, %sfp
 2080              	@ armwave.c:286:     for(w = 0; w < g_armwave_state.waves; w++) {
 286:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2081              		.loc 1 286 5 view .LVU541
 2082 0a5c 0B005AE1 		cmp	r10, fp	@ w, _134
 2083 0a60 039089E0 		add	r9, r9, r3	@ ivtmp.168, ivtmp.168, _6
 2084              	.LVL95:
 286:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2085              		.loc 1 286 5 view .LVU542
 2086 0a64 CFFFFF1A 		bne	.L58		@,
 2087              	.LVL96:
 2088              	.L55:
 2089              	@ armwave.c:317: }
 312:armwave.c     ****             }
 313:armwave.c     ****         }
 314:armwave.c     ****     }
 315:armwave.c     **** 
 316:armwave.c     ****     //printf("wb_end=%d\n", write_buffer - write_buffer_base);
 317:armwave.c     **** }
 2090              		.loc 1 317 1 view .LVU543
 2091 0a68 0CD08DE2 		add	sp, sp, #12	@,,
 2092              		.cfi_def_cfa_offset 36
 2093              		@ sp needed	@
 2094 0a6c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2095              	.LVL97:
 2096              	.L66:
 2097              		.loc 1 317 1 view .LVU544
 2098              		.align	2
 2099              	.L65:
 2100 0a70 00000000 		.word	g_armwave_state
 2101              		.cfi_endproc
 2102              	.LFE64:
 2104              		.align	2
 2105              		.global	fill_xvimage_scaled
 2106              		.syntax unified
 2107              		.arm
 2108              		.fpu vfp
 2110              	fill_xvimage_scaled:
 2111              	.LVL98:
 2112              	.LFB65:
 318:armwave.c     **** 
 319:armwave.c     **** /*
 320:armwave.c     ****  * Render buffer to an XvImage canvas.
 321:armwave.c     ****  */
 322:armwave.c     **** void fill_xvimage_scaled(XvImage *img)
 323:armwave.c     **** {
 2113              		.loc 1 323 1 is_stmt 1 view -0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 8
 2116              		@ frame_needed = 0, uses_anonymous_args = 0
 324:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2117              		.loc 1 324 5 view .LVU546
 325:armwave.c     ****     // uint32_t ysub;
 326:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 2118              		.loc 1 326 5 view .LVU547
 327:armwave.c     ****     uint8_t r, g, b;
 2119              		.loc 1 327 5 view .LVU548
 328:armwave.c     ****     int value; 
 2120              		.loc 1 328 5 view .LVU549
 329:armwave.c     ****     // uint8_t row;
 330:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2121              		.loc 1 330 5 view .LVU550
 2122              	@ armwave.c:323: {
 323:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2123              		.loc 1 323 1 is_stmt 0 view .LVU551
 2124 0a74 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2125              		.cfi_def_cfa_offset 36
 2126              		.cfi_offset 4, -36
 2127              		.cfi_offset 5, -32
 2128              		.cfi_offset 6, -28
 2129              		.cfi_offset 7, -24
 2130              		.cfi_offset 8, -20
 2131              		.cfi_offset 9, -16
 2132              		.cfi_offset 10, -12
 2133              		.cfi_offset 11, -8
 2134              		.cfi_offset 14, -4
 2135 0a78 0040A0E1 		mov	r4, r0	@ img, img
 2136              	.LBB92:
 2137              	.LBB93:
 2138              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 183:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2139              		.loc 1 183 36 view .LVU552
 2140 0a7c 180090E5 		ldr	r0, [r0, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2141              	.LVL99:
 183:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2142              		.loc 1 183 36 view .LVU553
 2143              	.LBE93:
 2144              	.LBE92:
 2145              	@ armwave.c:330:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2146              		.loc 1 330 15 view .LVU554
 2147 0a80 10329FE5 		ldr	r3, .L83	@ tmp228,
 2148              	.LBB99:
 2149              	.LBB94:
 2150              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 183:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2151              		.loc 1 183 22 view .LVU555
 2152 0a84 1CE094E5 		ldr	lr, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2153 0a88 000090E5 		ldr	r0, [r0]	@ *_68, *_68
 2154              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 183:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2155              		.loc 1 183 59 view .LVU556
 2156 0a8c 081094E5 		ldr	r1, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2157 0a90 042094E5 		ldr	r2, [r4, #4]	@ img_23(D)->width, img_23(D)->width
 2158              	.LBE94:
 2159              	.LBE99:
 2160              	@ armwave.c:336:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 331:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 332:armwave.c     ****     uint32_t offset;
 333:armwave.c     **** 
 334:armwave.c     ****     //printf("output buffer: 0x%08x\n", out_buffer);
 335:armwave.c     **** 
 336:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2161              		.loc 1 336 10 view .LVU557
 2162 0a94 70C093E5 		ldr	ip, [r3, #112]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2163              	.LBB100:
 2164              	.LBB95:
 2165              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 183:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2166              		.loc 1 183 5 view .LVU558
 2167 0a98 00008EE0 		add	r0, lr, r0	@, img_23(D)->data, *_68
 2168              	.LBE95:
 2169              	.LBE100:
 2170              	@ armwave.c:336:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2171              		.loc 1 336 10 view .LVU559
 2172 0a9c 40E093E5 		ldr	lr, [r3, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2173              	@ armwave.c:323: {
 323:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2174              		.loc 1 323 1 view .LVU560
 2175 0aa0 0CD04DE2 		sub	sp, sp, #12	@,,
 2176              		.cfi_def_cfa_offset 48
 2177              	.LBB101:
 2178              	.LBB96:
 2179              	@ armwave.c:183:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 183:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2180              		.loc 1 183 5 view .LVU561
 2181 0aa4 910202E0 		mul	r2, r1, r2	@, img_23(D)->height, img_23(D)->width
 2182 0aa8 1010A0E3 		mov	r1, #16	@,
 2183              	.LBE96:
 2184              	.LBE101:
 2185              	@ armwave.c:336:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2186              		.loc 1 336 10 view .LVU562
 2187 0aac 9E0C07E0 		mul	r7, lr, ip	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2188              	@ armwave.c:330:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 330:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 2189              		.loc 1 330 15 view .LVU563
 2190 0ab0 049093E5 		ldr	r9, [r3, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2191              	.LVL100:
 332:armwave.c     **** 
 2192              		.loc 1 332 5 is_stmt 1 view .LVU564
 2193              		.loc 1 336 5 view .LVU565
 337:armwave.c     ****     
 338:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 339:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 340:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 341:armwave.c     **** 
 342:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 343:armwave.c     ****     //memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 344:armwave.c     ****     fill_rgb_xvimage(img, &g_fill_black);
 2194              		.loc 1 344 5 view .LVU566
 2195              	.LBB102:
 2196              	.LBI92:
 176:armwave.c     **** {
 2197              		.loc 1 176 6 view .LVU567
 2198              	.LBB97:
 178:armwave.c     ****     
 2199              		.loc 1 178 5 view .LVU568
 181:armwave.c     ****     
 2200              		.loc 1 181 5 view .LVU569
 181:armwave.c     ****     
 2201              		.loc 1 181 5 is_stmt 0 view .LVU570
 2202              	.LBE97:
 2203              	.LBE102:
  93:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 2204              		.loc 1 93 5 is_stmt 1 view .LVU571
  94:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 2205              		.loc 1 94 5 view .LVU572
  95:armwave.c     **** }
 2206              		.loc 1 95 5 view .LVU573
 2207              	.LBB103:
 2208              	.LBB98:
 183:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2209              		.loc 1 183 5 view .LVU574
 2210 0ab4 FEFFFFEB 		bl	memset		@
 2211              	.LVL101:
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2212              		.loc 1 184 5 view .LVU575
 2213              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2214              		.loc 1 184 61 is_stmt 0 view .LVU576
 2215 0ab8 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2216              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2217              		.loc 1 184 65 view .LVU577
 2218 0abc 082094E5 		ldr	r2, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2219              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2220              		.loc 1 184 36 view .LVU578
 2221 0ac0 183094E5 		ldr	r3, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2222              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2223              		.loc 1 184 65 view .LVU579
 2224 0ac4 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_85 + 4B], MEM[(int *)_85 + 4B]
 2225              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2226              		.loc 1 184 22 view .LVU580
 2227 0ac8 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2228 0acc 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_79 + 4B], MEM[(int *)_79 + 4B]
 2229              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2230              		.loc 1 184 65 view .LVU581
 2231 0ad0 920102E0 		mul	r2, r2, r1	@ tmp262, img_23(D)->height, MEM[(int *)_85 + 4B]
 2232              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2233              		.loc 1 184 5 view .LVU582
 2234 0ad4 030080E0 		add	r0, r0, r3	@, img_23(D)->data, MEM[(int *)_79 + 4B]
 2235 0ad8 8010A0E3 		mov	r1, #128	@,
 2236              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2237              		.loc 1 184 80 view .LVU583
 2238 0adc A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp267, tmp262, tmp262,
 2239              	@ armwave.c:184:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 184:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2240              		.loc 1 184 5 view .LVU584
 2241 0ae0 C220A0E1 		asr	r2, r2, #1	@, tmp267,
 2242 0ae4 FEFFFFEB 		bl	memset		@
 2243              	.LVL102:
 185:armwave.c     **** }
 2244              		.loc 1 185 5 is_stmt 1 view .LVU585
 2245              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2246              		.loc 1 185 61 is_stmt 0 view .LVU586
 2247 0ae8 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2248              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2249              		.loc 1 185 65 view .LVU587
 2250 0aec 082094E5 		ldr	r2, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2251              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2252              		.loc 1 185 36 view .LVU588
 2253 0af0 183094E5 		ldr	r3, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2254              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2255              		.loc 1 185 65 view .LVU589
 2256 0af4 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_98 + 8B], MEM[(int *)_98 + 8B]
 2257              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2258              		.loc 1 185 22 view .LVU590
 2259 0af8 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2260 0afc 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_92 + 8B], MEM[(int *)_92 + 8B]
 2261              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2262              		.loc 1 185 65 view .LVU591
 2263 0b00 920102E0 		mul	r2, r2, r1	@ tmp287, img_23(D)->height, MEM[(int *)_98 + 8B]
 2264              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2265              		.loc 1 185 5 view .LVU592
 2266 0b04 030080E0 		add	r0, r0, r3	@, img_23(D)->data, MEM[(int *)_92 + 8B]
 2267 0b08 8010A0E3 		mov	r1, #128	@,
 2268              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2269              		.loc 1 185 80 view .LVU593
 2270 0b0c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp292, tmp287, tmp287,
 2271              	@ armwave.c:185:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 185:armwave.c     **** }
 2272              		.loc 1 185 5 view .LVU594
 2273 0b10 C220A0E1 		asr	r2, r2, #1	@, tmp292,
 2274 0b14 FEFFFFEB 		bl	memset		@
 2275              	.LVL103:
 185:armwave.c     **** }
 2276              		.loc 1 185 5 view .LVU595
 2277              	.LBE98:
 2278              	.LBE103:
 2279              	@ armwave.c:348:     for(n = 0; n < npix; n += 2) {
 345:armwave.c     ****     
 346:armwave.c     ****     //printf("iter...\n");
 347:armwave.c     **** 
 348:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 2280              		.loc 1 348 5 view .LVU596
 2281 0b18 000057E3 		cmp	r7, #0	@ npix,
 2282 0b1c 060000DA 		ble	.L67		@,
 2283              	@ armwave.c:348:     for(n = 0; n < npix; n += 2) {
 2284              		.loc 1 348 11 view .LVU597
 2285 0b20 00B0A0E3 		mov	fp, #0	@ n,
 2286              	.LVL104:
 2287              	.L73:
 349:armwave.c     ****         wave_word = *base_32ptr++;
 2288              		.loc 1 349 9 is_stmt 1 view .LVU598
 2289              	@ armwave.c:349:         wave_word = *base_32ptr++;
 2290              		.loc 1 349 19 is_stmt 0 view .LVU599
 2291 0b24 043099E4 		ldr	r3, [r9], #4	@ wave_word, MEM[base: base_32ptr_25, offset: 4294967292B]
 2292              	.LVL105:
 350:armwave.c     **** 
 351:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 2293              		.loc 1 351 9 is_stmt 1 view .LVU600
 2294              	@ armwave.c:351:         if(COND_UNLIKELY(wave_word != 0)) {
 2295              		.loc 1 351 11 is_stmt 0 view .LVU601
 2296 0b28 000053E3 		cmp	r3, #0	@ wave_word,
 2297 0b2c 0400001A 		bne	.L82		@,
 2298              	.LVL106:
 2299              	.L70:
 2300              	@ armwave.c:348:     for(n = 0; n < npix; n += 2) {
 348:armwave.c     ****         wave_word = *base_32ptr++;
 2301              		.loc 1 348 28 discriminator 2 view .LVU602
 2302 0b30 02B08BE2 		add	fp, fp, #2	@ n, n,
 2303              	.LVL107:
 2304              	@ armwave.c:348:     for(n = 0; n < npix; n += 2) {
 348:armwave.c     ****         wave_word = *base_32ptr++;
 2305              		.loc 1 348 5 discriminator 2 view .LVU603
 2306 0b34 0B0057E1 		cmp	r7, fp	@ npix, n
 2307 0b38 F9FFFFCA 		bgt	.L73		@,
 2308              	.LVL108:
 2309              	.L67:
 2310              	@ armwave.c:372: }
 352:armwave.c     ****             for(w = 0; w < 2; w++) {
 353:armwave.c     ****                 value = wave_word & 0xffff;
 354:armwave.c     ****                 wave_word >>= 16;
 355:armwave.c     **** 
 356:armwave.c     ****                 if(value != 0) {
 357:armwave.c     ****                     // Plot the pixels
 358:armwave.c     ****                     nsub = n + w;
 359:armwave.c     ****                     yy = (nsub & 0xff); 
 360:armwave.c     ****                     xx = (nsub >> 8) / 2;
 361:armwave.c     **** 
 362:armwave.c     ****                     // FASTQ does not paint U/V for odd pixels; works OK for most purposes.
 363:armwave.c     ****                     //plot_pixel_yuv_fastq(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 364:armwave.c     ****                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 365:armwave.c     ****                     painted++;
 366:armwave.c     ****                 }
 367:armwave.c     ****             }
 368:armwave.c     ****         }
 369:armwave.c     ****     }
 370:armwave.c     **** 
 371:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 372:armwave.c     **** }
 2311              		.loc 1 372 1 view .LVU604
 2312 0b3c 0CD08DE2 		add	sp, sp, #12	@,,
 2313              		.cfi_remember_state
 2314              		.cfi_def_cfa_offset 36
 2315              		@ sp needed	@
 2316 0b40 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2317              	.LVL109:
 2318              	.L82:
 2319              		.cfi_restore_state
 353:armwave.c     ****                 wave_word >>= 16;
 2320              		.loc 1 353 17 is_stmt 1 view .LVU605
 358:armwave.c     ****                     yy = (nsub & 0xff); 
 2321              		.loc 1 358 21 view .LVU606
 359:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2322              		.loc 1 359 21 view .LVU607
 360:armwave.c     **** 
 2323              		.loc 1 360 21 view .LVU608
 358:armwave.c     ****                     yy = (nsub & 0xff); 
 2324              		.loc 1 358 21 view .LVU609
 2325 0b44 01208BE2 		add	r2, fp, #1	@ _132, n,
 2326              	.LVL110:
 359:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2327              		.loc 1 359 21 view .LVU610
 360:armwave.c     **** 
 2328              		.loc 1 360 21 view .LVU611
 2329              	@ armwave.c:359:                     yy = (nsub & 0xff); 
 359:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2330              		.loc 1 359 24 is_stmt 0 view .LVU612
 2331 0b48 7B50EFE6 		uxtb	r5, fp	@ yy.10_115, n
 2332 0b4c 72E0EFE6 		uxtb	lr, r2	@ yy.10_170, _132
 2333              	@ armwave.c:360:                     xx = (nsub >> 8) / 2;
 360:armwave.c     **** 
 2334              		.loc 1 360 32 view .LVU613
 2335 0b50 4224A0E1 		asr	r2, r2, #8	@ _168, _132,
 2336 0b54 4BC4A0E1 		asr	ip, fp, #8	@ _113, n,
 2337              	.LVL111:
 364:armwave.c     ****                     painted++;
 2338              		.loc 1 364 21 is_stmt 1 view .LVU614
 364:armwave.c     ****                     painted++;
 2339              		.loc 1 364 21 view .LVU615
 2340              	@ armwave.c:360:                     xx = (nsub >> 8) / 2;
 360:armwave.c     **** 
 2341              		.loc 1 360 38 is_stmt 0 view .LVU616
 2342 0b58 A21F82E0 		add	r1, r2, r2, lsr #31	@ tmp358, _168, _168,
 2343 0b5c 04108DE5 		str	r1, [sp, #4]	@ tmp358, %sfp
 2344              	.LBB104:
 2345              	.LBB105:
 2346              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2347              		.loc 1 153 55 view .LVU617
 2348 0b60 C510A0E1 		asr	r1, r5, #1	@ _130, yy.10_115,
 2349 0b64 00108DE5 		str	r1, [sp]	@ _130, %sfp
 2350              	.LBE105:
 2351              	.LBE104:
 2352              	@ armwave.c:353:                 value = wave_word & 0xffff;
 353:armwave.c     ****                 wave_word >>= 16;
 2353              		.loc 1 353 23 view .LVU618
 2354 0b68 7310FFE6 		uxth	r1, r3	@ value, wave_word
 2355              	.LVL112:
 354:armwave.c     **** 
 2356              		.loc 1 354 17 is_stmt 1 view .LVU619
 2357              	@ armwave.c:356:                 if(value != 0) {
 356:armwave.c     ****                     // Plot the pixels
 2358              		.loc 1 356 19 is_stmt 0 view .LVU620
 2359 0b6c 000051E3 		cmp	r1, #0	@ value,
 2360              	@ armwave.c:360:                     xx = (nsub >> 8) / 2;
 360:armwave.c     **** 
 2361              		.loc 1 360 38 view .LVU621
 2362 0b70 AC6F8CE0 		add	r6, ip, ip, lsr #31	@ tmp308, _113, _113,
 2363              	.LBB111:
 2364              	.LBB106:
 2365              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2366              		.loc 1 153 55 view .LVU622
 2367 0b74 CEA0A0E1 		asr	r10, lr, #1	@ _185, yy.10_170,
 2368              	.LBE106:
 2369              	.LBE111:
 2370              	@ armwave.c:354:                 wave_word >>= 16;
 354:armwave.c     **** 
 2371              		.loc 1 354 27 view .LVU623
 2372 0b78 2338A0E1 		lsr	r3, r3, #16	@ wave_word, wave_word,
 2373              	.LVL113:
 356:armwave.c     ****                     // Plot the pixels
 2374              		.loc 1 356 17 is_stmt 1 view .LVU624
 353:armwave.c     ****                 wave_word >>= 16;
 2375              		.loc 1 353 17 view .LVU625
 354:armwave.c     **** 
 2376              		.loc 1 354 17 view .LVU626
 356:armwave.c     ****                     // Plot the pixels
 2377              		.loc 1 356 17 view .LVU627
 2378              	@ armwave.c:356:                 if(value != 0) {
 356:armwave.c     ****                     // Plot the pixels
 2379              		.loc 1 356 19 is_stmt 0 view .LVU628
 2380 0b7c 2100000A 		beq	.L71		@,
 2381              	.LBB112:
 2382              	.LBB107:
 2383              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2384              		.loc 1 152 37 view .LVU629
 2385 0b80 048094E5 		ldr	r8, [r4, #4]	@ tmp408, img_23(D)->width
 2386 0b84 1C0094E5 		ldr	r0, [r4, #28]	@ tmp409, img_23(D)->data
 2387              	.LBE107:
 2388              	.LBE112:
 2389              	@ armwave.c:364:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 364:armwave.c     ****                     painted++;
 2390              		.loc 1 364 60 view .LVU630
 2391 0b88 FF0051E3 		cmp	r1, #255	@ value,
 2392 0b8c FF10A0A3 		movge	r1, #255	@ _116,
 2393              	.LVL114:
 2394              	.LBB113:
 2395              	.LBI104:
 148:armwave.c     **** {
 2396              		.loc 1 148 44 is_stmt 1 view .LVU631
 2397              	.LBB108:
 150:armwave.c     ****     
 2398              		.loc 1 150 5 view .LVU632
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2399              		.loc 1 152 5 view .LVU633
 2400              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2401              		.loc 1 152 37 is_stmt 0 view .LVU634
 2402 0b90 980525E0 		mla	r5, r8, r5, r0	@ tmp311, tmp408, yy.10_115, tmp409
 2403              	.LVL115:
 2404              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2405              		.loc 1 152 45 view .LVU635
 2406 0b94 00019FE5 		ldr	r0, .L83+4	@ tmp425,
 2407 0b98 811081E0 		add	r1, r1, r1, lsl #1	@ tmp302, _116, _116,
 2408              	.LVL116:
 2409              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2410              		.loc 1 153 66 view .LVU636
 2411 0b9c 03808CE2 		add	r8, ip, #3	@ tmp315, _113,
 2412              	.LVL117:
 2413              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2414              		.loc 1 152 45 view .LVU637
 2415 0ba0 0100D0E7 		ldrb	r0, [r0, r1]	@ zero_extendqisi2	@ _123, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].y
 2416              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2417              		.loc 1 153 66 view .LVU638
 2418 0ba4 00005CE3 		cmp	ip, #0	@ _113,
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2419              		.loc 1 153 66 view .LVU639
 2420 0ba8 08C0A0B1 		movlt	ip, r8	@ _113, tmp315
 2421              	.LVL118:
 2422              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2423              		.loc 1 152 37 view .LVU640
 2424 0bac C600C5E7 		strb	r0, [r5, r6, asr #1]	@ _123, *_122
 2425              	.LVL119:
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2426              		.loc 1 153 5 is_stmt 1 view .LVU641
 2427              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2428              		.loc 1 153 46 is_stmt 0 view .LVU642
 2429 0bb0 140094E5 		ldr	r0, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2430              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2431              		.loc 1 152 45 view .LVU643
 2432 0bb4 E0809FE5 		ldr	r8, .L83+4	@ tmp426,
 2433              	.LVL120:
 2434              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2435              		.loc 1 153 72 view .LVU644
 2436 0bb8 1C6094E5 		ldr	r6, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2437              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2438              		.loc 1 153 50 view .LVU645
 2439 0bbc 045090E5 		ldr	r5, [r0, #4]	@ MEM[(int *)_128 + 4B], MEM[(int *)_128 + 4B]
 2440              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2441              		.loc 1 152 45 view .LVU646
 2442 0bc0 011088E0 		add	r1, r8, r1	@ tmp303, tmp426, tmp302
 2443              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2444              		.loc 1 153 72 view .LVU647
 2445 0bc4 00809DE5 		ldr	r8, [sp]	@ _130, %sfp
 2446              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2447              		.loc 1 153 66 view .LVU648
 2448 0bc8 4CC1A0E1 		asr	ip, ip, #2	@ tmp316, _113,
 2449              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2450              		.loc 1 153 72 view .LVU649
 2451 0bcc 0C0086E0 		add	r0, r6, ip	@ tmp329, img_23(D)->data, tmp316
 2452 0bd0 950820E0 		mla	r0, r5, r8, r0	@ tmp330, MEM[(int *)_128 + 4B], _130, tmp329
 2453 0bd4 185094E5 		ldr	r5, [r4, #24]	@ tmp413, img_23(D)->offsets
 2454              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2455              		.loc 1 153 80 view .LVU650
 2456 0bd8 0260D1E5 		ldrb	r6, [r1, #2]	@ zero_extendqisi2	@ _143, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].v
 2457              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2458              		.loc 1 153 72 view .LVU651
 2459 0bdc 045095E5 		ldr	r5, [r5, #4]	@ MEM[(int *)_126 + 4B], MEM[(int *)_126 + 4B]
 2460 0be0 0560C0E7 		strb	r6, [r0, r5]	@ _143, *_142
 154:armwave.c     **** }
 2461              		.loc 1 154 5 is_stmt 1 view .LVU652
 2462              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2463              		.loc 1 154 46 is_stmt 0 view .LVU653
 2464 0be4 140094E5 		ldr	r0, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2465              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2466              		.loc 1 154 72 view .LVU654
 2467 0be8 1C6094E5 		ldr	r6, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2468              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2469              		.loc 1 154 80 view .LVU655
 2470 0bec 0110D1E5 		ldrb	r1, [r1, #1]	@ zero_extendqisi2	@ _155, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].u
 2471              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2472              		.loc 1 154 50 view .LVU656
 2473 0bf0 085090E5 		ldr	r5, [r0, #8]	@ MEM[(int *)_148 + 8B], MEM[(int *)_148 + 8B]
 2474              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2475              		.loc 1 154 72 view .LVU657
 2476 0bf4 180094E5 		ldr	r0, [r4, #24]	@ tmp415, img_23(D)->offsets
 2477 0bf8 0CC086E0 		add	ip, r6, ip	@ tmp345, img_23(D)->data, tmp316
 2478 0bfc 95C82CE0 		mla	ip, r5, r8, ip	@ tmp346, MEM[(int *)_148 + 8B], _130, tmp345
 2479 0c00 080090E5 		ldr	r0, [r0, #8]	@ MEM[(int *)_146 + 8B], MEM[(int *)_146 + 8B]
 2480 0c04 0010CCE7 		strb	r1, [ip, r0]	@ _155, *_154
 2481              	.LVL121:
 154:armwave.c     **** }
 2482              		.loc 1 154 72 view .LVU658
 2483              	.LBE108:
 2484              	.LBE113:
 365:armwave.c     ****                 }
 2485              		.loc 1 365 21 is_stmt 1 view .LVU659
 2486              	.L71:
 2487              	@ armwave.c:356:                 if(value != 0) {
 356:armwave.c     ****                     // Plot the pixels
 2488              		.loc 1 356 19 is_stmt 0 view .LVU660
 2489 0c08 000053E3 		cmp	r3, #0	@ wave_word,
 2490 0c0c C7FFFF0A 		beq	.L70		@,
 2491              	@ armwave.c:364:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 364:armwave.c     ****                     painted++;
 2492              		.loc 1 364 60 view .LVU661
 2493 0c10 FF0053E3 		cmp	r3, #255	@ wave_word,
 2494              	.LBB114:
 2495              	.LBB109:
 2496              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2497              		.loc 1 152 27 view .LVU662
 2498 0c14 040094E5 		ldr	r0, [r4, #4]	@ img_23(D)->width, img_23(D)->width
 2499              	.LBE109:
 2500              	.LBE114:
 2501              	@ armwave.c:364:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 364:armwave.c     ****                     painted++;
 2502              		.loc 1 364 60 view .LVU663
 2503 0c18 FF30A0A3 		movge	r3, #255	@ _171,
 2504              	.LVL122:
 2505              	.LBB115:
 148:armwave.c     **** {
 2506              		.loc 1 148 44 is_stmt 1 view .LVU664
 2507              	.LBB110:
 150:armwave.c     ****     
 2508              		.loc 1 150 5 view .LVU665
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2509              		.loc 1 152 5 view .LVU666
 2510              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2511              		.loc 1 152 37 is_stmt 0 view .LVU667
 2512 0c1c 1C1094E5 		ldr	r1, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2513              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2514              		.loc 1 152 45 view .LVU668
 2515 0c20 74C09FE5 		ldr	ip, .L83+4	@ tmp421,
 2516 0c24 833083E0 		add	r3, r3, r3, lsl #1	@ tmp352, _171, _171,
 2517              	.LVL123:
 2518              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2519              		.loc 1 152 37 view .LVU669
 2520 0c28 901E2EE0 		mla	lr, r0, lr, r1	@ tmp361, img_23(D)->width, yy.10_170, img_23(D)->data
 2521              	.LVL124:
 2522              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2523              		.loc 1 153 66 view .LVU670
 2524 0c2c 000052E3 		cmp	r2, #0	@ _168,
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2525              		.loc 1 153 66 view .LVU671
 2526 0c30 030082E2 		add	r0, r2, #3	@ tmp365, _168,
 2527              	.LVL125:
 2528              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2529              		.loc 1 152 45 view .LVU672
 2530 0c34 0310DCE7 		ldrb	r1, [ip, r3]	@ zero_extendqisi2	@ _178, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].y
 2531              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2532              		.loc 1 153 66 view .LVU673
 2533 0c38 0020A0B1 		movlt	r2, r0	@ _168, tmp365
 2534              	.LVL126:
 2535              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2536              		.loc 1 152 37 view .LVU674
 2537 0c3c 04009DE5 		ldr	r0, [sp, #4]	@ tmp358, %sfp
 2538              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2539              		.loc 1 152 45 view .LVU675
 2540 0c40 03308CE0 		add	r3, ip, r3	@ tmp353, tmp422, tmp352
 2541              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2542              		.loc 1 153 66 view .LVU676
 2543 0c44 4221A0E1 		asr	r2, r2, #2	@ tmp366, _168,
 2544              	@ armwave.c:152:     img->data[(img->width * y) + x] = yuv_in->y; 
 152:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2545              		.loc 1 152 37 view .LVU677
 2546 0c48 C010CEE7 		strb	r1, [lr, r0, asr #1]	@ _178, *_177
 2547              	.LVL127:
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2548              		.loc 1 153 5 is_stmt 1 view .LVU678
 2549              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2550              		.loc 1 153 46 is_stmt 0 view .LVU679
 2551 0c4c 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2552              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2553              		.loc 1 153 72 view .LVU680
 2554 0c50 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2555              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2556              		.loc 1 153 27 view .LVU681
 2557 0c54 18C094E5 		ldr	ip, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2558              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2559              		.loc 1 153 50 view .LVU682
 2560 0c58 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_183 + 4B], MEM[(int *)_183 + 4B]
 2561              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2562              		.loc 1 153 72 view .LVU683
 2563 0c5c 020080E0 		add	r0, r0, r2	@ tmp379, img_23(D)->data, tmp366
 2564 0c60 910A21E0 		mla	r1, r1, r10, r0	@ tmp380, MEM[(int *)_183 + 4B], _185, tmp379
 2565 0c64 04009CE5 		ldr	r0, [ip, #4]	@ MEM[(int *)_181 + 4B], MEM[(int *)_181 + 4B]
 2566              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2567              		.loc 1 153 80 view .LVU684
 2568 0c68 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2	@ _192, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].v
 2569              	@ armwave.c:153:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 153:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2570              		.loc 1 153 72 view .LVU685
 2571 0c6c 00C0C1E7 		strb	ip, [r1, r0]	@ _192, *_191
 154:armwave.c     **** }
 2572              		.loc 1 154 5 is_stmt 1 view .LVU686
 2573              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2574              		.loc 1 154 46 is_stmt 0 view .LVU687
 2575 0c70 14C094E5 		ldr	ip, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2576              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2577              		.loc 1 154 80 view .LVU688
 2578 0c74 0100D3E5 		ldrb	r0, [r3, #1]	@ zero_extendqisi2	@ _204, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].u
 2579              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2580              		.loc 1 154 72 view .LVU689
 2581 0c78 1C3094E5 		ldr	r3, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2582              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2583              		.loc 1 154 50 view .LVU690
 2584 0c7c 08C09CE5 		ldr	ip, [ip, #8]	@ MEM[(int *)_197 + 8B], MEM[(int *)_197 + 8B]
 2585              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2586              		.loc 1 154 27 view .LVU691
 2587 0c80 181094E5 		ldr	r1, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2588              	@ armwave.c:154:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 154:armwave.c     **** }
 2589              		.loc 1 154 72 view .LVU692
 2590 0c84 022083E0 		add	r2, r3, r2	@ tmp395, img_23(D)->data, tmp366
 2591 0c88 9C2A22E0 		mla	r2, ip, r10, r2	@ tmp396, MEM[(int *)_197 + 8B], _185, tmp395
 2592 0c8c 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_195 + 8B], MEM[(int *)_195 + 8B]
 2593 0c90 0100C2E7 		strb	r0, [r2, r1]	@ _204, *_203
 2594              	.LVL128:
 154:armwave.c     **** }
 2595              		.loc 1 154 72 view .LVU693
 2596              	.LBE110:
 2597              	.LBE115:
 365:armwave.c     ****                 }
 2598              		.loc 1 365 21 is_stmt 1 view .LVU694
 2599 0c94 A5FFFFEA 		b	.L70		@
 2600              	.L84:
 2601              		.align	2
 2602              	.L83:
 2603 0c98 00000000 		.word	g_armwave_state
 2604 0c9c 00000000 		.word	g_yuv_lut
 2605              		.cfi_endproc
 2606              	.LFE65:
 2608              		.global	__aeabi_idiv
 2609              		.align	2
 2610              		.global	armwave_generate
 2611              		.syntax unified
 2612              		.arm
 2613              		.fpu vfp
 2615              	armwave_generate:
 2616              	.LFB66:
 373:armwave.c     **** 
 374:armwave.c     **** /*
 375:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 376:armwave.c     ****  */
 377:armwave.c     **** void armwave_generate()
 378:armwave.c     **** {
 2617              		.loc 1 378 1 view -0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 0
 2620              		@ frame_needed = 0, uses_anonymous_args = 0
 379:armwave.c     ****     uint32_t yy;
 2621              		.loc 1 379 5 view .LVU696
 380:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 2622              		.loc 1 380 5 view .LVU697
 2623              	@ armwave.c:378: {
 378:armwave.c     ****     uint32_t yy;
 2624              		.loc 1 378 1 is_stmt 0 view .LVU698
 2625 0ca0 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2626              		.cfi_def_cfa_offset 24
 2627              		.cfi_offset 4, -24
 2628              		.cfi_offset 5, -20
 2629              		.cfi_offset 6, -16
 2630              		.cfi_offset 7, -12
 2631              		.cfi_offset 8, -8
 2632              		.cfi_offset 14, -4
 2633              	@ armwave.c:383:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 381:armwave.c     **** 
 382:armwave.c     ****     // Zero the buffer
 383:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2634              		.loc 1 383 5 view .LVU699
 2635 0ca4 0010A0E3 		mov	r1, #0	@,
 2636              	@ armwave.c:380:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 380:armwave.c     **** 
 2637              		.loc 1 380 38 view .LVU700
 2638 0ca8 80609FE5 		ldr	r6, .L91	@ tmp147,
 2639              	@ armwave.c:383:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2640              		.loc 1 383 5 view .LVU701
 2641 0cac 502096E5 		ldr	r2, [r6, #80]	@, g_armwave_state.ch_buff_size
 2642 0cb0 040096E5 		ldr	r0, [r6, #4]	@, g_armwave_state.ch1_buffer
 2643              	@ armwave.c:380:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 380:armwave.c     **** 
 2644              		.loc 1 380 14 view .LVU702
 2645 0cb4 4C8096E5 		ldr	r8, [r6, #76]	@ xx_rem, g_armwave_state.wave_length
 2646              	.LVL129:
 2647              		.loc 1 383 5 is_stmt 1 view .LVU703
 2648 0cb8 FEFFFFEB 		bl	memset		@
 2649              	.LVL130:
 384:armwave.c     **** 
 385:armwave.c     ****     // Render the main slices
 386:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 2650              		.loc 1 386 5 view .LVU704
 2651              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2652              		.loc 1 386 68 is_stmt 0 view .LVU705
 2653 0cbc 444096E5 		ldr	r4, [r6, #68]	@ _9, g_armwave_state.slice_height
 2654              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2655              		.loc 1 386 51 view .LVU706
 2656 0cc0 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 2657 0cc4 0410A0E1 		mov	r1, r4	@, _9
 2658 0cc8 FEFFFFEB 		bl	__aeabi_idiv		@
 2659              	.LVL131:
 2660              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2661              		.loc 1 386 5 view .LVU707
 2662 0ccc 000050E3 		cmp	r0, #0	@ tmp139
 2663 0cd0 1100000A 		beq	.L88		@,
 2664              	@ armwave.c:380:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 380:armwave.c     **** 
 2665              		.loc 1 380 52 view .LVU708
 2666 0cd4 0070A0E3 		mov	r7, #0	@ ypos,
 2667              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2668              		.loc 1 386 12 view .LVU709
 2669 0cd8 0750A0E1 		mov	r5, r7	@ yy, ypos
 2670              	.LVL132:
 2671              	.L87:
 387:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2672              		.loc 1 387 9 is_stmt 1 discriminator 3 view .LVU710
 2673 0cdc 950400E0 		mul	r0, r5, r4	@, yy, tmp1
 2674 0ce0 0410A0E1 		mov	r1, r4	@, _9
 2675 0ce4 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 2676              	.LVL133:
 388:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2677              		.loc 1 388 9 discriminator 3 view .LVU711
 2678              	@ armwave.c:388:         xx_rem -= g_armwave_state.slice_height;
 2679              		.loc 1 388 34 is_stmt 0 discriminator 3 view .LVU712
 2680 0ce8 444096E5 		ldr	r4, [r6, #68]	@ _9, g_armwave_state.slice_height
 2681              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2682              		.loc 1 386 51 discriminator 3 view .LVU713
 2683 0cec 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 2684 0cf0 0410A0E1 		mov	r1, r4	@, _9
 2685 0cf4 FEFFFFEB 		bl	__aeabi_idiv		@
 2686              	.LVL134:
 2687              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2688              		.loc 1 386 86 discriminator 3 view .LVU714
 2689 0cf8 015085E2 		add	r5, r5, #1	@ yy, yy,
 2690              	.LVL135:
 2691              	@ armwave.c:388:         xx_rem -= g_armwave_state.slice_height;
 2692              		.loc 1 388 16 discriminator 3 view .LVU715
 2693 0cfc 048048E0 		sub	r8, r8, r4	@ xx_rem, xx_rem, _9
 2694              	.LVL136:
 389:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 2695              		.loc 1 389 9 is_stmt 1 discriminator 3 view .LVU716
 2696              	@ armwave.c:389:         ypos += g_armwave_state.slice_height;   
 2697              		.loc 1 389 14 is_stmt 0 discriminator 3 view .LVU717
 2698 0d00 047087E0 		add	r7, r7, r4	@ ypos, ypos, _9
 2699              	.LVL137:
 2700              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2701              		.loc 1 386 5 discriminator 3 view .LVU718
 2702 0d04 050050E1 		cmp	r0, r5	@, yy
 2703 0d08 F3FFFF8A 		bhi	.L87		@,
 390:armwave.c     ****     }
 391:armwave.c     **** 
 392:armwave.c     ****     // Render whatever is left over
 393:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2704              		.loc 1 393 5 is_stmt 1 view .LVU719
 2705 0d0c 0810A0E1 		mov	r1, r8	@, xx_rem
 2706 0d10 0700A0E1 		mov	r0, r7	@, ypos
 2707              	@ armwave.c:394: }
 394:armwave.c     **** }
 2708              		.loc 1 394 1 is_stmt 0 view .LVU720
 2709 0d14 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2710              		.cfi_remember_state
 2711              		.cfi_restore 14
 2712              		.cfi_restore 8
 2713              		.cfi_restore 7
 2714              		.cfi_restore 6
 2715              		.cfi_restore 5
 2716              		.cfi_restore 4
 2717              		.cfi_def_cfa_offset 0
 2718              	.LVL138:
 2719              	@ armwave.c:393:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 393:armwave.c     **** }
 2720              		.loc 1 393 5 view .LVU721
 2721 0d18 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2722              	.LVL139:
 2723              	.L88:
 2724              		.cfi_restore_state
 2725              	@ armwave.c:380:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 380:armwave.c     **** 
 2726              		.loc 1 380 52 view .LVU722
 2727 0d1c 0070A0E1 		mov	r7, r0	@ ypos, tmp139
 393:armwave.c     **** }
 2728              		.loc 1 393 5 is_stmt 1 view .LVU723
 2729 0d20 0810A0E1 		mov	r1, r8	@, xx_rem
 2730 0d24 0700A0E1 		mov	r0, r7	@, ypos
 2731              	@ armwave.c:394: }
 2732              		.loc 1 394 1 is_stmt 0 view .LVU724
 2733 0d28 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2734              		.cfi_restore 14
 2735              		.cfi_restore 8
 2736              		.cfi_restore 7
 2737              		.cfi_restore 6
 2738              		.cfi_restore 5
 2739              		.cfi_restore 4
 2740              		.cfi_def_cfa_offset 0
 2741              	.LVL140:
 2742              	@ armwave.c:393:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 393:armwave.c     **** }
 2743              		.loc 1 393 5 view .LVU725
 2744 0d2c FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2745              	.LVL141:
 2746              	.L92:
 2747              		.align	2
 2748              	.L91:
 2749 0d30 00000000 		.word	g_armwave_state
 2750              		.cfi_endproc
 2751              	.LFE66:
 2753              		.align	2
 2754              		.global	armwave_setup_render
 2755              		.syntax unified
 2756              		.arm
 2757              		.fpu vfp
 2759              	armwave_setup_render:
 2760              	.LVL142:
 2761              	.LFB67:
 395:armwave.c     **** 
 396:armwave.c     **** /*
 397:armwave.c     ****  * Setup the renderer with passed parameters.
 398:armwave.c     ****  */
 399:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 400:armwave.c     **** {
 2762              		.loc 1 400 1 is_stmt 1 view -0
 2763              		.cfi_startproc
 2764              		@ args = 12, pretend = 0, frame = 0
 2765              		@ frame_needed = 0, uses_anonymous_args = 0
 401:armwave.c     ****     uint32_t length, xx;
 2766              		.loc 1 401 5 view .LVU727
 402:armwave.c     ****     float points_per_pixel;
 2767              		.loc 1 402 5 view .LVU728
 403:armwave.c     **** 
 404:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 2768              		.loc 1 404 5 view .LVU729
 2769              	@ armwave.c:400: {
 400:armwave.c     ****     uint32_t length, xx;
 2770              		.loc 1 400 1 is_stmt 0 view .LVU730
 2771 0d34 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2772              		.cfi_def_cfa_offset 32
 2773              		.cfi_offset 4, -32
 2774              		.cfi_offset 5, -28
 2775              		.cfi_offset 6, -24
 2776              		.cfi_offset 7, -20
 2777              		.cfi_offset 8, -16
 2778              		.cfi_offset 9, -12
 2779              		.cfi_offset 10, -8
 2780              		.cfi_offset 14, -4
 2781 0d38 10D04DE2 		sub	sp, sp, #16	@,,
 2782              		.cfi_def_cfa_offset 48
 2783              	@ armwave.c:400: {
 400:armwave.c     ****     uint32_t length, xx;
 2784              		.loc 1 400 1 view .LVU731
 2785 0d3c 0040A0E1 		mov	r4, r0	@ start_point, start_point
 2786 0d40 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 2787 0d44 38809DE5 		ldr	r8, [sp, #56]	@ render_flags, render_flags
 2788 0d48 0150A0E1 		mov	r5, r1	@ end_point, end_point
 2789              	@ armwave.c:404:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 2790              		.loc 1 404 5 view .LVU732
 2791 0d4c 00308DE5 		str	r3, [sp]	@ wave_stride,
 2792              	@ armwave.c:400: {
 400:armwave.c     ****     uint32_t length, xx;
 2793              		.loc 1 400 1 view .LVU733
 2794 0d50 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 2795 0d54 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 2796              	@ armwave.c:404:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 2797              		.loc 1 404 5 view .LVU734
 2798 0d58 F460CDE1 		strd	r6, [sp, #4]	@,,
 2799 0d5c 0230A0E1 		mov	r3, r2	@, waves_max
 2800              	.LVL143:
 2801              		.loc 1 404 5 view .LVU735
 2802 0d60 0C808DE5 		str	r8, [sp, #12]	@ render_flags,
 2803 0d64 0120A0E1 		mov	r2, r1	@, end_point
 2804              	.LVL144:
 2805              		.loc 1 404 5 view .LVU736
 2806 0d68 0010A0E1 		mov	r1, r0	@, start_point
 2807              	.LVL145:
 2808              		.loc 1 404 5 view .LVU737
 2809 0d6c 0C029FE5 		ldr	r0, .L108+12	@,
 2810              	.LVL146:
 2811              		.loc 1 404 5 view .LVU738
 2812 0d70 FEFFFFEB 		bl	printf		@
 2813              	.LVL147:
 405:armwave.c     **** 
 406:armwave.c     ****     if(start_point > end_point) {
 2814              		.loc 1 406 5 is_stmt 1 view .LVU739
 2815              	@ armwave.c:406:     if(start_point > end_point) {
 2816              		.loc 1 406 7 is_stmt 0 view .LVU740
 2817 0d74 050054E1 		cmp	r4, r5	@ start_point, end_point
 2818 0d78 6D00008A 		bhi	.L106		@,
 407:armwave.c     ****         printf("Error: start point more than end point\n");
 408:armwave.c     ****         return;
 409:armwave.c     ****     }
 410:armwave.c     **** 
 411:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 412:armwave.c     ****     g_armwave_state.xstride = target_height;
 2819              		.loc 1 412 5 is_stmt 1 view .LVU741
 2820              	@ armwave.c:423:     g_armwave_state.wave_length = end_point - start_point;
 413:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 414:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 415:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 416:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 417:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 418:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 419:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 420:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 421:armwave.c     ****     g_armwave_state.target_width = target_width;
 422:armwave.c     ****     g_armwave_state.target_height = target_height;
 423:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2821              		.loc 1 423 45 is_stmt 0 view .LVU742
 2822 0d7c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 2823              	.LVL148:
 2824              	@ armwave.c:428:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 424:armwave.c     ****     g_armwave_state.flags = render_flags;
 425:armwave.c     **** 
 426:armwave.c     ****     // Calculate compound scaler
 427:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 428:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2825              		.loc 1 428 48 view .LVU743
 2826 0d80 7B5A9FED 		vldr.32	s10, .L108	@ tmp197,
 2827 0d84 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 2828              	@ armwave.c:413:     g_armwave_state.vscale_frac = target_height / 255.0f;
 413:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2829              		.loc 1 413 49 view .LVU744
 2830 0d88 7A7A9FED 		vldr.32	s14, .L108+4	@ tmp174,
 2831              	@ armwave.c:428:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 2832              		.loc 1 428 81 view .LVU745
 2833 0d8c 7A6A9FED 		vldr.32	s12, .L108+8	@ tmp201,
 2834              	@ armwave.c:420:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 420:armwave.c     ****     g_armwave_state.target_width = target_width;
 2835              		.loc 1 420 90 view .LVU746
 2836 0d90 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 2837              	@ armwave.c:428:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 2838              		.loc 1 428 48 view .LVU747
 2839 0d94 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp195, _13
 2840              	@ armwave.c:413:     g_armwave_state.vscale_frac = target_height / 255.0f;
 413:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2841              		.loc 1 413 49 view .LVU748
 2842 0d98 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 2843              	@ armwave.c:412:     g_armwave_state.xstride = target_height;
 412:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2844              		.loc 1 412 29 view .LVU749
 2845 0d9c E0419FE5 		ldr	r4, .L108+16	@ tmp247,
 2846              	.LVL149:
 2847              	@ armwave.c:418:     g_armwave_state.size = target_height * target_width;
 418:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2848              		.loc 1 418 42 view .LVU750
 2849 0da0 970600E0 		mul	r0, r7, r6	@ tmp182, target_height, target_width
 2850              	@ armwave.c:413:     g_armwave_state.vscale_frac = target_height / 255.0f;
 413:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2851              		.loc 1 413 49 view .LVU751
 2852 0da4 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 2853              	@ armwave.c:420:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 420:armwave.c     ****     g_armwave_state.target_width = target_width;
 2854              		.loc 1 420 95 view .LVU752
 2855 0da8 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 2856              	@ armwave.c:430:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 429:armwave.c     **** 
 430:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 2857              		.loc 1 430 5 view .LVU753
 2858 0dac 0128A0E3 		mov	r2, #65536	@ tmp204,
 2859              	@ armwave.c:428:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 428:armwave.c     **** 
 2860              		.loc 1 428 48 view .LVU754
 2861 0db0 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp196, tmp197, tmp195
 2862              	@ armwave.c:430:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2863              		.loc 1 430 5 view .LVU755
 2864 0db4 04508DE5 		str	r5, [sp, #4]	@ _13,
 2865 0db8 00608DE5 		str	r6, [sp]	@ target_width,
 2866              	@ armwave.c:420:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 420:armwave.c     ****     g_armwave_state.target_width = target_width;
 2867              		.loc 1 420 95 view .LVU756
 2868 0dbc 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 2869              	@ armwave.c:412:     g_armwave_state.xstride = target_height;
 412:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2870              		.loc 1 412 29 view .LVU757
 2871 0dc0 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 413:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2872              		.loc 1 413 5 is_stmt 1 view .LVU758
 2873              	@ armwave.c:415:     g_armwave_state.wave_stride = wave_stride;
 415:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2874              		.loc 1 415 33 is_stmt 0 view .LVU759
 2875 0dc4 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 2876              	@ armwave.c:416:     g_armwave_state.waves_max = waves_max;
 416:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2877              		.loc 1 416 31 view .LVU760
 2878 0dc8 3C9084E5 		str	r9, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 2879              	@ armwave.c:417:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 417:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2880              		.loc 1 417 27 view .LVU761
 2881 0dcc 389084E5 		str	r9, [r4, #56]	@ waves_max, g_armwave_state.waves
 2882              	@ armwave.c:422:     g_armwave_state.target_height = target_height;
 422:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2883              		.loc 1 422 35 view .LVU762
 2884 0dd0 F067C4E1 		strd	r6, [r4, #112]	@, tmp247,
 2885              	@ armwave.c:430:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2886              		.loc 1 430 5 view .LVU763
 2887 0dd4 08208DE5 		str	r2, [sp, #8]	@ tmp204,
 2888              	@ armwave.c:419:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 419:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2889              		.loc 1 419 37 view .LVU764
 2890 0dd8 022CA0E3 		mov	r2, #512	@ tmp184,
 2891              	@ armwave.c:430:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2892              		.loc 1 430 5 view .LVU765
 2893 0ddc 0310A0E1 		mov	r1, r3	@, tmp189
 2894              	@ armwave.c:418:     g_armwave_state.size = target_height * target_width;
 418:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2895              		.loc 1 418 26 view .LVU766
 2896 0de0 540084E5 		str	r0, [r4, #84]	@ tmp182, g_armwave_state.size
 2897              	@ armwave.c:419:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 419:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2898              		.loc 1 419 37 view .LVU767
 2899 0de4 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 2900              	@ armwave.c:420:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 420:armwave.c     ****     g_armwave_state.target_width = target_width;
 2901              		.loc 1 420 34 view .LVU768
 2902 0de8 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 2903              	@ armwave.c:413:     g_armwave_state.vscale_frac = target_height / 255.0f;
 413:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2904              		.loc 1 413 49 view .LVU769
 2905 0dec 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp173, tmp174
 2906              	@ armwave.c:428:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 428:armwave.c     **** 
 2907              		.loc 1 428 40 view .LVU770
 2908 0df0 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 2909              	@ armwave.c:423:     g_armwave_state.wave_length = end_point - start_point;
 423:armwave.c     ****     g_armwave_state.flags = render_flags;
 2910              		.loc 1 423 33 view .LVU771
 2911 0df4 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 2912              	@ armwave.c:424:     g_armwave_state.flags = render_flags;
 424:armwave.c     **** 
 2913              		.loc 1 424 27 view .LVU772
 2914 0df8 008084E5 		str	r8, [r4]	@ render_flags, g_armwave_state.flags
 2915              	@ armwave.c:430:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2916              		.loc 1 430 5 view .LVU773
 2917 0dfc 84019FE5 		ldr	r0, .L108+20	@,
 2918              	@ armwave.c:428:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 428:armwave.c     **** 
 2919              		.loc 1 428 40 view .LVU774
 2920 0e00 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, target_width
 2921 0e04 877A67EE 		vmul.f32	s15, s15, s14	@ tmp199, tmp196, tmp198
 2922              	@ armwave.c:414:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 414:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2923              		.loc 1 414 30 view .LVU775
 2924 0e08 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp177, _3
 2925              	@ armwave.c:413:     g_armwave_state.vscale_frac = target_height / 255.0f;
 413:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2926              		.loc 1 413 33 view .LVU776
 2927 0e0c 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 414:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2928              		.loc 1 414 5 is_stmt 1 view .LVU777
 2929              	@ armwave.c:428:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 428:armwave.c     **** 
 2930              		.loc 1 428 81 is_stmt 0 view .LVU778
 2931 0e10 867A67EE 		vmul.f32	s15, s15, s12	@ tmp200, tmp199, tmp201
 2932              	@ armwave.c:414:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 414:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2933              		.loc 1 414 30 view .LVU779
 2934 0e14 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 415:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2935              		.loc 1 415 5 is_stmt 1 view .LVU780
 416:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2936              		.loc 1 416 5 view .LVU781
 417:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2937              		.loc 1 417 5 view .LVU782
 418:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2938              		.loc 1 418 5 view .LVU783
 419:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2939              		.loc 1 419 5 view .LVU784
 420:armwave.c     ****     g_armwave_state.target_width = target_width;
 2940              		.loc 1 420 5 view .LVU785
 421:armwave.c     ****     g_armwave_state.target_height = target_height;
 2941              		.loc 1 421 5 view .LVU786
 422:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2942              		.loc 1 422 5 view .LVU787
 423:armwave.c     ****     g_armwave_state.flags = render_flags;
 2943              		.loc 1 423 5 view .LVU788
 424:armwave.c     **** 
 2944              		.loc 1 424 5 view .LVU789
 427:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2945              		.loc 1 427 5 view .LVU790
 2946              	@ armwave.c:427:     g_armwave_state.cmp_x_bitdepth_scale = \
 427:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2947              		.loc 1 427 42 is_stmt 0 view .LVU791
 2948 0e18 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp200
 2949 0e1c 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 2950              	@ armwave.c:430:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2951              		.loc 1 430 5 view .LVU792
 2952 0e20 903A17EE 		vmov	r3, s15	@ int	@, _20
 2953              	@ armwave.c:427:     g_armwave_state.cmp_x_bitdepth_scale = \
 427:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2954              		.loc 1 427 42 view .LVU793
 2955 0e24 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 2956              		.loc 1 430 5 is_stmt 1 view .LVU794
 2957 0e28 0C20A0E1 		mov	r2, ip	@, tmp3
 2958 0e2c FEFFFFEB 		bl	printf		@
 2959              	.LVL150:
 431:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 432:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 433:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 434:armwave.c     **** 
 435:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 436:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 437:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 438:armwave.c     ****     g_armwave_state.slice_height = 16; // 64;  
 2960              		.loc 1 438 5 view .LVU795
 2961              	@ armwave.c:440:     if(g_armwave_state.ch1_buffer != NULL)
 439:armwave.c     **** 
 440:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 2962              		.loc 1 440 23 is_stmt 0 view .LVU796
 2963 0e30 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 2964              	@ armwave.c:438:     g_armwave_state.slice_height = 16; // 64;  
 438:armwave.c     **** 
 2965              		.loc 1 438 34 view .LVU797
 2966 0e34 1030A0E3 		mov	r3, #16	@ tmp206,
 2967              	@ armwave.c:440:     if(g_armwave_state.ch1_buffer != NULL)
 2968              		.loc 1 440 7 view .LVU798
 2969 0e38 000050E3 		cmp	r0, #0	@ _21,
 2970              	@ armwave.c:438:     g_armwave_state.slice_height = 16; // 64;  
 438:armwave.c     **** 
 2971              		.loc 1 438 34 view .LVU799
 2972 0e3c 443084E5 		str	r3, [r4, #68]	@ tmp206, g_armwave_state.slice_height
 2973              		.loc 1 440 5 is_stmt 1 view .LVU800
 2974              	@ armwave.c:440:     if(g_armwave_state.ch1_buffer != NULL)
 2975              		.loc 1 440 7 is_stmt 0 view .LVU801
 2976 0e40 0000000A 		beq	.L95		@,
 441:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2977              		.loc 1 441 9 is_stmt 1 view .LVU802
 2978 0e44 FEFFFFEB 		bl	free		@
 2979              	.LVL151:
 2980              	.L95:
 442:armwave.c     **** 
 443:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2981              		.loc 1 443 5 view .LVU803
 2982              	@ armwave.c:443:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2983              		.loc 1 443 56 is_stmt 0 view .LVU804
 2984 0e48 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 2985              	@ armwave.c:443:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2986              		.loc 1 443 34 view .LVU805
 2987 0e4c 0110A0E3 		mov	r1, #1	@,
 2988 0e50 0800A0E1 		mov	r0, r8	@, _22
 2989 0e54 FEFFFFEB 		bl	calloc		@
 2990              	.LVL152:
 2991              	@ armwave.c:445:     if(g_armwave_state.ch1_buffer == NULL) {
 444:armwave.c     **** 
 445:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 2992              		.loc 1 445 7 view .LVU806
 2993 0e58 000050E3 		cmp	r0, #0	@ pretmp_124,
 2994              	@ armwave.c:443:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 443:armwave.c     **** 
 2995              		.loc 1 443 34 view .LVU807
 2996 0e5c 0070A0E1 		mov	r7, r0	@ pretmp_124,
 2997              	@ armwave.c:443:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 443:armwave.c     **** 
 2998              		.loc 1 443 32 view .LVU808
 2999 0e60 040084E5 		str	r0, [r4, #4]	@ pretmp_124, g_armwave_state.ch1_buffer
 3000              		.loc 1 445 5 is_stmt 1 view .LVU809
 3001              	@ armwave.c:445:     if(g_armwave_state.ch1_buffer == NULL) {
 3002              		.loc 1 445 7 is_stmt 0 view .LVU810
 3003 0e64 3B00000A 		beq	.L107		@,
 446:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 447:armwave.c     ****         exit(-1);
 448:armwave.c     ****     }
 449:armwave.c     **** 
 450:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 451:armwave.c     ****     length = end_point - start_point;
 3004              		.loc 1 451 5 is_stmt 1 view .LVU811
 3005              	.LVL153:
 452:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3006              		.loc 1 452 5 view .LVU812
 453:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3007              		.loc 1 453 5 view .LVU813
 3008              	@ armwave.c:452:     points_per_pixel = length / ((float)(target_width));
 452:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3009              		.loc 1 452 31 is_stmt 0 view .LVU814
 3010 0e68 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 3011              	@ armwave.c:453:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 3012              		.loc 1 453 77 view .LVU815
 3013 0e6c 448094E5 		ldr	r8, [r4, #68]	@ _28, g_armwave_state.slice_height
 3014              	@ armwave.c:455:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 454:armwave.c     **** 
 455:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 3015              		.loc 1 455 40 view .LVU816
 3016 0e70 8500A0E1 		lsl	r0, r5, #1	@, _13,
 3017              	@ armwave.c:452:     points_per_pixel = length / ((float)(target_width));
 452:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3018              		.loc 1 452 31 view .LVU817
 3019 0e74 676AB8EE 		vcvt.f32.u32	s12, s15	@ tmp215, _13
 3020              	@ armwave.c:452:     points_per_pixel = length / ((float)(target_width));
 452:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3021              		.loc 1 452 34 view .LVU818
 3022 0e78 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 3023              	@ armwave.c:453:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 453:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3024              		.loc 1 453 60 view .LVU819
 3025 0e7c 108A07EE 		vmov	s14, r8	@ int	@ _28, _28
 3026              	@ armwave.c:452:     points_per_pixel = length / ((float)(target_width));
 452:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3027              		.loc 1 452 34 view .LVU820
 3028 0e80 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 3029              	@ armwave.c:453:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 453:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3030              		.loc 1 453 60 view .LVU821
 3031 0e84 C76AF8EE 		vcvt.f32.s32	s13, s14	@ tmp218, _28
 3032              	@ armwave.c:452:     points_per_pixel = length / ((float)(target_width));
 452:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3033              		.loc 1 452 22 view .LVU822
 3034 0e88 277A86EE 		vdiv.f32	s14, s12, s15	@ points_per_pixel, tmp215, tmp216
 3035              	.LVL154:
 3036              	@ armwave.c:453:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 453:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3037              		.loc 1 453 60 view .LVU823
 3038 0e8c 267A67EE 		vmul.f32	s15, s14, s13	@ tmp219, points_per_pixel, tmp218
 3039              	@ armwave.c:453:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 453:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3040              		.loc 1 453 41 view .LVU824
 3041 0e90 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 3042 0e94 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 3043              		.loc 1 455 5 is_stmt 1 view .LVU825
 3044              	@ armwave.c:455:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 3045              		.loc 1 455 40 is_stmt 0 view .LVU826
 3046 0e98 FEFFFFEB 		bl	malloc		@
 3047              	.LVL155:
 3048              	@ armwave.c:457:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 456:armwave.c     **** 
 457:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 3049              		.loc 1 457 5 view .LVU827
 3050 0e9c 000050E3 		cmp	r0, #0	@ pretmp_119,
 3051              	@ armwave.c:455:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 455:armwave.c     **** 
 3052              		.loc 1 455 40 view .LVU828
 3053 0ea0 0060A0E1 		mov	r6, r0	@ pretmp_119,
 3054              	.LVL156:
 3055              	@ armwave.c:455:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 455:armwave.c     **** 
 3056              		.loc 1 455 38 view .LVU829
 3057 0ea4 9C0084E5 		str	r0, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3058              		.loc 1 457 5 is_stmt 1 view .LVU830
 3059 0ea8 2500000A 		beq	.L97		@,
 3060              	.LVL157:
 3061              	@ armwave.c:459:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 458:armwave.c     **** 
 459:armwave.c     ****     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3062              		.loc 1 459 5 is_stmt 0 view .LVU831
 3063 0eac 000058E3 		cmp	r8, #0	@ _28,
 3064              	@ armwave.c:459:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3065              		.loc 1 459 12 view .LVU832
 3066 0eb0 0050A013 		movne	r5, #0	@ xx,
 3067              	.LVL158:
 3068              	@ armwave.c:461:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 460:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 461:armwave.c     ****         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpixel[xx]);
 3069              		.loc 1 461 9 view .LVU833
 3070 0eb4 D0709F15 		ldrne	r7, .L108+24	@ tmp248,
 3071              	@ armwave.c:459:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 459:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3072              		.loc 1 459 5 view .LVU834
 3073 0eb8 0100001A 		bne	.L98		@,
 3074 0ebc 0E0000EA 		b	.L99		@
 3075              	.LVL159:
 3076              	.L100:
 459:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3077              		.loc 1 459 5 view .LVU835
 3078 0ec0 9C6094E5 		ldr	r6, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3079              	.LVL160:
 3080              	.L98:
 460:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3081              		.loc 1 460 9 is_stmt 1 discriminator 3 view .LVU836
 3082              	@ armwave.c:460:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 460:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3083              		.loc 1 460 53 is_stmt 0 discriminator 3 view .LVU837
 3084 0ec4 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3085              	@ armwave.c:460:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 460:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3086              		.loc 1 460 46 discriminator 3 view .LVU838
 3087 0ec8 85C0A0E1 		lsl	ip, r5, #1	@ tmp231, xx,
 3088              	@ armwave.c:461:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 3089              		.loc 1 461 9 discriminator 3 view .LVU839
 3090 0ecc 0510A0E1 		mov	r1, r5	@, xx
 3091              	@ armwave.c:460:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 460:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3092              		.loc 1 460 53 discriminator 3 view .LVU840
 3093 0ed0 930503E0 		mul	r3, r3, r5	@ tmp229, g_armwave_state.cmp_x_bitdepth_scale, xx
 3094              	@ armwave.c:461:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 3095              		.loc 1 461 9 discriminator 3 view .LVU841
 3096 0ed4 0700A0E1 		mov	r0, r7	@, tmp248
 3097              	@ armwave.c:459:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 459:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3098              		.loc 1 459 54 discriminator 3 view .LVU842
 3099 0ed8 015085E2 		add	r5, r5, #1	@ xx, xx,
 3100              	.LVL161:
 3101              	@ armwave.c:460:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 460:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3102              		.loc 1 460 93 discriminator 3 view .LVU843
 3103 0edc 2328A0E1 		lsr	r2, r3, #16	@ _36, tmp229,
 3104              	@ armwave.c:460:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 460:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3105              		.loc 1 460 46 discriminator 3 view .LVU844
 3106 0ee0 BC2086E1 		strh	r2, [r6, ip]	@ movhi	@ _36, *_39
 3107              		.loc 1 461 9 is_stmt 1 discriminator 3 view .LVU845
 3108 0ee4 FEFFFFEB 		bl	printf		@
 3109              	.LVL162:
 3110              	@ armwave.c:459:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 459:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3111              		.loc 1 459 5 is_stmt 0 discriminator 3 view .LVU846
 3112 0ee8 443094E5 		ldr	r3, [r4, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 3113 0eec 050053E1 		cmp	r3, r5	@ g_armwave_state.slice_height, xx
 3114 0ef0 F2FFFF8A 		bhi	.L100		@,
 3115 0ef4 047094E5 		ldr	r7, [r4, #4]	@ pretmp_124, g_armwave_state.ch1_buffer
 3116 0ef8 9C6094E5 		ldr	r6, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3117              	.LVL163:
 3118              	.L99:
 462:armwave.c     ****     }
 463:armwave.c     ****     
 464:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3119              		.loc 1 464 5 is_stmt 1 view .LVU847
 3120              	@ armwave.c:464:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3121              		.loc 1 464 34 is_stmt 0 view .LVU848
 3122 0efc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 3123 0f00 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 3124 0f04 FEFFFFEB 		bl	malloc		@
 3125              	.LVL164:
 3126              	@ armwave.c:466:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 465:armwave.c     **** 
 466:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3127              		.loc 1 466 5 view .LVU849
 3128 0f08 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3129 0f0c 0620A0E1 		mov	r2, r6	@, pretmp_119
 3130 0f10 30308DE5 		str	r3, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 3131 0f14 0710A0E1 		mov	r1, r7	@, pretmp_124
 3132              	@ armwave.c:464:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 464:armwave.c     **** 
 3133              		.loc 1 464 34 view .LVU850
 3134 0f18 00C0A0E1 		mov	ip, r0	@ tmp242,
 3135              	@ armwave.c:466:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3136              		.loc 1 466 5 view .LVU851
 3137 0f1c 0030A0E1 		mov	r3, r0	@, tmp242
 3138              	@ armwave.c:464:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 464:armwave.c     **** 
 3139              		.loc 1 464 32 view .LVU852
 3140 0f20 80C084E5 		str	ip, [r4, #128]	@ tmp242, g_armwave_state.out_pixbuf
 3141              		.loc 1 466 5 is_stmt 1 view .LVU853
 3142 0f24 64009FE5 		ldr	r0, .L108+28	@,
 3143              	@ armwave.c:473: }
 467:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 468:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 469:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 470:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 471:armwave.c     **** 
 472:armwave.c     ****      //malloc_stats();
 473:armwave.c     **** }
 3144              		.loc 1 473 1 is_stmt 0 view .LVU854
 3145 0f28 10D08DE2 		add	sp, sp, #16	@,,
 3146              		.cfi_remember_state
 3147              		.cfi_def_cfa_offset 32
 3148              		@ sp needed	@
 3149 0f2c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3150              		.cfi_restore 14
 3151              		.cfi_restore 10
 3152              		.cfi_restore 9
 3153              		.cfi_restore 8
 3154              		.cfi_restore 7
 3155              		.cfi_restore 6
 3156              		.cfi_restore 5
 3157              		.cfi_restore 4
 3158              		.cfi_def_cfa_offset 0
 3159              	.LVL165:
 3160              	@ armwave.c:466:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 466:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 3161              		.loc 1 466 5 view .LVU855
 3162 0f30 FEFFFFEA 		b	printf		@
 3163              	.LVL166:
 3164              	.L106:
 3165              		.cfi_restore_state
 407:armwave.c     ****         return;
 3166              		.loc 1 407 9 is_stmt 1 view .LVU856
 3167 0f34 58009FE5 		ldr	r0, .L108+32	@,
 3168              	@ armwave.c:473: }
 3169              		.loc 1 473 1 is_stmt 0 view .LVU857
 3170 0f38 10D08DE2 		add	sp, sp, #16	@,,
 3171              		.cfi_remember_state
 3172              		.cfi_def_cfa_offset 32
 3173              		@ sp needed	@
 3174 0f3c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3175              		.cfi_restore 14
 3176              		.cfi_restore 10
 3177              		.cfi_restore 9
 3178              		.cfi_restore 8
 3179              		.cfi_restore 7
 3180              		.cfi_restore 6
 3181              		.cfi_restore 5
 3182              		.cfi_restore 4
 3183              		.cfi_def_cfa_offset 0
 3184              	.LVL167:
 3185              	@ armwave.c:407:         printf("Error: start point more than end point\n");
 407:armwave.c     ****         return;
 3186              		.loc 1 407 9 view .LVU858
 3187 0f40 FEFFFFEA 		b	puts		@
 3188              	.LVL168:
 3189              	.L97:
 3190              		.cfi_restore_state
 457:armwave.c     **** 
 3191              		.loc 1 457 5 is_stmt 1 discriminator 1 view .LVU859
 3192 0f44 4C309FE5 		ldr	r3, .L108+36	@,
 3193 0f48 4C209FE5 		ldr	r2, .L108+40	@,
 3194 0f4c 4C109FE5 		ldr	r1, .L108+44	@,
 3195 0f50 4C009FE5 		ldr	r0, .L108+48	@,
 3196 0f54 FEFFFFEB 		bl	__assert_fail		@
 3197              	.LVL169:
 3198              	.L107:
 446:armwave.c     ****         exit(-1);
 3199              		.loc 1 446 9 view .LVU860
 3200 0f58 48309FE5 		ldr	r3, .L108+52	@ tmp212,
 3201 0f5c 0820A0E1 		mov	r2, r8	@, _22
 3202 0f60 44109FE5 		ldr	r1, .L108+56	@,
 3203 0f64 000093E5 		ldr	r0, [r3]	@, stderr
 3204 0f68 FEFFFFEB 		bl	fprintf		@
 3205              	.LVL170:
 447:armwave.c     ****     }
 3206              		.loc 1 447 9 view .LVU861
 3207 0f6c 0000E0E3 		mvn	r0, #0	@,
 3208 0f70 FEFFFFEB 		bl	exit		@
 3209              	.LVL171:
 3210              	.L109:
 3211              		.align	2
 3212              	.L108:
 3213 0f74 0000803F 		.word	1065353216
 3214 0f78 00007F43 		.word	1132396544
 3215 0f7c 00008047 		.word	1199570944
 3216 0f80 9C000000 		.word	.LC6
 3217 0f84 00000000 		.word	g_armwave_state
 3218 0f88 F0000000 		.word	.LC8
 3219 0f8c CC010000 		.word	.LC12
 3220 0f90 EC010000 		.word	.LC13
 3221 0f94 C8000000 		.word	.LC7
 3222 0f98 00000000 		.word	.LANCHOR0
 3223 0f9c C9010000 		.word	457
 3224 0fa0 94010000 		.word	.LC10
 3225 0fa4 A0010000 		.word	.LC11
 3226 0fa8 00000000 		.word	stderr
 3227 0fac 50010000 		.word	.LC9
 3228              		.cfi_endproc
 3229              	.LFE67:
 3231              		.align	2
 3232              		.global	armwave_set_wave_pointer
 3233              		.syntax unified
 3234              		.arm
 3235              		.fpu vfp
 3237              	armwave_set_wave_pointer:
 3238              	.LVL172:
 3239              	.LFB68:
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 477:armwave.c     ****  * in the future.
 478:armwave.c     ****  */
 479:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 480:armwave.c     **** {
 3240              		.loc 1 480 1 view -0
 3241              		.cfi_startproc
 3242              		@ args = 0, pretend = 0, frame = 0
 3243              		@ frame_needed = 0, uses_anonymous_args = 0
 481:armwave.c     ****     assert(wave_buffer != NULL);
 3244              		.loc 1 481 5 view .LVU863
 3245 0fb0 000050E3 		cmp	r0, #0	@ wave_buffer
 3246              		.loc 1 481 5 is_stmt 0 view .LVU864
 3247 0fb4 0200000A 		beq	.L115		@,
 482:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 3248              		.loc 1 482 5 is_stmt 1 view .LVU865
 3249              	@ armwave.c:482:     g_armwave_state.wave_buffer = wave_buffer;
 3250              		.loc 1 482 33 is_stmt 0 view .LVU866
 3251 0fb8 1C309FE5 		ldr	r3, .L116	@ tmp116,
 3252 0fbc 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 3253 0fc0 1EFF2FE1 		bx	lr	@
 3254              	.L115:
 481:armwave.c     ****     assert(wave_buffer != NULL);
 3255              		.loc 1 481 5 is_stmt 1 discriminator 1 view .LVU867
 3256              	@ armwave.c:480: {
 480:armwave.c     ****     assert(wave_buffer != NULL);
 3257              		.loc 1 480 1 is_stmt 0 discriminator 1 view .LVU868
 3258 0fc4 10402DE9 		push	{r4, lr}	@
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 4, -8
 3261              		.cfi_offset 14, -4
 3262              	@ armwave.c:481:     assert(wave_buffer != NULL);
 481:armwave.c     ****     assert(wave_buffer != NULL);
 3263              		.loc 1 481 5 discriminator 1 view .LVU869
 3264 0fc8 10309FE5 		ldr	r3, .L116+4	@,
 3265 0fcc 10209FE5 		ldr	r2, .L116+8	@,
 3266 0fd0 10109FE5 		ldr	r1, .L116+12	@,
 3267 0fd4 10009FE5 		ldr	r0, .L116+16	@,
 3268              	.LVL173:
 481:armwave.c     ****     assert(wave_buffer != NULL);
 3269              		.loc 1 481 5 discriminator 1 view .LVU870
 3270 0fd8 FEFFFFEB 		bl	__assert_fail		@
 3271              	.LVL174:
 3272              	.L117:
 3273              		.align	2
 3274              	.L116:
 3275 0fdc 00000000 		.word	g_armwave_state
 3276 0fe0 18000000 		.word	.LANCHOR0+24
 3277 0fe4 E1010000 		.word	481
 3278 0fe8 94010000 		.word	.LC10
 3279 0fec 10020000 		.word	.LC14
 3280              		.cfi_endproc
 3281              	.LFE68:
 3283              		.align	2
 3284              		.global	armwave_set_wave_pointer_as_testbuf
 3285              		.syntax unified
 3286              		.arm
 3287              		.fpu vfp
 3289              	armwave_set_wave_pointer_as_testbuf:
 3290              	.LVL175:
 3291              	.LFB69:
 483:armwave.c     **** }
 484:armwave.c     **** 
 485:armwave.c     **** /*
 486:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 487:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 488:armwave.c     ****  */
 489:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 490:armwave.c     **** {
 3292              		.loc 1 490 1 is_stmt 1 view -0
 3293              		.cfi_startproc
 3294              		@ args = 0, pretend = 0, frame = 0
 3295              		@ frame_needed = 0, uses_anonymous_args = 0
 3296              		@ link register save eliminated.
 491:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3297              		.loc 1 491 5 view .LVU872
 3298              	@ armwave.c:491:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3299              		.loc 1 491 29 is_stmt 0 view .LVU873
 3300 0ff0 24309FE5 		ldr	r3, .L121	@ tmp117,
 3301              	@ armwave.c:491:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3302              		.loc 1 491 7 view .LVU874
 3303 0ff4 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 3304 0ff8 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 3305 0ffc 0400003A 		bcc	.L120		@,
 492:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 493:armwave.c     ****         return;
 494:armwave.c     ****     }
 495:armwave.c     **** 
 496:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 3306              		.loc 1 496 5 is_stmt 1 view .LVU875
 3307              	@ armwave.c:496:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3308              		.loc 1 496 111 is_stmt 0 view .LVU876
 3309 1000 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 3310              	@ armwave.c:496:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3311              		.loc 1 496 68 view .LVU877
 3312 1004 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3313 1008 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 3314              	.LVL176:
 3315              	@ armwave.c:496:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3316              		.loc 1 496 33 view .LVU878
 3317 100c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 3318              	@ armwave.c:497: }
 497:armwave.c     **** }
 3319              		.loc 1 497 1 view .LVU879
 3320 1010 1EFF2FE1 		bx	lr	@
 3321              	.LVL177:
 3322              	.L120:
 492:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3323              		.loc 1 492 9 is_stmt 1 view .LVU880
 3324 1014 04009FE5 		ldr	r0, .L121+4	@,
 3325              	.LVL178:
 492:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3326              		.loc 1 492 9 is_stmt 0 view .LVU881
 3327 1018 FEFFFFEA 		b	puts		@
 3328              	.LVL179:
 3329              	.L122:
 3330              		.align	2
 3331              	.L121:
 3332 101c 00000000 		.word	g_armwave_state
 3333 1020 24020000 		.word	.LC15
 3334              		.cfi_endproc
 3335              	.LFE69:
 3337              		.align	2
 3338              		.global	armwave_set_wave_pointer_u32
 3339              		.syntax unified
 3340              		.arm
 3341              		.fpu vfp
 3343              	armwave_set_wave_pointer_u32:
 3344              	.LVL180:
 3345              	.LFB70:
 498:armwave.c     **** 
 499:armwave.c     **** /*
 500:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 501:armwave.c     ****  * disjointed buffers in the future.
 502:armwave.c     ****  */
 503:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 504:armwave.c     **** {
 3346              		.loc 1 504 1 is_stmt 1 view -0
 3347              		.cfi_startproc
 3348              		@ args = 0, pretend = 0, frame = 0
 3349              		@ frame_needed = 0, uses_anonymous_args = 0
 505:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3350              		.loc 1 505 5 view .LVU883
 3351 1024 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 3352              		.loc 1 505 5 is_stmt 0 view .LVU884
 3353 1028 0200000A 		beq	.L128		@,
 506:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3354              		.loc 1 506 5 is_stmt 1 view .LVU885
 3355              	@ armwave.c:506:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3356              		.loc 1 506 33 is_stmt 0 view .LVU886
 3357 102c 1C309FE5 		ldr	r3, .L129	@ tmp117,
 3358 1030 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 3359 1034 1EFF2FE1 		bx	lr	@
 3360              	.L128:
 505:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3361              		.loc 1 505 5 is_stmt 1 discriminator 1 view .LVU887
 3362              	@ armwave.c:504: {
 504:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3363              		.loc 1 504 1 is_stmt 0 discriminator 1 view .LVU888
 3364 1038 10402DE9 		push	{r4, lr}	@
 3365              		.cfi_def_cfa_offset 8
 3366              		.cfi_offset 4, -8
 3367              		.cfi_offset 14, -4
 3368              	@ armwave.c:505:     assert(wave_buffer_ptr != 0);
 505:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3369              		.loc 1 505 5 discriminator 1 view .LVU889
 3370 103c 10309FE5 		ldr	r3, .L129+4	@,
 3371 1040 10209FE5 		ldr	r2, .L129+8	@,
 3372 1044 10109FE5 		ldr	r1, .L129+12	@,
 3373 1048 10009FE5 		ldr	r0, .L129+16	@,
 3374              	.LVL181:
 505:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3375              		.loc 1 505 5 discriminator 1 view .LVU890
 3376 104c FEFFFFEB 		bl	__assert_fail		@
 3377              	.LVL182:
 3378              	.L130:
 3379              		.align	2
 3380              	.L129:
 3381 1050 00000000 		.word	g_armwave_state
 3382 1054 34000000 		.word	.LANCHOR0+52
 3383 1058 F9010000 		.word	505
 3384 105c 94010000 		.word	.LC10
 3385 1060 60020000 		.word	.LC16
 3386              		.cfi_endproc
 3387              	.LFE70:
 3389              		.align	2
 3390              		.global	armwave_clear_buffer
 3391              		.syntax unified
 3392              		.arm
 3393              		.fpu vfp
 3395              	armwave_clear_buffer:
 3396              	.LVL183:
 3397              	.LFB71:
 507:armwave.c     **** }
 508:armwave.c     **** 
 509:armwave.c     **** /*
 510:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 511:armwave.c     ****  */
 512:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 513:armwave.c     **** {
 3398              		.loc 1 513 1 is_stmt 1 view -0
 3399              		.cfi_startproc
 3400              		@ args = 0, pretend = 0, frame = 0
 3401              		@ frame_needed = 0, uses_anonymous_args = 0
 3402              		@ link register save eliminated.
 514:armwave.c     ****     // Flags ignored, only one buffer cleared
 515:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3403              		.loc 1 515 5 view .LVU892
 3404              	@ armwave.c:515:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3405              		.loc 1 515 58 is_stmt 0 view .LVU893
 3406 1064 0C309FE5 		ldr	r3, .L132	@ tmp114,
 3407              	@ armwave.c:515:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3408              		.loc 1 515 5 view .LVU894
 3409 1068 0010A0E3 		mov	r1, #0	@,
 3410 106c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 3411 1070 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 3412              	.LVL184:
 3413              		.loc 1 515 5 view .LVU895
 3414 1074 FEFFFFEA 		b	memset		@
 3415              	.LVL185:
 3416              	.L133:
 3417              		.align	2
 3418              	.L132:
 3419 1078 00000000 		.word	g_armwave_state
 3420              		.cfi_endproc
 3421              	.LFE71:
 3423              		.align	2
 3424              		.global	armwave_set_channel_colour
 3425              		.syntax unified
 3426              		.arm
 3427              		.fpu vfp
 3429              	armwave_set_channel_colour:
 3430              	.LVL186:
 3431              	.LFB72:
 516:armwave.c     **** }
 517:armwave.c     **** 
 518:armwave.c     **** /*
 519:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.  
 520:armwave.c     ****  * `I` sets intensity multiplier for all colours.
 521:armwave.c     ****  */
 522:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b, float i)
 523:armwave.c     **** {
 3432              		.loc 1 523 1 is_stmt 1 view -0
 3433              		.cfi_startproc
 3434              		@ args = 0, pretend = 0, frame = 16
 3435              		@ frame_needed = 0, uses_anonymous_args = 0
 3436              		@ link register save eliminated.
 524:armwave.c     ****     // Only 1ch supported for now
 525:armwave.c     ****     switch(ch) {
 3437              		.loc 1 525 5 view .LVU897
 3438              	@ armwave.c:523: {
 523:armwave.c     ****     // Only 1ch supported for now
 3439              		.loc 1 523 1 is_stmt 0 view .LVU898
 3440 107c 10D04DE2 		sub	sp, sp, #16	@,,
 3441              		.cfi_def_cfa_offset 16
 3442              	@ armwave.c:525:     switch(ch) {
 3443              		.loc 1 525 5 view .LVU899
 3444 1080 010050E3 		cmp	r0, #1	@ ch,
 3445              	@ armwave.c:523: {
 523:armwave.c     ****     // Only 1ch supported for now
 3446              		.loc 1 523 1 view .LVU900
 3447 1084 0E008DE9 		stmib	sp, {r1, r2, r3}	@,,,
 3448              	@ armwave.c:525:     switch(ch) {
 3449              		.loc 1 525 5 view .LVU901
 3450 1088 1200001A 		bne	.L134		@,
 526:armwave.c     ****         case 1:
 527:armwave.c     ****             g_armwave_state.ch1_color.r = r * i;
 3451              		.loc 1 527 13 is_stmt 1 view .LVU902
 3452              	@ armwave.c:527:             g_armwave_state.ch1_color.r = r * i;
 3453              		.loc 1 527 45 is_stmt 0 view .LVU903
 3454 108c 901A07EE 		vmov	s15, r1	@ int	@ r,
 3455 1090 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp125, r
 3456              	@ armwave.c:528:             g_armwave_state.ch1_color.g = g * i;
 528:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3457              		.loc 1 528 45 view .LVU904
 3458 1094 902A07EE 		vmov	s15, r2	@ int	@ g,
 3459 1098 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp129, g
 3460              	@ armwave.c:529:             g_armwave_state.ch1_color.b = b * i;
 529:armwave.c     ****             g_armwave_state.ch1_color.b = b * i;
 3461              		.loc 1 529 45 view .LVU905
 3462 109c 903A07EE 		vmov	s15, r3	@ int	@ b,
 3463              	@ armwave.c:527:             g_armwave_state.ch1_color.r = r * i;
 527:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3464              		.loc 1 527 41 view .LVU906
 3465 10a0 38309FE5 		ldr	r3, .L137	@ tmp124,
 3466              	.LVL187:
 3467              	@ armwave.c:527:             g_armwave_state.ch1_color.r = r * i;
 527:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3468              		.loc 1 527 45 view .LVU907
 3469 10a4 806A66EE 		vmul.f32	s13, s13, s0	@ tmp126, tmp125, i
 3470              	@ armwave.c:529:             g_armwave_state.ch1_color.b = b * i;
 3471              		.loc 1 529 45 view .LVU908
 3472 10a8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp133, b
 3473              	.LVL188:
 3474              	@ armwave.c:528:             g_armwave_state.ch1_color.g = g * i;
 528:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3475              		.loc 1 528 45 view .LVU909
 3476 10ac 007A27EE 		vmul.f32	s14, s14, s0	@ tmp130, tmp129, i
 3477              	@ armwave.c:527:             g_armwave_state.ch1_color.r = r * i;
 527:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3478              		.loc 1 527 41 view .LVU910
 3479 10b0 E66AFDEE 		vcvt.s32.f32	s13, s13	@ tmp127, tmp126
 3480              	@ armwave.c:529:             g_armwave_state.ch1_color.b = b * i;
 3481              		.loc 1 529 45 view .LVU911
 3482 10b4 807A67EE 		vmul.f32	s15, s15, s0	@ tmp134, tmp133, i
 3483              	@ armwave.c:528:             g_armwave_state.ch1_color.g = g * i;
 528:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3484              		.loc 1 528 41 view .LVU912
 3485 10b8 C77ABDEE 		vcvt.s32.f32	s14, s14	@ tmp131, tmp130
 3486              	@ armwave.c:527:             g_armwave_state.ch1_color.r = r * i;
 527:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3487              		.loc 1 527 41 view .LVU913
 3488 10bc 902A16EE 		vmov	r2, s13	@ int	@ tmp127, tmp127
 3489              	.LVL189:
 3490              	@ armwave.c:529:             g_armwave_state.ch1_color.b = b * i;
 3491              		.loc 1 529 41 view .LVU914
 3492 10c0 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp135, tmp134
 3493              	@ armwave.c:527:             g_armwave_state.ch1_color.r = r * i;
 527:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3494              		.loc 1 527 41 view .LVU915
 3495 10c4 B428C3E1 		strh	r2, [r3, #132]	@ movhi	@ tmp127, g_armwave_state.ch1_color.r
 528:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3496              		.loc 1 528 13 is_stmt 1 view .LVU916
 3497              	@ armwave.c:528:             g_armwave_state.ch1_color.g = g * i;
 528:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3498              		.loc 1 528 41 is_stmt 0 view .LVU917
 3499 10c8 102A17EE 		vmov	r2, s14	@ int	@ tmp131, tmp131
 3500 10cc B628C3E1 		strh	r2, [r3, #134]	@ movhi	@ tmp131, g_armwave_state.ch1_color.g
 3501              		.loc 1 529 13 is_stmt 1 view .LVU918
 3502              	@ armwave.c:529:             g_armwave_state.ch1_color.b = b * i;
 3503              		.loc 1 529 41 is_stmt 0 view .LVU919
 3504 10d0 902A17EE 		vmov	r2, s15	@ int	@ tmp135, tmp135
 3505 10d4 B828C3E1 		strh	r2, [r3, #136]	@ movhi	@ tmp135, g_armwave_state.ch1_color.b
 530:armwave.c     ****             break;
 3506              		.loc 1 530 13 is_stmt 1 view .LVU920
 3507              	.L134:
 3508              	@ armwave.c:532: }
 531:armwave.c     ****     }
 532:armwave.c     **** }
 3509              		.loc 1 532 1 is_stmt 0 view .LVU921
 3510 10d8 10D08DE2 		add	sp, sp, #16	@,,
 3511              		.cfi_def_cfa_offset 0
 3512              		@ sp needed	@
 3513 10dc 1EFF2FE1 		bx	lr	@
 3514              	.L138:
 3515              		.align	2
 3516              	.L137:
 3517 10e0 00000000 		.word	g_armwave_state
 3518              		.cfi_endproc
 3519              	.LFE72:
 3521              		.align	2
 3522              		.global	armwave_set_graticule_colour
 3523              		.syntax unified
 3524              		.arm
 3525              		.fpu vfp
 3527              	armwave_set_graticule_colour:
 3528              	.LVL190:
 3529              	.LFB73:
 533:armwave.c     **** 
 534:armwave.c     **** /*
 535:armwave.c     ****  * Set the graticule colour.
 536:armwave.c     ****  */
 537:armwave.c     **** void armwave_set_graticule_colour(int r, int g, int b)
 538:armwave.c     **** {
 3530              		.loc 1 538 1 is_stmt 1 view -0
 3531              		.cfi_startproc
 3532              		@ args = 0, pretend = 0, frame = 0
 3533              		@ frame_needed = 0, uses_anonymous_args = 0
 539:armwave.c     ****     g_grat_colour.red = r * 255;
 3534              		.loc 1 539 5 view .LVU923
 3535              	@ armwave.c:539:     g_grat_colour.red = r * 255;
 3536              		.loc 1 539 23 is_stmt 0 view .LVU924
 3537 10e4 3C309FE5 		ldr	r3, .L141	@ tmp121,
 3538              	@ armwave.c:538: {
 538:armwave.c     ****     g_grat_colour.red = r * 255;
 3539              		.loc 1 538 1 view .LVU925
 3540 10e8 70402DE9 		push	{r4, r5, r6, lr}	@
 3541              		.cfi_def_cfa_offset 16
 3542              		.cfi_offset 4, -16
 3543              		.cfi_offset 5, -12
 3544              		.cfi_offset 6, -8
 3545              		.cfi_offset 14, -4
 3546              	@ armwave.c:539:     g_grat_colour.red = r * 255;
 3547              		.loc 1 539 23 view .LVU926
 3548 10ec 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 3549              	@ armwave.c:543:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 540:armwave.c     ****     g_grat_colour.green = g * 255;
 541:armwave.c     ****     g_grat_colour.blue = b * 255;
 542:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 543:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3550              		.loc 1 543 5 view .LVU927
 3551 10f0 34609FE5 		ldr	r6, .L141+4	@ tmp143,
 3552 10f4 34509FE5 		ldr	r5, .L141+8	@ tmp145,
 3553              	@ armwave.c:540:     g_grat_colour.green = g * 255;
 540:armwave.c     ****     g_grat_colour.green = g * 255;
 3554              		.loc 1 540 25 view .LVU928
 3555 10f8 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 3556              	@ armwave.c:541:     g_grat_colour.blue = b * 255;
 541:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3557              		.loc 1 541 24 view .LVU929
 3558 10fc 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 3559              	@ armwave.c:539:     g_grat_colour.red = r * 255;
 539:armwave.c     ****     g_grat_colour.green = g * 255;
 3560              		.loc 1 539 23 view .LVU930
 3561 1100 B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_colour.red
 540:armwave.c     ****     g_grat_colour.green = g * 255;
 3562              		.loc 1 540 5 is_stmt 1 view .LVU931
 3563              	@ armwave.c:542:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 542:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3564              		.loc 1 542 25 is_stmt 0 view .LVU932
 3565 1104 07C0A0E3 		mov	ip, #7	@ tmp140,
 3566              	@ armwave.c:543:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3567              		.loc 1 543 5 view .LVU933
 3568 1108 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 3569              	.LVL191:
 3570              		.loc 1 543 5 view .LVU934
 3571 110c 000095E5 		ldr	r0, [r5]	@, g_dpy
 3572              	.LVL192:
 3573              	@ armwave.c:540:     g_grat_colour.green = g * 255;
 540:armwave.c     ****     g_grat_colour.blue = b * 255;
 3574              		.loc 1 540 25 view .LVU935
 3575 1110 B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_colour.green
 541:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3576              		.loc 1 541 5 is_stmt 1 view .LVU936
 3577              	@ armwave.c:541:     g_grat_colour.blue = b * 255;
 541:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3578              		.loc 1 541 24 is_stmt 0 view .LVU937
 3579 1114 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_colour.blue
 542:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3580              		.loc 1 542 5 is_stmt 1 view .LVU938
 3581              	@ armwave.c:542:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 542:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3582              		.loc 1 542 25 is_stmt 0 view .LVU939
 3583 1118 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_colour.flags
 3584              		.loc 1 543 5 is_stmt 1 view .LVU940
 3585 111c 0320A0E1 		mov	r2, r3	@, tmp121
 3586              	.LVL193:
 3587              	@ armwave.c:544: }
 544:armwave.c     **** }
 3588              		.loc 1 544 1 is_stmt 0 view .LVU941
 3589 1120 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3590              		.cfi_restore 14
 3591              		.cfi_restore 6
 3592              		.cfi_restore 5
 3593              		.cfi_restore 4
 3594              		.cfi_def_cfa_offset 0
 3595              	@ armwave.c:543:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 543:armwave.c     **** }
 3596              		.loc 1 543 5 view .LVU942
 3597 1124 FEFFFFEA 		b	XAllocColor		@
 3598              	.LVL194:
 3599              	.L142:
 3600              		.align	2
 3601              	.L141:
 3602 1128 00000000 		.word	g_grat_colour
 3603 112c 00000000 		.word	g_xswa
 3604 1130 00000000 		.word	g_dpy
 3605              		.cfi_endproc
 3606              	.LFE73:
 3608              		.align	2
 3609              		.global	armwave_set_graticule_subcolour
 3610              		.syntax unified
 3611              		.arm
 3612              		.fpu vfp
 3614              	armwave_set_graticule_subcolour:
 3615              	.LVL195:
 3616              	.LFB74:
 545:armwave.c     **** 
 546:armwave.c     **** /*
 547:armwave.c     ****  * Set the graticule sub colour.
 548:armwave.c     ****  */
 549:armwave.c     **** void armwave_set_graticule_subcolour(int r, int g, int b)
 550:armwave.c     **** {
 3617              		.loc 1 550 1 is_stmt 1 view -0
 3618              		.cfi_startproc
 3619              		@ args = 0, pretend = 0, frame = 0
 3620              		@ frame_needed = 0, uses_anonymous_args = 0
 551:armwave.c     ****     g_grat_subcolour.red = r * 255;
 3621              		.loc 1 551 5 view .LVU944
 3622              	@ armwave.c:551:     g_grat_subcolour.red = r * 255;
 3623              		.loc 1 551 26 is_stmt 0 view .LVU945
 3624 1134 3C309FE5 		ldr	r3, .L145	@ tmp121,
 3625              	@ armwave.c:550: {
 550:armwave.c     ****     g_grat_subcolour.red = r * 255;
 3626              		.loc 1 550 1 view .LVU946
 3627 1138 70402DE9 		push	{r4, r5, r6, lr}	@
 3628              		.cfi_def_cfa_offset 16
 3629              		.cfi_offset 4, -16
 3630              		.cfi_offset 5, -12
 3631              		.cfi_offset 6, -8
 3632              		.cfi_offset 14, -4
 3633              	@ armwave.c:551:     g_grat_subcolour.red = r * 255;
 3634              		.loc 1 551 26 view .LVU947
 3635 113c 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 3636              	@ armwave.c:555:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 552:armwave.c     ****     g_grat_subcolour.green = g * 255;
 553:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 554:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 555:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3637              		.loc 1 555 5 view .LVU948
 3638 1140 34609FE5 		ldr	r6, .L145+4	@ tmp143,
 3639 1144 34509FE5 		ldr	r5, .L145+8	@ tmp145,
 3640              	@ armwave.c:552:     g_grat_subcolour.green = g * 255;
 552:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3641              		.loc 1 552 28 view .LVU949
 3642 1148 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 3643              	@ armwave.c:553:     g_grat_subcolour.blue = b * 255;
 553:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3644              		.loc 1 553 27 view .LVU950
 3645 114c 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 3646              	@ armwave.c:551:     g_grat_subcolour.red = r * 255;
 551:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3647              		.loc 1 551 26 view .LVU951
 3648 1150 B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_subcolour.red
 552:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3649              		.loc 1 552 5 is_stmt 1 view .LVU952
 3650              	@ armwave.c:554:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 554:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3651              		.loc 1 554 28 is_stmt 0 view .LVU953
 3652 1154 07C0A0E3 		mov	ip, #7	@ tmp140,
 3653              	@ armwave.c:555:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3654              		.loc 1 555 5 view .LVU954
 3655 1158 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 3656              	.LVL196:
 3657              		.loc 1 555 5 view .LVU955
 3658 115c 000095E5 		ldr	r0, [r5]	@, g_dpy
 3659              	.LVL197:
 3660              	@ armwave.c:552:     g_grat_subcolour.green = g * 255;
 552:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 3661              		.loc 1 552 28 view .LVU956
 3662 1160 B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_subcolour.green
 553:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3663              		.loc 1 553 5 is_stmt 1 view .LVU957
 3664              	@ armwave.c:553:     g_grat_subcolour.blue = b * 255;
 553:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3665              		.loc 1 553 27 is_stmt 0 view .LVU958
 3666 1164 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_subcolour.blue
 554:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3667              		.loc 1 554 5 is_stmt 1 view .LVU959
 3668              	@ armwave.c:554:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 554:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3669              		.loc 1 554 28 is_stmt 0 view .LVU960
 3670 1168 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_subcolour.flags
 3671              		.loc 1 555 5 is_stmt 1 view .LVU961
 3672 116c 0320A0E1 		mov	r2, r3	@, tmp121
 3673              	.LVL198:
 3674              	@ armwave.c:556: }
 556:armwave.c     **** }
 3675              		.loc 1 556 1 is_stmt 0 view .LVU962
 3676 1170 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3677              		.cfi_restore 14
 3678              		.cfi_restore 6
 3679              		.cfi_restore 5
 3680              		.cfi_restore 4
 3681              		.cfi_def_cfa_offset 0
 3682              	@ armwave.c:555:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 555:armwave.c     **** }
 3683              		.loc 1 555 5 view .LVU963
 3684 1174 FEFFFFEA 		b	XAllocColor		@
 3685              	.LVL199:
 3686              	.L146:
 3687              		.align	2
 3688              	.L145:
 3689 1178 00000000 		.word	g_grat_subcolour
 3690 117c 00000000 		.word	g_xswa
 3691 1180 00000000 		.word	g_dpy
 3692              		.cfi_endproc
 3693              	.LFE74:
 3695              		.align	2
 3696              		.global	armwave_set_graticule_dims
 3697              		.syntax unified
 3698              		.arm
 3699              		.fpu vfp
 3701              	armwave_set_graticule_dims:
 3702              	.LVL200:
 3703              	.LFB75:
 557:armwave.c     **** 
 558:armwave.c     **** /*
 559:armwave.c     ****  * Set the graticule dimensions.
 560:armwave.c     ****  */
 561:armwave.c     **** void armwave_set_graticule_dims(int marg, int n_hdiv, int n_vdiv, int n_subhdiv, int n_subvdiv, flo
 562:armwave.c     **** {
 3704              		.loc 1 562 1 is_stmt 1 view -0
 3705              		.cfi_startproc
 3706              		@ args = 4, pretend = 0, frame = 0
 3707              		@ frame_needed = 0, uses_anonymous_args = 0
 563:armwave.c     ****     if(marg > 0) {
 3708              		.loc 1 563 5 view .LVU965
 3709              	@ armwave.c:563:     if(marg > 0) {
 3710              		.loc 1 563 7 is_stmt 0 view .LVU966
 3711 1184 000050E3 		cmp	r0, #0	@ marg
 3712              	@ armwave.c:562: {
 562:armwave.c     ****     if(marg > 0) {
 3713              		.loc 1 562 1 view .LVU967
 3714 1188 04E02DE5 		str	lr, [sp, #-4]!	@,
 3715              		.cfi_def_cfa_offset 4
 3716              		.cfi_offset 14, -4
 3717              	@ armwave.c:564:         g_armwave_state.frame_margin = marg;
 564:armwave.c     ****         g_armwave_state.frame_margin = marg;
 3718              		.loc 1 564 38 view .LVU968
 3719 118c 58E09FC5 		ldrgt	lr, .L157	@ tmp120,
 3720              	@ armwave.c:562: {
 562:armwave.c     ****     if(marg > 0) {
 3721              		.loc 1 562 1 view .LVU969
 3722 1190 04C09DE5 		ldr	ip, [sp, #4]	@ n_subvdiv, n_subvdiv
 3723              		.loc 1 564 9 is_stmt 1 view .LVU970
 3724              	@ armwave.c:564:         g_armwave_state.frame_margin = marg;
 3725              		.loc 1 564 38 is_stmt 0 view .LVU971
 3726 1194 58008EC5 		strgt	r0, [lr, #88]	@ marg, g_armwave_state.frame_margin
 565:armwave.c     ****     }
 566:armwave.c     ****     
 567:armwave.c     ****     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3727              		.loc 1 567 5 is_stmt 1 view .LVU972
 3728              	@ armwave.c:567:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3729              		.loc 1 567 7 is_stmt 0 view .LVU973
 3730 1198 000051E3 		cmp	r1, #0	@ n_hdiv,
 3731 119c 020000DA 		ble	.L149		@,
 3732              	@ armwave.c:567:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3733              		.loc 1 567 19 discriminator 1 view .LVU974
 3734 11a0 010011E3 		tst	r1, #1	@ n_hdiv,
 568:armwave.c     ****         g_armwave_state.n_hdiv = n_hdiv;
 3735              		.loc 1 568 9 is_stmt 1 discriminator 1 view .LVU975
 3736              	@ armwave.c:568:         g_armwave_state.n_hdiv = n_hdiv;
 3737              		.loc 1 568 32 is_stmt 0 discriminator 1 view .LVU976
 3738 11a4 40009F05 		ldreq	r0, .L157	@ tmp122,
 3739              	.LVL201:
 3740              		.loc 1 568 32 discriminator 1 view .LVU977
 3741 11a8 5C108005 		streq	r1, [r0, #92]	@ n_hdiv, g_armwave_state.n_hdiv
 3742              	.L149:
 569:armwave.c     ****     }
 570:armwave.c     ****     
 571:armwave.c     ****     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3743              		.loc 1 571 5 is_stmt 1 view .LVU978
 3744              	@ armwave.c:571:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3745              		.loc 1 571 7 is_stmt 0 view .LVU979
 3746 11ac 000052E3 		cmp	r2, #0	@ n_vdiv,
 3747 11b0 020000DA 		ble	.L150		@,
 3748              	@ armwave.c:571:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3749              		.loc 1 571 19 discriminator 1 view .LVU980
 3750 11b4 010012E3 		tst	r2, #1	@ n_vdiv,
 572:armwave.c     ****         g_armwave_state.n_vdiv = n_vdiv;
 3751              		.loc 1 572 9 is_stmt 1 discriminator 1 view .LVU981
 3752              	@ armwave.c:572:         g_armwave_state.n_vdiv = n_vdiv;
 3753              		.loc 1 572 32 is_stmt 0 discriminator 1 view .LVU982
 3754 11b8 2C109F05 		ldreq	r1, .L157	@ tmp124,
 3755              	.LVL202:
 3756              		.loc 1 572 32 discriminator 1 view .LVU983
 3757 11bc 60208105 		streq	r2, [r1, #96]	@ n_vdiv, g_armwave_state.n_vdiv
 3758              	.L150:
 573:armwave.c     ****     }
 574:armwave.c     ****     
 575:armwave.c     ****     if(n_subhdiv > 0) {
 3759              		.loc 1 575 5 is_stmt 1 view .LVU984
 3760              	@ armwave.c:575:     if(n_subhdiv > 0) {
 3761              		.loc 1 575 7 is_stmt 0 view .LVU985
 3762 11c0 000053E3 		cmp	r3, #0	@ n_subhdiv,
 576:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3763              		.loc 1 576 9 is_stmt 1 view .LVU986
 3764              	@ armwave.c:583:     if(subdiv_frac > 0) {
 577:armwave.c     ****     }
 578:armwave.c     ****     
 579:armwave.c     ****     if(n_subvdiv > 0) {
 580:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 581:armwave.c     ****     }
 582:armwave.c     ****     
 583:armwave.c     ****     if(subdiv_frac > 0) {
 3765              		.loc 1 583 7 is_stmt 0 view .LVU987
 3766 11c4 C00AB5EE 		vcmpe.f32	s0, #0	@ subdiv_frac
 3767              	@ armwave.c:576:         g_armwave_state.n_subhdiv = n_subhdiv;
 576:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3768              		.loc 1 576 35 view .LVU988
 3769 11c8 1C209FC5 		ldrgt	r2, .L157	@ tmp125,
 3770              	.LVL203:
 576:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3771              		.loc 1 576 35 view .LVU989
 3772 11cc 643082C5 		strgt	r3, [r2, #100]	@ n_subhdiv, g_armwave_state.n_subhdiv
 579:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 3773              		.loc 1 579 5 is_stmt 1 view .LVU990
 3774              	@ armwave.c:579:     if(n_subvdiv > 0) {
 579:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 3775              		.loc 1 579 7 is_stmt 0 view .LVU991
 3776 11d0 00005CE3 		cmp	ip, #0	@ n_subvdiv,
 580:armwave.c     ****     }
 3777              		.loc 1 580 9 is_stmt 1 view .LVU992
 3778              	@ armwave.c:580:         g_armwave_state.n_subvdiv = n_subvdiv;
 580:armwave.c     ****     }
 3779              		.loc 1 580 35 is_stmt 0 view .LVU993
 3780 11d4 10309FC5 		ldrgt	r3, .L157	@ tmp126,
 3781              	.LVL204:
 580:armwave.c     ****     }
 3782              		.loc 1 580 35 view .LVU994
 3783 11d8 68C083C5 		strgt	ip, [r3, #104]	@ n_subvdiv, g_armwave_state.n_subvdiv
 3784              		.loc 1 583 5 is_stmt 1 view .LVU995
 3785              	@ armwave.c:583:     if(subdiv_frac > 0) {
 3786              		.loc 1 583 7 is_stmt 0 view .LVU996
 3787 11dc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 584:armwave.c     ****         g_armwave_state.subdiv_frac = subdiv_frac;
 3788              		.loc 1 584 9 is_stmt 1 view .LVU997
 3789              	@ armwave.c:584:         g_armwave_state.subdiv_frac = subdiv_frac;
 3790              		.loc 1 584 37 is_stmt 0 view .LVU998
 3791 11e0 04309FC5 		ldrgt	r3, .L157	@ tmp128,
 3792 11e4 1B0A83CD 		vstrgt.32	s0, [r3, #108]	@ subdiv_frac, g_armwave_state.subdiv_frac
 3793              	@ armwave.c:586: }
 585:armwave.c     ****     }
 586:armwave.c     **** }
 3794              		.loc 1 586 1 view .LVU999
 3795 11e8 04F09DE4 		ldr	pc, [sp], #4	@
 3796              	.L158:
 3797              		.align	2
 3798              	.L157:
 3799 11ec 00000000 		.word	g_armwave_state
 3800              		.cfi_endproc
 3801              	.LFE75:
 3803              		.align	2
 3804              		.global	armwave_test_buffer_alloc
 3805              		.syntax unified
 3806              		.arm
 3807              		.fpu vfp
 3809              	armwave_test_buffer_alloc:
 3810              	.LVL205:
 3811              	.LFB76:
 587:armwave.c     **** 
 588:armwave.c     **** /*
 589:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 590:armwave.c     ****  */
 591:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 592:armwave.c     **** {
 3812              		.loc 1 592 1 is_stmt 1 view -0
 3813              		.cfi_startproc
 3814              		@ args = 0, pretend = 0, frame = 0
 3815              		@ frame_needed = 0, uses_anonymous_args = 0
 593:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3816              		.loc 1 593 5 view .LVU1001
 3817              	@ armwave.c:592: {
 592:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3818              		.loc 1 592 1 is_stmt 0 view .LVU1002
 3819 11f0 70402DE9 		push	{r4, r5, r6, lr}	@
 3820              		.cfi_def_cfa_offset 16
 3821              		.cfi_offset 4, -16
 3822              		.cfi_offset 5, -12
 3823              		.cfi_offset 6, -8
 3824              		.cfi_offset 14, -4
 3825              	@ armwave.c:592: {
 592:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3826              		.loc 1 592 1 view .LVU1003
 3827 11f4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3828              	@ armwave.c:593:     if(g_armwave_state.test_wave_buffer != NULL) {
 3829              		.loc 1 593 23 view .LVU1004
 3830 11f8 44409FE5 		ldr	r4, .L166	@ tmp128,
 3831 11fc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3832              	.LVL206:
 3833              	@ armwave.c:593:     if(g_armwave_state.test_wave_buffer != NULL) {
 3834              		.loc 1 593 7 view .LVU1005
 3835 1200 000050E3 		cmp	r0, #0	@ _1,
 3836 1204 0000000A 		beq	.L160		@,
 594:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3837              		.loc 1 594 9 is_stmt 1 view .LVU1006
 3838 1208 FEFFFFEB 		bl	free		@
 3839              	.LVL207:
 3840              	.L160:
 595:armwave.c     ****     }
 596:armwave.c     **** 
 597:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 598:armwave.c     **** 
 599:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3841              		.loc 1 599 5 view .LVU1007
 3842              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3843              		.loc 1 599 75 is_stmt 0 view .LVU1008
 3844 120c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3845 1210 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3846              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3847              		.loc 1 599 40 view .LVU1009
 3848 1214 0610A0E1 		mov	r1, r6	@, nsets
 3849              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3850              		.loc 1 599 75 view .LVU1010
 3851 1218 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3852              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3853              		.loc 1 599 40 view .LVU1011
 3854 121c 0500A0E1 		mov	r0, r5	@, _4
 3855 1220 FEFFFFEB 		bl	calloc		@
 3856              	.LVL208:
 3857              	@ armwave.c:601:     if(g_armwave_state.test_wave_buffer == NULL) {
 600:armwave.c     **** 
 601:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3858              		.loc 1 601 7 view .LVU1012
 3859 1224 000050E3 		cmp	r0, #0	@ tmp124,
 3860              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 599:armwave.c     **** 
 3861              		.loc 1 599 38 view .LVU1013
 3862 1228 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3863              		.loc 1 601 5 is_stmt 1 view .LVU1014
 3864              	@ armwave.c:601:     if(g_armwave_state.test_wave_buffer == NULL) {
 3865              		.loc 1 601 7 is_stmt 0 view .LVU1015
 3866 122c 7080BD18 		popne	{r4, r5, r6, pc}	@
 602:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3867              		.loc 1 602 9 is_stmt 1 view .LVU1016
 3868 1230 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3869 1234 0620A0E1 		mov	r2, r6	@, nsets
 3870 1238 08009FE5 		ldr	r0, .L166+4	@,
 3871              	@ armwave.c:606: }
 603:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 604:armwave.c     ****         return;
 605:armwave.c     ****     }
 606:armwave.c     **** }
 3872              		.loc 1 606 1 is_stmt 0 view .LVU1017
 3873 123c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3874              		.cfi_restore 14
 3875              		.cfi_restore 6
 3876              		.cfi_restore 5
 3877              		.cfi_restore 4
 3878              		.cfi_def_cfa_offset 0
 3879              	.LVL209:
 3880              	@ armwave.c:602:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 602:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3881              		.loc 1 602 9 view .LVU1018
 3882 1240 FEFFFFEA 		b	printf		@
 3883              	.LVL210:
 3884              	.L167:
 602:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3885              		.loc 1 602 9 view .LVU1019
 3886              		.align	2
 3887              	.L166:
 3888 1244 00000000 		.word	g_armwave_state
 3889 1248 78020000 		.word	.LC17
 3890              		.cfi_endproc
 3891              	.LFE76:
 3893              		.align	2
 3894              		.global	armwave_test_create_am_sine
 3895              		.syntax unified
 3896              		.arm
 3897              		.fpu vfp
 3899              	armwave_test_create_am_sine:
 3900              	.LVL211:
 3901              	.LFB77:
 607:armwave.c     **** 
 608:armwave.c     **** /*
 609:armwave.c     ****  * Make a test AM waveform for render tests.
 610:armwave.c     ****  *
 611:armwave.c     ****  * @param   mod                     modulation depth
 612:armwave.c     ****  * @param   noise_fraction          typically 1e-6`
 613:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 614:armwave.c     ****  */
 615:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 616:armwave.c     **** {
 3902              		.loc 1 616 1 is_stmt 1 view -0
 3903              		.cfi_startproc
 3904              		@ args = 0, pretend = 0, frame = 8
 3905              		@ frame_needed = 0, uses_anonymous_args = 0
 617:armwave.c     ****     float v, noise, xnoise, mod_val;
 3906              		.loc 1 617 5 view .LVU1021
 618:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3907              		.loc 1 618 5 view .LVU1022
 3908              	@ armwave.c:616: {
 616:armwave.c     ****     float v, noise, xnoise, mod_val;
 3909              		.loc 1 616 1 is_stmt 0 view .LVU1023
 3910 124c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3911              		.cfi_def_cfa_offset 36
 3912              		.cfi_offset 4, -36
 3913              		.cfi_offset 5, -32
 3914              		.cfi_offset 6, -28
 3915              		.cfi_offset 7, -24
 3916              		.cfi_offset 8, -20
 3917              		.cfi_offset 9, -16
 3918              		.cfi_offset 10, -12
 3919              		.cfi_offset 11, -8
 3920              		.cfi_offset 14, -4
 3921              	@ armwave.c:618:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3922              		.loc 1 618 38 view .LVU1024
 3923 1250 847A9FED 		vldr.32	s14, .L199+16	@ tmp185,
 3924              	@ armwave.c:618:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3925              		.loc 1 618 55 view .LVU1025
 3926 1254 24529FE5 		ldr	r5, .L199+40	@ tmp260,
 3927              	@ armwave.c:616: {
 616:armwave.c     ****     float v, noise, xnoise, mod_val;
 3928              		.loc 1 616 1 view .LVU1026
 3929 1258 108B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14, d15}	@
 3930              		.cfi_def_cfa_offset 100
 3931              		.cfi_offset 80, -100
 3932              		.cfi_offset 81, -96
 3933              		.cfi_offset 82, -92
 3934              		.cfi_offset 83, -88
 3935              		.cfi_offset 84, -84
 3936              		.cfi_offset 85, -80
 3937              		.cfi_offset 86, -76
 3938              		.cfi_offset 87, -72
 3939              		.cfi_offset 88, -68
 3940              		.cfi_offset 89, -64
 3941              		.cfi_offset 90, -60
 3942              		.cfi_offset 91, -56
 3943              		.cfi_offset 92, -52
 3944              		.cfi_offset 93, -48
 3945              		.cfi_offset 94, -44
 3946              		.cfi_offset 95, -40
 3947 125c 0090A0E1 		mov	r9, r0	@ sets, sets
 3948              	@ armwave.c:618:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3949              		.loc 1 618 38 view .LVU1027
 3950 1260 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp272, g_armwave_state.waves
 3951              	@ armwave.c:622:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 619:armwave.c     ****     int s, set_offset = 0;
 620:armwave.c     ****     int w, x;
 621:armwave.c     **** 
 622:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3952              		.loc 1 622 70 view .LVU1028
 3953 1264 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3954 1268 382095E5 		ldr	r2, [r5, #56]	@ tmp273, g_armwave_state.waves
 3955              	.LBB118:
 3956              	.LBB119:
 3957              	@ armwave.c:593:     if(g_armwave_state.test_wave_buffer != NULL) {
 593:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3958              		.loc 1 593 23 view .LVU1029
 3959 126c 180095E5 		ldr	r0, [r5, #24]	@ _87, g_armwave_state.test_wave_buffer
 3960              	.LVL212:
 593:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3961              		.loc 1 593 23 view .LVU1030
 3962              	.LBE119:
 3963              	.LBE118:
 3964              	@ armwave.c:618:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 618:armwave.c     ****     int s, set_offset = 0;
 3965              		.loc 1 618 38 view .LVU1031
 3966 1270 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp183, tmp272
 3967              	@ armwave.c:622:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3968              		.loc 1 622 70 view .LVU1032
 3969 1274 920303E0 		mul	r3, r2, r3	@ tmp188, tmp273, g_armwave_state.wave_stride
 3970              	@ armwave.c:616: {
 616:armwave.c     ****     float v, noise, xnoise, mod_val;
 3971              		.loc 1 616 1 view .LVU1033
 3972 1278 60DAF0EE 		vmov.f32	s27, s1	@ noise_fraction, noise_fraction
 3973              	.LBB123:
 3974              	.LBB120:
 3975              	@ armwave.c:593:     if(g_armwave_state.test_wave_buffer != NULL) {
 593:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3976              		.loc 1 593 7 view .LVU1034
 3977 127c 000050E3 		cmp	r0, #0	@ _87,
 3978              	.LBE120:
 3979              	.LBE123:
 3980              	@ armwave.c:616: {
 616:armwave.c     ****     float v, noise, xnoise, mod_val;
 3981              		.loc 1 616 1 view .LVU1035
 3982 1280 0CD04DE2 		sub	sp, sp, #12	@,,
 3983              		.cfi_def_cfa_offset 112
 3984              	@ armwave.c:623:     g_armwave_state.test_wave_buffer_nsets = sets;
 623:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3985              		.loc 1 623 44 view .LVU1036
 3986 1284 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3987              	@ armwave.c:622:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 622:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3988              		.loc 1 622 45 view .LVU1037
 3989 1288 1C3085E5 		str	r3, [r5, #28]	@ tmp188, g_armwave_state.test_wave_buffer_stride
 3990              	@ armwave.c:618:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 618:armwave.c     ****     int s, set_offset = 0;
 3991              		.loc 1 618 38 view .LVU1038
 3992 128c 27EAC7EE 		vdiv.f32	s29, s14, s15	@ tmp184, tmp185, tmp183
 3993              	@ armwave.c:618:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 618:armwave.c     ****     int s, set_offset = 0;
 3994              		.loc 1 618 11 view .LVU1039
 3995 1290 80EA6EEE 		vmul.f32	s29, s29, s0	@ _1_waves_mod, tmp184, mod
 3996              	.LVL213:
 619:armwave.c     ****     int w, x;
 3997              		.loc 1 619 5 is_stmt 1 view .LVU1040
 620:armwave.c     **** 
 3998              		.loc 1 620 5 view .LVU1041
 622:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3999              		.loc 1 622 5 view .LVU1042
 4000              		.loc 1 623 5 view .LVU1043
 624:armwave.c     ****     armwave_test_buffer_alloc(sets);
 4001              		.loc 1 624 5 view .LVU1044
 4002              	.LBB124:
 4003              	.LBI118:
 591:armwave.c     **** {
 4004              		.loc 1 591 6 view .LVU1045
 4005              	.LBB121:
 593:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 4006              		.loc 1 593 5 view .LVU1046
 4007              	@ armwave.c:593:     if(g_armwave_state.test_wave_buffer != NULL) {
 593:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 4008              		.loc 1 593 7 is_stmt 0 view .LVU1047
 4009 1294 0000000A 		beq	.L169		@,
 594:armwave.c     ****     }
 4010              		.loc 1 594 9 is_stmt 1 view .LVU1048
 4011 1298 FEFFFFEB 		bl	free		@
 4012              	.LVL214:
 4013              	.L169:
 599:armwave.c     **** 
 4014              		.loc 1 599 5 view .LVU1049
 4015              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 599:armwave.c     **** 
 4016              		.loc 1 599 75 is_stmt 0 view .LVU1050
 4017 129c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 4018 12a0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 4019              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 599:armwave.c     **** 
 4020              		.loc 1 599 40 view .LVU1051
 4021 12a4 0910A0E1 		mov	r1, r9	@, sets
 4022              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 599:armwave.c     **** 
 4023              		.loc 1 599 75 view .LVU1052
 4024 12a8 940304E0 		mul	r4, r4, r3	@ _90, g_armwave_state.waves_max, g_armwave_state.wave_length
 4025              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 599:armwave.c     **** 
 4026              		.loc 1 599 40 view .LVU1053
 4027 12ac 0400A0E1 		mov	r0, r4	@, _90
 4028 12b0 FEFFFFEB 		bl	calloc		@
 4029              	.LVL215:
 4030              	@ armwave.c:601:     if(g_armwave_state.test_wave_buffer == NULL) {
 601:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4031              		.loc 1 601 7 view .LVU1054
 4032 12b4 000050E3 		cmp	r0, #0	@ tmp196,
 4033              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 599:armwave.c     **** 
 4034              		.loc 1 599 38 view .LVU1055
 4035 12b8 180085E5 		str	r0, [r5, #24]	@ tmp196, g_armwave_state.test_wave_buffer
 601:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4036              		.loc 1 601 5 is_stmt 1 view .LVU1056
 4037              	@ armwave.c:601:     if(g_armwave_state.test_wave_buffer == NULL) {
 601:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4038              		.loc 1 601 7 is_stmt 0 view .LVU1057
 4039 12bc 6000000A 		beq	.L198		@,
 4040              	.L170:
 4041              	.LVL216:
 601:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4042              		.loc 1 601 7 view .LVU1058
 4043              	.LBE121:
 4044              	.LBE124:
 4045              	@ armwave.c:626:     for(s = 0; s < sets; s++) {
 625:armwave.c     **** 
 626:armwave.c     ****     for(s = 0; s < sets; s++) {
 4046              		.loc 1 626 5 discriminator 1 view .LVU1059
 4047 12c0 000059E3 		cmp	r9, #0	@ sets,
 4048 12c4 5B0000DA 		ble	.L168		@,
 4049              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 627:armwave.c     ****         printf("Calculating test set %d\n", s);
 628:armwave.c     ****     
 629:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 630:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 631:armwave.c     ****             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 4050              		.loc 1 631 63 view .LVU1060
 4051 12c8 62BB9FED 		vldr.64	d11, .L199	@ tmp267,
 4052              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 4053              		.loc 1 631 28 view .LVU1061
 4054 12cc 63AB9FED 		vldr.64	d10, .L199+8	@ tmp268,
 4055              	@ armwave.c:648:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 632:armwave.c     **** 
 633:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 634:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 635:armwave.c     ****                 noise *= noise;
 636:armwave.c     ****                 noise *= noise;
 637:armwave.c     ****                 noise *= noise;
 638:armwave.c     **** 
 639:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 640:armwave.c     ****                     noise = -noise;
 641:armwave.c     **** 
 642:armwave.c     ****                 noise += 1.0f;
 643:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 644:armwave.c     **** 
 645:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 646:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 647:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 648:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 4056              		.loc 1 648 104 view .LVU1062
 4057 12d0 65EA9FED 		vldr.32	s28, .L199+20	@ tmp269,
 4058              	@ armwave.c:626:     for(s = 0; s < sets; s++) {
 626:armwave.c     ****         printf("Calculating test set %d\n", s);
 4059              		.loc 1 626 5 view .LVU1063
 4060 12d4 0070A0E3 		mov	r7, #0	@ set_offset,
 4061              	@ armwave.c:627:         printf("Calculating test set %d\n", s);
 627:armwave.c     ****         printf("Calculating test set %d\n", s);
 4062              		.loc 1 627 9 view .LVU1064
 4063 12d8 A4A19FE5 		ldr	r10, .L199+44	@ tmp266,
 4064              	@ armwave.c:626:     for(s = 0; s < sets; s++) {
 626:armwave.c     ****         printf("Calculating test set %d\n", s);
 4065              		.loc 1 626 5 view .LVU1065
 4066 12dc 0780A0E1 		mov	r8, r7	@ s, set_offset
 4067              	.LVL217:
 4068              	.L171:
 627:armwave.c     ****         printf("Calculating test set %d\n", s);
 4069              		.loc 1 627 9 is_stmt 1 view .LVU1066
 4070 12e0 0810A0E1 		mov	r1, r8	@, s
 4071 12e4 0A00A0E1 		mov	r0, r10	@, tmp266
 4072 12e8 FEFFFFEB 		bl	printf		@
 4073              	.LVL218:
 629:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4074              		.loc 1 629 9 view .LVU1067
 4075              	@ armwave.c:629:         for(w = 0; w < g_armwave_state.waves; w++) {
 629:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4076              		.loc 1 629 39 is_stmt 0 view .LVU1068
 4077 12ec 384095E5 		ldr	r4, [r5, #56]	@ prephitmp_135, g_armwave_state.waves
 4078              	@ armwave.c:629:         for(w = 0; w < g_armwave_state.waves; w++) {
 629:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4079              		.loc 1 629 9 view .LVU1069
 4080 12f0 000054E3 		cmp	r4, #0	@ prephitmp_135,
 4081 12f4 4A0000DA 		ble	.L172		@,
 4082              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     **** 
 4083              		.loc 1 631 54 view .LVU1070
 4084 12f8 5C8ADFED 		vldr.32	s17, .L199+24	@ tmp206,
 4085              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4086              		.loc 1 645 45 view .LVU1071
 4087 12fc 598A9FED 		vldr.32	s16, .L199+16	@ tmp263,
 4088 1300 4CB095E5 		ldr	fp, [r5, #76]	@ prephitmp_139, g_armwave_state.wave_length
 4089              	@ armwave.c:629:         for(w = 0; w < g_armwave_state.waves; w++) {
 629:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4090              		.loc 1 629 15 view .LVU1072
 4091 1304 0060A0E3 		mov	r6, #0	@ w,
 4092              	.LVL219:
 4093              	.L179:
 631:armwave.c     **** 
 4094              		.loc 1 631 13 is_stmt 1 view .LVU1073
 4095              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     **** 
 4096              		.loc 1 631 49 is_stmt 0 view .LVU1074
 4097 1308 906A07EE 		vmov	s15, r6	@ int	@ w, w
 4098 130c E70AB8EE 		vcvt.f32.s32	s0, s15	@ tmp203, w
 4099 1310 2E0A20EE 		vmul.f32	s0, s0, s29	@ tmp204, tmp203, _1_waves_mod
 4100              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     **** 
 4101              		.loc 1 631 54 view .LVU1075
 4102 1314 280A20EE 		vmul.f32	s0, s0, s17	@ tmp205, tmp204, tmp206
 4103              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     **** 
 4104              		.loc 1 631 31 view .LVU1076
 4105 1318 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp205
 4106 131c FEFFFFEB 		bl	sin		@
 4107              	.LVL220:
 4108              	@ armwave.c:633:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 633:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4109              		.loc 1 633 13 view .LVU1077
 4110 1320 00005BE3 		cmp	fp, #0	@ prephitmp_139,
 4111              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     **** 
 4112              		.loc 1 631 63 view .LVU1078
 4113 1324 0B0B30EE 		vadd.f64	d0, d0, d11	@ tmp208,, tmp267
 4114              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     **** 
 4115              		.loc 1 631 28 view .LVU1079
 4116 1328 0A0B20EE 		vmul.f64	d0, d0, d10	@ tmp210, tmp208, tmp268
 4117              	@ armwave.c:631:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     **** 
 4118              		.loc 1 631 21 view .LVU1080
 4119 132c C00BB7EE 		vcvt.f32.f64	s0, d0	@ mod_val, tmp210
 4120              	.LVL221:
 633:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4121              		.loc 1 633 13 is_stmt 1 view .LVU1081
 633:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4122              		.loc 1 633 13 is_stmt 0 view .LVU1082
 4123 1330 380000DA 		ble	.L173		@,
 4124 1334 C09AB7EE 		vcvt.f64.f32	d9, s0	@ tmp261, mod_val
 4125              	@ armwave.c:643:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 643:armwave.c     **** 
 4126              		.loc 1 643 24 view .LVU1083
 4127 1338 4DDA9FED 		vldr.32	s26, .L199+28	@ tmp229,
 4128              	@ armwave.c:648:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4129              		.loc 1 648 113 view .LVU1084
 4130 133c 4DCADFED 		vldr.32	s25, .L199+32	@ tmp240,
 4131 1340 4DCA9FED 		vldr.32	s24, .L199+36	@ tmp241,
 4132              	@ armwave.c:633:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 633:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4133              		.loc 1 633 19 view .LVU1085
 4134 1344 0040A0E3 		mov	r4, #0	@ x,
 4135              	.LVL222:
 4136              	.L178:
 634:armwave.c     ****                 noise *= noise;
 4137              		.loc 1 634 17 is_stmt 1 view .LVU1086
 4138              	@ armwave.c:634:                 noise  = ((rand() & 0xffff) * noise_fraction);
 634:armwave.c     ****                 noise *= noise;
 4139              		.loc 1 634 28 is_stmt 0 view .LVU1087
 4140 1348 FEFFFFEB 		bl	rand		@
 4141              	.LVL223:
 4142              	@ armwave.c:634:                 noise  = ((rand() & 0xffff) * noise_fraction);
 634:armwave.c     ****                 noise *= noise;
 4143              		.loc 1 634 35 view .LVU1088
 4144 134c 7000FFE6 		uxth	r0, r0	@ tmp212,
 4145              	@ armwave.c:634:                 noise  = ((rand() & 0xffff) * noise_fraction);
 634:armwave.c     ****                 noise *= noise;
 4146              		.loc 1 634 45 view .LVU1089
 4147 1350 900A07EE 		vmov	s15, r0	@ int	@ tmp212, tmp212
 4148 1354 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp214, tmp212
 4149              	@ armwave.c:634:                 noise  = ((rand() & 0xffff) * noise_fraction);
 634:armwave.c     ****                 noise *= noise;
 4150              		.loc 1 634 24 view .LVU1090
 4151 1358 AD7A67EE 		vmul.f32	s15, s15, s27	@ noise, tmp214, noise_fraction
 4152              	.LVL224:
 635:armwave.c     ****                 noise *= noise;
 4153              		.loc 1 635 17 is_stmt 1 view .LVU1091
 4154              	@ armwave.c:635:                 noise *= noise;
 635:armwave.c     ****                 noise *= noise;
 4155              		.loc 1 635 23 is_stmt 0 view .LVU1092
 4156 135c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4157              	.LVL225:
 636:armwave.c     ****                 noise *= noise;
 4158              		.loc 1 636 17 is_stmt 1 view .LVU1093
 4159              	@ armwave.c:636:                 noise *= noise;
 636:armwave.c     ****                 noise *= noise;
 4160              		.loc 1 636 23 is_stmt 0 view .LVU1094
 4161 1360 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4162              	.LVL226:
 637:armwave.c     **** 
 4163              		.loc 1 637 17 is_stmt 1 view .LVU1095
 4164              	@ armwave.c:637:                 noise *= noise;
 637:armwave.c     **** 
 4165              		.loc 1 637 23 is_stmt 0 view .LVU1096
 4166 1364 A7FA27EE 		vmul.f32	s30, s15, s15	@ noise, noise, noise
 4167              	.LVL227:
 639:armwave.c     ****                     noise = -noise;
 4168              		.loc 1 639 17 is_stmt 1 view .LVU1097
 4169              	@ armwave.c:639:                 if((rand() & 0xffff) > 0x7fff)
 639:armwave.c     ****                     noise = -noise;
 4170              		.loc 1 639 21 is_stmt 0 view .LVU1098
 4171 1368 FEFFFFEB 		bl	rand		@
 4172              	.LVL228:
 640:armwave.c     **** 
 4173              		.loc 1 640 21 is_stmt 1 view .LVU1099
 4174              	@ armwave.c:639:                 if((rand() & 0xffff) > 0x7fff)
 639:armwave.c     ****                     noise = -noise;
 4175              		.loc 1 639 19 is_stmt 0 view .LVU1100
 4176 136c 020910E3 		tst	r0, #32768	@,
 4177              	@ armwave.c:640:                     noise = -noise;
 640:armwave.c     **** 
 4178              		.loc 1 640 27 view .LVU1101
 4179 1370 4FFAB11E 		vnegne.f32	s30, s30	@ noise, noise
 4180              	.LVL229:
 642:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4181              		.loc 1 642 17 is_stmt 1 view .LVU1102
 643:armwave.c     **** 
 4182              		.loc 1 643 17 view .LVU1103
 4183              	@ armwave.c:643:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 643:armwave.c     **** 
 4184              		.loc 1 643 27 is_stmt 0 view .LVU1104
 4185 1374 FEFFFFEB 		bl	rand		@
 4186              	.LVL230:
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4187              		.loc 1 645 17 is_stmt 1 view .LVU1105
 4188              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4189              		.loc 1 645 45 is_stmt 0 view .LVU1106
 4190 1378 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp277, g_armwave_state.wave_length
 4191              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4192              		.loc 1 645 33 view .LVU1107
 4193 137c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4194              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4195              		.loc 1 645 45 view .LVU1108
 4196 1380 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp277
 4197              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4198              		.loc 1 645 33 view .LVU1109
 4199 1384 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp221, x
 4200              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4201              		.loc 1 645 45 view .LVU1110
 4202 1388 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp219, tmp263, tmp217
 4203              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4204              		.loc 1 645 33 view .LVU1111
 4205 138c A87A67EE 		vmul.f32	s15, s15, s17	@ tmp222, tmp221, tmp206
 4206              	@ armwave.c:643:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 643:armwave.c     **** 
 4207              		.loc 1 643 34 view .LVU1112
 4208 1390 7000FFE6 		uxth	r0, r0	@ tmp225,
 4209              	.LVL231:
 4210              	@ armwave.c:643:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 643:armwave.c     **** 
 4211              		.loc 1 643 44 view .LVU1113
 4212 1394 100A07EE 		vmov	s14, r0	@ int	@ tmp225, tmp225
 4213 1398 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp227, tmp225
 4214              	@ armwave.c:643:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 643:armwave.c     **** 
 4215              		.loc 1 643 24 view .LVU1114
 4216 139c 0D0A87EE 		vdiv.f32	s0, s14, s26	@ xnoise, tmp227, tmp229
 4217              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4218              		.loc 1 645 77 view .LVU1115
 4219 13a0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp230, tmp219, tmp222
 4220              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4221              		.loc 1 645 22 view .LVU1116
 4222 13a4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp230
 4223 13a8 FEFFFFEB 		bl	sin		@
 4224              	.LVL232:
 4225              		.loc 1 648 17 is_stmt 1 view .LVU1117
 4226              	@ armwave.c:642:                 noise += 1.0f;
 642:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4227              		.loc 1 642 23 is_stmt 0 view .LVU1118
 4228 13ac 087A7FEE 		vadd.f32	s15, s30, s16	@ noise, noise, tmp263
 4229              	@ armwave.c:648:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4230              		.loc 1 648 104 view .LVU1119
 4231 13b0 0010A0E3 		mov	r1, #0	@ iftmp.27_55,
 4232              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4233              		.loc 1 645 98 view .LVU1120
 4234 13b4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp236, noise
 4235              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4236              		.loc 1 645 87 view .LVU1121
 4237 13b8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp233, tmp261,
 4238              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4239              		.loc 1 645 98 view .LVU1122
 4240 13bc 077B20EE 		vmul.f64	d7, d0, d7	@ tmp237, tmp233, tmp236
 4241              	@ armwave.c:645:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 645:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4242              		.loc 1 645 19 view .LVU1123
 4243 13c0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp237
 4244              	@ armwave.c:648:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4245              		.loc 1 648 113 view .LVU1124
 4246 13c4 4C7AF0EE 		vmov.f32	s15, s24	@ _38, tmp241
 4247 13c8 2C7A47EE 		vmla.f32	s15, s14, s25	@ _38, v, tmp240
 4248 13cc C07AF5EE 		vcmpe.f32	s15, #0	@ _38
 4249 13d0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4250 13d4 050000DA 		ble	.L175		@,
 4251              	@ armwave.c:648:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4252              		.loc 1 648 104 discriminator 1 view .LVU1125
 4253 13d8 CE7AF4EE 		vcmpe.f32	s15, s28	@ _38, tmp269
 4254 13dc FF10A0E3 		mov	r1, #255	@ iftmp.27_55,
 4255 13e0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4256 13e4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp245, _38
 4257 13e8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp245, %sfp
 4258 13ec 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_55, %sfp
 4259              	.L175:
 4260              	@ armwave.c:648:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4261              		.loc 1 648 57 discriminator 12 view .LVU1126
 4262 13f0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4263              	@ armwave.c:648:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4264              		.loc 1 648 102 discriminator 12 view .LVU1127
 4265 13f4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4266 13f8 927622E0 		mla	r2, r2, r6, r7	@ tmp252, g_armwave_state.wave_stride, w, set_offset
 4267 13fc 043083E0 		add	r3, r3, r4	@ tmp251, g_armwave_state.test_wave_buffer, x
 4268              	@ armwave.c:633:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 633:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4269              		.loc 1 633 58 discriminator 12 view .LVU1128
 4270 1400 014084E2 		add	r4, r4, #1	@ x, x,
 4271              	.LVL233:
 4272              	@ armwave.c:648:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4273              		.loc 1 648 102 discriminator 12 view .LVU1129
 4274 1404 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_55, *_45
 4275              	@ armwave.c:633:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 633:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4276              		.loc 1 633 43 discriminator 12 view .LVU1130
 4277 1408 4CB095E5 		ldr	fp, [r5, #76]	@ prephitmp_139, g_armwave_state.wave_length
 4278              	@ armwave.c:633:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 633:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4279              		.loc 1 633 13 discriminator 12 view .LVU1131
 4280 140c 04005BE1 		cmp	fp, r4	@ prephitmp_139, x
 4281 1410 CCFFFFCA 		bgt	.L178		@,
 4282 1414 384095E5 		ldr	r4, [r5, #56]	@ prephitmp_135, g_armwave_state.waves
 4283              	.LVL234:
 4284              	.L173:
 4285              	@ armwave.c:629:         for(w = 0; w < g_armwave_state.waves; w++) {
 629:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4286              		.loc 1 629 48 discriminator 2 view .LVU1132
 4287 1418 016086E2 		add	r6, r6, #1	@ w, w,
 4288              	.LVL235:
 4289              	@ armwave.c:629:         for(w = 0; w < g_armwave_state.waves; w++) {
 629:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4290              		.loc 1 629 9 discriminator 2 view .LVU1133
 4291 141c 040056E1 		cmp	r6, r4	@ w, prephitmp_135
 4292 1420 B8FFFFBA 		blt	.L179		@,
 4293              	.LVL236:
 4294              	.L172:
 649:armwave.c     ****             }
 650:armwave.c     ****         }
 651:armwave.c     **** 
 652:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4295              		.loc 1 652 9 is_stmt 1 discriminator 2 view .LVU1134
 4296              	@ armwave.c:652:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4297              		.loc 1 652 46 is_stmt 0 discriminator 2 view .LVU1135
 4298 1424 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4299              	@ armwave.c:626:     for(s = 0; s < sets; s++) {
 626:armwave.c     ****         printf("Calculating test set %d\n", s);
 4300              		.loc 1 626 27 discriminator 2 view .LVU1136
 4301 1428 018088E2 		add	r8, r8, #1	@ s, s,
 4302              	.LVL237:
 4303              	@ armwave.c:626:     for(s = 0; s < sets; s++) {
 626:armwave.c     ****         printf("Calculating test set %d\n", s);
 4304              		.loc 1 626 5 discriminator 2 view .LVU1137
 4305 142c 080059E1 		cmp	r9, r8	@ sets, s
 4306              	@ armwave.c:652:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4307              		.loc 1 652 20 discriminator 2 view .LVU1138
 4308 1430 937427E0 		mla	r7, r3, r4, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_135, set_offset
 4309              	.LVL238:
 4310              	@ armwave.c:626:     for(s = 0; s < sets; s++) {
 626:armwave.c     ****         printf("Calculating test set %d\n", s);
 4311              		.loc 1 626 5 discriminator 2 view .LVU1139
 4312 1434 A9FFFF1A 		bne	.L171		@,
 4313              	.LVL239:
 4314              	.L168:
 4315              	@ armwave.c:654: }
 653:armwave.c     ****     }
 654:armwave.c     **** }
 4316              		.loc 1 654 1 view .LVU1140
 4317 1438 0CD08DE2 		add	sp, sp, #12	@,,
 4318              		.cfi_remember_state
 4319              		.cfi_def_cfa_offset 100
 4320              		@ sp needed	@
 4321 143c 108BBDEC 		vldm	sp!, {d8-d15}	@,
 4322              		.cfi_restore 94
 4323              		.cfi_restore 95
 4324              		.cfi_restore 92
 4325              		.cfi_restore 93
 4326              		.cfi_restore 90
 4327              		.cfi_restore 91
 4328              		.cfi_restore 88
 4329              		.cfi_restore 89
 4330              		.cfi_restore 86
 4331              		.cfi_restore 87
 4332              		.cfi_restore 84
 4333              		.cfi_restore 85
 4334              		.cfi_restore 82
 4335              		.cfi_restore 83
 4336              		.cfi_restore 80
 4337              		.cfi_restore 81
 4338              		.cfi_def_cfa_offset 36
 4339 1440 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 4340              	.LVL240:
 4341              	.L198:
 4342              		.cfi_restore_state
 4343              	.LBB125:
 4344              	.LBB122:
 602:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 4345              		.loc 1 602 9 is_stmt 1 view .LVU1141
 4346 1444 940901E0 		mul	r1, r4, r9	@, _90, sets
 4347 1448 0920A0E1 		mov	r2, r9	@, sets
 4348 144c 34009FE5 		ldr	r0, .L199+48	@,
 4349 1450 FEFFFFEB 		bl	printf		@
 4350              	.LVL241:
 604:armwave.c     ****     }
 4351              		.loc 1 604 9 view .LVU1142
 4352 1454 99FFFFEA 		b	.L170		@
 4353              	.L200:
 4354              		.align	3
 4355              	.L199:
 4356 1458 00000000 		.word	0
 4357 145c 0000F03F 		.word	1072693248
 4358 1460 00000000 		.word	0
 4359 1464 0000E03F 		.word	1071644672
 4360 1468 0000803F 		.word	1065353216
 4361 146c 00007F43 		.word	1132396544
 4362 1470 C3F5C840 		.word	1086911939
 4363 1474 38FFC74A 		.word	1254620984
 4364 1478 0000FE42 		.word	1123942400
 4365 147c 00000043 		.word	1124073472
 4366 1480 00000000 		.word	g_armwave_state
 4367 1484 CC020000 		.word	.LC18
 4368 1488 78020000 		.word	.LC17
 4369              	.LBE122:
 4370              	.LBE125:
 4371              		.cfi_endproc
 4372              	.LFE77:
 4374              		.align	2
 4375              		.global	armwave_cleanup
 4376              		.syntax unified
 4377              		.arm
 4378              		.fpu vfp
 4380              	armwave_cleanup:
 4381              	.LFB78:
 655:armwave.c     **** 
 656:armwave.c     **** /*
 657:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 658:armwave.c     ****  */
 659:armwave.c     **** void armwave_cleanup()
 660:armwave.c     **** {
 4382              		.loc 1 660 1 view -0
 4383              		.cfi_startproc
 4384              		@ args = 0, pretend = 0, frame = 0
 4385              		@ frame_needed = 0, uses_anonymous_args = 0
 661:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4386              		.loc 1 661 5 view .LVU1144
 4387              	@ armwave.c:660: {
 660:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4388              		.loc 1 660 1 is_stmt 0 view .LVU1145
 4389 148c 10402DE9 		push	{r4, lr}	@
 4390              		.cfi_def_cfa_offset 8
 4391              		.cfi_offset 4, -8
 4392              		.cfi_offset 14, -4
 4393              	@ armwave.c:661:     free(g_armwave_state.out_pixbuf);
 4394              		.loc 1 661 25 view .LVU1146
 4395 1490 34409FE5 		ldr	r4, .L203	@ tmp114,
 4396              	@ armwave.c:661:     free(g_armwave_state.out_pixbuf);
 4397              		.loc 1 661 5 view .LVU1147
 4398 1494 800094E5 		ldr	r0, [r4, #128]	@, g_armwave_state.out_pixbuf
 4399 1498 FEFFFFEB 		bl	free		@
 4400              	.LVL242:
 662:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4401              		.loc 1 662 5 is_stmt 1 view .LVU1148
 4402 149c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4403 14a0 FEFFFFEB 		bl	free		@
 4404              	.LVL243:
 663:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4405              		.loc 1 663 5 view .LVU1149
 4406 14a4 9C0094E5 		ldr	r0, [r4, #156]	@, g_armwave_state.xcoord_to_xpixel
 4407 14a8 FEFFFFEB 		bl	free		@
 4408              	.LVL244:
 664:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4409              		.loc 1 664 5 view .LVU1150
 4410 14ac 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4411 14b0 FEFFFFEB 		bl	free		@
 4412              	.LVL245:
 665:armwave.c     **** 
 666:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4413              		.loc 1 666 5 view .LVU1151
 4414              	@ armwave.c:666:     g_armwave_state.out_pixbuf = NULL;
 4415              		.loc 1 666 32 is_stmt 0 view .LVU1152
 4416 14b4 0030A0E3 		mov	r3, #0	@ tmp123,
 4417 14b8 803084E5 		str	r3, [r4, #128]	@ tmp123, g_armwave_state.out_pixbuf
 667:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4418              		.loc 1 667 5 is_stmt 1 view .LVU1153
 4419              	@ armwave.c:667:     g_armwave_state.ch1_buffer = NULL;
 4420              		.loc 1 667 32 is_stmt 0 view .LVU1154
 4421 14bc 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 668:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4422              		.loc 1 668 5 is_stmt 1 view .LVU1155
 4423              	@ armwave.c:668:     g_armwave_state.xcoord_to_xpixel = NULL;
 4424              		.loc 1 668 38 is_stmt 0 view .LVU1156
 4425 14c0 9C3084E5 		str	r3, [r4, #156]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 669:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4426              		.loc 1 669 5 is_stmt 1 view .LVU1157
 4427              	@ armwave.c:669:     g_armwave_state.test_wave_buffer = NULL;
 4428              		.loc 1 669 38 is_stmt 0 view .LVU1158
 4429 14c4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4430              	@ armwave.c:670: }
 670:armwave.c     **** }
 4431              		.loc 1 670 1 view .LVU1159
 4432 14c8 1080BDE8 		pop	{r4, pc}	@
 4433              	.L204:
 4434              		.align	2
 4435              	.L203:
 4436 14cc 00000000 		.word	g_armwave_state
 4437              		.cfi_endproc
 4438              	.LFE78:
 4440              		.align	2
 4441              		.global	armwave_grab_xid
 4442              		.syntax unified
 4443              		.arm
 4444              		.fpu vfp
 4446              	armwave_grab_xid:
 4447              	.LVL246:
 4448              	.LFB79:
 671:armwave.c     **** 
 672:armwave.c     **** /*
 673:armwave.c     ****  * Grab a given XWindow by ID.
 674:armwave.c     ****  */
 675:armwave.c     **** void armwave_grab_xid(int id)
 676:armwave.c     **** {
 4449              		.loc 1 676 1 is_stmt 1 view -0
 4450              		.cfi_startproc
 4451              		@ args = 0, pretend = 0, frame = 96
 4452              		@ frame_needed = 0, uses_anonymous_args = 0
 677:armwave.c     ****     XEvent event;
 4453              		.loc 1 677 5 view .LVU1161
 678:armwave.c     ****     
 679:armwave.c     ****     if(g_window != 0) {
 4454              		.loc 1 679 5 view .LVU1162
 4455              	@ armwave.c:676: {
 676:armwave.c     ****     XEvent event;
 4456              		.loc 1 676 1 is_stmt 0 view .LVU1163
 4457 14d0 70402DE9 		push	{r4, r5, r6, lr}	@
 4458              		.cfi_def_cfa_offset 16
 4459              		.cfi_offset 4, -16
 4460              		.cfi_offset 5, -12
 4461              		.cfi_offset 6, -8
 4462              		.cfi_offset 14, -4
 4463 14d4 0060A0E1 		mov	r6, r0	@ id, id
 4464              	@ armwave.c:679:     if(g_window != 0) {
 4465              		.loc 1 679 17 view .LVU1164
 4466 14d8 9C509FE5 		ldr	r5, .L214	@ tmp151,
 4467 14dc 9C409FE5 		ldr	r4, .L214+4	@ tmp152,
 4468              	@ armwave.c:676: {
 676:armwave.c     ****     XEvent event;
 4469              		.loc 1 676 1 view .LVU1165
 4470 14e0 60D04DE2 		sub	sp, sp, #96	@,,
 4471              		.cfi_def_cfa_offset 112
 4472              	@ armwave.c:679:     if(g_window != 0) {
 4473              		.loc 1 679 17 view .LVU1166
 4474 14e4 001095E5 		ldr	r1, [r5]	@ g_window.30_1, g_window
 4475 14e8 000094E5 		ldr	r0, [r4]	@ pretmp_30, g_dpy
 4476              	.LVL247:
 4477              	@ armwave.c:679:     if(g_window != 0) {
 4478              		.loc 1 679 7 view .LVU1167
 4479 14ec 000051E3 		cmp	r1, #0	@ g_window.30_1,
 4480 14f0 1E00001A 		bne	.L213		@,
 4481              	.L206:
 680:armwave.c     ****         XUnmapWindow(g_dpy, g_window);
 681:armwave.c     ****     }
 682:armwave.c     ****     
 683:armwave.c     ****     g_window = id;
 4482              		.loc 1 683 5 is_stmt 1 view .LVU1168
 4483              	@ armwave.c:685:     XStoreName(g_dpy, g_window, "ArmWave");
 684:armwave.c     ****     
 685:armwave.c     ****     XStoreName(g_dpy, g_window, "ArmWave");
 4484              		.loc 1 685 5 is_stmt 0 view .LVU1169
 4485 14f4 0610A0E1 		mov	r1, r6	@, id
 4486 14f8 84209FE5 		ldr	r2, .L214+8	@,
 4487              	@ armwave.c:683:     g_window = id;
 683:armwave.c     ****     
 4488              		.loc 1 683 14 view .LVU1170
 4489 14fc 006085E5 		str	r6, [r5]	@ id, g_window
 4490              		.loc 1 685 5 is_stmt 1 view .LVU1171
 4491 1500 FEFFFFEB 		bl	XStoreName		@
 4492              	.LVL248:
 686:armwave.c     ****     XSetIconName(g_dpy, g_window, "ArmWave");
 4493              		.loc 1 686 5 view .LVU1172
 4494 1504 78209FE5 		ldr	r2, .L214+8	@,
 4495 1508 001095E5 		ldr	r1, [r5]	@, g_window
 4496 150c 000094E5 		ldr	r0, [r4]	@, g_dpy
 4497 1510 FEFFFFEB 		bl	XSetIconName		@
 4498              	.LVL249:
 687:armwave.c     ****     XSelectInput(g_dpy, g_window, StructureNotifyMask);
 4499              		.loc 1 687 5 view .LVU1173
 4500 1514 001095E5 		ldr	r1, [r5]	@, g_window
 4501 1518 0228A0E3 		mov	r2, #131072	@,
 4502 151c 000094E5 		ldr	r0, [r4]	@, g_dpy
 4503 1520 FEFFFFEB 		bl	XSelectInput		@
 4504              	.LVL250:
 688:armwave.c     ****     
 689:armwave.c     ****     printf("Window done, mapping...\n");
 4505              		.loc 1 689 5 view .LVU1174
 4506 1524 5C009FE5 		ldr	r0, .L214+12	@,
 4507 1528 FEFFFFEB 		bl	puts		@
 4508              	.LVL251:
 690:armwave.c     ****     
 691:armwave.c     ****     XMapWindow(g_dpy, g_window);
 4509              		.loc 1 691 5 view .LVU1175
 4510 152c 001095E5 		ldr	r1, [r5]	@, g_window
 4511 1530 000094E5 		ldr	r0, [r4]	@, g_dpy
 4512 1534 FEFFFFEB 		bl	XMapWindow		@
 4513              	.LVL252:
 4514              	.L210:
 692:armwave.c     ****     
 693:armwave.c     ****     do {
 4515              		.loc 1 693 5 discriminator 3 view .LVU1176
 694:armwave.c     ****         XNextEvent(g_dpy, &event);
 4516              		.loc 1 694 9 discriminator 3 view .LVU1177
 4517 1538 0D10A0E1 		mov	r1, sp	@,
 4518 153c 000094E5 		ldr	r0, [r4]	@, g_dpy
 4519 1540 FEFFFFEB 		bl	XNextEvent		@
 4520              	.LVL253:
 4521              	@ armwave.c:696:     while(event.type != MapNotify || event.xmap.event != g_window);
 695:armwave.c     ****     }
 696:armwave.c     ****     while(event.type != MapNotify || event.xmap.event != g_window);
 4522              		.loc 1 696 5 is_stmt 0 discriminator 3 view .LVU1178
 4523 1544 00309DE5 		ldr	r3, [sp]	@ event.type, event.type
 4524 1548 130053E3 		cmp	r3, #19	@ event.type,
 4525 154c F9FFFF1A 		bne	.L210		@,
 4526              	@ armwave.c:696:     while(event.type != MapNotify || event.xmap.event != g_window);
 4527              		.loc 1 696 35 discriminator 2 view .LVU1179
 4528 1550 10209DE5 		ldr	r2, [sp, #16]	@ event.xmap.event, event.xmap.event
 4529 1554 003095E5 		ldr	r3, [r5]	@ g_window, g_window
 4530 1558 030052E1 		cmp	r2, r3	@ event.xmap.event, g_window
 4531 155c F5FFFF1A 		bne	.L210		@,
 697:armwave.c     ****     
 698:armwave.c     ****     printf("All done in window\n");
 4532              		.loc 1 698 5 is_stmt 1 view .LVU1180
 4533 1560 24009FE5 		ldr	r0, .L214+16	@,
 4534 1564 FEFFFFEB 		bl	puts		@
 4535              	.LVL254:
 4536              	@ armwave.c:699: }
 699:armwave.c     **** }
 4537              		.loc 1 699 1 is_stmt 0 view .LVU1181
 4538 1568 60D08DE2 		add	sp, sp, #96	@,,
 4539              		.cfi_remember_state
 4540              		.cfi_def_cfa_offset 16
 4541              		@ sp needed	@
 4542 156c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4543              	.LVL255:
 4544              	.L213:
 4545              		.cfi_restore_state
 680:armwave.c     ****     }
 4546              		.loc 1 680 9 is_stmt 1 view .LVU1182
 4547 1570 FEFFFFEB 		bl	XUnmapWindow		@
 4548              	.LVL256:
 4549 1574 000094E5 		ldr	r0, [r4]	@ pretmp_30, g_dpy
 4550 1578 DDFFFFEA 		b	.L206		@
 4551              	.L215:
 4552              		.align	2
 4553              	.L214:
 4554 157c 00000000 		.word	.LANCHOR1
 4555 1580 00000000 		.word	g_dpy
 4556 1584 E8020000 		.word	.LC19
 4557 1588 F0020000 		.word	.LC20
 4558 158c 08030000 		.word	.LC21
 4559              		.cfi_endproc
 4560              	.LFE79:
 4562              		.align	2
 4563              		.global	armwave_init_x11
 4564              		.syntax unified
 4565              		.arm
 4566              		.fpu vfp
 4568              	armwave_init_x11:
 4569              	.LFB80:
 700:armwave.c     **** 
 701:armwave.c     **** /*
 702:armwave.c     ****  * Initialise the Xvideo and MITSHM extension.
 703:armwave.c     ****  */
 704:armwave.c     **** void armwave_init_x11()
 705:armwave.c     **** {
 4570              		.loc 1 705 1 view -0
 4571              		.cfi_startproc
 4572              		@ args = 0, pretend = 0, frame = 0
 4573              		@ frame_needed = 0, uses_anonymous_args = 0
 706:armwave.c     ****     int screen;
 4574              		.loc 1 706 5 view .LVU1184
 707:armwave.c     ****     
 708:armwave.c     ****     printf("armwave: initialising for X11...\n");
 4575              		.loc 1 708 5 view .LVU1185
 4576              	@ armwave.c:705: {
 705:armwave.c     ****     int screen;
 4577              		.loc 1 705 1 is_stmt 0 view .LVU1186
 4578 1590 04E02DE5 		str	lr, [sp, #-4]!	@,
 4579              		.cfi_def_cfa_offset 4
 4580              		.cfi_offset 14, -4
 4581 1594 0CD04DE2 		sub	sp, sp, #12	@,,
 4582              		.cfi_def_cfa_offset 16
 4583              	@ armwave.c:708:     printf("armwave: initialising for X11...\n");
 4584              		.loc 1 708 5 view .LVU1187
 4585 1598 68009FE5 		ldr	r0, .L221	@,
 4586 159c FEFFFFEB 		bl	puts		@
 4587              	.LVL257:
 709:armwave.c     ****         
 710:armwave.c     ****     /*
 711:armwave.c     ****      * Try to open the display.
 712:armwave.c     ****      */
 713:armwave.c     ****     g_dpy = XOpenDisplay(NULL);
 4588              		.loc 1 713 5 is_stmt 1 view .LVU1188
 4589              	@ armwave.c:713:     g_dpy = XOpenDisplay(NULL);
 4590              		.loc 1 713 13 is_stmt 0 view .LVU1189
 4591 15a0 0000A0E3 		mov	r0, #0	@,
 4592 15a4 FEFFFFEB 		bl	XOpenDisplay		@
 4593              	.LVL258:
 4594              	@ armwave.c:713:     g_dpy = XOpenDisplay(NULL);
 4595              		.loc 1 713 11 view .LVU1190
 4596 15a8 5C209FE5 		ldr	r2, .L221+4	@ tmp114,
 4597              	@ armwave.c:714:     if (g_dpy == NULL) {
 714:armwave.c     ****     if (g_dpy == NULL) {
 4598              		.loc 1 714 8 view .LVU1191
 4599 15ac 000050E3 		cmp	r0, #0	@ _1,
 4600              	@ armwave.c:713:     g_dpy = XOpenDisplay(NULL);
 713:armwave.c     ****     if (g_dpy == NULL) {
 4601              		.loc 1 713 11 view .LVU1192
 4602 15b0 000082E5 		str	r0, [r2]	@ _1, g_dpy
 4603              		.loc 1 714 5 is_stmt 1 view .LVU1193
 4604              	@ armwave.c:714:     if (g_dpy == NULL) {
 4605              		.loc 1 714 8 is_stmt 0 view .LVU1194
 4606 15b4 0B00000A 		beq	.L220		@,
 715:armwave.c     ****         printf("Error: Fatal X11: Cannot open display.\n");
 716:armwave.c     ****         exit (-1);
 717:armwave.c     ****     }
 718:armwave.c     ****     
 719:armwave.c     ****     screen = DefaultScreen(g_dpy);
 4607              		.loc 1 719 5 is_stmt 1 view .LVU1195
 4608              	.LVL259:
 720:armwave.c     ****     
 721:armwave.c     ****     /*
 722:armwave.c     ****      * Check the display supports 24-bit TrueColor, if not then abort early.
 723:armwave.c     ****      */
 724:armwave.c     ****     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4609              		.loc 1 724 5 view .LVU1196
 4610              	@ armwave.c:724:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4611              		.loc 1 724 9 is_stmt 0 view .LVU1197
 4612 15b8 50309FE5 		ldr	r3, .L221+8	@ tmp117,
 4613 15bc 841090E5 		ldr	r1, [r0, #132]	@ MEM[(struct  *)_1].default_screen, MEM[(struct  *)_1].default_screen
 4614 15c0 1820A0E3 		mov	r2, #24	@,
 4615 15c4 00308DE5 		str	r3, [sp]	@ tmp117,
 4616              	.LVL260:
 4617              		.loc 1 724 9 view .LVU1198
 4618 15c8 0430A0E3 		mov	r3, #4	@,
 4619 15cc FEFFFFEB 		bl	XMatchVisualInfo		@
 4620              	.LVL261:
 4621              	@ armwave.c:724:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4622              		.loc 1 724 8 view .LVU1199
 4623 15d0 000050E3 		cmp	r0, #0	@,
 4624 15d4 0700000A 		beq	.L218		@,
 725:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 4625              		.loc 1 725 9 is_stmt 1 view .LVU1200
 4626 15d8 34009FE5 		ldr	r0, .L221+12	@,
 4627              	@ armwave.c:730: }
 726:armwave.c     ****     } else {
 727:armwave.c     ****         printf("Error: Fatal X11: not supported 24-bit TrueColor display.\n");
 728:armwave.c     ****         exit(-1);
 729:armwave.c     ****     }
 730:armwave.c     **** }
 4628              		.loc 1 730 1 is_stmt 0 view .LVU1201
 4629 15dc 0CD08DE2 		add	sp, sp, #12	@,,
 4630              		.cfi_remember_state
 4631              		.cfi_def_cfa_offset 4
 4632              		@ sp needed	@
 4633 15e0 04E09DE4 		ldr	lr, [sp], #4	@,
 4634              		.cfi_restore 14
 4635              		.cfi_def_cfa_offset 0
 4636              	@ armwave.c:725:         printf("Found 24bit TrueColor.\n");
 725:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 4637              		.loc 1 725 9 view .LVU1202
 4638 15e4 FEFFFFEA 		b	puts		@
 4639              	.LVL262:
 4640              	.L220:
 4641              		.cfi_restore_state
 715:armwave.c     ****         exit (-1);
 4642              		.loc 1 715 9 is_stmt 1 view .LVU1203
 4643 15e8 28009FE5 		ldr	r0, .L221+16	@,
 4644 15ec FEFFFFEB 		bl	puts		@
 4645              	.LVL263:
 716:armwave.c     ****     }
 4646              		.loc 1 716 9 view .LVU1204
 4647 15f0 0000E0E3 		mvn	r0, #0	@,
 4648 15f4 FEFFFFEB 		bl	exit		@
 4649              	.LVL264:
 4650              	.L218:
 727:armwave.c     ****         exit(-1);
 4651              		.loc 1 727 9 view .LVU1205
 4652 15f8 1C009FE5 		ldr	r0, .L221+20	@,
 4653 15fc FEFFFFEB 		bl	puts		@
 4654              	.LVL265:
 728:armwave.c     ****     }
 4655              		.loc 1 728 9 view .LVU1206
 4656 1600 0000E0E3 		mvn	r0, #0	@,
 4657 1604 FEFFFFEB 		bl	exit		@
 4658              	.LVL266:
 4659              	.L222:
 4660              		.align	2
 4661              	.L221:
 4662 1608 1C030000 		.word	.LC22
 4663 160c 00000000 		.word	g_dpy
 4664 1610 00000000 		.word	g_vinfo
 4665 1614 68030000 		.word	.LC24
 4666 1618 40030000 		.word	.LC23
 4667 161c 80030000 		.word	.LC25
 4668              		.cfi_endproc
 4669              	.LFE80:
 4671              		.align	2
 4672              		.global	armwave_init_xvimage_shared
 4673              		.syntax unified
 4674              		.arm
 4675              		.fpu vfp
 4677              	armwave_init_xvimage_shared:
 4678              	.LVL267:
 4679              	.LFB81:
 731:armwave.c     **** 
 732:armwave.c     **** /*
 733:armwave.c     ****  * Create the shared memory buffer for the XvImage.
 734:armwave.c     ****  */
 735:armwave.c     **** void armwave_init_xvimage_shared(int tex_width, int tex_height)
 736:armwave.c     **** {
 4680              		.loc 1 736 1 view -0
 4681              		.cfi_startproc
 4682              		@ args = 0, pretend = 0, frame = 120
 4683              		@ frame_needed = 0, uses_anonymous_args = 0
 737:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4684              		.loc 1 737 5 view .LVU1208
 738:armwave.c     ****     int	p_num_adaptors, ret, n;
 4685              		.loc 1 738 5 view .LVU1209
 739:armwave.c     ****     XGCValues gc_values;
 4686              		.loc 1 739 5 view .LVU1210
 740:armwave.c     ****     XvAdaptorInfo *ai;
 4687              		.loc 1 740 5 view .LVU1211
 741:armwave.c     ****     
 742:armwave.c     ****     /*
 743:armwave.c     ****      * Query the MITSHM extension - check it is available.
 744:armwave.c     ****      */
 745:armwave.c     ****     if(!XShmQueryExtension(g_dpy)) {
 4688              		.loc 1 745 5 view .LVU1212
 4689              	@ armwave.c:736: {
 736:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4690              		.loc 1 736 1 is_stmt 0 view .LVU1213
 4691 1620 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 4692              		.cfi_def_cfa_offset 32
 4693              		.cfi_offset 4, -32
 4694              		.cfi_offset 5, -28
 4695              		.cfi_offset 6, -24
 4696              		.cfi_offset 7, -20
 4697              		.cfi_offset 8, -16
 4698              		.cfi_offset 9, -12
 4699              		.cfi_offset 10, -8
 4700              		.cfi_offset 14, -4
 4701 1624 0060A0E1 		mov	r6, r0	@ tex_width, tex_width
 4702              	@ armwave.c:745:     if(!XShmQueryExtension(g_dpy)) {
 4703              		.loc 1 745 9 view .LVU1214
 4704 1628 18729FE5 		ldr	r7, .L246	@ tmp251,
 4705              	@ armwave.c:736: {
 736:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4706              		.loc 1 736 1 view .LVU1215
 4707 162c 88D04DE2 		sub	sp, sp, #136	@,,
 4708              		.cfi_def_cfa_offset 168
 4709              	@ armwave.c:736: {
 736:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4710              		.loc 1 736 1 view .LVU1216
 4711 1630 01A0A0E1 		mov	r10, r1	@ tex_height, tex_height
 4712              	@ armwave.c:745:     if(!XShmQueryExtension(g_dpy)) {
 4713              		.loc 1 745 9 view .LVU1217
 4714 1634 000097E5 		ldr	r0, [r7]	@, g_dpy
 4715              	.LVL268:
 4716              		.loc 1 745 9 view .LVU1218
 4717 1638 FEFFFFEB 		bl	XShmQueryExtension		@
 4718              	.LVL269:
 4719              	@ armwave.c:745:     if(!XShmQueryExtension(g_dpy)) {
 4720              		.loc 1 745 7 view .LVU1219
 4721 163c 000050E3 		cmp	r0, #0	@,
 4722 1640 6900000A 		beq	.L241		@,
 746:armwave.c     ****         printf("Error: Fatal X11: Shared memory extension not available or failed to allocate share
 747:armwave.c     ****         exit(-1);
 748:armwave.c     ****     }
 749:armwave.c     ****     
 750:armwave.c     ****     XShmGetEventBase(g_dpy);  // What does this do? 
 4723              		.loc 1 750 5 is_stmt 1 view .LVU1220
 4724 1644 000097E5 		ldr	r0, [r7]	@, g_dpy
 4725 1648 FEFFFFEB 		bl	XShmGetEventBase		@
 4726              	.LVL270:
 751:armwave.c     ****     
 752:armwave.c     ****     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 4727              		.loc 1 752 5 view .LVU1221
 4728              	@ armwave.c:752:     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 4729              		.loc 1 752 11 is_stmt 0 view .LVU1222
 4730 164c 20208DE2 		add	r2, sp, #32	@ tmp176,,
 4731 1650 1C308DE2 		add	r3, sp, #28	@ tmp177,,
 4732 1654 04208DE5 		str	r2, [sp, #4]	@ tmp176,
 4733 1658 00308DE5 		str	r3, [sp]	@ tmp177,
 4734 165c 14208DE2 		add	r2, sp, #20	@,,
 4735 1660 18308DE2 		add	r3, sp, #24	@,,
 4736 1664 10108DE2 		add	r1, sp, #16	@,,
 4737 1668 000097E5 		ldr	r0, [r7]	@, g_dpy
 4738 166c FEFFFFEB 		bl	XvQueryExtension		@
 4739              	.LVL271:
 753:armwave.c     **** 			 &p_event_base, &p_error_base);
 754:armwave.c     ****     if(ret != Success) {
 4740              		.loc 1 754 5 is_stmt 1 view .LVU1223
 4741              	@ armwave.c:754:     if(ret != Success) {
 4742              		.loc 1 754 7 is_stmt 0 view .LVU1224
 4743 1670 000050E3 		cmp	r0, #0	@ ret
 4744              		.loc 1 754 7 view .LVU1225
 4745 1674 6E00001A 		bne	.L242		@,
 755:armwave.c     ****         printf("Error: Fatal X11: Unable to find XVideo extension (%d).  Is it configured correctly
 756:armwave.c     ****         exit(-1);
 757:armwave.c     ****     }
 758:armwave.c     ****     
 759:armwave.c     ****     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4746              		.loc 1 759 5 is_stmt 1 view .LVU1226
 4747              	@ armwave.c:759:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4748              		.loc 1 759 11 is_stmt 0 view .LVU1227
 4749 1678 002097E5 		ldr	r2, [r7]	@ g_dpy.50_5, g_dpy
 4750 167c 28308DE2 		add	r3, sp, #40	@,,
 4751 1680 0200A0E1 		mov	r0, r2	@, g_dpy.50_5
 4752              	.LVL272:
 4753              	@ armwave.c:759:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4754              		.loc 1 759 34 view .LVU1228
 4755 1684 841092E5 		ldr	r1, [r2, #132]	@ MEM[(struct  *)g_dpy.50_5].default_screen, MEM[(struct  *)g_dpy.50_5].default
 4756              	@ armwave.c:759:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4757              		.loc 1 759 11 view .LVU1229
 4758 1688 8CC092E5 		ldr	ip, [r2, #140]	@ MEM[(struct  *)g_dpy.50_5].screens, MEM[(struct  *)g_dpy.50_5].screens
 4759 168c 24208DE2 		add	r2, sp, #36	@,,
 4760 1690 011181E0 		add	r1, r1, r1, lsl #2	@ tmp186, MEM[(struct  *)g_dpy.50_5].default_screen, MEM[(struct  *)g_dpy.5
 4761 1694 01128CE0 		add	r1, ip, r1, lsl #4	@ tmp188, MEM[(struct  *)g_dpy.50_5].screens, tmp186,
 4762 1698 081091E5 		ldr	r1, [r1, #8]	@, _10->root
 4763 169c FEFFFFEB 		bl	XvQueryAdaptors		@
 4764              	.LVL273:
 760:armwave.c     **** 			&p_num_adaptors, &ai);
 761:armwave.c     ****     
 762:armwave.c     ****     if(ret != Success) {
 4765              		.loc 1 762 5 is_stmt 1 view .LVU1230
 4766              	@ armwave.c:762:     if(ret != Success) {
 4767              		.loc 1 762 7 is_stmt 0 view .LVU1231
 4768 16a0 004050E2 		subs	r4, r0, #0	@ n,
 4769 16a4 5D00001A 		bne	.L243		@,
 763:armwave.c     ****         printf("Error: Fatal X11: Unable to query XVideo extension (%d).  Is it configured correctl
 764:armwave.c     ****         exit(-1);
 765:armwave.c     ****     }
 766:armwave.c     ****     
 767:armwave.c     ****     // Use the last port available
 768:armwave.c     ****     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4770              		.loc 1 768 5 is_stmt 1 view .LVU1232
 4771              	@ armwave.c:768:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4772              		.loc 1 768 19 is_stmt 0 view .LVU1233
 4773 16a8 24109DE5 		ldr	r1, [sp, #36]	@ p_num_adaptors.54_13, p_num_adaptors
 4774              	@ armwave.c:768:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4775              		.loc 1 768 39 view .LVU1234
 4776 16ac 28309DE5 		ldr	r3, [sp, #40]	@ ai, ai
 4777              	@ armwave.c:768:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4778              		.loc 1 768 15 view .LVU1235
 4779 16b0 94919FE5 		ldr	r9, .L246+4	@ tmp249,
 4780              	@ armwave.c:768:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4781              		.loc 1 768 39 view .LVU1236
 4782 16b4 812161E0 		rsb	r2, r1, r1, lsl #3	@ tmp194, p_num_adaptors.54_13, p_num_adaptors.54_13,
 4783 16b8 023183E0 		add	r3, r3, r2, lsl #2	@ tmp196, ai, tmp194,
 4784 16bc 1C5013E5 		ldr	r5, [r3, #-28]	@ _19, _17->base_id
 4785              	@ armwave.c:769:     if(g_xv_port == -1) {
 769:armwave.c     ****     if(g_xv_port == -1) {
 4786              		.loc 1 769 7 view .LVU1237
 4787 16c0 010075E3 		cmn	r5, #1	@ _19,
 4788              	@ armwave.c:768:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 768:armwave.c     ****     if(g_xv_port == -1) {
 4789              		.loc 1 768 15 view .LVU1238
 4790 16c4 005089E5 		str	r5, [r9]	@ _19, g_xv_port
 4791              		.loc 1 769 5 is_stmt 1 view .LVU1239
 4792              	@ armwave.c:769:     if(g_xv_port == -1) {
 4793              		.loc 1 769 7 is_stmt 0 view .LVU1240
 4794 16c8 4F00000A 		beq	.L244		@,
 770:armwave.c     ****         printf("Error: Fatal X11: Unable to use the port %d\n\n", p_num_adaptors - 1);
 771:armwave.c     ****         exit(-1);
 772:armwave.c     ****     }
 773:armwave.c     ****     
 774:armwave.c     ****     /*
 775:armwave.c     ****      * Create the shared image and attach to it.
 776:armwave.c     ****      */
 777:armwave.c     ****     printf("Attaching XvShm...\n");
 4795              		.loc 1 777 5 is_stmt 1 view .LVU1241
 4796              	@ armwave.c:779:     if(g_yuv_image != NULL) {
 778:armwave.c     ****     
 779:armwave.c     ****     if(g_yuv_image != NULL) {
 4797              		.loc 1 779 20 is_stmt 0 view .LVU1242
 4798 16cc 7C519FE5 		ldr	r5, .L246+8	@ tmp252,
 4799              	@ armwave.c:777:     printf("Attaching XvShm...\n");
 777:armwave.c     ****     
 4800              		.loc 1 777 5 view .LVU1243
 4801 16d0 7C019FE5 		ldr	r0, .L246+12	@,
 4802              	.LVL274:
 777:armwave.c     ****     
 4803              		.loc 1 777 5 view .LVU1244
 4804 16d4 FEFFFFEB 		bl	puts		@
 4805              	.LVL275:
 4806              		.loc 1 779 5 is_stmt 1 view .LVU1245
 4807              	@ armwave.c:779:     if(g_yuv_image != NULL) {
 4808              		.loc 1 779 20 is_stmt 0 view .LVU1246
 4809 16d8 040095E5 		ldr	r0, [r5, #4]	@ g_yuv_image.58_21, g_yuv_image
 4810              	@ armwave.c:779:     if(g_yuv_image != NULL) {
 4811              		.loc 1 779 7 view .LVU1247
 4812 16dc 000050E3 		cmp	r0, #0	@ g_yuv_image.58_21,
 4813 16e0 0100000A 		beq	.L228		@,
 780:armwave.c     ****         // Unsure if this is reasonable
 781:armwave.c     ****         XFree(g_yuv_image);
 4814              		.loc 1 781 9 is_stmt 1 view .LVU1248
 4815 16e4 FEFFFFEB 		bl	XFree		@
 4816              	.LVL276:
 782:armwave.c     ****         g_yuv_image = NULL;
 4817              		.loc 1 782 9 view .LVU1249
 4818              	@ armwave.c:782:         g_yuv_image = NULL;
 4819              		.loc 1 782 21 is_stmt 0 view .LVU1250
 4820 16e8 044085E5 		str	r4, [r5, #4]	@ n, g_yuv_image
 4821              	.L228:
 783:armwave.c     ****     }
 784:armwave.c     ****     
 785:armwave.c     ****     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_width, tex_height, &
 4822              		.loc 1 785 5 is_stmt 1 view .LVU1251
 4823              	@ armwave.c:785:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 4824              		.loc 1 785 19 is_stmt 0 view .LVU1252
 4825 16ec 64819FE5 		ldr	r8, .L246+16	@ tmp250,
 4826 16f0 40048DE8 		stm	sp, {r6, r10}	@,,
 4827 16f4 0030A0E3 		mov	r3, #0	@,
 4828 16f8 5C219FE5 		ldr	r2, .L246+20	@,
 4829 16fc 001099E5 		ldr	r1, [r9]	@, g_xv_port
 4830 1700 08808DE5 		str	r8, [sp, #8]	@ tmp250,
 4831 1704 000097E5 		ldr	r0, [r7]	@, g_dpy
 4832 1708 FEFFFFEB 		bl	XvShmCreateImage		@
 4833              	.LVL277:
 4834              	@ armwave.c:786:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 786:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4835              		.loc 1 786 27 view .LVU1253
 4836 170c 4C219FE5 		ldr	r2, .L246+24	@,
 4837              	@ armwave.c:785:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 785:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4838              		.loc 1 785 19 view .LVU1254
 4839 1710 0030A0E1 		mov	r3, r0	@ _25,
 4840              	@ armwave.c:786:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 4841              		.loc 1 786 27 view .LVU1255
 4842 1714 0C1090E5 		ldr	r1, [r0, #12]	@, _25->data_size
 4843 1718 0000A0E3 		mov	r0, #0	@,
 4844              	@ armwave.c:785:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 785:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4845              		.loc 1 785 17 view .LVU1256
 4846 171c 043085E5 		str	r3, [r5, #4]	@ _25, g_yuv_image
 4847              		.loc 1 786 5 is_stmt 1 view .LVU1257
 4848              	@ armwave.c:786:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 4849              		.loc 1 786 27 is_stmt 0 view .LVU1258
 4850 1720 FEFFFFEB 		bl	shmget		@
 4851              	.LVL278:
 4852              	@ armwave.c:787:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 787:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4853              		.loc 1 787 49 view .LVU1259
 4854 1724 0020A0E3 		mov	r2, #0	@,
 4855 1728 0210A0E1 		mov	r1, r2	@,
 4856              	@ armwave.c:787:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4857              		.loc 1 787 40 view .LVU1260
 4858 172c 046095E5 		ldr	r6, [r5, #4]	@ g_yuv_image.64_29, g_yuv_image
 4859              	.LVL279:
 4860              	@ armwave.c:786:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 786:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4861              		.loc 1 786 25 view .LVU1261
 4862 1730 040088E5 		str	r0, [r8, #4]	@, g_yuv_shminfo.shmid
 4863              		.loc 1 787 5 is_stmt 1 view .LVU1262
 4864              	@ armwave.c:787:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4865              		.loc 1 787 49 is_stmt 0 view .LVU1263
 4866 1734 FEFFFFEB 		bl	shmat		@
 4867              	.LVL280:
 4868              	@ armwave.c:790:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 788:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 789:armwave.c     ****     
 790:armwave.c     ****     for(n = 0; n < g_yuv_image->num_planes; n++) {
 4869              		.loc 1 790 31 view .LVU1264
 4870 1738 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.69_39, g_yuv_image
 4871              	@ armwave.c:788:     g_yuv_shminfo.readOnly = False;
 788:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 4872              		.loc 1 788 28 view .LVU1265
 4873 173c 0020A0E3 		mov	r2, #0	@ tmp218,
 4874 1740 0C2088E5 		str	r2, [r8, #12]	@ tmp218, g_yuv_shminfo.readOnly
 4875              	@ armwave.c:790:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 4876              		.loc 1 790 5 view .LVU1266
 4877 1744 101093E5 		ldr	r1, [r3, #16]	@ g_yuv_image.69_106->num_planes, g_yuv_image.69_106->num_planes
 4878 1748 020051E1 		cmp	r1, r2	@ g_yuv_image.69_106->num_planes,
 4879              	@ armwave.c:787:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 787:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4880              		.loc 1 787 47 view .LVU1267
 4881 174c 1C0086E5 		str	r0, [r6, #28]	@ _30, g_yuv_image.64_29->data
 4882              	@ armwave.c:787:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 787:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4883              		.loc 1 787 27 view .LVU1268
 4884 1750 080088E5 		str	r0, [r8, #8]	@ _30, g_yuv_shminfo.shmaddr
 788:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 4885              		.loc 1 788 5 is_stmt 1 view .LVU1269
 4886              		.loc 1 790 5 view .LVU1270
 4887              	.LVL281:
 4888              		.loc 1 790 5 is_stmt 0 view .LVU1271
 4889 1754 0C0000DA 		ble	.L229		@,
 4890              	@ armwave.c:791:         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[
 791:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4891              		.loc 1 791 9 view .LVU1272
 4892 1758 04619FE5 		ldr	r6, .L246+28	@ tmp253,
 4893              	.LVL282:
 4894              	.L230:
 4895              		.loc 1 791 9 is_stmt 1 discriminator 3 view .LVU1273
 4896 175c 140093E5 		ldr	r0, [r3, #20]	@ g_yuv_image.69_108->pitches, g_yuv_image.69_108->pitches
 4897 1760 182093E5 		ldr	r2, [r3, #24]	@ g_yuv_image.69_108->offsets, g_yuv_image.69_108->offsets
 4898 1764 0410A0E1 		mov	r1, r4	@, n
 4899 1768 043190E7 		ldr	r3, [r0, r4, lsl #2]	@, *_37
 4900 176c 042192E7 		ldr	r2, [r2, r4, lsl #2]	@, *_34
 4901 1770 0600A0E1 		mov	r0, r6	@, tmp253
 4902 1774 FEFFFFEB 		bl	printf		@
 4903              	.LVL283:
 4904              	@ armwave.c:790:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 790:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4905              		.loc 1 790 31 is_stmt 0 discriminator 3 view .LVU1274
 4906 1778 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.69_39, g_yuv_image
 4907              	@ armwave.c:790:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 790:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4908              		.loc 1 790 46 discriminator 3 view .LVU1275
 4909 177c 014084E2 		add	r4, r4, #1	@ n, n,
 4910              	.LVL284:
 4911              	@ armwave.c:790:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 790:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4912              		.loc 1 790 5 discriminator 3 view .LVU1276
 4913 1780 102093E5 		ldr	r2, [r3, #16]	@ g_yuv_image.69_39->num_planes, g_yuv_image.69_39->num_planes
 4914 1784 040052E1 		cmp	r2, r4	@ g_yuv_image.69_39->num_planes, n
 4915 1788 F3FFFFCA 		bgt	.L230		@,
 4916              	.LVL285:
 4917              	.L229:
 792:armwave.c     ****     }
 793:armwave.c     ****     
 794:armwave.c     ****     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4918              		.loc 1 794 5 is_stmt 1 view .LVU1277
 4919              	@ armwave.c:794:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4920              		.loc 1 794 9 is_stmt 0 view .LVU1278
 4921 178c C4109FE5 		ldr	r1, .L246+16	@,
 4922 1790 000097E5 		ldr	r0, [r7]	@, g_dpy
 4923 1794 FEFFFFEB 		bl	XShmAttach		@
 4924              	.LVL286:
 4925              	@ armwave.c:794:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4926              		.loc 1 794 7 view .LVU1279
 4927 1798 000050E3 		cmp	r0, #0	@,
 4928 179c 1600000A 		beq	.L245		@,
 795:armwave.c     ****         printf("Error: Fatal X11: XShmAttached failed\n");
 796:armwave.c     ****         exit (-1);
 797:armwave.c     ****     }
 798:armwave.c     ****     
 799:armwave.c     ****     printf("%d bytes for XvImage, shmid %d, xv_port %d\n", g_yuv_image->data_size, g_yuv_shminfo.sh
 4929              		.loc 1 799 5 is_stmt 1 view .LVU1280
 4930 17a0 041095E5 		ldr	r1, [r5, #4]	@ g_yuv_image, g_yuv_image
 4931 17a4 003099E5 		ldr	r3, [r9]	@, g_xv_port
 4932 17a8 042098E5 		ldr	r2, [r8, #4]	@, g_yuv_shminfo.shmid
 4933 17ac 0C1091E5 		ldr	r1, [r1, #12]	@, g_yuv_image.71_43->data_size
 4934 17b0 B0009FE5 		ldr	r0, .L246+32	@,
 4935 17b4 FEFFFFEB 		bl	printf		@
 4936              	.LVL287:
 800:armwave.c     ****     
 801:armwave.c     ****     // Create the GC
 802:armwave.c     ****     if(g_gc != NULL) {
 4937              		.loc 1 802 5 view .LVU1281
 4938              	@ armwave.c:802:     if(g_gc != NULL) {
 4939              		.loc 1 802 13 is_stmt 0 view .LVU1282
 4940 17b8 081095E5 		ldr	r1, [r5, #8]	@ g_gc.73_47, g_gc
 4941              	@ armwave.c:802:     if(g_gc != NULL) {
 4942              		.loc 1 802 7 view .LVU1283
 4943 17bc 000051E3 		cmp	r1, #0	@ g_gc.73_47,
 4944 17c0 0100000A 		beq	.L232		@,
 803:armwave.c     ****         XFreeGC(g_dpy, g_gc);
 4945              		.loc 1 803 9 is_stmt 1 view .LVU1284
 4946 17c4 000097E5 		ldr	r0, [r7]	@, g_dpy
 4947 17c8 FEFFFFEB 		bl	XFreeGC		@
 4948              	.LVL288:
 4949              	.L232:
 804:armwave.c     ****     }
 805:armwave.c     ****     
 806:armwave.c     ****     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4950              		.loc 1 806 5 view .LVU1285
 4951              	@ armwave.c:806:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4952              		.loc 1 806 12 is_stmt 0 view .LVU1286
 4953 17cc 000097E5 		ldr	r0, [r7]	@, g_dpy
 4954 17d0 2C308DE2 		add	r3, sp, #44	@,,
 4955 17d4 3020A0E3 		mov	r2, #48	@,
 4956 17d8 001095E5 		ldr	r1, [r5]	@, g_window
 4957 17dc FEFFFFEB 		bl	XCreateGC		@
 4958              	.LVL289:
 4959              	@ armwave.c:806:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4960              		.loc 1 806 10 view .LVU1287
 4961 17e0 080085E5 		str	r0, [r5, #8]	@, g_gc
 807:armwave.c     ****     gc_values.line_width = 1;
 4962              		.loc 1 807 5 is_stmt 1 view .LVU1288
 808:armwave.c     ****     gc_values.cap_style = CapNotLast;
 4963              		.loc 1 808 5 view .LVU1289
 4964              	@ armwave.c:809: }
 809:armwave.c     **** }
 4965              		.loc 1 809 1 is_stmt 0 view .LVU1290
 4966 17e4 88D08DE2 		add	sp, sp, #136	@,,
 4967              		.cfi_remember_state
 4968              		.cfi_def_cfa_offset 32
 4969              		@ sp needed	@
 4970 17e8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 4971              	.LVL290:
 4972              	.L241:
 4973              		.cfi_restore_state
 746:armwave.c     ****         exit(-1);
 4974              		.loc 1 746 9 is_stmt 1 view .LVU1291
 4975 17ec 78009FE5 		ldr	r0, .L246+36	@,
 4976 17f0 FEFFFFEB 		bl	puts		@
 4977              	.LVL291:
 747:armwave.c     ****     }
 4978              		.loc 1 747 9 view .LVU1292
 4979 17f4 0000E0E3 		mvn	r0, #0	@,
 4980 17f8 FEFFFFEB 		bl	exit		@
 4981              	.LVL292:
 4982              	.L245:
 795:armwave.c     ****         exit (-1);
 4983              		.loc 1 795 9 view .LVU1293
 4984 17fc 6C009FE5 		ldr	r0, .L246+40	@,
 4985 1800 FEFFFFEB 		bl	puts		@
 4986              	.LVL293:
 796:armwave.c     ****     }
 4987              		.loc 1 796 9 view .LVU1294
 4988 1804 0000E0E3 		mvn	r0, #0	@,
 4989 1808 FEFFFFEB 		bl	exit		@
 4990              	.LVL294:
 4991              	.L244:
 770:armwave.c     ****         exit(-1);
 4992              		.loc 1 770 9 view .LVU1295
 4993 180c 011041E2 		sub	r1, r1, #1	@, p_num_adaptors.54_13,
 4994 1810 5C009FE5 		ldr	r0, .L246+44	@,
 4995              	.LVL295:
 770:armwave.c     ****         exit(-1);
 4996              		.loc 1 770 9 is_stmt 0 view .LVU1296
 4997 1814 FEFFFFEB 		bl	printf		@
 4998              	.LVL296:
 771:armwave.c     ****     }
 4999              		.loc 1 771 9 is_stmt 1 view .LVU1297
 5000 1818 0500A0E1 		mov	r0, r5	@, _19
 5001 181c FEFFFFEB 		bl	exit		@
 5002              	.LVL297:
 5003              	.L243:
 763:armwave.c     ****         exit(-1);
 5004              		.loc 1 763 9 view .LVU1298
 5005 1820 0410A0E1 		mov	r1, r4	@, n
 5006 1824 4C009FE5 		ldr	r0, .L246+48	@,
 5007              	.LVL298:
 763:armwave.c     ****         exit(-1);
 5008              		.loc 1 763 9 is_stmt 0 view .LVU1299
 5009 1828 FEFFFFEB 		bl	printf		@
 5010              	.LVL299:
 764:armwave.c     ****     }
 5011              		.loc 1 764 9 is_stmt 1 view .LVU1300
 5012 182c 0000E0E3 		mvn	r0, #0	@,
 5013 1830 FEFFFFEB 		bl	exit		@
 5014              	.LVL300:
 5015              	.L242:
 755:armwave.c     ****         exit(-1);
 5016              		.loc 1 755 9 view .LVU1301
 5017 1834 0010A0E1 		mov	r1, r0	@, ret
 5018 1838 3C009FE5 		ldr	r0, .L246+52	@,
 5019              	.LVL301:
 755:armwave.c     ****         exit(-1);
 5020              		.loc 1 755 9 is_stmt 0 view .LVU1302
 5021 183c FEFFFFEB 		bl	printf		@
 5022              	.LVL302:
 756:armwave.c     ****     }
 5023              		.loc 1 756 9 is_stmt 1 view .LVU1303
 5024 1840 0000E0E3 		mvn	r0, #0	@,
 5025 1844 FEFFFFEB 		bl	exit		@
 5026              	.LVL303:
 5027              	.L247:
 5028              		.align	2
 5029              	.L246:
 5030 1848 00000000 		.word	g_dpy
 5031 184c 00000000 		.word	g_xv_port
 5032 1850 00000000 		.word	.LANCHOR1
 5033 1854 FC040000 		.word	.LC30
 5034 1858 00000000 		.word	g_yuv_shminfo
 5035 185c 59563132 		.word	842094169
 5036 1860 FF030000 		.word	1023
 5037 1864 10050000 		.word	.LC31
 5038 1868 60050000 		.word	.LC33
 5039 186c BC030000 		.word	.LC26
 5040 1870 38050000 		.word	.LC32
 5041 1874 CC040000 		.word	.LC29
 5042 1878 74040000 		.word	.LC28
 5043 187c 1C040000 		.word	.LC27
 5044              		.cfi_endproc
 5045              	.LFE81:
 5047              		.align	2
 5048              		.global	armwave_render_graticule
 5049              		.syntax unified
 5050              		.arm
 5051              		.fpu vfp
 5053              	armwave_render_graticule:
 5054              	.LFB82:
 810:armwave.c     **** 
 811:armwave.c     **** /*
 812:armwave.c     ****  * Render the graticule.
 813:armwave.c     ****  */
 814:armwave.c     **** void armwave_render_graticule()
 815:armwave.c     **** {
 5055              		.loc 1 815 1 view -0
 5056              		.cfi_startproc
 5057              		@ args = 0, pretend = 0, frame = 24
 5058              		@ frame_needed = 0, uses_anonymous_args = 0
 816:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5059              		.loc 1 816 5 view .LVU1305
 817:armwave.c     ****     float gr_size;
 5060              		.loc 1 817 5 view .LVU1306
 818:armwave.c     ****     m = g_armwave_state.frame_margin;
 5061              		.loc 1 818 5 view .LVU1307
 5062              	@ armwave.c:815: {
 815:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5063              		.loc 1 815 1 is_stmt 0 view .LVU1308
 5064 1880 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 5065              		.cfi_def_cfa_offset 36
 5066              		.cfi_offset 4, -36
 5067              		.cfi_offset 5, -32
 5068              		.cfi_offset 6, -28
 5069              		.cfi_offset 7, -24
 5070              		.cfi_offset 8, -20
 5071              		.cfi_offset 9, -16
 5072              		.cfi_offset 10, -12
 5073              		.cfi_offset 11, -8
 5074              		.cfi_offset 14, -4
 5075 1884 028B2DED 		vpush.64	{d8}	@
 5076              		.cfi_def_cfa_offset 44
 5077              		.cfi_offset 80, -44
 5078              		.cfi_offset 81, -40
 5079              	@ armwave.c:819:     w = g_canvas_dims.w - m;
 819:armwave.c     ****     w = g_canvas_dims.w - m;
 5080              		.loc 1 819 22 view .LVU1309
 5081 1888 9C329FE5 		ldr	r3, .L270+4	@ tmp177,
 5082              	@ armwave.c:818:     m = g_armwave_state.frame_margin;
 818:armwave.c     ****     m = g_armwave_state.frame_margin;
 5083              		.loc 1 818 7 view .LVU1310
 5084 188c 9C629FE5 		ldr	r6, .L270+8	@ tmp261,
 5085              	@ armwave.c:827:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 820:armwave.c     ****     h = g_canvas_dims.h - m;
 821:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 822:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 823:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
 824:armwave.c     ****     ch = h - m;
 825:armwave.c     ****     cw = w - m;
 826:armwave.c     ****     
 827:armwave.c     ****     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5086              		.loc 1 827 5 view .LVU1311
 5087 1890 9C229FE5 		ldr	r2, .L270+12	@ tmp181,
 5088 1894 9C529FE5 		ldr	r5, .L270+16	@ tmp263,
 5089 1898 9C729FE5 		ldr	r7, .L270+20	@ tmp262,
 5090              	@ armwave.c:818:     m = g_armwave_state.frame_margin;
 818:armwave.c     ****     w = g_canvas_dims.w - m;
 5091              		.loc 1 818 7 view .LVU1312
 5092 189c 589096E5 		ldr	r9, [r6, #88]	@ m, g_armwave_state.frame_margin
 5093              	.LVL304:
 819:armwave.c     ****     w = g_canvas_dims.w - m;
 5094              		.loc 1 819 5 is_stmt 1 view .LVU1313
 5095              	@ armwave.c:819:     w = g_canvas_dims.w - m;
 819:armwave.c     ****     w = g_canvas_dims.w - m;
 5096              		.loc 1 819 7 is_stmt 0 view .LVU1314
 5097 18a0 00C093E5 		ldr	ip, [r3]	@ g_canvas_dims.w, g_canvas_dims.w
 5098              	@ armwave.c:815: {
 815:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5099              		.loc 1 815 1 view .LVU1315
 5100 18a4 2CD04DE2 		sub	sp, sp, #44	@,,
 5101              		.cfi_def_cfa_offset 88
 5102              	@ armwave.c:827:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5103              		.loc 1 827 5 view .LVU1316
 5104 18a8 002092E5 		ldr	r2, [r2]	@, g_grat_colour.pixel
 5105              	@ armwave.c:819:     w = g_canvas_dims.w - m;
 819:armwave.c     ****     h = g_canvas_dims.h - m;
 5106              		.loc 1 819 7 view .LVU1317
 5107 18ac 09C04CE0 		sub	ip, ip, r9	@ w, g_canvas_dims.w, m
 5108              	@ armwave.c:827:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5109              		.loc 1 827 5 view .LVU1318
 5110 18b0 081095E5 		ldr	r1, [r5, #8]	@, g_gc
 5111 18b4 000097E5 		ldr	r0, [r7]	@, g_dpy
 5112              	@ armwave.c:820:     h = g_canvas_dims.h - m;
 820:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5113              		.loc 1 820 22 view .LVU1319
 5114 18b8 044093E5 		ldr	r4, [r3, #4]	@ _2, g_canvas_dims.h
 5115              	@ armwave.c:819:     w = g_canvas_dims.w - m;
 819:armwave.c     ****     h = g_canvas_dims.h - m;
 5116              		.loc 1 819 7 view .LVU1320
 5117 18bc 1CC08DE5 		str	ip, [sp, #28]	@ w, %sfp
 5118              	.LVL305:
 820:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5119              		.loc 1 820 5 is_stmt 1 view .LVU1321
 5120              	@ armwave.c:821:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 821:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5121              		.loc 1 821 35 is_stmt 0 view .LVU1322
 5122 18c0 1B8A96ED 		vldr.32	s16, [r6, #108]	@ _3, g_armwave_state.subdiv_frac
 5123              	@ armwave.c:827:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5124              		.loc 1 827 5 view .LVU1323
 5125 18c4 FEFFFFEB 		bl	XSetForeground		@
 5126              	.LVL306:
 5127              	@ armwave.c:829:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 828:armwave.c     ****     
 829:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5128              		.loc 1 829 23 view .LVU1324
 5129 18c8 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5130              	@ armwave.c:820:     h = g_canvas_dims.h - m;
 820:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5131              		.loc 1 820 7 view .LVU1325
 5132 18cc 092044E0 		sub	r2, r4, r9	@ h, _2, m
 5133              	@ armwave.c:829:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5134              		.loc 1 829 7 view .LVU1326
 5135 18d0 010A13E3 		tst	r3, #4096	@ _8,
 5136              	@ armwave.c:820:     h = g_canvas_dims.h - m;
 820:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5137              		.loc 1 820 7 view .LVU1327
 5138 18d4 14208DE5 		str	r2, [sp, #20]	@ h, %sfp
 5139              	.LVL307:
 821:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5140              		.loc 1 821 5 is_stmt 1 view .LVU1328
 822:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
 5141              		.loc 1 822 5 view .LVU1329
 823:armwave.c     ****     ch = h - m;
 5142              		.loc 1 823 5 view .LVU1330
 824:armwave.c     ****     cw = w - m;
 5143              		.loc 1 824 5 view .LVU1331
 825:armwave.c     ****     
 5144              		.loc 1 825 5 view .LVU1332
 827:armwave.c     ****     
 5145              		.loc 1 827 5 view .LVU1333
 5146              		.loc 1 829 5 view .LVU1334
 5147              	@ armwave.c:829:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5148              		.loc 1 829 7 is_stmt 0 view .LVU1335
 5149 18d8 6E00001A 		bne	.L268		@,
 5150              	.LVL308:
 5151              	.L249:
 830:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, w, m);
 831:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 832:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 833:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, w, m, w, h);
 834:armwave.c     ****     }
 835:armwave.c     ****     
 836:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 5152              		.loc 1 836 5 is_stmt 1 view .LVU1336
 5153              	@ armwave.c:836:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 5154              		.loc 1 836 7 is_stmt 0 view .LVU1337
 5155 18dc 020A13E3 		tst	r3, #8192	@ _8,
 5156 18e0 6900000A 		beq	.L248		@,
 837:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5157              		.loc 1 837 9 is_stmt 1 view .LVU1338
 5158              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 5159              		.loc 1 838 9 is_stmt 0 view .LVU1339
 5160 18e4 5C2096E5 		ldr	r2, [r6, #92]	@ tmp290, g_armwave_state.n_hdiv
 5161              	@ armwave.c:837:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 837:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5162              		.loc 1 837 17 view .LVU1340
 5163 18e8 077A9DED 		vldr.32	s14, [sp, #28]	@ int	@ w, %sfp
 5164              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 5165              		.loc 1 838 9 view .LVU1341
 5166 18ec 000052E3 		cmp	r2, #0	@ tmp290,
 5167              	@ armwave.c:837:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 837:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5168              		.loc 1 837 24 view .LVU1342
 5169 18f0 902A07EE 		vmov	s15, r2	@ int	@ tmp291,
 5170              	@ armwave.c:837:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 837:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5171              		.loc 1 837 17 view .LVU1343
 5172 18f4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, w
 5173              	@ armwave.c:837:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 837:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5174              		.loc 1 837 24 view .LVU1344
 5175 18f8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp217, tmp291
 5176              	@ armwave.c:837:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 837:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5177              		.loc 1 837 17 view .LVU1345
 5178 18fc 278AC7EE 		vdiv.f32	s17, s14, s15	@ gr_size, tmp216, tmp217
 5179              	.LVL309:
 5180              		.loc 1 838 9 is_stmt 1 view .LVU1346
 5181              		.loc 1 838 9 is_stmt 0 view .LVU1347
 5182 1900 440000DA 		ble	.L258		@,
 5183              	@ armwave.c:821:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 821:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5184              		.loc 1 821 18 view .LVU1348
 5185 1904 877A9FED 		vldr.32	s14, .L270	@ tmp224,
 5186              	@ armwave.c:847:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 839:armwave.c     ****             if(i > 0) {
 840:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, p, m, p, h);
 841:armwave.c     ****             }
 842:armwave.c     ****             
 843:armwave.c     ****             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 844:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 845:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 846:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 847:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5187              		.loc 1 847 66 view .LVU1349
 5188 1908 A44F84E0 		add	r4, r4, r4, lsr #31	@ tmp226, _2, _2,
 5189              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****             if(i > 0) {
 5190              		.loc 1 838 22 view .LVU1350
 5191 190c 10908DE5 		str	r9, [sp, #16]	@ m, %sfp
 5192              	@ armwave.c:847:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 5193              		.loc 1 847 66 view .LVU1351
 5194 1910 C440A0E1 		asr	r4, r4, #1	@ tmp227, tmp226,
 5195              	@ armwave.c:847:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 5196              		.loc 1 847 21 view .LVU1352
 5197 1914 082044E2 		sub	r2, r4, #8	@ _42, tmp227,
 5198 1918 24208DE5 		str	r2, [sp, #36]	@ _42, %sfp
 5199 191c 08B084E2 		add	fp, r4, #8	@ _43, tmp227,
 5200              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****             if(i > 0) {
 5201              		.loc 1 838 15 view .LVU1353
 5202 1920 0080A0E3 		mov	r8, #0	@ i,
 5203 1924 18908DE5 		str	r9, [sp, #24]	@ m, %sfp
 5204              	@ armwave.c:821:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 821:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5205              		.loc 1 821 18 view .LVU1354
 5206 1928 087AC7EE 		vdiv.f32	s15, s14, s16	@ tmp223, tmp224, _3
 5207              	@ armwave.c:821:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 821:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5208              		.loc 1 821 11 view .LVU1355
 5209 192c E77AFDEE 		vcvt.s32.f32	s15, s15	@ n_sub, tmp223
 5210 1930 90AA17EE 		vmov	r10, s15	@ int	@ n_sub, n_sub
 5211 1934 140000EA 		b	.L254		@
 5212              	.LVL310:
 5213              	.L259:
 5214              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****             if(i > 0) {
 5215              		.loc 1 838 62 view .LVU1356
 5216 1938 888A38EE 		vadd.f32	s16, s17, s16	@ tmp236, gr_size, _157
 5217              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****             if(i > 0) {
 5218              		.loc 1 838 9 view .LVU1357
 5219 193c 5C3096E5 		ldr	r3, [r6, #92]	@ g_armwave_state.n_hdiv, g_armwave_state.n_hdiv
 5220              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****             if(i > 0) {
 5221              		.loc 1 838 56 view .LVU1358
 5222 1940 018088E2 		add	r8, r8, #1	@ i, i,
 5223              	.LVL311:
 5224              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****             if(i > 0) {
 5225              		.loc 1 838 9 view .LVU1359
 5226 1944 080053E1 		cmp	r3, r8	@ g_armwave_state.n_hdiv, i
 5227              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****             if(i > 0) {
 5228              		.loc 1 838 62 view .LVU1360
 5229 1948 C87AFDEE 		vcvt.s32.f32	s15, s16	@ p, tmp236
 5230 194c 047ACDED 		vstr.32	s15, [sp, #16]	@ int	@ p, %sfp
 5231              	.LVL312:
 5232              	@ armwave.c:838:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 838:armwave.c     ****             if(i > 0) {
 5233              		.loc 1 838 9 view .LVU1361
 5234 1950 2F0000DA 		ble	.L269		@,
 839:armwave.c     ****             if(i > 0) {
 5235              		.loc 1 839 13 is_stmt 1 view .LVU1362
 5236              	@ armwave.c:839:             if(i > 0) {
 839:armwave.c     ****             if(i > 0) {
 5237              		.loc 1 839 15 is_stmt 0 view .LVU1363
 5238 1954 000058E3 		cmp	r8, #0	@ i,
 5239 1958 0A0000DA 		ble	.L255		@,
 840:armwave.c     ****             }
 5240              		.loc 1 840 17 is_stmt 1 view .LVU1364
 5241 195c 14309DE5 		ldr	r3, [sp, #20]	@ h, %sfp
 5242 1960 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5243 1964 08308DE5 		str	r3, [sp, #8]	@ h,
 5244 1968 10309DE5 		ldr	r3, [sp, #16]	@ p, %sfp
 5245 196c 001095E5 		ldr	r1, [r5]	@, g_window
 5246 1970 04308DE5 		str	r3, [sp, #4]	@ p,
 5247 1974 18309DE5 		ldr	r3, [sp, #24]	@ m, %sfp
 5248 1978 000097E5 		ldr	r0, [r7]	@, g_dpy
 5249 197c 00308DE5 		str	r3, [sp]	@ m,
 5250 1980 10309DE5 		ldr	r3, [sp, #16]	@, %sfp
 5251 1984 FEFFFFEB 		bl	XDrawLine		@
 5252              	.LVL313:
 5253              	.L255:
 840:armwave.c     ****             }
 5254              		.loc 1 840 17 is_stmt 0 view .LVU1365
 5255 1988 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5256              	.LVL314:
 5257              	.L254:
 843:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 5258              		.loc 1 843 13 is_stmt 1 view .LVU1366
 5259 198c 047ADDED 		vldr.32	s15, [sp, #16]	@ int	@ p, %sfp
 5260              	@ armwave.c:843:             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 843:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 5261              		.loc 1 843 15 is_stmt 0 view .LVU1367
 5262 1990 020913E3 		tst	r3, #32768	@ _8,
 5263 1994 E78AB8EE 		vcvt.f32.s32	s16, s15	@ _157, p
 5264 1998 E6FFFF0A 		beq	.L259		@,
 5265              	.LVL315:
 5266              	@ armwave.c:844:                 for(j = 1; j < n_sub; j++) {
 844:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5267              		.loc 1 844 17 view .LVU1368
 5268 199c 01005AE3 		cmp	r10, #1	@ n_sub,
 5269 19a0 E4FFFFDA 		ble	.L259		@,
 5270              	@ armwave.c:844:                 for(j = 1; j < n_sub; j++) {
 844:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5271              		.loc 1 844 23 view .LVU1369
 5272 19a4 24909DE5 		ldr	r9, [sp, #36]	@ _42, %sfp
 5273 19a8 0140A0E3 		mov	r4, #1	@ j,
 5274 19ac 20808DE5 		str	r8, [sp, #32]	@ i, %sfp
 5275              	.LVL316:
 5276              	.L260:
 845:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5277              		.loc 1 845 21 is_stmt 1 discriminator 3 view .LVU1370
 5278              	@ armwave.c:845:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 845:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5279              		.loc 1 845 38 is_stmt 0 discriminator 3 view .LVU1371
 5280 19b0 1B7AD6ED 		vldr.32	s15, [r6, #108]	@ g_armwave_state.subdiv_frac, g_armwave_state.subdiv_frac
 5281              	@ armwave.c:845:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 845:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5282              		.loc 1 845 68 discriminator 3 view .LVU1372
 5283 19b4 104A07EE 		vmov	s14, r4	@ int	@ j, j
 5284              	@ armwave.c:845:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 845:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5285              		.loc 1 845 27 discriminator 3 view .LVU1373
 5286 19b8 486AF0EE 		vmov.f32	s13, s16	@ tmp244, _157
 5287              	@ armwave.c:846:                     printf("%3d, %3d\n", q, p);
 846:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5288              		.loc 1 846 21 discriminator 3 view .LVU1374
 5289 19bc 10209DE5 		ldr	r2, [sp, #16]	@, %sfp
 5290              	@ armwave.c:845:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 845:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5291              		.loc 1 845 38 discriminator 3 view .LVU1375
 5292 19c0 A77A68EE 		vmul.f32	s15, s17, s15	@ tmp240, gr_size, g_armwave_state.subdiv_frac
 5293              	@ armwave.c:845:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 845:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5294              		.loc 1 845 68 discriminator 3 view .LVU1376
 5295 19c4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp242, j
 5296              	@ armwave.c:846:                     printf("%3d, %3d\n", q, p);
 846:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5297              		.loc 1 846 21 discriminator 3 view .LVU1377
 5298 19c8 70019FE5 		ldr	r0, .L270+24	@,
 5299              	@ armwave.c:844:                 for(j = 1; j < n_sub; j++) {
 844:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5300              		.loc 1 844 40 discriminator 3 view .LVU1378
 5301 19cc 014084E2 		add	r4, r4, #1	@ j, j,
 5302              	.LVL317:
 5303              	@ armwave.c:845:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 845:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5304              		.loc 1 845 27 discriminator 3 view .LVU1379
 5305 19d0 876A47EE 		vmla.f32	s13, s15, s14	@ tmp244, tmp240, tmp242
 5306              	@ armwave.c:845:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 845:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5307              		.loc 1 845 23 discriminator 3 view .LVU1380
 5308 19d4 E67AFDEE 		vcvt.s32.f32	s15, s13	@ q, tmp244
 5309 19d8 908A17EE 		vmov	r8, s15	@ int	@ q, q
 5310              	.LVL318:
 846:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5311              		.loc 1 846 21 is_stmt 1 discriminator 3 view .LVU1381
 5312 19dc 901A17EE 		vmov	r1, s15	@ int	@, q
 5313 19e0 FEFFFFEB 		bl	printf		@
 5314              	.LVL319:
 5315              		.loc 1 847 21 discriminator 3 view .LVU1382
 5316 19e4 08B08DE5 		str	fp, [sp, #8]	@ _43,
 5317 19e8 04808DE5 		str	r8, [sp, #4]	@ q,
 5318 19ec 0830A0E1 		mov	r3, r8	@, q
 5319 19f0 00908DE5 		str	r9, [sp]	@ _42,
 5320 19f4 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5321 19f8 001095E5 		ldr	r1, [r5]	@, g_window
 5322 19fc 000097E5 		ldr	r0, [r7]	@, g_dpy
 5323 1a00 FEFFFFEB 		bl	XDrawLine		@
 5324              	.LVL320:
 5325              	@ armwave.c:844:                 for(j = 1; j < n_sub; j++) {
 844:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5326              		.loc 1 844 17 is_stmt 0 discriminator 3 view .LVU1383
 5327 1a04 04005AE1 		cmp	r10, r4	@ n_sub, j
 5328 1a08 E8FFFF1A 		bne	.L260		@,
 5329 1a0c 20809DE5 		ldr	r8, [sp, #32]	@ i, %sfp
 5330              	.LVL321:
 844:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5331              		.loc 1 844 17 discriminator 3 view .LVU1384
 5332 1a10 C8FFFFEA 		b	.L259		@
 5333              	.LVL322:
 5334              	.L269:
 844:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5335              		.loc 1 844 17 discriminator 3 view .LVU1385
 5336 1a14 18909DE5 		ldr	r9, [sp, #24]	@ m, %sfp
 5337              	.LVL323:
 5338              	.L258:
 848:armwave.c     ****                 }
 849:armwave.c     ****             }
 850:armwave.c     ****         }
 851:armwave.c     ****         
 852:armwave.c     ****         gr_size = (h / (float)g_armwave_state.n_vdiv);
 5339              		.loc 1 852 9 is_stmt 1 view .LVU1386
 5340              	@ armwave.c:852:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 5341              		.loc 1 852 22 is_stmt 0 view .LVU1387
 5342 1a18 057ADDED 		vldr.32	s15, [sp, #20]	@ int	@ h, %sfp
 5343              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 853:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5344              		.loc 1 853 9 view .LVU1388
 5345 1a1c 603096E5 		ldr	r3, [r6, #96]	@ tmp295, g_armwave_state.n_vdiv
 5346 1a20 010053E3 		cmp	r3, #1	@ tmp295,
 5347              	@ armwave.c:852:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 852:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5348              		.loc 1 852 22 view .LVU1389
 5349 1a24 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp219, h
 5350              	@ armwave.c:852:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 852:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5351              		.loc 1 852 24 view .LVU1390
 5352 1a28 187AD6ED 		vldr.32	s15, [r6, #96]	@ int	@ tmp294, g_armwave_state.n_vdiv
 5353              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5354              		.loc 1 853 15 view .LVU1391
 5355 1a2c 0140A0C3 		movgt	r4, #1	@ i,
 5356 1a30 1C809DC5 		ldrgt	r8, [sp, #28]	@ w, %sfp
 5357              	@ armwave.c:852:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 852:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5358              		.loc 1 852 24 view .LVU1392
 5359 1a34 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, tmp294
 5360              	@ armwave.c:852:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 852:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5361              		.loc 1 852 17 view .LVU1393
 5362 1a38 278AC7EE 		vdiv.f32	s17, s14, s15	@ gr_size, tmp219, tmp220
 5363              	.LVL324:
 5364              		.loc 1 853 9 is_stmt 1 view .LVU1394
 5365              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5366              		.loc 1 853 26 is_stmt 0 view .LVU1395
 5367 1a3c 909A07EE 		vmov	s15, r9	@ int	@ m, m
 5368 1a40 E78AB8EE 		vcvt.f32.s32	s16, s15	@ tmp221, m
 5369 1a44 288A38EE 		vadd.f32	s16, s16, s17	@ tmp222, tmp221, gr_size
 5370              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5371              		.loc 1 853 22 view .LVU1396
 5372 1a48 C88ABDEE 		vcvt.s32.f32	s16, s16	@ p, tmp222
 5373              	.LVL325:
 5374              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5375              		.loc 1 853 9 view .LVU1397
 5376 1a4c 0E0000DA 		ble	.L248		@,
 5377              	.LVL326:
 5378              	.L252:
 854:armwave.c     ****             XDrawLine(g_dpy, g_window, g_gc, m, p, w, p);
 5379              		.loc 1 854 13 is_stmt 1 discriminator 3 view .LVU1398
 5380 1a50 028A8DED 		vstr.32	s16, [sp, #8]	@ int	@ p,
 5381 1a54 008A8DED 		vstr.32	s16, [sp]	@ int	@ p,
 5382 1a58 0930A0E1 		mov	r3, r9	@, m
 5383 1a5c 04808DE5 		str	r8, [sp, #4]	@ w,
 5384 1a60 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5385 1a64 001095E5 		ldr	r1, [r5]	@, g_window
 5386 1a68 000097E5 		ldr	r0, [r7]	@, g_dpy
 5387 1a6c FEFFFFEB 		bl	XDrawLine		@
 5388              	.LVL327:
 5389              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 853:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5390              		.loc 1 853 72 is_stmt 0 discriminator 3 view .LVU1399
 5391 1a70 C88AB8EE 		vcvt.f32.s32	s16, s16	@ tmp258, p
 5392              	.LVL328:
 5393              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 853:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5394              		.loc 1 853 9 discriminator 3 view .LVU1400
 5395 1a74 603096E5 		ldr	r3, [r6, #96]	@ g_armwave_state.n_vdiv, g_armwave_state.n_vdiv
 5396              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 853:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5397              		.loc 1 853 66 discriminator 3 view .LVU1401
 5398 1a78 014084E2 		add	r4, r4, #1	@ i, i,
 5399              	.LVL329:
 5400              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 853:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5401              		.loc 1 853 9 discriminator 3 view .LVU1402
 5402 1a7c 040053E1 		cmp	r3, r4	@ g_armwave_state.n_vdiv, i
 5403              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 853:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5404              		.loc 1 853 72 discriminator 3 view .LVU1403
 5405 1a80 288A38EE 		vadd.f32	s16, s16, s17	@ _56, tmp258, gr_size
 5406 1a84 C88ABDEE 		vcvt.s32.f32	s16, s16	@ p, _56
 5407              	.LVL330:
 5408              	@ armwave.c:853:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 853:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5409              		.loc 1 853 9 discriminator 3 view .LVU1404
 5410 1a88 F0FFFFCA 		bgt	.L252		@,
 5411              	.LVL331:
 5412              	.L248:
 5413              	@ armwave.c:871: }
 855:armwave.c     ****         }
 856:armwave.c     ****     }
 857:armwave.c     ****     
 858:armwave.c     ****     /*
 859:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 860:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 861:armwave.c     ****         
 862:armwave.c     ****         for(i = 0, p = m + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 863:armwave.c     ****             for(j = 0; j < n_sub; j++) {
 864:armwave.c     ****                 q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 865:armwave.c     ****                 printf("%3d, %3d\n", q, p);
 866:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, q, m + (ch / 2) - 16, q, m + (ch / 2) + 16);
 867:armwave.c     ****             }
 868:armwave.c     ****         }
 869:armwave.c     ****     }
 870:armwave.c     ****     */
 871:armwave.c     **** }
 5414              		.loc 1 871 1 view .LVU1405
 5415 1a8c 2CD08DE2 		add	sp, sp, #44	@,,
 5416              		.cfi_remember_state
 5417              		.cfi_def_cfa_offset 44
 5418              		@ sp needed	@
 5419 1a90 028BBDEC 		vldm	sp!, {d8}	@
 5420              		.cfi_restore 80
 5421              		.cfi_restore 81
 5422              		.cfi_def_cfa_offset 36
 5423 1a94 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 5424              	.LVL332:
 5425              	.L268:
 5426              		.cfi_restore_state
 830:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5427              		.loc 1 830 9 is_stmt 1 view .LVU1406
 5428 1a98 1C809DE5 		ldr	r8, [sp, #28]	@ w, %sfp
 5429              	@ armwave.c:831:         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 831:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 5430              		.loc 1 831 9 is_stmt 0 view .LVU1407
 5431 1a9c 09A044E0 		sub	r10, r4, r9	@ h, _2, m
 5432              	@ armwave.c:830:         XDrawLine(g_dpy, g_window, g_gc, m, m, w, m);
 830:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5433              		.loc 1 830 9 view .LVU1408
 5434 1aa0 0930A0E1 		mov	r3, r9	@, m
 5435 1aa4 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5436              	.LVL333:
 830:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5437              		.loc 1 830 9 view .LVU1409
 5438 1aa8 001095E5 		ldr	r1, [r5]	@, g_window
 5439 1aac 08908DE5 		str	r9, [sp, #8]	@ m,
 5440 1ab0 04808DE5 		str	r8, [sp, #4]	@ w,
 5441 1ab4 00908DE5 		str	r9, [sp]	@ m,
 5442 1ab8 000097E5 		ldr	r0, [r7]	@, g_dpy
 5443 1abc FEFFFFEB 		bl	XDrawLine		@
 5444              	.LVL334:
 831:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 5445              		.loc 1 831 9 is_stmt 1 view .LVU1410
 5446 1ac0 0A30A0E1 		mov	r3, r10	@ h, h
 5447 1ac4 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5448 1ac8 08018DE8 		stm	sp, {r3, r8}	@,,
 5449 1acc 001095E5 		ldr	r1, [r5]	@, g_window
 5450 1ad0 0930A0E1 		mov	r3, r9	@, m
 5451 1ad4 08A08DE5 		str	r10, [sp, #8]	@ h,
 5452 1ad8 000097E5 		ldr	r0, [r7]	@, g_dpy
 5453 1adc FEFFFFEB 		bl	XDrawLine		@
 5454              	.LVL335:
 832:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, w, m, w, h);
 5455              		.loc 1 832 9 view .LVU1411
 5456 1ae0 0930A0E1 		mov	r3, r9	@, m
 5457 1ae4 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5458 1ae8 001095E5 		ldr	r1, [r5]	@, g_window
 5459 1aec 08A08DE5 		str	r10, [sp, #8]	@ h,
 5460 1af0 04908DE5 		str	r9, [sp, #4]	@ m,
 5461 1af4 00908DE5 		str	r9, [sp]	@ m,
 5462 1af8 000097E5 		ldr	r0, [r7]	@, g_dpy
 5463 1afc FEFFFFEB 		bl	XDrawLine		@
 5464              	.LVL336:
 833:armwave.c     ****     }
 5465              		.loc 1 833 9 view .LVU1412
 5466 1b00 0830A0E1 		mov	r3, r8	@, w
 5467 1b04 08A08DE5 		str	r10, [sp, #8]	@ h,
 5468 1b08 04808DE5 		str	r8, [sp, #4]	@ w,
 5469 1b0c 00908DE5 		str	r9, [sp]	@ m,
 5470 1b10 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5471 1b14 001095E5 		ldr	r1, [r5]	@, g_window
 5472 1b18 000097E5 		ldr	r0, [r7]	@, g_dpy
 5473 1b1c FEFFFFEB 		bl	XDrawLine		@
 5474              	.LVL337:
 5475 1b20 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5476 1b24 6CFFFFEA 		b	.L249		@
 5477              	.L271:
 5478              		.align	2
 5479              	.L270:
 5480 1b28 0000803F 		.word	1065353216
 5481 1b2c 00000000 		.word	g_canvas_dims
 5482 1b30 00000000 		.word	g_armwave_state
 5483 1b34 00000000 		.word	g_grat_colour
 5484 1b38 00000000 		.word	.LANCHOR1
 5485 1b3c 00000000 		.word	g_dpy
 5486 1b40 8C050000 		.word	.LC34
 5487              		.cfi_endproc
 5488              	.LFE82:
 5490              		.global	__aeabi_idivmod
 5491              		.align	2
 5492              		.global	armwave_render_frame_x11
 5493              		.syntax unified
 5494              		.arm
 5495              		.fpu vfp
 5497              	armwave_render_frame_x11:
 5498              	.LFB83:
 872:armwave.c     **** 
 873:armwave.c     **** /*
 874:armwave.c     ****  * Run one rendering tick.
 875:armwave.c     ****  */
 876:armwave.c     **** void armwave_render_frame_x11()
 877:armwave.c     **** {
 5499              		.loc 1 877 1 view -0
 5500              		.cfi_startproc
 5501              		@ args = 0, pretend = 0, frame = 16
 5502              		@ frame_needed = 0, uses_anonymous_args = 0
 878:armwave.c     ****     Window _dw;
 5503              		.loc 1 878 5 view .LVU1414
 879:armwave.c     ****     int _d, _w, _h;
 5504              		.loc 1 879 5 view .LVU1415
 880:armwave.c     ****     int m = g_armwave_state.frame_margin; 
 5505              		.loc 1 880 5 view .LVU1416
 5506              	@ armwave.c:882:     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 881:armwave.c     ****     
 882:armwave.c     ****     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 5507              		.loc 1 882 5 is_stmt 0 view .LVU1417
 5508 1b44 B4319FE5 		ldr	r3, .L283	@ tmp162,
 5509 1b48 B4219FE5 		ldr	r2, .L283+4	@ tmp161,
 5510              	@ armwave.c:877: {
 877:armwave.c     ****     Window _dw;
 5511              		.loc 1 877 1 view .LVU1418
 5512 1b4c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 5513              		.cfi_def_cfa_offset 28
 5514              		.cfi_offset 4, -28
 5515              		.cfi_offset 5, -24
 5516              		.cfi_offset 6, -20
 5517              		.cfi_offset 7, -16
 5518              		.cfi_offset 8, -12
 5519              		.cfi_offset 9, -8
 5520              		.cfi_offset 14, -4
 5521 1b50 3CD04DE2 		sub	sp, sp, #60	@,,
 5522              		.cfi_def_cfa_offset 88
 5523              	@ armwave.c:882:     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 5524              		.loc 1 882 5 view .LVU1419
 5525 1b54 001093E5 		ldr	r1, [r3]	@, g_n_test_waves
 5526 1b58 000092E5 		ldr	r0, [r2]	@, g_frame_num
 5527 1b5c FEFFFFEB 		bl	__aeabi_idivmod		@
 5528              	.LVL338:
 5529              	@ armwave.c:880:     int m = g_armwave_state.frame_margin; 
 880:armwave.c     ****     int m = g_armwave_state.frame_margin; 
 5530              		.loc 1 880 9 view .LVU1420
 5531 1b60 A0419FE5 		ldr	r4, .L283+8	@ tmp252,
 5532              	.LBB130:
 5533              	.LBB131:
 5534              	@ armwave.c:491:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 491:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5535              		.loc 1 491 7 view .LVU1421
 5536 1b64 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 5537              	.LBE131:
 5538              	.LBE130:
 5539              	@ armwave.c:880:     int m = g_armwave_state.frame_margin; 
 880:armwave.c     ****     
 5540              		.loc 1 880 9 view .LVU1422
 5541 1b68 587094E5 		ldr	r7, [r4, #88]	@ m, g_armwave_state.frame_margin
 5542              	.LVL339:
 5543              		.loc 1 882 5 is_stmt 1 view .LVU1423
 5544              	.LBB134:
 5545              	.LBI130:
 489:armwave.c     **** {
 5546              		.loc 1 489 6 view .LVU1424
 5547              	.LBB132:
 491:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5548              		.loc 1 491 5 view .LVU1425
 5549              	@ armwave.c:491:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 491:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5550              		.loc 1 491 7 is_stmt 0 view .LVU1426
 5551 1b6c 010053E1 		cmp	r3, r1	@ g_armwave_state.test_wave_buffer_nsets, tmp170
 5552 1b70 5D00003A 		bcc	.L282		@,
 496:armwave.c     **** }
 5553              		.loc 1 496 5 is_stmt 1 view .LVU1427
 5554              	@ armwave.c:496:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 496:armwave.c     **** }
 5555              		.loc 1 496 111 is_stmt 0 view .LVU1428
 5556 1b74 1C2094E5 		ldr	r2, [r4, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 5557              	@ armwave.c:496:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 496:armwave.c     **** }
 5558              		.loc 1 496 68 view .LVU1429
 5559 1b78 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 5560 1b7c 923121E0 		mla	r1, r2, r1, r3	@ tmp179, g_armwave_state.test_wave_buffer_stride, tmp170, g_armwave_state.test
 5561              	@ armwave.c:496:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 496:armwave.c     **** }
 5562              		.loc 1 496 33 view .LVU1430
 5563 1b80 141084E5 		str	r1, [r4, #20]	@ tmp179, g_armwave_state.wave_buffer
 5564              	.L274:
 496:armwave.c     **** }
 5565              		.loc 1 496 33 view .LVU1431
 5566              	.LBE132:
 5567              	.LBE134:
 883:armwave.c     ****     armwave_generate();
 5568              		.loc 1 883 5 is_stmt 1 view .LVU1432
 5569              	.LBB135:
 5570              	.LBI135:
 377:armwave.c     **** {
 5571              		.loc 1 377 6 view .LVU1433
 5572              	.LBB136:
 379:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 5573              		.loc 1 379 5 view .LVU1434
 380:armwave.c     **** 
 5574              		.loc 1 380 5 view .LVU1435
 5575              	@ armwave.c:383:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 383:armwave.c     **** 
 5576              		.loc 1 383 5 is_stmt 0 view .LVU1436
 5577 1b84 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 5578 1b88 0010A0E3 		mov	r1, #0	@,
 5579 1b8c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 5580              	@ armwave.c:380:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 380:armwave.c     **** 
 5581              		.loc 1 380 14 view .LVU1437
 5582 1b90 4C9094E5 		ldr	r9, [r4, #76]	@ xx_rem, g_armwave_state.wave_length
 5583              	.LVL340:
 383:armwave.c     **** 
 5584              		.loc 1 383 5 is_stmt 1 view .LVU1438
 5585 1b94 FEFFFFEB 		bl	memset		@
 5586              	.LVL341:
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5587              		.loc 1 386 5 view .LVU1439
 5588              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5589              		.loc 1 386 68 is_stmt 0 view .LVU1440
 5590 1b98 445094E5 		ldr	r5, [r4, #68]	@ _56, g_armwave_state.slice_height
 5591              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5592              		.loc 1 386 51 view .LVU1441
 5593 1b9c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 5594 1ba0 0510A0E1 		mov	r1, r5	@, _56
 5595 1ba4 FEFFFFEB 		bl	__aeabi_idiv		@
 5596              	.LVL342:
 5597              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5598              		.loc 1 386 5 view .LVU1442
 5599 1ba8 000050E3 		cmp	r0, #0	@ tmp194
 5600 1bac 5100000A 		beq	.L279		@,
 5601              	@ armwave.c:380:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 380:armwave.c     **** 
 5602              		.loc 1 380 52 view .LVU1443
 5603 1bb0 0060A0E3 		mov	r6, #0	@ ypos,
 5604              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5605              		.loc 1 386 12 view .LVU1444
 5606 1bb4 0680A0E1 		mov	r8, r6	@ yy, ypos
 5607              	.LVL343:
 5608              	.L276:
 387:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 5609              		.loc 1 387 9 is_stmt 1 view .LVU1445
 5610 1bb8 980500E0 		mul	r0, r8, r5	@, yy, tmp1
 5611 1bbc 0510A0E1 		mov	r1, r5	@, _56
 5612 1bc0 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 5613              	.LVL344:
 388:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5614              		.loc 1 388 9 view .LVU1446
 5615              	@ armwave.c:388:         xx_rem -= g_armwave_state.slice_height;
 388:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5616              		.loc 1 388 34 is_stmt 0 view .LVU1447
 5617 1bc4 445094E5 		ldr	r5, [r4, #68]	@ _56, g_armwave_state.slice_height
 5618              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5619              		.loc 1 386 51 view .LVU1448
 5620 1bc8 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 5621 1bcc 0510A0E1 		mov	r1, r5	@, _56
 5622 1bd0 FEFFFFEB 		bl	__aeabi_idiv		@
 5623              	.LVL345:
 5624              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5625              		.loc 1 386 86 view .LVU1449
 5626 1bd4 018088E2 		add	r8, r8, #1	@ yy, yy,
 5627              	.LVL346:
 5628              	@ armwave.c:388:         xx_rem -= g_armwave_state.slice_height;
 388:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5629              		.loc 1 388 16 view .LVU1450
 5630 1bd8 059049E0 		sub	r9, r9, r5	@ xx_rem, xx_rem, _56
 5631              	.LVL347:
 389:armwave.c     ****     }
 5632              		.loc 1 389 9 is_stmt 1 view .LVU1451
 5633              	@ armwave.c:389:         ypos += g_armwave_state.slice_height;   
 389:armwave.c     ****     }
 5634              		.loc 1 389 14 is_stmt 0 view .LVU1452
 5635 1bdc 056086E0 		add	r6, r6, r5	@ ypos, ypos, _56
 5636              	.LVL348:
 5637              	@ armwave.c:386:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5638              		.loc 1 386 5 view .LVU1453
 5639 1be0 000058E1 		cmp	r8, r0	@ yy,
 5640 1be4 F3FFFF3A 		bcc	.L276		@,
 5641              	.LVL349:
 5642              	.L275:
 393:armwave.c     **** }
 5643              		.loc 1 393 5 is_stmt 1 view .LVU1454
 5644              	.LBE136:
 5645              	.LBE135:
 5646              	@ armwave.c:884:     fill_xvimage_scaled(g_yuv_image);
 884:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 5647              		.loc 1 884 5 is_stmt 0 view .LVU1455
 5648 1be8 1C419FE5 		ldr	r4, .L283+12	@ tmp250,
 5649              	.LBB140:
 5650              	.LBB137:
 5651              	@ armwave.c:393:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 393:armwave.c     **** }
 5652              		.loc 1 393 5 view .LVU1456
 5653 1bec 0910A0E1 		mov	r1, r9	@, xx_rem
 5654 1bf0 0600A0E1 		mov	r0, r6	@, ypos
 5655              	.LBE137:
 5656              	.LBE140:
 5657              	@ armwave.c:886:     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 885:armwave.c     ****     
 886:armwave.c     ****     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 5658              		.loc 1 886 5 view .LVU1457
 5659 1bf4 14819FE5 		ldr	r8, .L283+16	@ tmp248,
 5660              	.LBB141:
 5661              	.LBB138:
 5662              	@ armwave.c:393:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 393:armwave.c     **** }
 5663              		.loc 1 393 5 view .LVU1458
 5664 1bf8 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 5665              	.LVL350:
 393:armwave.c     **** }
 5666              		.loc 1 393 5 view .LVU1459
 5667              	.LBE138:
 5668              	.LBE141:
 884:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 5669              		.loc 1 884 5 is_stmt 1 view .LVU1460
 5670 1bfc 040094E5 		ldr	r0, [r4, #4]	@, g_yuv_image
 5671 1c00 FEFFFFEB 		bl	fill_xvimage_scaled		@
 5672              	.LVL351:
 5673              		.loc 1 886 5 view .LVU1461
 5674              	@ armwave.c:890:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 887:armwave.c     ****     g_canvas_dims.w = _w;
 888:armwave.c     ****     g_canvas_dims.h = _h;
 889:armwave.c     ****     
 890:armwave.c     ****     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas_dims.h) {
 5675              		.loc 1 890 26 is_stmt 0 view .LVU1462
 5676 1c04 08619FE5 		ldr	r6, .L283+20	@ tmp251,
 5677              	@ armwave.c:886:     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 886:armwave.c     ****     g_canvas_dims.w = _w;
 5678              		.loc 1 886 5 view .LVU1463
 5679 1c08 34208DE2 		add	r2, sp, #52	@ tmp212,,
 5680 1c0c 001094E5 		ldr	r1, [r4]	@, g_window
 5681 1c10 000098E5 		ldr	r0, [r8]	@, g_dpy
 5682 1c14 2C308DE2 		add	r3, sp, #44	@ tmp204,,
 5683 1c18 08208DE5 		str	r2, [sp, #8]	@ tmp212,
 5684 1c1c 30208DE2 		add	r2, sp, #48	@ tmp213,,
 5685 1c20 10308DE5 		str	r3, [sp, #16]	@ tmp204,
 5686 1c24 0C308DE5 		str	r3, [sp, #12]	@ tmp204,
 5687 1c28 00308DE5 		str	r3, [sp]	@ tmp204,
 5688 1c2c 04208DE5 		str	r2, [sp, #4]	@ tmp213,
 5689 1c30 28208DE2 		add	r2, sp, #40	@,,
 5690 1c34 FEFFFFEB 		bl	XGetGeometry		@
 5691              	.LVL352:
 887:armwave.c     ****     g_canvas_dims.w = _w;
 5692              		.loc 1 887 5 is_stmt 1 view .LVU1464
 5693              	@ armwave.c:887:     g_canvas_dims.w = _w;
 887:armwave.c     ****     g_canvas_dims.w = _w;
 5694              		.loc 1 887 21 is_stmt 0 view .LVU1465
 5695 1c38 D8509FE5 		ldr	r5, .L283+24	@ tmp249,
 5696 1c3c 30109DE5 		ldr	r1, [sp, #48]	@ pretmp_106, _w
 5697              	@ armwave.c:890:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5698              		.loc 1 890 7 view .LVU1466
 5699 1c40 002096E5 		ldr	r2, [r6]	@ g_canvas_dims_last.w, g_canvas_dims_last.w
 5700              	@ armwave.c:888:     g_canvas_dims.h = _h;
 888:armwave.c     ****     
 5701              		.loc 1 888 21 view .LVU1467
 5702 1c44 34309DE5 		ldr	r3, [sp, #52]	@ _h.107_8, _h
 5703              	@ armwave.c:890:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5704              		.loc 1 890 7 view .LVU1468
 5705 1c48 020051E1 		cmp	r1, r2	@ pretmp_106, g_canvas_dims_last.w
 5706              	@ armwave.c:888:     g_canvas_dims.h = _h;
 888:armwave.c     ****     
 5707              		.loc 1 888 21 view .LVU1469
 5708 1c4c 0A0085E8 		stm	r5, {r1, r3}	@ tmp249,,
 5709              		.loc 1 890 5 is_stmt 1 view .LVU1470
 5710              	@ armwave.c:890:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5711              		.loc 1 890 7 is_stmt 0 view .LVU1471
 5712 1c50 0200001A 		bne	.L277		@,
 5713              	@ armwave.c:890:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5714              		.loc 1 890 69 discriminator 1 view .LVU1472
 5715 1c54 042096E5 		ldr	r2, [r6, #4]	@ pretmp_108, g_canvas_dims_last.h
 5716              	@ armwave.c:890:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5717              		.loc 1 890 48 discriminator 1 view .LVU1473
 5718 1c58 020053E1 		cmp	r3, r2	@ _h.107_8, pretmp_108
 5719 1c5c 0400000A 		beq	.L278		@,
 5720              	.L277:
 891:armwave.c     ****         XClearWindow(g_dpy, g_window);
 5721              		.loc 1 891 9 is_stmt 1 view .LVU1474
 5722 1c60 001094E5 		ldr	r1, [r4]	@, g_window
 5723 1c64 000098E5 		ldr	r0, [r8]	@, g_dpy
 5724 1c68 FEFFFFEB 		bl	XClearWindow		@
 5725              	.LVL353:
 5726 1c6c 30109DE5 		ldr	r1, [sp, #48]	@ pretmp_106, _w
 5727 1c70 34209DE5 		ldr	r2, [sp, #52]	@ pretmp_108, _h
 5728              	.L278:
 892:armwave.c     ****     }
 893:armwave.c     ****     
 894:armwave.c     ****     g_canvas_dims_last = g_canvas_dims;
 5729              		.loc 1 894 5 view .LVU1475
 5730              	@ armwave.c:898:         m, m, _w - (m * 2), _h - (m * 2), True);
 895:armwave.c     ****     
 896:armwave.c     ****     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 897:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 898:armwave.c     ****         m, m, _w - (m * 2), _h - (m * 2), True);
 5731              		.loc 1 898 23 is_stmt 0 view .LVU1476
 5732 1c74 873F67E0 		rsb	r3, r7, r7, lsl #31	@ tmp231, m, m,
 5733              	@ armwave.c:896:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 896:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5734              		.loc 1 896 5 view .LVU1477
 5735 1c78 04C094E5 		ldr	ip, [r4, #4]	@ g_yuv_image.115_18, g_yuv_image
 5736              	@ armwave.c:898:         m, m, _w - (m * 2), _h - (m * 2), True);
 5737              		.loc 1 898 23 view .LVU1478
 5738 1c7c 8330A0E1 		lsl	r3, r3, #1	@ tmp232, tmp231,
 5739              	@ armwave.c:898:         m, m, _w - (m * 2), _h - (m * 2), True);
 5740              		.loc 1 898 32 view .LVU1479
 5741 1c80 022083E0 		add	r2, r3, r2	@ tmp242, tmp232, pretmp_108
 5742              	@ armwave.c:898:         m, m, _w - (m * 2), _h - (m * 2), True);
 5743              		.loc 1 898 18 view .LVU1480
 5744 1c84 013083E0 		add	r3, r3, r1	@ tmp243, tmp232, pretmp_106
 5745              	@ armwave.c:896:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 896:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5746              		.loc 1 896 5 view .LVU1481
 5747 1c88 0110A0E3 		mov	r1, #1	@ tmp241,
 5748 1c8c 20208DE5 		str	r2, [sp, #32]	@ tmp242,
 5749 1c90 18708DE5 		str	r7, [sp, #24]	@ m,
 5750 1c94 14708DE5 		str	r7, [sp, #20]	@ m,
 5751 1c98 1C308DE5 		str	r3, [sp, #28]	@ tmp243,
 5752 1c9c 24108DE5 		str	r1, [sp, #36]	@ tmp241,
 5753 1ca0 08309CE5 		ldr	r3, [ip, #8]	@ g_yuv_image.115_18->height, g_yuv_image.115_18->height
 5754              	@ armwave.c:894:     g_canvas_dims_last = g_canvas_dims;
 894:armwave.c     ****     
 5755              		.loc 1 894 24 view .LVU1482
 5756 1ca4 030095E8 		ldm	r5, {r0, r1}	@ tmp249,,
 5757              	@ armwave.c:896:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 896:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5758              		.loc 1 896 5 view .LVU1483
 5759 1ca8 6C209FE5 		ldr	r2, .L283+28	@ tmp237,
 5760 1cac 10308DE5 		str	r3, [sp, #16]	@ g_yuv_image.115_18->height,
 5761 1cb0 04E09CE5 		ldr	lr, [ip, #4]	@ g_yuv_image.115_18->width, g_yuv_image.115_18->width
 5762 1cb4 0030A0E3 		mov	r3, #0	@ tmp246,
 5763              	@ armwave.c:894:     g_canvas_dims_last = g_canvas_dims;
 894:armwave.c     ****     
 5764              		.loc 1 894 24 view .LVU1484
 5765 1cb8 030086E8 		stm	r6, {r0, r1}	@ tmp251,,
 896:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5766              		.loc 1 896 5 is_stmt 1 view .LVU1485
 5767 1cbc 0CE08DE5 		str	lr, [sp, #12]	@ g_yuv_image.115_18->width,
 5768 1cc0 00C08DE5 		str	ip, [sp]	@ g_yuv_image.115_18,
 5769 1cc4 001092E5 		ldr	r1, [r2]	@, g_xv_port
 5770 1cc8 000098E5 		ldr	r0, [r8]	@, g_dpy
 5771 1ccc 08308DE5 		str	r3, [sp, #8]	@ tmp246,
 5772 1cd0 04308DE5 		str	r3, [sp, #4]	@ tmp246,
 5773 1cd4 083094E5 		ldr	r3, [r4, #8]	@, g_gc
 5774 1cd8 002094E5 		ldr	r2, [r4]	@, g_window
 5775 1cdc FEFFFFEB 		bl	XvShmPutImage		@
 5776              	.LVL354:
 899:armwave.c     ****     
 900:armwave.c     ****     armwave_render_graticule();
 5777              		.loc 1 900 5 view .LVU1486
 5778 1ce0 FEFFFFEB 		bl	armwave_render_graticule		@
 5779              	.LVL355:
 5780              	@ armwave.c:901: }
 901:armwave.c     **** }
 5781              		.loc 1 901 1 is_stmt 0 view .LVU1487
 5782 1ce4 3CD08DE2 		add	sp, sp, #60	@,,
 5783              		.cfi_remember_state
 5784              		.cfi_def_cfa_offset 28
 5785              		@ sp needed	@
 5786 1ce8 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 5787              	.LVL356:
 5788              	.L282:
 5789              		.cfi_restore_state
 5790              	.LBB142:
 5791              	.LBB133:
 492:armwave.c     ****         return;
 5792              		.loc 1 492 9 is_stmt 1 view .LVU1488
 5793 1cec 2C009FE5 		ldr	r0, .L283+32	@,
 5794 1cf0 FEFFFFEB 		bl	puts		@
 5795              	.LVL357:
 493:armwave.c     ****     }
 5796              		.loc 1 493 9 view .LVU1489
 5797 1cf4 A2FFFFEA 		b	.L274		@
 5798              	.LVL358:
 5799              	.L279:
 493:armwave.c     ****     }
 5800              		.loc 1 493 9 is_stmt 0 view .LVU1490
 5801              	.LBE133:
 5802              	.LBE142:
 5803              	.LBB143:
 5804              	.LBB139:
 5805              	@ armwave.c:380:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 380:armwave.c     **** 
 5806              		.loc 1 380 52 view .LVU1491
 5807 1cf8 0060A0E1 		mov	r6, r0	@ ypos, tmp194
 5808 1cfc B9FFFFEA 		b	.L275		@
 5809              	.L284:
 5810              		.align	2
 5811              	.L283:
 5812 1d00 00000000 		.word	g_n_test_waves
 5813 1d04 00000000 		.word	g_frame_num
 5814 1d08 00000000 		.word	g_armwave_state
 5815 1d0c 00000000 		.word	.LANCHOR1
 5816 1d10 00000000 		.word	g_dpy
 5817 1d14 00000000 		.word	g_canvas_dims_last
 5818 1d18 00000000 		.word	g_canvas_dims
 5819 1d1c 00000000 		.word	g_xv_port
 5820 1d20 24020000 		.word	.LC15
 5821              	.LBE139:
 5822              	.LBE143:
 5823              		.cfi_endproc
 5824              	.LFE83:
 5826              		.comm	g_xswa,60,4
 5827              		.comm	g_grat_subcolour,12,4
 5828              		.comm	g_grat_colour,12,4
 5829              		.comm	g_yuv_shminfo,16,4
 5830              		.global	g_yuv_image
 5831              		.global	g_gc
 5832              		.comm	g_vinfo,40,4
 5833              		.comm	g_xv_port,4,4
 5834              		.comm	g_dpy,4,4
 5835              		.global	g_window
 5836              		.comm	g_n_test_waves,4,4
 5837              		.comm	g_frame_num,4,4
 5838              		.comm	g_canvas_dims_last,8,4
 5839              		.comm	g_canvas_dims,8,4
 5840              		.global	g_fill_black
 5841              		.comm	g_yuv_lut,768,4
 5842              		.comm	g_armwave_state,160,4
 5843              		.section	.rodata
 5844              		.align	2
 5845              		.set	.LANCHOR0,. + 0
 5848              	__PRETTY_FUNCTION__.20843:
 5849 0000 61726D77 		.ascii	"armwave_setup_render\000"
 5849      6176655F 
 5849      73657475 
 5849      705F7265 
 5849      6E646572 
 5850 0015 000000   		.space	3
 5853              	__PRETTY_FUNCTION__.20850:
 5854 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 5854      6176655F 
 5854      7365745F 
 5854      77617665 
 5854      5F706F69 
 5855 0031 000000   		.space	3
 5858              	__PRETTY_FUNCTION__.20857:
 5859 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 5859      6176655F 
 5859      7365745F 
 5859      77617665 
 5859      5F706F69 
 5860 0051 000000   		.space	3
 5863              	g_fill_black:
 5864 0054 000000   		.space	3
 5865              		.bss
 5866              		.align	2
 5867              		.set	.LANCHOR1,. + 0
 5870              	g_window:
 5871 0000 00000000 		.space	4
 5874              	g_yuv_image:
 5875 0004 00000000 		.space	4
 5878              	g_gc:
 5879 0008 00000000 		.space	4
 5880              		.section	.rodata.str1.4,"aMS",%progbits,1
 5881              		.align	2
 5882              	.LC0:
 5883 0000 25336420 		.ascii	"%3d = [%3d, %3d, %3d]\012\000"
 5883      3D205B25 
 5883      33642C20 
 5883      2533642C 
 5883      20253364 
 5884 0017 00       		.space	1
 5885              	.LC1:
 5886 0018 25336420 		.ascii	"%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\012\000"
 5886      3D205B25 
 5886      33642C20 
 5886      2533642C 
 5886      20253364 
 5887 0042 0000     		.space	2
 5888              	.LC2:
 5889 0044 25336420 		.ascii	"%3d = (%3d, %3d, %3d)\012\000"
 5889      3D202825 
 5889      33642C20 
 5889      2533642C 
 5889      20253364 
 5890 005b 00       		.space	1
 5891              	.LC3:
 5892 005c 76302E32 		.ascii	"v0.2.0\000"
 5892      2E3000
 5893 0063 00       		.space	1
 5894              	.LC4:
 5895 0064 61726D77 		.ascii	"armwave version: %s\012\000"
 5895      61766520 
 5895      76657273 
 5895      696F6E3A 
 5895      2025730A 
 5896 0079 000000   		.space	3
 5897              	.LC5:
 5898 007c 6275696C 		.ascii	"built without Python linkings\000"
 5898      74207769 
 5898      74686F75 
 5898      74205079 
 5898      74686F6E 
 5899 009a 0000     		.space	2
 5900              	.LC6:
 5901 009c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 5901      20653D25 
 5901      6420773D 
 5901      25642077 
 5901      733D2564 
 5902              	.LC7:
 5903 00c8 4572726F 		.ascii	"Error: start point more than end point\000"
 5903      723A2073 
 5903      74617274 
 5903      20706F69 
 5903      6E74206D 
 5904 00ef 00       		.space	1
 5905              	.LC8:
 5906 00f0 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 5906      7566665F 
 5906      73697A65 
 5906      3D25642C 
 5906      20636D70 
 5907 0123 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 5907      5F776964 
 5907      74683D25 
 5907      642C2077 
 5907      6176655F 
 5908 014d 000000   		.space	3
 5909              	.LC9:
 5910 0150 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 5910      6F632066 
 5910      61696C75 
 5910      72652061 
 5910      6C6C6F63 
 5911 0183 2E636831 		.ascii	".ch1_buffer)\012\000"
 5911      5F627566 
 5911      66657229 
 5911      0A00
 5912 0191 000000   		.space	3
 5913              	.LC10:
 5914 0194 61726D77 		.ascii	"armwave.c\000"
 5914      6176652E 
 5914      6300
 5915 019e 0000     		.space	2
 5916              	.LC11:
 5917 01a0 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 5917      6D776176 
 5917      655F7374 
 5917      6174652E 
 5917      78636F6F 
 5918 01c9 000000   		.space	3
 5919              	.LC12:
 5920 01cc 78636F6F 		.ascii	"xcoord_to_xpixel[%5d] = %5d\012\000"
 5920      72645F74 
 5920      6F5F7870 
 5920      6978656C 
 5920      5B253564 
 5921 01e9 000000   		.space	3
 5922              	.LC13:
 5923 01ec 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 5923      3A203078 
 5923      25303878 
 5923      20307825 
 5923      30387820 
 5924              	.LC14:
 5925 0210 77617665 		.ascii	"wave_buffer != NULL\000"
 5925      5F627566 
 5925      66657220 
 5925      213D204E 
 5925      554C4C00 
 5926              	.LC15:
 5927 0224 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 5927      6176655F 
 5927      7365745F 
 5927      77617665 
 5927      5F706F69 
 5928 0257 78636565 		.ascii	"xceeded\000"
 5928      64656400 
 5929 025f 00       		.space	1
 5930              	.LC16:
 5931 0260 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 5931      5F627566 
 5931      6665725F 
 5931      70747220 
 5931      213D2030 
 5932 0275 000000   		.space	3
 5933              	.LC17:
 5934 0278 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 5934      6176655F 
 5934      74657374 
 5934      5F627566 
 5934      6665725F 
 5935 02ab 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 5935      20627566 
 5935      66657220 
 5935      28256420 
 5935      62797465 
 5936              	.LC18:
 5937 02cc 43616C63 		.ascii	"Calculating test set %d\012\000"
 5937      756C6174 
 5937      696E6720 
 5937      74657374 
 5937      20736574 
 5938 02e5 000000   		.space	3
 5939              	.LC19:
 5940 02e8 41726D57 		.ascii	"ArmWave\000"
 5940      61766500 
 5941              	.LC20:
 5942 02f0 57696E64 		.ascii	"Window done, mapping...\000"
 5942      6F772064 
 5942      6F6E652C 
 5942      206D6170 
 5942      70696E67 
 5943              	.LC21:
 5944 0308 416C6C20 		.ascii	"All done in window\000"
 5944      646F6E65 
 5944      20696E20 
 5944      77696E64 
 5944      6F7700
 5945 031b 00       		.space	1
 5946              	.LC22:
 5947 031c 61726D77 		.ascii	"armwave: initialising for X11...\000"
 5947      6176653A 
 5947      20696E69 
 5947      7469616C 
 5947      6973696E 
 5948 033d 000000   		.space	3
 5949              	.LC23:
 5950 0340 4572726F 		.ascii	"Error: Fatal X11: Cannot open display.\000"
 5950      723A2046 
 5950      6174616C 
 5950      20583131 
 5950      3A204361 
 5951 0367 00       		.space	1
 5952              	.LC24:
 5953 0368 466F756E 		.ascii	"Found 24bit TrueColor.\000"
 5953      64203234 
 5953      62697420 
 5953      54727565 
 5953      436F6C6F 
 5954 037f 00       		.space	1
 5955              	.LC25:
 5956 0380 4572726F 		.ascii	"Error: Fatal X11: not supported 24-bit TrueColor di"
 5956      723A2046 
 5956      6174616C 
 5956      20583131 
 5956      3A206E6F 
 5957 03b3 73706C61 		.ascii	"splay.\000"
 5957      792E00
 5958 03ba 0000     		.space	2
 5959              	.LC26:
 5960 03bc 4572726F 		.ascii	"Error: Fatal X11: Shared memory extension not avail"
 5960      723A2046 
 5960      6174616C 
 5960      20583131 
 5960      3A205368 
 5961 03ef 61626C65 		.ascii	"able or failed to allocate shared memory.\000"
 5961      206F7220 
 5961      6661696C 
 5961      65642074 
 5961      6F20616C 
 5962 0419 000000   		.space	3
 5963              	.LC27:
 5964 041c 4572726F 		.ascii	"Error: Fatal X11: Unable to find XVideo extension ("
 5964      723A2046 
 5964      6174616C 
 5964      20583131 
 5964      3A20556E 
 5965 044f 2564292E 		.ascii	"%d).  Is it configured correctly?\012\000"
 5965      20204973 
 5965      20697420 
 5965      636F6E66 
 5965      69677572 
 5966 0472 0000     		.space	2
 5967              	.LC28:
 5968 0474 4572726F 		.ascii	"Error: Fatal X11: Unable to query XVideo extension "
 5968      723A2046 
 5968      6174616C 
 5968      20583131 
 5968      3A20556E 
 5969 04a7 28256429 		.ascii	"(%d).  Is it configured correctly?\012\000"
 5969      2E202049 
 5969      73206974 
 5969      20636F6E 
 5969      66696775 
 5970 04cb 00       		.space	1
 5971              	.LC29:
 5972 04cc 4572726F 		.ascii	"Error: Fatal X11: Unable to use the port %d\012\012"
 5972      723A2046 
 5972      6174616C 
 5972      20583131 
 5972      3A20556E 
 5973 04f9 00       		.ascii	"\000"
 5974 04fa 0000     		.space	2
 5975              	.LC30:
 5976 04fc 41747461 		.ascii	"Attaching XvShm...\000"
 5976      6368696E 
 5976      67205876 
 5976      53686D2E 
 5976      2E2E00
 5977 050f 00       		.space	1
 5978              	.LC31:
 5979 0510 7975765F 		.ascii	"yuv_image plane %d offset %d pitch %d\012\000"
 5979      696D6167 
 5979      6520706C 
 5979      616E6520 
 5979      2564206F 
 5980 0537 00       		.space	1
 5981              	.LC32:
 5982 0538 4572726F 		.ascii	"Error: Fatal X11: XShmAttached failed\000"
 5982      723A2046 
 5982      6174616C 
 5982      20583131 
 5982      3A205853 
 5983 055e 0000     		.space	2
 5984              	.LC33:
 5985 0560 25642062 		.ascii	"%d bytes for XvImage, shmid %d, xv_port %d\012\000"
 5985      79746573 
 5985      20666F72 
 5985      20587649 
 5985      6D616765 
 5986              	.LC34:
 5987 058c 2533642C 		.ascii	"%3d, %3d\012\000"
 5987      20253364 
 5987      0A00
 5988              		.text
 5989              	.Letext0:
 5990              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 5991              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 5992              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 5993              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 5994              		.file 6 "/usr/include/stdio.h"
 5995              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 5996              		.file 8 "/usr/include/errno.h"
 5997              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 5998              		.file 10 "/usr/include/unistd.h"
 5999              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 6000              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 6001              		.file 13 "/usr/local/include/python3.8/pyport.h"
 6002              		.file 14 "/usr/include/math.h"
 6003              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 6004              		.file 16 "/usr/include/time.h"
 6005              		.file 17 "/usr/local/include/python3.8/pymem.h"
 6006              		.file 18 "/usr/local/include/python3.8/object.h"
 6007              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 6008              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 6009              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 6010              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 6011              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 6012              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 6013              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 6014              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 6015              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 6016              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 6017              		.file 29 "/usr/local/include/python3.8/longobject.h"
 6018              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 6019              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 6020              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 6021              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 6022              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 6023              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 6024              		.file 36 "/usr/local/include/python3.8/listobject.h"
 6025              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 6026              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 6027              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 6028              		.file 40 "/usr/local/include/python3.8/setobject.h"
 6029              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 6030              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 6031              		.file 43 "/usr/local/include/python3.8/classobject.h"
 6032              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 6033              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 6034              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 6035              		.file 47 "/usr/local/include/python3.8/traceback.h"
 6036              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 6037              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 6038              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 6039              		.file 51 "/usr/local/include/python3.8/pystate.h"
 6040              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 6041              		.file 53 "/usr/local/include/python3.8/genobject.h"
 6042              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 6043              		.file 55 "/usr/local/include/python3.8/structseq.h"
 6044              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 6045              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 6046              		.file 58 "/usr/local/include/python3.8/codecs.h"
 6047              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 6048              		.file 60 "/usr/local/include/python3.8/context.h"
 6049              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 6050              		.file 62 "/usr/local/include/python3.8/code.h"
 6051              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 6052              		.file 64 "/usr/local/include/python3.8/ceval.h"
 6053              		.file 65 "/usr/local/include/python3.8/import.h"
 6054              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 6055              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 6056              		.file 68 "/usr/include/X11/X.h"
 6057              		.file 69 "/usr/include/X11/Xlib.h"
 6058              		.file 70 "/usr/include/X11/Xutil.h"
 6059              		.file 71 "/usr/include/X11/extensions/XShm.h"
 6060              		.file 72 "/usr/include/malloc.h"
 6061              		.file 73 "/usr/include/X11/extensions/Xv.h"
 6062              		.file 74 "/usr/include/X11/extensions/Xvlib.h"
 6063              		.file 75 "armwave.h"
 6064              		.file 76 "<built-in>"
 6065              		.file 77 "/usr/include/arm-linux-gnueabihf/sys/shm.h"
 6066              		.file 78 "/usr/include/stdlib.h"
 6067              		.file 79 "/usr/include/assert.h"
 6068              		.file 80 "/usr/include/string.h"
 6069              		.file 81 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
