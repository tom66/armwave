   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_NWAVES                 64
  25:armwave.c     **** #define TEST_WAVE_SIZE              2048
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t gamma_table[256];
  40:armwave.c     **** 
  41:armwave.c     **** /*
  42:armwave.c     ****  * Create a gamma table.
  43:armwave.c     ****  */
  44:armwave.c     **** void test_create_gamma()
  45:armwave.c     **** {
  85              		.loc 1 45 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  46:armwave.c     ****     int i;
  89              		.loc 1 46 5 view .LVU1
  47:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 47 5 view .LVU2
  91              	.LVL0:
  48:armwave.c     **** 
  49:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 49 5 view .LVU3
  93              	@ armwave.c:45: {
  45:armwave.c     ****     int i;
  94              		.loc 1 45 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.43,
 110              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 50 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 50 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 50 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.43,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.43,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 50 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 50 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.43
 128              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 50 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 50 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 50 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 50 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 50 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:49:     for(i = 0; i < 256; i++) {
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 49 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.43, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:52: }
  51:armwave.c     ****     }
  52:armwave.c     **** }
 155              		.loc 1 52 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 52 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * Initialise things.  STUB, mostly.
  56:armwave.c     ****  */
  57:armwave.c     **** void armwave_init()
  58:armwave.c     **** {
 187              		.loc 1 58 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  59:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 59 5 view .LVU19
 193              	@ armwave.c:59:     g_armwave_state.flags = 0;
 194              		.loc 1 59 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:61:     printf("armwave version: %s\n", ARMWAVE_VER);
  60:armwave.c     **** 
  61:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 61 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:59:     g_armwave_state.flags = 0;
  59:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 59 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 61 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  62:armwave.c     **** }
  63:armwave.c     **** 
  64:armwave.c     **** /*
  65:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  66:armwave.c     ****  * pre-computed.
  67:armwave.c     ****  *
  68:armwave.c     ****  * @param    slice_y        Slice to render at
  69:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  70:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  71:armwave.c     ****  */
  72:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  73:armwave.c     **** {
 225              		.loc 1 73 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  74:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 74 5 view .LVU25
  75:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 75 5 view .LVU26
  76:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 76 5 view .LVU27
  77:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 77 5 view .LVU28
  78:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 78 5 view .LVU29
  79:armwave.c     **** 
  80:armwave.c     ****     //printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:73: {
  73:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 73 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 249              		.loc 1 81 40 view .LVU32
 250 00a0 D0409FE5 		ldr	r4, .L23	@ tmp242,
 251              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  82:armwave.c     **** 
  83:armwave.c     ****     // roll through each waveform
  84:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 252              		.loc 1 84 5 view .LVU33
 253 00a4 282094E5 		ldr	r2, [r4, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 254              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 255              		.loc 1 81 63 view .LVU34
 256 00a8 305094E5 		ldr	r5, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 257              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 84 5 view .LVU35
 259 00ac 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 261              		.loc 1 81 40 view .LVU36
 262 00b0 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 264              		.loc 1 81 63 view .LVU37
 265 00b4 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 266              	.LVL7:
 267              		.loc 1 84 5 is_stmt 1 view .LVU38
 268              		.loc 1 84 5 is_stmt 0 view .LVU39
 269 00b8 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 270 00bc 000051E3 		cmp	r1, #0	@ height,
 271 00c0 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 272 00c4 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 273              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 84 11 view .LVU40
 275 00c8 0070A0E3 		mov	r7, #0	@ w,
 276              	.LVL8:
 277              	.L15:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  86:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 86 9 is_stmt 1 view .LVU41
  87:armwave.c     **** 
  88:armwave.c     ****         // roll through y and render the slice into the out buffer
  89:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  90:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 279              		.loc 1 90 9 view .LVU42
 280              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 281              		.loc 1 86 64 is_stmt 0 view .LVU43
 282 00cc 240094E5 		ldr	r0, [r4, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 283 00d0 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 284              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
 285              		.loc 1 90 16 view .LVU44
 286 00d4 0020A0E3 		mov	r2, #0	@ yy,
 287 00d8 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 288 00dc 006086E0 		add	r6, r6, r0	@ ivtmp.50, g_armwave_state.wave_buffer, tmp193
 289              	.LVL9:
 290              	.L14:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 291              		.loc 1 91 13 is_stmt 1 view .LVU45
 292              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
 293              		.loc 1 91 18 is_stmt 0 view .LVU46
 294 00e0 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 295              	.LVL10:
  92:armwave.c     **** 
  93:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 296              		.loc 1 93 13 is_stmt 1 view .LVU47
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  95:armwave.c     ****                 scale_value = (word & 0xff);
 297              		.loc 1 95 17 view .LVU48
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 298              		.loc 1 96 17 view .LVU49
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 299              		.loc 1 97 17 view .LVU50
 300              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 96 63 is_stmt 0 view .LVU51
 302 00e4 309094E5 		ldr	r9, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 303 00e8 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 304              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 97 47 view .LVU52
 306 00ec 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 307 00f0 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 308              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****                 word >>= 8;
 309              		.loc 1 98 22 view .LVU53
 310 00f4 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 311 00f8 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 312              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 313              		.loc 1 97 47 view .LVU54
 314 00fc 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 315 0100 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 316 0104 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 317 0108 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 318              	.LVL11:
 319              		.loc 1 98 17 is_stmt 1 view .LVU55
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 320              		.loc 1 95 17 view .LVU56
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 96 17 view .LVU57
  97:armwave.c     ****                 word >>= 8;
 322              		.loc 1 97 17 view .LVU58
 323              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 96 63 is_stmt 0 view .LVU59
 325 010c 30E094E5 		ldr	lr, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 326              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 327              		.loc 1 97 47 view .LVU60
 328 0110 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 329 0114 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 330              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 96 63 view .LVU61
 332 0118 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 333 011c 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 334              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 335              		.loc 1 97 47 view .LVU62
 336 0120 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 337 0124 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 338              	.LVL12:
 339              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 340              		.loc 1 90 37 view .LVU63
 341 0128 042082E2 		add	r2, r2, #4	@ yy, yy,
 342              	.LVL13:
 343              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 344              		.loc 1 97 47 view .LVU64
 345 012c 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 346 0130 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 347              	.LVL14:
 348              		.loc 1 98 17 is_stmt 1 view .LVU65
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 349              		.loc 1 95 17 view .LVU66
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 350              		.loc 1 96 17 view .LVU67
  97:armwave.c     ****                 word >>= 8;
 351              		.loc 1 97 17 view .LVU68
 352              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 96 63 is_stmt 0 view .LVU69
 354 0134 30E094E5 		ldr	lr, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 355              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 356              		.loc 1 90 9 view .LVU70
 357 0138 020051E1 		cmp	r1, r2	@ height, yy
 358              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 359              		.loc 1 97 47 view .LVU71
 360 013c 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 361 0140 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 362 0144 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 363 0148 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 364              		.loc 1 98 17 is_stmt 1 view .LVU72
 365              	.LVL15:
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 366              		.loc 1 95 17 view .LVU73
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 367              		.loc 1 96 17 view .LVU74
  97:armwave.c     ****                 word >>= 8;
 368              		.loc 1 97 17 view .LVU75
 369              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 96 63 is_stmt 0 view .LVU76
 371 014c 30C094E5 		ldr	ip, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 372              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 373              		.loc 1 97 47 view .LVU77
 374 0150 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 375 0154 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 376 0158 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 377 015c 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 378              		.loc 1 98 17 is_stmt 1 view .LVU78
 379              	.LVL16:
 380              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 381              		.loc 1 90 9 is_stmt 0 view .LVU79
 382 0160 DEFFFF8A 		bhi	.L14		@,
 383              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 384              		.loc 1 84 5 view .LVU80
 385 0164 282094E5 		ldr	r2, [r4, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 386              	.LVL17:
 387              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 388              		.loc 1 84 44 view .LVU81
 389 0168 017087E2 		add	r7, r7, #1	@ w, w,
 390              	.LVL18:
 391              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 392              		.loc 1 84 5 view .LVU82
 393 016c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 394 0170 D5FFFF3A 		bcc	.L15		@,
 395 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 396              	.L24:
 397              		.align	2
 398              	.L23:
 399 0178 00000000 		.word	g_armwave_state
 400              		.cfi_endproc
 401              	.LFE59:
 403              		.align	2
 404              		.global	armwave_fill_pixbuf_256
 405              		.syntax unified
 406              		.arm
 407              		.fpu vfp
 409              	armwave_fill_pixbuf_256:
 410              	.LVL19:
 411              	.LFB60:
  99:armwave.c     ****             }
 100:armwave.c     ****         }
 101:armwave.c     ****     }
 102:armwave.c     **** }
 103:armwave.c     **** 
 104:armwave.c     **** /*
 105:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 106:armwave.c     ****  */
 107:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 108:armwave.c     **** {
 412              		.loc 1 108 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 416              		.loc 1 109 5 view .LVU84
 110:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 417              		.loc 1 110 5 view .LVU85
 111:armwave.c     ****     uint8_t r, g, b, value;
 418              		.loc 1 111 5 view .LVU86
 112:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 419              		.loc 1 112 5 view .LVU87
 420              	@ armwave.c:108: {
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 421              		.loc 1 108 1 is_stmt 0 view .LVU88
 422 017c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 423              		.cfi_def_cfa_offset 36
 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 8, -20
 429              		.cfi_offset 9, -16
 430              		.cfi_offset 10, -12
 431              		.cfi_offset 11, -8
 432              		.cfi_offset 14, -4
 433              	@ armwave.c:116:     assert(out_buffer != NULL);
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 114:armwave.c     ****     uint32_t offset;
 115:armwave.c     **** 
 116:armwave.c     ****     assert(out_buffer != NULL);
 434              		.loc 1 116 5 view .LVU89
 435 0180 000050E3 		cmp	r0, #0	@ out_buffer
 436              	@ armwave.c:112:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 437              		.loc 1 112 15 view .LVU90
 438 0184 44529FE5 		ldr	r5, .L52	@ tmp360,
 439              	@ armwave.c:108: {
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 440              		.loc 1 108 1 view .LVU91
 441 0188 0CD04DE2 		sub	sp, sp, #12	@,,
 442              		.cfi_def_cfa_offset 48
 443              	@ armwave.c:112:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 444              		.loc 1 112 15 view .LVU92
 445 018c 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 446              	.LVL20:
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 447              		.loc 1 113 5 is_stmt 1 view .LVU93
 114:armwave.c     **** 
 448              		.loc 1 114 5 view .LVU94
 449              		.loc 1 116 5 view .LVU95
 450 0190 8900000A 		beq	.L50		@,
 117:armwave.c     **** 
 118:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 119:armwave.c     **** 
 120:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 451              		.loc 1 120 5 view .LVU96
 452              	@ armwave.c:120:     npix = g_armwave_state.target_width * 256;
 453              		.loc 1 120 41 is_stmt 0 view .LVU97
 454 0194 48C095E5 		ldr	ip, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 455 0198 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 456              	.LVL21:
 121:armwave.c     **** 
 122:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 457              		.loc 1 122 5 is_stmt 1 view .LVU98
 458              		.loc 1 122 5 is_stmt 0 view .LVU99
 459 019c 00005CE3 		cmp	ip, #0	@ npix,
 460 01a0 0A0000DA 		ble	.L25		@,
 461              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 124:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 125:armwave.c     ****         // most normal waveforms.
 126:armwave.c     ****         wave_word = *base_32ptr++;
 127:armwave.c     **** 
 128:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 130:armwave.c     ****                 value = wave_word & 0xff;
 131:armwave.c     ****                 wave_word >>= 8;
 132:armwave.c     **** 
 133:armwave.c     ****                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 462              		.loc 1 134 52 view .LVU100
 463 01a4 FCA5D5E1 		ldrsh	r10, [r5, #92]	@ _70, g_armwave_state.ch1_color.r
 464              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 465              		.loc 1 135 52 view .LVU101
 466 01a8 FE95D5E1 		ldrsh	r9, [r5, #94]	@ _76, g_armwave_state.ch1_color.g
 467              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 468              		.loc 1 136 52 view .LVU102
 469 01ac F0B6D5E1 		ldrsh	fp, [r5, #96]	@ _80, g_armwave_state.ch1_color.b
 470              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 471              		.loc 1 122 11 view .LVU103
 472 01b0 0030A0E3 		mov	r3, #0	@ n,
 473 01b4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 474              	.LVL22:
 475              	.L34:
 126:armwave.c     **** 
 476              		.loc 1 126 9 is_stmt 1 view .LVU104
 477              	@ armwave.c:126:         wave_word = *base_32ptr++;
 126:armwave.c     **** 
 478              		.loc 1 126 19 is_stmt 0 view .LVU105
 479 01b8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 480              	.LVL23:
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 481              		.loc 1 128 9 is_stmt 1 view .LVU106
 482              	@ armwave.c:128:         if(COND_UNLIKELY(wave_word != 0)) {
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 483              		.loc 1 128 11 is_stmt 0 view .LVU107
 484 01bc 000052E3 		cmp	r2, #0	@ wave_word,
 485 01c0 0400001A 		bne	.L51		@,
 486              	.LVL24:
 487              	.L29:
 488              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 489              		.loc 1 122 28 discriminator 2 view .LVU108
 490 01c4 043083E2 		add	r3, r3, #4	@ n, n,
 491              	.LVL25:
 492              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 493              		.loc 1 122 5 discriminator 2 view .LVU109
 494 01c8 03005CE1 		cmp	ip, r3	@ npix, n
 495 01cc F9FFFFCA 		bgt	.L34		@,
 496              	.LVL26:
 497              	.L25:
 498              	@ armwave.c:155: }
 137:armwave.c     **** 
 138:armwave.c     ****                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 141:armwave.c     **** 
 142:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 143:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 145:armwave.c     ****                     // Is there a better way?
 146:armwave.c     ****                     nsub = n + i;
 147:armwave.c     ****                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 152:armwave.c     ****             }
 153:armwave.c     ****         } 
 154:armwave.c     ****     }
 155:armwave.c     **** }
 499              		.loc 1 155 1 view .LVU110
 500 01d0 0CD08DE2 		add	sp, sp, #12	@,,
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed	@
 504 01d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 505              	.LVL27:
 506              	.L51:
 507              		.cfi_restore_state
 130:armwave.c     ****                 wave_word >>= 8;
 508              		.loc 1 130 17 is_stmt 1 view .LVU111
 131:armwave.c     **** 
 509              		.loc 1 131 17 view .LVU112
 510              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 511              		.loc 1 133 19 is_stmt 0 view .LVU113
 512 01d8 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 513              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 514              		.loc 1 131 27 view .LVU114
 515 01dc 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 516              	.LVL28:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 517              		.loc 1 133 17 is_stmt 1 view .LVU115
 518              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 519              		.loc 1 133 19 is_stmt 0 view .LVU116
 520 01e0 1900000A 		beq	.L30		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 521              		.loc 1 134 21 is_stmt 1 view .LVU117
 522              	.LVL29:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 523              		.loc 1 135 21 view .LVU118
 136:armwave.c     **** 
 524              		.loc 1 136 21 view .LVU119
 138:armwave.c     ****                     g = MIN(gg, 255);
 525              		.loc 1 138 21 view .LVU120
 139:armwave.c     ****                     b = MIN(bb, 255);
 526              		.loc 1 139 21 view .LVU121
 140:armwave.c     **** 
 527              		.loc 1 140 21 view .LVU122
 143:armwave.c     **** 
 528              		.loc 1 143 21 view .LVU123
 146:armwave.c     ****                     xx = nsub & 0xff;
 529              		.loc 1 146 21 view .LVU124
 147:armwave.c     ****                     yy = nsub >> 8;
 530              		.loc 1 147 21 view .LVU125
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 531              		.loc 1 148 21 view .LVU126
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 532              		.loc 1 149 21 view .LVU127
 150:armwave.c     ****                 }
 533              		.loc 1 150 21 view .LVU128
 534              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 535              		.loc 1 136 55 is_stmt 0 view .LVU129
 536 01e4 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 537              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 538              		.loc 1 135 55 view .LVU130
 539 01e8 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 540              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 541              		.loc 1 136 24 view .LVU131
 542 01ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 543              	.LVL30:
 544              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 545              		.loc 1 140 25 view .LVU132
 546 01f0 FF0054E3 		cmp	r4, #255	@ bb,
 547              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 548              		.loc 1 135 24 view .LVU133
 549 01f4 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 550              	.LVL31:
 551              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 552              		.loc 1 140 25 view .LVU134
 553 01f8 FF40A0A3 		movge	r4, #255	@ bb,
 554              	.LVL32:
 555              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 556              		.loc 1 134 55 view .LVU135
 557 01fc 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 558              	.LVL33:
 559              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 560              		.loc 1 139 25 view .LVU136
 561 0200 FF0058E3 		cmp	r8, #255	@ gg,
 562 0204 FF80A0A3 		movge	r8, #255	@ gg,
 563              	.LVL34:
 564              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 565              		.loc 1 134 24 view .LVU137
 566 0208 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 567              	.LVL35:
 568              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 569              		.loc 1 143 56 view .LVU138
 570 020c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 571              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 572              		.loc 1 150 39 view .LVU139
 573 0210 480095E5 		ldr	r0, [r5, #72]	@ tmp372, g_armwave_state.target_width
 574              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 575              		.loc 1 143 44 view .LVU140
 576 0214 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 577              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 578              		.loc 1 138 25 view .LVU141
 579 0218 FF0056E3 		cmp	r6, #255	@ rr,
 580              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 581              		.loc 1 143 56 view .LVU142
 582 021c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 583              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 584              		.loc 1 147 24 view .LVU143
 585 0220 7370EFE6 		uxtb	r7, r3	@ xx, n
 586              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 587              		.loc 1 143 44 view .LVU144
 588 0224 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 589              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 590              		.loc 1 143 51 view .LVU145
 591 0228 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 592              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 593              		.loc 1 138 25 view .LVU146
 594 022c FF60A0A3 		movge	r6, #255	@ rr,
 595              	.LVL36:
 596              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 597              		.loc 1 148 31 view .LVU147
 598 0230 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 599              	.LVL37:
 600              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 601              		.loc 1 150 39 view .LVU148
 602 0234 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 603              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 604              		.loc 1 143 62 view .LVU149
 605 0238 7660EFE6 		uxtb	r6, r6	@ rr, rr
 606              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 607              		.loc 1 150 49 view .LVU150
 608 023c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 609              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 610              		.loc 1 143 62 view .LVU151
 611 0240 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 612              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 613              		.loc 1 143 26 view .LVU152
 614 0244 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 615              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 616              		.loc 1 150 49 view .LVU153
 617 0248 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 618              	.LVL38:
 619              	.L30:
 130:armwave.c     ****                 wave_word >>= 8;
 620              		.loc 1 130 17 is_stmt 1 view .LVU154
 131:armwave.c     **** 
 621              		.loc 1 131 17 view .LVU155
 622              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 133 19 is_stmt 0 view .LVU156
 624 024c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 625              	.LVL39:
 626              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 627              		.loc 1 131 27 view .LVU157
 628 0250 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 629              	.LVL40:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 630              		.loc 1 133 17 is_stmt 1 view .LVU158
 631              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 133 19 is_stmt 0 view .LVU159
 633 0254 1C00000A 		beq	.L31		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 134 21 is_stmt 1 view .LVU160
 635              	.LVL41:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 135 21 view .LVU161
 136:armwave.c     **** 
 637              		.loc 1 136 21 view .LVU162
 138:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 138 21 view .LVU163
 139:armwave.c     ****                     b = MIN(bb, 255);
 639              		.loc 1 139 21 view .LVU164
 140:armwave.c     **** 
 640              		.loc 1 140 21 view .LVU165
 143:armwave.c     **** 
 641              		.loc 1 143 21 view .LVU166
 146:armwave.c     ****                     xx = nsub & 0xff;
 642              		.loc 1 146 21 view .LVU167
 643              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 644              		.loc 1 136 55 is_stmt 0 view .LVU168
 645 0258 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 646              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 135 55 view .LVU169
 648 025c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 649              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 650              		.loc 1 136 24 view .LVU170
 651 0260 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 652              	.LVL42:
 653              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 654              		.loc 1 140 25 view .LVU171
 655 0264 FF0054E3 		cmp	r4, #255	@ bb,
 656 0268 FF40A0A3 		movge	r4, #255	@ bb,
 657              	.LVL43:
 658              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 659              		.loc 1 134 55 view .LVU172
 660 026c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 661              	.LVL44:
 662              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 135 24 view .LVU173
 664 0270 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 665              	.LVL45:
 666              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 667              		.loc 1 143 44 view .LVU174
 668 0274 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 669              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 670              		.loc 1 139 25 view .LVU175
 671 0278 FF0057E3 		cmp	r7, #255	@ gg,
 672 027c 016083E2 		add	r6, r3, #1	@ _158, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 673              		.loc 1 147 21 is_stmt 1 view .LVU176
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 674              		.loc 1 148 21 view .LVU177
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 675              		.loc 1 149 21 view .LVU178
 150:armwave.c     ****                 }
 676              		.loc 1 150 21 view .LVU179
 677              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 678              		.loc 1 143 44 is_stmt 0 view .LVU180
 679 0280 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 680              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 681              		.loc 1 139 25 view .LVU181
 682 0284 FF70A0A3 		movge	r7, #255	@ gg,
 683              	.LVL46:
 684              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 685              		.loc 1 143 44 view .LVU182
 686 0288 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 687              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 688              		.loc 1 150 39 view .LVU183
 689 028c 484095E5 		ldr	r4, [r5, #72]	@ tmp375, g_armwave_state.target_width
 690              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 691              		.loc 1 134 24 view .LVU184
 692 0290 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 693              	.LVL47:
 694              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 695              		.loc 1 147 24 view .LVU185
 696 0294 7600EFE6 		uxtb	r0, r6	@ xx, _158
 697              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 698              		.loc 1 138 25 view .LVU186
 699 0298 FF005EE3 		cmp	lr, #255	@ rr,
 700              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 701              		.loc 1 143 56 view .LVU187
 702 029c 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 703              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 704              		.loc 1 148 31 view .LVU188
 705 02a0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 706              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 707              		.loc 1 150 39 view .LVU189
 708 02a4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 709              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 138 25 view .LVU190
 711 02a8 FFE0A0A3 		movge	lr, #255	@ rr,
 712              	.LVL48:
 713              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 714              		.loc 1 143 51 view .LVU191
 715 02ac 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 716              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 717              		.loc 1 143 56 view .LVU192
 718 02b0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 719              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 720              		.loc 1 143 51 view .LVU193
 721 02b4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 722              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 723              		.loc 1 143 62 view .LVU194
 724 02b8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 725              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 726              		.loc 1 150 49 view .LVU195
 727 02bc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 728              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 729              		.loc 1 143 62 view .LVU196
 730 02c0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 731              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 732              		.loc 1 143 26 view .LVU197
 733 02c4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 734              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 735              		.loc 1 150 49 view .LVU198
 736 02c8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 737              	.LVL49:
 738              	.L31:
 130:armwave.c     ****                 wave_word >>= 8;
 739              		.loc 1 130 17 is_stmt 1 view .LVU199
 131:armwave.c     **** 
 740              		.loc 1 131 17 view .LVU200
 741              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 133 19 is_stmt 0 view .LVU201
 743 02cc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 744              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 745              		.loc 1 131 27 view .LVU202
 746 02d0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 747              	.LVL50:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 133 17 is_stmt 1 view .LVU203
 749              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 133 19 is_stmt 0 view .LVU204
 751 02d4 1A00000A 		beq	.L32		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 134 21 is_stmt 1 view .LVU205
 753              	.LVL51:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 135 21 view .LVU206
 136:armwave.c     **** 
 755              		.loc 1 136 21 view .LVU207
 138:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 138 21 view .LVU208
 139:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 139 21 view .LVU209
 140:armwave.c     **** 
 758              		.loc 1 140 21 view .LVU210
 143:armwave.c     **** 
 759              		.loc 1 143 21 view .LVU211
 146:armwave.c     ****                     xx = nsub & 0xff;
 760              		.loc 1 146 21 view .LVU212
 761              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 762              		.loc 1 136 55 is_stmt 0 view .LVU213
 763 02d8 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 764              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 765              		.loc 1 135 55 view .LVU214
 766 02dc 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 767              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 768              		.loc 1 136 24 view .LVU215
 769 02e0 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 770              	.LVL52:
 771              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 772              		.loc 1 134 55 view .LVU216
 773 02e4 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 774              	.LVL53:
 775              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 776              		.loc 1 140 25 view .LVU217
 777 02e8 FF0054E3 		cmp	r4, #255	@ bb,
 778              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 779              		.loc 1 135 24 view .LVU218
 780 02ec 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 781              	.LVL54:
 782              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 783              		.loc 1 140 25 view .LVU219
 784 02f0 FF40A0A3 		movge	r4, #255	@ bb,
 785              	.LVL55:
 786              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 787              		.loc 1 139 25 view .LVU220
 788 02f4 FF0056E3 		cmp	r6, #255	@ gg,
 789 02f8 FF60A0A3 		movge	r6, #255	@ gg,
 790              	.LVL56:
 139:armwave.c     ****                     b = MIN(bb, 255);
 791              		.loc 1 139 25 view .LVU221
 792 02fc 027083E2 		add	r7, r3, #2	@ _66, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 793              		.loc 1 147 21 is_stmt 1 view .LVU222
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 794              		.loc 1 148 21 view .LVU223
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 795              		.loc 1 149 21 view .LVU224
 150:armwave.c     ****                 }
 796              		.loc 1 150 21 view .LVU225
 797              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 798              		.loc 1 134 24 is_stmt 0 view .LVU226
 799 0300 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 800              	.LVL57:
 801              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 802              		.loc 1 150 39 view .LVU227
 803 0304 480095E5 		ldr	r0, [r5, #72]	@ tmp376, g_armwave_state.target_width
 804              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 805              		.loc 1 138 25 view .LVU228
 806 0308 FF005EE3 		cmp	lr, #255	@ rr,
 807              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 808              		.loc 1 147 24 view .LVU229
 809 030c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 810              	.LVL58:
 811              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 812              		.loc 1 143 56 view .LVU230
 813 0310 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 814              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 815              		.loc 1 143 44 view .LVU231
 816 0314 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 817              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 138 25 view .LVU232
 819 0318 FFE0A0A3 		movge	lr, #255	@ rr,
 820              	.LVL59:
 821              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 822              		.loc 1 148 31 view .LVU233
 823 031c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 824              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 825              		.loc 1 150 39 view .LVU234
 826 0320 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 827              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 828              		.loc 1 143 44 view .LVU235
 829 0324 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 830              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 831              		.loc 1 143 56 view .LVU236
 832 0328 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 833              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 834              		.loc 1 143 51 view .LVU237
 835 032c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 836              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 837              		.loc 1 143 62 view .LVU238
 838 0330 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 839              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 840              		.loc 1 150 49 view .LVU239
 841 0334 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 842              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 843              		.loc 1 143 62 view .LVU240
 844 0338 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 845              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 846              		.loc 1 143 26 view .LVU241
 847 033c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 848              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 849              		.loc 1 150 49 view .LVU242
 850 0340 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 851              	.L32:
 852              	.LVL60:
 130:armwave.c     ****                 wave_word >>= 8;
 853              		.loc 1 130 17 is_stmt 1 view .LVU243
 131:armwave.c     **** 
 854              		.loc 1 131 17 view .LVU244
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 855              		.loc 1 133 17 view .LVU245
 856              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 857              		.loc 1 133 19 is_stmt 0 view .LVU246
 858 0344 000052E3 		cmp	r2, #0	@ wave_word,
 859 0348 9DFFFF0A 		beq	.L29		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 860              		.loc 1 134 21 is_stmt 1 view .LVU247
 861              	.LVL61:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 862              		.loc 1 135 21 view .LVU248
 136:armwave.c     **** 
 863              		.loc 1 136 21 view .LVU249
 138:armwave.c     ****                     g = MIN(gg, 255);
 864              		.loc 1 138 21 view .LVU250
 139:armwave.c     ****                     b = MIN(bb, 255);
 865              		.loc 1 139 21 view .LVU251
 140:armwave.c     **** 
 866              		.loc 1 140 21 view .LVU252
 143:armwave.c     **** 
 867              		.loc 1 143 21 view .LVU253
 146:armwave.c     ****                     xx = nsub & 0xff;
 868              		.loc 1 146 21 view .LVU254
 869              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 870              		.loc 1 136 55 is_stmt 0 view .LVU255
 871 034c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 872              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 873              		.loc 1 135 55 view .LVU256
 874 0350 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 875              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 876              		.loc 1 136 24 view .LVU257
 877 0354 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 878              	.LVL62:
 879              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 880              		.loc 1 134 55 view .LVU258
 881 0358 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 882              	.LVL63:
 883              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 884              		.loc 1 140 25 view .LVU259
 885 035c FF005EE3 		cmp	lr, #255	@ bb,
 886              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 887              		.loc 1 135 24 view .LVU260
 888 0360 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 889              	.LVL64:
 890              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 891              		.loc 1 140 25 view .LVU261
 892 0364 FFE0A0A3 		movge	lr, #255	@ bb,
 893              	.LVL65:
 894              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 139 25 view .LVU262
 896 0368 FF0054E3 		cmp	r4, #255	@ gg,
 897 036c FF40A0A3 		movge	r4, #255	@ gg,
 898              	.LVL66:
 139:armwave.c     ****                     b = MIN(bb, 255);
 899              		.loc 1 139 25 view .LVU263
 900 0370 036083E2 		add	r6, r3, #3	@ _59, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 901              		.loc 1 147 21 is_stmt 1 view .LVU264
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 902              		.loc 1 148 21 view .LVU265
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 903              		.loc 1 149 21 view .LVU266
 150:armwave.c     ****                 }
 904              		.loc 1 150 21 view .LVU267
 905              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 906              		.loc 1 134 24 is_stmt 0 view .LVU268
 907 0374 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 908              	.LVL67:
 909              	@ armwave.c:149:                     offset = yy + (xx * g_armwave_state.target_width);
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 910              		.loc 1 149 39 view .LVU269
 911 0378 487095E5 		ldr	r7, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 912              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 913              		.loc 1 138 25 view .LVU270
 914 037c FF0052E3 		cmp	r2, #255	@ rr,
 915              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 916              		.loc 1 147 24 view .LVU271
 917 0380 7680EFE6 		uxtb	r8, r6	@ xx, _59
 918              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 919              		.loc 1 143 56 view .LVU272
 920 0384 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 921              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 922              		.loc 1 143 44 view .LVU273
 923 0388 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 924              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 925              		.loc 1 138 25 view .LVU274
 926 038c FF20A0A3 		movge	r2, #255	@ rr,
 927              	.LVL68:
 928              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 929              		.loc 1 148 31 view .LVU275
 930 0390 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 931              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 932              		.loc 1 143 44 view .LVU276
 933 0394 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 934              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 935              		.loc 1 143 56 view .LVU277
 936 0398 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 937              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 938              		.loc 1 150 39 view .LVU278
 939 039c 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 940              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 941              		.loc 1 143 51 view .LVU279
 942 03a0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 943              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 944              		.loc 1 143 62 view .LVU280
 945 03a4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 946              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 947              		.loc 1 150 49 view .LVU281
 948 03a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 949              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 950              		.loc 1 143 62 view .LVU282
 951 03ac 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 952              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 953              		.loc 1 143 26 view .LVU283
 954 03b0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 955              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 956              		.loc 1 150 49 view .LVU284
 957 03b4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 958 03b8 81FFFFEA 		b	.L29		@
 959              	.LVL69:
 960              	.L50:
 116:armwave.c     **** 
 961              		.loc 1 116 5 is_stmt 1 discriminator 1 view .LVU285
 962 03bc 10309FE5 		ldr	r3, .L52+4	@,
 963 03c0 7420A0E3 		mov	r2, #116	@,
 964 03c4 0C109FE5 		ldr	r1, .L52+8	@,
 965              	.LVL70:
 116:armwave.c     **** 
 966              		.loc 1 116 5 is_stmt 0 discriminator 1 view .LVU286
 967 03c8 0C009FE5 		ldr	r0, .L52+12	@,
 968              	.LVL71:
 116:armwave.c     **** 
 969              		.loc 1 116 5 discriminator 1 view .LVU287
 970 03cc FEFFFFEB 		bl	__assert_fail		@
 971              	.LVL72:
 972              	.L53:
 116:armwave.c     **** 
 973              		.loc 1 116 5 discriminator 1 view .LVU288
 974              		.align	2
 975              	.L52:
 976 03d0 00000000 		.word	g_armwave_state
 977 03d4 00000000 		.word	.LANCHOR0
 978 03d8 20000000 		.word	.LC2
 979 03dc 2C000000 		.word	.LC3
 980              		.cfi_endproc
 981              	.LFE60:
 983              		.align	2
 984              		.global	armwave_fill_pixbuf_scaled
 985              		.syntax unified
 986              		.arm
 987              		.fpu vfp
 989              	armwave_fill_pixbuf_scaled:
 990              	.LVL73:
 991              	.LFB61:
 156:armwave.c     **** 
 157:armwave.c     **** /*
 158:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 159:armwave.c     ****  * Rows are repeated as necessary.
 160:armwave.c     ****  */
 161:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 162:armwave.c     **** {
 992              		.loc 1 162 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 163:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 996              		.loc 1 163 5 view .LVU290
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 997              		.loc 1 164 5 view .LVU291
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 998              		.loc 1 165 5 view .LVU292
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 999              		.loc 1 166 5 view .LVU293
 1000              	@ armwave.c:162: {
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1001              		.loc 1 162 1 is_stmt 0 view .LVU294
 1002 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1003              		.cfi_def_cfa_offset 36
 1004              		.cfi_offset 4, -36
 1005              		.cfi_offset 5, -32
 1006              		.cfi_offset 6, -28
 1007              		.cfi_offset 7, -24
 1008              		.cfi_offset 8, -20
 1009              		.cfi_offset 9, -16
 1010              		.cfi_offset 10, -12
 1011              		.cfi_offset 11, -8
 1012              		.cfi_offset 14, -4
 1013              	@ armwave.c:170:     assert(out_buffer != NULL);
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 168:armwave.c     ****     uint32_t offset;
 169:armwave.c     **** 
 170:armwave.c     ****     assert(out_buffer != NULL);
 1014              		.loc 1 170 5 view .LVU295
 1015 03e4 000050E3 		cmp	r0, #0	@ out_buffer
 1016              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1017              		.loc 1 166 15 view .LVU296
 1018 03e8 34519FE5 		ldr	r5, .L79	@ tmp202,
 1019              	@ armwave.c:162: {
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1020              		.loc 1 162 1 view .LVU297
 1021 03ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1022              		.cfi_def_cfa_offset 48
 1023              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1024              		.loc 1 166 15 view .LVU298
 1025 03f0 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1026              	.LVL74:
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1027              		.loc 1 167 5 is_stmt 1 view .LVU299
 168:armwave.c     **** 
 1028              		.loc 1 168 5 view .LVU300
 1029              		.loc 1 170 5 view .LVU301
 1030 03f4 4500000A 		beq	.L76		@,
 171:armwave.c     **** 
 172:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1031              		.loc 1 172 5 view .LVU302
 1032              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 1033              		.loc 1 172 41 is_stmt 0 view .LVU303
 1034 03f8 488095E5 		ldr	r8, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1035 03fc 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1036              	.LVL75:
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1037              		.loc 1 173 5 is_stmt 1 view .LVU304
 174:armwave.c     **** 
 175:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1038              		.loc 1 175 5 view .LVU305
 1039              		.loc 1 175 5 is_stmt 0 view .LVU306
 1040 0400 000058E3 		cmp	r8, #0	@ npix,
 1041 0404 0B0000DA 		ble	.L54		@,
 1042              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 177:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 178:armwave.c     ****         // most normal waveforms.
 179:armwave.c     ****         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 181:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 184:armwave.c     ****                 wave_word >>= 8;
 185:armwave.c     **** 
 186:armwave.c     ****                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1043              		.loc 1 188 52 view .LVU307
 1044 0408 FE35D5E1 		ldrsh	r3, [r5, #94]	@ _11, g_armwave_state.ch1_color.g
 1045              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1046              		.loc 1 187 52 view .LVU308
 1047 040c FCB5D5E1 		ldrsh	fp, [r5, #92]	@ _7, g_armwave_state.ch1_color.r
 1048              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1049              		.loc 1 175 11 view .LVU309
 1050 0410 00E0A0E3 		mov	lr, #0	@ n,
 1051              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1052              		.loc 1 188 52 view .LVU310
 1053 0414 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1054              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1055              		.loc 1 189 52 view .LVU311
 1056 0418 F036D5E1 		ldrsh	r3, [r5, #96]	@ _14, g_armwave_state.ch1_color.b
 1057 041c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1058              	.LVL76:
 1059              	.L61:
 179:armwave.c     **** 
 1060              		.loc 1 179 9 is_stmt 1 view .LVU312
 1061              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 1062              		.loc 1 179 19 is_stmt 0 view .LVU313
 1063 0420 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1064              	.LVL77:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 1065              		.loc 1 181 9 is_stmt 1 view .LVU314
 1066              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 1067              		.loc 1 181 11 is_stmt 0 view .LVU315
 1068 0424 00005CE3 		cmp	ip, #0	@ wave_word,
 1069 0428 0400001A 		bne	.L77		@,
 1070              	.L57:
 1071              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1072              		.loc 1 175 28 view .LVU316
 1073 042c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1074              	.LVL78:
 1075              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1076              		.loc 1 175 5 view .LVU317
 1077 0430 0E0058E1 		cmp	r8, lr	@ npix, n
 1078 0434 F9FFFFCA 		bgt	.L61		@,
 1079              	.LVL79:
 1080              	.L54:
 1081              	@ armwave.c:211: }
 190:armwave.c     **** 
 191:armwave.c     ****                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 194:armwave.c     **** 
 195:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 196:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 198:armwave.c     ****                     // Do line scaling as necessary.
 199:armwave.c     ****                     nsub = n + w;
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 202:armwave.c     **** 
 203:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 207:armwave.c     ****                 }
 208:armwave.c     ****             }
 209:armwave.c     ****         }
 210:armwave.c     ****     }
 211:armwave.c     **** }
 1082              		.loc 1 211 1 view .LVU318
 1083 0438 0CD08DE2 		add	sp, sp, #12	@,,
 1084              		.cfi_remember_state
 1085              		.cfi_def_cfa_offset 36
 1086              		@ sp needed	@
 1087 043c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1088              	.LVL80:
 1089              	.L77:
 1090              		.cfi_restore_state
 1091              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1092              		.loc 1 186 19 view .LVU319
 1093 0440 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1094              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1095              		.loc 1 182 19 view .LVU320
 1096 0444 0090A0E3 		mov	r9, #0	@ w,
 1097              	.LVL81:
 183:armwave.c     ****                 wave_word >>= 8;
 1098              		.loc 1 183 17 is_stmt 1 view .LVU321
 184:armwave.c     **** 
 1099              		.loc 1 184 17 view .LVU322
 1100              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 1101              		.loc 1 184 27 is_stmt 0 view .LVU323
 1102 0448 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1103              	.LVL82:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1104              		.loc 1 186 17 is_stmt 1 view .LVU324
 1105              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1106              		.loc 1 186 19 is_stmt 0 view .LVU325
 1107 044c 0500001A 		bne	.L78		@,
 1108              	.L58:
 1109              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1110              		.loc 1 182 32 view .LVU326
 1111 0450 019089E2 		add	r9, r9, #1	@ w, w,
 1112              	.LVL83:
 1113              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1114              		.loc 1 182 13 view .LVU327
 1115 0454 040059E3 		cmp	r9, #4	@ w,
 1116 0458 F3FFFF0A 		beq	.L57		@,
 183:armwave.c     ****                 wave_word >>= 8;
 1117              		.loc 1 183 17 is_stmt 1 view .LVU328
 1118              	.LVL84:
 184:armwave.c     **** 
 1119              		.loc 1 184 17 view .LVU329
 1120              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1121              		.loc 1 186 19 is_stmt 0 view .LVU330
 1122 045c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1123              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 1124              		.loc 1 184 27 view .LVU331
 1125 0460 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1126              	.LVL85:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1127              		.loc 1 186 17 is_stmt 1 view .LVU332
 1128              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1129              		.loc 1 186 19 is_stmt 0 view .LVU333
 1130 0464 F9FFFF0A 		beq	.L58		@,
 1131              	.L78:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1132              		.loc 1 187 21 is_stmt 1 view .LVU334
 1133              	.LVL86:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1134              		.loc 1 188 21 view .LVU335
 189:armwave.c     **** 
 1135              		.loc 1 189 21 view .LVU336
 191:armwave.c     ****                     g = MIN(gg, 255);
 1136              		.loc 1 191 21 view .LVU337
 192:armwave.c     ****                     b = MIN(bb, 255);
 1137              		.loc 1 192 21 view .LVU338
 193:armwave.c     **** 
 1138              		.loc 1 193 21 view .LVU339
 196:armwave.c     **** 
 1139              		.loc 1 196 21 view .LVU340
 1140              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1141              		.loc 1 189 55 is_stmt 0 view .LVU341
 1142 0468 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1143              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1144              		.loc 1 188 55 view .LVU342
 1145 046c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1146 0470 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1147              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1148              		.loc 1 189 55 view .LVU343
 1149 0474 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1150              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1151              		.loc 1 188 55 view .LVU344
 1152 0478 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1153              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1154              		.loc 1 189 24 view .LVU345
 1155 047c 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1156              	.LVL87:
 1157              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1158              		.loc 1 187 55 view .LVU346
 1159 0480 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1160              	.LVL88:
 1161              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1162              		.loc 1 188 24 view .LVU347
 1163 0484 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1164              	.LVL89:
 1165              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 1166              		.loc 1 193 25 view .LVU348
 1167 0488 FF0052E3 		cmp	r2, #255	@ bb,
 1168 048c FF20A0A3 		movge	r2, #255	@ bb,
 1169              	.LVL90:
 1170              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 1171              		.loc 1 192 25 view .LVU349
 1172 0490 FF0051E3 		cmp	r1, #255	@ gg,
 1173 0494 FF10A0A3 		movge	r1, #255	@ gg,
 1174              	.LVL91:
 1175              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1176              		.loc 1 187 24 view .LVU350
 1177 0498 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1178              	.LVL92:
 1179              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 1180              		.loc 1 191 25 view .LVU351
 1181 049c FF0053E3 		cmp	r3, #255	@ rr,
 1182              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1183              		.loc 1 196 56 view .LVU352
 1184 04a0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1185              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 1186              		.loc 1 191 25 view .LVU353
 1187 04a4 FF30A0A3 		movge	r3, #255	@ rr,
 1188              	.LVL93:
 1189              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1190              		.loc 1 196 44 view .LVU354
 1191 04a8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1192              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1193              		.loc 1 196 56 view .LVU355
 1194 04ac 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1195              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1196              		.loc 1 200 57 view .LVU356
 1197 04b0 20A095E5 		ldr	r10, [r5, #32]	@ _28, g_armwave_state.vscale
 1198              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1199              		.loc 1 196 44 view .LVU357
 1200 04b4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1201              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1202              		.loc 1 196 51 view .LVU358
 1203 04b8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1204              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1205              		.loc 1 196 62 view .LVU359
 1206 04bc 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1207              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1208              		.loc 1 200 32 view .LVU360
 1209 04c0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1210              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1211              		.loc 1 196 62 view .LVU361
 1212 04c4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1213              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1214              		.loc 1 203 21 view .LVU362
 1215 04c8 00005AE3 		cmp	r10, #0	@ _28,
 1216              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1217              		.loc 1 196 26 view .LVU363
 1218 04cc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1219              	.LVL94:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1220              		.loc 1 199 21 is_stmt 1 view .LVU364
 200:armwave.c     ****                     xx = (nsub >> 8);
 1221              		.loc 1 200 21 view .LVU365
 1222              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 1223              		.loc 1 201 32 is_stmt 0 view .LVU366
 1224 04d0 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1225              	.LVL95:
 1226              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1227              		.loc 1 200 24 view .LVU367
 1228 04d4 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1229              	.LVL96:
 201:armwave.c     **** 
 1230              		.loc 1 201 21 is_stmt 1 view .LVU368
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1231              		.loc 1 203 21 view .LVU369
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1232              		.loc 1 203 21 is_stmt 0 view .LVU370
 1233 04d8 DCFFFF0A 		beq	.L58		@,
 1234              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1235              		.loc 1 203 29 view .LVU371
 1236 04dc 0030A0E3 		mov	r3, #0	@ row,
 1237              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1238              		.loc 1 203 38 view .LVU372
 1239 04e0 0320A0E1 		mov	r2, r3	@ _35, row
 1240              	.LVL97:
 1241              	.L59:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1242              		.loc 1 204 25 is_stmt 1 discriminator 3 view .LVU373
 205:armwave.c     ****                     }
 1243              		.loc 1 205 25 discriminator 3 view .LVU374
 1244              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1245              		.loc 1 204 52 is_stmt 0 discriminator 3 view .LVU375
 1246 04e4 481095E5 		ldr	r1, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1247              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1248              		.loc 1 204 45 discriminator 3 view .LVU376
 1249 04e8 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1250              	.LVL98:
 1251              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1252              		.loc 1 203 67 discriminator 3 view .LVU377
 1253 04ec 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1254              	.LVL99:
 1255              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 1256              		.loc 1 205 43 discriminator 3 view .LVU378
 1257 04f0 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1258              	.LVL100:
 1259              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1260              		.loc 1 203 67 discriminator 3 view .LVU379
 1261 04f4 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1262              	.LVL101:
 1263              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1264              		.loc 1 203 38 discriminator 3 view .LVU380
 1265 04f8 0320A0E1 		mov	r2, r3	@ _35, row
 1266              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 1267              		.loc 1 205 53 discriminator 3 view .LVU381
 1268 04fc 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1269              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1270              		.loc 1 203 21 discriminator 3 view .LVU382
 1271 0500 201095E5 		ldr	r1, [r5, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1272              	.LVL102:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1273              		.loc 1 203 21 discriminator 3 view .LVU383
 1274 0504 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1275 0508 F5FFFF3A 		bcc	.L59		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 203 21 discriminator 3 view .LVU384
 1277 050c CFFFFFEA 		b	.L58		@
 1278              	.LVL103:
 1279              	.L76:
 170:armwave.c     **** 
 1280              		.loc 1 170 5 is_stmt 1 discriminator 1 view .LVU385
 1281 0510 10309FE5 		ldr	r3, .L79+4	@,
 1282 0514 AA20A0E3 		mov	r2, #170	@,
 1283 0518 0C109FE5 		ldr	r1, .L79+8	@,
 1284 051c 0C009FE5 		ldr	r0, .L79+12	@,
 1285              	.LVL104:
 170:armwave.c     **** 
 1286              		.loc 1 170 5 is_stmt 0 discriminator 1 view .LVU386
 1287 0520 FEFFFFEB 		bl	__assert_fail		@
 1288              	.LVL105:
 1289              	.L80:
 1290              		.align	2
 1291              	.L79:
 1292 0524 00000000 		.word	g_armwave_state
 1293 0528 18000000 		.word	.LANCHOR0+24
 1294 052c 20000000 		.word	.LC2
 1295 0530 2C000000 		.word	.LC3
 1296              		.cfi_endproc
 1297              	.LFE61:
 1299              		.align	2
 1300              		.global	armwave_setup_render
 1301              		.syntax unified
 1302              		.arm
 1303              		.fpu vfp
 1305              	armwave_setup_render:
 1306              	.LVL106:
 1307              	.LFB62:
 212:armwave.c     **** 
 213:armwave.c     **** /*
 214:armwave.c     ****  * Setup the renderer with passed parameters.
 215:armwave.c     ****  */
 216:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 217:armwave.c     **** {
 1308              		.loc 1 217 1 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 12, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 218:armwave.c     ****     uint32_t length, xx;
 1312              		.loc 1 218 5 view .LVU388
 219:armwave.c     ****     float points_per_pixel;
 1313              		.loc 1 219 5 view .LVU389
 220:armwave.c     **** 
 221:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1314              		.loc 1 221 5 view .LVU390
 1315              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1316              		.loc 1 217 1 is_stmt 0 view .LVU391
 1317 0534 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1318              		.cfi_def_cfa_offset 32
 1319              		.cfi_offset 4, -32
 1320              		.cfi_offset 5, -28
 1321              		.cfi_offset 6, -24
 1322              		.cfi_offset 7, -20
 1323              		.cfi_offset 8, -16
 1324              		.cfi_offset 9, -12
 1325              		.cfi_offset 10, -8
 1326              		.cfi_offset 14, -4
 1327 0538 028B2DED 		vpush.64	{d8}	@
 1328              		.cfi_def_cfa_offset 40
 1329              		.cfi_offset 80, -40
 1330              		.cfi_offset 81, -36
 1331 053c 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1332 0540 0190A0E1 		mov	r9, r1	@ end_point, end_point
 1333 0544 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1334 0548 10D04DE2 		sub	sp, sp, #16	@,,
 1335              		.cfi_def_cfa_offset 56
 1336              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1337              		.loc 1 217 1 view .LVU392
 1338 054c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1339 0550 38709DE5 		ldr	r7, [sp, #56]	@ target_width, target_width
 1340 0554 3C609DE5 		ldr	r6, [sp, #60]	@ target_height, target_height
 1341 0558 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1342              	@ armwave.c:221:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1343              		.loc 1 221 5 view .LVU393
 1344 055c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1345 0560 04708DE5 		str	r7, [sp, #4]	@ target_width,
 1346 0564 0230A0E1 		mov	r3, r2	@, waves_max
 1347              	.LVL107:
 1348              		.loc 1 221 5 view .LVU394
 1349 0568 08608DE5 		str	r6, [sp, #8]	@ target_height,
 1350 056c 0120A0E1 		mov	r2, r1	@, end_point
 1351              	.LVL108:
 1352              		.loc 1 221 5 view .LVU395
 1353 0570 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1354 0574 0010A0E1 		mov	r1, r0	@, start_point
 1355              	.LVL109:
 1356              		.loc 1 221 5 view .LVU396
 1357 0578 C8019FE5 		ldr	r0, .L104+4	@,
 1358              	.LVL110:
 1359              		.loc 1 221 5 view .LVU397
 1360 057c FEFFFFEB 		bl	printf		@
 1361              	.LVL111:
 222:armwave.c     **** 
 223:armwave.c     ****     // TODO these asserts should instead raise PyExc
 224:armwave.c     ****     assert(start_point < end_point);
 1362              		.loc 1 224 5 is_stmt 1 view .LVU398
 1363 0580 090055E1 		cmp	r5, r9	@ start_point, end_point
 1364 0584 6900002A 		bcs	.L99		@,
 225:armwave.c     **** 
 226:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 227:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1365              		.loc 1 227 5 view .LVU399
 1366 0588 013C46E2 		sub	r3, r6, #256	@ tmp154, target_height,
 1367 058c 013CD3E3 		bics	r3, r3, #256	@ tmp231, tmp154,
 1368 0590 4B00000A 		beq	.L83		@,
 1369              	@ armwave.c:227:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1370              		.loc 1 227 5 is_stmt 0 discriminator 1 view .LVU400
 1371 0594 013B46E2 		sub	r3, r6, #1024	@ tmp156, target_height,
 1372 0598 013BD3E3 		bics	r3, r3, #1024	@ tmp232, tmp156,
 1373 059c 5400001A 		bne	.L100		@,
 228:armwave.c     **** 
 229:armwave.c     ****     if(target_height == 256) {
 230:armwave.c     ****         g_armwave_state.row_shift = 8;
 231:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 232:armwave.c     ****     } else if(target_height == 512) {
 1374              		.loc 1 232 12 is_stmt 1 view .LVU401
 233:armwave.c     ****         g_armwave_state.row_shift = 9;
 234:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 235:armwave.c     ****     } else if(target_height == 1024) {
 1375              		.loc 1 235 12 view .LVU402
 1376              	@ armwave.c:235:     } else if(target_height == 1024) {
 1377              		.loc 1 235 14 is_stmt 0 view .LVU403
 1378 05a0 010B56E3 		cmp	r6, #1024	@ target_height,
 1379              	@ armwave.c:236:         g_armwave_state.row_shift = 10;
 236:armwave.c     ****         g_armwave_state.row_shift = 10;
 1380              		.loc 1 236 35 view .LVU404
 1381 05a4 A0419FE5 		ldr	r4, .L104+8	@ tmp228,
 1382              	@ armwave.c:235:     } else if(target_height == 1024) {
 235:armwave.c     ****         g_armwave_state.row_shift = 10;
 1383              		.loc 1 235 14 view .LVU405
 1384 05a8 4D00000A 		beq	.L101		@,
 237:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 238:armwave.c     ****     } else if(target_height == 2048) {
 1385              		.loc 1 238 12 is_stmt 1 view .LVU406
 1386              	@ armwave.c:238:     } else if(target_height == 2048) {
 1387              		.loc 1 238 14 is_stmt 0 view .LVU407
 1388 05ac 020B56E3 		cmp	r6, #2048	@ target_height,
 239:armwave.c     ****         g_armwave_state.row_shift = 11;
 1389              		.loc 1 239 9 is_stmt 1 view .LVU408
 1390              	@ armwave.c:239:         g_armwave_state.row_shift = 11;
 1391              		.loc 1 239 35 is_stmt 0 view .LVU409
 1392 05b0 0B20A003 		moveq	r2, #11	@ tmp175,
 1393              	@ armwave.c:240:         g_armwave_state.row_mask = 0x7ff;
 240:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1394              		.loc 1 240 34 view .LVU410
 1395 05b4 94319F05 		ldreq	r3, .L104+12	@ tmp177,
 1396 05b8 F025C401 		strdeq	r2, [r4, #80]	@, tmp228,
 1397              	.L86:
 241:armwave.c     ****     } 
 242:armwave.c     **** 
 243:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 244:armwave.c     ****     g_armwave_state.xstride = target_height;
 1398              		.loc 1 244 5 is_stmt 1 view .LVU411
 1399              	@ armwave.c:249:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 246:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 247:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 248:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 249:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1400              		.loc 1 249 42 is_stmt 0 view .LVU412
 1401 05bc 960700E0 		mul	r0, r6, r7	@ tmp185, target_height, target_width
 1402              	@ armwave.c:251:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 251:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1403              		.loc 1 251 68 view .LVU413
 1404 05c0 0734A0E1 		lsl	r3, r7, #8	@ _9, target_width,
 1405              	@ armwave.c:245:     g_armwave_state.vscale = target_height / 256;
 245:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1406              		.loc 1 245 44 view .LVU414
 1407 05c4 26C4A0E1 		lsr	ip, r6, #8	@ tmp180, target_height,
 1408              	@ armwave.c:256:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 252:armwave.c     ****     g_armwave_state.target_width = target_width;
 253:armwave.c     ****     g_armwave_state.target_height = target_height;
 254:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 255:armwave.c     **** 
 256:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1409              		.loc 1 256 5 view .LVU415
 1410 05c8 0310A0E1 		mov	r1, r3	@, _9
 1411              	@ armwave.c:250:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1412              		.loc 1 250 37 view .LVU416
 1413 05cc 012CA0E3 		mov	r2, #256	@ tmp187,
 1414              	@ armwave.c:249:     g_armwave_state.size = target_height * target_width;
 249:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1415              		.loc 1 249 26 view .LVU417
 1416 05d0 440084E5 		str	r0, [r4, #68]	@ tmp185, g_armwave_state.size
 1417              	@ armwave.c:254:     g_armwave_state.wave_length = end_point - start_point;
 254:armwave.c     **** 
 1418              		.loc 1 254 45 view .LVU418
 1419 05d4 055049E0 		sub	r5, r9, r5	@ _10, end_point, start_point
 1420              	.LVL112:
 1421              	@ armwave.c:256:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1422              		.loc 1 256 5 view .LVU419
 1423 05d8 74019FE5 		ldr	r0, .L104+16	@,
 1424              	@ armwave.c:251:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 251:armwave.c     ****     g_armwave_state.target_width = target_width;
 1425              		.loc 1 251 34 view .LVU420
 1426 05dc 403084E5 		str	r3, [r4, #64]	@ _9, g_armwave_state.ch_buff_size
 1427              	@ armwave.c:254:     g_armwave_state.wave_length = end_point - start_point;
 254:armwave.c     **** 
 1428              		.loc 1 254 33 view .LVU421
 1429 05e0 3C5084E5 		str	r5, [r4, #60]	@ _10, g_armwave_state.wave_length
 1430              	@ armwave.c:244:     g_armwave_state.xstride = target_height;
 244:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1431              		.loc 1 244 29 view .LVU422
 1432 05e4 1C6084E5 		str	r6, [r4, #28]	@ target_height, g_armwave_state.xstride
 245:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1433              		.loc 1 245 5 is_stmt 1 view .LVU423
 1434              	@ armwave.c:246:     g_armwave_state.wave_stride = wave_stride;
 246:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1435              		.loc 1 246 33 is_stmt 0 view .LVU424
 1436 05e8 24A084E5 		str	r10, [r4, #36]	@ wave_stride, g_armwave_state.wave_stride
 1437              	@ armwave.c:247:     g_armwave_state.waves_max = waves_max;
 247:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1438              		.loc 1 247 31 view .LVU425
 1439 05ec 2C8084E5 		str	r8, [r4, #44]	@ waves_max, g_armwave_state.waves_max
 1440              	@ armwave.c:248:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 248:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1441              		.loc 1 248 27 view .LVU426
 1442 05f0 288084E5 		str	r8, [r4, #40]	@ waves_max, g_armwave_state.waves
 1443              	@ armwave.c:252:     g_armwave_state.target_width = target_width;
 252:armwave.c     ****     g_armwave_state.target_height = target_height;
 1444              		.loc 1 252 34 view .LVU427
 1445 05f4 487084E5 		str	r7, [r4, #72]	@ target_width, g_armwave_state.target_width
 1446              	@ armwave.c:253:     g_armwave_state.target_height = target_height;
 253:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1447              		.loc 1 253 35 view .LVU428
 1448 05f8 4C6084E5 		str	r6, [r4, #76]	@ target_height, g_armwave_state.target_height
 1449              	@ armwave.c:245:     g_armwave_state.vscale = target_height / 256;
 245:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1450              		.loc 1 245 28 view .LVU429
 1451 05fc 20C084E5 		str	ip, [r4, #32]	@ tmp180, g_armwave_state.vscale
 246:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1452              		.loc 1 246 5 is_stmt 1 view .LVU430
 247:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1453              		.loc 1 247 5 view .LVU431
 248:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1454              		.loc 1 248 5 view .LVU432
 249:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1455              		.loc 1 249 5 view .LVU433
 250:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1456              		.loc 1 250 5 view .LVU434
 1457              	@ armwave.c:250:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 250:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1458              		.loc 1 250 37 is_stmt 0 view .LVU435
 1459 0600 302084E5 		str	r2, [r4, #48]	@ tmp187, g_armwave_state.bitdepth_height
 251:armwave.c     ****     g_armwave_state.target_width = target_width;
 1460              		.loc 1 251 5 is_stmt 1 view .LVU436
 252:armwave.c     ****     g_armwave_state.target_height = target_height;
 1461              		.loc 1 252 5 view .LVU437
 253:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1462              		.loc 1 253 5 view .LVU438
 254:armwave.c     **** 
 1463              		.loc 1 254 5 view .LVU439
 1464              		.loc 1 256 5 view .LVU440
 1465 0604 FEFFFFEB 		bl	printf		@
 1466              	.LVL113:
 257:armwave.c     **** 
 258:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 259:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 260:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 261:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1467              		.loc 1 261 5 view .LVU441
 1468              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 262:armwave.c     **** 
 263:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1469              		.loc 1 263 23 is_stmt 0 view .LVU442
 1470 0608 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 1471              	@ armwave.c:261:     g_armwave_state.slice_height = 64;  
 261:armwave.c     **** 
 1472              		.loc 1 261 34 view .LVU443
 1473 060c 4030A0E3 		mov	r3, #64	@ tmp194,
 1474              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 1475              		.loc 1 263 7 view .LVU444
 1476 0610 000050E3 		cmp	r0, #0	@ _11,
 1477              	@ armwave.c:261:     g_armwave_state.slice_height = 64;  
 261:armwave.c     **** 
 1478              		.loc 1 261 34 view .LVU445
 1479 0614 343084E5 		str	r3, [r4, #52]	@ tmp194, g_armwave_state.slice_height
 1480              		.loc 1 263 5 is_stmt 1 view .LVU446
 1481              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 1482              		.loc 1 263 7 is_stmt 0 view .LVU447
 1483 0618 0000000A 		beq	.L88		@,
 264:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1484              		.loc 1 264 9 is_stmt 1 view .LVU448
 1485 061c FEFFFFEB 		bl	free		@
 1486              	.LVL114:
 1487              	.L88:
 265:armwave.c     **** 
 266:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1488              		.loc 1 266 5 view .LVU449
 1489              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1490              		.loc 1 266 34 is_stmt 0 view .LVU450
 1491 0620 0110A0E3 		mov	r1, #1	@,
 1492 0624 400094E5 		ldr	r0, [r4, #64]	@, g_armwave_state.ch_buff_size
 1493 0628 FEFFFFEB 		bl	calloc		@
 1494              	.LVL115:
 1495              	@ armwave.c:268:     assert(g_armwave_state.ch1_buffer != NULL);
 267:armwave.c     **** 
 268:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1496              		.loc 1 268 5 view .LVU451
 1497 062c 000050E3 		cmp	r0, #0	@ tmp198,
 1498              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 266:armwave.c     **** 
 1499              		.loc 1 266 32 view .LVU452
 1500 0630 040084E5 		str	r0, [r4, #4]	@ tmp198, g_armwave_state.ch1_buffer
 1501              		.loc 1 268 5 is_stmt 1 view .LVU453
 1502 0634 3300000A 		beq	.L102		@,
 269:armwave.c     **** 
 270:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 271:armwave.c     ****     length = end_point - start_point;
 1503              		.loc 1 271 5 view .LVU454
 1504              	.LVL116:
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1505              		.loc 1 272 5 view .LVU455
 1506              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 1507              		.loc 1 272 34 is_stmt 0 view .LVU456
 1508 0638 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1509              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 1510              		.loc 1 272 22 view .LVU457
 1511 063c 905A06EE 		vmov	s13, r5	@ int	@ _10, _10
 1512              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 274:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1513              		.loc 1 274 40 view .LVU458
 1514 0640 8500A0E1 		lsl	r0, r5, #1	@, _10,
 1515              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1516              		.loc 1 272 34 view .LVU459
 1517 0644 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp205, target_width
 1518              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1519              		.loc 1 272 22 view .LVU460
 1520 0648 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp204, _10
 1521              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1522              		.loc 1 273 60 view .LVU461
 1523 064c 0D7AD4ED 		vldr.32	s15, [r4, #52]	@ int	@ tmp234, g_armwave_state.slice_height
 1524 0650 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp208, tmp234
 1525              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1526              		.loc 1 272 22 view .LVU462
 1527 0654 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp204, tmp205
 1528              	.LVL117:
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1529              		.loc 1 273 5 is_stmt 1 view .LVU463
 1530              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1531              		.loc 1 273 60 is_stmt 0 view .LVU464
 1532 0658 887A67EE 		vmul.f32	s15, s15, s16	@ tmp210, tmp208, points_per_pixel
 1533              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1534              		.loc 1 273 41 view .LVU465
 1535 065c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp211, tmp210
 1536 0660 0E7AC4ED 		vstr.32	s15, [r4, #56]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1537              		.loc 1 274 5 is_stmt 1 view .LVU466
 1538              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1539              		.loc 1 274 40 is_stmt 0 view .LVU467
 1540 0664 FEFFFFEB 		bl	malloc		@
 1541              	.LVL118:
 1542              	@ armwave.c:276:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 275:armwave.c     **** 
 276:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1543              		.loc 1 276 5 view .LVU468
 1544 0668 000050E3 		cmp	r0, #0	@ tmp213,
 1545              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 274:armwave.c     **** 
 1546              		.loc 1 274 38 view .LVU469
 1547 066c 740084E5 		str	r0, [r4, #116]	@ tmp213, g_armwave_state.xcoord_to_xpixel
 1548              		.loc 1 276 5 is_stmt 1 view .LVU470
 1549 0670 2900000A 		beq	.L103		@,
 1550              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 277:armwave.c     **** 
 278:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1551              		.loc 1 279 54 is_stmt 0 view .LVU471
 1552 0674 327ADFED 		vldr.32	s15, .L104	@ tmp219,
 1553 0678 020040E2 		sub	r0, r0, #2	@ ivtmp.86, tmp213,
 1554              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1555              		.loc 1 278 12 view .LVU472
 1556 067c 0030A0E3 		mov	r3, #0	@ xx,
 1557              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1558              		.loc 1 279 54 view .LVU473
 1559 0680 887A87EE 		vdiv.f32	s14, s15, s16	@ _22, tmp219, points_per_pixel
 1560              	.L91:
 1561              	.LVL119:
 1562              		.loc 1 279 9 is_stmt 1 discriminator 3 view .LVU474
 1563              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1564              		.loc 1 279 74 is_stmt 0 discriminator 3 view .LVU475
 1565 0684 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1566              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1567              		.loc 1 278 32 discriminator 3 view .LVU476
 1568 0688 013083E2 		add	r3, r3, #1	@ xx, xx,
 1569              	.LVL120:
 1570              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1571              		.loc 1 278 5 discriminator 3 view .LVU477
 1572 068c 030055E1 		cmp	r5, r3	@ _10, xx
 1573              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1574              		.loc 1 279 74 discriminator 3 view .LVU478
 1575 0690 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, xx
 1576 0694 877A67EE 		vmul.f32	s15, s15, s14	@ tmp221, tmp220, _22
 1577              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1578              		.loc 1 279 46 discriminator 3 view .LVU479
 1579 0698 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp222, tmp221
 1580 069c 902A17EE 		vmov	r2, s15	@ int	@ tmp222, tmp222
 1581 06a0 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp222, MEM[base: _80, offset: 0B]
 1582              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1583              		.loc 1 278 5 discriminator 3 view .LVU480
 1584 06a4 F6FFFF1A 		bne	.L91		@,
 280:armwave.c     **** 
 281:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 282:armwave.c     ****     }
 283:armwave.c     **** 
 284:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1585              		.loc 1 284 5 is_stmt 1 view .LVU481
 1586              	@ armwave.c:284:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1587              		.loc 1 284 34 is_stmt 0 view .LVU482
 1588 06a8 440094E5 		ldr	r0, [r4, #68]	@ g_armwave_state.size, g_armwave_state.size
 1589 06ac 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1590 06b0 FEFFFFEB 		bl	malloc		@
 1591              	.LVL121:
 1592              	@ armwave.c:284:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1593              		.loc 1 284 32 view .LVU483
 1594 06b4 580084E5 		str	r0, [r4, #88]	@, g_armwave_state.out_pixbuf
 1595              	@ armwave.c:285: }
 285:armwave.c     **** }
 1596              		.loc 1 285 1 view .LVU484
 1597 06b8 10D08DE2 		add	sp, sp, #16	@,,
 1598              		.cfi_remember_state
 1599              		.cfi_def_cfa_offset 40
 1600              		@ sp needed	@
 1601 06bc 028BBDEC 		vldm	sp!, {d8}	@
 1602              		.cfi_restore 80
 1603              		.cfi_restore 81
 1604              		.cfi_def_cfa_offset 32
 1605              	.LVL122:
 1606              		.loc 1 285 1 view .LVU485
 1607 06c0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1608              	.LVL123:
 1609              	.L83:
 1610              		.cfi_restore_state
 229:armwave.c     ****         g_armwave_state.row_shift = 8;
 1611              		.loc 1 229 5 is_stmt 1 view .LVU486
 1612              	@ armwave.c:229:     if(target_height == 256) {
 229:armwave.c     ****         g_armwave_state.row_shift = 8;
 1613              		.loc 1 229 7 is_stmt 0 view .LVU487
 1614 06c4 010C56E3 		cmp	r6, #256	@ target_height,
 230:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1615              		.loc 1 230 9 is_stmt 1 view .LVU488
 1616              	@ armwave.c:230:         g_armwave_state.row_shift = 8;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1617              		.loc 1 230 35 is_stmt 0 view .LVU489
 1618 06c8 7C409FE5 		ldr	r4, .L104+8	@ tmp228,
 1619              	@ armwave.c:234:         g_armwave_state.row_mask = 0x1ff;
 234:armwave.c     ****     } else if(target_height == 1024) {
 1620              		.loc 1 234 34 view .LVU490
 1621 06cc 84309F15 		ldrne	r3, .L104+20	@ tmp169,
 1622              	@ armwave.c:231:         g_armwave_state.row_mask = 0x0ff;
 231:armwave.c     ****     } else if(target_height == 512) {
 1623              		.loc 1 231 34 view .LVU491
 1624 06d0 0820A003 		moveq	r2, #8	@ tmp163,
 1625 06d4 FF30A003 		moveq	r3, #255	@ tmp165,
 232:armwave.c     ****         g_armwave_state.row_shift = 9;
 1626              		.loc 1 232 12 is_stmt 1 view .LVU492
 233:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1627              		.loc 1 233 9 view .LVU493
 1628              	@ armwave.c:233:         g_armwave_state.row_shift = 9;
 233:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1629              		.loc 1 233 35 is_stmt 0 view .LVU494
 1630 06d8 0920A013 		movne	r2, #9	@ tmp167,
 1631              	@ armwave.c:234:         g_armwave_state.row_mask = 0x1ff;
 234:armwave.c     ****     } else if(target_height == 1024) {
 1632              		.loc 1 234 34 view .LVU495
 1633 06dc F025C4E1 		strd	r2, [r4, #80]	@, tmp228,
 1634 06e0 B5FFFFEA 		b	.L86		@
 1635              	.L101:
 236:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1636              		.loc 1 236 9 is_stmt 1 view .LVU496
 1637              	@ armwave.c:237:         g_armwave_state.row_mask = 0x3ff;
 237:armwave.c     ****     } else if(target_height == 2048) {
 1638              		.loc 1 237 34 is_stmt 0 view .LVU497
 1639 06e4 70309FE5 		ldr	r3, .L104+24	@ tmp173,
 1640              	@ armwave.c:236:         g_armwave_state.row_shift = 10;
 236:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1641              		.loc 1 236 35 view .LVU498
 1642 06e8 0A20A0E3 		mov	r2, #10	@ tmp171,
 1643              	@ armwave.c:237:         g_armwave_state.row_mask = 0x3ff;
 237:armwave.c     ****     } else if(target_height == 2048) {
 1644              		.loc 1 237 34 view .LVU499
 1645 06ec F025C4E1 		strd	r2, [r4, #80]	@, tmp228,
 1646 06f0 B1FFFFEA 		b	.L86		@
 1647              	.L100:
 227:armwave.c     **** 
 1648              		.loc 1 227 5 is_stmt 1 discriminator 2 view .LVU500
 1649 06f4 64309FE5 		ldr	r3, .L104+28	@,
 1650 06f8 E320A0E3 		mov	r2, #227	@,
 1651 06fc 60109FE5 		ldr	r1, .L104+32	@,
 1652 0700 60009FE5 		ldr	r0, .L104+36	@,
 1653 0704 FEFFFFEB 		bl	__assert_fail		@
 1654              	.LVL124:
 1655              	.L102:
 268:armwave.c     **** 
 1656              		.loc 1 268 5 discriminator 1 view .LVU501
 1657 0708 50309FE5 		ldr	r3, .L104+28	@,
 1658 070c 432FA0E3 		mov	r2, #268	@,
 1659 0710 4C109FE5 		ldr	r1, .L104+32	@,
 1660 0714 50009FE5 		ldr	r0, .L104+40	@,
 1661 0718 FEFFFFEB 		bl	__assert_fail		@
 1662              	.LVL125:
 1663              	.L103:
 276:armwave.c     **** 
 1664              		.loc 1 276 5 discriminator 1 view .LVU502
 1665 071c 3C309FE5 		ldr	r3, .L104+28	@,
 1666 0720 452FA0E3 		mov	r2, #276	@,
 1667 0724 38109FE5 		ldr	r1, .L104+32	@,
 1668 0728 40009FE5 		ldr	r0, .L104+44	@,
 1669 072c FEFFFFEB 		bl	__assert_fail		@
 1670              	.LVL126:
 1671              	.L99:
 224:armwave.c     **** 
 1672              		.loc 1 224 5 discriminator 1 view .LVU503
 1673 0730 28309FE5 		ldr	r3, .L104+28	@,
 1674 0734 E020A0E3 		mov	r2, #224	@,
 1675 0738 24109FE5 		ldr	r1, .L104+32	@,
 1676 073c 30009FE5 		ldr	r0, .L104+48	@,
 1677 0740 FEFFFFEB 		bl	__assert_fail		@
 1678              	.LVL127:
 1679              	.L105:
 1680              		.align	2
 1681              	.L104:
 1682 0744 0000803F 		.word	1065353216
 1683 0748 40000000 		.word	.LC4
 1684 074c 00000000 		.word	g_armwave_state
 1685 0750 FF070000 		.word	2047
 1686 0754 E4000000 		.word	.LC7
 1687 0758 FF010000 		.word	511
 1688 075c FF030000 		.word	1023
 1689 0760 34000000 		.word	.LANCHOR0+52
 1690 0764 20000000 		.word	.LC2
 1691 0768 84000000 		.word	.LC6
 1692 076c F8000000 		.word	.LC8
 1693 0770 1C010000 		.word	.LC9
 1694 0774 6C000000 		.word	.LC5
 1695              		.cfi_endproc
 1696              	.LFE62:
 1698              		.align	2
 1699              		.global	armwave_set_wave_pointer
 1700              		.syntax unified
 1701              		.arm
 1702              		.fpu vfp
 1704              	armwave_set_wave_pointer:
 1705              	.LVL128:
 1706              	.LFB63:
 286:armwave.c     **** 
 287:armwave.c     **** /*
 288:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 289:armwave.c     ****  * in the future.
 290:armwave.c     ****  */
 291:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 292:armwave.c     **** {
 1707              		.loc 1 292 1 view -0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 0
 1710              		@ frame_needed = 0, uses_anonymous_args = 0
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1711              		.loc 1 293 5 view .LVU505
 1712 0778 000050E3 		cmp	r0, #0	@ wave_buffer
 1713              		.loc 1 293 5 is_stmt 0 view .LVU506
 1714 077c 0200000A 		beq	.L111		@,
 294:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1715              		.loc 1 294 5 is_stmt 1 view .LVU507
 1716              	@ armwave.c:294:     g_armwave_state.wave_buffer = wave_buffer;
 1717              		.loc 1 294 33 is_stmt 0 view .LVU508
 1718 0780 1C309FE5 		ldr	r3, .L112	@ tmp116,
 1719 0784 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1720 0788 1EFF2FE1 		bx	lr	@
 1721              	.L111:
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1722              		.loc 1 293 5 is_stmt 1 discriminator 1 view .LVU509
 1723              	@ armwave.c:292: {
 292:armwave.c     ****     assert(wave_buffer != NULL);
 1724              		.loc 1 292 1 is_stmt 0 discriminator 1 view .LVU510
 1725 078c 10402DE9 		push	{r4, lr}	@
 1726              		.cfi_def_cfa_offset 8
 1727              		.cfi_offset 4, -8
 1728              		.cfi_offset 14, -4
 1729              	@ armwave.c:293:     assert(wave_buffer != NULL);
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1730              		.loc 1 293 5 discriminator 1 view .LVU511
 1731 0790 10309FE5 		ldr	r3, .L112+4	@,
 1732 0794 10209FE5 		ldr	r2, .L112+8	@,
 1733 0798 10109FE5 		ldr	r1, .L112+12	@,
 1734 079c 10009FE5 		ldr	r0, .L112+16	@,
 1735              	.LVL129:
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1736              		.loc 1 293 5 discriminator 1 view .LVU512
 1737 07a0 FEFFFFEB 		bl	__assert_fail		@
 1738              	.LVL130:
 1739              	.L113:
 1740              		.align	2
 1741              	.L112:
 1742 07a4 00000000 		.word	g_armwave_state
 1743 07a8 4C000000 		.word	.LANCHOR0+76
 1744 07ac 25010000 		.word	293
 1745 07b0 20000000 		.word	.LC2
 1746 07b4 48010000 		.word	.LC10
 1747              		.cfi_endproc
 1748              	.LFE63:
 1750              		.align	2
 1751              		.global	armwave_set_wave_pointer_as_testbuf
 1752              		.syntax unified
 1753              		.arm
 1754              		.fpu vfp
 1756              	armwave_set_wave_pointer_as_testbuf:
 1757              	.LFB64:
 295:armwave.c     **** }
 296:armwave.c     **** 
 297:armwave.c     **** /*
 298:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 299:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 300:armwave.c     ****  */
 301:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 302:armwave.c     **** {
 1758              		.loc 1 302 1 is_stmt 1 view -0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
 1762              		@ link register save eliminated.
 303:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1763              		.loc 1 303 5 view .LVU514
 1764              	@ armwave.c:303:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1765              		.loc 1 303 33 is_stmt 0 view .LVU515
 1766 07b8 08309FE5 		ldr	r3, .L115	@ tmp111,
 1767 07bc 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1768 07c0 142083E5 		str	r2, [r3, #20]	@ g_armwave_state.test_wave_buffer, g_armwave_state.wave_buffer
 1769              	@ armwave.c:304: }
 304:armwave.c     **** }
 1770              		.loc 1 304 1 view .LVU516
 1771 07c4 1EFF2FE1 		bx	lr	@
 1772              	.L116:
 1773              		.align	2
 1774              	.L115:
 1775 07c8 00000000 		.word	g_armwave_state
 1776              		.cfi_endproc
 1777              	.LFE64:
 1779              		.align	2
 1780              		.global	armwave_set_wave_pointer_u32
 1781              		.syntax unified
 1782              		.arm
 1783              		.fpu vfp
 1785              	armwave_set_wave_pointer_u32:
 1786              	.LVL131:
 1787              	.LFB65:
 305:armwave.c     **** 
 306:armwave.c     **** /*
 307:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 308:armwave.c     ****  * disjointed buffers in the future.
 309:armwave.c     ****  */
 310:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 311:armwave.c     **** {
 1788              		.loc 1 311 1 is_stmt 1 view -0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 0
 1791              		@ frame_needed = 0, uses_anonymous_args = 0
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1792              		.loc 1 312 5 view .LVU518
 1793 07cc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1794              		.loc 1 312 5 is_stmt 0 view .LVU519
 1795 07d0 0200000A 		beq	.L122		@,
 313:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1796              		.loc 1 313 5 is_stmt 1 view .LVU520
 1797              	@ armwave.c:313:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1798              		.loc 1 313 33 is_stmt 0 view .LVU521
 1799 07d4 1C309FE5 		ldr	r3, .L123	@ tmp116,
 1800 07d8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1801 07dc 1EFF2FE1 		bx	lr	@
 1802              	.L122:
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1803              		.loc 1 312 5 is_stmt 1 discriminator 1 view .LVU522
 1804              	@ armwave.c:311: {
 311:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1805              		.loc 1 311 1 is_stmt 0 discriminator 1 view .LVU523
 1806 07e0 10402DE9 		push	{r4, lr}	@
 1807              		.cfi_def_cfa_offset 8
 1808              		.cfi_offset 4, -8
 1809              		.cfi_offset 14, -4
 1810              	@ armwave.c:312:     assert(wave_buffer_ptr != 0);
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1811              		.loc 1 312 5 discriminator 1 view .LVU524
 1812 07e4 4E2FA0E3 		mov	r2, #312	@,
 1813 07e8 0C309FE5 		ldr	r3, .L123+4	@,
 1814 07ec 0C109FE5 		ldr	r1, .L123+8	@,
 1815 07f0 0C009FE5 		ldr	r0, .L123+12	@,
 1816              	.LVL132:
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1817              		.loc 1 312 5 discriminator 1 view .LVU525
 1818 07f4 FEFFFFEB 		bl	__assert_fail		@
 1819              	.LVL133:
 1820              	.L124:
 1821              		.align	2
 1822              	.L123:
 1823 07f8 00000000 		.word	g_armwave_state
 1824 07fc 68000000 		.word	.LANCHOR0+104
 1825 0800 20000000 		.word	.LC2
 1826 0804 5C010000 		.word	.LC11
 1827              		.cfi_endproc
 1828              	.LFE65:
 1830              		.align	2
 1831              		.global	armwave_clear_buffer
 1832              		.syntax unified
 1833              		.arm
 1834              		.fpu vfp
 1836              	armwave_clear_buffer:
 1837              	.LVL134:
 1838              	.LFB66:
 314:armwave.c     **** }
 315:armwave.c     **** 
 316:armwave.c     **** /*
 317:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 318:armwave.c     ****  */
 319:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 320:armwave.c     **** {
 1839              		.loc 1 320 1 is_stmt 1 view -0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
 321:armwave.c     ****     // Flags ignored, only one buffer cleared
 322:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1844              		.loc 1 322 5 view .LVU527
 1845 0808 0C309FE5 		ldr	r3, .L126	@ tmp113,
 1846 080c 0010A0E3 		mov	r1, #0	@,
 1847 0810 402093E5 		ldr	r2, [r3, #64]	@, g_armwave_state.ch_buff_size
 1848 0814 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1849              	.LVL135:
 1850              		.loc 1 322 5 is_stmt 0 view .LVU528
 1851 0818 FEFFFFEA 		b	memset		@
 1852              	.LVL136:
 1853              	.L127:
 1854              		.align	2
 1855              	.L126:
 1856 081c 00000000 		.word	g_armwave_state
 1857              		.cfi_endproc
 1858              	.LFE66:
 1860              		.align	2
 1861              		.global	armwave_set_channel_colour
 1862              		.syntax unified
 1863              		.arm
 1864              		.fpu vfp
 1866              	armwave_set_channel_colour:
 1867              	.LVL137:
 1868              	.LFB67:
 323:armwave.c     **** }
 324:armwave.c     **** 
 325:armwave.c     **** /*
 326:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 327:armwave.c     ****  */
 328:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 329:armwave.c     **** {
 1869              		.loc 1 329 1 is_stmt 1 view -0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 0
 1872              		@ frame_needed = 0, uses_anonymous_args = 0
 1873              		@ link register save eliminated.
 330:armwave.c     ****     // Only 1ch supported for now
 331:armwave.c     ****     switch(ch) {
 1874              		.loc 1 331 5 view .LVU530
 1875 0820 010050E3 		cmp	r0, #1	@ ch,
 332:armwave.c     ****         case 1:
 333:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1876              		.loc 1 333 13 view .LVU531
 1877              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 1878              		.loc 1 333 41 is_stmt 0 view .LVU532
 1879 0824 0C009F05 		ldreq	r0, .L130	@ tmp117,
 1880              	.LVL138:
 1881              		.loc 1 333 41 view .LVU533
 1882 0828 BC15C001 		strheq	r1, [r0, #92]	@ movhi	@ r, g_armwave_state.ch1_color.r
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1883              		.loc 1 334 13 is_stmt 1 view .LVU534
 1884              	@ armwave.c:334:             g_armwave_state.ch1_color.g = g;
 1885              		.loc 1 334 41 is_stmt 0 view .LVU535
 1886 082c BE25C001 		strheq	r2, [r0, #94]	@ movhi	@ g, g_armwave_state.ch1_color.g
 335:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1887              		.loc 1 335 13 is_stmt 1 view .LVU536
 1888              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 1889              		.loc 1 335 41 is_stmt 0 view .LVU537
 1890 0830 B036C001 		strheq	r3, [r0, #96]	@ movhi	@ b, g_armwave_state.ch1_color.b
 336:armwave.c     ****             break;
 1891              		.loc 1 336 13 is_stmt 1 view .LVU538
 1892              	@ armwave.c:338: }
 337:armwave.c     ****     }
 338:armwave.c     **** }
 1893              		.loc 1 338 1 is_stmt 0 view .LVU539
 1894 0834 1EFF2FE1 		bx	lr	@
 1895              	.L131:
 1896              		.align	2
 1897              	.L130:
 1898 0838 00000000 		.word	g_armwave_state
 1899              		.cfi_endproc
 1900              	.LFE67:
 1902              		.align	2
 1903              		.global	armwave_dump_ppm_debug
 1904              		.syntax unified
 1905              		.arm
 1906              		.fpu vfp
 1908              	armwave_dump_ppm_debug:
 1909              	.LVL139:
 1910              	.LFB68:
 339:armwave.c     **** 
 340:armwave.c     **** /*
 341:armwave.c     ****  * Dump a ppm of a buffer to a file.
 342:armwave.c     ****  */
 343:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 344:armwave.c     **** {
 1911              		.loc 1 344 1 is_stmt 1 view -0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 345:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1915              		.loc 1 345 5 view .LVU541
 1916              	@ armwave.c:344: {
 344:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1917              		.loc 1 344 1 is_stmt 0 view .LVU542
 1918 083c 0130A0E1 		mov	r3, r1	@ fn, fn
 1919 0840 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1920              		.cfi_def_cfa_offset 28
 1921              		.cfi_offset 4, -28
 1922              		.cfi_offset 5, -24
 1923              		.cfi_offset 6, -20
 1924              		.cfi_offset 7, -16
 1925              		.cfi_offset 8, -12
 1926              		.cfi_offset 9, -8
 1927              		.cfi_offset 14, -4
 1928 0844 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1929 0848 0CD04DE2 		sub	sp, sp, #12	@,,
 1930              		.cfi_def_cfa_offset 40
 1931              	@ armwave.c:345:     FILE *fp = fopen(fn, "wb");
 1932              		.loc 1 345 16 view .LVU543
 1933 084c D4109FE5 		ldr	r1, .L144	@,
 1934              	.LVL140:
 1935              		.loc 1 345 16 view .LVU544
 1936 0850 0300A0E1 		mov	r0, r3	@, fn
 1937              	.LVL141:
 1938              		.loc 1 345 16 view .LVU545
 1939 0854 FEFFFFEB 		bl	fopen64		@
 1940              	.LVL142:
 1941              	@ armwave.c:352:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 346:armwave.c     ****     uint32_t data;
 347:armwave.c     ****     int xx, yy;
 348:armwave.c     **** 
 349:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 350:armwave.c     **** 
 351:armwave.c     ****     fputs("P3\n", fp);
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1942              		.loc 1 352 5 view .LVU546
 1943 0858 CC609FE5 		ldr	r6, .L144+4	@ tmp154,
 1944              	@ armwave.c:351:     fputs("P3\n", fp);
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1945              		.loc 1 351 5 view .LVU547
 1946 085c 0320A0E3 		mov	r2, #3	@,
 1947 0860 0110A0E3 		mov	r1, #1	@,
 1948              	@ armwave.c:345:     FILE *fp = fopen(fn, "wb");
 345:armwave.c     ****     uint32_t data;
 1949              		.loc 1 345 16 view .LVU548
 1950 0864 0070A0E1 		mov	r7, r0	@ fp,
 1951              	.LVL143:
 346:armwave.c     ****     uint32_t data;
 1952              		.loc 1 346 5 is_stmt 1 view .LVU549
 347:armwave.c     **** 
 1953              		.loc 1 347 5 view .LVU550
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1954              		.loc 1 351 5 view .LVU551
 1955 0868 0030A0E1 		mov	r3, r0	@, fp
 1956 086c BC009FE5 		ldr	r0, .L144+8	@,
 1957              	.LVL144:
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1958              		.loc 1 351 5 is_stmt 0 view .LVU552
 1959 0870 FEFFFFEB 		bl	fwrite		@
 1960              	.LVL145:
 1961              		.loc 1 352 5 is_stmt 1 view .LVU553
 1962 0874 D824C6E1 		ldrd	r2, [r6, #72]	@, tmp154,
 1963 0878 B4109FE5 		ldr	r1, .L144+12	@,
 1964 087c 0700A0E1 		mov	r0, r7	@, fp
 1965 0880 FEFFFFEB 		bl	fprintf		@
 1966              	.LVL146:
 353:armwave.c     ****     fputs("255\n", fp);
 1967              		.loc 1 353 5 view .LVU554
 1968 0884 0420A0E3 		mov	r2, #4	@,
 1969 0888 0730A0E1 		mov	r3, r7	@, fp
 1970 088c 0110A0E3 		mov	r1, #1	@,
 1971 0890 A0009FE5 		ldr	r0, .L144+16	@,
 1972 0894 FEFFFFEB 		bl	fwrite		@
 1973              	.LVL147:
 354:armwave.c     **** 
 355:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1974              		.loc 1 355 5 view .LVU555
 1975              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1976              		.loc 1 355 37 is_stmt 0 view .LVU556
 1977 0898 4C2096E5 		ldr	r2, [r6, #76]	@ prephitmp_57, g_armwave_state.target_height
 1978              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1979              		.loc 1 355 5 view .LVU557
 1980 089c 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1981 08a0 1800000A 		beq	.L133		@,
 1982 08a4 483096E5 		ldr	r3, [r6, #72]	@ _12, g_armwave_state.target_width
 1983              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 359:armwave.c     **** 
 360:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1984              		.loc 1 360 13 view .LVU558
 1985 08a8 8C909FE5 		ldr	r9, .L144+20	@ tmp156,
 1986              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1987              		.loc 1 355 12 view .LVU559
 1988 08ac 0050A0E3 		mov	r5, #0	@ yy,
 1989              	.LVL148:
 1990              	.L134:
 1991              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1992              		.loc 1 356 9 view .LVU560
 1993 08b0 000053E3 		cmp	r3, #0	@ _12,
 1994              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1995              		.loc 1 356 16 view .LVU561
 1996 08b4 0040A013 		movne	r4, #0	@ xx,
 1997              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1998              		.loc 1 356 9 view .LVU562
 1999 08b8 1600000A 		beq	.L143		@,
 2000              	.LVL149:
 2001              	.L135:
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2002              		.loc 1 357 13 is_stmt 1 discriminator 3 view .LVU563
 2003              	@ armwave.c:357:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2004              		.loc 1 357 29 is_stmt 0 discriminator 3 view .LVU564
 2005 08bc 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2006              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2007              		.loc 1 360 13 discriminator 3 view .LVU565
 2008 08c0 0910A0E1 		mov	r1, r9	@, tmp156
 2009 08c4 0700A0E1 		mov	r0, r7	@, fp
 2010              	@ armwave.c:357:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2011              		.loc 1 357 18 discriminator 3 view .LVU566
 2012 08c8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2013              	.LVL150:
 2014              		.loc 1 360 13 is_stmt 1 discriminator 3 view .LVU567
 2015              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2016              		.loc 1 356 58 is_stmt 0 discriminator 3 view .LVU568
 2017 08cc 014084E2 		add	r4, r4, #1	@ xx, xx,
 2018              	.LVL151:
 2019              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2020              		.loc 1 360 81 discriminator 3 view .LVU569
 2021 08d0 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2022              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2023              		.loc 1 360 61 discriminator 3 view .LVU570
 2024 08d4 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2025              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2026              		.loc 1 360 13 discriminator 3 view .LVU571
 2027 08d8 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2028 08dc 7330EFE6 		uxtb	r3, r3	@, tmp146
 2029 08e0 00C08DE5 		str	ip, [sp]	@ tmp151,
 2030 08e4 7220EFE6 		uxtb	r2, r2	@, data
 2031              	.LVL152:
 2032              		.loc 1 360 13 discriminator 3 view .LVU572
 2033 08e8 FEFFFFEB 		bl	fprintf		@
 2034              	.LVL153:
 2035              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2036              		.loc 1 356 41 discriminator 3 view .LVU573
 2037 08ec 483096E5 		ldr	r3, [r6, #72]	@ _12, g_armwave_state.target_width
 2038              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2039              		.loc 1 356 9 discriminator 3 view .LVU574
 2040 08f0 040053E1 		cmp	r3, r4	@ _12, xx
 2041 08f4 F0FFFF8A 		bhi	.L135		@,
 2042 08f8 4C2096E5 		ldr	r2, [r6, #76]	@ prephitmp_57, g_armwave_state.target_height
 2043              	.LVL154:
 2044              	.L136:
 2045              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2046              		.loc 1 355 55 discriminator 2 view .LVU575
 2047 08fc 015085E2 		add	r5, r5, #1	@ yy, yy,
 2048              	.LVL155:
 2049              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2050              		.loc 1 355 5 discriminator 2 view .LVU576
 2051 0900 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2052 0904 E9FFFF3A 		bcc	.L134		@,
 2053              	.LVL156:
 2054              	.L133:
 361:armwave.c     ****         }
 362:armwave.c     ****     }
 363:armwave.c     **** 
 364:armwave.c     ****     fclose(fp);
 2055              		.loc 1 364 5 is_stmt 1 view .LVU577
 2056 0908 0700A0E1 		mov	r0, r7	@, fp
 2057              	@ armwave.c:365: }
 365:armwave.c     **** }
 2058              		.loc 1 365 1 is_stmt 0 view .LVU578
 2059 090c 0CD08DE2 		add	sp, sp, #12	@,,
 2060              		.cfi_remember_state
 2061              		.cfi_def_cfa_offset 28
 2062              		@ sp needed	@
 2063 0910 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2064              		.cfi_restore 14
 2065              		.cfi_restore 9
 2066              		.cfi_restore 8
 2067              		.cfi_restore 7
 2068              		.cfi_restore 6
 2069              		.cfi_restore 5
 2070              		.cfi_restore 4
 2071              		.cfi_def_cfa_offset 0
 2072              	.LVL157:
 2073              	@ armwave.c:364:     fclose(fp);
 364:armwave.c     **** }
 2074              		.loc 1 364 5 view .LVU579
 2075 0914 FEFFFFEA 		b	fclose		@
 2076              	.LVL158:
 2077              	.L143:
 2078              		.cfi_restore_state
 2079              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2080              		.loc 1 355 55 view .LVU580
 2081 0918 015085E2 		add	r5, r5, #1	@ yy, yy,
 2082              	.LVL159:
 2083              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2084              		.loc 1 355 5 view .LVU581
 2085 091c 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2086 0920 F5FFFF8A 		bhi	.L136		@,
 2087 0924 F7FFFFEA 		b	.L133		@
 2088              	.L145:
 2089              		.align	2
 2090              	.L144:
 2091 0928 74010000 		.word	.LC12
 2092 092c 00000000 		.word	g_armwave_state
 2093 0930 78010000 		.word	.LC13
 2094 0934 7C010000 		.word	.LC14
 2095 0938 84010000 		.word	.LC15
 2096 093c 8C010000 		.word	.LC16
 2097              		.cfi_endproc
 2098              	.LFE68:
 2100              		.align	2
 2101              		.global	armwave_test_init
 2102              		.syntax unified
 2103              		.arm
 2104              		.fpu vfp
 2106              	armwave_test_init:
 2107              	.LVL160:
 2108              	.LFB69:
 366:armwave.c     **** 
 367:armwave.c     **** /*
 368:armwave.c     ****  * Initialise some test functionry.
 369:armwave.c     ****  */
 370:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 371:armwave.c     **** {
 2109              		.loc 1 371 1 is_stmt 1 view -0
 2110              		.cfi_startproc
 2111              		@ args = 0, pretend = 0, frame = 0
 2112              		@ frame_needed = 0, uses_anonymous_args = 0
 372:armwave.c     ****     test_create_gamma();
 2113              		.loc 1 372 5 view .LVU583
 2114              	.LBB12:
 2115              	.LBI12:
  44:armwave.c     **** {
 2116              		.loc 1 44 6 view .LVU584
  44:armwave.c     **** {
 2117              		.loc 1 44 6 is_stmt 0 view .LVU585
 2118              	.LBE12:
 2119              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2120              		.loc 1 371 1 view .LVU586
 2121 0940 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2122              		.cfi_def_cfa_offset 32
 2123              		.cfi_offset 4, -32
 2124              		.cfi_offset 5, -28
 2125              		.cfi_offset 6, -24
 2126              		.cfi_offset 7, -20
 2127              		.cfi_offset 8, -16
 2128              		.cfi_offset 9, -12
 2129              		.cfi_offset 10, -8
 2130              		.cfi_offset 14, -4
 2131 0944 068B2DED 		vpush.64	{d8, d9, d10}	@
 2132              		.cfi_def_cfa_offset 56
 2133              		.cfi_offset 80, -56
 2134              		.cfi_offset 81, -52
 2135              		.cfi_offset 82, -48
 2136              		.cfi_offset 83, -44
 2137              		.cfi_offset 84, -40
 2138              		.cfi_offset 85, -36
 2139 0948 BC409FE5 		ldr	r4, .L150+20	@ ivtmp.100,
 2140              	.LBB15:
 2141              	.LBB13:
 2142              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2143              		.loc 1 50 32 view .LVU587
 2144 094c 2DAA9FED 		vldr.32	s20, .L150+16	@ tmp136,
 2145              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2146              		.loc 1 50 26 view .LVU588
 2147 0950 289B9FED 		vldr.64	d9, .L150	@ tmp151,
 2148              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2149              		.loc 1 50 49 view .LVU589
 2150 0954 298B9FED 		vldr.64	d8, .L150+8	@ tmp139,
 2151 0958 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.100,
 2152              	.LBE13:
 2153              	.LBE15:
 2154              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2155              		.loc 1 371 1 view .LVU590
 2156 095c 10D04DE2 		sub	sp, sp, #16	@,,
 2157              		.cfi_def_cfa_offset 72
 2158              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2159              		.loc 1 371 1 view .LVU591
 2160 0960 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2161 0964 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2162 0968 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2163 096c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2164 0970 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.100,
 2165 0974 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2166              	.LVL161:
 2167              	.L147:
 2168              	.LBB16:
 2169              	.LBB14:
  50:armwave.c     ****     }
 2170              		.loc 1 50 9 is_stmt 1 view .LVU592
 2171              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2172              		.loc 1 50 32 is_stmt 0 view .LVU593
 2173 0978 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.100
 2174              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2175              		.loc 1 50 26 view .LVU594
 2176 097c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2177              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2178              		.loc 1 50 32 view .LVU595
 2179 0980 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2180 0984 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2181 0988 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2182              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2183              		.loc 1 50 26 view .LVU596
 2184 098c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2185 0990 FEFFFFEB 		bl	pow		@
 2186              	.LVL162:
 2187              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2188              		.loc 1 50 49 view .LVU597
 2189 0994 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2190              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2191              		.loc 1 50 24 view .LVU598
 2192 0998 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2193 099c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2194 09a0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2195              	.LVL163:
 2196              	@ armwave.c:49:     for(i = 0; i < 256; i++) {
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2197              		.loc 1 49 5 view .LVU599
 2198 09a4 0A0054E1 		cmp	r4, r10	@ ivtmp.100, _39
 2199 09a8 F2FFFF1A 		bne	.L147		@,
 2200              	.LVL164:
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2201              		.loc 1 49 5 view .LVU600
 2202              	.LBE14:
 2203              	.LBE16:
 373:armwave.c     **** 
 374:armwave.c     ****     // make ch1 yellowish by default
 375:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2204              		.loc 1 375 5 is_stmt 1 view .LVU601
 2205              	.LBB17:
 2206              	.LBI17:
 328:armwave.c     **** {
 2207              		.loc 1 328 6 view .LVU602
 2208              	.LBB18:
 331:armwave.c     ****         case 1:
 2209              		.loc 1 331 5 view .LVU603
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2210              		.loc 1 333 13 view .LVU604
 334:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2211              		.loc 1 334 13 view .LVU605
 2212              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2213              		.loc 1 333 41 is_stmt 0 view .LVU606
 2214 09ac 5CC09FE5 		ldr	ip, .L150+24	@ tmp142,
 2215 09b0 5C409FE5 		ldr	r4, .L150+28	@ tmp143,
 2216              	.LBE18:
 2217              	.LBE17:
 2218              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 376:armwave.c     **** 
 377:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2219              		.loc 1 377 5 view .LVU607
 2220 09b4 0000A0E3 		mov	r0, #0	@ tmp147,
 2221              	.LBB22:
 2222              	.LBB19:
 2223              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 335:armwave.c     ****             break;
 2224              		.loc 1 335 41 view .LVU608
 2225 09b8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2226              	.LBE19:
 2227              	.LBE22:
 2228              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2229              		.loc 1 377 5 view .LVU609
 2230 09bc 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2231 09c0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2232 09c4 00808DE5 		str	r8, [sp]	@ render_width,
 2233 09c8 0610A0E1 		mov	r1, r6	@, tmp3
 2234 09cc 0720A0E1 		mov	r2, r7	@, nwaves
 2235              	.LBB23:
 2236              	.LBB20:
 2237              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2238              		.loc 1 333 41 view .LVU610
 2239 09d0 5C408CE5 		str	r4, [ip, #92]	@ tmp143, MEM[(short int *)&g_armwave_state + 92B]
 335:armwave.c     ****             break;
 2240              		.loc 1 335 13 is_stmt 1 view .LVU611
 2241              	.LBE20:
 2242              	.LBE23:
 2243              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2244              		.loc 1 377 5 is_stmt 0 view .LVU612
 2245 09d4 0630A0E1 		mov	r3, r6	@, wave_size
 2246              	.LBB24:
 2247              	.LBB21:
 2248              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 335:armwave.c     ****             break;
 2249              		.loc 1 335 41 view .LVU613
 2250 09d8 B0E6CCE1 		strh	lr, [ip, #96]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 336:armwave.c     ****     }
 2251              		.loc 1 336 13 is_stmt 1 view .LVU614
 2252              	.LVL165:
 336:armwave.c     ****     }
 2253              		.loc 1 336 13 is_stmt 0 view .LVU615
 2254              	.LBE21:
 2255              	.LBE24:
 2256              		.loc 1 377 5 is_stmt 1 view .LVU616
 2257 09dc FEFFFFEB 		bl	armwave_setup_render		@
 2258              	.LVL166:
 378:armwave.c     **** 
 379:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2259              		.loc 1 379 5 view .LVU617
 2260 09e0 30109FE5 		ldr	r1, .L150+32	@,
 2261 09e4 30009FE5 		ldr	r0, .L150+36	@,
 2262              	@ armwave.c:380: }
 380:armwave.c     **** }
 2263              		.loc 1 380 1 is_stmt 0 view .LVU618
 2264 09e8 10D08DE2 		add	sp, sp, #16	@,,
 2265              		.cfi_def_cfa_offset 56
 2266              		@ sp needed	@
 2267 09ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2268              		.cfi_restore 84
 2269              		.cfi_restore 85
 2270              		.cfi_restore 82
 2271              		.cfi_restore 83
 2272              		.cfi_restore 80
 2273              		.cfi_restore 81
 2274              		.cfi_def_cfa_offset 32
 2275 09f0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2276              		.cfi_restore 14
 2277              		.cfi_restore 10
 2278              		.cfi_restore 9
 2279              		.cfi_restore 8
 2280              		.cfi_restore 7
 2281              		.cfi_restore 6
 2282              		.cfi_restore 5
 2283              		.cfi_restore 4
 2284              		.cfi_def_cfa_offset 0
 2285              	.LVL167:
 2286              	@ armwave.c:379:     printf("armwave version: %s\n", ARMWAVE_VER);
 379:armwave.c     **** }
 2287              		.loc 1 379 5 view .LVU619
 2288 09f4 FEFFFFEA 		b	printf		@
 2289              	.LVL168:
 2290              	.L151:
 2291              		.align	3
 2292              	.L150:
 2293 09f8 000000C0 		.word	-1073741824
 2294 09fc CCCCEC3F 		.word	1072483532
 2295 0a00 00000000 		.word	0
 2296 0a04 00E06F40 		.word	1081073664
 2297 0a08 00007F43 		.word	1132396544
 2298 0a0c FFFFFFFF 		.word	gamma_table-1
 2299 0a10 00000000 		.word	g_armwave_state
 2300 0a14 F609F406 		.word	116656630
 2301 0a18 00000000 		.word	.LC0
 2302 0a1c 08000000 		.word	.LC1
 2303              		.cfi_endproc
 2304              	.LFE69:
 2306              		.global	__aeabi_uidiv
 2307              		.align	2
 2308              		.global	armwave_test_generate
 2309              		.syntax unified
 2310              		.arm
 2311              		.fpu vfp
 2313              	armwave_test_generate:
 2314              	.LFB70:
 381:armwave.c     **** 
 382:armwave.c     **** /*
 383:armwave.c     ****  * Fill buffers with test funtionry.
 384:armwave.c     ****  */
 385:armwave.c     **** void armwave_test_generate()
 386:armwave.c     **** {
 2315              		.loc 1 386 1 is_stmt 1 view -0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 8
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 387:armwave.c     ****     uint32_t yy;
 2319              		.loc 1 387 5 view .LVU621
 388:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2320              		.loc 1 388 5 view .LVU622
 2321              	@ armwave.c:386: {
 386:armwave.c     ****     uint32_t yy;
 2322              		.loc 1 386 1 is_stmt 0 view .LVU623
 2323 0a20 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2324              		.cfi_def_cfa_offset 36
 2325              		.cfi_offset 4, -36
 2326              		.cfi_offset 5, -32
 2327              		.cfi_offset 6, -28
 2328              		.cfi_offset 7, -24
 2329              		.cfi_offset 8, -20
 2330              		.cfi_offset 9, -16
 2331              		.cfi_offset 10, -12
 2332              		.cfi_offset 11, -8
 2333              		.cfi_offset 14, -4
 2334 0a24 0CD04DE2 		sub	sp, sp, #12	@,,
 2335              		.cfi_def_cfa_offset 48
 2336              	@ armwave.c:388:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2337              		.loc 1 388 14 view .LVU624
 2338 0a28 44429FE5 		ldr	r4, .L181	@ tmp400,
 2339              	@ armwave.c:390:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 389:armwave.c     **** 
 390:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2340              		.loc 1 390 5 view .LVU625
 2341 0a2c 0010A0E3 		mov	r1, #0	@,
 2342              	@ armwave.c:388:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 388:armwave.c     **** 
 2343              		.loc 1 388 14 view .LVU626
 2344 0a30 483094E5 		ldr	r3, [r4, #72]	@ xx_rem, g_armwave_state.target_width
 2345              	@ armwave.c:390:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2346              		.loc 1 390 5 view .LVU627
 2347 0a34 402094E5 		ldr	r2, [r4, #64]	@, g_armwave_state.ch_buff_size
 2348 0a38 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2349              	@ armwave.c:388:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 388:armwave.c     **** 
 2350              		.loc 1 388 14 view .LVU628
 2351 0a3c 04308DE5 		str	r3, [sp, #4]	@ xx_rem, %sfp
 2352              	.LVL169:
 2353              		.loc 1 390 5 is_stmt 1 view .LVU629
 2354 0a40 FEFFFFEB 		bl	memset		@
 2355              	.LVL170:
 391:armwave.c     **** 
 392:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 2356              		.loc 1 392 5 view .LVU630
 2357              	@ armwave.c:392:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2358              		.loc 1 392 69 is_stmt 0 view .LVU631
 2359 0a44 346094E5 		ldr	r6, [r4, #52]	@ _124, g_armwave_state.slice_height
 2360              	@ armwave.c:392:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2361              		.loc 1 392 5 view .LVU632
 2362 0a48 483094E5 		ldr	r3, [r4, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2363 0a4c 060053E1 		cmp	r3, r6	@ g_armwave_state.target_width, _124
 2364 0a50 8300003A 		bcc	.L153		@,
 2365              	@ armwave.c:388:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 388:armwave.c     **** 
 2366              		.loc 1 388 53 view .LVU633
 2367 0a54 0030A0E3 		mov	r3, #0	@ ypos,
 2368              	@ armwave.c:392:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2369              		.loc 1 392 12 view .LVU634
 2370 0a58 0350A0E1 		mov	r5, r3	@ yy, ypos
 2371              	@ armwave.c:388:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 388:armwave.c     **** 
 2372              		.loc 1 388 53 view .LVU635
 2373 0a5c 00308DE5 		str	r3, [sp]	@ ypos, %sfp
 2374              	.LVL171:
 2375              	.L158:
 393:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2376              		.loc 1 393 9 is_stmt 1 discriminator 3 view .LVU636
 2377 0a60 960502E0 		mul	r2, r6, r5	@, _124, yy
 2378 0a64 383094E5 		ldr	r3, [r4, #56]	@, g_armwave_state.slice_record_height
 2379 0a68 0510A0E1 		mov	r1, r5	@, yy
 2380 0a6c 04029FE5 		ldr	r0, .L181+4	@,
 2381 0a70 FEFFFFEB 		bl	printf		@
 2382              	.LVL172:
 394:armwave.c     **** 
 395:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2383              		.loc 1 395 9 discriminator 3 view .LVU637
 2384              	@ armwave.c:395:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2385              		.loc 1 395 62 is_stmt 0 discriminator 3 view .LVU638
 2386 0a74 346094E5 		ldr	r6, [r4, #52]	@ _124, g_armwave_state.slice_height
 2387              	.LBB29:
 2388              	.LBB30:
 2389              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2390              		.loc 1 81 63 discriminator 3 view .LVU639
 2391 0a78 30E094E5 		ldr	lr, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2392              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2393              		.loc 1 84 35 discriminator 3 view .LVU640
 2394 0a7c 28A094E5 		ldr	r10, [r4, #40]	@ prephitmp_329, g_armwave_state.waves
 2395              	.LBE30:
 2396              	.LBE29:
 2397              	@ armwave.c:395:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2398              		.loc 1 395 9 discriminator 3 view .LVU641
 2399 0a80 950608E0 		mul	r8, r5, r6	@ _7, yy, _124
 2400              	.LBB33:
 2401              	.LBB31:
 2402              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2403              		.loc 1 84 5 discriminator 3 view .LVU642
 2404 0a84 00005AE3 		cmp	r10, #0	@ prephitmp_329,
 2405              	.LBE31:
 2406              	.LBE33:
 2407              	@ armwave.c:395:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2408              		.loc 1 395 9 discriminator 3 view .LVU643
 2409 0a88 389094E5 		ldr	r9, [r4, #56]	@ _8, g_armwave_state.slice_record_height
 2410              	.LVL173:
 2411              	.LBB34:
 2412              	.LBI29:
  72:armwave.c     **** {
 2413              		.loc 1 72 6 is_stmt 1 discriminator 3 view .LVU644
 2414              	.LBB32:
  74:armwave.c     ****     uint32_t value, word;
 2415              		.loc 1 74 5 discriminator 3 view .LVU645
  75:armwave.c     ****     uint8_t *wave_base;
 2416              		.loc 1 75 5 discriminator 3 view .LVU646
  76:armwave.c     ****     uint8_t *write_buffer_base;
 2417              		.loc 1 76 5 discriminator 3 view .LVU647
  77:armwave.c     ****     uint8_t *write_buffer;
 2418              		.loc 1 77 5 discriminator 3 view .LVU648
  78:armwave.c     **** 
 2419              		.loc 1 78 5 discriminator 3 view .LVU649
  81:armwave.c     **** 
 2420              		.loc 1 81 5 discriminator 3 view .LVU650
 2421              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2422              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU651
 2423 0a8c 9E080EE0 		mul	lr, lr, r8	@ _29, g_armwave_state.bitdepth_height, _7
 2424              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2425              		.loc 1 81 40 discriminator 3 view .LVU652
 2426 0a90 043094E5 		ldr	r3, [r4, #4]	@ _27, g_armwave_state.ch1_buffer
 2427              	.LVL174:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2428              		.loc 1 84 5 is_stmt 1 discriminator 3 view .LVU653
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2429              		.loc 1 84 5 is_stmt 0 discriminator 3 view .LVU654
 2430 0a94 2F00000A 		beq	.L154		@,
 2431 0a98 048048E2 		sub	r8, r8, #4	@ _168, _7,
 2432              	.LVL175:
 2433              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2434              		.loc 1 84 11 view .LVU655
 2435 0a9c 0070A0E3 		mov	r7, #0	@ w,
 2436              	.LVL176:
 2437              	.L157:
  86:armwave.c     **** 
 2438              		.loc 1 86 9 is_stmt 1 view .LVU656
 2439              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2440              		.loc 1 86 64 is_stmt 0 view .LVU657
 2441 0aa0 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2442              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2443              		.loc 1 90 9 view .LVU658
 2444 0aa4 000059E3 		cmp	r9, #0	@ _8,
 2445              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2446              		.loc 1 86 36 view .LVU659
 2447 0aa8 140094E5 		ldr	r0, [r4, #20]	@ _30, g_armwave_state.wave_buffer
 2448              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2449              		.loc 1 86 64 view .LVU660
 2450 0aac 920702E0 		mul	r2, r2, r7	@ _33, g_armwave_state.wave_stride, w
 2451              	.LVL177:
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2452              		.loc 1 90 9 is_stmt 1 view .LVU661
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2453              		.loc 1 90 9 is_stmt 0 view .LVU662
 2454 0ab0 2400000A 		beq	.L155		@,
 2455 0ab4 082082E0 		add	r2, r2, r8	@ tmp287, _33, _168
 2456              	.LVL178:
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2457              		.loc 1 90 9 view .LVU663
 2458 0ab8 020080E0 		add	r0, r0, r2	@ ivtmp.117, _30, tmp287
 2459              	.LVL179:
 2460              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2461              		.loc 1 90 16 view .LVU664
 2462 0abc 0020A0E3 		mov	r2, #0	@ yy,
 2463              	.LVL180:
 2464              	.L156:
  91:armwave.c     **** 
 2465              		.loc 1 91 13 is_stmt 1 view .LVU665
 2466              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
  91:armwave.c     **** 
 2467              		.loc 1 91 18 is_stmt 0 view .LVU666
 2468 0ac0 0410B0E5 		ldr	r1, [r0, #4]!	@ word, MEM[base: _355, offset: 0B]
 2469              	.LVL181:
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2470              		.loc 1 93 13 is_stmt 1 view .LVU667
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2471              		.loc 1 95 17 view .LVU668
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2472              		.loc 1 96 17 view .LVU669
  97:armwave.c     ****                 word >>= 8;
 2473              		.loc 1 97 17 view .LVU670
 2474              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2475              		.loc 1 96 63 is_stmt 0 view .LVU671
 2476 0ac4 306094E5 		ldr	r6, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2477 0ac8 01B082E2 		add	fp, r2, #1	@ tmp302, yy,
 2478              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2479              		.loc 1 97 47 view .LVU672
 2480 0acc 71C0EEE6 		uxtab	ip, lr, r1	@ tmp289, _29, word
 2481 0ad0 96C226E0 		mla	r6, r6, r2, ip	@ tmp293, g_armwave_state.bitdepth_height, yy, tmp289
 2482              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****             }
 2483              		.loc 1 98 22 view .LVU673
 2484 0ad4 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2485              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2486              		.loc 1 97 47 view .LVU674
 2487 0ad8 06C0D3E7 		ldrb	ip, [r3, r6]	@ zero_extendqisi2	@ *_195, *_195
 2488 0adc 7AA0EEE6 		uxtab	r10, lr, r10	@ tmp300, _29, word
 2489 0ae0 01C08CE2 		add	ip, ip, #1	@ tmp296, *_195,
 2490 0ae4 06C0C3E7 		strb	ip, [r3, r6]	@ tmp296, *_195
 2491              	.LVL182:
  98:armwave.c     ****             }
 2492              		.loc 1 98 17 is_stmt 1 view .LVU675
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2493              		.loc 1 95 17 view .LVU676
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2494              		.loc 1 96 17 view .LVU677
  97:armwave.c     ****                 word >>= 8;
 2495              		.loc 1 97 17 view .LVU678
 2496              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2497              		.loc 1 96 63 is_stmt 0 view .LVU679
 2498 0ae8 30C094E5 		ldr	ip, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2499              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****             }
 2500              		.loc 1 98 22 view .LVU680
 2501 0aec 2168A0E1 		lsr	r6, r1, #16	@ word, word,
 2502              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2503              		.loc 1 97 47 view .LVU681
 2504 0af0 211C8EE0 		add	r1, lr, r1, lsr #24	@ tmp327, _29, word,
 2505              	.LVL183:
  97:armwave.c     ****                 word >>= 8;
 2506              		.loc 1 97 47 view .LVU682
 2507 0af4 9CAB2CE0 		mla	ip, ip, fp, r10	@ tmp305, g_armwave_state.bitdepth_height, tmp302, tmp300
 2508 0af8 76A0EEE6 		uxtab	r10, lr, r6	@ tmp312, _29, word
 2509 0afc 0CB0D3E7 		ldrb	fp, [r3, ip]	@ zero_extendqisi2	@ *_215, *_215
 2510              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2511              		.loc 1 96 63 view .LVU683
 2512 0b00 026082E2 		add	r6, r2, #2	@ tmp314, yy,
 2513              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2514              		.loc 1 97 47 view .LVU684
 2515 0b04 01B08BE2 		add	fp, fp, #1	@ tmp308, *_215,
 2516 0b08 0CB0C3E7 		strb	fp, [r3, ip]	@ tmp308, *_215
 2517              	.LVL184:
  98:armwave.c     ****             }
 2518              		.loc 1 98 17 is_stmt 1 view .LVU685
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2519              		.loc 1 95 17 view .LVU686
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2520              		.loc 1 96 17 view .LVU687
  97:armwave.c     ****                 word >>= 8;
 2521              		.loc 1 97 17 view .LVU688
 2522              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2523              		.loc 1 96 63 is_stmt 0 view .LVU689
 2524 0b0c 30B094E5 		ldr	fp, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2525 0b10 03C082E2 		add	ip, r2, #3	@ tmp323, yy,
 2526              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2527              		.loc 1 90 37 view .LVU690
 2528 0b14 042082E2 		add	r2, r2, #4	@ yy, yy,
 2529              	.LVL185:
 2530              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2531              		.loc 1 97 47 view .LVU691
 2532 0b18 9BA626E0 		mla	r6, fp, r6, r10	@ tmp317, g_armwave_state.bitdepth_height, tmp314, tmp312
 2533              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2534              		.loc 1 90 9 view .LVU692
 2535 0b1c 020059E1 		cmp	r9, r2	@ _8, yy
 2536              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2537              		.loc 1 97 47 view .LVU693
 2538 0b20 06A0D3E7 		ldrb	r10, [r3, r6]	@ zero_extendqisi2	@ *_235, *_235
 2539 0b24 01A08AE2 		add	r10, r10, #1	@ tmp320, *_235,
 2540 0b28 06A0C3E7 		strb	r10, [r3, r6]	@ tmp320, *_235
 2541              	.LVL186:
  98:armwave.c     ****             }
 2542              		.loc 1 98 17 is_stmt 1 view .LVU694
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2543              		.loc 1 95 17 view .LVU695
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2544              		.loc 1 96 17 view .LVU696
  97:armwave.c     ****                 word >>= 8;
 2545              		.loc 1 97 17 view .LVU697
 2546              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2547              		.loc 1 96 63 is_stmt 0 view .LVU698
 2548 0b2c 306094E5 		ldr	r6, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2549              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2550              		.loc 1 97 47 view .LVU699
 2551 0b30 961C21E0 		mla	r1, r6, ip, r1	@ tmp328, g_armwave_state.bitdepth_height, tmp323, tmp327
 2552 0b34 01C0D3E7 		ldrb	ip, [r3, r1]	@ zero_extendqisi2	@ *_255, *_255
 2553 0b38 01C08CE2 		add	ip, ip, #1	@ tmp331, *_255,
 2554 0b3c 01C0C3E7 		strb	ip, [r3, r1]	@ tmp331, *_255
  98:armwave.c     ****             }
 2555              		.loc 1 98 17 is_stmt 1 view .LVU700
 2556              	.LVL187:
 2557              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2558              		.loc 1 90 9 is_stmt 0 view .LVU701
 2559 0b40 DEFFFF8A 		bhi	.L156		@,
 2560 0b44 28A094E5 		ldr	r10, [r4, #40]	@ prephitmp_329, g_armwave_state.waves
 2561              	.LVL188:
 2562              	.L155:
 2563              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2564              		.loc 1 84 44 view .LVU702
 2565 0b48 017087E2 		add	r7, r7, #1	@ w, w,
 2566              	.LVL189:
 2567              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2568              		.loc 1 84 5 view .LVU703
 2569 0b4c 0A0057E1 		cmp	r7, r10	@ w, prephitmp_329
 2570 0b50 D2FFFF3A 		bcc	.L157		@,
 2571 0b54 346094E5 		ldr	r6, [r4, #52]	@ _124, g_armwave_state.slice_height
 2572              	.LVL190:
 2573              	.L154:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2574              		.loc 1 84 5 view .LVU704
 2575              	.LBE32:
 2576              	.LBE34:
 396:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2577              		.loc 1 396 9 is_stmt 1 discriminator 3 view .LVU705
 2578              	@ armwave.c:392:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2579              		.loc 1 392 52 is_stmt 0 discriminator 3 view .LVU706
 2580 0b58 0610A0E1 		mov	r1, r6	@, _124
 2581 0b5c 480094E5 		ldr	r0, [r4, #72]	@, g_armwave_state.target_width
 2582 0b60 FEFFFFEB 		bl	__aeabi_uidiv		@
 2583              	.LVL191:
 2584              	@ armwave.c:396:         xx_rem -= g_armwave_state.slice_height;
 2585              		.loc 1 396 16 discriminator 3 view .LVU707
 2586 0b64 04309DE5 		ldr	r3, [sp, #4]	@ xx_rem, %sfp
 2587              	@ armwave.c:392:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2588              		.loc 1 392 87 discriminator 3 view .LVU708
 2589 0b68 015085E2 		add	r5, r5, #1	@ yy, yy,
 2590              	.LVL192:
 2591              	@ armwave.c:396:         xx_rem -= g_armwave_state.slice_height;
 2592              		.loc 1 396 16 discriminator 3 view .LVU709
 2593 0b6c 063043E0 		sub	r3, r3, r6	@ xx_rem, xx_rem, _124
 2594 0b70 04308DE5 		str	r3, [sp, #4]	@ xx_rem, %sfp
 2595              	.LVL193:
 397:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2596              		.loc 1 397 9 is_stmt 1 discriminator 3 view .LVU710
 2597              	@ armwave.c:397:         ypos += g_armwave_state.slice_height;
 2598              		.loc 1 397 14 is_stmt 0 discriminator 3 view .LVU711
 2599 0b74 00309DE5 		ldr	r3, [sp]	@ ypos, %sfp
 2600              	.LVL194:
 2601              		.loc 1 397 14 discriminator 3 view .LVU712
 2602 0b78 063083E0 		add	r3, r3, r6	@ ypos, ypos, _124
 2603              	.LVL195:
 2604              		.loc 1 397 14 discriminator 3 view .LVU713
 2605 0b7c 00308DE5 		str	r3, [sp]	@ ypos, %sfp
 2606              	.LVL196:
 2607              	@ armwave.c:392:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2608              		.loc 1 392 5 discriminator 3 view .LVU714
 2609 0b80 050050E1 		cmp	r0, r5	@, yy
 2610 0b84 B5FFFF8A 		bhi	.L158		@,
 2611              	.LVL197:
 2612              	.L180:
 2613              	.LBB35:
 2614              	.LBB36:
 2615              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2616              		.loc 1 81 63 view .LVU715
 2617 0b88 305094E5 		ldr	r5, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2618 0b8c 0320A0E1 		mov	r2, r3	@ ypos, ypos
 2619              	.LBE36:
 2620              	.LBE35:
 398:armwave.c     ****     }
 399:armwave.c     **** 
 400:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2621              		.loc 1 400 5 is_stmt 1 view .LVU716
 2622              	.LVL198:
 2623              	.LBB38:
 2624              	.LBI35:
  72:armwave.c     **** {
 2625              		.loc 1 72 6 view .LVU717
 2626              	.LBB37:
  74:armwave.c     ****     uint32_t value, word;
 2627              		.loc 1 74 5 view .LVU718
  75:armwave.c     ****     uint8_t *wave_base;
 2628              		.loc 1 75 5 view .LVU719
  76:armwave.c     ****     uint8_t *write_buffer_base;
 2629              		.loc 1 76 5 view .LVU720
  77:armwave.c     ****     uint8_t *write_buffer;
 2630              		.loc 1 77 5 view .LVU721
  78:armwave.c     **** 
 2631              		.loc 1 78 5 view .LVU722
  81:armwave.c     **** 
 2632              		.loc 1 81 5 view .LVU723
 2633              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2634              		.loc 1 84 5 is_stmt 0 view .LVU724
 2635 0b90 00005AE3 		cmp	r10, #0	@ prephitmp_329,
 2636              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2637              		.loc 1 81 40 view .LVU725
 2638 0b94 043094E5 		ldr	r3, [r4, #4]	@ _62, g_armwave_state.ch1_buffer
 2639              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2640              		.loc 1 81 63 view .LVU726
 2641 0b98 950205E0 		mul	r5, r5, r2	@ _64, g_armwave_state.bitdepth_height, ypos
 2642              	.LVL199:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2643              		.loc 1 84 5 is_stmt 1 view .LVU727
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2644              		.loc 1 84 5 is_stmt 0 view .LVU728
 2645 0b9c 2E00000A 		beq	.L152		@,
 2646 0ba0 04809DE5 		ldr	r8, [sp, #4]	@ xx_rem, %sfp
 2647 0ba4 000058E3 		cmp	r8, #0	@ xx_rem,
 2648 0ba8 2B00000A 		beq	.L152		@,
 2649 0bac 047042E2 		sub	r7, r2, #4	@ tmp399, ypos,
 2650              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2651              		.loc 1 84 11 view .LVU729
 2652 0bb0 0060A0E3 		mov	r6, #0	@ w,
 2653              	.LVL200:
 2654              	.L163:
  86:armwave.c     **** 
 2655              		.loc 1 86 9 is_stmt 1 view .LVU730
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2656              		.loc 1 90 9 view .LVU731
 2657              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2658              		.loc 1 86 64 is_stmt 0 view .LVU732
 2659 0bb4 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2660 0bb8 14E094E5 		ldr	lr, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2661              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2662              		.loc 1 90 16 view .LVU733
 2663 0bbc 0020A0E3 		mov	r2, #0	@ yy,
 2664 0bc0 917621E0 		mla	r1, r1, r6, r7	@ tmp349, g_armwave_state.wave_stride, w, tmp399
 2665 0bc4 01E08EE0 		add	lr, lr, r1	@ ivtmp.106, g_armwave_state.wave_buffer, tmp349
 2666              	.LVL201:
 2667              	.L162:
  91:armwave.c     **** 
 2668              		.loc 1 91 13 is_stmt 1 view .LVU734
 2669              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
  91:armwave.c     **** 
 2670              		.loc 1 91 18 is_stmt 0 view .LVU735
 2671 0bc8 0410BEE5 		ldr	r1, [lr, #4]!	@ word, MEM[base: _381, offset: 0B]
 2672              	.LVL202:
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2673              		.loc 1 93 13 is_stmt 1 view .LVU736
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2674              		.loc 1 95 17 view .LVU737
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2675              		.loc 1 96 17 view .LVU738
  97:armwave.c     ****                 word >>= 8;
 2676              		.loc 1 97 17 view .LVU739
 2677              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2678              		.loc 1 96 63 is_stmt 0 view .LVU740
 2679 0bcc 309094E5 		ldr	r9, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2680 0bd0 010082E2 		add	r0, r2, #1	@ tmp362, yy,
 2681              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2682              		.loc 1 97 47 view .LVU741
 2683 0bd4 71C0E5E6 		uxtab	ip, r5, r1	@ tmp355, _64, word
 2684 0bd8 99C229E0 		mla	r9, r9, r2, ip	@ tmp356, g_armwave_state.bitdepth_height, yy, tmp355
 2685              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****             }
 2686              		.loc 1 98 22 view .LVU742
 2687 0bdc 21B4A0E1 		lsr	fp, r1, #8	@ word, word,
 2688 0be0 21A8A0E1 		lsr	r10, r1, #16	@ word, word,
 2689              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2690              		.loc 1 97 47 view .LVU743
 2691 0be4 09C0D3E7 		ldrb	ip, [r3, r9]	@ zero_extendqisi2	@ *_115, *_115
 2692 0be8 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp367, _64, word
 2693 0bec 01C08CE2 		add	ip, ip, #1	@ tmp359, *_115,
 2694 0bf0 09C0C3E7 		strb	ip, [r3, r9]	@ tmp359, *_115
 2695              	.LVL203:
  98:armwave.c     ****             }
 2696              		.loc 1 98 17 is_stmt 1 view .LVU744
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2697              		.loc 1 95 17 view .LVU745
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2698              		.loc 1 96 17 view .LVU746
  97:armwave.c     ****                 word >>= 8;
 2699              		.loc 1 97 17 view .LVU747
 2700              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2701              		.loc 1 96 63 is_stmt 0 view .LVU748
 2702 0bf4 30C094E5 		ldr	ip, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2703              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2704              		.loc 1 97 47 view .LVU749
 2705 0bf8 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp375, _64, word
 2706 0bfc 9CB02CE0 		mla	ip, ip, r0, fp	@ tmp368, g_armwave_state.bitdepth_height, tmp362, tmp367
 2707              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2708              		.loc 1 96 63 view .LVU750
 2709 0c00 020082E2 		add	r0, r2, #2	@ tmp377, yy,
 2710 0c04 039082E2 		add	r9, r2, #3	@ tmp386, yy,
 2711              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2712              		.loc 1 97 47 view .LVU751
 2713 0c08 0CB0D3E7 		ldrb	fp, [r3, ip]	@ zero_extendqisi2	@ *_135, *_135
 2714 0c0c 211C85E0 		add	r1, r5, r1, lsr #24	@ tmp390, _64, word,
 2715              	.LVL204:
 2716              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2717              		.loc 1 90 37 view .LVU752
 2718 0c10 042082E2 		add	r2, r2, #4	@ yy, yy,
 2719              	.LVL205:
 2720              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2721              		.loc 1 97 47 view .LVU753
 2722 0c14 01B08BE2 		add	fp, fp, #1	@ tmp371, *_135,
 2723 0c18 0CB0C3E7 		strb	fp, [r3, ip]	@ tmp371, *_135
 2724              	.LVL206:
  98:armwave.c     ****             }
 2725              		.loc 1 98 17 is_stmt 1 view .LVU754
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2726              		.loc 1 95 17 view .LVU755
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2727              		.loc 1 96 17 view .LVU756
  97:armwave.c     ****                 word >>= 8;
 2728              		.loc 1 97 17 view .LVU757
 2729              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2730              		.loc 1 96 63 is_stmt 0 view .LVU758
 2731 0c1c 30C094E5 		ldr	ip, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2732              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2733              		.loc 1 90 9 view .LVU759
 2734 0c20 020058E1 		cmp	r8, r2	@ xx_rem, yy
 2735              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2736              		.loc 1 97 47 view .LVU760
 2737 0c24 9CA020E0 		mla	r0, ip, r0, r10	@ tmp380, g_armwave_state.bitdepth_height, tmp377, tmp375
 2738 0c28 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_155, *_155
 2739 0c2c 01C08CE2 		add	ip, ip, #1	@ tmp383, *_155,
 2740 0c30 00C0C3E7 		strb	ip, [r3, r0]	@ tmp383, *_155
  98:armwave.c     ****             }
 2741              		.loc 1 98 17 is_stmt 1 view .LVU761
 2742              	.LVL207:
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2743              		.loc 1 95 17 view .LVU762
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2744              		.loc 1 96 17 view .LVU763
  97:armwave.c     ****                 word >>= 8;
 2745              		.loc 1 97 17 view .LVU764
 2746              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2747              		.loc 1 96 63 is_stmt 0 view .LVU765
 2748 0c34 300094E5 		ldr	r0, [r4, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2749              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2750              		.loc 1 97 47 view .LVU766
 2751 0c38 901921E0 		mla	r1, r0, r9, r1	@ tmp391, g_armwave_state.bitdepth_height, tmp386, tmp390
 2752 0c3c 0100D3E7 		ldrb	r0, [r3, r1]	@ zero_extendqisi2	@ *_175, *_175
 2753 0c40 010080E2 		add	r0, r0, #1	@ tmp394, *_175,
 2754 0c44 0100C3E7 		strb	r0, [r3, r1]	@ tmp394, *_175
  98:armwave.c     ****             }
 2755              		.loc 1 98 17 is_stmt 1 view .LVU767
 2756              	.LVL208:
 2757              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2758              		.loc 1 90 9 is_stmt 0 view .LVU768
 2759 0c48 DEFFFF8A 		bhi	.L162		@,
 2760              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2761              		.loc 1 84 5 view .LVU769
 2762 0c4c 282094E5 		ldr	r2, [r4, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 2763              	.LVL209:
 2764              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2765              		.loc 1 84 44 view .LVU770
 2766 0c50 016086E2 		add	r6, r6, #1	@ w, w,
 2767              	.LVL210:
 2768              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2769              		.loc 1 84 5 view .LVU771
 2770 0c54 020056E1 		cmp	r6, r2	@ w, g_armwave_state.waves
 2771 0c58 D5FFFF3A 		bcc	.L163		@,
 2772              	.LVL211:
 2773              	.L152:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2774              		.loc 1 84 5 view .LVU772
 2775              	.LBE37:
 2776              	.LBE38:
 2777              	@ armwave.c:401: }
 401:armwave.c     **** }
 2778              		.loc 1 401 1 view .LVU773
 2779 0c5c 0CD08DE2 		add	sp, sp, #12	@,,
 2780              		.cfi_remember_state
 2781              		.cfi_def_cfa_offset 36
 2782              		@ sp needed	@
 2783 0c60 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2784              	.LVL212:
 2785              	.L153:
 2786              		.cfi_restore_state
 2787              	@ armwave.c:388:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 388:armwave.c     **** 
 2788              		.loc 1 388 53 view .LVU774
 2789 0c64 0030A0E3 		mov	r3, #0	@ ypos,
 2790 0c68 28A094E5 		ldr	r10, [r4, #40]	@ prephitmp_329, g_armwave_state.waves
 2791 0c6c 00308DE5 		str	r3, [sp]	@ ypos, %sfp
 2792 0c70 C4FFFFEA 		b	.L180		@
 2793              	.L182:
 2794              		.align	2
 2795              	.L181:
 2796 0c74 00000000 		.word	g_armwave_state
 2797 0c78 9C010000 		.word	.LC17
 2798              		.cfi_endproc
 2799              	.LFE70:
 2801              		.align	2
 2802              		.global	armwave_test_fill_outbuf
 2803              		.syntax unified
 2804              		.arm
 2805              		.fpu vfp
 2807              	armwave_test_fill_outbuf:
 2808              	.LFB71:
 402:armwave.c     **** 
 403:armwave.c     **** /*
 404:armwave.c     ****  * Render image to the local allocated buffer.
 405:armwave.c     ****  */
 406:armwave.c     **** void armwave_test_fill_outbuf()
 407:armwave.c     **** {
 2809              		.loc 1 407 1 is_stmt 1 view -0
 2810              		.cfi_startproc
 2811              		@ args = 0, pretend = 0, frame = 8
 2812              		@ frame_needed = 0, uses_anonymous_args = 0
 408:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2813              		.loc 1 408 5 view .LVU776
 2814 0c7c 40219FE5 		ldr	r2, .L207	@ tmp203,
 2815              	@ armwave.c:407: {
 407:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2816              		.loc 1 407 1 is_stmt 0 view .LVU777
 2817 0c80 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2818              		.cfi_def_cfa_offset 36
 2819              		.cfi_offset 4, -36
 2820              		.cfi_offset 5, -32
 2821              		.cfi_offset 6, -28
 2822              		.cfi_offset 7, -24
 2823              		.cfi_offset 8, -20
 2824              		.cfi_offset 9, -16
 2825              		.cfi_offset 10, -12
 2826              		.cfi_offset 11, -8
 2827              		.cfi_offset 14, -4
 2828 0c84 0CD04DE2 		sub	sp, sp, #12	@,,
 2829              		.cfi_def_cfa_offset 48
 2830              	@ armwave.c:408:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2831              		.loc 1 408 5 view .LVU778
 2832 0c88 588092E5 		ldr	r8, [r2, #88]	@ _1, g_armwave_state.out_pixbuf
 2833              	.LVL213:
 2834              	.LBB41:
 2835              	.LBI41:
 161:armwave.c     **** {
 2836              		.loc 1 161 6 is_stmt 1 view .LVU779
 2837              	.LBB42:
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2838              		.loc 1 163 5 view .LVU780
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 2839              		.loc 1 164 5 view .LVU781
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2840              		.loc 1 165 5 view .LVU782
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2841              		.loc 1 166 5 view .LVU783
 2842              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2843              		.loc 1 166 15 is_stmt 0 view .LVU784
 2844 0c8c 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2845              	.LVL214:
 167:armwave.c     ****     uint32_t offset;
 2846              		.loc 1 167 5 is_stmt 1 view .LVU785
 168:armwave.c     **** 
 2847              		.loc 1 168 5 view .LVU786
 170:armwave.c     **** 
 2848              		.loc 1 170 5 view .LVU787
 2849 0c90 000058E3 		cmp	r8, #0	@ _1,
 2850 0c94 4500000A 		beq	.L205		@,
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2851              		.loc 1 172 5 view .LVU788
 2852              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2853              		.loc 1 172 41 is_stmt 0 view .LVU789
 2854 0c98 485092E5 		ldr	r5, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2855 0c9c 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2856              	.LVL215:
 173:armwave.c     **** 
 2857              		.loc 1 173 5 is_stmt 1 view .LVU790
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2858              		.loc 1 175 5 view .LVU791
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2859              		.loc 1 175 5 is_stmt 0 view .LVU792
 2860 0ca0 000055E3 		cmp	r5, #0	@ npix,
 2861 0ca4 0B0000DA 		ble	.L183		@,
 2862              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2863              		.loc 1 188 52 view .LVU793
 2864 0ca8 FE35D2E1 		ldrsh	r3, [r2, #94]	@ _24, g_armwave_state.ch1_color.g
 2865              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2866              		.loc 1 187 52 view .LVU794
 2867 0cac FCB5D2E1 		ldrsh	fp, [r2, #92]	@ _18, g_armwave_state.ch1_color.r
 2868              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2869              		.loc 1 175 11 view .LVU795
 2870 0cb0 0010A0E3 		mov	r1, #0	@ n,
 2871              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2872              		.loc 1 188 52 view .LVU796
 2873 0cb4 00308DE5 		str	r3, [sp]	@ _24, %sfp
 2874              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2875              		.loc 1 189 52 view .LVU797
 2876 0cb8 F036D2E1 		ldrsh	r3, [r2, #96]	@ _28, g_armwave_state.ch1_color.b
 2877 0cbc 04308DE5 		str	r3, [sp, #4]	@ _28, %sfp
 2878              	.LVL216:
 2879              	.L190:
 179:armwave.c     **** 
 2880              		.loc 1 179 9 is_stmt 1 view .LVU798
 2881              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 2882              		.loc 1 179 19 is_stmt 0 view .LVU799
 2883 0cc0 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2884              	.LVL217:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2885              		.loc 1 181 9 is_stmt 1 view .LVU800
 2886              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2887              		.loc 1 181 11 is_stmt 0 view .LVU801
 2888 0cc4 000050E3 		cmp	r0, #0	@ wave_word,
 2889 0cc8 0400001A 		bne	.L202		@,
 2890 0ccc 041081E2 		add	r1, r1, #4	@ n, n,
 2891              	.L186:
 2892              	.LVL218:
 2893              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2894              		.loc 1 175 5 view .LVU802
 2895 0cd0 010055E1 		cmp	r5, r1	@ npix, n
 2896 0cd4 F9FFFFCA 		bgt	.L190		@,
 2897              	.LVL219:
 2898              	.L183:
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2899              		.loc 1 175 5 view .LVU803
 2900              	.LBE42:
 2901              	.LBE41:
 2902              	@ armwave.c:409: }
 409:armwave.c     **** }
 2903              		.loc 1 409 1 view .LVU804
 2904 0cd8 0CD08DE2 		add	sp, sp, #12	@,,
 2905              		.cfi_remember_state
 2906              		.cfi_def_cfa_offset 36
 2907              		@ sp needed	@
 2908 0cdc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2909              	.LVL220:
 2910              	.L202:
 2911              		.cfi_restore_state
 2912              	.LBB44:
 2913              	.LBB43:
 2914              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2915              		.loc 1 186 19 view .LVU805
 2916 0ce0 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2917              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2918              		.loc 1 181 11 view .LVU806
 2919 0ce4 0160A0E1 		mov	r6, r1	@ ivtmp.134, n
 2920              	.LVL221:
 183:armwave.c     ****                 wave_word >>= 8;
 2921              		.loc 1 183 17 is_stmt 1 view .LVU807
 184:armwave.c     **** 
 2922              		.loc 1 184 17 view .LVU808
 2923              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2924              		.loc 1 184 27 is_stmt 0 view .LVU809
 2925 0ce8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2926              	.LVL222:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2927              		.loc 1 186 17 is_stmt 1 view .LVU810
 2928 0cec 041081E2 		add	r1, r1, #4	@ n, ivtmp.134,
 2929              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2930              		.loc 1 186 19 is_stmt 0 view .LVU811
 2931 0cf0 0500001A 		bne	.L206		@,
 2932              	.L187:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2933              		.loc 1 186 19 view .LVU812
 2934 0cf4 016086E2 		add	r6, r6, #1	@ ivtmp.134, ivtmp.134,
 2935              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 2936              		.loc 1 182 13 view .LVU813
 2937 0cf8 060051E1 		cmp	r1, r6	@ n, ivtmp.134
 2938 0cfc F3FFFF0A 		beq	.L186		@,
 183:armwave.c     ****                 wave_word >>= 8;
 2939              		.loc 1 183 17 is_stmt 1 view .LVU814
 2940              	.LVL223:
 184:armwave.c     **** 
 2941              		.loc 1 184 17 view .LVU815
 2942              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2943              		.loc 1 186 19 is_stmt 0 view .LVU816
 2944 0d00 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2945              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2946              		.loc 1 184 27 view .LVU817
 2947 0d04 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2948              	.LVL224:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2949              		.loc 1 186 17 is_stmt 1 view .LVU818
 2950              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2951              		.loc 1 186 19 is_stmt 0 view .LVU819
 2952 0d08 F9FFFF0A 		beq	.L187		@,
 2953              	.L206:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2954              		.loc 1 187 21 is_stmt 1 view .LVU820
 2955              	.LVL225:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2956              		.loc 1 188 21 view .LVU821
 189:armwave.c     **** 
 2957              		.loc 1 189 21 view .LVU822
 191:armwave.c     ****                     g = MIN(gg, 255);
 2958              		.loc 1 191 21 view .LVU823
 192:armwave.c     ****                     b = MIN(bb, 255);
 2959              		.loc 1 192 21 view .LVU824
 193:armwave.c     **** 
 2960              		.loc 1 193 21 view .LVU825
 196:armwave.c     **** 
 2961              		.loc 1 196 21 view .LVU826
 2962              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2963              		.loc 1 189 55 is_stmt 0 view .LVU827
 2964 0d0c 04309DE5 		ldr	r3, [sp, #4]	@ _28, %sfp
 2965              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2966              		.loc 1 200 57 view .LVU828
 2967 0d10 20A092E5 		ldr	r10, [r2, #32]	@ _50, g_armwave_state.vscale
 2968              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2969              		.loc 1 200 32 view .LVU829
 2970 0d14 7670EFE6 		uxtb	r7, r6	@ ivtmp.134, ivtmp.134
 2971              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2972              		.loc 1 189 55 view .LVU830
 2973 0d18 930E0CE0 		mul	ip, r3, lr	@ tmp179, _28, _20
 2974              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2975              		.loc 1 188 55 view .LVU831
 2976 0d1c 00309DE5 		ldr	r3, [sp]	@ _24, %sfp
 2977              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2978              		.loc 1 200 24 view .LVU832
 2979 0d20 9A0707E0 		mul	r7, r10, r7	@ yy, _50, ivtmp.134
 2980              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2981              		.loc 1 188 55 view .LVU833
 2982 0d24 930E04E0 		mul	r4, r3, lr	@ tmp183, _24, _20
 2983              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2984              		.loc 1 189 24 view .LVU834
 2985 0d28 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp179,
 2986              	.LVL226:
 2987              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2988              		.loc 1 187 55 view .LVU835
 2989 0d2c 9E0B0EE0 		mul	lr, lr, fp	@ tmp189, _20, _18
 2990              	.LVL227:
 2991              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2992              		.loc 1 188 24 view .LVU836
 2993 0d30 4444A0E1 		asr	r4, r4, #8	@ gg, tmp183,
 2994              	.LVL228:
 2995              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 2996              		.loc 1 193 25 view .LVU837
 2997 0d34 FF005CE3 		cmp	ip, #255	@ bb,
 2998 0d38 FFC0A0A3 		movge	ip, #255	@ bb,
 2999              	.LVL229:
 3000              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 3001              		.loc 1 192 25 view .LVU838
 3002 0d3c FF0054E3 		cmp	r4, #255	@ gg,
 3003 0d40 FF40A0A3 		movge	r4, #255	@ gg,
 3004              	.LVL230:
 3005              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3006              		.loc 1 187 24 view .LVU839
 3007 0d44 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp189,
 3008              	.LVL231:
 3009              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3010              		.loc 1 191 25 view .LVU840
 3011 0d48 FF005EE3 		cmp	lr, #255	@ rr,
 3012              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3013              		.loc 1 196 56 view .LVU841
 3014 0d4c 0444A0E1 		lsl	r4, r4, #8	@ tmp184, gg,
 3015              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3016              		.loc 1 191 25 view .LVU842
 3017 0d50 FFE0A0A3 		movge	lr, #255	@ rr,
 3018              	.LVL232:
 3019              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3020              		.loc 1 196 44 view .LVU843
 3021 0d54 0C38A0E1 		lsl	r3, ip, #16	@ tmp180, bb,
 3022 0d58 FF3803E2 		and	r3, r3, #16711680	@ tmp181, tmp180,
 3023              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3024              		.loc 1 196 56 view .LVU844
 3025 0d5c 7440FFE6 		uxth	r4, r4	@ tmp185, tmp184
 3026              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3027              		.loc 1 196 51 view .LVU845
 3028 0d60 043083E1 		orr	r3, r3, r4	@ tmp187, tmp181, tmp185
 3029              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3030              		.loc 1 196 62 view .LVU846
 3031 0d64 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3032 0d68 0E3083E1 		orr	r3, r3, lr	@ tmp191, tmp187, rr
 3033              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3034              		.loc 1 203 21 view .LVU847
 3035 0d6c 00005AE3 		cmp	r10, #0	@ _50,
 3036              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3037              		.loc 1 196 26 view .LVU848
 3038 0d70 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp191,
 3039              	.LVL233:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3040              		.loc 1 199 21 is_stmt 1 view .LVU849
 200:armwave.c     ****                     xx = (nsub >> 8);
 3041              		.loc 1 200 21 view .LVU850
 201:armwave.c     **** 
 3042              		.loc 1 201 21 view .LVU851
 3043              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 3044              		.loc 1 201 32 is_stmt 0 view .LVU852
 3045 0d74 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.134,
 3046              	.LVL234:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3047              		.loc 1 203 21 is_stmt 1 view .LVU853
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3048              		.loc 1 203 21 is_stmt 0 view .LVU854
 3049 0d78 DDFFFF0A 		beq	.L187		@,
 3050              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3051              		.loc 1 203 29 view .LVU855
 3052 0d7c 00C0A0E3 		mov	ip, #0	@ row,
 3053              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3054              		.loc 1 203 38 view .LVU856
 3055 0d80 0CE0A0E1 		mov	lr, ip	@ _54, row
 3056              	.LVL235:
 3057              	.L188:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3058              		.loc 1 204 25 is_stmt 1 view .LVU857
 205:armwave.c     ****                     }
 3059              		.loc 1 205 25 view .LVU858
 3060              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3061              		.loc 1 204 52 is_stmt 0 view .LVU859
 3062 0d84 484092E5 		ldr	r4, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3063              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3064              		.loc 1 204 45 view .LVU860
 3065 0d88 0EE087E0 		add	lr, r7, lr	@ tmp194, yy, _54
 3066              	.LVL236:
 3067              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3068              		.loc 1 203 67 view .LVU861
 3069 0d8c 01C08CE2 		add	ip, ip, #1	@ tmp199, row,
 3070              	.LVL237:
 3071              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 3072              		.loc 1 205 43 view .LVU862
 3073 0d90 94AE24E0 		mla	r4, r4, lr, r10	@ tmp198, g_armwave_state.target_width, tmp194, xx
 3074              	.LVL238:
 3075              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3076              		.loc 1 203 67 view .LVU863
 3077 0d94 7CC0EFE6 		uxtb	ip, ip	@ row, tmp199
 3078              	.LVL239:
 3079              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3080              		.loc 1 203 38 view .LVU864
 3081 0d98 0CE0A0E1 		mov	lr, ip	@ _54, row
 3082              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 3083              		.loc 1 205 53 view .LVU865
 3084 0d9c 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_60
 3085              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3086              		.loc 1 203 21 view .LVU866
 3087 0da0 204092E5 		ldr	r4, [r2, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3088              	.LVL240:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3089              		.loc 1 203 21 view .LVU867
 3090 0da4 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3091 0da8 F5FFFF3A 		bcc	.L188		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3092              		.loc 1 203 21 view .LVU868
 3093 0dac D0FFFFEA 		b	.L187		@
 3094              	.LVL241:
 3095              	.L205:
 170:armwave.c     **** 
 3096              		.loc 1 170 5 is_stmt 1 view .LVU869
 3097 0db0 10309FE5 		ldr	r3, .L207+4	@,
 3098 0db4 AA20A0E3 		mov	r2, #170	@,
 3099 0db8 0C109FE5 		ldr	r1, .L207+8	@,
 3100 0dbc 0C009FE5 		ldr	r0, .L207+12	@,
 3101 0dc0 FEFFFFEB 		bl	__assert_fail		@
 3102              	.LVL242:
 3103              	.L208:
 3104              		.align	2
 3105              	.L207:
 3106 0dc4 00000000 		.word	g_armwave_state
 3107 0dc8 18000000 		.word	.LANCHOR0+24
 3108 0dcc 20000000 		.word	.LC2
 3109 0dd0 2C000000 		.word	.LC3
 3110              	.LBE43:
 3111              	.LBE44:
 3112              		.cfi_endproc
 3113              	.LFE71:
 3115              		.align	2
 3116              		.global	armwave_test_dump_buffer_to_ppm
 3117              		.syntax unified
 3118              		.arm
 3119              		.fpu vfp
 3121              	armwave_test_dump_buffer_to_ppm:
 3122              	.LVL243:
 3123              	.LFB72:
 410:armwave.c     **** 
 411:armwave.c     **** /*
 412:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 413:armwave.c     ****  */
 414:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 415:armwave.c     **** {
 3124              		.loc 1 415 1 view -0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 0
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 3128              		@ link register save eliminated.
 416:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3129              		.loc 1 416 5 view .LVU871
 3130 0dd4 08309FE5 		ldr	r3, .L210	@ tmp112,
 3131 0dd8 0010A0E1 		mov	r1, r0	@, fn
 3132 0ddc 580093E5 		ldr	r0, [r3, #88]	@, g_armwave_state.out_pixbuf
 3133              	.LVL244:
 3134              		.loc 1 416 5 is_stmt 0 view .LVU872
 3135 0de0 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3136              	.LVL245:
 3137              	.L211:
 3138              		.loc 1 416 5 view .LVU873
 3139              		.align	2
 3140              	.L210:
 3141 0de4 00000000 		.word	g_armwave_state
 3142              		.cfi_endproc
 3143              	.LFE72:
 3145              		.align	2
 3146              		.global	armwave_test_fill_gdkbuf
 3147              		.syntax unified
 3148              		.arm
 3149              		.fpu vfp
 3151              	armwave_test_fill_gdkbuf:
 3152              	.LVL246:
 3153              	.LFB73:
 417:armwave.c     **** }
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Render GDK buffer with test funtionry.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 423:armwave.c     **** {
 3154              		.loc 1 423 1 is_stmt 1 view -0
 3155              		.cfi_startproc
 3156              		@ args = 0, pretend = 0, frame = 8
 3157              		@ frame_needed = 0, uses_anonymous_args = 0
 424:armwave.c     ****     //PyObject *mv;
 425:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 426:armwave.c     **** 
 427:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 428:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3158              		.loc 1 428 5 view .LVU875
 3159              	@ armwave.c:428:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3160              		.loc 1 428 11 is_stmt 0 view .LVU876
 3161 0de8 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 3162              	@ armwave.c:423: {
 423:armwave.c     ****     //PyObject *mv;
 3163              		.loc 1 423 1 view .LVU877
 3164 0dec F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3165              		.cfi_def_cfa_offset 36
 3166              		.cfi_offset 4, -36
 3167              		.cfi_offset 5, -32
 3168              		.cfi_offset 6, -28
 3169              		.cfi_offset 7, -24
 3170              		.cfi_offset 8, -20
 3171              		.cfi_offset 9, -16
 3172              		.cfi_offset 10, -12
 3173              		.cfi_offset 11, -8
 3174              		.cfi_offset 14, -4
 3175 0df0 0CD04DE2 		sub	sp, sp, #12	@,,
 3176              		.cfi_def_cfa_offset 48
 3177              	.LBB47:
 3178              	.LBB48:
 3179              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3180              		.loc 1 166 15 view .LVU878
 3181 0df4 38219FE5 		ldr	r2, .L236	@ tmp206,
 3182              	.LBE48:
 3183              	.LBE47:
 3184              	@ armwave.c:428:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3185              		.loc 1 428 11 view .LVU879
 3186 0df8 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 3187              	.LVL247:
 429:armwave.c     ****     
 430:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 431:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 3188              		.loc 1 431 5 is_stmt 1 view .LVU880
 3189              	.LBB51:
 3190              	.LBI47:
 161:armwave.c     **** {
 3191              		.loc 1 161 6 view .LVU881
 3192              	.LBB49:
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 3193              		.loc 1 163 5 view .LVU882
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 3194              		.loc 1 164 5 view .LVU883
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 3195              		.loc 1 165 5 view .LVU884
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3196              		.loc 1 166 5 view .LVU885
 3197              	@ armwave.c:170:     assert(out_buffer != NULL);
 170:armwave.c     **** 
 3198              		.loc 1 170 5 is_stmt 0 view .LVU886
 3199 0dfc 000058E3 		cmp	r8, #0	@ out_pixbuf,
 3200              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3201              		.loc 1 166 15 view .LVU887
 3202 0e00 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3203              	.LVL248:
 167:armwave.c     ****     uint32_t offset;
 3204              		.loc 1 167 5 is_stmt 1 view .LVU888
 168:armwave.c     **** 
 3205              		.loc 1 168 5 view .LVU889
 170:armwave.c     **** 
 3206              		.loc 1 170 5 view .LVU890
 3207 0e04 4500000A 		beq	.L234		@,
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3208              		.loc 1 172 5 view .LVU891
 3209              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3210              		.loc 1 172 41 is_stmt 0 view .LVU892
 3211 0e08 485092E5 		ldr	r5, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3212 0e0c 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 3213              	.LVL249:
 173:armwave.c     **** 
 3214              		.loc 1 173 5 is_stmt 1 view .LVU893
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3215              		.loc 1 175 5 view .LVU894
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3216              		.loc 1 175 5 is_stmt 0 view .LVU895
 3217 0e10 000055E3 		cmp	r5, #0	@ npix,
 3218 0e14 0B0000DA 		ble	.L212		@,
 3219              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3220              		.loc 1 188 52 view .LVU896
 3221 0e18 FE35D2E1 		ldrsh	r3, [r2, #94]	@ _26, g_armwave_state.ch1_color.g
 3222              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3223              		.loc 1 187 52 view .LVU897
 3224 0e1c FCB5D2E1 		ldrsh	fp, [r2, #92]	@ _20, g_armwave_state.ch1_color.r
 3225              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3226              		.loc 1 175 11 view .LVU898
 3227 0e20 0010A0E3 		mov	r1, #0	@ n,
 3228              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3229              		.loc 1 188 52 view .LVU899
 3230 0e24 00308DE5 		str	r3, [sp]	@ _26, %sfp
 3231              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3232              		.loc 1 189 52 view .LVU900
 3233 0e28 F036D2E1 		ldrsh	r3, [r2, #96]	@ _30, g_armwave_state.ch1_color.b
 3234 0e2c 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 3235              	.LVL250:
 3236              	.L219:
 179:armwave.c     **** 
 3237              		.loc 1 179 9 is_stmt 1 view .LVU901
 3238              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 3239              		.loc 1 179 19 is_stmt 0 view .LVU902
 3240 0e30 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 3241              	.LVL251:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3242              		.loc 1 181 9 is_stmt 1 view .LVU903
 3243              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3244              		.loc 1 181 11 is_stmt 0 view .LVU904
 3245 0e34 000050E3 		cmp	r0, #0	@ wave_word,
 3246 0e38 0400001A 		bne	.L231		@,
 3247 0e3c 041081E2 		add	r1, r1, #4	@ n, n,
 3248              	.L215:
 3249              	.LVL252:
 3250              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3251              		.loc 1 175 5 view .LVU905
 3252 0e40 010055E1 		cmp	r5, r1	@ npix, n
 3253 0e44 F9FFFFCA 		bgt	.L219		@,
 3254              	.LVL253:
 3255              	.L212:
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3256              		.loc 1 175 5 view .LVU906
 3257              	.LBE49:
 3258              	.LBE51:
 3259              	@ armwave.c:432: }
 432:armwave.c     **** }
 3260              		.loc 1 432 1 view .LVU907
 3261 0e48 0CD08DE2 		add	sp, sp, #12	@,,
 3262              		.cfi_remember_state
 3263              		.cfi_def_cfa_offset 36
 3264              		@ sp needed	@
 3265 0e4c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3266              	.LVL254:
 3267              	.L231:
 3268              		.cfi_restore_state
 3269              	.LBB52:
 3270              	.LBB50:
 3271              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3272              		.loc 1 186 19 view .LVU908
 3273 0e50 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3274              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3275              		.loc 1 181 11 view .LVU909
 3276 0e54 0160A0E1 		mov	r6, r1	@ ivtmp.150, n
 3277              	.LVL255:
 183:armwave.c     ****                 wave_word >>= 8;
 3278              		.loc 1 183 17 is_stmt 1 view .LVU910
 184:armwave.c     **** 
 3279              		.loc 1 184 17 view .LVU911
 3280              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 3281              		.loc 1 184 27 is_stmt 0 view .LVU912
 3282 0e58 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3283              	.LVL256:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3284              		.loc 1 186 17 is_stmt 1 view .LVU913
 3285 0e5c 041081E2 		add	r1, r1, #4	@ n, ivtmp.150,
 3286              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3287              		.loc 1 186 19 is_stmt 0 view .LVU914
 3288 0e60 0500001A 		bne	.L235		@,
 3289              	.L216:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3290              		.loc 1 186 19 view .LVU915
 3291 0e64 016086E2 		add	r6, r6, #1	@ ivtmp.150, ivtmp.150,
 3292              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 3293              		.loc 1 182 13 view .LVU916
 3294 0e68 060051E1 		cmp	r1, r6	@ n, ivtmp.150
 3295 0e6c F3FFFF0A 		beq	.L215		@,
 183:armwave.c     ****                 wave_word >>= 8;
 3296              		.loc 1 183 17 is_stmt 1 view .LVU917
 3297              	.LVL257:
 184:armwave.c     **** 
 3298              		.loc 1 184 17 view .LVU918
 3299              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3300              		.loc 1 186 19 is_stmt 0 view .LVU919
 3301 0e70 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3302              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 3303              		.loc 1 184 27 view .LVU920
 3304 0e74 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3305              	.LVL258:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3306              		.loc 1 186 17 is_stmt 1 view .LVU921
 3307              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3308              		.loc 1 186 19 is_stmt 0 view .LVU922
 3309 0e78 F9FFFF0A 		beq	.L216		@,
 3310              	.L235:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3311              		.loc 1 187 21 is_stmt 1 view .LVU923
 3312              	.LVL259:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3313              		.loc 1 188 21 view .LVU924
 189:armwave.c     **** 
 3314              		.loc 1 189 21 view .LVU925
 191:armwave.c     ****                     g = MIN(gg, 255);
 3315              		.loc 1 191 21 view .LVU926
 192:armwave.c     ****                     b = MIN(bb, 255);
 3316              		.loc 1 192 21 view .LVU927
 193:armwave.c     **** 
 3317              		.loc 1 193 21 view .LVU928
 196:armwave.c     **** 
 3318              		.loc 1 196 21 view .LVU929
 3319              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3320              		.loc 1 189 55 is_stmt 0 view .LVU930
 3321 0e7c 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 3322              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 3323              		.loc 1 200 57 view .LVU931
 3324 0e80 20A092E5 		ldr	r10, [r2, #32]	@ _52, g_armwave_state.vscale
 3325              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 3326              		.loc 1 200 32 view .LVU932
 3327 0e84 7670EFE6 		uxtb	r7, r6	@ ivtmp.150, ivtmp.150
 3328              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3329              		.loc 1 189 55 view .LVU933
 3330 0e88 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 3331              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3332              		.loc 1 188 55 view .LVU934
 3333 0e8c 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 3334              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 3335              		.loc 1 200 24 view .LVU935
 3336 0e90 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.150
 3337              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3338              		.loc 1 188 55 view .LVU936
 3339 0e94 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 3340              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3341              		.loc 1 189 24 view .LVU937
 3342 0e98 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 3343              	.LVL260:
 3344              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3345              		.loc 1 187 55 view .LVU938
 3346 0e9c 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 3347              	.LVL261:
 3348              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3349              		.loc 1 188 24 view .LVU939
 3350 0ea0 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 3351              	.LVL262:
 3352              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 3353              		.loc 1 193 25 view .LVU940
 3354 0ea4 FF005CE3 		cmp	ip, #255	@ bb,
 3355 0ea8 FFC0A0A3 		movge	ip, #255	@ bb,
 3356              	.LVL263:
 3357              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 3358              		.loc 1 192 25 view .LVU941
 3359 0eac FF0054E3 		cmp	r4, #255	@ gg,
 3360 0eb0 FF40A0A3 		movge	r4, #255	@ gg,
 3361              	.LVL264:
 3362              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3363              		.loc 1 187 24 view .LVU942
 3364 0eb4 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3365              	.LVL265:
 3366              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3367              		.loc 1 191 25 view .LVU943
 3368 0eb8 FF005EE3 		cmp	lr, #255	@ rr,
 3369              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3370              		.loc 1 196 56 view .LVU944
 3371 0ebc 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3372              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3373              		.loc 1 191 25 view .LVU945
 3374 0ec0 FFE0A0A3 		movge	lr, #255	@ rr,
 3375              	.LVL266:
 3376              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3377              		.loc 1 196 44 view .LVU946
 3378 0ec4 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3379 0ec8 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3380              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3381              		.loc 1 196 56 view .LVU947
 3382 0ecc 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3383              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3384              		.loc 1 196 51 view .LVU948
 3385 0ed0 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3386              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3387              		.loc 1 196 62 view .LVU949
 3388 0ed4 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3389 0ed8 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3390              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3391              		.loc 1 203 21 view .LVU950
 3392 0edc 00005AE3 		cmp	r10, #0	@ _52,
 3393              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3394              		.loc 1 196 26 view .LVU951
 3395 0ee0 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3396              	.LVL267:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3397              		.loc 1 199 21 is_stmt 1 view .LVU952
 200:armwave.c     ****                     xx = (nsub >> 8);
 3398              		.loc 1 200 21 view .LVU953
 201:armwave.c     **** 
 3399              		.loc 1 201 21 view .LVU954
 3400              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 3401              		.loc 1 201 32 is_stmt 0 view .LVU955
 3402 0ee4 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.150,
 3403              	.LVL268:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3404              		.loc 1 203 21 is_stmt 1 view .LVU956
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3405              		.loc 1 203 21 is_stmt 0 view .LVU957
 3406 0ee8 DDFFFF0A 		beq	.L216		@,
 3407              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3408              		.loc 1 203 29 view .LVU958
 3409 0eec 00C0A0E3 		mov	ip, #0	@ row,
 3410              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3411              		.loc 1 203 38 view .LVU959
 3412 0ef0 0CE0A0E1 		mov	lr, ip	@ _56, row
 3413              	.LVL269:
 3414              	.L217:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3415              		.loc 1 204 25 is_stmt 1 view .LVU960
 205:armwave.c     ****                     }
 3416              		.loc 1 205 25 view .LVU961
 3417              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3418              		.loc 1 204 52 is_stmt 0 view .LVU962
 3419 0ef4 484092E5 		ldr	r4, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3420              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3421              		.loc 1 204 45 view .LVU963
 3422 0ef8 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3423              	.LVL270:
 3424              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3425              		.loc 1 203 67 view .LVU964
 3426 0efc 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3427              	.LVL271:
 3428              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 3429              		.loc 1 205 43 view .LVU965
 3430 0f00 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3431              	.LVL272:
 3432              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3433              		.loc 1 203 67 view .LVU966
 3434 0f04 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3435              	.LVL273:
 3436              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3437              		.loc 1 203 38 view .LVU967
 3438 0f08 0CE0A0E1 		mov	lr, ip	@ _56, row
 3439              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 3440              		.loc 1 205 53 view .LVU968
 3441 0f0c 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3442              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3443              		.loc 1 203 21 view .LVU969
 3444 0f10 204092E5 		ldr	r4, [r2, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3445              	.LVL274:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3446              		.loc 1 203 21 view .LVU970
 3447 0f14 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3448 0f18 F5FFFF3A 		bcc	.L217		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3449              		.loc 1 203 21 view .LVU971
 3450 0f1c D0FFFFEA 		b	.L216		@
 3451              	.LVL275:
 3452              	.L234:
 170:armwave.c     **** 
 3453              		.loc 1 170 5 is_stmt 1 view .LVU972
 3454 0f20 10309FE5 		ldr	r3, .L236+4	@,
 3455 0f24 AA20A0E3 		mov	r2, #170	@,
 3456 0f28 0C109FE5 		ldr	r1, .L236+8	@,
 3457 0f2c 0C009FE5 		ldr	r0, .L236+12	@,
 3458              	.LVL276:
 170:armwave.c     **** 
 3459              		.loc 1 170 5 is_stmt 0 view .LVU973
 3460 0f30 FEFFFFEB 		bl	__assert_fail		@
 3461              	.LVL277:
 3462              	.L237:
 3463              		.align	2
 3464              	.L236:
 3465 0f34 00000000 		.word	g_armwave_state
 3466 0f38 18000000 		.word	.LANCHOR0+24
 3467 0f3c 20000000 		.word	.LC2
 3468 0f40 2C000000 		.word	.LC3
 3469              	.LBE50:
 3470              	.LBE52:
 3471              		.cfi_endproc
 3472              	.LFE73:
 3474              		.align	2
 3475              		.global	armwave_test_buffer_alloc
 3476              		.syntax unified
 3477              		.arm
 3478              		.fpu vfp
 3480              	armwave_test_buffer_alloc:
 3481              	.LFB74:
 433:armwave.c     **** 
 434:armwave.c     **** /*
 435:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 436:armwave.c     ****  */
 437:armwave.c     **** void armwave_test_buffer_alloc()
 438:armwave.c     **** {
 3482              		.loc 1 438 1 is_stmt 1 view -0
 3483              		.cfi_startproc
 3484              		@ args = 0, pretend = 0, frame = 0
 3485              		@ frame_needed = 0, uses_anonymous_args = 0
 439:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3486              		.loc 1 439 5 view .LVU975
 3487              	@ armwave.c:438: {
 438:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3488              		.loc 1 438 1 is_stmt 0 view .LVU976
 3489 0f44 70402DE9 		push	{r4, r5, r6, lr}	@
 3490              		.cfi_def_cfa_offset 16
 3491              		.cfi_offset 4, -16
 3492              		.cfi_offset 5, -12
 3493              		.cfi_offset 6, -8
 3494              		.cfi_offset 14, -4
 3495              	@ armwave.c:439:     if(g_armwave_state.test_wave_buffer != NULL) {
 3496              		.loc 1 439 23 view .LVU977
 3497 0f48 50409FE5 		ldr	r4, .L245	@ tmp130,
 3498 0f4c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3499              	@ armwave.c:439:     if(g_armwave_state.test_wave_buffer != NULL) {
 3500              		.loc 1 439 7 view .LVU978
 3501 0f50 000050E3 		cmp	r0, #0	@ _1,
 3502 0f54 0000000A 		beq	.L239		@,
 440:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3503              		.loc 1 440 9 is_stmt 1 view .LVU979
 3504 0f58 FEFFFFEB 		bl	free		@
 3505              	.LVL278:
 3506              	.L239:
 441:armwave.c     ****     }
 442:armwave.c     **** 
 443:armwave.c     ****     printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwave_
 3507              		.loc 1 443 5 view .LVU980
 3508 0f5c 2C2094E5 		ldr	r2, [r4, #44]	@, g_armwave_state.waves_max
 3509 0f60 3C1094E5 		ldr	r1, [r4, #60]	@, g_armwave_state.wave_length
 3510 0f64 38009FE5 		ldr	r0, .L245+4	@,
 3511 0f68 FEFFFFEB 		bl	printf		@
 3512              	.LVL279:
 444:armwave.c     **** 
 445:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3513              		.loc 1 445 5 view .LVU981
 3514              	@ armwave.c:445:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3515              		.loc 1 445 40 is_stmt 0 view .LVU982
 3516 0f6c 3C3094E5 		ldr	r3, [r4, #60]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3517 0f70 2C5094E5 		ldr	r5, [r4, #44]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3518 0f74 0110A0E3 		mov	r1, #1	@,
 3519 0f78 950305E0 		mul	r5, r5, r3	@ _6, g_armwave_state.waves_max, g_armwave_state.wave_length
 3520 0f7c 0500A0E1 		mov	r0, r5	@, _6
 3521 0f80 FEFFFFEB 		bl	calloc		@
 3522              	.LVL280:
 3523              	@ armwave.c:447:     if(g_armwave_state.test_wave_buffer == NULL) {
 446:armwave.c     **** 
 447:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3524              		.loc 1 447 7 view .LVU983
 3525 0f84 000050E3 		cmp	r0, #0	@ tmp127,
 3526              	@ armwave.c:445:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 445:armwave.c     **** 
 3527              		.loc 1 445 38 view .LVU984
 3528 0f88 180084E5 		str	r0, [r4, #24]	@ tmp127, g_armwave_state.test_wave_buffer
 3529              		.loc 1 447 5 is_stmt 1 view .LVU985
 3530              	@ armwave.c:447:     if(g_armwave_state.test_wave_buffer == NULL) {
 3531              		.loc 1 447 7 is_stmt 0 view .LVU986
 3532 0f8c 7080BD18 		popne	{r4, r5, r6, pc}	@
 448:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3533              		.loc 1 448 9 is_stmt 1 view .LVU987
 3534 0f90 0510A0E1 		mov	r1, r5	@, _6
 3535 0f94 0C009FE5 		ldr	r0, .L245+8	@,
 3536              	@ armwave.c:451: }
 449:armwave.c     ****         return;
 450:armwave.c     ****     }
 451:armwave.c     **** }
 3537              		.loc 1 451 1 is_stmt 0 view .LVU988
 3538 0f98 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3539              		.cfi_restore 14
 3540              		.cfi_restore 6
 3541              		.cfi_restore 5
 3542              		.cfi_restore 4
 3543              		.cfi_def_cfa_offset 0
 3544              	@ armwave.c:448:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 448:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3545              		.loc 1 448 9 view .LVU989
 3546 0f9c FEFFFFEA 		b	printf		@
 3547              	.LVL281:
 3548              	.L246:
 3549              		.align	2
 3550              	.L245:
 3551 0fa0 00000000 		.word	g_armwave_state
 3552 0fa4 CC010000 		.word	.LC18
 3553 0fa8 FC010000 		.word	.LC19
 3554              		.cfi_endproc
 3555              	.LFE74:
 3557              		.align	2
 3558              		.global	armwave_fill_pixbuf_into_pybuffer
 3559              		.syntax unified
 3560              		.arm
 3561              		.fpu vfp
 3563              	armwave_fill_pixbuf_into_pybuffer:
 3564              	.LVL282:
 3565              	.LFB75:
 452:armwave.c     **** 
 453:armwave.c     **** /*
 454:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 455:armwave.c     ****  */
 456:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 457:armwave.c     **** {
 3566              		.loc 1 457 1 is_stmt 1 view -0
 3567              		.cfi_startproc
 3568              		@ args = 0, pretend = 0, frame = 48
 3569              		@ frame_needed = 0, uses_anonymous_args = 0
 458:armwave.c     ****     Py_buffer buffer;
 3570              		.loc 1 458 5 view .LVU991
 459:armwave.c     ****     int ret;
 3571              		.loc 1 459 5 view .LVU992
 460:armwave.c     **** 
 461:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3572              		.loc 1 461 5 view .LVU993
 3573              	@ armwave.c:457: {
 457:armwave.c     ****     Py_buffer buffer;
 3574              		.loc 1 457 1 is_stmt 0 view .LVU994
 3575 0fac 10402DE9 		push	{r4, lr}	@
 3576              		.cfi_def_cfa_offset 8
 3577              		.cfi_offset 4, -8
 3578              		.cfi_offset 14, -4
 3579 0fb0 0040A0E1 		mov	r4, r0	@ buf_obj, buf_obj
 3580 0fb4 30D04DE2 		sub	sp, sp, #48	@,,
 3581              		.cfi_def_cfa_offset 56
 3582              	@ armwave.c:461:     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3583              		.loc 1 461 5 view .LVU995
 3584 0fb8 78009FE5 		ldr	r0, .L252	@,
 3585              	.LVL283:
 3586              		.loc 1 461 5 view .LVU996
 3587 0fbc FEFFFFEB 		bl	puts		@
 3588              	.LVL284:
 462:armwave.c     **** 
 463:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3589              		.loc 1 463 5 is_stmt 1 view .LVU997
 3590              	@ armwave.c:463:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3591              		.loc 1 463 11 is_stmt 0 view .LVU998
 3592 0fc0 0400A0E1 		mov	r0, r4	@, buf_obj
 3593 0fc4 04108DE2 		add	r1, sp, #4	@ tmp134,,
 3594 0fc8 0120A0E3 		mov	r2, #1	@,
 3595 0fcc FEFFFFEB 		bl	PyObject_GetBuffer		@
 3596              	.LVL285:
 464:armwave.c     **** 
 465:armwave.c     ****     if(ret != 0) {
 3597              		.loc 1 465 5 is_stmt 1 view .LVU999
 3598              	@ armwave.c:465:     if(ret != 0) {
 3599              		.loc 1 465 7 is_stmt 0 view .LVU1000
 3600 0fd0 000050E3 		cmp	r0, #0	@,
 3601 0fd4 0E00001A 		bne	.L251		@,
 466:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 467:armwave.c     ****         Py_RETURN_FALSE;
 468:armwave.c     ****     }
 469:armwave.c     **** 
 470:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 471:armwave.c     **** 
 472:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3602              		.loc 1 472 5 is_stmt 1 view .LVU1001
 3603 0fd8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3604              	.LVL286:
 3605              		.loc 1 472 5 is_stmt 0 view .LVU1002
 3606 0fdc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3607              	.LVL287:
 473:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 3608              		.loc 1 473 5 is_stmt 1 view .LVU1003
 3609 0fe0 54009FE5 		ldr	r0, .L252+4	@,
 3610 0fe4 FEFFFFEB 		bl	puts		@
 3611              	.LVL288:
 474:armwave.c     **** 
 475:armwave.c     ****     PyBuffer_Release(&buffer);
 3612              		.loc 1 475 5 view .LVU1004
 3613 0fe8 04008DE2 		add	r0, sp, #4	@ tmp135,,
 3614 0fec FEFFFFEB 		bl	PyBuffer_Release		@
 3615              	.LVL289:
 476:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 3616              		.loc 1 476 5 view .LVU1005
 3617 0ff0 48009FE5 		ldr	r0, .L252+8	@,
 3618 0ff4 FEFFFFEB 		bl	puts		@
 3619              	.LVL290:
 477:armwave.c     **** 
 478:armwave.c     ****     Py_RETURN_TRUE;
 3620              		.loc 1 478 5 view .LVU1006
 3621              	.LBB53:
 3622              	.LBI53:
 3623              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3624              		.loc 2 456 20 view .LVU1007
 3625              	.LBB54:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3626              		.loc 2 458 21 view .LVU1008
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3627              		.loc 2 459 5 view .LVU1009
 3628              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3629              		.loc 2 459 18 is_stmt 0 view .LVU1010
 3630 0ff8 44309FE5 		ldr	r3, .L252+12	@ tmp129,
 3631              	.LBE54:
 3632              	.LBE53:
 3633              	@ armwave.c:478:     Py_RETURN_TRUE;
 3634              		.loc 1 478 5 view .LVU1011
 3635 0ffc 0300A0E1 		mov	r0, r3	@ <retval>, tmp129
 3636              	.LBB56:
 3637              	.LBB55:
 3638              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3639              		.loc 2 459 18 view .LVU1012
 3640 1000 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3641 1004 012082E2 		add	r2, r2, #1	@ tmp131, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3642 1008 002083E5 		str	r2, [r3]	@ tmp131,
 3643              	.LBE55:
 3644              	.LBE56:
 3645              	@ armwave.c:479: }
 479:armwave.c     **** }
 3646              		.loc 1 479 1 view .LVU1013
 3647 100c 30D08DE2 		add	sp, sp, #48	@,,
 3648              		.cfi_remember_state
 3649              		.cfi_def_cfa_offset 8
 3650              		@ sp needed	@
 3651 1010 1080BDE8 		pop	{r4, pc}	@
 3652              	.LVL291:
 3653              	.L251:
 3654              		.cfi_restore_state
 466:armwave.c     ****         Py_RETURN_FALSE;
 3655              		.loc 1 466 9 is_stmt 1 view .LVU1014
 3656 1014 2C009FE5 		ldr	r0, .L252+16	@,
 3657              	.LVL292:
 466:armwave.c     ****         Py_RETURN_FALSE;
 3658              		.loc 1 466 9 is_stmt 0 view .LVU1015
 3659 1018 FEFFFFEB 		bl	puts		@
 3660              	.LVL293:
 467:armwave.c     ****     }
 3661              		.loc 1 467 9 is_stmt 1 view .LVU1016
 3662              	.LBB57:
 3663              	.LBI57:
 456:/usr/local/include/python3.8/object.h **** {
 3664              		.loc 2 456 20 view .LVU1017
 3665              	.LBB58:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3666              		.loc 2 458 21 view .LVU1018
 3667              		.loc 2 459 5 view .LVU1019
 3668              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3669              		.loc 2 459 18 is_stmt 0 view .LVU1020
 3670 101c 28309FE5 		ldr	r3, .L252+20	@ tmp121,
 3671              	.LBE58:
 3672              	.LBE57:
 3673              	@ armwave.c:467:         Py_RETURN_FALSE;
 467:armwave.c     ****     }
 3674              		.loc 1 467 9 view .LVU1021
 3675 1020 0300A0E1 		mov	r0, r3	@ <retval>, tmp121
 3676              	.LBB60:
 3677              	.LBB59:
 3678              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3679              		.loc 2 459 18 view .LVU1022
 3680 1024 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3681 1028 012082E2 		add	r2, r2, #1	@ tmp123, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3682 102c 002083E5 		str	r2, [r3]	@ tmp123,
 3683              	.LBE59:
 3684              	.LBE60:
 3685              	@ armwave.c:479: }
 3686              		.loc 1 479 1 view .LVU1023
 3687 1030 30D08DE2 		add	sp, sp, #48	@,,
 3688              		.cfi_def_cfa_offset 8
 3689              		@ sp needed	@
 3690 1034 1080BDE8 		pop	{r4, pc}	@
 3691              	.LVL294:
 3692              	.L253:
 3693              		.loc 1 479 1 view .LVU1024
 3694              		.align	2
 3695              	.L252:
 3696 1038 48020000 		.word	.LC20
 3697 103c C8020000 		.word	.LC22
 3698 1040 FC020000 		.word	.LC23
 3699 1044 00000000 		.word	_Py_TrueStruct
 3700 1048 74020000 		.word	.LC21
 3701 104c 00000000 		.word	_Py_FalseStruct
 3702              		.cfi_endproc
 3703              	.LFE75:
 3705              		.align	2
 3706              		.global	armwave_test_create_am_sine
 3707              		.syntax unified
 3708              		.arm
 3709              		.fpu vfp
 3711              	armwave_test_create_am_sine:
 3712              	.LVL295:
 3713              	.LFB76:
 480:armwave.c     **** 
 481:armwave.c     **** /*
 482:armwave.c     ****  * Make a test AM waveform for render tests.
 483:armwave.c     ****  *
 484:armwave.c     ****  * @param   mod                 modulation depth
 485:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 486:armwave.c     ****  */
 487:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 488:armwave.c     **** {
 3714              		.loc 1 488 1 is_stmt 1 view -0
 3715              		.cfi_startproc
 3716              		@ args = 0, pretend = 0, frame = 8
 3717              		@ frame_needed = 0, uses_anonymous_args = 0
 489:armwave.c     ****     float v, noise, xnoise, mod_val;
 3718              		.loc 1 489 5 view .LVU1026
 490:armwave.c     ****     int w, x;
 3719              		.loc 1 490 5 view .LVU1027
 491:armwave.c     **** 
 492:armwave.c     ****     armwave_test_buffer_alloc();
 3720              		.loc 1 492 5 view .LVU1028
 3721              	.LBB63:
 3722              	.LBI63:
 437:armwave.c     **** {
 3723              		.loc 1 437 6 view .LVU1029
 3724              	.LBB64:
 439:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3725              		.loc 1 439 5 view .LVU1030
 3726              	.LBE64:
 3727              	.LBE63:
 3728              	@ armwave.c:488: {
 488:armwave.c     ****     float v, noise, xnoise, mod_val;
 3729              		.loc 1 488 1 is_stmt 0 view .LVU1031
 3730 1050 70402DE9 		push	{r4, r5, r6, lr}	@
 3731              		.cfi_def_cfa_offset 16
 3732              		.cfi_offset 4, -16
 3733              		.cfi_offset 5, -12
 3734              		.cfi_offset 6, -8
 3735              		.cfi_offset 14, -4
 3736 1054 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3737              		.cfi_def_cfa_offset 72
 3738              		.cfi_offset 80, -72
 3739              		.cfi_offset 81, -68
 3740              		.cfi_offset 82, -64
 3741              		.cfi_offset 83, -60
 3742              		.cfi_offset 84, -56
 3743              		.cfi_offset 85, -52
 3744              		.cfi_offset 86, -48
 3745              		.cfi_offset 87, -44
 3746              		.cfi_offset 88, -40
 3747              		.cfi_offset 89, -36
 3748              		.cfi_offset 90, -32
 3749              		.cfi_offset 91, -28
 3750              		.cfi_offset 92, -24
 3751              		.cfi_offset 93, -20
 3752              	.LBB69:
 3753              	.LBB65:
 3754              	@ armwave.c:439:     if(g_armwave_state.test_wave_buffer != NULL) {
 439:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3755              		.loc 1 439 23 view .LVU1032
 3756 1058 B8519FE5 		ldr	r5, .L285+32	@ tmp232,
 3757              	.LBE65:
 3758              	.LBE69:
 3759              	@ armwave.c:488: {
 488:armwave.c     ****     float v, noise, xnoise, mod_val;
 3760              		.loc 1 488 1 view .LVU1033
 3761 105c 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3762 1060 60BAB0EE 		vmov.f32	s22, s1	@ noise_fraction, noise_fraction
 3763              	.LBB70:
 3764              	.LBB66:
 3765              	@ armwave.c:439:     if(g_armwave_state.test_wave_buffer != NULL) {
 439:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3766              		.loc 1 439 23 view .LVU1034
 3767 1064 180095E5 		ldr	r0, [r5, #24]	@ _63, g_armwave_state.test_wave_buffer
 3768              	.LBE66:
 3769              	.LBE70:
 3770              	@ armwave.c:488: {
 488:armwave.c     ****     float v, noise, xnoise, mod_val;
 3771              		.loc 1 488 1 view .LVU1035
 3772 1068 08D04DE2 		sub	sp, sp, #8	@,,
 3773              		.cfi_def_cfa_offset 80
 3774              	.LBB71:
 3775              	.LBB67:
 3776              	@ armwave.c:439:     if(g_armwave_state.test_wave_buffer != NULL) {
 439:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3777              		.loc 1 439 7 view .LVU1036
 3778 106c 000050E3 		cmp	r0, #0	@ _63,
 3779 1070 0000000A 		beq	.L255		@,
 440:armwave.c     ****     }
 3780              		.loc 1 440 9 is_stmt 1 view .LVU1037
 3781 1074 FEFFFFEB 		bl	free		@
 3782              	.LVL296:
 3783              	.L255:
 443:armwave.c     **** 
 3784              		.loc 1 443 5 view .LVU1038
 3785 1078 2C2095E5 		ldr	r2, [r5, #44]	@, g_armwave_state.waves_max
 3786 107c 3C1095E5 		ldr	r1, [r5, #60]	@, g_armwave_state.wave_length
 3787 1080 94019FE5 		ldr	r0, .L285+36	@,
 3788 1084 FEFFFFEB 		bl	printf		@
 3789              	.LVL297:
 445:armwave.c     **** 
 3790              		.loc 1 445 5 view .LVU1039
 3791              	@ armwave.c:445:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 445:armwave.c     **** 
 3792              		.loc 1 445 40 is_stmt 0 view .LVU1040
 3793 1088 3C3095E5 		ldr	r3, [r5, #60]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3794 108c 2C4095E5 		ldr	r4, [r5, #44]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3795 1090 0110A0E3 		mov	r1, #1	@,
 3796 1094 940304E0 		mul	r4, r4, r3	@ _68, g_armwave_state.waves_max, g_armwave_state.wave_length
 3797 1098 0400A0E1 		mov	r0, r4	@, _68
 3798 109c FEFFFFEB 		bl	calloc		@
 3799              	.LVL298:
 3800              	@ armwave.c:447:     if(g_armwave_state.test_wave_buffer == NULL) {
 447:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3801              		.loc 1 447 7 view .LVU1041
 3802 10a0 000050E3 		cmp	r0, #0	@ tmp177,
 3803              	@ armwave.c:445:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 445:armwave.c     **** 
 3804              		.loc 1 445 38 view .LVU1042
 3805 10a4 180085E5 		str	r0, [r5, #24]	@ tmp177, g_armwave_state.test_wave_buffer
 447:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3806              		.loc 1 447 5 is_stmt 1 view .LVU1043
 3807              	@ armwave.c:447:     if(g_armwave_state.test_wave_buffer == NULL) {
 447:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3808              		.loc 1 447 7 is_stmt 0 view .LVU1044
 3809 10a8 4E00000A 		beq	.L284		@,
 3810              	.L256:
 3811              	.LVL299:
 447:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3812              		.loc 1 447 7 view .LVU1045
 3813              	.LBE67:
 3814              	.LBE71:
 3815              	@ armwave.c:494:     for(w = 0; w < g_armwave_state.waves; w++) {
 493:armwave.c     **** 
 494:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3816              		.loc 1 494 35 discriminator 1 view .LVU1046
 3817 10ac 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_80, g_armwave_state.waves
 3818              	@ armwave.c:494:     for(w = 0; w < g_armwave_state.waves; w++) {
 3819              		.loc 1 494 5 discriminator 1 view .LVU1047
 3820 10b0 000052E3 		cmp	r2, #0	@ prephitmp_80,
 3821 10b4 4800000A 		beq	.L254		@,
 3822              	@ armwave.c:495:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 495:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3823              		.loc 1 495 37 view .LVU1048
 3824 10b8 4EDADFED 		vldr.32	s27, .L285	@ tmp184,
 3825              	@ armwave.c:495:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3826              		.loc 1 495 17 view .LVU1049
 3827 10bc 4EDA9FED 		vldr.32	s26, .L285+4	@ tmp186,
 3828              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 496:armwave.c     ****         //mod = 1.0f;
 497:armwave.c     **** 
 498:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 499:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 500:armwave.c     ****             noise *= noise;
 501:armwave.c     ****             noise *= noise;
 502:armwave.c     ****             noise *= noise;
 503:armwave.c     **** 
 504:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 505:armwave.c     ****                 noise = -noise;
 506:armwave.c     **** 
 507:armwave.c     ****             noise += 1.0f;
 508:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 509:armwave.c     **** 
 510:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3829              		.loc 1 510 41 view .LVU1050
 3830 10c0 4E8A9FED 		vldr.32	s16, .L285+8	@ tmp234,
 3831              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 3832              		.loc 1 510 29 view .LVU1051
 3833 10c4 4EBADFED 		vldr.32	s23, .L285+12	@ tmp235,
 3834              	@ armwave.c:513:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 511:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 512:armwave.c     ****             //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127), 0
 513:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = (uint8_t)MIN(
 3835              		.loc 1 513 87 view .LVU1052
 3836 10c8 4ECA9FED 		vldr.32	s24, .L285+16	@ tmp236,
 3837 10cc 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_96, g_armwave_state.wave_length
 3838              	@ armwave.c:494:     for(w = 0; w < g_armwave_state.waves; w++) {
 494:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3839              		.loc 1 494 5 view .LVU1053
 3840 10d0 0060A0E3 		mov	r6, #0	@ w,
 3841              	.LVL300:
 3842              	.L264:
 495:armwave.c     ****         //mod = 1.0f;
 3843              		.loc 1 495 9 is_stmt 1 view .LVU1054
 3844              	@ armwave.c:495:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 495:armwave.c     ****         //mod = 1.0f;
 3845              		.loc 1 495 28 is_stmt 0 view .LVU1055
 3846 10d4 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3847              	@ armwave.c:495:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 495:armwave.c     ****         //mod = 1.0f;
 3848              		.loc 1 495 17 view .LVU1056
 3849 10d8 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp186
 3850              	@ armwave.c:498:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 498:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3851              		.loc 1 498 9 view .LVU1057
 3852 10dc 000053E3 		cmp	r3, #0	@ prephitmp_96,
 3853              	@ armwave.c:495:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 495:armwave.c     ****         //mod = 1.0f;
 3854              		.loc 1 495 28 view .LVU1058
 3855 10e0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp182, w
 3856              	@ armwave.c:495:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 495:armwave.c     ****         //mod = 1.0f;
 3857              		.loc 1 495 37 view .LVU1059
 3858 10e4 AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp183, tmp182, tmp184
 3859              	@ armwave.c:495:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 495:armwave.c     ****         //mod = 1.0f;
 3860              		.loc 1 495 17 view .LVU1060
 3861 10e8 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp183, mod
 3862              	.LVL301:
 498:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3863              		.loc 1 498 9 is_stmt 1 view .LVU1061
 498:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3864              		.loc 1 498 9 is_stmt 0 view .LVU1062
 3865 10ec 3700000A 		beq	.L258		@,
 3866 10f0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp231, mod_val
 3867              	@ armwave.c:508:             xnoise = (rand() & 0xffff) / 6553500.0f;
 508:armwave.c     **** 
 3868              		.loc 1 508 20 view .LVU1063
 3869 10f4 44AADFED 		vldr.32	s21, .L285+20	@ tmp204,
 3870              	@ armwave.c:513:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3871              		.loc 1 513 96 view .LVU1064
 3872 10f8 44AA9FED 		vldr.32	s20, .L285+24	@ tmp215,
 3873 10fc 448ADFED 		vldr.32	s17, .L285+28	@ tmp216,
 3874              	@ armwave.c:498:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 498:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3875              		.loc 1 498 15 view .LVU1065
 3876 1100 0040A0E3 		mov	r4, #0	@ x,
 3877              	.LVL302:
 3878              	.L263:
 499:armwave.c     ****             noise *= noise;
 3879              		.loc 1 499 13 is_stmt 1 view .LVU1066
 3880              	@ armwave.c:499:             noise  = ((rand() & 0xffff) * noise_fraction);
 499:armwave.c     ****             noise *= noise;
 3881              		.loc 1 499 24 is_stmt 0 view .LVU1067
 3882 1104 FEFFFFEB 		bl	rand		@
 3883              	.LVL303:
 3884              	@ armwave.c:499:             noise  = ((rand() & 0xffff) * noise_fraction);
 499:armwave.c     ****             noise *= noise;
 3885              		.loc 1 499 31 view .LVU1068
 3886 1108 7000FFE6 		uxth	r0, r0	@ tmp187,
 3887              	@ armwave.c:499:             noise  = ((rand() & 0xffff) * noise_fraction);
 499:armwave.c     ****             noise *= noise;
 3888              		.loc 1 499 41 view .LVU1069
 3889 110c 900A07EE 		vmov	s15, r0	@ int	@ tmp187, tmp187
 3890 1110 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp189, tmp187
 3891              	@ armwave.c:499:             noise  = ((rand() & 0xffff) * noise_fraction);
 499:armwave.c     ****             noise *= noise;
 3892              		.loc 1 499 20 view .LVU1070
 3893 1114 8B7A67EE 		vmul.f32	s15, s15, s22	@ noise, tmp189, noise_fraction
 3894              	.LVL304:
 500:armwave.c     ****             noise *= noise;
 3895              		.loc 1 500 13 is_stmt 1 view .LVU1071
 3896              	@ armwave.c:500:             noise *= noise;
 500:armwave.c     ****             noise *= noise;
 3897              		.loc 1 500 19 is_stmt 0 view .LVU1072
 3898 1118 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3899              	.LVL305:
 501:armwave.c     ****             noise *= noise;
 3900              		.loc 1 501 13 is_stmt 1 view .LVU1073
 3901              	@ armwave.c:501:             noise *= noise;
 501:armwave.c     ****             noise *= noise;
 3902              		.loc 1 501 19 is_stmt 0 view .LVU1074
 3903 111c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3904              	.LVL306:
 502:armwave.c     **** 
 3905              		.loc 1 502 13 is_stmt 1 view .LVU1075
 3906              	@ armwave.c:502:             noise *= noise;
 502:armwave.c     **** 
 3907              		.loc 1 502 19 is_stmt 0 view .LVU1076
 3908 1120 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3909              	.LVL307:
 504:armwave.c     ****                 noise = -noise;
 3910              		.loc 1 504 13 is_stmt 1 view .LVU1077
 3911              	@ armwave.c:504:             if((rand() & 0xffff) > 0x7fff)
 504:armwave.c     ****                 noise = -noise;
 3912              		.loc 1 504 17 is_stmt 0 view .LVU1078
 3913 1124 FEFFFFEB 		bl	rand		@
 3914              	.LVL308:
 505:armwave.c     **** 
 3915              		.loc 1 505 17 is_stmt 1 view .LVU1079
 3916              	@ armwave.c:504:             if((rand() & 0xffff) > 0x7fff)
 504:armwave.c     ****                 noise = -noise;
 3917              		.loc 1 504 15 is_stmt 0 view .LVU1080
 3918 1128 020910E3 		tst	r0, #32768	@,
 3919              	@ armwave.c:505:                 noise = -noise;
 505:armwave.c     **** 
 3920              		.loc 1 505 23 view .LVU1081
 3921 112c 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3922              	.LVL309:
 507:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3923              		.loc 1 507 13 is_stmt 1 view .LVU1082
 508:armwave.c     **** 
 3924              		.loc 1 508 13 view .LVU1083
 3925              	@ armwave.c:508:             xnoise = (rand() & 0xffff) / 6553500.0f;
 508:armwave.c     **** 
 3926              		.loc 1 508 23 is_stmt 0 view .LVU1084
 3927 1130 FEFFFFEB 		bl	rand		@
 3928              	.LVL310:
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3929              		.loc 1 510 13 is_stmt 1 view .LVU1085
 3930              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3931              		.loc 1 510 41 is_stmt 0 view .LVU1086
 3932 1134 0F7A95ED 		vldr.32	s14, [r5, #60]	@ int	@ tmp242, g_armwave_state.wave_length
 3933              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3934              		.loc 1 510 29 view .LVU1087
 3935 1138 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3936              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3937              		.loc 1 510 41 view .LVU1088
 3938 113c 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp192, tmp242
 3939              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3940              		.loc 1 510 29 view .LVU1089
 3941 1140 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, x
 3942              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3943              		.loc 1 510 41 view .LVU1090
 3944 1144 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp194, tmp234, tmp192
 3945              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3946              		.loc 1 510 29 view .LVU1091
 3947 1148 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp197, tmp196, tmp235
 3948              	@ armwave.c:508:             xnoise = (rand() & 0xffff) / 6553500.0f;
 508:armwave.c     **** 
 3949              		.loc 1 508 30 view .LVU1092
 3950 114c 7000FFE6 		uxth	r0, r0	@ tmp200,
 3951              	.LVL311:
 3952              	@ armwave.c:508:             xnoise = (rand() & 0xffff) / 6553500.0f;
 508:armwave.c     **** 
 3953              		.loc 1 508 40 view .LVU1093
 3954 1150 100A07EE 		vmov	s14, r0	@ int	@ tmp200, tmp200
 3955 1154 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp202, tmp200
 3956              	@ armwave.c:508:             xnoise = (rand() & 0xffff) / 6553500.0f;
 508:armwave.c     **** 
 3957              		.loc 1 508 20 view .LVU1094
 3958 1158 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp202, tmp204
 3959              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3960              		.loc 1 510 73 view .LVU1095
 3961 115c A70A06EE 		vmla.f32	s0, s13, s15	@ tmp205, tmp194, tmp197
 3962              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3963              		.loc 1 510 18 view .LVU1096
 3964 1160 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp205
 3965 1164 FEFFFFEB 		bl	sin		@
 3966              	.LVL312:
 3967              		.loc 1 513 13 is_stmt 1 view .LVU1097
 3968              	@ armwave.c:507:             noise += 1.0f;
 507:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3969              		.loc 1 507 19 is_stmt 0 view .LVU1098
 3970 1168 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp234
 3971              	@ armwave.c:513:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3972              		.loc 1 513 87 view .LVU1099
 3973 116c 0020A0E3 		mov	r2, #0	@ iftmp.22_39,
 3974              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3975              		.loc 1 510 94 view .LVU1100
 3976 1170 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp211, noise
 3977              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3978              		.loc 1 510 83 view .LVU1101
 3979 1174 000B29EE 		vmul.f64	d0, d9, d0	@ tmp208, tmp231,
 3980              	.LVL313:
 3981              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3982              		.loc 1 510 94 view .LVU1102
 3983 1178 077B20EE 		vmul.f64	d7, d0, d7	@ tmp212, tmp208, tmp211
 3984              	@ armwave.c:510:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 510:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3985              		.loc 1 510 15 view .LVU1103
 3986 117c C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp212
 3987              	@ armwave.c:513:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3988              		.loc 1 513 96 view .LVU1104
 3989 1180 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp216
 3990 1184 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp215
 3991 1188 C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3992 118c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3993 1190 050000DA 		ble	.L260		@,
 3994              	@ armwave.c:513:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3995              		.loc 1 513 87 discriminator 1 view .LVU1105
 3996 1194 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp236
 3997 1198 FF20A0E3 		mov	r2, #255	@ iftmp.22_39,
 3998 119c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3999 11a0 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp220, _26
 4000 11a4 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp220, %sfp
 4001 11a8 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_39, %sfp
 4002              	.L260:
 4003              	@ armwave.c:513:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4004              		.loc 1 513 53 discriminator 12 view .LVU1106
 4005 11ac 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4006              	@ armwave.c:513:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4007              		.loc 1 513 85 discriminator 12 view .LVU1107
 4008 11b0 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4009 11b4 931623E0 		mla	r3, r3, r6, r1	@ tmp226, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 4010 11b8 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.22_39, *_31
 4011              	@ armwave.c:498:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 498:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4012              		.loc 1 498 39 discriminator 12 view .LVU1108
 4013 11bc 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_96, g_armwave_state.wave_length
 4014              	@ armwave.c:498:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 498:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4015              		.loc 1 498 54 discriminator 12 view .LVU1109
 4016 11c0 014084E2 		add	r4, r4, #1	@ x, x,
 4017              	.LVL314:
 4018              	@ armwave.c:498:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 498:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4019              		.loc 1 498 9 discriminator 12 view .LVU1110
 4020 11c4 040053E1 		cmp	r3, r4	@ prephitmp_96, x
 4021 11c8 CDFFFF8A 		bhi	.L263		@,
 4022 11cc 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_80, g_armwave_state.waves
 4023              	.LVL315:
 4024              	.L258:
 4025              	@ armwave.c:494:     for(w = 0; w < g_armwave_state.waves; w++) {
 494:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 4026              		.loc 1 494 44 discriminator 2 view .LVU1111
 4027 11d0 016086E2 		add	r6, r6, #1	@ w, w,
 4028              	.LVL316:
 4029              	@ armwave.c:494:     for(w = 0; w < g_armwave_state.waves; w++) {
 494:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 4030              		.loc 1 494 5 discriminator 2 view .LVU1112
 4031 11d4 020056E1 		cmp	r6, r2	@ w, prephitmp_80
 4032 11d8 BDFFFF3A 		bcc	.L264		@,
 4033              	.LVL317:
 4034              	.L254:
 4035              	@ armwave.c:516: }
 514:armwave.c     ****         }
 515:armwave.c     ****     }
 516:armwave.c     **** }
 4036              		.loc 1 516 1 view .LVU1113
 4037 11dc 08D08DE2 		add	sp, sp, #8	@,,
 4038              		.cfi_remember_state
 4039              		.cfi_def_cfa_offset 72
 4040              		@ sp needed	@
 4041 11e0 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 4042              		.cfi_restore 92
 4043              		.cfi_restore 93
 4044              		.cfi_restore 90
 4045              		.cfi_restore 91
 4046              		.cfi_restore 88
 4047              		.cfi_restore 89
 4048              		.cfi_restore 86
 4049              		.cfi_restore 87
 4050              		.cfi_restore 84
 4051              		.cfi_restore 85
 4052              		.cfi_restore 82
 4053              		.cfi_restore 83
 4054              		.cfi_restore 80
 4055              		.cfi_restore 81
 4056              		.cfi_def_cfa_offset 16
 4057              	.LVL318:
 4058              		.loc 1 516 1 view .LVU1114
 4059 11e4 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4060              	.LVL319:
 4061              	.L284:
 4062              		.cfi_restore_state
 4063              	.LBB72:
 4064              	.LBB68:
 448:armwave.c     ****         return;
 4065              		.loc 1 448 9 is_stmt 1 view .LVU1115
 4066 11e8 0410A0E1 		mov	r1, r4	@, _68
 4067 11ec 2C009FE5 		ldr	r0, .L285+40	@,
 4068 11f0 FEFFFFEB 		bl	printf		@
 4069              	.LVL320:
 449:armwave.c     ****     }
 4070              		.loc 1 449 9 view .LVU1116
 4071 11f4 ACFFFFEA 		b	.L256		@
 4072              	.L286:
 4073              		.align	2
 4074              	.L285:
 4075 11f8 0000803C 		.word	1015021568
 4076 11fc 0000003F 		.word	1056964608
 4077 1200 0000803F 		.word	1065353216
 4078 1204 C3F5C840 		.word	1086911939
 4079 1208 00007F43 		.word	1132396544
 4080 120c 38FFC74A 		.word	1254620984
 4081 1210 0000FE42 		.word	1123942400
 4082 1214 00000043 		.word	1124073472
 4083 1218 00000000 		.word	g_armwave_state
 4084 121c CC010000 		.word	.LC18
 4085 1220 FC010000 		.word	.LC19
 4086              	.LBE68:
 4087              	.LBE72:
 4088              		.cfi_endproc
 4089              	.LFE76:
 4091              		.align	2
 4092              		.global	armwave_test_create_square
 4093              		.syntax unified
 4094              		.arm
 4095              		.fpu vfp
 4097              	armwave_test_create_square:
 4098              	.LVL321:
 4099              	.LFB77:
 517:armwave.c     **** 
 518:armwave.c     **** /*
 519:armwave.c     ****  * Make a test square waveform.
 520:armwave.c     ****  *
 521:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 522:armwave.c     ****  */
 523:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 524:armwave.c     **** {
 4100              		.loc 1 524 1 view -0
 4101              		.cfi_startproc
 4102              		@ args = 0, pretend = 0, frame = 8
 4103              		@ frame_needed = 0, uses_anonymous_args = 0
 525:armwave.c     ****     uint8_t v;
 4104              		.loc 1 525 5 view .LVU1118
 526:armwave.c     ****     float noise, xnoise;
 4105              		.loc 1 526 5 view .LVU1119
 527:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 4106              		.loc 1 527 5 view .LVU1120
 528:armwave.c     ****     int w, x;
 4107              		.loc 1 528 5 view .LVU1121
 529:armwave.c     **** 
 530:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 4108              		.loc 1 530 5 view .LVU1122
 4109              	@ armwave.c:524: {
 524:armwave.c     ****     uint8_t v;
 4110              		.loc 1 524 1 is_stmt 0 view .LVU1123
 4111 1224 70402DE9 		push	{r4, r5, r6, lr}	@
 4112              		.cfi_def_cfa_offset 16
 4113              		.cfi_offset 4, -16
 4114              		.cfi_offset 5, -12
 4115              		.cfi_offset 6, -8
 4116              		.cfi_offset 14, -4
 4117 1228 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 4118              		.cfi_def_cfa_offset 56
 4119              		.cfi_offset 80, -56
 4120              		.cfi_offset 81, -52
 4121              		.cfi_offset 82, -48
 4122              		.cfi_offset 83, -44
 4123              		.cfi_offset 84, -40
 4124              		.cfi_offset 85, -36
 4125              		.cfi_offset 86, -32
 4126              		.cfi_offset 87, -28
 4127              		.cfi_offset 88, -24
 4128              		.cfi_offset 89, -20
 4129              	@ armwave.c:530:     for(w = 0; w < g_armwave_state.waves; w++) {
 4130              		.loc 1 530 35 view .LVU1124
 4131 122c 54519FE5 		ldr	r5, .L315+32	@ tmp179,
 4132 1230 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_33, g_armwave_state.waves
 4133              	@ armwave.c:524: {
 524:armwave.c     ****     uint8_t v;
 4134              		.loc 1 524 1 view .LVU1125
 4135 1234 08D04DE2 		sub	sp, sp, #8	@,,
 4136              		.cfi_def_cfa_offset 64
 4137              	@ armwave.c:530:     for(w = 0; w < g_armwave_state.waves; w++) {
 4138              		.loc 1 530 5 view .LVU1126
 4139 1238 000052E3 		cmp	r2, #0	@ prephitmp_33,
 4140 123c 4600000A 		beq	.L287		@,
 4141 1240 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 4142              	@ armwave.c:527:     float level = 0.8f, new_level = 0.8f;
 527:armwave.c     ****     int w, x;
 4143              		.loc 1 527 11 view .LVU1127
 4144 1244 47CA9FED 		vldr.32	s24, .L315	@ level,
 4145              	@ armwave.c:542:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 531:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 532:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 533:armwave.c     ****             noise *= noise;
 534:armwave.c     ****             noise *= noise;
 535:armwave.c     ****             noise *= noise;
 536:armwave.c     **** 
 537:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 538:armwave.c     ****                 noise = -noise;
 539:armwave.c     **** 
 540:armwave.c     ****             //noise += 1.0f;
 541:armwave.c     **** 
 542:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 4146              		.loc 1 542 49 view .LVU1128
 4147 1248 47AA9FED 		vldr.32	s20, .L315+4	@ tmp186,
 4148              	@ armwave.c:547:                 new_level = 0.2f;
 543:armwave.c     ****                 new_level = 0.2f;
 544:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 545:armwave.c     ****                 new_level = 0.8f;
 546:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 547:armwave.c     ****                 new_level = 0.2f;
 4149              		.loc 1 547 27 view .LVU1129
 4150 124c 47AADFED 		vldr.32	s21, .L315+8	@ new_level,
 4151              	@ armwave.c:544:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 544:armwave.c     ****                 new_level = 0.8f;
 4152              		.loc 1 544 56 view .LVU1130
 4153 1250 47BADFED 		vldr.32	s23, .L315+12	@ tmp188,
 4154              	@ armwave.c:546:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 546:armwave.c     ****                 new_level = 0.2f;
 4155              		.loc 1 546 56 view .LVU1131
 4156 1254 478ADFED 		vldr.32	s17, .L315+16	@ tmp189,
 4157 1258 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_70, g_armwave_state.wave_length
 4158              	@ armwave.c:530:     for(w = 0; w < g_armwave_state.waves; w++) {
 530:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4159              		.loc 1 530 11 view .LVU1132
 4160 125c 0060A0E3 		mov	r6, #0	@ w,
 4161              	.LVL322:
 4162              	.L289:
 4163              	@ armwave.c:531:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4164              		.loc 1 531 9 view .LVU1133
 4165 1260 000053E3 		cmp	r3, #0	@ prephitmp_70,
 4166 1264 3900000A 		beq	.L296		@,
 4167              	@ armwave.c:545:                 new_level = 0.8f;
 545:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4168              		.loc 1 545 27 view .LVU1134
 4169 1268 3EBA9FED 		vldr.32	s22, .L315	@ new_level,
 4170              	@ armwave.c:552:             level = ((level * 3) + new_level) * 0.25f;
 548:armwave.c     ****             } else {
 549:armwave.c     ****                 new_level = 0.8f;
 550:armwave.c     ****             }
 551:armwave.c     **** 
 552:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 4171              		.loc 1 552 29 view .LVU1135
 4172 126c 429A9FED 		vldr.32	s18, .L315+20	@ tmp161,
 4173              	@ armwave.c:531:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4174              		.loc 1 531 15 view .LVU1136
 4175 1270 0040A0E3 		mov	r4, #0	@ x,
 4176              	.LVL323:
 4177              	.L295:
 532:armwave.c     ****             noise *= noise;
 4178              		.loc 1 532 13 is_stmt 1 view .LVU1137
 4179              	@ armwave.c:532:             noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****             noise *= noise;
 4180              		.loc 1 532 24 is_stmt 0 view .LVU1138
 4181 1274 FEFFFFEB 		bl	rand		@
 4182              	.LVL324:
 4183              	@ armwave.c:532:             noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****             noise *= noise;
 4184              		.loc 1 532 31 view .LVU1139
 4185 1278 7000FFE6 		uxth	r0, r0	@ tmp148,
 4186              	@ armwave.c:532:             noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****             noise *= noise;
 4187              		.loc 1 532 41 view .LVU1140
 4188 127c 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 4189 1280 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 4190              	@ armwave.c:532:             noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****             noise *= noise;
 4191              		.loc 1 532 20 view .LVU1141
 4192 1284 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 4193              	.LVL325:
 533:armwave.c     ****             noise *= noise;
 4194              		.loc 1 533 13 is_stmt 1 view .LVU1142
 4195              	@ armwave.c:533:             noise *= noise;
 533:armwave.c     ****             noise *= noise;
 4196              		.loc 1 533 19 is_stmt 0 view .LVU1143
 4197 1288 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4198              	.LVL326:
 534:armwave.c     ****             noise *= noise;
 4199              		.loc 1 534 13 is_stmt 1 view .LVU1144
 4200              	@ armwave.c:534:             noise *= noise;
 534:armwave.c     ****             noise *= noise;
 4201              		.loc 1 534 19 is_stmt 0 view .LVU1145
 4202 128c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4203              	.LVL327:
 535:armwave.c     **** 
 4204              		.loc 1 535 13 is_stmt 1 view .LVU1146
 4205              	@ armwave.c:535:             noise *= noise;
 535:armwave.c     **** 
 4206              		.loc 1 535 19 is_stmt 0 view .LVU1147
 4207 1290 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 4208              	.LVL328:
 537:armwave.c     ****                 noise = -noise;
 4209              		.loc 1 537 13 is_stmt 1 view .LVU1148
 4210              	@ armwave.c:537:             if((rand() & 0xff) > 0x7f)
 537:armwave.c     ****                 noise = -noise;
 4211              		.loc 1 537 17 is_stmt 0 view .LVU1149
 4212 1294 FEFFFFEB 		bl	rand		@
 4213              	.LVL329:
 4214              	@ armwave.c:542:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 542:armwave.c     ****                 new_level = 0.2f;
 4215              		.loc 1 542 18 view .LVU1150
 4216 1298 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4217 129c E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 4218              	@ armwave.c:542:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 542:armwave.c     ****                 new_level = 0.2f;
 4219              		.loc 1 542 49 view .LVU1151
 4220 12a0 0F7AD5ED 		vldr.32	s15, [r5, #60]	@ int	@ tmp195, g_armwave_state.wave_length
 4221 12a4 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp195
 4222 12a8 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp186
 4223              	@ armwave.c:542:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 542:armwave.c     ****                 new_level = 0.2f;
 4224              		.loc 1 542 15 view .LVU1152
 4225 12ac E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 4226              	@ armwave.c:537:             if((rand() & 0xff) > 0x7f)
 537:armwave.c     ****                 noise = -noise;
 4227              		.loc 1 537 15 view .LVU1153
 4228 12b0 800010E3 		tst	r0, #128	@,
 538:armwave.c     **** 
 4229              		.loc 1 538 17 is_stmt 1 view .LVU1154
 4230              	@ armwave.c:538:                 noise = -noise;
 538:armwave.c     **** 
 4231              		.loc 1 538 23 is_stmt 0 view .LVU1155
 4232 12b4 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 4233              	.LVL330:
 542:armwave.c     ****                 new_level = 0.2f;
 4234              		.loc 1 542 13 is_stmt 1 view .LVU1156
 4235              	@ armwave.c:542:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 542:armwave.c     ****                 new_level = 0.2f;
 4236              		.loc 1 542 15 is_stmt 0 view .LVU1157
 4237 12b8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4238              	@ armwave.c:547:                 new_level = 0.2f;
 547:armwave.c     ****             } else {
 4239              		.loc 1 547 27 view .LVU1158
 4240 12bc 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 4241              	@ armwave.c:542:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 542:armwave.c     ****                 new_level = 0.2f;
 4242              		.loc 1 542 15 view .LVU1159
 4243 12c0 090000CA 		bgt	.L291		@,
 544:armwave.c     ****                 new_level = 0.8f;
 4244              		.loc 1 544 20 is_stmt 1 view .LVU1160
 4245              	@ armwave.c:544:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 544:armwave.c     ****                 new_level = 0.8f;
 4246              		.loc 1 544 56 is_stmt 0 view .LVU1161
 4247 12c4 AB6A67EE 		vmul.f32	s13, s15, s23	@ tmp156, _8, tmp188
 4248              	@ armwave.c:544:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 544:armwave.c     ****                 new_level = 0.8f;
 4249              		.loc 1 544 22 view .LVU1162
 4250 12c8 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 4251 12cc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4252              	@ armwave.c:545:                 new_level = 0.8f;
 545:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4253              		.loc 1 545 27 view .LVU1163
 4254 12d0 4B7AF0CE 		vmovgt.f32	s15, s22	@ new_level, new_level
 4255              	@ armwave.c:544:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 544:armwave.c     ****                 new_level = 0.8f;
 4256              		.loc 1 544 22 view .LVU1164
 4257 12d4 040000CA 		bgt	.L291		@,
 546:armwave.c     ****                 new_level = 0.2f;
 4258              		.loc 1 546 20 is_stmt 1 view .LVU1165
 4259              	@ armwave.c:546:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 546:armwave.c     ****                 new_level = 0.2f;
 4260              		.loc 1 546 56 is_stmt 0 view .LVU1166
 4261 12d8 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp189
 4262              	@ armwave.c:545:                 new_level = 0.8f;
 545:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4263              		.loc 1 545 27 view .LVU1167
 4264 12dc E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 4265 12e0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4266 12e4 4B7AF0DE 		vmovle.f32	s15, s22	@, new_level, new_level
 4267 12e8 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 4268              	.L291:
 4269              	.LVL331:
 4270              		.loc 1 552 13 is_stmt 1 view .LVU1168
 4271              	@ armwave.c:552:             level = ((level * 3) + new_level) * 0.25f;
 4272              		.loc 1 552 34 is_stmt 0 view .LVU1169
 4273 12ec 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 4274              	.LVL332:
 4275              	@ armwave.c:552:             level = ((level * 3) + new_level) * 0.25f;
 4276              		.loc 1 552 19 view .LVU1170
 4277 12f0 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp189
 4278              	.LVL333:
 553:armwave.c     **** 
 554:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4279              		.loc 1 554 13 is_stmt 1 view .LVU1171
 4280              	@ armwave.c:554:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4281              		.loc 1 554 27 is_stmt 0 view .LVU1172
 4282 12f4 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 4283 12f8 C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 4284 12fc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4285              	@ armwave.c:554:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4286              		.loc 1 554 17 view .LVU1173
 4287 1300 0020A0D3 		movle	r2, #0	@ iftmp.29_32,
 4288              	@ armwave.c:554:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4289              		.loc 1 554 27 view .LVU1174
 4290 1304 080000DA 		ble	.L292		@,
 4291              	@ armwave.c:554:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4292              		.loc 1 554 17 discriminator 1 view .LVU1175
 4293 1308 1C7A9FED 		vldr.32	s14, .L315+24	@ tmp164,
 4294 130c C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 4295 1310 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4296              	@ armwave.c:554:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4297              		.loc 1 554 60 discriminator 1 view .LVU1176
 4298 1314 1A7A9F4D 		vldrmi.32	s14, .L315+28	@ tmp166,
 4299              	@ armwave.c:554:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4300              		.loc 1 554 17 discriminator 1 view .LVU1177
 4301 1318 FF20A053 		movpl	r2, #255	@ iftmp.29_32,
 4302              	@ armwave.c:554:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4303              		.loc 1 554 60 discriminator 1 view .LVU1178
 4304 131c 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 4305              	@ armwave.c:554:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4306              		.loc 1 554 17 discriminator 1 view .LVU1179
 4307 1320 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 4308 1324 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 4309 1328 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.29_32, %sfp
 4310              	.L292:
 4311              	.LVL334:
 555:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 4312              		.loc 1 555 13 is_stmt 1 discriminator 12 view .LVU1180
 4313              	@ armwave.c:555:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4314              		.loc 1 555 53 is_stmt 0 discriminator 12 view .LVU1181
 4315 132c 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4316              	@ armwave.c:555:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4317              		.loc 1 555 85 discriminator 12 view .LVU1182
 4318 1330 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4319 1334 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 4320 1338 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.29_32, *_21
 4321              	@ armwave.c:531:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4322              		.loc 1 531 39 discriminator 12 view .LVU1183
 4323 133c 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_70, g_armwave_state.wave_length
 4324              	@ armwave.c:531:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4325              		.loc 1 531 54 discriminator 12 view .LVU1184
 4326 1340 014084E2 		add	r4, r4, #1	@ x, x,
 4327              	.LVL335:
 4328              	@ armwave.c:531:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4329              		.loc 1 531 9 discriminator 12 view .LVU1185
 4330 1344 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 4331 1348 C9FFFF8A 		bhi	.L295		@,
 4332 134c 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_33, g_armwave_state.waves
 4333              	.LVL336:
 4334              	.L296:
 4335              	@ armwave.c:530:     for(w = 0; w < g_armwave_state.waves; w++) {
 530:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4336              		.loc 1 530 44 discriminator 2 view .LVU1186
 4337 1350 016086E2 		add	r6, r6, #1	@ w, w,
 4338              	.LVL337:
 4339              	@ armwave.c:530:     for(w = 0; w < g_armwave_state.waves; w++) {
 530:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4340              		.loc 1 530 5 discriminator 2 view .LVU1187
 4341 1354 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 4342 1358 C0FFFF3A 		bcc	.L289		@,
 4343              	.LVL338:
 4344              	.L287:
 4345              	@ armwave.c:558: }
 556:armwave.c     ****         }
 557:armwave.c     ****     }
 558:armwave.c     **** }
 4346              		.loc 1 558 1 view .LVU1188
 4347 135c 08D08DE2 		add	sp, sp, #8	@,,
 4348              		.cfi_def_cfa_offset 56
 4349              		@ sp needed	@
 4350 1360 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 4351              		.cfi_restore 88
 4352              		.cfi_restore 89
 4353              		.cfi_restore 86
 4354              		.cfi_restore 87
 4355              		.cfi_restore 84
 4356              		.cfi_restore 85
 4357              		.cfi_restore 82
 4358              		.cfi_restore 83
 4359              		.cfi_restore 80
 4360              		.cfi_restore 81
 4361              		.cfi_def_cfa_offset 16
 4362 1364 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4363              	.L316:
 4364              		.align	2
 4365              	.L315:
 4366 1368 CDCC4C3F 		.word	1061997773
 4367 136c 0000403F 		.word	1061158912
 4368 1370 CDCC4C3E 		.word	1045220557
 4369 1374 0000003F 		.word	1056964608
 4370 1378 0000803E 		.word	1048576000
 4371 137c 00004040 		.word	1077936128
 4372 1380 0000803F 		.word	1065353216
 4373 1384 00007F43 		.word	1132396544
 4374 1388 00000000 		.word	g_armwave_state
 4375              		.cfi_endproc
 4376              	.LFE77:
 4378              		.align	2
 4379              		.global	armwave_cleanup
 4380              		.syntax unified
 4381              		.arm
 4382              		.fpu vfp
 4384              	armwave_cleanup:
 4385              	.LFB78:
 559:armwave.c     **** 
 560:armwave.c     **** /*
 561:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 562:armwave.c     ****  */
 563:armwave.c     **** void armwave_cleanup()
 564:armwave.c     **** {
 4386              		.loc 1 564 1 is_stmt 1 view -0
 4387              		.cfi_startproc
 4388              		@ args = 0, pretend = 0, frame = 0
 4389              		@ frame_needed = 0, uses_anonymous_args = 0
 565:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4390              		.loc 1 565 5 view .LVU1190
 4391              	@ armwave.c:564: {
 564:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4392              		.loc 1 564 1 is_stmt 0 view .LVU1191
 4393 138c 10402DE9 		push	{r4, lr}	@
 4394              		.cfi_def_cfa_offset 8
 4395              		.cfi_offset 4, -8
 4396              		.cfi_offset 14, -4
 4397              	@ armwave.c:565:     free(g_armwave_state.out_pixbuf);
 4398              		.loc 1 565 25 view .LVU1192
 4399 1390 34409FE5 		ldr	r4, .L319	@ tmp114,
 4400              	@ armwave.c:565:     free(g_armwave_state.out_pixbuf);
 4401              		.loc 1 565 5 view .LVU1193
 4402 1394 580094E5 		ldr	r0, [r4, #88]	@, g_armwave_state.out_pixbuf
 4403 1398 FEFFFFEB 		bl	free		@
 4404              	.LVL339:
 566:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4405              		.loc 1 566 5 is_stmt 1 view .LVU1194
 4406 139c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4407 13a0 FEFFFFEB 		bl	free		@
 4408              	.LVL340:
 567:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4409              		.loc 1 567 5 view .LVU1195
 4410 13a4 740094E5 		ldr	r0, [r4, #116]	@, g_armwave_state.xcoord_to_xpixel
 4411 13a8 FEFFFFEB 		bl	free		@
 4412              	.LVL341:
 568:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4413              		.loc 1 568 5 view .LVU1196
 4414 13ac 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4415 13b0 FEFFFFEB 		bl	free		@
 4416              	.LVL342:
 569:armwave.c     **** 
 570:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4417              		.loc 1 570 5 view .LVU1197
 4418              	@ armwave.c:570:     g_armwave_state.out_pixbuf = NULL;
 4419              		.loc 1 570 32 is_stmt 0 view .LVU1198
 4420 13b4 0030A0E3 		mov	r3, #0	@ tmp123,
 4421 13b8 583084E5 		str	r3, [r4, #88]	@ tmp123, g_armwave_state.out_pixbuf
 571:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4422              		.loc 1 571 5 is_stmt 1 view .LVU1199
 4423              	@ armwave.c:571:     g_armwave_state.ch1_buffer = NULL;
 4424              		.loc 1 571 32 is_stmt 0 view .LVU1200
 4425 13bc 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 572:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4426              		.loc 1 572 5 is_stmt 1 view .LVU1201
 4427              	@ armwave.c:572:     g_armwave_state.xcoord_to_xpixel = NULL;
 4428              		.loc 1 572 38 is_stmt 0 view .LVU1202
 4429 13c0 743084E5 		str	r3, [r4, #116]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 573:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4430              		.loc 1 573 5 is_stmt 1 view .LVU1203
 4431              	@ armwave.c:573:     g_armwave_state.test_wave_buffer = NULL;
 4432              		.loc 1 573 38 is_stmt 0 view .LVU1204
 4433 13c4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4434              	@ armwave.c:574: }
 574:armwave.c     **** }
 4435              		.loc 1 574 1 view .LVU1205
 4436 13c8 1080BDE8 		pop	{r4, pc}	@
 4437              	.L320:
 4438              		.align	2
 4439              	.L319:
 4440 13cc 00000000 		.word	g_armwave_state
 4441              		.cfi_endproc
 4442              	.LFE78:
 4444              		.comm	gamma_table,256,4
 4445              		.comm	g_armwave_state,120,4
 4446              		.section	.rodata
 4447              		.align	2
 4448              		.set	.LANCHOR0,. + 0
 4451              	__PRETTY_FUNCTION__.17017:
 4452 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4452      6176655F 
 4452      66696C6C 
 4452      5F706978 
 4452      6275665F 
 4455              	__PRETTY_FUNCTION__.17048:
 4456 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4456      6176655F 
 4456      66696C6C 
 4456      5F706978 
 4456      6275665F 
 4457 0033 00       		.space	1
 4460              	__PRETTY_FUNCTION__.17070:
 4461 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4461      6176655F 
 4461      73657475 
 4461      705F7265 
 4461      6E646572 
 4462 0049 000000   		.space	3
 4465              	__PRETTY_FUNCTION__.17077:
 4466 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4466      6176655F 
 4466      7365745F 
 4466      77617665 
 4466      5F706F69 
 4467 0065 000000   		.space	3
 4470              	__PRETTY_FUNCTION__.17083:
 4471 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4471      6176655F 
 4471      7365745F 
 4471      77617665 
 4471      5F706F69 
 4472              		.section	.rodata.str1.4,"aMS",%progbits,1
 4473              		.align	2
 4474              	.LC0:
 4475 0000 76302E30 		.ascii	"v0.0.1\000"
 4475      2E3100
 4476 0007 00       		.space	1
 4477              	.LC1:
 4478 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4478      61766520 
 4478      76657273 
 4478      696F6E3A 
 4478      2025730A 
 4479 001d 000000   		.space	3
 4480              	.LC2:
 4481 0020 61726D77 		.ascii	"armwave.c\000"
 4481      6176652E 
 4481      6300
 4482 002a 0000     		.space	2
 4483              	.LC3:
 4484 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4484      62756666 
 4484      65722021 
 4484      3D204E55 
 4484      4C4C00
 4485 003f 00       		.space	1
 4486              	.LC4:
 4487 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4487      20653D25 
 4487      6420773D 
 4487      25642077 
 4487      733D2564 
 4488              	.LC5:
 4489 006c 73746172 		.ascii	"start_point < end_point\000"
 4489      745F706F 
 4489      696E7420 
 4489      3C20656E 
 4489      645F706F 
 4490              	.LC6:
 4491 0084 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 4491      65745F68 
 4491      65696768 
 4491      74203D3D 
 4491      20323536 
 4492 00b7 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4492      68656967 
 4492      6874203D 
 4492      3D203130 
 4492      3234207C 
 4493 00e3 00       		.space	1
 4494              	.LC7:
 4495 00e4 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4495      7566665F 
 4495      73697A65 
 4495      3D25640A 
 4495      00
 4496 00f5 000000   		.space	3
 4497              	.LC8:
 4498 00f8 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4498      6D776176 
 4498      655F7374 
 4498      6174652E 
 4498      6368315F 
 4499 011b 00       		.space	1
 4500              	.LC9:
 4501 011c 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4501      6D776176 
 4501      655F7374 
 4501      6174652E 
 4501      78636F6F 
 4502 0145 000000   		.space	3
 4503              	.LC10:
 4504 0148 77617665 		.ascii	"wave_buffer != NULL\000"
 4504      5F627566 
 4504      66657220 
 4504      213D204E 
 4504      554C4C00 
 4505              	.LC11:
 4506 015c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4506      5F627566 
 4506      6665725F 
 4506      70747220 
 4506      213D2030 
 4507 0171 000000   		.space	3
 4508              	.LC12:
 4509 0174 776200   		.ascii	"wb\000"
 4510 0177 00       		.space	1
 4511              	.LC13:
 4512 0178 50330A00 		.ascii	"P3\012\000"
 4513              	.LC14:
 4514 017c 25642025 		.ascii	"%d %d\012\000"
 4514      640A00
 4515 0183 00       		.space	1
 4516              	.LC15:
 4517 0184 3235350A 		.ascii	"255\012\000"
 4517      00
 4518 0189 000000   		.space	3
 4519              	.LC16:
 4520 018c 25336420 		.ascii	"%3d %3d %3d\012\000"
 4520      25336420 
 4520      2533640A 
 4520      00
 4521 0199 000000   		.space	3
 4522              	.LC17:
 4523 019c 61726D77 		.ascii	"armwave_test_generate: slice %d (y=%d, h=%d)\012\000"
 4523      6176655F 
 4523      74657374 
 4523      5F67656E 
 4523      65726174 
 4524 01ca 0000     		.space	2
 4525              	.LC18:
 4526 01cc 61726D77 		.ascii	"armwave_test_buffer_alloc: length=%d max=%d\012\000"
 4526      6176655F 
 4526      74657374 
 4526      5F627566 
 4526      6665725F 
 4527 01f9 000000   		.space	3
 4528              	.LC19:
 4529 01fc 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 4529      6176655F 
 4529      74657374 
 4529      5F627566 
 4529      6665725F 
 4530 022f 77617665 		.ascii	"wave buffer (%d bytes)\012\000"
 4530      20627566 
 4530      66657220 
 4530      28256420 
 4530      62797465 
 4531 0247 00       		.space	1
 4532              	.LC20:
 4533 0248 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: start\000"
 4533      6176655F 
 4533      66696C6C 
 4533      5F706978 
 4533      6275665F 
 4534 0271 000000   		.space	3
 4535              	.LC21:
 4536 0274 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4536      6176655F 
 4536      66696C6C 
 4536      5F706978 
 4536      6275665F 
 4537 02a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4537      20666169 
 4537      6C65642C 
 4537      20726574 
 4537      75726E69 
 4538 02c6 0000     		.space	2
 4539              	.LC22:
 4540 02c8 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: buffer fill done"
 4540      6176655F 
 4540      66696C6C 
 4540      5F706978 
 4540      6275665F 
 4541 02fb 00       		.ascii	"\000"
 4542              	.LC23:
 4543 02fc 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: done\000"
 4543      6176655F 
 4543      66696C6C 
 4543      5F706978 
 4543      6275665F 
 4544              		.text
 4545              	.Letext0:
 4546              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4547              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4548              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4549              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4550              		.file 7 "/usr/include/stdio.h"
 4551              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4552              		.file 9 "/usr/include/errno.h"
 4553              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4554              		.file 11 "/usr/include/unistd.h"
 4555              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4556              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4557              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4558              		.file 15 "/usr/include/math.h"
 4559              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4560              		.file 17 "/usr/include/time.h"
 4561              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4562              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4563              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4564              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4565              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4566              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4567              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4568              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4569              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4570              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4571              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4572              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4573              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4574              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4575              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4576              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4577              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4578              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4579              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4580              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4581              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4582              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4583              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4584              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4585              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4586              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4587              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4588              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4589              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4590              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4591              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4592              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4593              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4594              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4595              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4596              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4597              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4598              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4599              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4600              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4601              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4602              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4603              		.file 60 "/usr/local/include/python3.8/context.h"
 4604              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4605              		.file 62 "/usr/local/include/python3.8/code.h"
 4606              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4607              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4608              		.file 65 "/usr/local/include/python3.8/import.h"
 4609              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4610              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4611              		.file 68 "armwave.h"
 4612              		.file 69 "/usr/include/stdlib.h"
 4613              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4614              		.file 71 "/usr/include/assert.h"
 4615              		.file 72 "<built-in>"
 4616              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
