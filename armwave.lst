   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C0C19FE5 		ldr	ip, .L27	@ tmp318,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 130 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp216, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp218, tmp216,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 130 view .LVU41
 279 00c8 950305E0 		mul	r5, r5, r3	@ _7, g_armwave_state.bitdepth_height, tmp218
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 610000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 5F00000A 		beq	.L11		@,
 289 00dc 043040E2 		sub	r3, r0, #4	@ tmp317, slice_y,
 290 00e0 0C308DE5 		str	r3, [sp, #12]	@ tmp317, %sfp
 291              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 292              		.loc 1 79 11 view .LVU45
 293 00e4 0030A0E3 		mov	r3, #0	@ w,
 294 00e8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 295              	.LVL8:
 296              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 297              		.loc 1 80 9 is_stmt 1 view .LVU46
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 298              		.loc 1 84 9 view .LVU47
 299              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 64 is_stmt 0 view .LVU48
 301 00ec 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 302 00f0 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 303 00f4 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp317, %sfp
 304 00f8 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 305 00fc 93E223E0 		mla	r3, r3, r2, lr	@ tmp228, g_armwave_state.wave_stride, w, tmp317
 306              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 84 16 view .LVU49
 308 0100 0000A0E3 		mov	r0, #0	@ yy,
 309 0104 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 310 0108 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 311              	.LVL9:
 312              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 313              		.loc 1 87 13 is_stmt 1 view .LVU50
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 314              		.loc 1 101 17 view .LVU51
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 315              		.loc 1 106 17 view .LVU52
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 316              		.loc 1 101 17 view .LVU53
 317              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 318              		.loc 1 101 17 view .LVU55
 319              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 320              		.loc 1 101 17 view .LVU57
 321              		.loc 1 106 17 view .LVU58
 322              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 323              		.loc 1 87 18 is_stmt 0 view .LVU59
 324 010c 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 325              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 326              		.loc 1 102 34 view .LVU60
 327 0110 019080E2 		add	r9, r0, #1	@ tmp259, yy,
 328 0114 028080E2 		add	r8, r0, #2	@ tmp281, yy,
 329              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 330              		.loc 1 87 18 view .LVU61
 331 0118 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _185, offset: 0B]
 332              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 102 34 view .LVU62
 334 011c 037080E2 		add	r7, r0, #3	@ tmp301, yy,
 335              	.LVL10:
 336              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 337              		.loc 1 94 20 view .LVU63
 338 0120 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 339              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 340              		.loc 1 87 18 view .LVU64
 341 0124 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 342              	.LVL11:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 343              		.loc 1 89 13 is_stmt 1 view .LVU65
  91:armwave.c     ****                 
 344              		.loc 1 91 17 view .LVU66
  94:armwave.c     ****                     continue;
 345              		.loc 1 94 17 view .LVU67
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 is_stmt 0 view .LVU68
 348 0128 0120A003 		moveq	r2, #1	@ tmp231,
 349 012c 0020A013 		movne	r2, #0	@ tmp231,
 350              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 351              		.loc 1 94 19 view .LVU69
 352 0130 FF005AE3 		cmp	r10, #255	@ scale_value,
 353 0134 01208203 		orreq	r2, r2, #1	@,, tmp236, tmp231
 354 0138 000052E3 		cmp	r2, #0	@ tmp236,
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU70
 357 013c 05B08AE0 		add	fp, r10, r5	@ tmp244, scale_value, _7
 358              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 359              		.loc 1 107 22 view .LVU71
 360 0140 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 361 0144 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 362              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 363              		.loc 1 94 19 view .LVU72
 364 0148 3900001A 		bne	.L20		@,
 365              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 366              		.loc 1 102 34 view .LVU73
 367 014c 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 369              		.loc 1 106 47 view .LVU74
 370 0150 40609CE5 		ldr	r6, [ip, #64]	@ tmp330, g_armwave_state.bitdepth_height
 371              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 372              		.loc 1 94 20 view .LVU75
 373 0154 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 374              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 375              		.loc 1 102 34 view .LVU76
 376 0158 920002E0 		mul	r2, r2, r0	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 377              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 378              		.loc 1 106 47 view .LVU77
 379 015c 05A084E0 		add	r10, r4, r5	@ tmp266, scale_value, _7
 380              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 381              		.loc 1 102 74 view .LVU78
 382 0160 2228A0E1 		lsr	r2, r2, #16	@ tmp240, tmp238,
 383              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 384              		.loc 1 106 47 view .LVU79
 385 0164 96B222E0 		mla	r2, r6, r2, fp	@ tmp245, tmp330, tmp240, tmp244
 386              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 387              		.loc 1 94 20 view .LVU80
 388 0168 01B0A003 		moveq	fp, #1	@ tmp252,
 389 016c 00B0A013 		movne	fp, #0	@ tmp252,
 390              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 391              		.loc 1 94 19 view .LVU81
 392 0170 FF0054E3 		cmp	r4, #255	@ scale_value,
 393 0174 0B40A011 		movne	r4, fp	@, tmp257, tmp252
 394 0178 01408B03 		orreq	r4, fp, #1	@,, tmp257, tmp252
 395              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 396              		.loc 1 106 47 view .LVU82
 397 017c 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_79, *_79
 398              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 399              		.loc 1 94 19 view .LVU83
 400 0180 000054E3 		cmp	r4, #0	@ tmp257,
 401              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 402              		.loc 1 106 47 view .LVU84
 403 0184 01B08BE2 		add	fp, fp, #1	@ tmp248, *_79,
 404 0188 02B0C1E7 		strb	fp, [r1, r2]	@ tmp248, *_79
 405              	.LVL12:
 406              		.loc 1 107 17 is_stmt 1 view .LVU85
  91:armwave.c     ****                 
 407              		.loc 1 91 17 view .LVU86
  94:armwave.c     ****                     continue;
 408              		.loc 1 94 17 view .LVU87
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 is_stmt 0 view .LVU88
 411 018c 2800001A 		bne	.L20		@,
 412              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 413              		.loc 1 102 34 view .LVU89
 414 0190 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 99 view .LVU90
 417 0194 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 418              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 419              		.loc 1 94 20 view .LVU91
 420 0198 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 421              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 422              		.loc 1 102 34 view .LVU92
 423 019c 920909E0 		mul	r9, r2, r9	@ tmp260, g_armwave_state.cmp_x_bitdepth_scale, tmp259
 424              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 425              		.loc 1 94 20 view .LVU93
 426 01a0 0120A003 		moveq	r2, #1	@ tmp274,
 427 01a4 0020A013 		movne	r2, #0	@ tmp274,
 428              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 429              		.loc 1 102 74 view .LVU94
 430 01a8 2998A0E1 		lsr	r9, r9, #16	@ tmp262, tmp260,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU95
 433 01ac 05408EE0 		add	r4, lr, r5	@ tmp288, scale_value, _7
 434 01b0 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp267, g_armwave_state.bitdepth_height, tmp262, tmp266
 435              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 19 view .LVU96
 437 01b4 FF005EE3 		cmp	lr, #255	@ scale_value,
 438 01b8 02E0A011 		movne	lr, r2	@, tmp279, tmp274
 439 01bc 01E08203 		orreq	lr, r2, #1	@,, tmp279, tmp274
 440 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 441              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 442              		.loc 1 106 47 view .LVU97
 443 01c4 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_110, *_110
 444 01c8 012082E2 		add	r2, r2, #1	@ tmp270, *_110,
 445 01cc 0A20C1E7 		strb	r2, [r1, r10]	@ tmp270, *_110
 446              		.loc 1 107 17 is_stmt 1 view .LVU98
 447              	.LVL13:
  91:armwave.c     ****                 
 448              		.loc 1 91 17 view .LVU99
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 17 view .LVU100
 450              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 451              		.loc 1 94 19 is_stmt 0 view .LVU101
 452 01d0 1700001A 		bne	.L20		@,
 453              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 454              		.loc 1 102 34 view .LVU102
 455 01d4 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 456              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 20 view .LVU103
 458 01d8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 459              	.LVL14:
 460              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 461              		.loc 1 106 47 view .LVU104
 462 01dc 032085E0 		add	r2, r5, r3	@ tmp309, _7, word
 463              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 464              		.loc 1 102 34 view .LVU105
 465 01e0 9E0808E0 		mul	r8, lr, r8	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 99 view .LVU106
 468 01e4 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 74 view .LVU107
 471 01e8 2888A0E1 		lsr	r8, r8, #16	@ tmp284, tmp282,
 472              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 473              		.loc 1 106 47 view .LVU108
 474 01ec 9E4828E0 		mla	r8, lr, r8, r4	@ tmp289, g_armwave_state.bitdepth_height, tmp284, tmp288
 475              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 476              		.loc 1 94 20 view .LVU109
 477 01f0 01E0A003 		moveq	lr, #1	@ tmp295,
 478 01f4 00E0A013 		movne	lr, #0	@ tmp295,
 479              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 480              		.loc 1 94 19 view .LVU110
 481 01f8 FF0053E3 		cmp	r3, #255	@ word,
 482 01fc 01E08E03 		orreq	lr, lr, #1	@,, tmp300, tmp295
 483              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 484              		.loc 1 106 47 view .LVU111
 485 0200 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_141, *_141
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 19 view .LVU112
 488 0204 00005EE3 		cmp	lr, #0	@ tmp300,
 489              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 490              		.loc 1 106 47 view .LVU113
 491 0208 013083E2 		add	r3, r3, #1	@ tmp292, *_141,
 492 020c 0830C1E7 		strb	r3, [r1, r8]	@ tmp292, *_141
 493              		.loc 1 107 17 is_stmt 1 view .LVU114
 494              	.LVL15:
  91:armwave.c     ****                 
 495              		.loc 1 91 17 view .LVU115
  94:armwave.c     ****                     continue;
 496              		.loc 1 94 17 view .LVU116
 497              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 498              		.loc 1 94 19 is_stmt 0 view .LVU117
 499 0210 0700001A 		bne	.L20		@,
 500              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 501              		.loc 1 102 34 view .LVU118
 502 0214 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 99 view .LVU119
 505 0218 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 34 view .LVU120
 508 021c 930707E0 		mul	r7, r3, r7	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 74 view .LVU121
 511 0220 2778A0E1 		lsr	r7, r7, #16	@ tmp305, tmp303,
 512              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 513              		.loc 1 106 47 view .LVU122
 514 0224 9E2727E0 		mla	r7, lr, r7, r2	@ tmp310, g_armwave_state.bitdepth_height, tmp305, tmp309
 515 0228 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_172, *_172
 516 022c 013083E2 		add	r3, r3, #1	@ tmp313, *_172,
 517 0230 0730C1E7 		strb	r3, [r1, r7]	@ tmp313, *_172
 518              		.loc 1 107 17 is_stmt 1 view .LVU123
 519              	.LVL16:
 520              	.L20:
 521              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 522              		.loc 1 84 9 is_stmt 0 view .LVU124
 523 0234 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 37 view .LVU125
 526 0238 040080E2 		add	r0, r0, #4	@ yy, yy,
 527              	.LVL17:
 528              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 529              		.loc 1 84 9 view .LVU126
 530 023c 000053E1 		cmp	r3, r0	@ height, yy
 531 0240 B1FFFF8A 		bhi	.L17		@,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 44 view .LVU127
 534 0244 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 5 view .LVU128
 537 0248 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU129
 540 024c 012082E2 		add	r2, r2, #1	@ w, w,
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 5 view .LVU130
 543 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 44 view .LVU131
 546 0254 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 547              	.LVL18:
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 view .LVU132
 550 0258 A3FFFFBA 		blt	.L18		@,
 551              	.LVL19:
 552              	.L11:
 553              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 554              		.loc 1 111 1 view .LVU133
 555 025c 14D08DE2 		add	sp, sp, #20	@,,
 556              		.cfi_def_cfa_offset 36
 557              		@ sp needed	@
 558 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 559              	.LVL20:
 560              	.L28:
 561              		.loc 1 111 1 view .LVU134
 562              		.align	2
 563              	.L27:
 564 0264 00000000 		.word	g_armwave_state
 565              		.cfi_endproc
 566              	.LFE59:
 568              		.align	2
 569              		.global	armwave_fill_pixbuf_scaled
 570              		.syntax unified
 571              		.arm
 572              		.fpu vfp
 574              	armwave_fill_pixbuf_scaled:
 575              	.LVL21:
 576              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 577              		.loc 1 173 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 581              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 582              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 583              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 584              		.loc 1 179 5 view .LVU139
 585              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 586              		.loc 1 173 1 is_stmt 0 view .LVU140
 587 0268 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 588              		.cfi_def_cfa_offset 36
 589              		.cfi_offset 4, -36
 590              		.cfi_offset 5, -32
 591              		.cfi_offset 6, -28
 592              		.cfi_offset 7, -24
 593              		.cfi_offset 8, -20
 594              		.cfi_offset 9, -16
 595              		.cfi_offset 10, -12
 596              		.cfi_offset 11, -8
 597              		.cfi_offset 14, -4
 598              	@ armwave.c:183:     assert(out_buffer != NULL);
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 181:armwave.c     ****     uint32_t offset;
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 599              		.loc 1 183 5 view .LVU141
 600 026c 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 601              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 602              		.loc 1 179 15 view .LVU142
 603 0270 5C519FE5 		ldr	r5, .L51	@ tmp221,
 604              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 605              		.loc 1 173 1 view .LVU143
 606 0274 0CD04DE2 		sub	sp, sp, #12	@,,
 607              		.cfi_def_cfa_offset 48
 608              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 609              		.loc 1 179 15 view .LVU144
 610 0278 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 611              	.LVL22:
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 612              		.loc 1 180 5 is_stmt 1 view .LVU145
 181:armwave.c     **** 
 613              		.loc 1 181 5 view .LVU146
 614              		.loc 1 183 5 view .LVU147
 615 027c 4F00000A 		beq	.L48		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this
 186:armwave.c     ****     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 616              		.loc 1 186 5 view .LVU148
 617              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 618              		.loc 1 186 59 is_stmt 0 view .LVU149
 619 0280 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 620 0284 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 621              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 622              		.loc 1 186 5 view .LVU150
 623 0288 0110A0E3 		mov	r1, #1	@,
 624              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 625              		.loc 1 186 59 view .LVU151
 626 028c 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 627              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 628              		.loc 1 186 5 view .LVU152
 629 0290 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 630 0294 FEFFFFEB 		bl	memset		@
 631              	.LVL23:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 632              		.loc 1 188 5 is_stmt 1 view .LVU153
 633              	@ armwave.c:188:     npix = g_armwave_state.target_width * 256; 
 634              		.loc 1 188 10 is_stmt 0 view .LVU154
 635 0298 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 636 029c 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 637              	.LVL24:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 638              		.loc 1 191 5 is_stmt 1 view .LVU155
 639              		.loc 1 191 5 is_stmt 0 view .LVU156
 640 02a0 000058E3 		cmp	r8, #0	@ npix,
 641 02a4 0C0000DA 		ble	.L29		@,
 642              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 193:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 194:armwave.c     ****         // most normal waveforms.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 4; w++) {
 199:armwave.c     ****                 value = wave_word & 0xff;
 200:armwave.c     ****                 wave_word >>= 8;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 643              		.loc 1 204 52 view .LVU157
 644 02a8 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 645              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 646              		.loc 1 203 52 view .LVU158
 647 02ac FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 648              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // Do line scaling as necessary.
 215:armwave.c     ****                     /*
 216:armwave.c     ****                     nsub = n + w;
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 221:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                     */
 225:armwave.c     **** 
 226:armwave.c     ****                     nsub = n + w;
 227:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 649              		.loc 1 227 57 view .LVU159
 650 02b0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 651              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 652              		.loc 1 204 52 view .LVU160
 653 02b4 00308DE5 		str	r3, [sp]	@ _15, %sfp
 654              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 655              		.loc 1 205 52 view .LVU161
 656 02b8 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 657              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 658              		.loc 1 191 11 view .LVU162
 659 02bc 0010A0E3 		mov	r1, #0	@ n,
 660              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 661              		.loc 1 205 52 view .LVU163
 662 02c0 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 663              	.LVL25:
 664              	.L36:
 195:armwave.c     **** 
 665              		.loc 1 195 9 is_stmt 1 view .LVU164
 666              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 667              		.loc 1 195 19 is_stmt 0 view .LVU165
 668 02c4 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 669              	.LVL26:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 670              		.loc 1 197 9 is_stmt 1 view .LVU166
 671              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 672              		.loc 1 197 11 is_stmt 0 view .LVU167
 673 02c8 000053E3 		cmp	r3, #0	@ wave_word,
 674 02cc 0400001A 		bne	.L49		@,
 675              	.L32:
 676              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 677              		.loc 1 191 28 view .LVU168
 678 02d0 041081E2 		add	r1, r1, #4	@ n, n,
 679              	.LVL27:
 680              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 681              		.loc 1 191 5 view .LVU169
 682 02d4 010058E1 		cmp	r8, r1	@ npix, n
 683 02d8 F9FFFFCA 		bgt	.L36		@,
 684              	.LVL28:
 685              	.L29:
 686              	@ armwave.c:239: }
 228:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 229:armwave.c     ****                     xx = (nsub >> 8);
 230:armwave.c     **** 
 231:armwave.c     ****                     for(y = yy; y < ye; y++) {
 232:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 233:armwave.c     ****                         *(out_buffer_base + offset) = word;
 234:armwave.c     ****                     }
 235:armwave.c     ****                 }
 236:armwave.c     ****             }
 237:armwave.c     ****         }
 238:armwave.c     ****     }
 239:armwave.c     **** }
 687              		.loc 1 239 1 view .LVU170
 688 02dc 0CD08DE2 		add	sp, sp, #12	@,,
 689              		.cfi_remember_state
 690              		.cfi_def_cfa_offset 36
 691              		@ sp needed	@
 692 02e0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 693              	.LVL29:
 694              	.L49:
 695              		.cfi_restore_state
 696              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 202 19 view .LVU171
 698 02e4 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 699              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 700              		.loc 1 198 19 view .LVU172
 701 02e8 0070A0E3 		mov	r7, #0	@ w,
 702              	.LVL30:
 199:armwave.c     ****                 wave_word >>= 8;
 703              		.loc 1 199 17 is_stmt 1 view .LVU173
 200:armwave.c     **** 
 704              		.loc 1 200 17 view .LVU174
 705              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 706              		.loc 1 200 27 is_stmt 0 view .LVU175
 707 02ec 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 708              	.LVL31:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 709              		.loc 1 202 17 is_stmt 1 view .LVU176
 710              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 711              		.loc 1 202 19 is_stmt 0 view .LVU177
 712 02f0 0500001A 		bne	.L50		@,
 713              	.L33:
 714              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 715              		.loc 1 198 32 view .LVU178
 716 02f4 017087E2 		add	r7, r7, #1	@ w, w,
 717              	.LVL32:
 718              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 719              		.loc 1 198 13 view .LVU179
 720 02f8 040057E3 		cmp	r7, #4	@ w,
 721 02fc F3FFFF0A 		beq	.L32		@,
 199:armwave.c     ****                 wave_word >>= 8;
 722              		.loc 1 199 17 is_stmt 1 view .LVU180
 723              	.LVL33:
 200:armwave.c     **** 
 724              		.loc 1 200 17 view .LVU181
 725              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 726              		.loc 1 202 19 is_stmt 0 view .LVU182
 727 0300 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 728              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 729              		.loc 1 200 27 view .LVU183
 730 0304 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 731              	.LVL34:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 732              		.loc 1 202 17 is_stmt 1 view .LVU184
 733              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 734              		.loc 1 202 19 is_stmt 0 view .LVU185
 735 0308 F9FFFF0A 		beq	.L33		@,
 736              	.L50:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 737              		.loc 1 203 21 is_stmt 1 view .LVU186
 738              	.LVL35:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 739              		.loc 1 204 21 view .LVU187
 205:armwave.c     **** 
 740              		.loc 1 205 21 view .LVU188
 207:armwave.c     ****                     g = MIN(gg, 255);
 741              		.loc 1 207 21 view .LVU189
 208:armwave.c     ****                     b = MIN(bb, 255);
 742              		.loc 1 208 21 view .LVU190
 209:armwave.c     **** 
 743              		.loc 1 209 21 view .LVU191
 212:armwave.c     **** 
 744              		.loc 1 212 21 view .LVU192
 745              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 746              		.loc 1 205 55 is_stmt 0 view .LVU193
 747 030c 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 748 0310 07E081E0 		add	lr, r1, r7	@ _126, n, w
 749 0314 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 750              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 751              		.loc 1 227 32 view .LVU194
 752 0318 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 753              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 754              		.loc 1 228 41 view .LVU195
 755 031c 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 756              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 757              		.loc 1 227 40 view .LVU196
 758 0320 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 759              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 760              		.loc 1 228 41 view .LVU197
 761 0324 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 762              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 763              		.loc 1 204 55 view .LVU198
 764 0328 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 765              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 766              		.loc 1 205 24 view .LVU199
 767 032c 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 768              	.LVL36:
 769              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 770              		.loc 1 227 40 view .LVU200
 771 0330 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 772              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 773              		.loc 1 228 46 view .LVU201
 774 0334 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 775              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 776              		.loc 1 204 55 view .LVU202
 777 0338 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 778              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 779              		.loc 1 203 55 view .LVU203
 780 033c 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 781              	.LVL37:
 782              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 783              		.loc 1 209 25 view .LVU204
 784 0340 FF005AE3 		cmp	r10, #255	@ bb,
 785              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 786              		.loc 1 204 24 view .LVU205
 787 0344 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 788              	.LVL38:
 789              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 790              		.loc 1 227 40 view .LVU206
 791 0348 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 792              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 793              		.loc 1 228 46 view .LVU207
 794 034c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 795              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 796              		.loc 1 203 24 view .LVU208
 797 0350 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 798              	.LVL39:
 799              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 800              		.loc 1 209 25 view .LVU209
 801 0354 FFA0A0A3 		movge	r10, #255	@ bb,
 802              	.LVL40:
 803              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 804              		.loc 1 208 25 view .LVU210
 805 0358 FF005CE3 		cmp	ip, #255	@ gg,
 806 035c FFC0A0A3 		movge	ip, #255	@ gg,
 807              	.LVL41:
 808              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 809              		.loc 1 207 25 view .LVU211
 810 0360 FF0050E3 		cmp	r0, #255	@ rr,
 811              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 812              		.loc 1 212 56 view .LVU212
 813 0364 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 814              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 815              		.loc 1 227 24 view .LVU213
 816 0368 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 817              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 207 25 view .LVU214
 819 036c FF00A0A3 		movge	r0, #255	@ rr,
 820              	.LVL42:
 821              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 822              		.loc 1 212 44 view .LVU215
 823 0370 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 824 0374 FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 825              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 826              		.loc 1 212 56 view .LVU216
 827 0378 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 828              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 829              		.loc 1 212 51 view .LVU217
 830 037c 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 831              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 832              		.loc 1 212 62 view .LVU218
 833 0380 7000EFE6 		uxtb	r0, r0	@ rr, rr
 834 0384 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 835              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 836              		.loc 1 227 24 view .LVU219
 837 0388 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 838              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 839              		.loc 1 228 24 view .LVU220
 840 038c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 841              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 842              		.loc 1 212 26 view .LVU221
 843 0390 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 844              	.LVL43:
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 845              		.loc 1 226 21 is_stmt 1 view .LVU222
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 846              		.loc 1 227 21 view .LVU223
 228:armwave.c     ****                     xx = (nsub >> 8);
 847              		.loc 1 228 21 view .LVU224
 848              	@ armwave.c:229:                     xx = (nsub >> 8);
 229:armwave.c     **** 
 849              		.loc 1 229 32 is_stmt 0 view .LVU225
 850 0394 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 851              	.LVL44:
 852              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 853              		.loc 1 228 24 view .LVU226
 854 0398 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 855              	.LVL45:
 229:armwave.c     **** 
 856              		.loc 1 229 21 is_stmt 1 view .LVU227
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 857              		.loc 1 231 21 view .LVU228
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 858              		.loc 1 231 21 is_stmt 0 view .LVU229
 859 039c 090052E1 		cmp	r2, r9	@ yy, ye
 860 03a0 D3FFFF2A 		bcs	.L33		@,
 861              	.LVL46:
 862              	.L34:
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 863              		.loc 1 232 25 is_stmt 1 discriminator 3 view .LVU230
 233:armwave.c     ****                     }
 864              		.loc 1 233 25 discriminator 3 view .LVU231
 865              	@ armwave.c:232:                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 866              		.loc 1 232 43 is_stmt 0 discriminator 3 view .LVU232
 867 03a4 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 868              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 869              		.loc 1 233 43 discriminator 3 view .LVU233
 870 03a8 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 871              	.LVL47:
 872              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 231 42 discriminator 3 view .LVU234
 874 03ac 012082E2 		add	r2, r2, #1	@ yy, yy,
 875              	.LVL48:
 876              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 877              		.loc 1 231 21 discriminator 3 view .LVU235
 878 03b0 020059E1 		cmp	r9, r2	@ ye, yy
 879              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 880              		.loc 1 233 53 discriminator 3 view .LVU236
 881 03b4 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 882              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 883              		.loc 1 231 21 discriminator 3 view .LVU237
 884 03b8 F9FFFF1A 		bne	.L34		@,
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 885              		.loc 1 231 21 discriminator 3 view .LVU238
 886 03bc CCFFFFEA 		b	.L33		@
 887              	.LVL49:
 888              	.L48:
 183:armwave.c     **** 
 889              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU239
 890 03c0 10309FE5 		ldr	r3, .L51+4	@,
 891 03c4 B720A0E3 		mov	r2, #183	@,
 892 03c8 0C109FE5 		ldr	r1, .L51+8	@,
 893 03cc 0C009FE5 		ldr	r0, .L51+12	@,
 894              	.LVL50:
 183:armwave.c     **** 
 895              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU240
 896 03d0 FEFFFFEB 		bl	__assert_fail		@
 897              	.LVL51:
 898              	.L52:
 899              		.align	2
 900              	.L51:
 901 03d4 00000000 		.word	g_armwave_state
 902 03d8 00000000 		.word	.LANCHOR0
 903 03dc 20000000 		.word	.LC2
 904 03e0 2C000000 		.word	.LC3
 905              		.cfi_endproc
 906              	.LFE60:
 908              		.global	__aeabi_idiv
 909              		.align	2
 910              		.global	armwave_generate
 911              		.syntax unified
 912              		.arm
 913              		.fpu vfp
 915              	armwave_generate:
 916              	.LFB61:
 240:armwave.c     **** 
 241:armwave.c     **** /*
 242:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 243:armwave.c     ****  */
 244:armwave.c     **** void armwave_generate()
 245:armwave.c     **** {
 917              		.loc 1 245 1 is_stmt 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 16
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 246:armwave.c     ****     uint32_t yy;
 921              		.loc 1 246 5 view .LVU242
 247:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 922              		.loc 1 247 5 view .LVU243
 923              	.LVL52:
 248:armwave.c     **** 
 249:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 924              		.loc 1 249 5 view .LVU244
 925              	@ armwave.c:245: {
 245:armwave.c     ****     uint32_t yy;
 926              		.loc 1 245 1 is_stmt 0 view .LVU245
 927 03e4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 928              		.cfi_def_cfa_offset 36
 929              		.cfi_offset 4, -36
 930              		.cfi_offset 5, -32
 931              		.cfi_offset 6, -28
 932              		.cfi_offset 7, -24
 933              		.cfi_offset 8, -20
 934              		.cfi_offset 9, -16
 935              		.cfi_offset 10, -12
 936              		.cfi_offset 11, -8
 937              		.cfi_offset 14, -4
 938              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 939              		.loc 1 249 5 view .LVU246
 940 03e8 0010A0E3 		mov	r1, #0	@,
 941              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 942              		.loc 1 249 58 view .LVU247
 943 03ec 10829FE5 		ldr	r8, .L72	@ tmp340,
 944              	@ armwave.c:245: {
 245:armwave.c     ****     uint32_t yy;
 945              		.loc 1 245 1 view .LVU248
 946 03f0 14D04DE2 		sub	sp, sp, #20	@,,
 947              		.cfi_def_cfa_offset 56
 948              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 949              		.loc 1 249 5 view .LVU249
 950 03f4 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 951 03f8 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 952 03fc FEFFFFEB 		bl	memset		@
 953              	.LVL53:
 250:armwave.c     **** 
 251:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 954              		.loc 1 251 5 is_stmt 1 view .LVU250
 955              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 956              		.loc 1 251 68 is_stmt 0 view .LVU251
 957 0400 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 958              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 959              		.loc 1 251 38 view .LVU252
 960 0404 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 961              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 962              		.loc 1 251 51 view .LVU253
 963 0408 0310A0E1 		mov	r1, r3	@, _34
 964 040c 0500A0E1 		mov	r0, r5	@, prephitmp_217
 965              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 966              		.loc 1 251 68 view .LVU254
 967 0410 00308DE5 		str	r3, [sp]	@ _34, %sfp
 968              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 969              		.loc 1 251 51 view .LVU255
 970 0414 FEFFFFEB 		bl	__aeabi_idiv		@
 971              	.LVL54:
 972              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 973              		.loc 1 251 5 view .LVU256
 974 0418 000050E3 		cmp	r0, #0	@,
 975 041c 7600000A 		beq	.L53		@,
 976 0420 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 977              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 978              		.loc 1 251 12 view .LVU257
 979 0424 0030A0E3 		mov	r3, #0	@ yy,
 980 0428 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 981              	.LVL55:
 982              	.L62:
 252:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 253:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 254:armwave.c     **** 
 255:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 983              		.loc 1 255 9 is_stmt 1 discriminator 3 view .LVU258
 984 042c D020CDE1 		ldrd	r2, [sp]	@, %sfp
 985              	.LBB10:
 986              	.LBB11:
 987              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 988              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU259
 989 0430 40C098E5 		ldr	ip, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 990              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 991              		.loc 1 79 5 discriminator 3 view .LVU260
 992 0434 000054E3 		cmp	r4, #0	@ prephitmp_227,
 993              	.LBE11:
 994              	.LBE10:
 995              	@ armwave.c:255:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 996              		.loc 1 255 9 discriminator 3 view .LVU261
 997 0438 930202E0 		mul	r2, r3, r2	@ _5, yy, _34
 998              	.LVL56:
 999              	.LBB13:
 1000              	.LBI10:
  62:armwave.c     **** {
 1001              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU262
 1002              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1003              		.loc 1 64 5 discriminator 3 view .LVU263
  65:armwave.c     ****     uint8_t *wave_base;
 1004              		.loc 1 65 5 discriminator 3 view .LVU264
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1005              		.loc 1 66 5 discriminator 3 view .LVU265
  67:armwave.c     ****     uint8_t *write_buffer;
 1006              		.loc 1 67 5 discriminator 3 view .LVU266
  68:armwave.c     **** 
 1007              		.loc 1 68 5 discriminator 3 view .LVU267
  71:armwave.c     **** 
 1008              		.loc 1 71 5 discriminator 3 view .LVU268
 1009              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1010              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU269
 1011 043c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1012              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1013              		.loc 1 71 40 discriminator 3 view .LVU270
 1014 0440 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1015              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1016              		.loc 1 71 65 discriminator 3 view .LVU271
 1017 0444 930203E0 		mul	r3, r3, r2	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, _5
 1018              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1019              		.loc 1 71 105 discriminator 3 view .LVU272
 1020 0448 2338A0E1 		lsr	r3, r3, #16	@ tmp240, tmp238,
 1021              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1022              		.loc 1 71 130 discriminator 3 view .LVU273
 1023 044c 9C030CE0 		mul	ip, ip, r3	@ _22, g_armwave_state.bitdepth_height, tmp240
 1024              	.LVL57:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1025              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU274
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1026              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU275
 1027 0450 610000DA 		ble	.L55		@,
 1028              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1029              		.loc 1 79 11 view .LVU276
 1030 0454 0070A0E3 		mov	r7, #0	@ w,
 1031 0458 043042E2 		sub	r3, r2, #4	@ _31, _5,
 1032 045c 08308DE5 		str	r3, [sp, #8]	@ _31, %sfp
 1033              	.LVL58:
 1034              	.L61:
  80:armwave.c     **** 
 1035              		.loc 1 80 9 is_stmt 1 view .LVU277
 1036              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1037              		.loc 1 84 9 is_stmt 0 view .LVU278
 1038 0460 00209DE5 		ldr	r2, [sp]	@ _34, %sfp
 1039              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1040              		.loc 1 80 64 view .LVU279
 1041 0464 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1042              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1043              		.loc 1 84 9 view .LVU280
 1044 0468 000052E3 		cmp	r2, #0	@ _34,
 1045              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1046              		.loc 1 80 36 view .LVU281
 1047 046c 142098E5 		ldr	r2, [r8, #20]	@ _23, g_armwave_state.wave_buffer
 1048              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1049              		.loc 1 80 64 view .LVU282
 1050 0470 930703E0 		mul	r3, r3, r7	@ _27, g_armwave_state.wave_stride, w
 1051              	.LVL59:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1052              		.loc 1 84 9 is_stmt 1 view .LVU283
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1053              		.loc 1 84 9 is_stmt 0 view .LVU284
 1054 0474 5200000A 		beq	.L56		@,
 1055 0478 08009DE5 		ldr	r0, [sp, #8]	@ _31, %sfp
 1056 047c 003083E0 		add	r3, r3, r0	@ tmp246, _27, _31
 1057              	.LVL60:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1058              		.loc 1 84 9 view .LVU285
 1059 0480 036082E0 		add	r6, r2, r3	@ ivtmp.66, _23, tmp246
 1060              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1061              		.loc 1 84 16 view .LVU286
 1062 0484 0000A0E3 		mov	r0, #0	@ yy,
 1063              	.LVL61:
 1064              	.L60:
  87:armwave.c     **** 
 1065              		.loc 1 87 13 is_stmt 1 view .LVU287
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1066              		.loc 1 101 17 view .LVU288
 106:armwave.c     ****                 word >>= 8;
 1067              		.loc 1 106 17 view .LVU289
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1068              		.loc 1 101 17 view .LVU290
 106:armwave.c     ****                 word >>= 8;
 1069              		.loc 1 106 17 view .LVU291
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1070              		.loc 1 101 17 view .LVU292
 106:armwave.c     ****                 word >>= 8;
 1071              		.loc 1 106 17 view .LVU293
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1072              		.loc 1 101 17 view .LVU294
 106:armwave.c     ****                 word >>= 8;
 1073              		.loc 1 106 17 view .LVU295
 1074              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1075              		.loc 1 87 18 is_stmt 0 view .LVU296
 1076 0488 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _260, offset: 0B]
 1077              	.LVL62:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1078              		.loc 1 89 13 is_stmt 1 view .LVU297
  91:armwave.c     ****                 
 1079              		.loc 1 91 17 view .LVU298
  94:armwave.c     ****                     continue;
 1080              		.loc 1 94 17 view .LVU299
 1081              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1082              		.loc 1 102 34 is_stmt 0 view .LVU300
 1083 048c 01A080E2 		add	r10, r0, #1	@ tmp276, yy,
 1084              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1085              		.loc 1 94 20 view .LVU301
 1086 0490 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1087 0494 0120A003 		moveq	r2, #1	@ tmp248,
 1088 0498 0020A013 		movne	r2, #0	@ tmp248,
 1089              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1090              		.loc 1 94 19 view .LVU302
 1091 049c FF0059E3 		cmp	r9, #255	@ scale_value,
 1092 04a0 01208203 		orreq	r2, r2, #1	@,, tmp253, tmp248
 1093              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1094              		.loc 1 107 22 view .LVU303
 1095 04a4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1096              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1097              		.loc 1 94 19 view .LVU304
 1098 04a8 000052E3 		cmp	r2, #0	@ tmp253,
 1099              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1100              		.loc 1 102 34 view .LVU305
 1101 04ac 025080E2 		add	r5, r0, #2	@ tmp298, yy,
 1102              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1103              		.loc 1 106 47 view .LVU306
 1104 04b0 0CB089E0 		add	fp, r9, ip	@ tmp261, scale_value, _22
 1105              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1106              		.loc 1 107 22 view .LVU307
 1107 04b4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1108 04b8 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1109              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1110              		.loc 1 94 19 view .LVU308
 1111 04bc 3B00001A 		bne	.L64		@,
 1112              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1113              		.loc 1 102 34 view .LVU309
 1114 04c0 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU310
 1117 04c4 40E098E5 		ldr	lr, [r8, #64]	@ tmp360, g_armwave_state.bitdepth_height
 1118              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1119              		.loc 1 94 20 view .LVU311
 1120 04c8 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1121              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1122              		.loc 1 102 34 view .LVU312
 1123 04cc 920002E0 		mul	r2, r2, r0	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, yy
 1124              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1125              		.loc 1 106 47 view .LVU313
 1126 04d0 0C9084E0 		add	r9, r4, ip	@ tmp283, scale_value, _22
 1127              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1128              		.loc 1 102 74 view .LVU314
 1129 04d4 2228A0E1 		lsr	r2, r2, #16	@ tmp257, tmp255,
 1130              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1131              		.loc 1 106 47 view .LVU315
 1132 04d8 9EB222E0 		mla	r2, lr, r2, fp	@ tmp262, tmp360, tmp257, tmp261
 1133              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1134              		.loc 1 94 20 view .LVU316
 1135 04dc 01B0A003 		moveq	fp, #1	@ tmp269,
 1136 04e0 00B0A013 		movne	fp, #0	@ tmp269,
 1137              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1138              		.loc 1 94 19 view .LVU317
 1139 04e4 FF0054E3 		cmp	r4, #255	@ scale_value,
 1140 04e8 0B40A011 		movne	r4, fp	@, tmp274, tmp269
 1141 04ec 01408B03 		orreq	r4, fp, #1	@,, tmp274, tmp269
 1142              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1143              		.loc 1 106 47 view .LVU318
 1144 04f0 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_90, *_90
 1145              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1146              		.loc 1 94 19 view .LVU319
 1147 04f4 000054E3 		cmp	r4, #0	@ tmp274,
 1148              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1149              		.loc 1 106 47 view .LVU320
 1150 04f8 01B08BE2 		add	fp, fp, #1	@ tmp265, *_90,
 1151 04fc 02B0C1E7 		strb	fp, [r1, r2]	@ tmp265, *_90
 1152              	.LVL63:
 107:armwave.c     ****             }
 1153              		.loc 1 107 17 is_stmt 1 view .LVU321
  91:armwave.c     ****                 
 1154              		.loc 1 91 17 view .LVU322
  94:armwave.c     ****                     continue;
 1155              		.loc 1 94 17 view .LVU323
 1156              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1157              		.loc 1 94 19 is_stmt 0 view .LVU324
 1158 0500 2A00001A 		bne	.L64		@,
 1159              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1160              		.loc 1 102 34 view .LVU325
 1161 0504 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1162              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1163              		.loc 1 102 99 view .LVU326
 1164 0508 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1165              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1166              		.loc 1 94 20 view .LVU327
 1167 050c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1168              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1169              		.loc 1 102 34 view .LVU328
 1170 0510 920A0AE0 		mul	r10, r2, r10	@ tmp277, g_armwave_state.cmp_x_bitdepth_scale, tmp276
 1171              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1172              		.loc 1 94 20 view .LVU329
 1173 0514 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1174 0518 0120A003 		moveq	r2, #1	@ tmp291,
 1175              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1176              		.loc 1 102 74 view .LVU330
 1177 051c 2AA8A0E1 		lsr	r10, r10, #16	@ tmp279, tmp277,
 1178              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1179              		.loc 1 94 20 view .LVU331
 1180 0520 0020A013 		movne	r2, #0	@ tmp291,
 1181              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1182              		.loc 1 106 47 view .LVU332
 1183 0524 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp284, g_armwave_state.bitdepth_height, tmp279, tmp283
 1184 0528 0C408EE0 		add	r4, lr, ip	@ tmp305, scale_value, _22
 1185              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1186              		.loc 1 94 19 view .LVU333
 1187 052c FF005EE3 		cmp	lr, #255	@ scale_value,
 1188 0530 02E0A011 		movne	lr, r2	@, tmp296, tmp291
 1189 0534 01E08203 		orreq	lr, r2, #1	@,, tmp296, tmp291
 1190              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1191              		.loc 1 106 47 view .LVU334
 1192 0538 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_121, *_121
 1193              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1194              		.loc 1 94 19 view .LVU335
 1195 053c 00005EE3 		cmp	lr, #0	@ tmp296,
 1196              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1197              		.loc 1 106 47 view .LVU336
 1198 0540 012082E2 		add	r2, r2, #1	@ tmp287, *_121,
 1199 0544 0920C1E7 		strb	r2, [r1, r9]	@ tmp287, *_121
 107:armwave.c     ****             }
 1200              		.loc 1 107 17 is_stmt 1 view .LVU337
 1201              	.LVL64:
  91:armwave.c     ****                 
 1202              		.loc 1 91 17 view .LVU338
  94:armwave.c     ****                     continue;
 1203              		.loc 1 94 17 view .LVU339
 1204              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1205              		.loc 1 94 19 is_stmt 0 view .LVU340
 1206 0548 1800001A 		bne	.L64		@,
 1207              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1208              		.loc 1 102 34 view .LVU341
 1209 054c 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1210              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1211              		.loc 1 94 20 view .LVU342
 1212 0550 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1213              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1214              		.loc 1 106 47 view .LVU343
 1215 0554 03208CE0 		add	r2, ip, r3	@ tmp326, _22, word
 1216              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1217              		.loc 1 102 34 view .LVU344
 1218 0558 9E0505E0 		mul	r5, lr, r5	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 1219              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1220              		.loc 1 102 99 view .LVU345
 1221 055c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1222              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1223              		.loc 1 102 74 view .LVU346
 1224 0560 2558A0E1 		lsr	r5, r5, #16	@ tmp301, tmp299,
 1225              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1226              		.loc 1 106 47 view .LVU347
 1227 0564 9E4525E0 		mla	r5, lr, r5, r4	@ tmp306, g_armwave_state.bitdepth_height, tmp301, tmp305
 1228              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1229              		.loc 1 94 20 view .LVU348
 1230 0568 01E0A003 		moveq	lr, #1	@ tmp312,
 1231 056c 00E0A013 		movne	lr, #0	@ tmp312,
 1232              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1233              		.loc 1 94 19 view .LVU349
 1234 0570 FF0053E3 		cmp	r3, #255	@ word,
 1235 0574 01E08E03 		orreq	lr, lr, #1	@,, tmp317, tmp312
 1236              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1237              		.loc 1 106 47 view .LVU350
 1238 0578 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_152, *_152
 1239              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1240              		.loc 1 94 19 view .LVU351
 1241 057c 00005EE3 		cmp	lr, #0	@ tmp317,
 1242              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1243              		.loc 1 106 47 view .LVU352
 1244 0580 013083E2 		add	r3, r3, #1	@ tmp309, *_152,
 1245 0584 0530C1E7 		strb	r3, [r1, r5]	@ tmp309, *_152
 107:armwave.c     ****             }
 1246              		.loc 1 107 17 is_stmt 1 view .LVU353
 1247              	.LVL65:
  91:armwave.c     ****                 
 1248              		.loc 1 91 17 view .LVU354
  94:armwave.c     ****                     continue;
 1249              		.loc 1 94 17 view .LVU355
 1250              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1251              		.loc 1 94 19 is_stmt 0 view .LVU356
 1252 0588 0800001A 		bne	.L64		@,
 1253              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1254              		.loc 1 102 34 view .LVU357
 1255 058c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1256 0590 034080E2 		add	r4, r0, #3	@ tmp319, yy,
 1257              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1258              		.loc 1 102 99 view .LVU358
 1259 0594 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1260              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1261              		.loc 1 102 34 view .LVU359
 1262 0598 930403E0 		mul	r3, r3, r4	@ tmp320, g_armwave_state.cmp_x_bitdepth_scale, tmp319
 1263              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1264              		.loc 1 102 74 view .LVU360
 1265 059c 2338A0E1 		lsr	r3, r3, #16	@ tmp322, tmp320,
 1266              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1267              		.loc 1 106 47 view .LVU361
 1268 05a0 9E2323E0 		mla	r3, lr, r3, r2	@ tmp327, g_armwave_state.bitdepth_height, tmp322, tmp326
 1269 05a4 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_183, *_183
 1270 05a8 012082E2 		add	r2, r2, #1	@ tmp330, *_183,
 1271 05ac 0320C1E7 		strb	r2, [r1, r3]	@ tmp330, *_183
 107:armwave.c     ****             }
 1272              		.loc 1 107 17 is_stmt 1 view .LVU362
 1273              	.LVL66:
 1274              	.L64:
 1275              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1276              		.loc 1 84 9 is_stmt 0 view .LVU363
 1277 05b0 00309DE5 		ldr	r3, [sp]	@ _34, %sfp
 1278              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1279              		.loc 1 84 37 view .LVU364
 1280 05b4 040080E2 		add	r0, r0, #4	@ yy, yy,
 1281              	.LVL67:
 1282              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1283              		.loc 1 84 9 view .LVU365
 1284 05b8 000053E1 		cmp	r3, r0	@ _34, yy
 1285 05bc B1FFFF8A 		bhi	.L60		@,
 1286 05c0 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 1287              	.LVL68:
 1288              	.L56:
 1289              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1290              		.loc 1 79 44 view .LVU366
 1291 05c4 017087E2 		add	r7, r7, #1	@ w, w,
 1292              	.LVL69:
 1293              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1294              		.loc 1 79 5 view .LVU367
 1295 05c8 040057E1 		cmp	r7, r4	@ w, prephitmp_227
 1296 05cc A3FFFFBA 		blt	.L61		@,
 1297 05d0 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 1298 05d4 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 1299 05d8 00308DE5 		str	r3, [sp]	@ _34, %sfp
 1300              	.LVL70:
 1301              	.L55:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1302              		.loc 1 79 5 view .LVU368
 1303              	.LBE12:
 1304              	.LBE13:
 256:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1305              		.loc 1 256 9 is_stmt 1 discriminator 3 view .LVU369
 257:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1306              		.loc 1 257 9 discriminator 3 view .LVU370
 1307              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1308              		.loc 1 251 51 is_stmt 0 discriminator 3 view .LVU371
 1309 05dc 00109DE5 		ldr	r1, [sp]	@, %sfp
 1310              	.LVL71:
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1311              		.loc 1 251 51 discriminator 3 view .LVU372
 1312 05e0 0500A0E1 		mov	r0, r5	@, prephitmp_217
 1313 05e4 FEFFFFEB 		bl	__aeabi_idiv		@
 1314              	.LVL72:
 1315              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1316              		.loc 1 251 86 discriminator 3 view .LVU373
 1317 05e8 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1318 05ec 013083E2 		add	r3, r3, #1	@ yy, yy,
 1319 05f0 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1320              	.LVL73:
 1321              	@ armwave.c:251:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1322              		.loc 1 251 5 discriminator 3 view .LVU374
 1323 05f4 030050E1 		cmp	r0, r3	@, yy
 1324 05f8 8BFFFF8A 		bhi	.L62		@,
 1325              	.LVL74:
 1326              	.L53:
 1327              	@ armwave.c:261: }
 258:armwave.c     ****     }
 259:armwave.c     **** 
 260:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 261:armwave.c     **** }
 1328              		.loc 1 261 1 view .LVU375
 1329 05fc 14D08DE2 		add	sp, sp, #20	@,,
 1330              		.cfi_def_cfa_offset 36
 1331              		@ sp needed	@
 1332 0600 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1333              	.L73:
 1334              		.align	2
 1335              	.L72:
 1336 0604 00000000 		.word	g_armwave_state
 1337              		.cfi_endproc
 1338              	.LFE61:
 1340              		.align	2
 1341              		.global	armwave_setup_render
 1342              		.syntax unified
 1343              		.arm
 1344              		.fpu vfp
 1346              	armwave_setup_render:
 1347              	.LVL75:
 1348              	.LFB62:
 262:armwave.c     **** 
 263:armwave.c     **** /*
 264:armwave.c     ****  * Setup the renderer with passed parameters.
 265:armwave.c     ****  */
 266:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 267:armwave.c     **** {
 1349              		.loc 1 267 1 is_stmt 1 view -0
 1350              		.cfi_startproc
 1351              		@ args = 12, pretend = 0, frame = 0
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 268:armwave.c     ****     uint32_t length, xx;
 1353              		.loc 1 268 5 view .LVU377
 269:armwave.c     ****     float points_per_pixel;
 1354              		.loc 1 269 5 view .LVU378
 270:armwave.c     **** 
 271:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1355              		.loc 1 271 5 view .LVU379
 1356              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t length, xx;
 1357              		.loc 1 267 1 is_stmt 0 view .LVU380
 1358 0608 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1359              		.cfi_def_cfa_offset 28
 1360              		.cfi_offset 4, -28
 1361              		.cfi_offset 5, -24
 1362              		.cfi_offset 6, -20
 1363              		.cfi_offset 7, -16
 1364              		.cfi_offset 8, -12
 1365              		.cfi_offset 9, -8
 1366              		.cfi_offset 14, -4
 1367 060c 028B2DED 		vpush.64	{d8}	@
 1368              		.cfi_def_cfa_offset 36
 1369              		.cfi_offset 80, -36
 1370              		.cfi_offset 81, -32
 1371 0610 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1372 0614 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1373 0618 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1374 061c 14D04DE2 		sub	sp, sp, #20	@,,
 1375              		.cfi_def_cfa_offset 56
 1376              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t length, xx;
 1377              		.loc 1 267 1 view .LVU381
 1378 0620 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1379 0624 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1380 0628 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1381              	@ armwave.c:271:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1382              		.loc 1 271 5 view .LVU382
 1383 062c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1384 0630 F460CDE1 		strd	r6, [sp, #4]	@,,
 1385 0634 0230A0E1 		mov	r3, r2	@, waves_max
 1386              	.LVL76:
 1387              		.loc 1 271 5 view .LVU383
 1388 0638 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1389 063c 0120A0E1 		mov	r2, r1	@, end_point
 1390              	.LVL77:
 1391              		.loc 1 271 5 view .LVU384
 1392 0640 0010A0E1 		mov	r1, r0	@, start_point
 1393              	.LVL78:
 1394              		.loc 1 271 5 view .LVU385
 1395 0644 DC019FE5 		ldr	r0, .L88+12	@,
 1396              	.LVL79:
 1397              		.loc 1 271 5 view .LVU386
 1398 0648 FEFFFFEB 		bl	printf		@
 1399              	.LVL80:
 272:armwave.c     **** 
 273:armwave.c     ****     // TODO these asserts should instead raise PyExc
 274:armwave.c     ****     assert(start_point < end_point);
 1400              		.loc 1 274 5 is_stmt 1 view .LVU387
 1401 064c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1402 0650 6200002A 		bcs	.L85		@,
 275:armwave.c     **** 
 276:armwave.c     ****     /*
 277:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 278:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 279:armwave.c     **** 
 280:armwave.c     ****     if(target_height == 256) {
 281:armwave.c     ****         g_armwave_state.row_shift = 8;
 282:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 283:armwave.c     ****     } else if(target_height == 512) {
 284:armwave.c     ****         g_armwave_state.row_shift = 9;
 285:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 286:armwave.c     ****     } else if(target_height == 1024) {
 287:armwave.c     ****         g_armwave_state.row_shift = 10;
 288:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 289:armwave.c     ****     } else if(target_height == 2048) {
 290:armwave.c     ****         g_armwave_state.row_shift = 11;
 291:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 292:armwave.c     ****     }
 293:armwave.c     ****     */
 294:armwave.c     **** 
 295:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 296:armwave.c     ****     g_armwave_state.xstride = target_height;
 1403              		.loc 1 296 5 view .LVU388
 1404              	@ armwave.c:307:     g_armwave_state.wave_length = end_point - start_point;
 297:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 298:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 299:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 300:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 301:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 302:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 303:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 304:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 305:armwave.c     ****     g_armwave_state.target_width = target_width;
 306:armwave.c     ****     g_armwave_state.target_height = target_height;
 307:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1405              		.loc 1 307 45 is_stmt 0 view .LVU389
 1406 0654 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1407              	.LVL81:
 1408              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1409              		.loc 1 297 49 view .LVU390
 1410 0658 6F6A9FED 		vldr.32	s12, .L88	@ tmp175,
 1411              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 308:armwave.c     **** 
 309:armwave.c     ****     // Calculate compound scaler
 310:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 311:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1412              		.loc 1 311 48 view .LVU391
 1413 065c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1414              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1415              		.loc 1 311 79 view .LVU392
 1416 0660 6E6ADFED 		vldr.32	s13, .L88+4	@ tmp199,
 1417              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1418              		.loc 1 304 90 view .LVU393
 1419 0664 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1420              	@ armwave.c:296:     g_armwave_state.xstride = target_height;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1421              		.loc 1 296 29 view .LVU394
 1422 0668 BC419FE5 		ldr	r4, .L88+16	@ tmp241,
 1423              	.LVL82:
 1424              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1425              		.loc 1 311 48 view .LVU395
 1426 066c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1427              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1428              		.loc 1 297 49 view .LVU396
 1429 0670 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1430              	@ armwave.c:302:     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1431              		.loc 1 302 42 view .LVU397
 1432 0674 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1433              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1434              		.loc 1 304 74 view .LVU398
 1435 0678 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1436              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1437              		.loc 1 297 49 view .LVU399
 1438 067c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1439              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1440              		.loc 1 311 48 view .LVU400
 1441 0680 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1442              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 312:armwave.c     **** 
 313:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1443              		.loc 1 313 5 view .LVU401
 1444 0684 04508DE5 		str	r5, [sp, #4]	@ _13,
 1445 0688 00608DE5 		str	r6, [sp]	@ target_width,
 1446              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1447              		.loc 1 304 74 view .LVU402
 1448 068c 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1449              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1450              		.loc 1 311 48 view .LVU403
 1451 0690 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1452              	@ armwave.c:296:     g_armwave_state.xstride = target_height;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1453              		.loc 1 296 29 view .LVU404
 1454 0694 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1455              		.loc 1 297 5 is_stmt 1 view .LVU405
 1456              	@ armwave.c:306:     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1457              		.loc 1 306 35 is_stmt 0 view .LVU406
 1458 0698 F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1459              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1460              		.loc 1 313 5 view .LVU407
 1461 069c 0118A0E3 		mov	r1, #65536	@ tmp202,
 1462              	@ armwave.c:303:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1463              		.loc 1 303 37 view .LVU408
 1464 06a0 017CA0E3 		mov	r7, #256	@ tmp185,
 1465              	@ armwave.c:299:     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1466              		.loc 1 299 33 view .LVU409
 1467 06a4 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1468              	@ armwave.c:300:     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1469              		.loc 1 300 31 view .LVU410
 1470 06a8 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1471              	@ armwave.c:301:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1472              		.loc 1 301 27 view .LVU411
 1473 06ac 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1474              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1475              		.loc 1 311 48 view .LVU412
 1476 06b0 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1477              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1478              		.loc 1 313 5 view .LVU413
 1479 06b4 08108DE5 		str	r1, [sp, #8]	@ tmp202,
 1480 06b8 70019FE5 		ldr	r0, .L88+20	@,
 1481 06bc 0310A0E1 		mov	r1, r3	@, tmp190
 1482              	@ armwave.c:302:     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1483              		.loc 1 302 26 view .LVU414
 1484 06c0 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1485              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1486              		.loc 1 304 34 view .LVU415
 1487 06c4 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1488              	@ armwave.c:307:     g_armwave_state.wave_length = end_point - start_point;
 307:armwave.c     **** 
 1489              		.loc 1 307 33 view .LVU416
 1490 06c8 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1491              	@ armwave.c:303:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1492              		.loc 1 303 37 view .LVU417
 1493 06cc 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1494              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1495              		.loc 1 297 49 view .LVU418
 1496 06d0 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1497              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1498              		.loc 1 311 79 view .LVU419
 1499 06d4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1500              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1501              		.loc 1 310 42 view .LVU420
 1502 06d8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1503              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1504              		.loc 1 297 33 view .LVU421
 1505 06dc 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1506              		.loc 1 298 5 is_stmt 1 view .LVU422
 1507              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1508              		.loc 1 310 42 is_stmt 0 view .LVU423
 1509 06e0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1510              	@ armwave.c:298:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1511              		.loc 1 298 30 view .LVU424
 1512 06e4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1513              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1514              		.loc 1 313 5 view .LVU425
 1515 06e8 0C30A0E1 		mov	r3, ip	@, _19
 1516 06ec 0C20A0E1 		mov	r2, ip	@, tmp3
 1517              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1518              		.loc 1 310 42 view .LVU426
 1519 06f0 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1520              	@ armwave.c:298:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1521              		.loc 1 298 30 view .LVU427
 1522 06f4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1523              		.loc 1 299 5 is_stmt 1 view .LVU428
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1524              		.loc 1 300 5 view .LVU429
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1525              		.loc 1 301 5 view .LVU430
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1526              		.loc 1 302 5 view .LVU431
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1527              		.loc 1 303 5 view .LVU432
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1528              		.loc 1 304 5 view .LVU433
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 1529              		.loc 1 305 5 view .LVU434
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1530              		.loc 1 306 5 view .LVU435
 307:armwave.c     **** 
 1531              		.loc 1 307 5 view .LVU436
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1532              		.loc 1 310 5 view .LVU437
 1533              		.loc 1 313 5 view .LVU438
 1534 06f8 FEFFFFEB 		bl	printf		@
 1535              	.LVL83:
 314:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 315:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 316:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 317:armwave.c     **** 
 318:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 319:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 320:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 321:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1536              		.loc 1 321 5 view .LVU439
 1537              	@ armwave.c:323:     if(g_armwave_state.ch1_buffer != NULL)
 322:armwave.c     **** 
 323:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1538              		.loc 1 323 23 is_stmt 0 view .LVU440
 1539 06fc 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1540              	@ armwave.c:321:     g_armwave_state.slice_height = 256; // 64;  
 321:armwave.c     **** 
 1541              		.loc 1 321 34 view .LVU441
 1542 0700 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1543              		.loc 1 323 5 is_stmt 1 view .LVU442
 1544              	@ armwave.c:323:     if(g_armwave_state.ch1_buffer != NULL)
 1545              		.loc 1 323 7 is_stmt 0 view .LVU443
 1546 0704 000050E3 		cmp	r0, #0	@ _20,
 1547 0708 0000000A 		beq	.L76		@,
 324:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1548              		.loc 1 324 9 is_stmt 1 view .LVU444
 1549 070c FEFFFFEB 		bl	free		@
 1550              	.LVL84:
 1551              	.L76:
 325:armwave.c     **** 
 326:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1552              		.loc 1 326 5 view .LVU445
 1553              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1554              		.loc 1 326 34 is_stmt 0 view .LVU446
 1555 0710 0110A0E3 		mov	r1, #1	@,
 1556 0714 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1557 0718 FEFFFFEB 		bl	calloc		@
 1558              	.LVL85:
 1559              	@ armwave.c:328:     assert(g_armwave_state.ch1_buffer != NULL);
 327:armwave.c     **** 
 328:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1560              		.loc 1 328 5 view .LVU447
 1561 071c 000050E3 		cmp	r0, #0	@ _23,
 1562              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 326:armwave.c     **** 
 1563              		.loc 1 326 34 view .LVU448
 1564 0720 0070A0E1 		mov	r7, r0	@ _23,
 1565              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 326:armwave.c     **** 
 1566              		.loc 1 326 32 view .LVU449
 1567 0724 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1568              		.loc 1 328 5 is_stmt 1 view .LVU450
 1569 0728 3600000A 		beq	.L86		@,
 329:armwave.c     **** 
 330:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 331:armwave.c     ****     length = end_point - start_point;
 1570              		.loc 1 331 5 view .LVU451
 1571              	.LVL86:
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1572              		.loc 1 332 5 view .LVU452
 1573              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 1574              		.loc 1 332 34 is_stmt 0 view .LVU453
 1575 072c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1576              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 1577              		.loc 1 332 22 view .LVU454
 1578 0730 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1579              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1580              		.loc 1 333 60 view .LVU455
 1581 0734 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1582              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1583              		.loc 1 334 40 view .LVU456
 1584 0738 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1585              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1586              		.loc 1 332 34 view .LVU457
 1587 073c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1588              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1589              		.loc 1 332 22 view .LVU458
 1590 0740 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1591              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1592              		.loc 1 333 60 view .LVU459
 1593 0744 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1594              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1595              		.loc 1 332 22 view .LVU460
 1596 0748 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1597              	.LVL87:
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1598              		.loc 1 333 5 is_stmt 1 view .LVU461
 1599              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1600              		.loc 1 333 60 is_stmt 0 view .LVU462
 1601 074c 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1602              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1603              		.loc 1 333 41 view .LVU463
 1604 0750 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1605 0754 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1606              		.loc 1 334 5 is_stmt 1 view .LVU464
 1607              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1608              		.loc 1 334 40 is_stmt 0 view .LVU465
 1609 0758 FEFFFFEB 		bl	malloc		@
 1610              	.LVL88:
 1611              	@ armwave.c:336:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 335:armwave.c     **** 
 336:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1612              		.loc 1 336 5 view .LVU466
 1613 075c 000050E3 		cmp	r0, #0	@ _31,
 1614              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1615              		.loc 1 334 40 view .LVU467
 1616 0760 0060A0E1 		mov	r6, r0	@ _31,
 1617              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1618              		.loc 1 334 38 view .LVU468
 1619 0764 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1620              		.loc 1 336 5 is_stmt 1 view .LVU469
 1621 0768 2100000A 		beq	.L87		@,
 1622              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 337:armwave.c     **** 
 338:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 339:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1623              		.loc 1 339 54 is_stmt 0 view .LVU470
 1624 076c 2C7ADFED 		vldr.32	s15, .L88+8	@ tmp229,
 1625 0770 020040E2 		sub	r0, r0, #2	@ ivtmp.78, _31,
 1626              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1627              		.loc 1 338 12 view .LVU471
 1628 0774 0030A0E3 		mov	r3, #0	@ xx,
 1629              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1630              		.loc 1 339 54 view .LVU472
 1631 0778 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1632              	.L79:
 1633              	.LVL89:
 1634              		.loc 1 339 9 is_stmt 1 discriminator 3 view .LVU473
 1635              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1636              		.loc 1 339 74 is_stmt 0 discriminator 3 view .LVU474
 1637 077c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1638              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1639              		.loc 1 338 32 discriminator 3 view .LVU475
 1640 0780 013083E2 		add	r3, r3, #1	@ xx, xx,
 1641              	.LVL90:
 1642              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1643              		.loc 1 338 5 discriminator 3 view .LVU476
 1644 0784 030055E1 		cmp	r5, r3	@ _13, xx
 1645              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1646              		.loc 1 339 74 discriminator 3 view .LVU477
 1647 0788 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1648 078c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1649              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1650              		.loc 1 339 46 discriminator 3 view .LVU478
 1651 0790 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1652 0794 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1653 0798 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1654              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1655              		.loc 1 338 5 discriminator 3 view .LVU479
 1656 079c F6FFFF1A 		bne	.L79		@,
 340:armwave.c     **** 
 341:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 342:armwave.c     ****     }
 343:armwave.c     **** 
 344:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1657              		.loc 1 344 5 is_stmt 1 view .LVU480
 1658              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1659              		.loc 1 344 34 is_stmt 0 view .LVU481
 1660 07a0 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1661 07a4 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1662 07a8 FEFFFFEB 		bl	malloc		@
 1663              	.LVL91:
 1664              	@ armwave.c:346:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 345:armwave.c     **** 
 346:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1665              		.loc 1 346 5 view .LVU482
 1666 07ac 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1667 07b0 0620A0E1 		mov	r2, r6	@, _31
 1668 07b4 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1669 07b8 0710A0E1 		mov	r1, r7	@, _23
 1670              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 344:armwave.c     **** 
 1671              		.loc 1 344 34 view .LVU483
 1672 07bc 00C0A0E1 		mov	ip, r0	@ tmp236,
 1673              	@ armwave.c:346:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1674              		.loc 1 346 5 view .LVU484
 1675 07c0 0030A0E1 		mov	r3, r0	@, tmp236
 1676              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 344:armwave.c     **** 
 1677              		.loc 1 344 32 view .LVU485
 1678 07c4 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1679              		.loc 1 346 5 is_stmt 1 view .LVU486
 1680 07c8 64009FE5 		ldr	r0, .L88+24	@,
 1681 07cc FEFFFFEB 		bl	printf		@
 1682              	.LVL92:
 347:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 348:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 349:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 350:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 351:armwave.c     **** 
 352:armwave.c     ****     malloc_stats();
 1683              		.loc 1 352 5 view .LVU487
 1684              	@ armwave.c:353: }
 353:armwave.c     **** }
 1685              		.loc 1 353 1 is_stmt 0 view .LVU488
 1686 07d0 14D08DE2 		add	sp, sp, #20	@,,
 1687              		.cfi_remember_state
 1688              		.cfi_def_cfa_offset 36
 1689              		@ sp needed	@
 1690 07d4 028BBDEC 		vldm	sp!, {d8}	@
 1691              		.cfi_restore 80
 1692              		.cfi_restore 81
 1693              		.cfi_def_cfa_offset 28
 1694              	.LVL93:
 1695              		.loc 1 353 1 view .LVU489
 1696 07d8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1697              		.cfi_restore 14
 1698              		.cfi_restore 9
 1699              		.cfi_restore 8
 1700              		.cfi_restore 7
 1701              		.cfi_restore 6
 1702              		.cfi_restore 5
 1703              		.cfi_restore 4
 1704              		.cfi_def_cfa_offset 0
 1705              	.LVL94:
 1706              	@ armwave.c:352:     malloc_stats();
 352:armwave.c     **** }
 1707              		.loc 1 352 5 view .LVU490
 1708 07dc FEFFFFEA 		b	malloc_stats		@
 1709              	.LVL95:
 1710              	.L85:
 1711              		.cfi_restore_state
 274:armwave.c     **** 
 1712              		.loc 1 274 5 is_stmt 1 discriminator 1 view .LVU491
 1713 07e0 50309FE5 		ldr	r3, .L88+28	@,
 1714 07e4 50209FE5 		ldr	r2, .L88+32	@,
 1715 07e8 50109FE5 		ldr	r1, .L88+36	@,
 1716 07ec 50009FE5 		ldr	r0, .L88+40	@,
 1717 07f0 FEFFFFEB 		bl	__assert_fail		@
 1718              	.LVL96:
 1719              	.L87:
 336:armwave.c     **** 
 1720              		.loc 1 336 5 discriminator 1 view .LVU492
 1721 07f4 3C309FE5 		ldr	r3, .L88+28	@,
 1722 07f8 152EA0E3 		mov	r2, #336	@,
 1723 07fc 3C109FE5 		ldr	r1, .L88+36	@,
 1724 0800 40009FE5 		ldr	r0, .L88+44	@,
 1725 0804 FEFFFFEB 		bl	__assert_fail		@
 1726              	.LVL97:
 1727              	.L86:
 328:armwave.c     **** 
 1728              		.loc 1 328 5 discriminator 1 view .LVU493
 1729 0808 28309FE5 		ldr	r3, .L88+28	@,
 1730 080c 522FA0E3 		mov	r2, #328	@,
 1731 0810 28109FE5 		ldr	r1, .L88+36	@,
 1732 0814 30009FE5 		ldr	r0, .L88+48	@,
 1733 0818 FEFFFFEB 		bl	__assert_fail		@
 1734              	.LVL98:
 1735              	.L89:
 1736              		.align	2
 1737              	.L88:
 1738 081c 00007F43 		.word	1132396544
 1739 0820 00008047 		.word	1199570944
 1740 0824 0000803F 		.word	1065353216
 1741 0828 40000000 		.word	.LC4
 1742 082c 00000000 		.word	g_armwave_state
 1743 0830 84000000 		.word	.LC6
 1744 0834 34010000 		.word	.LC9
 1745 0838 1C000000 		.word	.LANCHOR0+28
 1746 083c 12010000 		.word	274
 1747 0840 20000000 		.word	.LC2
 1748 0844 6C000000 		.word	.LC5
 1749 0848 08010000 		.word	.LC8
 1750 084c E4000000 		.word	.LC7
 1751              		.cfi_endproc
 1752              	.LFE62:
 1754              		.align	2
 1755              		.global	armwave_set_wave_pointer
 1756              		.syntax unified
 1757              		.arm
 1758              		.fpu vfp
 1760              	armwave_set_wave_pointer:
 1761              	.LVL99:
 1762              	.LFB63:
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 357:armwave.c     ****  * in the future.
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 360:armwave.c     **** {
 1763              		.loc 1 360 1 view -0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1767              		.loc 1 361 5 view .LVU495
 1768 0850 000050E3 		cmp	r0, #0	@ wave_buffer
 1769              		.loc 1 361 5 is_stmt 0 view .LVU496
 1770 0854 0200000A 		beq	.L95		@,
 362:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1771              		.loc 1 362 5 is_stmt 1 view .LVU497
 1772              	@ armwave.c:362:     g_armwave_state.wave_buffer = wave_buffer;
 1773              		.loc 1 362 33 is_stmt 0 view .LVU498
 1774 0858 1C309FE5 		ldr	r3, .L96	@ tmp116,
 1775 085c 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1776 0860 1EFF2FE1 		bx	lr	@
 1777              	.L95:
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1778              		.loc 1 361 5 is_stmt 1 discriminator 1 view .LVU499
 1779              	@ armwave.c:360: {
 360:armwave.c     ****     assert(wave_buffer != NULL);
 1780              		.loc 1 360 1 is_stmt 0 discriminator 1 view .LVU500
 1781 0864 10402DE9 		push	{r4, lr}	@
 1782              		.cfi_def_cfa_offset 8
 1783              		.cfi_offset 4, -8
 1784              		.cfi_offset 14, -4
 1785              	@ armwave.c:361:     assert(wave_buffer != NULL);
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1786              		.loc 1 361 5 discriminator 1 view .LVU501
 1787 0868 10309FE5 		ldr	r3, .L96+4	@,
 1788 086c 10209FE5 		ldr	r2, .L96+8	@,
 1789 0870 10109FE5 		ldr	r1, .L96+12	@,
 1790 0874 10009FE5 		ldr	r0, .L96+16	@,
 1791              	.LVL100:
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1792              		.loc 1 361 5 discriminator 1 view .LVU502
 1793 0878 FEFFFFEB 		bl	__assert_fail		@
 1794              	.LVL101:
 1795              	.L97:
 1796              		.align	2
 1797              	.L96:
 1798 087c 00000000 		.word	g_armwave_state
 1799 0880 34000000 		.word	.LANCHOR0+52
 1800 0884 69010000 		.word	361
 1801 0888 20000000 		.word	.LC2
 1802 088c 58010000 		.word	.LC10
 1803              		.cfi_endproc
 1804              	.LFE63:
 1806              		.align	2
 1807              		.global	armwave_set_wave_pointer_as_testbuf
 1808              		.syntax unified
 1809              		.arm
 1810              		.fpu vfp
 1812              	armwave_set_wave_pointer_as_testbuf:
 1813              	.LVL102:
 1814              	.LFB64:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 367:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 368:armwave.c     ****  */
 369:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 370:armwave.c     **** {
 1815              		.loc 1 370 1 is_stmt 1 view -0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 0
 1818              		@ frame_needed = 0, uses_anonymous_args = 0
 1819              		@ link register save eliminated.
 371:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1820              		.loc 1 371 5 view .LVU504
 1821              	@ armwave.c:371:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1822              		.loc 1 371 29 is_stmt 0 view .LVU505
 1823 0890 24309FE5 		ldr	r3, .L101	@ tmp117,
 1824              	@ armwave.c:371:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1825              		.loc 1 371 7 view .LVU506
 1826 0894 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1827 0898 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1828 089c 0400003A 		bcc	.L100		@,
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 373:armwave.c     ****         return;
 374:armwave.c     ****     }
 375:armwave.c     **** 
 376:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1829              		.loc 1 376 5 is_stmt 1 view .LVU507
 1830              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1831              		.loc 1 376 111 is_stmt 0 view .LVU508
 1832 08a0 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1833              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1834              		.loc 1 376 68 view .LVU509
 1835 08a4 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1836 08a8 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1837              	.LVL103:
 1838              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1839              		.loc 1 376 33 view .LVU510
 1840 08ac 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1841              	@ armwave.c:377: }
 377:armwave.c     **** }
 1842              		.loc 1 377 1 view .LVU511
 1843 08b0 1EFF2FE1 		bx	lr	@
 1844              	.LVL104:
 1845              	.L100:
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1846              		.loc 1 372 9 is_stmt 1 view .LVU512
 1847 08b4 04009FE5 		ldr	r0, .L101+4	@,
 1848              	.LVL105:
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1849              		.loc 1 372 9 is_stmt 0 view .LVU513
 1850 08b8 FEFFFFEA 		b	puts		@
 1851              	.LVL106:
 1852              	.L102:
 1853              		.align	2
 1854              	.L101:
 1855 08bc 00000000 		.word	g_armwave_state
 1856 08c0 6C010000 		.word	.LC11
 1857              		.cfi_endproc
 1858              	.LFE64:
 1860              		.align	2
 1861              		.global	armwave_set_wave_pointer_u32
 1862              		.syntax unified
 1863              		.arm
 1864              		.fpu vfp
 1866              	armwave_set_wave_pointer_u32:
 1867              	.LVL107:
 1868              	.LFB65:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 381:armwave.c     ****  * disjointed buffers in the future.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 384:armwave.c     **** {
 1869              		.loc 1 384 1 is_stmt 1 view -0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 0
 1872              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1873              		.loc 1 385 5 view .LVU515
 1874 08c4 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1875              		.loc 1 385 5 is_stmt 0 view .LVU516
 1876 08c8 0200000A 		beq	.L108		@,
 386:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1877              		.loc 1 386 5 is_stmt 1 view .LVU517
 1878              	@ armwave.c:386:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1879              		.loc 1 386 33 is_stmt 0 view .LVU518
 1880 08cc 1C309FE5 		ldr	r3, .L109	@ tmp117,
 1881 08d0 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1882 08d4 1EFF2FE1 		bx	lr	@
 1883              	.L108:
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1884              		.loc 1 385 5 is_stmt 1 discriminator 1 view .LVU519
 1885              	@ armwave.c:384: {
 384:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1886              		.loc 1 384 1 is_stmt 0 discriminator 1 view .LVU520
 1887 08d8 10402DE9 		push	{r4, lr}	@
 1888              		.cfi_def_cfa_offset 8
 1889              		.cfi_offset 4, -8
 1890              		.cfi_offset 14, -4
 1891              	@ armwave.c:385:     assert(wave_buffer_ptr != 0);
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1892              		.loc 1 385 5 discriminator 1 view .LVU521
 1893 08dc 10309FE5 		ldr	r3, .L109+4	@,
 1894 08e0 10209FE5 		ldr	r2, .L109+8	@,
 1895 08e4 10109FE5 		ldr	r1, .L109+12	@,
 1896 08e8 10009FE5 		ldr	r0, .L109+16	@,
 1897              	.LVL108:
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1898              		.loc 1 385 5 discriminator 1 view .LVU522
 1899 08ec FEFFFFEB 		bl	__assert_fail		@
 1900              	.LVL109:
 1901              	.L110:
 1902              		.align	2
 1903              	.L109:
 1904 08f0 00000000 		.word	g_armwave_state
 1905 08f4 50000000 		.word	.LANCHOR0+80
 1906 08f8 81010000 		.word	385
 1907 08fc 20000000 		.word	.LC2
 1908 0900 A8010000 		.word	.LC12
 1909              		.cfi_endproc
 1910              	.LFE65:
 1912              		.align	2
 1913              		.global	armwave_clear_buffer
 1914              		.syntax unified
 1915              		.arm
 1916              		.fpu vfp
 1918              	armwave_clear_buffer:
 1919              	.LVL110:
 1920              	.LFB66:
 387:armwave.c     **** }
 388:armwave.c     **** 
 389:armwave.c     **** /*
 390:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 391:armwave.c     ****  */
 392:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 393:armwave.c     **** {
 1921              		.loc 1 393 1 is_stmt 1 view -0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 394:armwave.c     ****     // Flags ignored, only one buffer cleared
 395:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1926              		.loc 1 395 5 view .LVU524
 1927              	@ armwave.c:395:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1928              		.loc 1 395 58 is_stmt 0 view .LVU525
 1929 0904 0C309FE5 		ldr	r3, .L112	@ tmp114,
 1930              	@ armwave.c:395:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1931              		.loc 1 395 5 view .LVU526
 1932 0908 0010A0E3 		mov	r1, #0	@,
 1933 090c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1934 0910 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1935              	.LVL111:
 1936              		.loc 1 395 5 view .LVU527
 1937 0914 FEFFFFEA 		b	memset		@
 1938              	.LVL112:
 1939              	.L113:
 1940              		.align	2
 1941              	.L112:
 1942 0918 00000000 		.word	g_armwave_state
 1943              		.cfi_endproc
 1944              	.LFE66:
 1946              		.align	2
 1947              		.global	armwave_set_channel_colour
 1948              		.syntax unified
 1949              		.arm
 1950              		.fpu vfp
 1952              	armwave_set_channel_colour:
 1953              	.LVL113:
 1954              	.LFB67:
 396:armwave.c     **** }
 397:armwave.c     **** 
 398:armwave.c     **** /*
 399:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 400:armwave.c     ****  */
 401:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 402:armwave.c     **** {
 1955              		.loc 1 402 1 is_stmt 1 view -0
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 0
 1958              		@ frame_needed = 0, uses_anonymous_args = 0
 1959              		@ link register save eliminated.
 403:armwave.c     ****     // Only 1ch supported for now
 404:armwave.c     ****     switch(ch) {
 1960              		.loc 1 404 5 view .LVU529
 1961 091c 010050E3 		cmp	r0, #1	@ ch,
 405:armwave.c     ****         case 1:
 406:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1962              		.loc 1 406 13 view .LVU530
 1963              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 1964              		.loc 1 406 41 is_stmt 0 view .LVU531
 1965 0920 0C009F05 		ldreq	r0, .L116	@ tmp117,
 1966              	.LVL114:
 1967              		.loc 1 406 41 view .LVU532
 1968 0924 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 407:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1969              		.loc 1 407 13 is_stmt 1 view .LVU533
 1970              	@ armwave.c:407:             g_armwave_state.ch1_color.g = g;
 1971              		.loc 1 407 41 is_stmt 0 view .LVU534
 1972 0928 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 408:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1973              		.loc 1 408 13 is_stmt 1 view .LVU535
 1974              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 1975              		.loc 1 408 41 is_stmt 0 view .LVU536
 1976 092c B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 409:armwave.c     ****             break;
 1977              		.loc 1 409 13 is_stmt 1 view .LVU537
 1978              	@ armwave.c:411: }
 410:armwave.c     ****     }
 411:armwave.c     **** }
 1979              		.loc 1 411 1 is_stmt 0 view .LVU538
 1980 0930 1EFF2FE1 		bx	lr	@
 1981              	.L117:
 1982              		.align	2
 1983              	.L116:
 1984 0934 00000000 		.word	g_armwave_state
 1985              		.cfi_endproc
 1986              	.LFE67:
 1988              		.align	2
 1989              		.global	armwave_dump_ppm_debug
 1990              		.syntax unified
 1991              		.arm
 1992              		.fpu vfp
 1994              	armwave_dump_ppm_debug:
 1995              	.LVL115:
 1996              	.LFB68:
 412:armwave.c     **** 
 413:armwave.c     **** /*
 414:armwave.c     ****  * Dump a ppm of a buffer to a file.
 415:armwave.c     ****  */
 416:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 417:armwave.c     **** {
 1997              		.loc 1 417 1 is_stmt 1 view -0
 1998              		.cfi_startproc
 1999              		@ args = 0, pretend = 0, frame = 0
 2000              		@ frame_needed = 0, uses_anonymous_args = 0
 418:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2001              		.loc 1 418 5 view .LVU540
 2002              	@ armwave.c:417: {
 417:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2003              		.loc 1 417 1 is_stmt 0 view .LVU541
 2004 0938 0130A0E1 		mov	r3, r1	@ fn, fn
 2005 093c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2006              		.cfi_def_cfa_offset 28
 2007              		.cfi_offset 4, -28
 2008              		.cfi_offset 5, -24
 2009              		.cfi_offset 6, -20
 2010              		.cfi_offset 7, -16
 2011              		.cfi_offset 8, -12
 2012              		.cfi_offset 9, -8
 2013              		.cfi_offset 14, -4
 2014 0940 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2015 0944 0CD04DE2 		sub	sp, sp, #12	@,,
 2016              		.cfi_def_cfa_offset 40
 2017              	@ armwave.c:418:     FILE *fp = fopen(fn, "wb");
 2018              		.loc 1 418 16 view .LVU542
 2019 0948 C4109FE5 		ldr	r1, .L126	@,
 2020              	.LVL116:
 2021              		.loc 1 418 16 view .LVU543
 2022 094c 0300A0E1 		mov	r0, r3	@, fn
 2023              	.LVL117:
 2024              		.loc 1 418 16 view .LVU544
 2025 0950 FEFFFFEB 		bl	fopen64		@
 2026              	.LVL118:
 2027              	@ armwave.c:425:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 419:armwave.c     ****     uint32_t data;
 420:armwave.c     ****     int xx, yy;
 421:armwave.c     **** 
 422:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 423:armwave.c     **** 
 424:armwave.c     ****     fputs("P3\n", fp);
 425:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2028              		.loc 1 425 5 view .LVU545
 2029 0954 BC609FE5 		ldr	r6, .L126+4	@ tmp150,
 2030              	@ armwave.c:424:     fputs("P3\n", fp);
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2031              		.loc 1 424 5 view .LVU546
 2032 0958 0320A0E3 		mov	r2, #3	@,
 2033 095c 0110A0E3 		mov	r1, #1	@,
 2034              	@ armwave.c:418:     FILE *fp = fopen(fn, "wb");
 418:armwave.c     ****     uint32_t data;
 2035              		.loc 1 418 16 view .LVU547
 2036 0960 0070A0E1 		mov	r7, r0	@ fp,
 2037              	.LVL119:
 419:armwave.c     ****     uint32_t data;
 2038              		.loc 1 419 5 is_stmt 1 view .LVU548
 420:armwave.c     **** 
 2039              		.loc 1 420 5 view .LVU549
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2040              		.loc 1 424 5 view .LVU550
 2041 0964 0030A0E1 		mov	r3, r0	@, fp
 2042 0968 AC009FE5 		ldr	r0, .L126+8	@,
 2043              	.LVL120:
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2044              		.loc 1 424 5 is_stmt 0 view .LVU551
 2045 096c FEFFFFEB 		bl	fwrite		@
 2046              	.LVL121:
 2047              		.loc 1 425 5 is_stmt 1 view .LVU552
 2048 0970 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2049 0974 A4109FE5 		ldr	r1, .L126+12	@,
 2050 0978 0700A0E1 		mov	r0, r7	@, fp
 2051 097c FEFFFFEB 		bl	fprintf		@
 2052              	.LVL122:
 426:armwave.c     ****     fputs("255\n", fp);
 2053              		.loc 1 426 5 view .LVU553
 2054 0980 0420A0E3 		mov	r2, #4	@,
 2055 0984 0730A0E1 		mov	r3, r7	@, fp
 2056 0988 0110A0E3 		mov	r1, #1	@,
 2057 098c 90009FE5 		ldr	r0, .L126+16	@,
 2058 0990 FEFFFFEB 		bl	fwrite		@
 2059              	.LVL123:
 427:armwave.c     **** 
 428:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2060              		.loc 1 428 5 view .LVU554
 2061              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2062              		.loc 1 428 37 is_stmt 0 view .LVU555
 2063 0994 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2064              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2065              		.loc 1 428 5 view .LVU556
 2066 0998 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2067 099c 180000DA 		ble	.L119		@,
 2068 09a0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2069              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 430:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 431:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 432:armwave.c     **** 
 433:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2070              		.loc 1 433 13 view .LVU557
 2071 09a4 7C909FE5 		ldr	r9, .L126+20	@ tmp152,
 2072              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2073              		.loc 1 428 12 view .LVU558
 2074 09a8 0050A0E3 		mov	r5, #0	@ yy,
 2075              	.LVL124:
 2076              	.L120:
 2077              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2078              		.loc 1 429 9 view .LVU559
 2079 09ac 000053E3 		cmp	r3, #0	@ _13,
 2080              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2081              		.loc 1 429 16 view .LVU560
 2082 09b0 0040A0C3 		movgt	r4, #0	@ xx,
 2083              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2084              		.loc 1 429 9 view .LVU561
 2085 09b4 0F0000DA 		ble	.L122		@,
 2086              	.LVL125:
 2087              	.L121:
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2088              		.loc 1 430 13 is_stmt 1 discriminator 3 view .LVU562
 2089              	@ armwave.c:430:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2090              		.loc 1 430 29 is_stmt 0 discriminator 3 view .LVU563
 2091 09b8 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2092              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2093              		.loc 1 433 13 discriminator 3 view .LVU564
 2094 09bc 0910A0E1 		mov	r1, r9	@, tmp152
 2095 09c0 0700A0E1 		mov	r0, r7	@, fp
 2096              	@ armwave.c:430:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2097              		.loc 1 430 18 discriminator 3 view .LVU565
 2098 09c4 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2099              	.LVL126:
 2100              		.loc 1 433 13 is_stmt 1 discriminator 3 view .LVU566
 2101              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2102              		.loc 1 429 58 is_stmt 0 discriminator 3 view .LVU567
 2103 09c8 014084E2 		add	r4, r4, #1	@ xx, xx,
 2104              	.LVL127:
 2105              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2106              		.loc 1 433 81 discriminator 3 view .LVU568
 2107 09cc 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2108              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2109              		.loc 1 433 61 discriminator 3 view .LVU569
 2110 09d0 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2111              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2112              		.loc 1 433 13 discriminator 3 view .LVU570
 2113 09d4 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2114 09d8 7330EFE6 		uxtb	r3, r3	@, tmp142
 2115 09dc 00C08DE5 		str	ip, [sp]	@ tmp147,
 2116 09e0 7220EFE6 		uxtb	r2, r2	@, data
 2117              	.LVL128:
 2118              		.loc 1 433 13 discriminator 3 view .LVU571
 2119 09e4 FEFFFFEB 		bl	fprintf		@
 2120              	.LVL129:
 2121              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2122              		.loc 1 429 41 discriminator 3 view .LVU572
 2123 09e8 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2124              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2125              		.loc 1 429 9 discriminator 3 view .LVU573
 2126 09ec 040053E1 		cmp	r3, r4	@ _13, xx
 2127 09f0 F0FFFFCA 		bgt	.L121		@,
 2128 09f4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2129              	.LVL130:
 2130              	.L122:
 2131              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2132              		.loc 1 428 55 discriminator 2 view .LVU574
 2133 09f8 015085E2 		add	r5, r5, #1	@ yy, yy,
 2134              	.LVL131:
 2135              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2136              		.loc 1 428 5 discriminator 2 view .LVU575
 2137 09fc 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2138 0a00 E9FFFFBA 		blt	.L120		@,
 2139              	.LVL132:
 2140              	.L119:
 434:armwave.c     ****         }
 435:armwave.c     ****     }
 436:armwave.c     **** 
 437:armwave.c     ****     fclose(fp);
 2141              		.loc 1 437 5 is_stmt 1 view .LVU576
 2142 0a04 0700A0E1 		mov	r0, r7	@, fp
 2143              	@ armwave.c:438: }
 438:armwave.c     **** }
 2144              		.loc 1 438 1 is_stmt 0 view .LVU577
 2145 0a08 0CD08DE2 		add	sp, sp, #12	@,,
 2146              		.cfi_def_cfa_offset 28
 2147              		@ sp needed	@
 2148 0a0c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2149              		.cfi_restore 14
 2150              		.cfi_restore 9
 2151              		.cfi_restore 8
 2152              		.cfi_restore 7
 2153              		.cfi_restore 6
 2154              		.cfi_restore 5
 2155              		.cfi_restore 4
 2156              		.cfi_def_cfa_offset 0
 2157              	.LVL133:
 2158              	@ armwave.c:437:     fclose(fp);
 437:armwave.c     **** }
 2159              		.loc 1 437 5 view .LVU578
 2160 0a10 FEFFFFEA 		b	fclose		@
 2161              	.LVL134:
 2162              	.L127:
 437:armwave.c     **** }
 2163              		.loc 1 437 5 view .LVU579
 2164              		.align	2
 2165              	.L126:
 2166 0a14 C0010000 		.word	.LC13
 2167 0a18 00000000 		.word	g_armwave_state
 2168 0a1c C4010000 		.word	.LC14
 2169 0a20 C8010000 		.word	.LC15
 2170 0a24 D0010000 		.word	.LC16
 2171 0a28 D8010000 		.word	.LC17
 2172              		.cfi_endproc
 2173              	.LFE68:
 2175              		.align	2
 2176              		.global	armwave_test_init
 2177              		.syntax unified
 2178              		.arm
 2179              		.fpu vfp
 2181              	armwave_test_init:
 2182              	.LVL135:
 2183              	.LFB69:
 439:armwave.c     **** 
 440:armwave.c     **** /*
 441:armwave.c     ****  * Initialise some test functionry.
 442:armwave.c     ****  */
 443:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 444:armwave.c     **** {
 2184              		.loc 1 444 1 is_stmt 1 view -0
 2185              		.cfi_startproc
 2186              		@ args = 0, pretend = 0, frame = 0
 2187              		@ frame_needed = 0, uses_anonymous_args = 0
 445:armwave.c     ****     test_create_gamma();
 2188              		.loc 1 445 5 view .LVU581
 2189              	.LBB18:
 2190              	.LBI18:
  34:armwave.c     **** {
 2191              		.loc 1 34 6 view .LVU582
  34:armwave.c     **** {
 2192              		.loc 1 34 6 is_stmt 0 view .LVU583
 2193              	.LBE18:
 2194              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2195              		.loc 1 444 1 view .LVU584
 2196 0a2c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2197              		.cfi_def_cfa_offset 32
 2198              		.cfi_offset 4, -32
 2199              		.cfi_offset 5, -28
 2200              		.cfi_offset 6, -24
 2201              		.cfi_offset 7, -20
 2202              		.cfi_offset 8, -16
 2203              		.cfi_offset 9, -12
 2204              		.cfi_offset 10, -8
 2205              		.cfi_offset 14, -4
 2206 0a30 068B2DED 		vpush.64	{d8, d9, d10}	@
 2207              		.cfi_def_cfa_offset 56
 2208              		.cfi_offset 80, -56
 2209              		.cfi_offset 81, -52
 2210              		.cfi_offset 82, -48
 2211              		.cfi_offset 83, -44
 2212              		.cfi_offset 84, -40
 2213              		.cfi_offset 85, -36
 2214 0a34 C0409FE5 		ldr	r4, .L132+20	@ ivtmp.92,
 2215              	.LBB21:
 2216              	.LBB19:
 2217              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2218              		.loc 1 40 32 view .LVU585
 2219 0a38 2EAA9FED 		vldr.32	s20, .L132+16	@ tmp136,
 2220              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2221              		.loc 1 40 26 view .LVU586
 2222 0a3c 299B9FED 		vldr.64	d9, .L132	@ tmp151,
 2223              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2224              		.loc 1 40 49 view .LVU587
 2225 0a40 2A8B9FED 		vldr.64	d8, .L132+8	@ tmp139,
 2226 0a44 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.92,
 2227              	.LBE19:
 2228              	.LBE21:
 2229              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2230              		.loc 1 444 1 view .LVU588
 2231 0a48 10D04DE2 		sub	sp, sp, #16	@,,
 2232              		.cfi_def_cfa_offset 72
 2233              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2234              		.loc 1 444 1 view .LVU589
 2235 0a4c 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2236 0a50 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2237 0a54 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2238 0a58 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2239 0a5c 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.92,
 2240 0a60 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2241              	.LVL136:
 2242              	.L129:
 2243              	.LBB22:
 2244              	.LBB20:
  40:armwave.c     ****     }
 2245              		.loc 1 40 9 is_stmt 1 view .LVU590
 2246              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2247              		.loc 1 40 32 is_stmt 0 view .LVU591
 2248 0a64 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.92
 2249              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2250              		.loc 1 40 26 view .LVU592
 2251 0a68 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2252              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2253              		.loc 1 40 32 view .LVU593
 2254 0a6c 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2255 0a70 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2256 0a74 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2257              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2258              		.loc 1 40 26 view .LVU594
 2259 0a78 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2260 0a7c FEFFFFEB 		bl	pow		@
 2261              	.LVL137:
 2262              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2263              		.loc 1 40 49 view .LVU595
 2264 0a80 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2265              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2266              		.loc 1 40 24 view .LVU596
 2267 0a84 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2268 0a88 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2269 0a8c 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2270              	.LVL138:
 2271              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2272              		.loc 1 39 5 view .LVU597
 2273 0a90 0A0054E1 		cmp	r4, r10	@ ivtmp.92, _39
 2274 0a94 F2FFFF1A 		bne	.L129		@,
 2275              	.LVL139:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2276              		.loc 1 39 5 view .LVU598
 2277              	.LBE20:
 2278              	.LBE22:
 446:armwave.c     **** 
 447:armwave.c     ****     // make ch1 yellowish by default
 448:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2279              		.loc 1 448 5 is_stmt 1 view .LVU599
 2280              	.LBB23:
 2281              	.LBI23:
 401:armwave.c     **** {
 2282              		.loc 1 401 6 view .LVU600
 2283              	.LBB24:
 404:armwave.c     ****         case 1:
 2284              		.loc 1 404 5 view .LVU601
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2285              		.loc 1 406 13 view .LVU602
 407:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2286              		.loc 1 407 13 view .LVU603
 2287              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2288              		.loc 1 406 41 is_stmt 0 view .LVU604
 2289 0a98 60C09FE5 		ldr	ip, .L132+24	@ tmp142,
 2290 0a9c 60409FE5 		ldr	r4, .L132+28	@ tmp143,
 2291              	.LBE24:
 2292              	.LBE23:
 2293              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 449:armwave.c     **** 
 450:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2294              		.loc 1 450 5 view .LVU605
 2295 0aa0 0000A0E3 		mov	r0, #0	@ tmp147,
 2296              	.LBB28:
 2297              	.LBB25:
 2298              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 408:armwave.c     ****             break;
 2299              		.loc 1 408 41 view .LVU606
 2300 0aa4 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2301              	.LBE25:
 2302              	.LBE28:
 2303              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2304              		.loc 1 450 5 view .LVU607
 2305 0aa8 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2306 0aac 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2307 0ab0 00808DE5 		str	r8, [sp]	@ render_width,
 2308 0ab4 0610A0E1 		mov	r1, r6	@, tmp3
 2309 0ab8 0720A0E1 		mov	r2, r7	@, nwaves
 2310              	.LBB29:
 2311              	.LBB26:
 2312              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2313              		.loc 1 406 41 view .LVU608
 2314 0abc 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 408:armwave.c     ****             break;
 2315              		.loc 1 408 13 is_stmt 1 view .LVU609
 2316              	.LBE26:
 2317              	.LBE29:
 2318              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2319              		.loc 1 450 5 is_stmt 0 view .LVU610
 2320 0ac0 0630A0E1 		mov	r3, r6	@, wave_size
 2321              	.LBB30:
 2322              	.LBB27:
 2323              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 408:armwave.c     ****             break;
 2324              		.loc 1 408 41 view .LVU611
 2325 0ac4 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 409:armwave.c     ****     }
 2326              		.loc 1 409 13 is_stmt 1 view .LVU612
 2327              	.LVL140:
 409:armwave.c     ****     }
 2328              		.loc 1 409 13 is_stmt 0 view .LVU613
 2329              	.LBE27:
 2330              	.LBE30:
 2331              		.loc 1 450 5 is_stmt 1 view .LVU614
 2332 0ac8 FEFFFFEB 		bl	armwave_setup_render		@
 2333              	.LVL141:
 451:armwave.c     **** 
 452:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2334              		.loc 1 452 5 view .LVU615
 2335 0acc 34109FE5 		ldr	r1, .L132+32	@,
 2336 0ad0 34009FE5 		ldr	r0, .L132+36	@,
 2337              	@ armwave.c:453: }
 453:armwave.c     **** }
 2338              		.loc 1 453 1 is_stmt 0 view .LVU616
 2339 0ad4 10D08DE2 		add	sp, sp, #16	@,,
 2340              		.cfi_def_cfa_offset 56
 2341              		@ sp needed	@
 2342 0ad8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2343              		.cfi_restore 84
 2344              		.cfi_restore 85
 2345              		.cfi_restore 82
 2346              		.cfi_restore 83
 2347              		.cfi_restore 80
 2348              		.cfi_restore 81
 2349              		.cfi_def_cfa_offset 32
 2350 0adc F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2351              		.cfi_restore 14
 2352              		.cfi_restore 10
 2353              		.cfi_restore 9
 2354              		.cfi_restore 8
 2355              		.cfi_restore 7
 2356              		.cfi_restore 6
 2357              		.cfi_restore 5
 2358              		.cfi_restore 4
 2359              		.cfi_def_cfa_offset 0
 2360              	.LVL142:
 2361              	@ armwave.c:452:     printf("armwave version: %s\n", ARMWAVE_VER);
 452:armwave.c     **** }
 2362              		.loc 1 452 5 view .LVU617
 2363 0ae0 FEFFFFEA 		b	printf		@
 2364              	.LVL143:
 2365              	.L133:
 2366 0ae4 0000A0E1 		.align	3
 2367              	.L132:
 2368 0ae8 000000C0 		.word	-1073741824
 2369 0aec CCCCEC3F 		.word	1072483532
 2370 0af0 00000000 		.word	0
 2371 0af4 00E06F40 		.word	1081073664
 2372 0af8 00007F43 		.word	1132396544
 2373 0afc FFFFFFFF 		.word	gamma_table-1
 2374 0b00 00000000 		.word	g_armwave_state
 2375 0b04 F609F406 		.word	116656630
 2376 0b08 00000000 		.word	.LC0
 2377 0b0c 08000000 		.word	.LC1
 2378              		.cfi_endproc
 2379              	.LFE69:
 2381              		.align	2
 2382              		.global	armwave_test_fill_outbuf
 2383              		.syntax unified
 2384              		.arm
 2385              		.fpu vfp
 2387              	armwave_test_fill_outbuf:
 2388              	.LFB70:
 454:armwave.c     **** 
 455:armwave.c     **** /*
 456:armwave.c     ****  * Render image to the local allocated buffer.
 457:armwave.c     ****  */
 458:armwave.c     **** void armwave_test_fill_outbuf()
 459:armwave.c     **** {
 2389              		.loc 1 459 1 is_stmt 1 view -0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 0
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 2393              		@ link register save eliminated.
 460:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2394              		.loc 1 460 5 view .LVU619
 2395 0b10 04309FE5 		ldr	r3, .L135	@ tmp111,
 2396 0b14 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2397 0b18 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2398              	.LVL144:
 2399              	.L136:
 2400              		.align	2
 2401              	.L135:
 2402 0b1c 00000000 		.word	g_armwave_state
 2403              		.cfi_endproc
 2404              	.LFE70:
 2406              		.align	2
 2407              		.global	armwave_test_dump_buffer_to_ppm
 2408              		.syntax unified
 2409              		.arm
 2410              		.fpu vfp
 2412              	armwave_test_dump_buffer_to_ppm:
 2413              	.LVL145:
 2414              	.LFB71:
 461:armwave.c     **** }
 462:armwave.c     **** 
 463:armwave.c     **** /*
 464:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 465:armwave.c     ****  */
 466:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 467:armwave.c     **** {
 2415              		.loc 1 467 1 view -0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 2419              		@ link register save eliminated.
 468:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2420              		.loc 1 468 5 view .LVU621
 2421 0b20 08309FE5 		ldr	r3, .L138	@ tmp112,
 2422 0b24 0010A0E1 		mov	r1, r0	@, fn
 2423 0b28 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2424              	.LVL146:
 2425              		.loc 1 468 5 is_stmt 0 view .LVU622
 2426 0b2c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2427              	.LVL147:
 2428              	.L139:
 2429              		.loc 1 468 5 view .LVU623
 2430              		.align	2
 2431              	.L138:
 2432 0b30 00000000 		.word	g_armwave_state
 2433              		.cfi_endproc
 2434              	.LFE71:
 2436              		.align	2
 2437              		.global	armwave_test_fill_gdkbuf
 2438              		.syntax unified
 2439              		.arm
 2440              		.fpu vfp
 2442              	armwave_test_fill_gdkbuf:
 2443              	.LVL148:
 2444              	.LFB72:
 469:armwave.c     **** }
 470:armwave.c     **** 
 471:armwave.c     **** /*
 472:armwave.c     ****  * Render GDK buffer with test funtionry.
 473:armwave.c     ****  */
 474:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 475:armwave.c     **** {
 2445              		.loc 1 475 1 is_stmt 1 view -0
 2446              		.cfi_startproc
 2447              		@ args = 0, pretend = 0, frame = 0
 2448              		@ frame_needed = 0, uses_anonymous_args = 0
 2449              		@ link register save eliminated.
 476:armwave.c     ****     //PyObject *mv;
 477:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 478:armwave.c     **** 
 479:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 480:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2450              		.loc 1 480 5 view .LVU625
 481:armwave.c     ****     
 482:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 483:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2451              		.loc 1 483 5 view .LVU626
 2452              	@ armwave.c:480:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 480:armwave.c     ****     
 2453              		.loc 1 480 11 is_stmt 0 view .LVU627
 2454 0b34 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2455              	@ armwave.c:483:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2456              		.loc 1 483 5 view .LVU628
 2457 0b38 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2458              	.LVL149:
 2459              		.loc 1 483 5 view .LVU629
 2460 0b3c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2461              	.LVL150:
 2462              		.loc 1 483 5 view .LVU630
 2463              		.cfi_endproc
 2464              	.LFE72:
 2466              		.align	2
 2467              		.global	armwave_test_buffer_alloc
 2468              		.syntax unified
 2469              		.arm
 2470              		.fpu vfp
 2472              	armwave_test_buffer_alloc:
 2473              	.LVL151:
 2474              	.LFB73:
 484:armwave.c     **** }
 485:armwave.c     **** 
 486:armwave.c     **** /*
 487:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 488:armwave.c     ****  */
 489:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 490:armwave.c     **** {
 2475              		.loc 1 490 1 is_stmt 1 view -0
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 0
 2478              		@ frame_needed = 0, uses_anonymous_args = 0
 491:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2479              		.loc 1 491 5 view .LVU632
 2480              	@ armwave.c:490: {
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2481              		.loc 1 490 1 is_stmt 0 view .LVU633
 2482 0b40 70402DE9 		push	{r4, r5, r6, lr}	@
 2483              		.cfi_def_cfa_offset 16
 2484              		.cfi_offset 4, -16
 2485              		.cfi_offset 5, -12
 2486              		.cfi_offset 6, -8
 2487              		.cfi_offset 14, -4
 2488              	@ armwave.c:490: {
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2489              		.loc 1 490 1 view .LVU634
 2490 0b44 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2491              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 2492              		.loc 1 491 23 view .LVU635
 2493 0b48 44409FE5 		ldr	r4, .L148	@ tmp128,
 2494 0b4c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2495              	.LVL152:
 2496              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 2497              		.loc 1 491 7 view .LVU636
 2498 0b50 000050E3 		cmp	r0, #0	@ _1,
 2499 0b54 0000000A 		beq	.L142		@,
 492:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2500              		.loc 1 492 9 is_stmt 1 view .LVU637
 2501 0b58 FEFFFFEB 		bl	free		@
 2502              	.LVL153:
 2503              	.L142:
 493:armwave.c     ****     }
 494:armwave.c     **** 
 495:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 496:armwave.c     **** 
 497:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2504              		.loc 1 497 5 view .LVU638
 2505              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2506              		.loc 1 497 75 is_stmt 0 view .LVU639
 2507 0b5c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2508 0b60 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2509              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2510              		.loc 1 497 40 view .LVU640
 2511 0b64 0610A0E1 		mov	r1, r6	@, nsets
 2512              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2513              		.loc 1 497 75 view .LVU641
 2514 0b68 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2515              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2516              		.loc 1 497 40 view .LVU642
 2517 0b6c 0500A0E1 		mov	r0, r5	@, _4
 2518 0b70 FEFFFFEB 		bl	calloc		@
 2519              	.LVL154:
 2520              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 498:armwave.c     **** 
 499:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2521              		.loc 1 499 7 view .LVU643
 2522 0b74 000050E3 		cmp	r0, #0	@ tmp124,
 2523              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2524              		.loc 1 497 38 view .LVU644
 2525 0b78 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2526              		.loc 1 499 5 is_stmt 1 view .LVU645
 2527              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 2528              		.loc 1 499 7 is_stmt 0 view .LVU646
 2529 0b7c 7080BD18 		popne	{r4, r5, r6, pc}	@
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2530              		.loc 1 500 9 is_stmt 1 view .LVU647
 2531 0b80 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2532 0b84 0620A0E1 		mov	r2, r6	@, nsets
 2533 0b88 08009FE5 		ldr	r0, .L148+4	@,
 2534              	@ armwave.c:504: }
 501:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 502:armwave.c     ****         return;
 503:armwave.c     ****     }
 504:armwave.c     **** }
 2535              		.loc 1 504 1 is_stmt 0 view .LVU648
 2536 0b8c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2537              		.cfi_restore 14
 2538              		.cfi_restore 6
 2539              		.cfi_restore 5
 2540              		.cfi_restore 4
 2541              		.cfi_def_cfa_offset 0
 2542              	.LVL155:
 2543              	@ armwave.c:500:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2544              		.loc 1 500 9 view .LVU649
 2545 0b90 FEFFFFEA 		b	printf		@
 2546              	.LVL156:
 2547              	.L149:
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2548              		.loc 1 500 9 view .LVU650
 2549              		.align	2
 2550              	.L148:
 2551 0b94 00000000 		.word	g_armwave_state
 2552 0b98 E8010000 		.word	.LC18
 2553              		.cfi_endproc
 2554              	.LFE73:
 2556              		.align	2
 2557              		.global	armwave_fill_pixbuf_into_pybuffer
 2558              		.syntax unified
 2559              		.arm
 2560              		.fpu vfp
 2562              	armwave_fill_pixbuf_into_pybuffer:
 2563              	.LVL157:
 2564              	.LFB74:
 505:armwave.c     **** 
 506:armwave.c     **** /*
 507:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 508:armwave.c     ****  */
 509:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 510:armwave.c     **** {
 2565              		.loc 1 510 1 is_stmt 1 view -0
 2566              		.cfi_startproc
 2567              		@ args = 0, pretend = 0, frame = 48
 2568              		@ frame_needed = 0, uses_anonymous_args = 0
 511:armwave.c     ****     Py_buffer buffer;
 2569              		.loc 1 511 5 view .LVU652
 512:armwave.c     ****     int ret;
 2570              		.loc 1 512 5 view .LVU653
 513:armwave.c     **** 
 514:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 515:armwave.c     **** 
 516:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2571              		.loc 1 516 5 view .LVU654
 2572              	@ armwave.c:510: {
 510:armwave.c     ****     Py_buffer buffer;
 2573              		.loc 1 510 1 is_stmt 0 view .LVU655
 2574 0b9c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2575              		.cfi_def_cfa_offset 4
 2576              		.cfi_offset 14, -4
 2577 0ba0 34D04DE2 		sub	sp, sp, #52	@,,
 2578              		.cfi_def_cfa_offset 56
 2579              	@ armwave.c:516:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2580              		.loc 1 516 11 view .LVU656
 2581 0ba4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2582 0ba8 0120A0E3 		mov	r2, #1	@,
 2583 0bac FEFFFFEB 		bl	PyObject_GetBuffer		@
 2584              	.LVL158:
 517:armwave.c     **** 
 518:armwave.c     ****     if(ret != 0) {
 2585              		.loc 1 518 5 is_stmt 1 view .LVU657
 2586              	@ armwave.c:518:     if(ret != 0) {
 2587              		.loc 1 518 7 is_stmt 0 view .LVU658
 2588 0bb0 000050E3 		cmp	r0, #0	@,
 2589 0bb4 0A00001A 		bne	.L154		@,
 519:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 520:armwave.c     ****         Py_RETURN_FALSE;
 521:armwave.c     ****     }
 522:armwave.c     **** 
 523:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 524:armwave.c     **** 
 525:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2590              		.loc 1 525 5 is_stmt 1 view .LVU659
 2591 0bb8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2592              	.LVL159:
 2593              		.loc 1 525 5 is_stmt 0 view .LVU660
 2594 0bbc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2595              	.LVL160:
 526:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 527:armwave.c     **** 
 528:armwave.c     ****     PyBuffer_Release(&buffer);
 2596              		.loc 1 528 5 is_stmt 1 view .LVU661
 2597 0bc0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2598 0bc4 FEFFFFEB 		bl	PyBuffer_Release		@
 2599              	.LVL161:
 529:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 530:armwave.c     **** 
 531:armwave.c     ****     Py_RETURN_TRUE;
 2600              		.loc 1 531 5 view .LVU662
 2601              	.LBB31:
 2602              	.LBI31:
 2603              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2604              		.loc 2 456 20 view .LVU663
 2605              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2606              		.loc 2 458 21 view .LVU664
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2607              		.loc 2 459 5 view .LVU665
 2608              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2609              		.loc 2 459 18 is_stmt 0 view .LVU666
 2610 0bc8 38309FE5 		ldr	r3, .L155	@ tmp126,
 2611              	.LBE32:
 2612              	.LBE31:
 2613              	@ armwave.c:531:     Py_RETURN_TRUE;
 2614              		.loc 1 531 5 view .LVU667
 2615 0bcc 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2616              	.LBB34:
 2617              	.LBB33:
 2618              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2619              		.loc 2 459 18 view .LVU668
 2620 0bd0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2621 0bd4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2622 0bd8 002083E5 		str	r2, [r3]	@ tmp128,
 2623              	.LBE33:
 2624              	.LBE34:
 2625              	@ armwave.c:532: }
 532:armwave.c     **** }
 2626              		.loc 1 532 1 view .LVU669
 2627 0bdc 34D08DE2 		add	sp, sp, #52	@,,
 2628              		.cfi_remember_state
 2629              		.cfi_def_cfa_offset 4
 2630              		@ sp needed	@
 2631 0be0 04F09DE4 		ldr	pc, [sp], #4	@
 2632              	.LVL162:
 2633              	.L154:
 2634              		.cfi_restore_state
 519:armwave.c     ****         Py_RETURN_FALSE;
 2635              		.loc 1 519 9 is_stmt 1 view .LVU670
 2636 0be4 20009FE5 		ldr	r0, .L155+4	@,
 2637              	.LVL163:
 519:armwave.c     ****         Py_RETURN_FALSE;
 2638              		.loc 1 519 9 is_stmt 0 view .LVU671
 2639 0be8 FEFFFFEB 		bl	puts		@
 2640              	.LVL164:
 520:armwave.c     ****     }
 2641              		.loc 1 520 9 is_stmt 1 view .LVU672
 2642              	.LBB35:
 2643              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2644              		.loc 2 456 20 view .LVU673
 2645              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2646              		.loc 2 458 21 view .LVU674
 2647              		.loc 2 459 5 view .LVU675
 2648              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2649              		.loc 2 459 18 is_stmt 0 view .LVU676
 2650 0bec 1C309FE5 		ldr	r3, .L155+8	@ tmp120,
 2651              	.LBE36:
 2652              	.LBE35:
 2653              	@ armwave.c:520:         Py_RETURN_FALSE;
 520:armwave.c     ****     }
 2654              		.loc 1 520 9 view .LVU677
 2655 0bf0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2656              	.LBB38:
 2657              	.LBB37:
 2658              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2659              		.loc 2 459 18 view .LVU678
 2660 0bf4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2661 0bf8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2662 0bfc 002083E5 		str	r2, [r3]	@ tmp122,
 2663              	.LBE37:
 2664              	.LBE38:
 2665              	@ armwave.c:532: }
 2666              		.loc 1 532 1 view .LVU679
 2667 0c00 34D08DE2 		add	sp, sp, #52	@,,
 2668              		.cfi_def_cfa_offset 4
 2669              		@ sp needed	@
 2670 0c04 04F09DE4 		ldr	pc, [sp], #4	@
 2671              	.L156:
 2672              		.align	2
 2673              	.L155:
 2674 0c08 00000000 		.word	_Py_TrueStruct
 2675 0c0c 3C020000 		.word	.LC19
 2676 0c10 00000000 		.word	_Py_FalseStruct
 2677              		.cfi_endproc
 2678              	.LFE74:
 2680              		.align	2
 2681              		.global	armwave_test_create_am_sine
 2682              		.syntax unified
 2683              		.arm
 2684              		.fpu vfp
 2686              	armwave_test_create_am_sine:
 2687              	.LVL165:
 2688              	.LFB75:
 533:armwave.c     **** 
 534:armwave.c     **** /*
 535:armwave.c     ****  * Make a test AM waveform for render tests.
 536:armwave.c     ****  *
 537:armwave.c     ****  * @param   mod                     modulation depth
 538:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 539:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 540:armwave.c     ****  */
 541:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 542:armwave.c     **** {
 2689              		.loc 1 542 1 is_stmt 1 view -0
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 8
 2692              		@ frame_needed = 0, uses_anonymous_args = 0
 543:armwave.c     ****     float v, noise, xnoise, mod_val;
 2693              		.loc 1 543 5 view .LVU681
 544:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2694              		.loc 1 544 5 view .LVU682
 2695              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2696              		.loc 1 542 1 is_stmt 0 view .LVU683
 2697 0c14 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2698              		.cfi_def_cfa_offset 32
 2699              		.cfi_offset 4, -32
 2700              		.cfi_offset 5, -28
 2701              		.cfi_offset 6, -24
 2702              		.cfi_offset 7, -20
 2703              		.cfi_offset 8, -16
 2704              		.cfi_offset 9, -12
 2705              		.cfi_offset 10, -8
 2706              		.cfi_offset 14, -4
 2707              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2708              		.loc 1 544 38 view .LVU684
 2709 0c18 7A7A9FED 		vldr.32	s14, .L188	@ tmp180,
 2710              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2711              		.loc 1 544 55 view .LVU685
 2712 0c1c 00529FE5 		ldr	r5, .L188+28	@ tmp250,
 2713              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2714              		.loc 1 542 1 view .LVU686
 2715 0c20 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2716              		.cfi_def_cfa_offset 80
 2717              		.cfi_offset 80, -80
 2718              		.cfi_offset 81, -76
 2719              		.cfi_offset 82, -72
 2720              		.cfi_offset 83, -68
 2721              		.cfi_offset 84, -64
 2722              		.cfi_offset 85, -60
 2723              		.cfi_offset 86, -56
 2724              		.cfi_offset 87, -52
 2725              		.cfi_offset 88, -48
 2726              		.cfi_offset 89, -44
 2727              		.cfi_offset 90, -40
 2728              		.cfi_offset 91, -36
 2729 0c24 0090A0E1 		mov	r9, r0	@ sets, sets
 2730              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2731              		.loc 1 544 38 view .LVU687
 2732 0c28 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2733              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 545:armwave.c     ****     int s, set_offset = 0;
 546:armwave.c     ****     int w, x;
 547:armwave.c     **** 
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2734              		.loc 1 548 70 view .LVU688
 2735 0c2c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2736 0c30 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2737              	.LBB41:
 2738              	.LBB42:
 2739              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2740              		.loc 1 491 23 view .LVU689
 2741 0c34 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2742              	.LVL166:
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2743              		.loc 1 491 23 view .LVU690
 2744              	.LBE42:
 2745              	.LBE41:
 2746              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 2747              		.loc 1 544 38 view .LVU691
 2748 0c38 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2749              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2750              		.loc 1 548 70 view .LVU692
 2751 0c3c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2752              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2753              		.loc 1 542 1 view .LVU693
 2754 0c40 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2755              	.LBB46:
 2756              	.LBB43:
 2757              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2758              		.loc 1 491 7 view .LVU694
 2759 0c44 000050E3 		cmp	r0, #0	@ _82,
 2760              	.LBE43:
 2761              	.LBE46:
 2762              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2763              		.loc 1 542 1 view .LVU695
 2764 0c48 08D04DE2 		sub	sp, sp, #8	@,,
 2765              		.cfi_def_cfa_offset 88
 2766              	@ armwave.c:549:     g_armwave_state.test_wave_buffer_nsets = sets;
 549:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2767              		.loc 1 549 44 view .LVU696
 2768 0c4c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2769              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2770              		.loc 1 548 45 view .LVU697
 2771 0c50 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2772              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 2773              		.loc 1 544 38 view .LVU698
 2774 0c54 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2775              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 2776              		.loc 1 544 11 view .LVU699
 2777 0c58 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2778              	.LVL167:
 545:armwave.c     ****     int w, x;
 2779              		.loc 1 545 5 is_stmt 1 view .LVU700
 546:armwave.c     **** 
 2780              		.loc 1 546 5 view .LVU701
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2781              		.loc 1 548 5 view .LVU702
 2782              		.loc 1 549 5 view .LVU703
 550:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2783              		.loc 1 550 5 view .LVU704
 2784              	.LBB47:
 2785              	.LBI41:
 489:armwave.c     **** {
 2786              		.loc 1 489 6 view .LVU705
 2787              	.LBB44:
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2788              		.loc 1 491 5 view .LVU706
 2789              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2790              		.loc 1 491 7 is_stmt 0 view .LVU707
 2791 0c5c 0000000A 		beq	.L158		@,
 492:armwave.c     ****     }
 2792              		.loc 1 492 9 is_stmt 1 view .LVU708
 2793 0c60 FEFFFFEB 		bl	free		@
 2794              	.LVL168:
 2795              	.L158:
 497:armwave.c     **** 
 2796              		.loc 1 497 5 view .LVU709
 2797              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2798              		.loc 1 497 75 is_stmt 0 view .LVU710
 2799 0c64 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2800 0c68 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2801              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2802              		.loc 1 497 40 view .LVU711
 2803 0c6c 0910A0E1 		mov	r1, r9	@, sets
 2804              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2805              		.loc 1 497 75 view .LVU712
 2806 0c70 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2807              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2808              		.loc 1 497 40 view .LVU713
 2809 0c74 0400A0E1 		mov	r0, r4	@, _85
 2810 0c78 FEFFFFEB 		bl	calloc		@
 2811              	.LVL169:
 2812              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2813              		.loc 1 499 7 view .LVU714
 2814 0c7c 000050E3 		cmp	r0, #0	@ tmp191,
 2815              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2816              		.loc 1 497 38 view .LVU715
 2817 0c80 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2818              		.loc 1 499 5 is_stmt 1 view .LVU716
 2819              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2820              		.loc 1 499 7 is_stmt 0 view .LVU717
 2821 0c84 5A00000A 		beq	.L187		@,
 2822              	.L159:
 2823              	.LVL170:
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2824              		.loc 1 499 7 view .LVU718
 2825              	.LBE44:
 2826              	.LBE47:
 2827              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 551:armwave.c     **** 
 552:armwave.c     ****     for(s = 0; s < sets; s++) {
 2828              		.loc 1 552 5 discriminator 1 view .LVU719
 2829 0c88 000059E3 		cmp	r9, #0	@ sets,
 2830 0c8c 550000DA 		ble	.L157		@,
 2831              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 554:armwave.c     ****     
 555:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 556:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 557:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 558:armwave.c     **** 
 559:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 560:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 561:armwave.c     ****                 noise *= noise;
 562:armwave.c     ****                 noise *= noise;
 563:armwave.c     ****                 noise *= noise;
 564:armwave.c     **** 
 565:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 566:armwave.c     ****                     noise = -noise;
 567:armwave.c     **** 
 568:armwave.c     ****                 noise += 1.0f;
 569:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 570:armwave.c     **** 
 571:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2832              		.loc 1 571 45 view .LVU720
 2833 0c90 5C8A9FED 		vldr.32	s16, .L188	@ tmp258,
 2834              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 572:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 573:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 574:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2835              		.loc 1 574 104 view .LVU721
 2836 0c94 5CCA9FED 		vldr.32	s24, .L188+4	@ tmp259,
 2837              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 2838              		.loc 1 552 5 view .LVU722
 2839 0c98 0070A0E3 		mov	r7, #0	@ set_offset,
 2840              	@ armwave.c:553:         printf("Calculating test set %d\n", s);
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 2841              		.loc 1 553 9 view .LVU723
 2842 0c9c 84A19FE5 		ldr	r10, .L188+32	@ tmp257,
 2843              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 2844              		.loc 1 552 5 view .LVU724
 2845 0ca0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2846              	.LVL171:
 2847              	.L160:
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 2848              		.loc 1 553 9 is_stmt 1 view .LVU725
 2849 0ca4 0810A0E1 		mov	r1, r8	@, s
 2850 0ca8 0A00A0E1 		mov	r0, r10	@, tmp257
 2851 0cac FEFFFFEB 		bl	printf		@
 2852              	.LVL172:
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2853              		.loc 1 555 9 view .LVU726
 2854              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2855              		.loc 1 555 39 is_stmt 0 view .LVU727
 2856 0cb0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2857              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2858              		.loc 1 555 9 view .LVU728
 2859 0cb4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2860 0cb8 450000DA 		ble	.L161		@,
 2861              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 2862              		.loc 1 557 21 view .LVU729
 2863 0cbc 53CADFED 		vldr.32	s25, .L188+8	@ tmp200,
 2864              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2865              		.loc 1 571 33 view .LVU730
 2866 0cc0 53BA9FED 		vldr.32	s22, .L188+12	@ tmp253,
 2867              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2868              		.loc 1 569 24 view .LVU731
 2869 0cc4 53AADFED 		vldr.32	s21, .L188+16	@ tmp254,
 2870 0cc8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2871              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2872              		.loc 1 555 15 view .LVU732
 2873 0ccc 0060A0E3 		mov	r6, #0	@ w,
 2874              	.LVL173:
 2875              	.L168:
 557:armwave.c     **** 
 2876              		.loc 1 557 13 is_stmt 1 view .LVU733
 2877              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 2878              		.loc 1 557 21 is_stmt 0 view .LVU734
 2879 0cd0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2880 0cd4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2881              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2882              		.loc 1 559 13 view .LVU735
 2883 0cd8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2884              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 2885              		.loc 1 557 21 view .LVU736
 2886 0cdc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2887 0ce0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2888              	.LVL174:
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2889              		.loc 1 559 13 is_stmt 1 view .LVU737
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2890              		.loc 1 559 13 is_stmt 0 view .LVU738
 2891 0ce4 370000DA 		ble	.L162		@,
 2892 0ce8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2893              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2894              		.loc 1 574 113 view .LVU739
 2895 0cec 4AAA9FED 		vldr.32	s20, .L188+20	@ tmp229,
 2896 0cf0 4A8ADFED 		vldr.32	s17, .L188+24	@ tmp230,
 2897              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2898              		.loc 1 559 19 view .LVU740
 2899 0cf4 0040A0E3 		mov	r4, #0	@ x,
 2900              	.LVL175:
 2901              	.L167:
 560:armwave.c     ****                 noise *= noise;
 2902              		.loc 1 560 17 is_stmt 1 view .LVU741
 2903              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 2904              		.loc 1 560 28 is_stmt 0 view .LVU742
 2905 0cf8 FEFFFFEB 		bl	rand		@
 2906              	.LVL176:
 2907              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 2908              		.loc 1 560 35 view .LVU743
 2909 0cfc 7000FFE6 		uxth	r0, r0	@ tmp201,
 2910              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 2911              		.loc 1 560 45 view .LVU744
 2912 0d00 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2913 0d04 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2914              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 2915              		.loc 1 560 24 view .LVU745
 2916 0d08 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2917              	.LVL177:
 561:armwave.c     ****                 noise *= noise;
 2918              		.loc 1 561 17 is_stmt 1 view .LVU746
 2919              	@ armwave.c:561:                 noise *= noise;
 561:armwave.c     ****                 noise *= noise;
 2920              		.loc 1 561 23 is_stmt 0 view .LVU747
 2921 0d0c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2922              	.LVL178:
 562:armwave.c     ****                 noise *= noise;
 2923              		.loc 1 562 17 is_stmt 1 view .LVU748
 2924              	@ armwave.c:562:                 noise *= noise;
 562:armwave.c     ****                 noise *= noise;
 2925              		.loc 1 562 23 is_stmt 0 view .LVU749
 2926 0d10 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2927              	.LVL179:
 563:armwave.c     **** 
 2928              		.loc 1 563 17 is_stmt 1 view .LVU750
 2929              	@ armwave.c:563:                 noise *= noise;
 563:armwave.c     **** 
 2930              		.loc 1 563 23 is_stmt 0 view .LVU751
 2931 0d14 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2932              	.LVL180:
 565:armwave.c     ****                     noise = -noise;
 2933              		.loc 1 565 17 is_stmt 1 view .LVU752
 2934              	@ armwave.c:565:                 if((rand() & 0xffff) > 0x7fff)
 565:armwave.c     ****                     noise = -noise;
 2935              		.loc 1 565 21 is_stmt 0 view .LVU753
 2936 0d18 FEFFFFEB 		bl	rand		@
 2937              	.LVL181:
 566:armwave.c     **** 
 2938              		.loc 1 566 21 is_stmt 1 view .LVU754
 2939              	@ armwave.c:565:                 if((rand() & 0xffff) > 0x7fff)
 565:armwave.c     ****                     noise = -noise;
 2940              		.loc 1 565 19 is_stmt 0 view .LVU755
 2941 0d1c 020910E3 		tst	r0, #32768	@,
 2942              	@ armwave.c:566:                     noise = -noise;
 566:armwave.c     **** 
 2943              		.loc 1 566 27 view .LVU756
 2944 0d20 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2945              	.LVL182:
 568:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2946              		.loc 1 568 17 is_stmt 1 view .LVU757
 569:armwave.c     **** 
 2947              		.loc 1 569 17 view .LVU758
 2948              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2949              		.loc 1 569 27 is_stmt 0 view .LVU759
 2950 0d24 FEFFFFEB 		bl	rand		@
 2951              	.LVL183:
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2952              		.loc 1 571 17 is_stmt 1 view .LVU760
 2953              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2954              		.loc 1 571 45 is_stmt 0 view .LVU761
 2955 0d28 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2956              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2957              		.loc 1 571 33 view .LVU762
 2958 0d2c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2959              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2960              		.loc 1 571 45 view .LVU763
 2961 0d30 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2962              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2963              		.loc 1 571 33 view .LVU764
 2964 0d34 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2965              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2966              		.loc 1 571 45 view .LVU765
 2967 0d38 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2968              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2969              		.loc 1 571 33 view .LVU766
 2970 0d3c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2971              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2972              		.loc 1 569 34 view .LVU767
 2973 0d40 7000FFE6 		uxth	r0, r0	@ tmp214,
 2974              	.LVL184:
 2975              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2976              		.loc 1 569 44 view .LVU768
 2977 0d44 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2978 0d48 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2979              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2980              		.loc 1 569 24 view .LVU769
 2981 0d4c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2982              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2983              		.loc 1 571 77 view .LVU770
 2984 0d50 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2985              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2986              		.loc 1 571 22 view .LVU771
 2987 0d54 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2988 0d58 FEFFFFEB 		bl	sin		@
 2989              	.LVL185:
 2990              		.loc 1 574 17 is_stmt 1 view .LVU772
 2991              	@ armwave.c:568:                 noise += 1.0f;
 568:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2992              		.loc 1 568 23 is_stmt 0 view .LVU773
 2993 0d5c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2994              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2995              		.loc 1 574 104 view .LVU774
 2996 0d60 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2997              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2998              		.loc 1 571 98 view .LVU775
 2999 0d64 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3000              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3001              		.loc 1 571 87 view .LVU776
 3002 0d68 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3003              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3004              		.loc 1 571 98 view .LVU777
 3005 0d6c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3006              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3007              		.loc 1 571 19 view .LVU778
 3008 0d70 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3009              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3010              		.loc 1 574 113 view .LVU779
 3011 0d74 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3012 0d78 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3013 0d7c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3014 0d80 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3015 0d84 050000DA 		ble	.L164		@,
 3016              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3017              		.loc 1 574 104 discriminator 1 view .LVU780
 3018 0d88 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3019 0d8c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3020 0d90 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3021 0d94 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3022 0d98 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3023 0d9c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3024              	.L164:
 3025              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3026              		.loc 1 574 57 discriminator 12 view .LVU781
 3027 0da0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3028              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3029              		.loc 1 574 102 discriminator 12 view .LVU782
 3030 0da4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3031 0da8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3032 0dac 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3033              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3034              		.loc 1 559 58 discriminator 12 view .LVU783
 3035 0db0 014084E2 		add	r4, r4, #1	@ x, x,
 3036              	.LVL186:
 3037              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3038              		.loc 1 574 102 discriminator 12 view .LVU784
 3039 0db4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3040              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3041              		.loc 1 559 43 discriminator 12 view .LVU785
 3042 0db8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3043              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3044              		.loc 1 559 13 discriminator 12 view .LVU786
 3045 0dbc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3046 0dc0 CCFFFFCA 		bgt	.L167		@,
 3047 0dc4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3048              	.LVL187:
 3049              	.L162:
 3050              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3051              		.loc 1 555 48 discriminator 2 view .LVU787
 3052 0dc8 016086E2 		add	r6, r6, #1	@ w, w,
 3053              	.LVL188:
 3054              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3055              		.loc 1 555 9 discriminator 2 view .LVU788
 3056 0dcc 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3057 0dd0 BEFFFFBA 		blt	.L168		@,
 3058              	.LVL189:
 3059              	.L161:
 575:armwave.c     ****             }
 576:armwave.c     ****         }
 577:armwave.c     **** 
 578:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3060              		.loc 1 578 9 is_stmt 1 discriminator 2 view .LVU789
 3061              	@ armwave.c:578:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3062              		.loc 1 578 46 is_stmt 0 discriminator 2 view .LVU790
 3063 0dd4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3064              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3065              		.loc 1 552 27 discriminator 2 view .LVU791
 3066 0dd8 018088E2 		add	r8, r8, #1	@ s, s,
 3067              	.LVL190:
 3068              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3069              		.loc 1 552 5 discriminator 2 view .LVU792
 3070 0ddc 080059E1 		cmp	r9, r8	@ sets, s
 3071              	@ armwave.c:578:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3072              		.loc 1 578 20 discriminator 2 view .LVU793
 3073 0de0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3074              	.LVL191:
 3075              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3076              		.loc 1 552 5 discriminator 2 view .LVU794
 3077 0de4 AEFFFF1A 		bne	.L160		@,
 3078              	.LVL192:
 3079              	.L157:
 3080              	@ armwave.c:580: }
 579:armwave.c     ****     }
 580:armwave.c     **** }
 3081              		.loc 1 580 1 view .LVU795
 3082 0de8 08D08DE2 		add	sp, sp, #8	@,,
 3083              		.cfi_remember_state
 3084              		.cfi_def_cfa_offset 80
 3085              		@ sp needed	@
 3086 0dec 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3087              		.cfi_restore 90
 3088              		.cfi_restore 91
 3089              		.cfi_restore 88
 3090              		.cfi_restore 89
 3091              		.cfi_restore 86
 3092              		.cfi_restore 87
 3093              		.cfi_restore 84
 3094              		.cfi_restore 85
 3095              		.cfi_restore 82
 3096              		.cfi_restore 83
 3097              		.cfi_restore 80
 3098              		.cfi_restore 81
 3099              		.cfi_def_cfa_offset 32
 3100              	.LVL193:
 3101              		.loc 1 580 1 view .LVU796
 3102 0df0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3103              	.LVL194:
 3104              	.L187:
 3105              		.cfi_restore_state
 3106              	.LBB48:
 3107              	.LBB45:
 500:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3108              		.loc 1 500 9 is_stmt 1 view .LVU797
 3109 0df4 940901E0 		mul	r1, r4, r9	@, _85, sets
 3110 0df8 0920A0E1 		mov	r2, r9	@, sets
 3111 0dfc 28009FE5 		ldr	r0, .L188+36	@,
 3112 0e00 FEFFFFEB 		bl	printf		@
 3113              	.LVL195:
 502:armwave.c     ****     }
 3114              		.loc 1 502 9 view .LVU798
 3115 0e04 9FFFFFEA 		b	.L159		@
 3116              	.L189:
 3117              		.align	2
 3118              	.L188:
 3119 0e08 0000803F 		.word	1065353216
 3120 0e0c 00007F43 		.word	1132396544
 3121 0e10 0000003F 		.word	1056964608
 3122 0e14 C3F5C840 		.word	1086911939
 3123 0e18 38FFC74A 		.word	1254620984
 3124 0e1c 0000FE42 		.word	1123942400
 3125 0e20 00000043 		.word	1124073472
 3126 0e24 00000000 		.word	g_armwave_state
 3127 0e28 90020000 		.word	.LC20
 3128 0e2c E8010000 		.word	.LC18
 3129              	.LBE45:
 3130              	.LBE48:
 3131              		.cfi_endproc
 3132              	.LFE75:
 3134              		.align	2
 3135              		.global	armwave_cleanup
 3136              		.syntax unified
 3137              		.arm
 3138              		.fpu vfp
 3140              	armwave_cleanup:
 3141              	.LFB76:
 581:armwave.c     **** 
 582:armwave.c     **** /*
 583:armwave.c     ****  * Make a test square waveform.
 584:armwave.c     ****  *
 585:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 586:armwave.c     ****  */
 587:armwave.c     **** #if 0
 588:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 589:armwave.c     **** {
 590:armwave.c     ****     uint8_t v;
 591:armwave.c     ****     float noise, xnoise;
 592:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 593:armwave.c     ****     int w, x;
 594:armwave.c     **** 
 595:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 596:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 597:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 598:armwave.c     ****             noise *= noise;
 599:armwave.c     ****             noise *= noise;
 600:armwave.c     ****             noise *= noise;
 601:armwave.c     **** 
 602:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 603:armwave.c     ****                 noise = -noise;
 604:armwave.c     **** 
 605:armwave.c     ****             //noise += 1.0f;
 606:armwave.c     **** 
 607:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 608:armwave.c     ****                 new_level = 0.2f;
 609:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 610:armwave.c     ****                 new_level = 0.8f;
 611:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 612:armwave.c     ****                 new_level = 0.2f;
 613:armwave.c     ****             } else {
 614:armwave.c     ****                 new_level = 0.8f;
 615:armwave.c     ****             }
 616:armwave.c     **** 
 617:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 618:armwave.c     **** 
 619:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 620:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 621:armwave.c     ****         }
 622:armwave.c     ****     }
 623:armwave.c     **** }
 624:armwave.c     **** #endif
 625:armwave.c     **** 
 626:armwave.c     **** /*
 627:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 628:armwave.c     ****  */
 629:armwave.c     **** void armwave_cleanup()
 630:armwave.c     **** {
 3142              		.loc 1 630 1 view -0
 3143              		.cfi_startproc
 3144              		@ args = 0, pretend = 0, frame = 0
 3145              		@ frame_needed = 0, uses_anonymous_args = 0
 631:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3146              		.loc 1 631 5 view .LVU800
 3147              	@ armwave.c:630: {
 630:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3148              		.loc 1 630 1 is_stmt 0 view .LVU801
 3149 0e30 10402DE9 		push	{r4, lr}	@
 3150              		.cfi_def_cfa_offset 8
 3151              		.cfi_offset 4, -8
 3152              		.cfi_offset 14, -4
 3153              	@ armwave.c:631:     free(g_armwave_state.out_pixbuf);
 3154              		.loc 1 631 25 view .LVU802
 3155 0e34 34409FE5 		ldr	r4, .L192	@ tmp114,
 3156              	@ armwave.c:631:     free(g_armwave_state.out_pixbuf);
 3157              		.loc 1 631 5 view .LVU803
 3158 0e38 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3159 0e3c FEFFFFEB 		bl	free		@
 3160              	.LVL196:
 632:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3161              		.loc 1 632 5 is_stmt 1 view .LVU804
 3162 0e40 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3163 0e44 FEFFFFEB 		bl	free		@
 3164              	.LVL197:
 633:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3165              		.loc 1 633 5 view .LVU805
 3166 0e48 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3167 0e4c FEFFFFEB 		bl	free		@
 3168              	.LVL198:
 634:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3169              		.loc 1 634 5 view .LVU806
 3170 0e50 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3171 0e54 FEFFFFEB 		bl	free		@
 3172              	.LVL199:
 635:armwave.c     **** 
 636:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3173              		.loc 1 636 5 view .LVU807
 3174              	@ armwave.c:636:     g_armwave_state.out_pixbuf = NULL;
 3175              		.loc 1 636 32 is_stmt 0 view .LVU808
 3176 0e58 0030A0E3 		mov	r3, #0	@ tmp123,
 3177 0e5c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 637:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3178              		.loc 1 637 5 is_stmt 1 view .LVU809
 3179              	@ armwave.c:637:     g_armwave_state.ch1_buffer = NULL;
 3180              		.loc 1 637 32 is_stmt 0 view .LVU810
 3181 0e60 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 638:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3182              		.loc 1 638 5 is_stmt 1 view .LVU811
 3183              	@ armwave.c:638:     g_armwave_state.xcoord_to_xpixel = NULL;
 3184              		.loc 1 638 38 is_stmt 0 view .LVU812
 3185 0e64 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 639:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3186              		.loc 1 639 5 is_stmt 1 view .LVU813
 3187              	@ armwave.c:639:     g_armwave_state.test_wave_buffer = NULL;
 3188              		.loc 1 639 38 is_stmt 0 view .LVU814
 3189 0e68 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3190              	@ armwave.c:640: }
 640:armwave.c     **** }
 3191              		.loc 1 640 1 view .LVU815
 3192 0e6c 1080BDE8 		pop	{r4, pc}	@
 3193              	.L193:
 3194              		.align	2
 3195              	.L192:
 3196 0e70 00000000 		.word	g_armwave_state
 3197              		.cfi_endproc
 3198              	.LFE76:
 3200              		.comm	gamma_table,256,4
 3201              		.comm	g_armwave_state,136,4
 3202              		.section	.rodata
 3203              		.align	2
 3204              		.set	.LANCHOR0,. + 0
 3207              	__PRETTY_FUNCTION__.17095:
 3208 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3208      6176655F 
 3208      66696C6C 
 3208      5F706978 
 3208      6275665F 
 3209 001b 00       		.space	1
 3212              	__PRETTY_FUNCTION__.17125:
 3213 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3213      6176655F 
 3213      73657475 
 3213      705F7265 
 3213      6E646572 
 3214 0031 000000   		.space	3
 3217              	__PRETTY_FUNCTION__.17132:
 3218 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3218      6176655F 
 3218      7365745F 
 3218      77617665 
 3218      5F706F69 
 3219 004d 000000   		.space	3
 3222              	__PRETTY_FUNCTION__.17139:
 3223 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3223      6176655F 
 3223      7365745F 
 3223      77617665 
 3223      5F706F69 
 3224              		.section	.rodata.str1.4,"aMS",%progbits,1
 3225              		.align	2
 3226              	.LC0:
 3227 0000 76302E30 		.ascii	"v0.0.1\000"
 3227      2E3100
 3228 0007 00       		.space	1
 3229              	.LC1:
 3230 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3230      61766520 
 3230      76657273 
 3230      696F6E3A 
 3230      2025730A 
 3231 001d 000000   		.space	3
 3232              	.LC2:
 3233 0020 61726D77 		.ascii	"armwave.c\000"
 3233      6176652E 
 3233      6300
 3234 002a 0000     		.space	2
 3235              	.LC3:
 3236 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3236      62756666 
 3236      65722021 
 3236      3D204E55 
 3236      4C4C00
 3237 003f 00       		.space	1
 3238              	.LC4:
 3239 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3239      20653D25 
 3239      6420773D 
 3239      25642077 
 3239      733D2564 
 3240              	.LC5:
 3241 006c 73746172 		.ascii	"start_point < end_point\000"
 3241      745F706F 
 3241      696E7420 
 3241      3C20656E 
 3241      645F706F 
 3242              	.LC6:
 3243 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3243      7566665F 
 3243      73697A65 
 3243      3D25642C 
 3243      20636D70 
 3244 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3244      5F776964 
 3244      74683D25 
 3244      642C2077 
 3244      6176655F 
 3245 00e1 000000   		.space	3
 3246              	.LC7:
 3247 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3247      6D776176 
 3247      655F7374 
 3247      6174652E 
 3247      6368315F 
 3248 0107 00       		.space	1
 3249              	.LC8:
 3250 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3250      6D776176 
 3250      655F7374 
 3250      6174652E 
 3250      78636F6F 
 3251 0131 000000   		.space	3
 3252              	.LC9:
 3253 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3253      3A203078 
 3253      25303878 
 3253      20307825 
 3253      30387820 
 3254              	.LC10:
 3255 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3255      5F627566 
 3255      66657220 
 3255      213D204E 
 3255      554C4C00 
 3256              	.LC11:
 3257 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3257      6176655F 
 3257      7365745F 
 3257      77617665 
 3257      5F706F69 
 3258 019f 78636565 		.ascii	"xceeded\000"
 3258      64656400 
 3259 01a7 00       		.space	1
 3260              	.LC12:
 3261 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3261      5F627566 
 3261      6665725F 
 3261      70747220 
 3261      213D2030 
 3262 01bd 000000   		.space	3
 3263              	.LC13:
 3264 01c0 776200   		.ascii	"wb\000"
 3265 01c3 00       		.space	1
 3266              	.LC14:
 3267 01c4 50330A00 		.ascii	"P3\012\000"
 3268              	.LC15:
 3269 01c8 25642025 		.ascii	"%d %d\012\000"
 3269      640A00
 3270 01cf 00       		.space	1
 3271              	.LC16:
 3272 01d0 3235350A 		.ascii	"255\012\000"
 3272      00
 3273 01d5 000000   		.space	3
 3274              	.LC17:
 3275 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3275      25336420 
 3275      2533640A 
 3275      00
 3276 01e5 000000   		.space	3
 3277              	.LC18:
 3278 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3278      6176655F 
 3278      74657374 
 3278      5F627566 
 3278      6665725F 
 3279 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3279      20627566 
 3279      66657220 
 3279      28256420 
 3279      62797465 
 3280              	.LC19:
 3281 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3281      6176655F 
 3281      66696C6C 
 3281      5F706978 
 3281      6275665F 
 3282 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3282      20666169 
 3282      6C65642C 
 3282      20726574 
 3282      75726E69 
 3283 028e 0000     		.space	2
 3284              	.LC20:
 3285 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3285      756C6174 
 3285      696E6720 
 3285      74657374 
 3285      20736574 
 3286              		.text
 3287              	.Letext0:
 3288              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3289              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3290              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3291              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3292              		.file 7 "/usr/include/stdio.h"
 3293              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3294              		.file 9 "/usr/include/errno.h"
 3295              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3296              		.file 11 "/usr/include/unistd.h"
 3297              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3298              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3299              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3300              		.file 15 "/usr/include/math.h"
 3301              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3302              		.file 17 "/usr/include/time.h"
 3303              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3304              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3305              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3306              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3307              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3308              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3309              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3310              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3311              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3312              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3313              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3314              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3315              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3316              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3317              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3318              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3319              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3320              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3321              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3322              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3323              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3324              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3325              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3326              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3327              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3328              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3329              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3330              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3331              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3332              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3333              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3334              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3335              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3336              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3337              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3338              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3339              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3340              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3341              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3342              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3343              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3344              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3345              		.file 60 "/usr/local/include/python3.8/context.h"
 3346              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3347              		.file 62 "/usr/local/include/python3.8/code.h"
 3348              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3349              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3350              		.file 65 "/usr/local/include/python3.8/import.h"
 3351              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3352              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3353              		.file 68 "/usr/include/malloc.h"
 3354              		.file 69 "armwave.h"
 3355              		.file 70 "/usr/include/stdlib.h"
 3356              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3357              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3358              		.file 73 "<built-in>"
 3359              		.file 74 "/usr/include/assert.h"
 3360              		.file 75 "/usr/include/string.h"
