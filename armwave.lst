   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LVL0:
  83              	.LFB72:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render
  97:armwave.c     ****  */
  98:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  99:armwave.c     **** {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 101:armwave.c     ****     uint32_t value, word;
 102:armwave.c     ****     uint8_t *wave_base;
 103:armwave.c     ****     uint8_t *write_buffer_base;
 104:armwave.c     ****     uint8_t *write_buffer;
 105:armwave.c     ****     
 106:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 107:armwave.c     **** 
 108:armwave.c     ****     // roll through each waveform
 109:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 114:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 115:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 116:armwave.c     **** #endif
 117:armwave.c     **** 
 118:armwave.c     ****         // roll through y and render the slice into the out buffer
 119:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 120:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 121:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 122:armwave.c     **** 
 123:armwave.c     **** #if 0
 124:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 125:armwave.c     **** 
 126:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 127:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 128:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 129:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 130:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 131:armwave.c     ****                    wave_base + yy);
 132:armwave.c     **** #endif
 133:armwave.c     **** 
 134:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 135:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 136:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 137:armwave.c     ****             //*(write_buffer + value) = 0xff;
 138:armwave.c     **** 
 139:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 140:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 141:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 142:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 143:armwave.c     ****                 word >>= 8;
 144:armwave.c     ****             }
 145:armwave.c     **** 
 146:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 147:armwave.c     ****         }
 148:armwave.c     ****     }
 149:armwave.c     **** }
 150:armwave.c     **** 
 151:armwave.c     **** void armwave_init()
 152:armwave.c     **** {
 153:armwave.c     ****     g_armwave_state.flags = 0;
 154:armwave.c     **** }
 155:armwave.c     **** 
 156:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  85              		.loc 1 156 6 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 157:armwave.c     **** {
 158:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 158 5 view .LVU1
 159:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 159 5 view .LVU2
 160:armwave.c     **** 
 161:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 161 5 view .LVU3
 162:armwave.c     **** 
 163:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 164:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 164 5 view .LVU4
  93              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
  94              		.loc 1 156 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 165:armwave.c     **** 
 166:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 167:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 102              		.loc 1 167 5 view .LVU6
 103 0004 012C41E2 		sub	r2, r1, #256	@ tmp140, target_height,
 104              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 105              		.loc 1 164 33 view .LVU7
 106 0008 90419FE5 		ldr	r4, .L21+8	@ tmp207,
 107 000c 90319FE5 		ldr	r3, .L21+12	@ tmp139,
 108              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109              		.loc 1 167 5 view .LVU8
 110 0010 012CD2E3 		bics	r2, r2, #256	@ tmp209, tmp140,
 111              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
 112              		.loc 1 156 6 view .LVU9
 113 0014 028B2DED 		vpush.64	{d8}	@
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 80, -24
 116              		.cfi_offset 81, -20
 117              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
 118              		.loc 1 156 6 view .LVU10
 119 0018 0050A0E1 		mov	r5, r0	@ target_width, target_width
 120              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 121              		.loc 1 164 33 view .LVU11
 122 001c 143084E5 		str	r3, [r4, #20]	@ tmp139, g_armwave_state.wave_buffer
 123              		.loc 1 167 5 is_stmt 1 view .LVU12
 124 0020 4200000A 		beq	.L2		@,
 125 0024 013B41E2 		sub	r3, r1, #1024	@ tmp142, target_height,
 126 0028 013BD3E3 		bics	r3, r3, #1024	@ tmp210, tmp142,
 127 002c 4A00001A 		bne	.L17		@,
 168:armwave.c     **** 
 169:armwave.c     ****     if(target_height == 256) {
 170:armwave.c     ****         g_armwave_state.row_shift = 8;
 171:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 172:armwave.c     ****     } else if(target_height == 512) {
 128              		.loc 1 172 12 view .LVU13
 173:armwave.c     ****         g_armwave_state.row_shift = 9;
 174:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 175:armwave.c     ****     } else if(target_height == 1024) {
 129              		.loc 1 175 12 view .LVU14
 130              	@ armwave.c:175:     } else if(target_height == 1024) {
 131              		.loc 1 175 14 is_stmt 0 view .LVU15
 132 0030 010B51E3 		cmp	r1, #1024	@ target_height,
 133 0034 4400000A 		beq	.L18		@,
 176:armwave.c     ****         g_armwave_state.row_shift = 10;
 177:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 178:armwave.c     ****     } else if(target_height == 2048) {
 134              		.loc 1 178 12 is_stmt 1 view .LVU16
 135              	@ armwave.c:178:     } else if(target_height == 2048) {
 136              		.loc 1 178 14 is_stmt 0 view .LVU17
 137 0038 020B51E3 		cmp	r1, #2048	@ target_height,
 179:armwave.c     ****         g_armwave_state.row_shift = 11;
 138              		.loc 1 179 9 is_stmt 1 view .LVU18
 139              	@ armwave.c:179:         g_armwave_state.row_shift = 11;
 140              		.loc 1 179 35 is_stmt 0 view .LVU19
 141 003c 0B20A003 		moveq	r2, #11	@ tmp162,
 142 0040 60319F05 		ldreq	r3, .L21+16	@ tmp160,
 143 0044 FC23C401 		strdeq	r2, [r4, #60]	@, tmp207,
 180:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 144              		.loc 1 180 9 is_stmt 1 view .LVU20
 145              	.L5:
 181:armwave.c     ****     } 
 182:armwave.c     **** 
 183:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 184:armwave.c     ****     g_armwave_state.xstride = target_height;
 146              		.loc 1 184 5 view .LVU21
 147              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 148              		.loc 1 185 44 is_stmt 0 view .LVU22
 149 0048 2134A0E1 		lsr	r3, r1, #8	@ tmp165, target_height,
 150              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 186:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 187:armwave.c     ****     g_armwave_state.waves = waves;
 188:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 151              		.loc 1 188 42 view .LVU23
 152 004c 950106E0 		mul	r6, r5, r1	@ _10, target_width, target_height
 153              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 189:armwave.c     ****     g_armwave_state.target_width = target_width;
 190:armwave.c     ****     g_armwave_state.target_height = target_height;
 191:armwave.c     **** 
 192:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 193:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 194:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 195:armwave.c     ****     g_armwave_state.slice_height = 64;  
 196:armwave.c     **** 
 197:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 154              		.loc 1 197 23 view .LVU24
 155 0050 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 156              	.LVL1:
 157              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 158              		.loc 1 186 33 view .LVU25
 159 0054 022BA0E3 		mov	r2, #2048	@ tmp167,
 160              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 161              		.loc 1 185 28 view .LVU26
 162 0058 1C3084E5 		str	r3, [r4, #28]	@ tmp165, g_armwave_state.vscale
 163              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 164              		.loc 1 187 27 view .LVU27
 165 005c 4030A0E3 		mov	r3, #64	@ tmp169,
 166              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 167              		.loc 1 197 7 view .LVU28
 168 0060 000050E3 		cmp	r0, #0	@ _11,
 169              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 170              		.loc 1 184 29 view .LVU29
 171 0064 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 172              		.loc 1 185 5 is_stmt 1 view .LVU30
 186:armwave.c     ****     g_armwave_state.waves = waves;
 173              		.loc 1 186 5 view .LVU31
 174              	@ armwave.c:189:     g_armwave_state.target_width = target_width;
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 175              		.loc 1 189 34 is_stmt 0 view .LVU32
 176 0068 345084E5 		str	r5, [r4, #52]	@ target_width, g_armwave_state.target_width
 177              	@ armwave.c:190:     g_armwave_state.target_height = target_height;
 190:armwave.c     **** 
 178              		.loc 1 190 35 view .LVU33
 179 006c 381084E5 		str	r1, [r4, #56]	@ target_height, g_armwave_state.target_height
 180              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 181              		.loc 1 188 26 view .LVU34
 182 0070 306084E5 		str	r6, [r4, #48]	@ _10, g_armwave_state.size
 183              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 184              		.loc 1 187 27 view .LVU35
 185 0074 F022C4E1 		strd	r2, [r4, #32]	@, tmp207,
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 186              		.loc 1 188 5 is_stmt 1 view .LVU36
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 187              		.loc 1 189 5 view .LVU37
 190:armwave.c     **** 
 188              		.loc 1 190 5 view .LVU38
 195:armwave.c     **** 
 189              		.loc 1 195 5 view .LVU39
 190              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 191              		.loc 1 195 34 is_stmt 0 view .LVU40
 192 0078 283084E5 		str	r3, [r4, #40]	@ tmp169, g_armwave_state.slice_height
 193              		.loc 1 197 5 is_stmt 1 view .LVU41
 194              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 195              		.loc 1 197 7 is_stmt 0 view .LVU42
 196 007c 0100000A 		beq	.L7		@,
 198:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 197              		.loc 1 198 9 is_stmt 1 view .LVU43
 198 0080 FEFFFFEB 		bl	free		@
 199              	.LVL2:
 200              		.loc 1 198 9 is_stmt 0 view .LVU44
 201 0084 306094E5 		ldr	r6, [r4, #48]	@ _10, g_armwave_state.size
 202              	.L7:
 199:armwave.c     **** 
 200:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 203              		.loc 1 200 5 is_stmt 1 view .LVU45
 204              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 205              		.loc 1 200 34 is_stmt 0 view .LVU46
 206 0088 0110A0E3 		mov	r1, #1	@,
 207 008c 0600A0E1 		mov	r0, r6	@, _10
 208 0090 FEFFFFEB 		bl	calloc		@
 209              	.LVL3:
 210              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 211              		.loc 1 201 33 view .LVU47
 212 0094 10219FE5 		ldr	r2, .L21+20	@ tmp180,
 213              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 202:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 203:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 214              		.loc 1 203 33 view .LVU48
 215 0098 FA30A0E3 		mov	r3, #250	@ tmp183,
 216              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 217              		.loc 1 201 33 view .LVU49
 218 009c 482084E5 		str	r2, [r4, #72]	@ tmp180, MEM[(short int *)&g_armwave_state + 72B]
 219              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 220              		.loc 1 203 33 view .LVU50
 221 00a0 BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp183, g_armwave_state.ch1_color.b
 222              	@ armwave.c:205:     assert(g_armwave_state.ch1_buffer != NULL);
 204:armwave.c     **** 
 205:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 223              		.loc 1 205 5 view .LVU51
 224 00a4 000050E3 		cmp	r0, #0	@ tmp177,
 225              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 226              		.loc 1 200 32 view .LVU52
 227 00a8 040084E5 		str	r0, [r4, #4]	@ tmp177, g_armwave_state.ch1_buffer
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 228              		.loc 1 201 5 is_stmt 1 view .LVU53
 202:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 229              		.loc 1 202 5 view .LVU54
 203:armwave.c     **** 
 230              		.loc 1 203 5 view .LVU55
 231              		.loc 1 205 5 view .LVU56
 232 00ac 2F00000A 		beq	.L19		@,
 206:armwave.c     **** 
 207:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 208:armwave.c     ****     length = end_point - start_point;
 233              		.loc 1 208 5 view .LVU57
 234              	.LVL4:
 209:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 235              		.loc 1 209 5 view .LVU58
 236              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 237              		.loc 1 209 34 is_stmt 0 view .LVU59
 238 00b0 905A07EE 		vmov	s15, r5	@ int	@ target_width, target_width
 239              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 240              		.loc 1 209 22 view .LVU60
 241 00b4 376ADFED 		vldr.32	s13, .L21	@ tmp188,
 242              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 211:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 243              		.loc 1 211 40 view .LVU61
 244 00b8 010AA0E3 		mov	r0, #4096	@,
 245              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 246              		.loc 1 209 34 view .LVU62
 247 00bc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp187, target_width
 248              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 249              		.loc 1 210 60 view .LVU63
 250 00c0 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp212, g_armwave_state.slice_height
 251 00c4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp191, tmp212
 252              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 253              		.loc 1 209 22 view .LVU64
 254 00c8 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp188, tmp187
 255              	.LVL5:
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 256              		.loc 1 210 5 is_stmt 1 view .LVU65
 257              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 258              		.loc 1 210 60 is_stmt 0 view .LVU66
 259 00cc 887A67EE 		vmul.f32	s15, s15, s16	@ tmp193, tmp191, points_per_pixel
 260              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 261              		.loc 1 210 41 view .LVU67
 262 00d0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp194, tmp193
 263 00d4 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp194, g_armwave_state.slice_record_height
 264              		.loc 1 211 5 is_stmt 1 view .LVU68
 265              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 266              		.loc 1 211 40 is_stmt 0 view .LVU69
 267 00d8 FEFFFFEB 		bl	malloc		@
 268              	.LVL6:
 269              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 212:armwave.c     **** 
 213:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 270              		.loc 1 213 5 view .LVU70
 271 00dc 000050E3 		cmp	r0, #0	@ tmp195,
 272              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 273              		.loc 1 211 38 view .LVU71
 274 00e0 600084E5 		str	r0, [r4, #96]	@ tmp195, g_armwave_state.xcoord_to_xpixel
 275              		.loc 1 213 5 is_stmt 1 view .LVU72
 276 00e4 2600000A 		beq	.L20		@,
 277              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 214:armwave.c     **** 
 215:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 216:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 278              		.loc 1 216 54 is_stmt 0 view .LVU73
 279 00e8 2B7ADFED 		vldr.32	s15, .L21+4	@ tmp200,
 280 00ec 020040E2 		sub	r0, r0, #2	@ ivtmp.28, tmp195,
 281              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 282              		.loc 1 215 12 view .LVU74
 283 00f0 0030A0E3 		mov	r3, #0	@ xx,
 284              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 285              		.loc 1 216 54 view .LVU75
 286 00f4 887A87EE 		vdiv.f32	s14, s15, s16	@ _24, tmp200, points_per_pixel
 287              	.L10:
 288              	.LVL7:
 289              		.loc 1 216 9 is_stmt 1 view .LVU76
 290              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 291              		.loc 1 216 74 is_stmt 0 view .LVU77
 292 00f8 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 293              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 294              		.loc 1 215 32 view .LVU78
 295 00fc 013083E2 		add	r3, r3, #1	@ xx, xx,
 296              	.LVL8:
 297              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 298              		.loc 1 215 5 view .LVU79
 299 0100 020B53E3 		cmp	r3, #2048	@ xx,
 300              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 301              		.loc 1 216 74 view .LVU80
 302 0104 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp201, xx
 303 0108 877A67EE 		vmul.f32	s15, s15, s14	@ tmp202, tmp201, _24
 304              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305              		.loc 1 216 46 view .LVU81
 306 010c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 307 0110 902A17EE 		vmov	r2, s15	@ int	@ tmp203, tmp203
 308 0114 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp203, MEM[base: _4, offset: 0B]
 309              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 310              		.loc 1 215 5 view .LVU82
 311 0118 F6FFFF1A 		bne	.L10		@,
 217:armwave.c     **** 
 218:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 219:armwave.c     ****     }
 220:armwave.c     **** 
 221:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 312              		.loc 1 221 5 is_stmt 1 view .LVU83
 313              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 314              		.loc 1 221 34 is_stmt 0 view .LVU84
 315 011c 0601A0E1 		lsl	r0, r6, #2	@, _10,
 316 0120 FEFFFFEB 		bl	malloc		@
 317              	.LVL9:
 318              	@ armwave.c:222: }
 222:armwave.c     **** }
 319              		.loc 1 222 1 view .LVU85
 320 0124 028BBDEC 		vldm	sp!, {d8}	@
 321              		.cfi_remember_state
 322              		.cfi_restore 80
 323              		.cfi_restore 81
 324              		.cfi_def_cfa_offset 16
 325              	.LVL10:
 326              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 327              		.loc 1 221 32 view .LVU86
 328 0128 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 329              	@ armwave.c:222: }
 330              		.loc 1 222 1 view .LVU87
 331 012c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 332              	.LVL11:
 333              	.L2:
 334              		.cfi_restore_state
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 335              		.loc 1 169 5 is_stmt 1 view .LVU88
 336              	@ armwave.c:169:     if(target_height == 256) {
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 337              		.loc 1 169 7 is_stmt 0 view .LVU89
 338 0130 010C51E3 		cmp	r1, #256	@ target_height,
 170:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 339              		.loc 1 170 9 is_stmt 1 view .LVU90
 340              	@ armwave.c:171:         g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 341              		.loc 1 171 34 is_stmt 0 view .LVU91
 342 0134 0820A003 		moveq	r2, #8	@ tmp148,
 343              	@ armwave.c:173:         g_armwave_state.row_shift = 9;
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 344              		.loc 1 173 35 view .LVU92
 345 0138 70309F15 		ldrne	r3, .L21+24	@ tmp152,
 346              	@ armwave.c:171:         g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 347              		.loc 1 171 34 view .LVU93
 348 013c FF30A003 		moveq	r3, #255	@ tmp150,
 172:armwave.c     ****         g_armwave_state.row_shift = 9;
 349              		.loc 1 172 12 is_stmt 1 view .LVU94
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 350              		.loc 1 173 9 view .LVU95
 351              	@ armwave.c:173:         g_armwave_state.row_shift = 9;
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 352              		.loc 1 173 35 is_stmt 0 view .LVU96
 353 0140 0920A013 		movne	r2, #9	@ tmp154,
 354 0144 FC23C4E1 		strd	r2, [r4, #60]	@, tmp207,
 174:armwave.c     ****     } else if(target_height == 1024) {
 355              		.loc 1 174 9 is_stmt 1 view .LVU97
 356 0148 BEFFFFEA 		b	.L5		@
 357              	.L18:
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 358              		.loc 1 176 9 view .LVU98
 359              	@ armwave.c:176:         g_armwave_state.row_shift = 10;
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 360              		.loc 1 176 35 is_stmt 0 view .LVU99
 361 014c 60309FE5 		ldr	r3, .L21+28	@ tmp156,
 362 0150 0A20A0E3 		mov	r2, #10	@ tmp158,
 363 0154 FC23C4E1 		strd	r2, [r4, #60]	@, tmp207,
 177:armwave.c     ****     } else if(target_height == 2048) {
 364              		.loc 1 177 9 is_stmt 1 view .LVU100
 365 0158 BAFFFFEA 		b	.L5		@
 366              	.L17:
 167:armwave.c     **** 
 367              		.loc 1 167 5 view .LVU101
 368 015c 54309FE5 		ldr	r3, .L21+32	@,
 369 0160 A720A0E3 		mov	r2, #167	@,
 370 0164 50109FE5 		ldr	r1, .L21+36	@,
 371              	.LVL12:
 167:armwave.c     **** 
 372              		.loc 1 167 5 is_stmt 0 view .LVU102
 373 0168 50009FE5 		ldr	r0, .L21+40	@,
 374              	.LVL13:
 167:armwave.c     **** 
 375              		.loc 1 167 5 view .LVU103
 376 016c FEFFFFEB 		bl	__assert_fail		@
 377              	.LVL14:
 378              	.L19:
 205:armwave.c     **** 
 379              		.loc 1 205 5 is_stmt 1 view .LVU104
 380 0170 40309FE5 		ldr	r3, .L21+32	@,
 381 0174 CD20A0E3 		mov	r2, #205	@,
 382 0178 3C109FE5 		ldr	r1, .L21+36	@,
 383 017c 40009FE5 		ldr	r0, .L21+44	@,
 384 0180 FEFFFFEB 		bl	__assert_fail		@
 385              	.LVL15:
 386              	.L20:
 213:armwave.c     **** 
 387              		.loc 1 213 5 view .LVU105
 388 0184 2C309FE5 		ldr	r3, .L21+32	@,
 389 0188 D520A0E3 		mov	r2, #213	@,
 390 018c 28109FE5 		ldr	r1, .L21+36	@,
 391 0190 30009FE5 		ldr	r0, .L21+48	@,
 392 0194 FEFFFFEB 		bl	__assert_fail		@
 393              	.LVL16:
 394              	.L22:
 395              		.align	2
 396              	.L21:
 397 0198 00000045 		.word	1157627904
 398 019c 0000803F 		.word	1065353216
 399 01a0 00000000 		.word	g_armwave_state
 400 01a4 00000000 		.word	test_wave_buffer
 401 01a8 FF070000 		.word	2047
 402 01ac F609F406 		.word	116656630
 403 01b0 FF010000 		.word	511
 404 01b4 FF030000 		.word	1023
 405 01b8 00000000 		.word	.LANCHOR0
 406 01bc 00000000 		.word	.LC0
 407 01c0 0C000000 		.word	.LC1
 408 01c4 6C000000 		.word	.LC2
 409 01c8 90000000 		.word	.LC3
 410              		.cfi_endproc
 411              	.LFE72:
 413              		.align	2
 414              		.global	test_create_waveform
 415              		.syntax unified
 416              		.arm
 417              		.fpu vfp
 419              	test_create_waveform:
 420              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 421              		.loc 1 51 1 view -0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 8
 424              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 425              		.loc 1 52 5 view .LVU107
  53:armwave.c     **** 
 426              		.loc 1 53 5 view .LVU108
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 427              		.loc 1 55 5 view .LVU109
 428              	.LVL17:
 429              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 430              		.loc 1 51 1 is_stmt 0 view .LVU110
 431 01cc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 432              		.cfi_def_cfa_offset 36
 433              		.cfi_offset 4, -36
 434              		.cfi_offset 5, -32
 435              		.cfi_offset 6, -28
 436              		.cfi_offset 7, -24
 437              		.cfi_offset 8, -20
 438              		.cfi_offset 9, -16
 439              		.cfi_offset 10, -12
 440              		.cfi_offset 11, -8
 441              		.cfi_offset 14, -4
 442 01d0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 443              		.cfi_def_cfa_offset 84
 444              		.cfi_offset 80, -84
 445              		.cfi_offset 81, -80
 446              		.cfi_offset 82, -76
 447              		.cfi_offset 83, -72
 448              		.cfi_offset 84, -68
 449              		.cfi_offset 85, -64
 450              		.cfi_offset 86, -60
 451              		.cfi_offset 87, -56
 452              		.cfi_offset 88, -52
 453              		.cfi_offset 89, -48
 454              		.cfi_offset 90, -44
 455              		.cfi_offset 91, -40
 456 01d4 5C819FE5 		ldr	r8, .L42+40	@ _75,
 457              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 458              		.loc 1 56 33 view .LVU111
 459 01d8 4CDA9FED 		vldr.32	s26, .L42	@ tmp157,
 460 01dc 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.44, _75,
 461              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 462              		.loc 1 56 13 view .LVU112
 463 01e0 4BCADFED 		vldr.32	s25, .L42+4	@ tmp161,
 464              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 465              		.loc 1 60 20 view .LVU113
 466 01e4 4BCA9FED 		vldr.32	s24, .L42+8	@ tmp166,
 467              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 468              		.loc 1 71 29 view .LVU114
 469 01e8 4BBADFED 		vldr.32	s23, .L42+12	@ tmp170,
 470              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 471              		.loc 1 71 33 view .LVU115
 472 01ec 4BBA9FED 		vldr.32	s22, .L42+16	@ tmp172,
 473              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 474              		.loc 1 69 20 view .LVU116
 475 01f0 4BAADFED 		vldr.32	s21, .L42+20	@ tmp177,
 476 01f4 02B886E2 		add	fp, r6, #131072	@ _81,,
 477 01f8 3CA19FE5 		ldr	r10, .L42+44	@ tmp197,
 478              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 479              		.loc 1 51 1 view .LVU117
 480 01fc 0CD04DE2 		sub	sp, sp, #12	@,,
 481              		.cfi_def_cfa_offset 96
 482 0200 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 483 0204 0F6086E2 		add	r6, r6, #15	@ ivtmp.44, ivtmp.44,
 484 0208 008068E2 		rsb	r8, r8, #0	@ ivtmp.47, _75
 485              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 486              		.loc 1 55 11 view .LVU118
 487 020c 0090A0E3 		mov	r9, #0	@ w,
 488              	.LVL18:
 489              	.L29:
  56:armwave.c     ****         //mod = 1.0f;
 490              		.loc 1 56 9 is_stmt 1 view .LVU119
 491              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 492              		.loc 1 56 24 is_stmt 0 view .LVU120
 493 0210 909A07EE 		vmov	s15, r9	@ int	@ w, w
 494              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 495              		.loc 1 56 48 view .LVU121
 496 0214 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 497              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 498              		.loc 1 56 13 view .LVU122
 499 0218 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 500              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 501              		.loc 1 68 19 view .LVU123
 502 021c 41AA9FED 		vldr.32	s20, .L42+24	@ tmp183,
 503              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 504              		.loc 1 56 24 view .LVU124
 505 0220 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 506              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 507              		.loc 1 73 58 view .LVU125
 508 0224 408ADFED 		vldr.32	s17, .L42+28	@ tmp188,
 509 0228 025B46E2 		sub	r5, r6, #2048	@ ivtmp.37, ivtmp.44,
 510 022c 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.47,
 511              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 512              		.loc 1 56 33 view .LVU126
 513 0230 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 514              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 515              		.loc 1 56 13 view .LVU127
 516 0234 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 517              	.LVL19:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 518              		.loc 1 59 9 is_stmt 1 view .LVU128
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 519              		.loc 1 59 9 is_stmt 0 view .LVU129
 520 0238 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 521              	.LVL20:
 522              	.L28:
 523              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 524              		.loc 1 60 24 view .LVU130
 525 023c FEFFFFEB 		bl	rand		@
 526              	.LVL21:
 527 0240 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.37
 528              	.LVL22:
  60:armwave.c     ****             noise *= noise;
 529              		.loc 1 60 13 is_stmt 1 view .LVU131
 530              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 531              		.loc 1 60 31 is_stmt 0 view .LVU132
 532 0244 7000FFE6 		uxth	r0, r0	@ tmp163,
 533              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 534              		.loc 1 60 41 view .LVU133
 535 0248 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 536 024c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 537              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 538              		.loc 1 60 20 view .LVU134
 539 0250 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 540              	.LVL23:
  61:armwave.c     ****             noise *= noise;
 541              		.loc 1 61 13 is_stmt 1 view .LVU135
 542              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 543              		.loc 1 61 19 is_stmt 0 view .LVU136
 544 0254 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 545              	.LVL24:
  62:armwave.c     ****             noise *= noise;
 546              		.loc 1 62 13 is_stmt 1 view .LVU137
 547              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 548              		.loc 1 62 19 is_stmt 0 view .LVU138
 549 0258 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 550              	.LVL25:
  63:armwave.c     **** 
 551              		.loc 1 63 13 is_stmt 1 view .LVU139
 552              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 553              		.loc 1 63 19 is_stmt 0 view .LVU140
 554 025c A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 555              	.LVL26:
  65:armwave.c     ****                 noise = -noise;
 556              		.loc 1 65 13 is_stmt 1 view .LVU141
 557              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 558              		.loc 1 65 17 is_stmt 0 view .LVU142
 559 0260 FEFFFFEB 		bl	rand		@
 560              	.LVL27:
  66:armwave.c     **** 
 561              		.loc 1 66 17 is_stmt 1 view .LVU143
 562              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 563              		.loc 1 65 15 is_stmt 0 view .LVU144
 564 0264 020910E3 		tst	r0, #32768	@,
 565              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 566              		.loc 1 66 23 view .LVU145
 567 0268 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 568              	.LVL28:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 569              		.loc 1 68 13 is_stmt 1 view .LVU146
  69:armwave.c     **** 
 570              		.loc 1 69 13 view .LVU147
 571              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 572              		.loc 1 69 23 is_stmt 0 view .LVU148
 573 026c FEFFFFEB 		bl	rand		@
 574              	.LVL29:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 575              		.loc 1 71 13 is_stmt 1 view .LVU149
 576              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 577              		.loc 1 71 29 is_stmt 0 view .LVU150
 578 0270 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 579 0274 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 580 0278 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 581              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 582              		.loc 1 69 30 view .LVU151
 583 027c 7000FFE6 		uxth	r0, r0	@ tmp173,
 584              	.LVL30:
 585              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 586              		.loc 1 69 40 view .LVU152
 587 0280 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 588 0284 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 589              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 590              		.loc 1 69 20 view .LVU153
 591 0288 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 592              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 593              		.loc 1 71 60 view .LVU154
 594 028c 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 595              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 596              		.loc 1 71 18 view .LVU155
 597 0290 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 598 0294 FEFFFFEB 		bl	sin		@
 599              	.LVL31:
  73:armwave.c     ****         }
 600              		.loc 1 73 13 is_stmt 1 view .LVU156
 601              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 602              		.loc 1 68 19 is_stmt 0 view .LVU157
 603 0298 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 604              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 605              		.loc 1 73 58 view .LVU158
 606 029c 236ADFED 		vldr.32	s13, .L42+32	@ tmp189,
 607              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 608              		.loc 1 73 56 view .LVU159
 609 02a0 236A9FED 		vldr.32	s12, .L42+36	@ tmp191,
 610 02a4 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 611              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 612              		.loc 1 71 77 view .LVU160
 613 02a8 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 614              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 615              		.loc 1 71 70 view .LVU161
 616 02ac 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 617              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 618              		.loc 1 71 77 view .LVU162
 619 02b0 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 620              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 621              		.loc 1 71 15 view .LVU163
 622 02b4 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 623              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 624              		.loc 1 73 58 view .LVU164
 625 02b8 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 626 02bc 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 627 02c0 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 628 02c4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 629 02c8 050000DA 		ble	.L25		@,
 630              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 631              		.loc 1 73 56 discriminator 1 view .LVU165
 632 02cc C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 633 02d0 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 634 02d4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 635 02d8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 636 02dc 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 637 02e0 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 638              	.L25:
 639              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 640              		.loc 1 73 56 discriminator 12 view .LVU166
 641 02e4 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 642              	.LVL32:
 643              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 644              		.loc 1 59 9 discriminator 12 view .LVU167
 645 02e8 060055E1 		cmp	r5, r6	@ ivtmp.37, ivtmp.44
 646 02ec D2FFFF1A 		bne	.L28		@,
 647 02f0 026B85E2 		add	r6, r5, #2048	@ ivtmp.44, ivtmp.37,
 648              	.LVL33:
 649              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 650              		.loc 1 55 5 discriminator 2 view .LVU168
 651 02f4 0B0056E1 		cmp	r6, fp	@ ivtmp.44, _81
 652              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 653              		.loc 1 55 34 discriminator 2 view .LVU169
 654 02f8 019089E2 		add	r9, r9, #1	@ w, w,
 655              	.LVL34:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 656              		.loc 1 55 34 discriminator 2 view .LVU170
 657 02fc 028B48E2 		sub	r8, r8, #2048	@ ivtmp.47, ivtmp.47,
 658              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 659              		.loc 1 55 5 discriminator 2 view .LVU171
 660 0300 C2FFFF1A 		bne	.L29		@,
 661              	@ armwave.c:76: }
  76:armwave.c     **** 
 662              		.loc 1 76 1 view .LVU172
 663 0304 0CD08DE2 		add	sp, sp, #12	@,,
 664              		.cfi_def_cfa_offset 84
 665              		@ sp needed	@
 666 0308 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 667              		.cfi_restore 90
 668              		.cfi_restore 91
 669              		.cfi_restore 88
 670              		.cfi_restore 89
 671              		.cfi_restore 86
 672              		.cfi_restore 87
 673              		.cfi_restore 84
 674              		.cfi_restore 85
 675              		.cfi_restore 82
 676              		.cfi_restore 83
 677              		.cfi_restore 80
 678              		.cfi_restore 81
 679              		.cfi_def_cfa_offset 36
 680              	.LVL35:
  76:armwave.c     **** 
 681              		.loc 1 76 1 view .LVU173
 682 030c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 683              	.LVL36:
 684              	.L43:
  76:armwave.c     **** 
 685              		.loc 1 76 1 view .LVU174
 686              		.align	2
 687              	.L42:
 688 0310 0000803C 		.word	1015021568
 689 0314 0000003F 		.word	1056964608
 690 0318 0050C347 		.word	1203982336
 691 031c C3F5C840 		.word	1086911939
 692 0320 0000003A 		.word	973078528
 693 0324 38FFC74A 		.word	1254620984
 694 0328 0000803F 		.word	1065353216
 695 032c 0000FE42 		.word	1123942400
 696 0330 00000043 		.word	1124073472
 697 0334 00007F43 		.word	1132396544
 698 0338 00000000 		.word	test_wave_buffer
 699 033c 00000000 		.word	.LANCHOR1
 700              		.cfi_endproc
 701              	.LFE57:
 703              		.align	2
 704              		.global	test_create_gamma
 705              		.syntax unified
 706              		.arm
 707              		.fpu vfp
 709              	test_create_gamma:
 710              	.LFB58:
  82:armwave.c     ****     int i;
 711              		.loc 1 82 1 is_stmt 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 715              		.loc 1 83 5 view .LVU176
  84:armwave.c     **** 
 716              		.loc 1 84 5 view .LVU177
 717              	.LVL37:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 718              		.loc 1 86 5 view .LVU178
 719              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 720              		.loc 1 82 1 is_stmt 0 view .LVU179
 721 0340 70402DE9 		push	{r4, r5, r6, lr}	@
 722              		.cfi_def_cfa_offset 16
 723              		.cfi_offset 4, -16
 724              		.cfi_offset 5, -12
 725              		.cfi_offset 6, -8
 726              		.cfi_offset 14, -4
 727 0344 068B2DED 		vpush.64	{d8, d9, d10}	@
 728              		.cfi_def_cfa_offset 40
 729              		.cfi_offset 80, -40
 730              		.cfi_offset 81, -36
 731              		.cfi_offset 82, -32
 732              		.cfi_offset 83, -28
 733              		.cfi_offset 84, -24
 734              		.cfi_offset 85, -20
 735 0348 64409FE5 		ldr	r4, .L48+20	@ ivtmp.55,
 736              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 737              		.loc 1 87 32 view .LVU180
 738 034c 17AA9FED 		vldr.32	s20, .L48+16	@ tmp128,
 739              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 740              		.loc 1 87 26 view .LVU181
 741 0350 129B9FED 		vldr.64	d9, .L48	@ tmp135,
 742              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 743              		.loc 1 87 49 view .LVU182
 744 0354 138B9FED 		vldr.64	d8, .L48+8	@ tmp131,
 745 0358 015084E2 		add	r5, r4, #1	@ _25, ivtmp.55,
 746 035c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.55,
 747 0360 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 748              	.LVL38:
 749              	.L45:
  87:armwave.c     ****     }
 750              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU183
 751              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 752              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU184
 753 0364 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.55
 754              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 755              		.loc 1 87 26 discriminator 3 view .LVU185
 756 0368 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 757              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 758              		.loc 1 87 32 discriminator 3 view .LVU186
 759 036c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 760 0370 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 761 0374 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 762              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 763              		.loc 1 87 26 discriminator 3 view .LVU187
 764 0378 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 765 037c FEFFFFEB 		bl	pow		@
 766              	.LVL39:
 767              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 768              		.loc 1 87 49 discriminator 3 view .LVU188
 769 0380 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 770              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 771              		.loc 1 87 24 discriminator 3 view .LVU189
 772 0384 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 773 0388 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 774 038c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 775              	.LVL40:
 776              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 777              		.loc 1 86 5 discriminator 3 view .LVU190
 778 0390 060054E1 		cmp	r4, r6	@ ivtmp.55, _26
 779 0394 F2FFFF1A 		bne	.L45		@,
 780              	@ armwave.c:89: }
  89:armwave.c     **** 
 781              		.loc 1 89 1 view .LVU191
 782 0398 068BBDEC 		vldm	sp!, {d8-d10}	@,
 783              		.cfi_restore 84
 784              		.cfi_restore 85
 785              		.cfi_restore 82
 786              		.cfi_restore 83
 787              		.cfi_restore 80
 788              		.cfi_restore 81
 789              		.cfi_def_cfa_offset 16
 790 039c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 791              	.LVL41:
 792              	.L49:
  89:armwave.c     **** 
 793              		.loc 1 89 1 view .LVU192
 794              		.align	3
 795              	.L48:
 796 03a0 000000C0 		.word	-1073741824
 797 03a4 CCCCEC3F 		.word	1072483532
 798 03a8 00000000 		.word	0
 799 03ac 00E06F40 		.word	1081073664
 800 03b0 00007F43 		.word	1132396544
 801 03b4 FFFFFFFF 		.word	gamma_table-1
 802              		.cfi_endproc
 803              	.LFE58:
 805              		.align	2
 806              		.global	render_nonaa_to_buffer_1ch_slice
 807              		.syntax unified
 808              		.arm
 809              		.fpu vfp
 811              	render_nonaa_to_buffer_1ch_slice:
 812              	.LVL42:
 813              	.LFB59:
  99:armwave.c     ****     int yy, ys, w, scale_value;
 814              		.loc 1 99 1 is_stmt 1 view -0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     uint32_t value, word;
 818              		.loc 1 100 5 view .LVU194
 101:armwave.c     ****     uint8_t *wave_base;
 819              		.loc 1 101 5 view .LVU195
 102:armwave.c     ****     uint8_t *write_buffer_base;
 820              		.loc 1 102 5 view .LVU196
 103:armwave.c     ****     uint8_t *write_buffer;
 821              		.loc 1 103 5 view .LVU197
 104:armwave.c     ****     
 822              		.loc 1 104 5 view .LVU198
 106:armwave.c     **** 
 823              		.loc 1 106 5 view .LVU199
 824              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 825              		.loc 1 106 40 is_stmt 0 view .LVU200
 826 03b8 F4209FE5 		ldr	r2, .L62	@ tmp257,
 827              	@ armwave.c:99: {
  99:armwave.c     ****     int yy, ys, w, scale_value;
 828              		.loc 1 99 1 view .LVU201
 829 03bc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 830              		.cfi_def_cfa_offset 36
 831              		.cfi_offset 4, -36
 832              		.cfi_offset 5, -32
 833              		.cfi_offset 6, -28
 834              		.cfi_offset 7, -24
 835              		.cfi_offset 8, -20
 836              		.cfi_offset 9, -16
 837              		.cfi_offset 10, -12
 838              		.cfi_offset 11, -8
 839              		.cfi_offset 14, -4
 840              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 841              		.loc 1 109 5 view .LVU202
 842 03c0 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 843              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 844              		.loc 1 106 63 view .LVU203
 845 03c4 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 846              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 847              		.loc 1 109 5 view .LVU204
 848 03c8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 849              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 850              		.loc 1 106 40 view .LVU205
 851 03cc 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 852              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 853              		.loc 1 106 63 view .LVU206
 854 03d0 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 855              	.LVL43:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 856              		.loc 1 109 5 is_stmt 1 view .LVU207
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 857              		.loc 1 109 5 is_stmt 0 view .LVU208
 858 03d4 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 859 03d8 000051E3 		cmp	r1, #0	@ height,
 860 03dc F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 861 03e0 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 862              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 863              		.loc 1 109 11 view .LVU209
 864 03e4 0080A0E3 		mov	r8, #0	@ w,
 865              	.LVL44:
 866              	.L54:
 110:armwave.c     **** 
 867              		.loc 1 110 9 is_stmt 1 view .LVU210
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 868              		.loc 1 120 9 view .LVU211
 869              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 870              		.loc 1 110 64 is_stmt 0 view .LVU212
 871 03e8 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 872 03ec 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 873              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 874              		.loc 1 120 16 view .LVU213
 875 03f0 0000A0E3 		mov	r0, #0	@ yy,
 876 03f4 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 877 03f8 037087E0 		add	r7, r7, r3	@ ivtmp.61, g_armwave_state.wave_buffer, tmp195
 878              	.LVL45:
 879              	.L53:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 880              		.loc 1 135 13 is_stmt 1 view .LVU214
 881              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 882              		.loc 1 135 18 is_stmt 0 view .LVU215
 883 03fc 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 884              	.LVL46:
 139:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 885              		.loc 1 139 13 is_stmt 1 view .LVU216
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 886              		.loc 1 140 17 view .LVU217
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 887              		.loc 1 141 17 view .LVU218
 142:armwave.c     ****                 word >>= 8;
 888              		.loc 1 142 17 view .LVU219
 889              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 890              		.loc 1 140 45 is_stmt 0 view .LVU220
 891 0400 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 892              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 893              		.loc 1 141 63 view .LVU221
 894 0404 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 895              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 896              		.loc 1 140 37 view .LVU222
 897 0408 73E0EFE6 		uxtb	lr, r3	@ word, word
 898              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 899              		.loc 1 143 22 view .LVU223
 900 040c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 901              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 902              		.loc 1 142 47 view .LVU224
 903 0410 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 904              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 905              		.loc 1 140 37 view .LVU225
 906 0414 7440EFE6 		uxtb	r4, r4	@ word, word
 907              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 908              		.loc 1 142 47 view .LVU226
 909 0418 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 910              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 911              		.loc 1 141 63 view .LVU227
 912 041c 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 913              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 914              		.loc 1 143 22 view .LVU228
 915 0420 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 916              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 917              		.loc 1 142 47 view .LVU229
 918 0424 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 919              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 920              		.loc 1 140 37 view .LVU230
 921 0428 7EE0EFE6 		uxtb	lr, lr	@ word, word
 922              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 923              		.loc 1 143 22 view .LVU231
 924 042c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 925              	.LVL47:
 926              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 927              		.loc 1 142 47 view .LVU232
 928 0430 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 929 0434 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 930              	.LVL48:
 143:armwave.c     ****             }
 931              		.loc 1 143 17 is_stmt 1 view .LVU233
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 932              		.loc 1 140 17 view .LVU234
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 933              		.loc 1 141 17 view .LVU235
 142:armwave.c     ****                 word >>= 8;
 934              		.loc 1 142 17 view .LVU236
 935              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 936              		.loc 1 140 45 is_stmt 0 view .LVU237
 937 0438 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 938              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 939              		.loc 1 141 63 view .LVU238
 940 043c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 941              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 942              		.loc 1 142 47 view .LVU239
 943 0440 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 944              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 945              		.loc 1 141 63 view .LVU240
 946 0444 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 947              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 948              		.loc 1 142 47 view .LVU241
 949 0448 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 950              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 951              		.loc 1 141 63 view .LVU242
 952 044c 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 953              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 954              		.loc 1 120 37 view .LVU243
 955 0450 040080E2 		add	r0, r0, #4	@ yy, yy,
 956              	.LVL49:
 957              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 958              		.loc 1 142 47 view .LVU244
 959 0454 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 960              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 961              		.loc 1 120 9 view .LVU245
 962 0458 000051E1 		cmp	r1, r0	@ height, yy
 963              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 964              		.loc 1 142 47 view .LVU246
 965 045c 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 966 0460 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 967              	.LVL50:
 143:armwave.c     ****             }
 968              		.loc 1 143 17 is_stmt 1 view .LVU247
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 969              		.loc 1 140 17 view .LVU248
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 970              		.loc 1 141 17 view .LVU249
 142:armwave.c     ****                 word >>= 8;
 971              		.loc 1 142 17 view .LVU250
 972              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 973              		.loc 1 140 45 is_stmt 0 view .LVU251
 974 0464 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 975              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 976              		.loc 1 141 63 view .LVU252
 977 0468 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 978              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 979              		.loc 1 142 47 view .LVU253
 980 046c 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 981 0470 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 982 0474 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 983 0478 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 984 047c 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 143:armwave.c     ****             }
 985              		.loc 1 143 17 is_stmt 1 view .LVU254
 986              	.LVL51:
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 987              		.loc 1 140 17 view .LVU255
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 988              		.loc 1 141 17 view .LVU256
 142:armwave.c     ****                 word >>= 8;
 989              		.loc 1 142 17 view .LVU257
 990              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 991              		.loc 1 140 45 is_stmt 0 view .LVU258
 992 0480 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 993              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 994              		.loc 1 141 63 view .LVU259
 995 0484 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 996              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 997              		.loc 1 142 47 view .LVU260
 998 0488 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 999 048c 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 1000 0490 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 1001 0494 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 1002 0498 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 143:armwave.c     ****             }
 1003              		.loc 1 143 17 is_stmt 1 view .LVU261
 1004              	.LVL52:
 1005              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1006              		.loc 1 120 9 is_stmt 0 view .LVU262
 1007 049c D6FFFF8A 		bhi	.L53		@,
 1008              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1009              		.loc 1 109 5 view .LVU263
 1010 04a0 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 1011              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1012              		.loc 1 109 44 view .LVU264
 1013 04a4 018088E2 		add	r8, r8, #1	@ w, w,
 1014              	.LVL53:
 1015              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1016              		.loc 1 109 5 view .LVU265
 1017 04a8 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 1018 04ac CDFFFF3A 		bcc	.L54		@,
 1019 04b0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1020              	.L63:
 1021              		.align	2
 1022              	.L62:
 1023 04b4 00000000 		.word	g_armwave_state
 1024              		.cfi_endproc
 1025              	.LFE59:
 1027              		.align	2
 1028              		.global	armwave_init
 1029              		.syntax unified
 1030              		.arm
 1031              		.fpu vfp
 1033              	armwave_init:
 1034              	.LFB60:
 152:armwave.c     ****     g_armwave_state.flags = 0;
 1035              		.loc 1 152 1 is_stmt 1 view -0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 0
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 153:armwave.c     **** }
 1040              		.loc 1 153 5 view .LVU267
 1041              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 1042              		.loc 1 153 27 is_stmt 0 view .LVU268
 1043 04b8 08309FE5 		ldr	r3, .L65	@ tmp110,
 1044 04bc 0020A0E3 		mov	r2, #0	@ tmp111,
 1045 04c0 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1046              	@ armwave.c:154: }
 154:armwave.c     **** 
 1047              		.loc 1 154 1 view .LVU269
 1048 04c4 1EFF2FE1 		bx	lr	@
 1049              	.L66:
 1050              		.align	2
 1051              	.L65:
 1052 04c8 00000000 		.word	g_armwave_state
 1053              		.cfi_endproc
 1054              	.LFE60:
 1056              		.align	2
 1057              		.global	armwave_setup_render
 1058              		.syntax unified
 1059              		.arm
 1060              		.fpu vfp
 1062              	armwave_setup_render:
 1063              	.LVL54:
 1064              	.LFB61:
 157:armwave.c     ****     uint32_t length, xx;
 1065              		.loc 1 157 1 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 16, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 158:armwave.c     ****     float points_per_pixel;
 1069              		.loc 1 158 5 view .LVU271
 159:armwave.c     **** 
 1070              		.loc 1 159 5 view .LVU272
 161:armwave.c     **** 
 1071              		.loc 1 161 5 view .LVU273
 1072              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 1073              		.loc 1 157 1 is_stmt 0 view .LVU274
 1074 04cc F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1075              		.cfi_def_cfa_offset 24
 1076              		.cfi_offset 4, -24
 1077              		.cfi_offset 5, -20
 1078              		.cfi_offset 6, -16
 1079              		.cfi_offset 7, -12
 1080              		.cfi_offset 8, -8
 1081              		.cfi_offset 14, -4
 1082              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 1083              		.loc 1 161 5 view .LVU275
 1084 04d0 020051E1 		cmp	r1, r2	@ start_point, end_point
 1085              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 1086              		.loc 1 157 1 view .LVU276
 1087 04d4 028B2DED 		vpush.64	{d8}	@
 1088              		.cfi_def_cfa_offset 32
 1089              		.cfi_offset 80, -32
 1090              		.cfi_offset 81, -28
 1091              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 1092              		.loc 1 157 1 view .LVU277
 1093 04d8 0180A0E1 		mov	r8, r1	@ start_point, start_point
 1094 04dc 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1095 04e0 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 1096              	.LVL55:
 157:armwave.c     ****     uint32_t length, xx;
 1097              		.loc 1 157 1 view .LVU278
 1098 04e4 24709DE5 		ldr	r7, [sp, #36]	@ target_width, target_width
 1099 04e8 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1100              	.LVL56:
 1101              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 1102              		.loc 1 161 5 view .LVU279
 1103 04ec 6800002A 		bcs	.L83		@,
 164:armwave.c     **** 
 1104              		.loc 1 164 5 is_stmt 1 view .LVU280
 1105              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1106              		.loc 1 164 33 is_stmt 0 view .LVU281
 1107 04f0 B4419FE5 		ldr	r4, .L88+4	@ tmp217,
 1108              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 167:armwave.c     **** 
 1109              		.loc 1 167 5 view .LVU282
 1110 04f4 01CC42E2 		sub	ip, r2, #256	@ tmp151, target_height,
 1111 04f8 01CCDCE3 		bics	ip, ip, #256	@ tmp219, tmp151,
 1112              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1113              		.loc 1 164 33 view .LVU283
 1114 04fc 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 1115              		.loc 1 167 5 is_stmt 1 view .LVU284
 1116 0500 4500000A 		beq	.L69		@,
 1117              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 167:armwave.c     **** 
 1118              		.loc 1 167 5 is_stmt 0 discriminator 1 view .LVU285
 1119 0504 010B42E2 		sub	r0, r2, #1024	@ tmp153, target_height,
 1120              	.LVL57:
 167:armwave.c     **** 
 1121              		.loc 1 167 5 discriminator 1 view .LVU286
 1122 0508 010BD0E3 		bics	r0, r0, #1024	@ tmp220, tmp153,
 1123 050c 5100001A 		bne	.L84		@,
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 1124              		.loc 1 169 5 is_stmt 1 view .LVU287
 175:armwave.c     ****         g_armwave_state.row_shift = 10;
 1125              		.loc 1 175 12 view .LVU288
 1126              	@ armwave.c:175:     } else if(target_height == 1024) {
 175:armwave.c     ****         g_armwave_state.row_shift = 10;
 1127              		.loc 1 175 14 is_stmt 0 view .LVU289
 1128 0510 010B52E3 		cmp	r2, #1024	@ target_height,
 1129 0514 4A00000A 		beq	.L85		@,
 178:armwave.c     ****         g_armwave_state.row_shift = 11;
 1130              		.loc 1 178 12 is_stmt 1 view .LVU290
 1131              	@ armwave.c:178:     } else if(target_height == 2048) {
 178:armwave.c     ****         g_armwave_state.row_shift = 11;
 1132              		.loc 1 178 14 is_stmt 0 view .LVU291
 1133 0518 020B52E3 		cmp	r2, #2048	@ target_height,
 179:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1134              		.loc 1 179 9 is_stmt 1 view .LVU292
 1135              	@ armwave.c:179:         g_armwave_state.row_shift = 11;
 179:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1136              		.loc 1 179 35 is_stmt 0 view .LVU293
 1137 051c 0B00A003 		moveq	r0, #11	@ tmp171,
 1138              	@ armwave.c:180:         g_armwave_state.row_mask = 0x7ff;
 180:armwave.c     ****     } 
 1139              		.loc 1 180 34 view .LVU294
 1140 0520 88C19F05 		ldreq	ip, .L88+8	@ tmp173,
 1141              	@ armwave.c:179:         g_armwave_state.row_shift = 11;
 179:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1142              		.loc 1 179 35 view .LVU295
 1143 0524 3C008405 		streq	r0, [r4, #60]	@ tmp171, g_armwave_state.row_shift
 180:armwave.c     ****     } 
 1144              		.loc 1 180 9 is_stmt 1 view .LVU296
 1145              	@ armwave.c:180:         g_armwave_state.row_mask = 0x7ff;
 180:armwave.c     ****     } 
 1146              		.loc 1 180 34 is_stmt 0 view .LVU297
 1147 0528 40C08405 		streq	ip, [r4, #64]	@ tmp173, g_armwave_state.row_mask
 1148              	.L72:
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1149              		.loc 1 184 5 is_stmt 1 view .LVU298
 1150              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1151              		.loc 1 188 42 is_stmt 0 view .LVU299
 1152 052c 970206E0 		mul	r6, r7, r2	@ _8, target_width, target_height
 1153              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1154              		.loc 1 197 23 view .LVU300
 1155 0530 040094E5 		ldr	r0, [r4, #4]	@ _9, g_armwave_state.ch1_buffer
 1156              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.waves = waves;
 1157              		.loc 1 186 33 view .LVU301
 1158 0534 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1159              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1160              		.loc 1 187 27 view .LVU302
 1161 0538 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1162              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1163              		.loc 1 185 44 view .LVU303
 1164 053c 2214A0E1 		lsr	r1, r2, #8	@ tmp176, target_height,
 1165              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 1166              		.loc 1 195 34 view .LVU304
 1167 0540 4030A0E3 		mov	r3, #64	@ tmp183,
 1168              	.LVL58:
 1169              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1170              		.loc 1 197 7 view .LVU305
 1171 0544 000050E3 		cmp	r0, #0	@ _9,
 1172              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1173              		.loc 1 184 29 view .LVU306
 1174 0548 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1175              		.loc 1 185 5 is_stmt 1 view .LVU307
 1176              	@ armwave.c:189:     g_armwave_state.target_width = target_width;
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 1177              		.loc 1 189 34 is_stmt 0 view .LVU308
 1178 054c 347084E5 		str	r7, [r4, #52]	@ target_width, g_armwave_state.target_width
 1179              	@ armwave.c:190:     g_armwave_state.target_height = target_height;
 190:armwave.c     **** 
 1180              		.loc 1 190 35 view .LVU309
 1181 0550 382084E5 		str	r2, [r4, #56]	@ target_height, g_armwave_state.target_height
 1182              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1183              		.loc 1 188 26 view .LVU310
 1184 0554 306084E5 		str	r6, [r4, #48]	@ _8, g_armwave_state.size
 1185              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1186              		.loc 1 185 28 view .LVU311
 1187 0558 1C1084E5 		str	r1, [r4, #28]	@ tmp176, g_armwave_state.vscale
 186:armwave.c     ****     g_armwave_state.waves = waves;
 1188              		.loc 1 186 5 is_stmt 1 view .LVU312
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1189              		.loc 1 187 5 view .LVU313
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1190              		.loc 1 188 5 view .LVU314
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 1191              		.loc 1 189 5 view .LVU315
 190:armwave.c     **** 
 1192              		.loc 1 190 5 view .LVU316
 195:armwave.c     **** 
 1193              		.loc 1 195 5 view .LVU317
 1194              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 1195              		.loc 1 195 34 is_stmt 0 view .LVU318
 1196 055c 283084E5 		str	r3, [r4, #40]	@ tmp183, g_armwave_state.slice_height
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1197              		.loc 1 197 5 is_stmt 1 view .LVU319
 1198              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1199              		.loc 1 197 7 is_stmt 0 view .LVU320
 1200 0560 0100000A 		beq	.L74		@,
 198:armwave.c     **** 
 1201              		.loc 1 198 9 is_stmt 1 view .LVU321
 1202 0564 FEFFFFEB 		bl	free		@
 1203              	.LVL59:
 198:armwave.c     **** 
 1204              		.loc 1 198 9 is_stmt 0 view .LVU322
 1205 0568 306094E5 		ldr	r6, [r4, #48]	@ _8, g_armwave_state.size
 1206              	.L74:
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1207              		.loc 1 200 5 is_stmt 1 view .LVU323
 1208              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1209              		.loc 1 200 34 is_stmt 0 view .LVU324
 1210 056c 0110A0E3 		mov	r1, #1	@,
 1211 0570 0600A0E1 		mov	r0, r6	@, _8
 1212 0574 FEFFFFEB 		bl	calloc		@
 1213              	.LVL60:
 1214              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1215              		.loc 1 201 33 view .LVU325
 1216 0578 34219FE5 		ldr	r2, .L88+12	@ tmp189,
 1217              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203:armwave.c     **** 
 1218              		.loc 1 203 33 view .LVU326
 1219 057c FA30A0E3 		mov	r3, #250	@ tmp192,
 1220              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1221              		.loc 1 201 33 view .LVU327
 1222 0580 482084E5 		str	r2, [r4, #72]	@ tmp189, MEM[(short int *)&g_armwave_state + 72B]
 1223              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203:armwave.c     **** 
 1224              		.loc 1 203 33 view .LVU328
 1225 0584 BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp192, g_armwave_state.ch1_color.b
 1226              	@ armwave.c:205:     assert(g_armwave_state.ch1_buffer != NULL);
 205:armwave.c     **** 
 1227              		.loc 1 205 5 view .LVU329
 1228 0588 000050E3 		cmp	r0, #0	@ tmp186,
 1229              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1230              		.loc 1 200 32 view .LVU330
 1231 058c 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1232              		.loc 1 201 5 is_stmt 1 view .LVU331
 202:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1233              		.loc 1 202 5 view .LVU332
 203:armwave.c     **** 
 1234              		.loc 1 203 5 view .LVU333
 205:armwave.c     **** 
 1235              		.loc 1 205 5 view .LVU334
 1236 0590 3500000A 		beq	.L86		@,
 208:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1237              		.loc 1 208 5 view .LVU335
 1238              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1239              		.loc 1 209 34 is_stmt 0 view .LVU336
 1240 0594 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1241              	@ armwave.c:208:     length = end_point - start_point;
 208:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1242              		.loc 1 208 12 view .LVU337
 1243 0598 085045E0 		sub	r5, r5, r8	@ length, end_point, start_point
 1244              	.LVL61:
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1245              		.loc 1 209 5 is_stmt 1 view .LVU338
 1246              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1247              		.loc 1 211 40 is_stmt 0 view .LVU339
 1248 059c 8500A0E1 		lsl	r0, r5, #1	@, length,
 1249              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1250              		.loc 1 209 34 view .LVU340
 1251 05a0 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp197, target_width
 1252              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1253              		.loc 1 209 31 view .LVU341
 1254 05a4 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1255 05a8 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp196, length
 1256              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1257              		.loc 1 210 60 view .LVU342
 1258 05ac 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp223, g_armwave_state.slice_height
 1259 05b0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp200, tmp223
 1260              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1261              		.loc 1 209 22 view .LVU343
 1262 05b4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp196, tmp197
 1263              	.LVL62:
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1264              		.loc 1 210 5 is_stmt 1 view .LVU344
 1265              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1266              		.loc 1 210 60 is_stmt 0 view .LVU345
 1267 05b8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 1268              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1269              		.loc 1 210 41 view .LVU346
 1270 05bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 1271 05c0 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp203, g_armwave_state.slice_record_height
 211:armwave.c     **** 
 1272              		.loc 1 211 5 is_stmt 1 view .LVU347
 1273              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1274              		.loc 1 211 40 is_stmt 0 view .LVU348
 1275 05c4 FEFFFFEB 		bl	malloc		@
 1276              	.LVL63:
 1277              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 213:armwave.c     **** 
 1278              		.loc 1 213 5 view .LVU349
 1279 05c8 000050E3 		cmp	r0, #0	@ tmp205,
 1280              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1281              		.loc 1 211 38 view .LVU350
 1282 05cc 600084E5 		str	r0, [r4, #96]	@ tmp205, g_armwave_state.xcoord_to_xpixel
 213:armwave.c     **** 
 1283              		.loc 1 213 5 is_stmt 1 view .LVU351
 1284 05d0 2A00000A 		beq	.L87		@,
 1285              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1286              		.loc 1 216 54 is_stmt 0 view .LVU352
 1287 05d4 337ADFED 		vldr.32	s15, .L88	@ tmp210,
 1288 05d8 020040E2 		sub	r0, r0, #2	@ ivtmp.73, tmp205,
 1289              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1290              		.loc 1 215 12 view .LVU353
 1291 05dc 0030A0E3 		mov	r3, #0	@ xx,
 1292              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1293              		.loc 1 216 54 view .LVU354
 1294 05e0 887A87EE 		vdiv.f32	s14, s15, s16	@ _20, tmp210, points_per_pixel
 1295              	.L77:
 1296              	.LVL64:
 216:armwave.c     **** 
 1297              		.loc 1 216 9 is_stmt 1 discriminator 3 view .LVU355
 1298              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1299              		.loc 1 216 74 is_stmt 0 discriminator 3 view .LVU356
 1300 05e4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1301              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1302              		.loc 1 215 32 discriminator 3 view .LVU357
 1303 05e8 013083E2 		add	r3, r3, #1	@ xx, xx,
 1304              	.LVL65:
 1305              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1306              		.loc 1 215 5 discriminator 3 view .LVU358
 1307 05ec 030055E1 		cmp	r5, r3	@ length, xx
 1308              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1309              		.loc 1 216 74 discriminator 3 view .LVU359
 1310 05f0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp211, xx
 1311 05f4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp212, tmp211, _20
 1312              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1313              		.loc 1 216 46 discriminator 3 view .LVU360
 1314 05f8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp213, tmp212
 1315 05fc 902A17EE 		vmov	r2, s15	@ int	@ tmp213, tmp213
 1316 0600 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp213, MEM[base: _6, offset: 0B]
 1317              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1318              		.loc 1 215 5 discriminator 3 view .LVU361
 1319 0604 F6FFFF1A 		bne	.L77		@,
 221:armwave.c     **** }
 1320              		.loc 1 221 5 is_stmt 1 view .LVU362
 1321              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 1322              		.loc 1 221 34 is_stmt 0 view .LVU363
 1323 0608 0601A0E1 		lsl	r0, r6, #2	@, _8,
 1324 060c FEFFFFEB 		bl	malloc		@
 1325              	.LVL66:
 1326              	@ armwave.c:222: }
 1327              		.loc 1 222 1 view .LVU364
 1328 0610 028BBDEC 		vldm	sp!, {d8}	@
 1329              		.cfi_remember_state
 1330              		.cfi_restore 80
 1331              		.cfi_restore 81
 1332              		.cfi_def_cfa_offset 24
 1333              	.LVL67:
 1334              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 1335              		.loc 1 221 32 view .LVU365
 1336 0614 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 1337              	@ armwave.c:222: }
 1338              		.loc 1 222 1 view .LVU366
 1339 0618 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1340              	.LVL68:
 1341              	.L69:
 1342              		.cfi_restore_state
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 1343              		.loc 1 169 5 is_stmt 1 view .LVU367
 1344              	@ armwave.c:169:     if(target_height == 256) {
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 1345              		.loc 1 169 7 is_stmt 0 view .LVU368
 1346 061c 010C52E3 		cmp	r2, #256	@ target_height,
 170:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1347              		.loc 1 170 9 is_stmt 1 view .LVU369
 1348              	@ armwave.c:170:         g_armwave_state.row_shift = 8;
 170:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1349              		.loc 1 170 35 is_stmt 0 view .LVU370
 1350 0620 08C0A003 		moveq	ip, #8	@ tmp159,
 1351              	@ armwave.c:174:         g_armwave_state.row_mask = 0x1ff;
 174:armwave.c     ****     } else if(target_height == 1024) {
 1352              		.loc 1 174 34 view .LVU371
 1353 0624 8CC09F15 		ldrne	ip, .L88+16	@ tmp165,
 1354              	@ armwave.c:171:         g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 1355              		.loc 1 171 34 view .LVU372
 1356 0628 FF00A003 		moveq	r0, #255	@ tmp161,
 1357              	.LVL69:
 1358              	@ armwave.c:173:         g_armwave_state.row_shift = 9;
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1359              		.loc 1 173 35 view .LVU373
 1360 062c 0900A013 		movne	r0, #9	@ tmp163,
 1361              	@ armwave.c:170:         g_armwave_state.row_shift = 8;
 170:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1362              		.loc 1 170 35 view .LVU374
 1363 0630 3CC08405 		streq	ip, [r4, #60]	@ tmp159, g_armwave_state.row_shift
 171:armwave.c     ****     } else if(target_height == 512) {
 1364              		.loc 1 171 9 is_stmt 1 view .LVU375
 1365              	@ armwave.c:171:         g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 1366              		.loc 1 171 34 is_stmt 0 view .LVU376
 1367 0634 40008405 		streq	r0, [r4, #64]	@ tmp161, g_armwave_state.row_mask
 172:armwave.c     ****         g_armwave_state.row_shift = 9;
 1368              		.loc 1 172 12 is_stmt 1 view .LVU377
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1369              		.loc 1 173 9 view .LVU378
 1370              	@ armwave.c:174:         g_armwave_state.row_mask = 0x1ff;
 174:armwave.c     ****     } else if(target_height == 1024) {
 1371              		.loc 1 174 34 is_stmt 0 view .LVU379
 1372 0638 40C08415 		strne	ip, [r4, #64]	@ tmp165, g_armwave_state.row_mask
 1373              	@ armwave.c:173:         g_armwave_state.row_shift = 9;
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1374              		.loc 1 173 35 view .LVU380
 1375 063c 3C008415 		strne	r0, [r4, #60]	@ tmp163, g_armwave_state.row_shift
 174:armwave.c     ****     } else if(target_height == 1024) {
 1376              		.loc 1 174 9 is_stmt 1 view .LVU381
 1377 0640 B9FFFFEA 		b	.L72		@
 1378              	.L85:
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1379              		.loc 1 176 9 view .LVU382
 1380              	@ armwave.c:177:         g_armwave_state.row_mask = 0x3ff;
 177:armwave.c     ****     } else if(target_height == 2048) {
 1381              		.loc 1 177 34 is_stmt 0 view .LVU383
 1382 0644 70C09FE5 		ldr	ip, .L88+20	@ tmp169,
 1383              	@ armwave.c:176:         g_armwave_state.row_shift = 10;
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1384              		.loc 1 176 35 view .LVU384
 1385 0648 0A00A0E3 		mov	r0, #10	@ tmp167,
 1386              	@ armwave.c:177:         g_armwave_state.row_mask = 0x3ff;
 177:armwave.c     ****     } else if(target_height == 2048) {
 1387              		.loc 1 177 34 view .LVU385
 1388 064c 40C084E5 		str	ip, [r4, #64]	@ tmp169, g_armwave_state.row_mask
 1389              	@ armwave.c:176:         g_armwave_state.row_shift = 10;
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1390              		.loc 1 176 35 view .LVU386
 1391 0650 3C0084E5 		str	r0, [r4, #60]	@ tmp167, g_armwave_state.row_shift
 177:armwave.c     ****     } else if(target_height == 2048) {
 1392              		.loc 1 177 9 is_stmt 1 view .LVU387
 1393 0654 B4FFFFEA 		b	.L72		@
 1394              	.L84:
 167:armwave.c     **** 
 1395              		.loc 1 167 5 discriminator 2 view .LVU388
 1396 0658 60309FE5 		ldr	r3, .L88+24	@,
 1397              	.LVL70:
 167:armwave.c     **** 
 1398              		.loc 1 167 5 is_stmt 0 discriminator 2 view .LVU389
 1399 065c A720A0E3 		mov	r2, #167	@,
 1400 0660 5C109FE5 		ldr	r1, .L88+28	@,
 1401 0664 5C009FE5 		ldr	r0, .L88+32	@,
 1402 0668 FEFFFFEB 		bl	__assert_fail		@
 1403              	.LVL71:
 1404              	.L86:
 205:armwave.c     **** 
 1405              		.loc 1 205 5 is_stmt 1 discriminator 1 view .LVU390
 1406 066c 4C309FE5 		ldr	r3, .L88+24	@,
 1407 0670 CD20A0E3 		mov	r2, #205	@,
 1408 0674 48109FE5 		ldr	r1, .L88+28	@,
 1409 0678 4C009FE5 		ldr	r0, .L88+36	@,
 1410 067c FEFFFFEB 		bl	__assert_fail		@
 1411              	.LVL72:
 1412              	.L87:
 213:armwave.c     **** 
 1413              		.loc 1 213 5 discriminator 1 view .LVU391
 1414 0680 38309FE5 		ldr	r3, .L88+24	@,
 1415 0684 D520A0E3 		mov	r2, #213	@,
 1416 0688 34109FE5 		ldr	r1, .L88+28	@,
 1417 068c 3C009FE5 		ldr	r0, .L88+40	@,
 1418 0690 FEFFFFEB 		bl	__assert_fail		@
 1419              	.LVL73:
 1420              	.L83:
 161:armwave.c     **** 
 1421              		.loc 1 161 5 discriminator 1 view .LVU392
 1422 0694 24309FE5 		ldr	r3, .L88+24	@,
 1423              	.LVL74:
 161:armwave.c     **** 
 1424              		.loc 1 161 5 is_stmt 0 discriminator 1 view .LVU393
 1425 0698 A120A0E3 		mov	r2, #161	@,
 1426 069c 20109FE5 		ldr	r1, .L88+28	@,
 1427 06a0 2C009FE5 		ldr	r0, .L88+44	@,
 1428              	.LVL75:
 161:armwave.c     **** 
 1429              		.loc 1 161 5 discriminator 1 view .LVU394
 1430 06a4 FEFFFFEB 		bl	__assert_fail		@
 1431              	.LVL76:
 1432              	.L89:
 1433              		.align	2
 1434              	.L88:
 1435 06a8 0000803F 		.word	1065353216
 1436 06ac 00000000 		.word	g_armwave_state
 1437 06b0 FF070000 		.word	2047
 1438 06b4 F609F406 		.word	116656630
 1439 06b8 FF010000 		.word	511
 1440 06bc FF030000 		.word	1023
 1441 06c0 00000000 		.word	.LANCHOR0
 1442 06c4 00000000 		.word	.LC0
 1443 06c8 0C000000 		.word	.LC1
 1444 06cc 6C000000 		.word	.LC2
 1445 06d0 90000000 		.word	.LC3
 1446 06d4 BC000000 		.word	.LC4
 1447              		.cfi_endproc
 1448              	.LFE61:
 1450              		.align	2
 1451              		.global	armwave_clear_buffer
 1452              		.syntax unified
 1453              		.arm
 1454              		.fpu vfp
 1456              	armwave_clear_buffer:
 1457              	.LVL77:
 1458              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 225:armwave.c     **** {
 1459              		.loc 1 225 1 is_stmt 1 view -0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 0
 1462              		@ frame_needed = 0, uses_anonymous_args = 0
 1463              		@ link register save eliminated.
 226:armwave.c     ****     // Flags ignored, only one buffer cleared
 227:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1464              		.loc 1 227 5 view .LVU396
 1465 06d8 0C309FE5 		ldr	r3, .L91	@ tmp113,
 1466 06dc 0010A0E3 		mov	r1, #0	@,
 1467 06e0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1468 06e4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1469              	.LVL78:
 1470              		.loc 1 227 5 is_stmt 0 view .LVU397
 1471 06e8 FEFFFFEA 		b	memset		@
 1472              	.LVL79:
 1473              	.L92:
 1474              		.align	2
 1475              	.L91:
 1476 06ec 00000000 		.word	g_armwave_state
 1477              		.cfi_endproc
 1478              	.LFE62:
 1480              		.align	2
 1481              		.global	armwave_fill_pixbuf_256
 1482              		.syntax unified
 1483              		.arm
 1484              		.fpu vfp
 1486              	armwave_fill_pixbuf_256:
 1487              	.LVL80:
 1488              	.LFB63:
 228:armwave.c     **** }
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 232:armwave.c     ****  */
 233:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 234:armwave.c     **** {
 1489              		.loc 1 234 1 is_stmt 1 view -0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 8
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
 235:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1493              		.loc 1 235 5 view .LVU399
 236:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1494              		.loc 1 236 5 view .LVU400
 237:armwave.c     ****     uint8_t r, g, b, value;
 1495              		.loc 1 237 5 view .LVU401
 238:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1496              		.loc 1 238 5 view .LVU402
 1497              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1498              		.loc 1 234 1 is_stmt 0 view .LVU403
 1499 06f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1500              		.cfi_def_cfa_offset 36
 1501              		.cfi_offset 4, -36
 1502              		.cfi_offset 5, -32
 1503              		.cfi_offset 6, -28
 1504              		.cfi_offset 7, -24
 1505              		.cfi_offset 8, -20
 1506              		.cfi_offset 9, -16
 1507              		.cfi_offset 10, -12
 1508              		.cfi_offset 11, -8
 1509              		.cfi_offset 14, -4
 1510              	@ armwave.c:242:     assert(out_buffer != NULL);
 239:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 240:armwave.c     ****     uint32_t offset;
 241:armwave.c     **** 
 242:armwave.c     ****     assert(out_buffer != NULL);
 1511              		.loc 1 242 5 view .LVU404
 1512 06f4 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 1513              	@ armwave.c:238:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 238:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1514              		.loc 1 238 15 view .LVU405
 1515 06f8 54629FE5 		ldr	r6, .L120	@ tmp359,
 1516              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1517              		.loc 1 234 1 view .LVU406
 1518 06fc 0CD04DE2 		sub	sp, sp, #12	@,,
 1519              		.cfi_def_cfa_offset 48
 1520              	@ armwave.c:238:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 238:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1521              		.loc 1 238 15 view .LVU407
 1522 0700 044096E5 		ldr	r4, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1523              	.LVL81:
 239:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1524              		.loc 1 239 5 is_stmt 1 view .LVU408
 240:armwave.c     **** 
 1525              		.loc 1 240 5 view .LVU409
 1526              		.loc 1 242 5 view .LVU410
 1527 0704 8D00000A 		beq	.L118		@,
 243:armwave.c     **** 
 244:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 1528              		.loc 1 244 5 view .LVU411
 1529              	@ armwave.c:244:     npix = g_armwave_state.target_width * 256;
 1530              		.loc 1 244 27 is_stmt 0 view .LVU412
 1531 0708 345096E5 		ldr	r5, [r6, #52]	@ _1, g_armwave_state.target_width
 1532              	@ armwave.c:245:     printf("%d %d", npix, g_armwave_state.target_width);
 245:armwave.c     ****     printf("%d %d", npix, g_armwave_state.target_width);
 1533              		.loc 1 245 5 view .LVU413
 1534 070c 44029FE5 		ldr	r0, .L120+4	@,
 1535              	.LVL82:
 1536              		.loc 1 245 5 view .LVU414
 1537 0710 0520A0E1 		mov	r2, r5	@, _1
 1538              	@ armwave.c:244:     npix = g_armwave_state.target_width * 256;
 244:armwave.c     ****     printf("%d %d", npix, g_armwave_state.target_width);
 1539              		.loc 1 244 41 view .LVU415
 1540 0714 0554A0E1 		lsl	r5, r5, #8	@ npix, _1,
 1541              	.LVL83:
 1542              		.loc 1 245 5 is_stmt 1 view .LVU416
 1543 0718 0510A0E1 		mov	r1, r5	@, npix
 1544 071c FEFFFFEB 		bl	printf		@
 1545              	.LVL84:
 246:armwave.c     **** 
 247:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1546              		.loc 1 247 5 view .LVU417
 1547              		.loc 1 247 5 is_stmt 0 view .LVU418
 1548 0720 000055E3 		cmp	r5, #0	@ npix,
 1549 0724 0A0000DA 		ble	.L93		@,
 1550              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 248:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 249:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 250:armwave.c     ****         // most normal waveforms.
 251:armwave.c     ****         wave_word = *base_32ptr++;
 252:armwave.c     **** 
 253:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 254:armwave.c     ****             for(i = 0; i < 4; i++) {
 255:armwave.c     ****                 value = wave_word & 0xff;
 256:armwave.c     ****                 wave_word >>= 8;
 257:armwave.c     **** 
 258:armwave.c     ****                 if(value != 0) {
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1551              		.loc 1 259 52 view .LVU419
 1552 0728 F8A4D6E1 		ldrsh	r10, [r6, #72]	@ _71, g_armwave_state.ch1_color.r
 1553              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1554              		.loc 1 260 52 view .LVU420
 1555 072c FA94D6E1 		ldrsh	r9, [r6, #74]	@ _77, g_armwave_state.ch1_color.g
 1556              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1557              		.loc 1 261 52 view .LVU421
 1558 0730 FCB4D6E1 		ldrsh	fp, [r6, #76]	@ _81, g_armwave_state.ch1_color.b
 1559              	@ armwave.c:247:     for(n = 0; n < npix; n += 4) {
 247:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1560              		.loc 1 247 11 view .LVU422
 1561 0734 0030A0E3 		mov	r3, #0	@ n,
 1562 0738 00708DE5 		str	r7, [sp]	@ out_buffer, %sfp
 1563              	.LVL85:
 1564              	.L102:
 251:armwave.c     **** 
 1565              		.loc 1 251 9 is_stmt 1 view .LVU423
 1566              	@ armwave.c:251:         wave_word = *base_32ptr++;
 251:armwave.c     **** 
 1567              		.loc 1 251 19 is_stmt 0 view .LVU424
 1568 073c 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_47, offset: 4294967292B]
 1569              	.LVL86:
 253:armwave.c     ****             for(i = 0; i < 4; i++) {
 1570              		.loc 1 253 9 is_stmt 1 view .LVU425
 1571              	@ armwave.c:253:         if(COND_UNLIKELY(wave_word != 0)) {
 253:armwave.c     ****             for(i = 0; i < 4; i++) {
 1572              		.loc 1 253 11 is_stmt 0 view .LVU426
 1573 0740 000052E3 		cmp	r2, #0	@ wave_word,
 1574 0744 0400001A 		bne	.L119		@,
 1575              	.LVL87:
 1576              	.L97:
 1577              	@ armwave.c:247:     for(n = 0; n < npix; n += 4) {
 247:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1578              		.loc 1 247 28 discriminator 2 view .LVU427
 1579 0748 043083E2 		add	r3, r3, #4	@ n, n,
 1580              	.LVL88:
 1581              	@ armwave.c:247:     for(n = 0; n < npix; n += 4) {
 247:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1582              		.loc 1 247 5 discriminator 2 view .LVU428
 1583 074c 030055E1 		cmp	r5, r3	@ npix, n
 1584 0750 F9FFFFCA 		bgt	.L102		@,
 1585              	.LVL89:
 1586              	.L93:
 1587              	@ armwave.c:280: }
 262:armwave.c     **** 
 263:armwave.c     ****                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 265:armwave.c     ****                     b = MIN(bb, 255);
 266:armwave.c     **** 
 267:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 268:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 270:armwave.c     ****                     // Is there a better way?
 271:armwave.c     ****                     nsub = n + i;
 272:armwave.c     ****                     xx = nsub & 0xff;
 273:armwave.c     ****                     yy = nsub >> 8;
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 275:armwave.c     ****                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 277:armwave.c     ****             }
 278:armwave.c     ****         } 
 279:armwave.c     ****     }
 280:armwave.c     **** }
 1588              		.loc 1 280 1 view .LVU429
 1589 0754 0CD08DE2 		add	sp, sp, #12	@,,
 1590              		.cfi_remember_state
 1591              		.cfi_def_cfa_offset 36
 1592              		@ sp needed	@
 1593 0758 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1594              	.LVL90:
 1595              	.L119:
 1596              		.cfi_restore_state
 255:armwave.c     ****                 wave_word >>= 8;
 1597              		.loc 1 255 17 is_stmt 1 view .LVU430
 256:armwave.c     **** 
 1598              		.loc 1 256 17 view .LVU431
 1599              	@ armwave.c:258:                 if(value != 0) {
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1600              		.loc 1 258 19 is_stmt 0 view .LVU432
 1601 075c FFC012E2 		ands	ip, r2, #255	@ _73, wave_word,
 1602              	@ armwave.c:256:                 wave_word >>= 8;
 256:armwave.c     **** 
 1603              		.loc 1 256 27 view .LVU433
 1604 0760 2214A0E1 		lsr	r1, r2, #8	@ wave_word, wave_word,
 1605              	.LVL91:
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1606              		.loc 1 258 17 is_stmt 1 view .LVU434
 1607              	@ armwave.c:258:                 if(value != 0) {
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1608              		.loc 1 258 19 is_stmt 0 view .LVU435
 1609 0764 1900000A 		beq	.L98		@,
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1610              		.loc 1 259 21 is_stmt 1 view .LVU436
 1611              	.LVL92:
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1612              		.loc 1 260 21 view .LVU437
 261:armwave.c     **** 
 1613              		.loc 1 261 21 view .LVU438
 263:armwave.c     ****                     g = MIN(gg, 255);
 1614              		.loc 1 263 21 view .LVU439
 264:armwave.c     ****                     b = MIN(bb, 255);
 1615              		.loc 1 264 21 view .LVU440
 265:armwave.c     **** 
 1616              		.loc 1 265 21 view .LVU441
 268:armwave.c     **** 
 1617              		.loc 1 268 21 view .LVU442
 271:armwave.c     ****                     xx = nsub & 0xff;
 1618              		.loc 1 271 21 view .LVU443
 272:armwave.c     ****                     yy = nsub >> 8;
 1619              		.loc 1 272 21 view .LVU444
 273:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1620              		.loc 1 273 21 view .LVU445
 274:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1621              		.loc 1 274 21 view .LVU446
 275:armwave.c     ****                 }
 1622              		.loc 1 275 21 view .LVU447
 1623              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     **** 
 1624              		.loc 1 261 55 is_stmt 0 view .LVU448
 1625 0768 9B0C00E0 		mul	r0, fp, ip	@ tmp277, _81, _73
 1626              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1627              		.loc 1 260 55 view .LVU449
 1628 076c 990C08E0 		mul	r8, r9, ip	@ tmp281, _77, _73
 1629              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     **** 
 1630              		.loc 1 261 24 view .LVU450
 1631 0770 4004A0E1 		asr	r0, r0, #8	@ bb, tmp277,
 1632              	.LVL93:
 1633              	@ armwave.c:265:                     b = MIN(bb, 255);
 265:armwave.c     **** 
 1634              		.loc 1 265 25 view .LVU451
 1635 0774 FF0050E3 		cmp	r0, #255	@ bb,
 1636              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1637              		.loc 1 260 24 view .LVU452
 1638 0778 4884A0E1 		asr	r8, r8, #8	@ gg, tmp281,
 1639              	.LVL94:
 1640              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1641              		.loc 1 259 55 view .LVU453
 1642 077c 9C0A0CE0 		mul	ip, ip, r10	@ tmp287, _73, _71
 1643              	.LVL95:
 1644              	@ armwave.c:265:                     b = MIN(bb, 255);
 265:armwave.c     **** 
 1645              		.loc 1 265 25 view .LVU454
 1646 0780 FF00A0A3 		movge	r0, #255	@ bb,
 1647              	.LVL96:
 1648              	@ armwave.c:264:                     g = MIN(gg, 255);
 264:armwave.c     ****                     b = MIN(bb, 255);
 1649              		.loc 1 264 25 view .LVU455
 1650 0784 FF0058E3 		cmp	r8, #255	@ gg,
 1651 0788 FF80A0A3 		movge	r8, #255	@ gg,
 1652              	.LVL97:
 1653              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1654              		.loc 1 259 24 view .LVU456
 1655 078c 4CC4A0E1 		asr	ip, ip, #8	@ rr, tmp287,
 1656              	.LVL98:
 1657              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1658              		.loc 1 268 56 view .LVU457
 1659 0790 0884A0E1 		lsl	r8, r8, #8	@ tmp282, gg,
 1660              	@ armwave.c:263:                     r = MIN(rr, 255);
 263:armwave.c     ****                     g = MIN(gg, 255);
 1661              		.loc 1 263 25 view .LVU458
 1662 0794 FF005CE3 		cmp	ip, #255	@ rr,
 1663              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1664              		.loc 1 275 39 view .LVU459
 1665 0798 347096E5 		ldr	r7, [r6, #52]	@ tmp373, g_armwave_state.target_width
 1666              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1667              		.loc 1 268 44 view .LVU460
 1668 079c 0008A0E1 		lsl	r0, r0, #16	@ tmp278, bb,
 1669              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1670              		.loc 1 268 56 view .LVU461
 1671 07a0 7880FFE6 		uxth	r8, r8	@ tmp283, tmp282
 1672              	@ armwave.c:272:                     xx = nsub & 0xff;
 272:armwave.c     ****                     yy = nsub >> 8;
 1673              		.loc 1 272 24 view .LVU462
 1674 07a4 73E0EFE6 		uxtb	lr, r3	@ xx, n
 1675              	@ armwave.c:263:                     r = MIN(rr, 255);
 263:armwave.c     ****                     g = MIN(gg, 255);
 1676              		.loc 1 263 25 view .LVU463
 1677 07a8 FFC0A0A3 		movge	ip, #255	@ rr,
 1678              	.LVL99:
 1679              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1680              		.loc 1 268 44 view .LVU464
 1681 07ac FF0800E2 		and	r0, r0, #16711680	@ tmp279, tmp278,
 1682              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1683              		.loc 1 268 51 view .LVU465
 1684 07b0 080080E1 		orr	r0, r0, r8	@ tmp285, tmp279, tmp283
 1685              	@ armwave.c:273:                     yy = nsub >> 8;
 273:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1686              		.loc 1 273 31 view .LVU466
 1687 07b4 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 1688              	.LVL100:
 1689              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1690              		.loc 1 275 39 view .LVU467
 1691 07b8 978E2EE0 		mla	lr, r7, lr, r8	@ tmp275, tmp373, xx, yy
 1692              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1693              		.loc 1 268 62 view .LVU468
 1694 07bc 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 1695 07c0 0CC080E1 		orr	ip, r0, ip	@ tmp289, tmp285, rr
 1696              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1697              		.loc 1 275 49 view .LVU469
 1698 07c4 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1699              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1700              		.loc 1 268 26 view .LVU470
 1701 07c8 FFC48CE3 		orr	ip, ip, #-16777216	@ word, tmp289,
 1702              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1703              		.loc 1 275 49 view .LVU471
 1704 07cc 0EC180E7 		str	ip, [r0, lr, lsl #2]	@ word, *_107
 1705              	.LVL101:
 1706              	.L98:
 255:armwave.c     ****                 wave_word >>= 8;
 1707              		.loc 1 255 17 is_stmt 1 view .LVU472
 256:armwave.c     **** 
 1708              		.loc 1 256 17 view .LVU473
 1709              	@ armwave.c:258:                 if(value != 0) {
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1710              		.loc 1 258 19 is_stmt 0 view .LVU474
 1711 07d0 FF1011E2 		ands	r1, r1, #255	@ _119, wave_word,
 1712              	.LVL102:
 1713              	@ armwave.c:256:                 wave_word >>= 8;
 256:armwave.c     **** 
 1714              		.loc 1 256 27 view .LVU475
 1715 07d4 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 1716              	.LVL103:
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1717              		.loc 1 258 17 is_stmt 1 view .LVU476
 1718              	@ armwave.c:258:                 if(value != 0) {
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1719              		.loc 1 258 19 is_stmt 0 view .LVU477
 1720 07d8 1C00000A 		beq	.L99		@,
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1721              		.loc 1 259 21 is_stmt 1 view .LVU478
 1722              	.LVL104:
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1723              		.loc 1 260 21 view .LVU479
 261:armwave.c     **** 
 1724              		.loc 1 261 21 view .LVU480
 263:armwave.c     ****                     g = MIN(gg, 255);
 1725              		.loc 1 263 21 view .LVU481
 264:armwave.c     ****                     b = MIN(bb, 255);
 1726              		.loc 1 264 21 view .LVU482
 265:armwave.c     **** 
 1727              		.loc 1 265 21 view .LVU483
 268:armwave.c     **** 
 1728              		.loc 1 268 21 view .LVU484
 271:armwave.c     ****                     xx = nsub & 0xff;
 1729              		.loc 1 271 21 view .LVU485
 1730              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     **** 
 1731              		.loc 1 261 55 is_stmt 0 view .LVU486
 1732 07dc 910B00E0 		mul	r0, r1, fp	@ tmp300, _119, _81
 1733              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1734              		.loc 1 260 55 view .LVU487
 1735 07e0 91090EE0 		mul	lr, r1, r9	@ tmp304, _119, _77
 1736              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     **** 
 1737              		.loc 1 261 24 view .LVU488
 1738 07e4 4004A0E1 		asr	r0, r0, #8	@ bb, tmp300,
 1739              	.LVL105:
 1740              	@ armwave.c:265:                     b = MIN(bb, 255);
 265:armwave.c     **** 
 1741              		.loc 1 265 25 view .LVU489
 1742 07e8 FF0050E3 		cmp	r0, #255	@ bb,
 1743 07ec FF00A0A3 		movge	r0, #255	@ bb,
 1744              	.LVL106:
 1745              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1746              		.loc 1 259 55 view .LVU490
 1747 07f0 910A01E0 		mul	r1, r1, r10	@ tmp310, _119, _71
 1748              	.LVL107:
 1749              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1750              		.loc 1 260 24 view .LVU491
 1751 07f4 4EE4A0E1 		asr	lr, lr, #8	@ gg, tmp304,
 1752              	.LVL108:
 1753              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1754              		.loc 1 268 44 view .LVU492
 1755 07f8 0008A0E1 		lsl	r0, r0, #16	@ tmp301, bb,
 1756              	@ armwave.c:264:                     g = MIN(gg, 255);
 264:armwave.c     ****                     b = MIN(bb, 255);
 1757              		.loc 1 264 25 view .LVU493
 1758 07fc FF005EE3 		cmp	lr, #255	@ gg,
 1759 0800 01C083E2 		add	ip, r3, #1	@ _159, n,
 272:armwave.c     ****                     yy = nsub >> 8;
 1760              		.loc 1 272 21 is_stmt 1 view .LVU494
 273:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1761              		.loc 1 273 21 view .LVU495
 274:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1762              		.loc 1 274 21 view .LVU496
 275:armwave.c     ****                 }
 1763              		.loc 1 275 21 view .LVU497
 1764              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1765              		.loc 1 268 44 is_stmt 0 view .LVU498
 1766 0804 FF0800E2 		and	r0, r0, #16711680	@ tmp302, tmp301,
 1767              	@ armwave.c:264:                     g = MIN(gg, 255);
 264:armwave.c     ****                     b = MIN(bb, 255);
 1768              		.loc 1 264 25 view .LVU499
 1769 0808 FFE0A0A3 		movge	lr, #255	@ gg,
 1770              	.LVL109:
 1771              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1772              		.loc 1 268 44 view .LVU500
 1773 080c 04008DE5 		str	r0, [sp, #4]	@ tmp302, %sfp
 1774              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1775              		.loc 1 275 39 view .LVU501
 1776 0810 340096E5 		ldr	r0, [r6, #52]	@ tmp376, g_armwave_state.target_width
 1777              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1778              		.loc 1 259 24 view .LVU502
 1779 0814 4114A0E1 		asr	r1, r1, #8	@ rr, tmp310,
 1780              	.LVL110:
 1781              	@ armwave.c:272:                     xx = nsub & 0xff;
 272:armwave.c     ****                     yy = nsub >> 8;
 1782              		.loc 1 272 24 view .LVU503
 1783 0818 7C70EFE6 		uxtb	r7, ip	@ xx, _159
 1784              	@ armwave.c:263:                     r = MIN(rr, 255);
 263:armwave.c     ****                     g = MIN(gg, 255);
 1785              		.loc 1 263 25 view .LVU504
 1786 081c FF0051E3 		cmp	r1, #255	@ rr,
 1787              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1788              		.loc 1 268 56 view .LVU505
 1789 0820 0EE4A0E1 		lsl	lr, lr, #8	@ tmp305, gg,
 1790              	@ armwave.c:273:                     yy = nsub >> 8;
 273:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1791              		.loc 1 273 31 view .LVU506
 1792 0824 4CC4A0E1 		asr	ip, ip, #8	@ yy, _159,
 1793              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1794              		.loc 1 275 39 view .LVU507
 1795 0828 90C72CE0 		mla	ip, r0, r7, ip	@ tmp298, tmp376, xx, yy
 1796              	@ armwave.c:263:                     r = MIN(rr, 255);
 263:armwave.c     ****                     g = MIN(gg, 255);
 1797              		.loc 1 263 25 view .LVU508
 1798 082c FF10A0A3 		movge	r1, #255	@ rr,
 1799              	.LVL111:
 1800              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1801              		.loc 1 268 51 view .LVU509
 1802 0830 04009DE5 		ldr	r0, [sp, #4]	@ tmp302, %sfp
 1803              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1804              		.loc 1 268 56 view .LVU510
 1805 0834 7EE0FFE6 		uxth	lr, lr	@ tmp306, tmp305
 1806              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1807              		.loc 1 268 51 view .LVU511
 1808 0838 0E0080E1 		orr	r0, r0, lr	@ tmp308, tmp302, tmp306
 1809              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1810              		.loc 1 268 62 view .LVU512
 1811 083c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 1812 0840 011080E1 		orr	r1, r0, r1	@ tmp312, tmp308, rr
 1813              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1814              		.loc 1 275 49 view .LVU513
 1815 0844 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1816              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1817              		.loc 1 268 26 view .LVU514
 1818 0848 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp312,
 1819              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1820              		.loc 1 275 49 view .LVU515
 1821 084c 0C1180E7 		str	r1, [r0, ip, lsl #2]	@ word, *_153
 1822              	.LVL112:
 1823              	.L99:
 255:armwave.c     ****                 wave_word >>= 8;
 1824              		.loc 1 255 17 is_stmt 1 view .LVU516
 256:armwave.c     **** 
 1825              		.loc 1 256 17 view .LVU517
 1826              	@ armwave.c:258:                 if(value != 0) {
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1827              		.loc 1 258 19 is_stmt 0 view .LVU518
 1828 0850 FF1018E2 		ands	r1, r8, #255	@ _165, wave_word,
 1829              	@ armwave.c:256:                 wave_word >>= 8;
 256:armwave.c     **** 
 1830              		.loc 1 256 27 view .LVU519
 1831 0854 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 1832              	.LVL113:
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1833              		.loc 1 258 17 is_stmt 1 view .LVU520
 1834              	@ armwave.c:258:                 if(value != 0) {
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1835              		.loc 1 258 19 is_stmt 0 view .LVU521
 1836 0858 1A00000A 		beq	.L100		@,
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1837              		.loc 1 259 21 is_stmt 1 view .LVU522
 1838              	.LVL114:
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1839              		.loc 1 260 21 view .LVU523
 261:armwave.c     **** 
 1840              		.loc 1 261 21 view .LVU524
 263:armwave.c     ****                     g = MIN(gg, 255);
 1841              		.loc 1 263 21 view .LVU525
 264:armwave.c     ****                     b = MIN(bb, 255);
 1842              		.loc 1 264 21 view .LVU526
 265:armwave.c     **** 
 1843              		.loc 1 265 21 view .LVU527
 268:armwave.c     **** 
 1844              		.loc 1 268 21 view .LVU528
 271:armwave.c     ****                     xx = nsub & 0xff;
 1845              		.loc 1 271 21 view .LVU529
 1846              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     **** 
 1847              		.loc 1 261 55 is_stmt 0 view .LVU530
 1848 085c 910B00E0 		mul	r0, r1, fp	@ tmp323, _165, _81
 1849              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1850              		.loc 1 260 55 view .LVU531
 1851 0860 91090CE0 		mul	ip, r1, r9	@ tmp327, _165, _77
 1852              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     **** 
 1853              		.loc 1 261 24 view .LVU532
 1854 0864 4004A0E1 		asr	r0, r0, #8	@ bb, tmp323,
 1855              	.LVL115:
 1856              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1857              		.loc 1 259 55 view .LVU533
 1858 0868 910A01E0 		mul	r1, r1, r10	@ tmp333, _165, _71
 1859              	.LVL116:
 1860              	@ armwave.c:265:                     b = MIN(bb, 255);
 265:armwave.c     **** 
 1861              		.loc 1 265 25 view .LVU534
 1862 086c FF0050E3 		cmp	r0, #255	@ bb,
 1863              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1864              		.loc 1 260 24 view .LVU535
 1865 0870 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp327,
 1866              	.LVL117:
 1867              	@ armwave.c:265:                     b = MIN(bb, 255);
 265:armwave.c     **** 
 1868              		.loc 1 265 25 view .LVU536
 1869 0874 FF00A0A3 		movge	r0, #255	@ bb,
 1870              	.LVL118:
 1871              	@ armwave.c:264:                     g = MIN(gg, 255);
 264:armwave.c     ****                     b = MIN(bb, 255);
 1872              		.loc 1 264 25 view .LVU537
 1873 0878 FF005CE3 		cmp	ip, #255	@ gg,
 1874 087c FFC0A0A3 		movge	ip, #255	@ gg,
 1875              	.LVL119:
 264:armwave.c     ****                     b = MIN(bb, 255);
 1876              		.loc 1 264 25 view .LVU538
 1877 0880 02E083E2 		add	lr, r3, #2	@ _67, n,
 272:armwave.c     ****                     yy = nsub >> 8;
 1878              		.loc 1 272 21 is_stmt 1 view .LVU539
 273:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1879              		.loc 1 273 21 view .LVU540
 274:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1880              		.loc 1 274 21 view .LVU541
 275:armwave.c     ****                 }
 1881              		.loc 1 275 21 view .LVU542
 1882              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1883              		.loc 1 259 24 is_stmt 0 view .LVU543
 1884 0884 4114A0E1 		asr	r1, r1, #8	@ rr, tmp333,
 1885              	.LVL120:
 1886              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1887              		.loc 1 275 39 view .LVU544
 1888 0888 347096E5 		ldr	r7, [r6, #52]	@ tmp377, g_armwave_state.target_width
 1889              	@ armwave.c:263:                     r = MIN(rr, 255);
 263:armwave.c     ****                     g = MIN(gg, 255);
 1890              		.loc 1 263 25 view .LVU545
 1891 088c FF0051E3 		cmp	r1, #255	@ rr,
 1892              	@ armwave.c:272:                     xx = nsub & 0xff;
 272:armwave.c     ****                     yy = nsub >> 8;
 1893              		.loc 1 272 24 view .LVU546
 1894 0890 7E80EFE6 		uxtb	r8, lr	@ xx, _67
 1895              	.LVL121:
 1896              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1897              		.loc 1 268 56 view .LVU547
 1898 0894 0CC4A0E1 		lsl	ip, ip, #8	@ tmp328, gg,
 1899              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1900              		.loc 1 268 44 view .LVU548
 1901 0898 0008A0E1 		lsl	r0, r0, #16	@ tmp324, bb,
 1902              	@ armwave.c:263:                     r = MIN(rr, 255);
 263:armwave.c     ****                     g = MIN(gg, 255);
 1903              		.loc 1 263 25 view .LVU549
 1904 089c FF10A0A3 		movge	r1, #255	@ rr,
 1905              	.LVL122:
 1906              	@ armwave.c:273:                     yy = nsub >> 8;
 273:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1907              		.loc 1 273 31 view .LVU550
 1908 08a0 4EE4A0E1 		asr	lr, lr, #8	@ yy, _67,
 1909              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1910              		.loc 1 268 44 view .LVU551
 1911 08a4 FF0800E2 		and	r0, r0, #16711680	@ tmp325, tmp324,
 1912              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1913              		.loc 1 268 56 view .LVU552
 1914 08a8 7CC0FFE6 		uxth	ip, ip	@ tmp329, tmp328
 1915              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1916              		.loc 1 275 39 view .LVU553
 1917 08ac 97E82EE0 		mla	lr, r7, r8, lr	@ tmp321, tmp377, xx, yy
 1918              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1919              		.loc 1 268 51 view .LVU554
 1920 08b0 0CC080E1 		orr	ip, r0, ip	@ tmp331, tmp325, tmp329
 1921              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1922              		.loc 1 268 62 view .LVU555
 1923 08b4 7110EFE6 		uxtb	r1, r1	@ rr, rr
 1924              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1925              		.loc 1 275 49 view .LVU556
 1926 08b8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1927              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1928              		.loc 1 268 62 view .LVU557
 1929 08bc 01108CE1 		orr	r1, ip, r1	@ tmp335, tmp331, rr
 1930              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 1931              		.loc 1 268 26 view .LVU558
 1932 08c0 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp335,
 1933              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 1934              		.loc 1 275 49 view .LVU559
 1935 08c4 0E1180E7 		str	r1, [r0, lr, lsl #2]	@ word, *_199
 1936              	.L100:
 1937              	.LVL123:
 255:armwave.c     ****                 wave_word >>= 8;
 1938              		.loc 1 255 17 is_stmt 1 view .LVU560
 256:armwave.c     **** 
 1939              		.loc 1 256 17 view .LVU561
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1940              		.loc 1 258 17 view .LVU562
 1941              	@ armwave.c:258:                 if(value != 0) {
 258:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1942              		.loc 1 258 19 is_stmt 0 view .LVU563
 1943 08c8 000052E3 		cmp	r2, #0	@ wave_word,
 1944 08cc 9DFFFF0A 		beq	.L97		@,
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1945              		.loc 1 259 21 is_stmt 1 view .LVU564
 1946              	.LVL124:
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1947              		.loc 1 260 21 view .LVU565
 261:armwave.c     **** 
 1948              		.loc 1 261 21 view .LVU566
 263:armwave.c     ****                     g = MIN(gg, 255);
 1949              		.loc 1 263 21 view .LVU567
 264:armwave.c     ****                     b = MIN(bb, 255);
 1950              		.loc 1 264 21 view .LVU568
 265:armwave.c     **** 
 1951              		.loc 1 265 21 view .LVU569
 268:armwave.c     **** 
 1952              		.loc 1 268 21 view .LVU570
 271:armwave.c     ****                     xx = nsub & 0xff;
 1953              		.loc 1 271 21 view .LVU571
 1954              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     **** 
 1955              		.loc 1 261 55 is_stmt 0 view .LVU572
 1956 08d0 920B01E0 		mul	r1, r2, fp	@ tmp344, wave_word, _81
 1957              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1958              		.loc 1 260 55 view .LVU573
 1959 08d4 920900E0 		mul	r0, r2, r9	@ tmp348, wave_word, _77
 1960              	@ armwave.c:261:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 261:armwave.c     **** 
 1961              		.loc 1 261 24 view .LVU574
 1962 08d8 4114A0E1 		asr	r1, r1, #8	@ bb, tmp344,
 1963              	.LVL125:
 1964              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1965              		.loc 1 259 55 view .LVU575
 1966 08dc 920A02E0 		mul	r2, r2, r10	@ tmp354, wave_word, _71
 1967              	.LVL126:
 1968              	@ armwave.c:265:                     b = MIN(bb, 255);
 265:armwave.c     **** 
 1969              		.loc 1 265 25 view .LVU576
 1970 08e0 FF0051E3 		cmp	r1, #255	@ bb,
 1971              	@ armwave.c:260:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1972              		.loc 1 260 24 view .LVU577
 1973 08e4 4004A0E1 		asr	r0, r0, #8	@ gg, tmp348,
 1974              	.LVL127:
 1975              	@ armwave.c:265:                     b = MIN(bb, 255);
 265:armwave.c     **** 
 1976              		.loc 1 265 25 view .LVU578
 1977 08e8 FF10A0A3 		movge	r1, #255	@ bb,
 1978              	.LVL128:
 1979              	@ armwave.c:264:                     g = MIN(gg, 255);
 264:armwave.c     ****                     b = MIN(bb, 255);
 1980              		.loc 1 264 25 view .LVU579
 1981 08ec FF0050E3 		cmp	r0, #255	@ gg,
 1982 08f0 FF00A0A3 		movge	r0, #255	@ gg,
 1983              	.LVL129:
 1984              	@ armwave.c:259:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1985              		.loc 1 259 24 view .LVU580
 1986 08f4 4224A0E1 		asr	r2, r2, #8	@ rr, tmp354,
 1987              	.LVL130:
 259:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1988              		.loc 1 259 24 view .LVU581
 1989 08f8 03C083E2 		add	ip, r3, #3	@ _60, n,
 272:armwave.c     ****                     yy = nsub >> 8;
 1990              		.loc 1 272 21 is_stmt 1 view .LVU582
 273:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1991              		.loc 1 273 21 view .LVU583
 274:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1992              		.loc 1 274 21 view .LVU584
 275:armwave.c     ****                 }
 1993              		.loc 1 275 21 view .LVU585
 1994              	@ armwave.c:274:                     offset = yy + (xx * g_armwave_state.target_width);
 274:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1995              		.loc 1 274 39 is_stmt 0 view .LVU586
 1996 08fc 34E096E5 		ldr	lr, [r6, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1997              	@ armwave.c:263:                     r = MIN(rr, 255);
 263:armwave.c     ****                     g = MIN(gg, 255);
 1998              		.loc 1 263 25 view .LVU587
 1999 0900 FF0052E3 		cmp	r2, #255	@ rr,
 2000              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 2001              		.loc 1 268 56 view .LVU588
 2002 0904 0004A0E1 		lsl	r0, r0, #8	@ tmp349, gg,
 2003              	@ armwave.c:272:                     xx = nsub & 0xff;
 272:armwave.c     ****                     yy = nsub >> 8;
 2004              		.loc 1 272 24 view .LVU589
 2005 0908 7C80EFE6 		uxtb	r8, ip	@ xx, _60
 2006              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 2007              		.loc 1 268 44 view .LVU590
 2008 090c 0118A0E1 		lsl	r1, r1, #16	@ tmp345, bb,
 2009              	@ armwave.c:263:                     r = MIN(rr, 255);
 263:armwave.c     ****                     g = MIN(gg, 255);
 2010              		.loc 1 263 25 view .LVU591
 2011 0910 FF20A0A3 		movge	r2, #255	@ rr,
 2012              	.LVL131:
 2013              	@ armwave.c:273:                     yy = nsub >> 8;
 273:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 2014              		.loc 1 273 31 view .LVU592
 2015 0914 4CC4A0E1 		asr	ip, ip, #8	@ yy, _60,
 2016              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 2017              		.loc 1 268 44 view .LVU593
 2018 0918 FF1801E2 		and	r1, r1, #16711680	@ tmp346, tmp345,
 2019              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 2020              		.loc 1 268 56 view .LVU594
 2021 091c 7000FFE6 		uxth	r0, r0	@ tmp350, tmp349
 2022              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 2023              		.loc 1 268 51 view .LVU595
 2024 0920 001081E1 		orr	r1, r1, r0	@ tmp352, tmp346, tmp350
 2025              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 2026              		.loc 1 275 39 view .LVU596
 2027 0924 9EC82CE0 		mla	ip, lr, r8, ip	@ tmp342, g_armwave_state.target_width, xx, yy
 2028              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 2029              		.loc 1 268 62 view .LVU597
 2030 0928 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2031 092c 022081E1 		orr	r2, r1, r2	@ tmp356, tmp352, rr
 2032              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 2033              		.loc 1 275 49 view .LVU598
 2034 0930 00109DE5 		ldr	r1, [sp]	@ out_buffer, %sfp
 2035              	@ armwave.c:268:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 268:armwave.c     **** 
 2036              		.loc 1 268 26 view .LVU599
 2037 0934 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp356,
 2038              	@ armwave.c:275:                     *(out_buffer_base + offset) = word;
 275:armwave.c     ****                 }
 2039              		.loc 1 275 49 view .LVU600
 2040 0938 0C2181E7 		str	r2, [r1, ip, lsl #2]	@ word, *_245
 2041 093c 81FFFFEA 		b	.L97		@
 2042              	.LVL132:
 2043              	.L118:
 242:armwave.c     **** 
 2044              		.loc 1 242 5 is_stmt 1 discriminator 1 view .LVU601
 2045 0940 14309FE5 		ldr	r3, .L120+8	@,
 2046 0944 F220A0E3 		mov	r2, #242	@,
 2047 0948 10109FE5 		ldr	r1, .L120+12	@,
 2048 094c 10009FE5 		ldr	r0, .L120+16	@,
 2049              	.LVL133:
 242:armwave.c     **** 
 2050              		.loc 1 242 5 is_stmt 0 discriminator 1 view .LVU602
 2051 0950 FEFFFFEB 		bl	__assert_fail		@
 2052              	.LVL134:
 2053              	.L121:
 2054              		.align	2
 2055              	.L120:
 2056 0954 00000000 		.word	g_armwave_state
 2057 0958 E8000000 		.word	.LC6
 2058 095c 18000000 		.word	.LANCHOR0+24
 2059 0960 00000000 		.word	.LC0
 2060 0964 D4000000 		.word	.LC5
 2061              		.cfi_endproc
 2062              	.LFE63:
 2064              		.align	2
 2065              		.global	armwave_fill_pixbuf_scaled
 2066              		.syntax unified
 2067              		.arm
 2068              		.fpu vfp
 2070              	armwave_fill_pixbuf_scaled:
 2071              	.LVL135:
 2072              	.LFB64:
 281:armwave.c     **** 
 282:armwave.c     **** /*
 283:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 284:armwave.c     ****  * Rows are repeated as necessary.
 285:armwave.c     ****  */
 286:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 287:armwave.c     **** {
 2073              		.loc 1 287 1 is_stmt 1 view -0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 8
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 288:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2077              		.loc 1 288 5 view .LVU604
 289:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i, vscale;
 2078              		.loc 1 289 5 view .LVU605
 290:armwave.c     ****     uint8_t r, g, b, value;
 2079              		.loc 1 290 5 view .LVU606
 291:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2080              		.loc 1 291 5 view .LVU607
 2081              	@ armwave.c:287: {
 287:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2082              		.loc 1 287 1 is_stmt 0 view .LVU608
 2083 0968 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2084              		.cfi_def_cfa_offset 36
 2085              		.cfi_offset 4, -36
 2086              		.cfi_offset 5, -32
 2087              		.cfi_offset 6, -28
 2088              		.cfi_offset 7, -24
 2089              		.cfi_offset 8, -20
 2090              		.cfi_offset 9, -16
 2091              		.cfi_offset 10, -12
 2092              		.cfi_offset 11, -8
 2093              		.cfi_offset 14, -4
 2094              	@ armwave.c:295:     assert(out_buffer != NULL);
 292:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 293:armwave.c     ****     uint32_t offset;
 294:armwave.c     **** 
 295:armwave.c     ****     assert(out_buffer != NULL);
 2095              		.loc 1 295 5 view .LVU609
 2096 096c 000050E3 		cmp	r0, #0	@ out_buffer
 2097              	@ armwave.c:291:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 291:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2098              		.loc 1 291 15 view .LVU610
 2099 0970 44529FE5 		ldr	r5, .L149	@ tmp362,
 2100              	@ armwave.c:287: {
 287:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2101              		.loc 1 287 1 view .LVU611
 2102 0974 0CD04DE2 		sub	sp, sp, #12	@,,
 2103              		.cfi_def_cfa_offset 48
 2104              	@ armwave.c:291:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 291:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2105              		.loc 1 291 15 view .LVU612
 2106 0978 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2107              	.LVL136:
 292:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2108              		.loc 1 292 5 is_stmt 1 view .LVU613
 293:armwave.c     **** 
 2109              		.loc 1 293 5 view .LVU614
 2110              		.loc 1 295 5 view .LVU615
 2111 097c 8900000A 		beq	.L147		@,
 296:armwave.c     **** 
 297:armwave.c     ****     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2112              		.loc 1 297 5 view .LVU616
 2113              	@ armwave.c:297:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2114              		.loc 1 297 41 is_stmt 0 view .LVU617
 2115 0980 34C095E5 		ldr	ip, [r5, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2116 0984 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 2117              	.LVL137:
 298:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2118              		.loc 1 298 5 is_stmt 1 view .LVU618
 299:armwave.c     **** 
 300:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 2119              		.loc 1 300 5 view .LVU619
 2120              		.loc 1 300 5 is_stmt 0 view .LVU620
 2121 0988 00005CE3 		cmp	ip, #0	@ npix,
 2122 098c 0A0000DA 		ble	.L122		@,
 2123              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 301:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 302:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 303:armwave.c     ****         // most normal waveforms.
 304:armwave.c     ****         wave_word = *base_32ptr++;
 305:armwave.c     **** 
 306:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 307:armwave.c     ****             for(i = 0; i < 4; i++) {
 308:armwave.c     ****                 value = wave_word & 0xff;
 309:armwave.c     ****                 wave_word >>= 8;
 310:armwave.c     **** 
 311:armwave.c     ****                 if(value != 0) {
 312:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2124              		.loc 1 312 52 view .LVU621
 2125 0990 F8A4D5E1 		ldrsh	r10, [r5, #72]	@ _70, g_armwave_state.ch1_color.r
 2126              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2127              		.loc 1 313 52 view .LVU622
 2128 0994 FA94D5E1 		ldrsh	r9, [r5, #74]	@ _76, g_armwave_state.ch1_color.g
 2129              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2130              		.loc 1 314 52 view .LVU623
 2131 0998 FCB4D5E1 		ldrsh	fp, [r5, #76]	@ _80, g_armwave_state.ch1_color.b
 2132              	@ armwave.c:300:     for(n = 0; n < npix; n += 4) {
 300:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2133              		.loc 1 300 11 view .LVU624
 2134 099c 0030A0E3 		mov	r3, #0	@ n,
 2135 09a0 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 2136              	.LVL138:
 2137              	.L131:
 304:armwave.c     **** 
 2138              		.loc 1 304 9 is_stmt 1 view .LVU625
 2139              	@ armwave.c:304:         wave_word = *base_32ptr++;
 304:armwave.c     **** 
 2140              		.loc 1 304 19 is_stmt 0 view .LVU626
 2141 09a4 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 2142              	.LVL139:
 306:armwave.c     ****             for(i = 0; i < 4; i++) {
 2143              		.loc 1 306 9 is_stmt 1 view .LVU627
 2144              	@ armwave.c:306:         if(COND_UNLIKELY(wave_word != 0)) {
 306:armwave.c     ****             for(i = 0; i < 4; i++) {
 2145              		.loc 1 306 11 is_stmt 0 view .LVU628
 2146 09a8 000052E3 		cmp	r2, #0	@ wave_word,
 2147 09ac 0400001A 		bne	.L148		@,
 2148              	.LVL140:
 2149              	.L126:
 2150              	@ armwave.c:300:     for(n = 0; n < npix; n += 4) {
 300:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2151              		.loc 1 300 28 discriminator 2 view .LVU629
 2152 09b0 043083E2 		add	r3, r3, #4	@ n, n,
 2153              	.LVL141:
 2154              	@ armwave.c:300:     for(n = 0; n < npix; n += 4) {
 300:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2155              		.loc 1 300 5 discriminator 2 view .LVU630
 2156 09b4 03005CE1 		cmp	ip, r3	@ npix, n
 2157 09b8 F9FFFFCA 		bgt	.L131		@,
 2158              	.LVL142:
 2159              	.L122:
 2160              	@ armwave.c:333: }
 315:armwave.c     **** 
 316:armwave.c     ****                     r = MIN(rr, 255);
 317:armwave.c     ****                     g = MIN(gg, 255);
 318:armwave.c     ****                     b = MIN(bb, 255);
 319:armwave.c     **** 
 320:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 321:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 322:armwave.c     **** 
 323:armwave.c     ****                     // Do line scaling as necessary.
 324:armwave.c     ****                     nsub = n + i;
 325:armwave.c     ****                     xx = nsub & 0xff;
 326:armwave.c     ****                     yy = nsub >> 8;
 327:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 328:armwave.c     ****                     *(out_buffer_base + offset) = word;
 329:armwave.c     ****                 }
 330:armwave.c     ****             }
 331:armwave.c     ****         } 
 332:armwave.c     ****     }
 333:armwave.c     **** }
 2161              		.loc 1 333 1 view .LVU631
 2162 09bc 0CD08DE2 		add	sp, sp, #12	@,,
 2163              		.cfi_remember_state
 2164              		.cfi_def_cfa_offset 36
 2165              		@ sp needed	@
 2166 09c0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2167              	.LVL143:
 2168              	.L148:
 2169              		.cfi_restore_state
 308:armwave.c     ****                 wave_word >>= 8;
 2170              		.loc 1 308 17 is_stmt 1 view .LVU632
 309:armwave.c     **** 
 2171              		.loc 1 309 17 view .LVU633
 2172              	@ armwave.c:311:                 if(value != 0) {
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2173              		.loc 1 311 19 is_stmt 0 view .LVU634
 2174 09c4 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 2175              	@ armwave.c:309:                 wave_word >>= 8;
 309:armwave.c     **** 
 2176              		.loc 1 309 27 view .LVU635
 2177 09c8 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 2178              	.LVL144:
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2179              		.loc 1 311 17 is_stmt 1 view .LVU636
 2180              	@ armwave.c:311:                 if(value != 0) {
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2181              		.loc 1 311 19 is_stmt 0 view .LVU637
 2182 09cc 1900000A 		beq	.L127		@,
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2183              		.loc 1 312 21 is_stmt 1 view .LVU638
 2184              	.LVL145:
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2185              		.loc 1 313 21 view .LVU639
 314:armwave.c     **** 
 2186              		.loc 1 314 21 view .LVU640
 316:armwave.c     ****                     g = MIN(gg, 255);
 2187              		.loc 1 316 21 view .LVU641
 317:armwave.c     ****                     b = MIN(bb, 255);
 2188              		.loc 1 317 21 view .LVU642
 318:armwave.c     **** 
 2189              		.loc 1 318 21 view .LVU643
 321:armwave.c     **** 
 2190              		.loc 1 321 21 view .LVU644
 324:armwave.c     ****                     xx = nsub & 0xff;
 2191              		.loc 1 324 21 view .LVU645
 325:armwave.c     ****                     yy = nsub >> 8;
 2192              		.loc 1 325 21 view .LVU646
 326:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 2193              		.loc 1 326 21 view .LVU647
 327:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2194              		.loc 1 327 21 view .LVU648
 328:armwave.c     ****                 }
 2195              		.loc 1 328 21 view .LVU649
 2196              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     **** 
 2197              		.loc 1 314 55 is_stmt 0 view .LVU650
 2198 09d0 9B0604E0 		mul	r4, fp, r6	@ tmp278, _80, _72
 2199              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2200              		.loc 1 313 55 view .LVU651
 2201 09d4 990608E0 		mul	r8, r9, r6	@ tmp282, _76, _72
 2202              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     **** 
 2203              		.loc 1 314 24 view .LVU652
 2204 09d8 4444A0E1 		asr	r4, r4, #8	@ bb, tmp278,
 2205              	.LVL146:
 2206              	@ armwave.c:318:                     b = MIN(bb, 255);
 318:armwave.c     **** 
 2207              		.loc 1 318 25 view .LVU653
 2208 09dc FF0054E3 		cmp	r4, #255	@ bb,
 2209              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2210              		.loc 1 313 24 view .LVU654
 2211 09e0 4884A0E1 		asr	r8, r8, #8	@ gg, tmp282,
 2212              	.LVL147:
 2213              	@ armwave.c:318:                     b = MIN(bb, 255);
 318:armwave.c     **** 
 2214              		.loc 1 318 25 view .LVU655
 2215 09e4 FF40A0A3 		movge	r4, #255	@ bb,
 2216              	.LVL148:
 2217              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2218              		.loc 1 312 55 view .LVU656
 2219 09e8 960A06E0 		mul	r6, r6, r10	@ tmp288, _72, _70
 2220              	.LVL149:
 2221              	@ armwave.c:317:                     g = MIN(gg, 255);
 317:armwave.c     ****                     b = MIN(bb, 255);
 2222              		.loc 1 317 25 view .LVU657
 2223 09ec FF0058E3 		cmp	r8, #255	@ gg,
 2224 09f0 FF80A0A3 		movge	r8, #255	@ gg,
 2225              	.LVL150:
 2226              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2227              		.loc 1 312 24 view .LVU658
 2228 09f4 4664A0E1 		asr	r6, r6, #8	@ rr, tmp288,
 2229              	.LVL151:
 2230              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2231              		.loc 1 321 56 view .LVU659
 2232 09f8 0884A0E1 		lsl	r8, r8, #8	@ tmp283, gg,
 2233              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2234              		.loc 1 328 39 view .LVU660
 2235 09fc 340095E5 		ldr	r0, [r5, #52]	@ tmp374, g_armwave_state.target_width
 2236              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2237              		.loc 1 321 44 view .LVU661
 2238 0a00 0448A0E1 		lsl	r4, r4, #16	@ tmp279, bb,
 2239              	@ armwave.c:316:                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 2240              		.loc 1 316 25 view .LVU662
 2241 0a04 FF0056E3 		cmp	r6, #255	@ rr,
 2242              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2243              		.loc 1 321 56 view .LVU663
 2244 0a08 7880FFE6 		uxth	r8, r8	@ tmp284, tmp283
 2245              	@ armwave.c:325:                     xx = nsub & 0xff;
 325:armwave.c     ****                     yy = nsub >> 8;
 2246              		.loc 1 325 24 view .LVU664
 2247 0a0c 7370EFE6 		uxtb	r7, r3	@ xx, n
 2248              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2249              		.loc 1 321 44 view .LVU665
 2250 0a10 FF4804E2 		and	r4, r4, #16711680	@ tmp280, tmp279,
 2251              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2252              		.loc 1 321 51 view .LVU666
 2253 0a14 084084E1 		orr	r4, r4, r8	@ tmp286, tmp280, tmp284
 2254              	@ armwave.c:316:                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 2255              		.loc 1 316 25 view .LVU667
 2256 0a18 FF60A0A3 		movge	r6, #255	@ rr,
 2257              	.LVL152:
 2258              	@ armwave.c:326:                     yy = nsub >> 8;
 326:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 2259              		.loc 1 326 31 view .LVU668
 2260 0a1c 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 2261              	.LVL153:
 2262              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2263              		.loc 1 328 39 view .LVU669
 2264 0a20 908727E0 		mla	r7, r0, r7, r8	@ tmp276, tmp374, xx, yy
 2265              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2266              		.loc 1 321 62 view .LVU670
 2267 0a24 7660EFE6 		uxtb	r6, r6	@ rr, rr
 2268              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2269              		.loc 1 328 49 view .LVU671
 2270 0a28 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2271              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2272              		.loc 1 321 62 view .LVU672
 2273 0a2c 066084E1 		orr	r6, r4, r6	@ tmp290, tmp286, rr
 2274              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2275              		.loc 1 321 26 view .LVU673
 2276 0a30 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp290,
 2277              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2278              		.loc 1 328 49 view .LVU674
 2279 0a34 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 2280              	.LVL154:
 2281              	.L127:
 308:armwave.c     ****                 wave_word >>= 8;
 2282              		.loc 1 308 17 is_stmt 1 view .LVU675
 309:armwave.c     **** 
 2283              		.loc 1 309 17 view .LVU676
 2284              	@ armwave.c:311:                 if(value != 0) {
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2285              		.loc 1 311 19 is_stmt 0 view .LVU677
 2286 0a38 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 2287              	.LVL155:
 2288              	@ armwave.c:309:                 wave_word >>= 8;
 309:armwave.c     **** 
 2289              		.loc 1 309 27 view .LVU678
 2290 0a3c 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 2291              	.LVL156:
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2292              		.loc 1 311 17 is_stmt 1 view .LVU679
 2293              	@ armwave.c:311:                 if(value != 0) {
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2294              		.loc 1 311 19 is_stmt 0 view .LVU680
 2295 0a40 1C00000A 		beq	.L128		@,
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2296              		.loc 1 312 21 is_stmt 1 view .LVU681
 2297              	.LVL157:
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2298              		.loc 1 313 21 view .LVU682
 314:armwave.c     **** 
 2299              		.loc 1 314 21 view .LVU683
 316:armwave.c     ****                     g = MIN(gg, 255);
 2300              		.loc 1 316 21 view .LVU684
 317:armwave.c     ****                     b = MIN(bb, 255);
 2301              		.loc 1 317 21 view .LVU685
 318:armwave.c     **** 
 2302              		.loc 1 318 21 view .LVU686
 321:armwave.c     **** 
 2303              		.loc 1 321 21 view .LVU687
 324:armwave.c     ****                     xx = nsub & 0xff;
 2304              		.loc 1 324 21 view .LVU688
 2305              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     **** 
 2306              		.loc 1 314 55 is_stmt 0 view .LVU689
 2307 0a44 9E0B04E0 		mul	r4, lr, fp	@ tmp301, _118, _80
 2308              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2309              		.loc 1 313 55 view .LVU690
 2310 0a48 9E0907E0 		mul	r7, lr, r9	@ tmp305, _118, _76
 2311              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     **** 
 2312              		.loc 1 314 24 view .LVU691
 2313 0a4c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp301,
 2314              	.LVL158:
 2315              	@ armwave.c:318:                     b = MIN(bb, 255);
 318:armwave.c     **** 
 2316              		.loc 1 318 25 view .LVU692
 2317 0a50 FF0054E3 		cmp	r4, #255	@ bb,
 2318 0a54 FF40A0A3 		movge	r4, #255	@ bb,
 2319              	.LVL159:
 2320              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2321              		.loc 1 312 55 view .LVU693
 2322 0a58 9E0A0EE0 		mul	lr, lr, r10	@ tmp311, _118, _70
 2323              	.LVL160:
 2324              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2325              		.loc 1 313 24 view .LVU694
 2326 0a5c 4774A0E1 		asr	r7, r7, #8	@ gg, tmp305,
 2327              	.LVL161:
 2328              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2329              		.loc 1 321 44 view .LVU695
 2330 0a60 0448A0E1 		lsl	r4, r4, #16	@ tmp302, bb,
 2331              	@ armwave.c:317:                     g = MIN(gg, 255);
 317:armwave.c     ****                     b = MIN(bb, 255);
 2332              		.loc 1 317 25 view .LVU696
 2333 0a64 FF0057E3 		cmp	r7, #255	@ gg,
 2334 0a68 016083E2 		add	r6, r3, #1	@ _158, n,
 325:armwave.c     ****                     yy = nsub >> 8;
 2335              		.loc 1 325 21 is_stmt 1 view .LVU697
 326:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 2336              		.loc 1 326 21 view .LVU698
 327:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2337              		.loc 1 327 21 view .LVU699
 328:armwave.c     ****                 }
 2338              		.loc 1 328 21 view .LVU700
 2339              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2340              		.loc 1 321 44 is_stmt 0 view .LVU701
 2341 0a6c FF4804E2 		and	r4, r4, #16711680	@ tmp303, tmp302,
 2342              	@ armwave.c:317:                     g = MIN(gg, 255);
 317:armwave.c     ****                     b = MIN(bb, 255);
 2343              		.loc 1 317 25 view .LVU702
 2344 0a70 FF70A0A3 		movge	r7, #255	@ gg,
 2345              	.LVL162:
 2346              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2347              		.loc 1 321 44 view .LVU703
 2348 0a74 04408DE5 		str	r4, [sp, #4]	@ tmp303, %sfp
 2349              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2350              		.loc 1 328 39 view .LVU704
 2351 0a78 344095E5 		ldr	r4, [r5, #52]	@ tmp377, g_armwave_state.target_width
 2352              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2353              		.loc 1 312 24 view .LVU705
 2354 0a7c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp311,
 2355              	.LVL163:
 2356              	@ armwave.c:325:                     xx = nsub & 0xff;
 325:armwave.c     ****                     yy = nsub >> 8;
 2357              		.loc 1 325 24 view .LVU706
 2358 0a80 7600EFE6 		uxtb	r0, r6	@ xx, _158
 2359              	@ armwave.c:316:                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 2360              		.loc 1 316 25 view .LVU707
 2361 0a84 FF005EE3 		cmp	lr, #255	@ rr,
 2362              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2363              		.loc 1 321 56 view .LVU708
 2364 0a88 0774A0E1 		lsl	r7, r7, #8	@ tmp306, gg,
 2365              	@ armwave.c:326:                     yy = nsub >> 8;
 326:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 2366              		.loc 1 326 31 view .LVU709
 2367 0a8c 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 2368              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2369              		.loc 1 328 39 view .LVU710
 2370 0a90 946026E0 		mla	r6, r4, r0, r6	@ tmp299, tmp377, xx, yy
 2371              	@ armwave.c:316:                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 2372              		.loc 1 316 25 view .LVU711
 2373 0a94 FFE0A0A3 		movge	lr, #255	@ rr,
 2374              	.LVL164:
 2375              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2376              		.loc 1 321 51 view .LVU712
 2377 0a98 04009DE5 		ldr	r0, [sp, #4]	@ tmp303, %sfp
 2378              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2379              		.loc 1 321 56 view .LVU713
 2380 0a9c 7770FFE6 		uxth	r7, r7	@ tmp307, tmp306
 2381              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2382              		.loc 1 321 51 view .LVU714
 2383 0aa0 074080E1 		orr	r4, r0, r7	@ tmp309, tmp303, tmp307
 2384              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2385              		.loc 1 321 62 view .LVU715
 2386 0aa4 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 2387              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2388              		.loc 1 328 49 view .LVU716
 2389 0aa8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2390              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2391              		.loc 1 321 62 view .LVU717
 2392 0aac 0EE084E1 		orr	lr, r4, lr	@ tmp313, tmp309, rr
 2393              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2394              		.loc 1 321 26 view .LVU718
 2395 0ab0 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp313,
 2396              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2397              		.loc 1 328 49 view .LVU719
 2398 0ab4 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 2399              	.LVL165:
 2400              	.L128:
 308:armwave.c     ****                 wave_word >>= 8;
 2401              		.loc 1 308 17 is_stmt 1 view .LVU720
 309:armwave.c     **** 
 2402              		.loc 1 309 17 view .LVU721
 2403              	@ armwave.c:311:                 if(value != 0) {
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2404              		.loc 1 311 19 is_stmt 0 view .LVU722
 2405 0ab8 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 2406              	@ armwave.c:309:                 wave_word >>= 8;
 309:armwave.c     **** 
 2407              		.loc 1 309 27 view .LVU723
 2408 0abc 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 2409              	.LVL166:
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2410              		.loc 1 311 17 is_stmt 1 view .LVU724
 2411              	@ armwave.c:311:                 if(value != 0) {
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2412              		.loc 1 311 19 is_stmt 0 view .LVU725
 2413 0ac0 1A00000A 		beq	.L129		@,
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2414              		.loc 1 312 21 is_stmt 1 view .LVU726
 2415              	.LVL167:
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2416              		.loc 1 313 21 view .LVU727
 314:armwave.c     **** 
 2417              		.loc 1 314 21 view .LVU728
 316:armwave.c     ****                     g = MIN(gg, 255);
 2418              		.loc 1 316 21 view .LVU729
 317:armwave.c     ****                     b = MIN(bb, 255);
 2419              		.loc 1 317 21 view .LVU730
 318:armwave.c     **** 
 2420              		.loc 1 318 21 view .LVU731
 321:armwave.c     **** 
 2421              		.loc 1 321 21 view .LVU732
 324:armwave.c     ****                     xx = nsub & 0xff;
 2422              		.loc 1 324 21 view .LVU733
 2423              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     **** 
 2424              		.loc 1 314 55 is_stmt 0 view .LVU734
 2425 0ac4 9E0B04E0 		mul	r4, lr, fp	@ tmp324, _164, _80
 2426              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2427              		.loc 1 313 55 view .LVU735
 2428 0ac8 9E0906E0 		mul	r6, lr, r9	@ tmp328, _164, _76
 2429              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     **** 
 2430              		.loc 1 314 24 view .LVU736
 2431 0acc 4444A0E1 		asr	r4, r4, #8	@ bb, tmp324,
 2432              	.LVL168:
 2433              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2434              		.loc 1 312 55 view .LVU737
 2435 0ad0 9E0A0EE0 		mul	lr, lr, r10	@ tmp334, _164, _70
 2436              	.LVL169:
 2437              	@ armwave.c:318:                     b = MIN(bb, 255);
 318:armwave.c     **** 
 2438              		.loc 1 318 25 view .LVU738
 2439 0ad4 FF0054E3 		cmp	r4, #255	@ bb,
 2440              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2441              		.loc 1 313 24 view .LVU739
 2442 0ad8 4664A0E1 		asr	r6, r6, #8	@ gg, tmp328,
 2443              	.LVL170:
 2444              	@ armwave.c:318:                     b = MIN(bb, 255);
 318:armwave.c     **** 
 2445              		.loc 1 318 25 view .LVU740
 2446 0adc FF40A0A3 		movge	r4, #255	@ bb,
 2447              	.LVL171:
 2448              	@ armwave.c:317:                     g = MIN(gg, 255);
 317:armwave.c     ****                     b = MIN(bb, 255);
 2449              		.loc 1 317 25 view .LVU741
 2450 0ae0 FF0056E3 		cmp	r6, #255	@ gg,
 2451 0ae4 FF60A0A3 		movge	r6, #255	@ gg,
 2452              	.LVL172:
 317:armwave.c     ****                     b = MIN(bb, 255);
 2453              		.loc 1 317 25 view .LVU742
 2454 0ae8 027083E2 		add	r7, r3, #2	@ _66, n,
 325:armwave.c     ****                     yy = nsub >> 8;
 2455              		.loc 1 325 21 is_stmt 1 view .LVU743
 326:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 2456              		.loc 1 326 21 view .LVU744
 327:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2457              		.loc 1 327 21 view .LVU745
 328:armwave.c     ****                 }
 2458              		.loc 1 328 21 view .LVU746
 2459              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2460              		.loc 1 312 24 is_stmt 0 view .LVU747
 2461 0aec 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp334,
 2462              	.LVL173:
 2463              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2464              		.loc 1 328 39 view .LVU748
 2465 0af0 340095E5 		ldr	r0, [r5, #52]	@ tmp378, g_armwave_state.target_width
 2466              	@ armwave.c:316:                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 2467              		.loc 1 316 25 view .LVU749
 2468 0af4 FF005EE3 		cmp	lr, #255	@ rr,
 2469              	@ armwave.c:325:                     xx = nsub & 0xff;
 325:armwave.c     ****                     yy = nsub >> 8;
 2470              		.loc 1 325 24 view .LVU750
 2471 0af8 7780EFE6 		uxtb	r8, r7	@ xx, _66
 2472              	.LVL174:
 2473              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2474              		.loc 1 321 56 view .LVU751
 2475 0afc 0664A0E1 		lsl	r6, r6, #8	@ tmp329, gg,
 2476              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2477              		.loc 1 321 44 view .LVU752
 2478 0b00 0448A0E1 		lsl	r4, r4, #16	@ tmp325, bb,
 2479              	@ armwave.c:316:                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 2480              		.loc 1 316 25 view .LVU753
 2481 0b04 FFE0A0A3 		movge	lr, #255	@ rr,
 2482              	.LVL175:
 2483              	@ armwave.c:326:                     yy = nsub >> 8;
 326:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 2484              		.loc 1 326 31 view .LVU754
 2485 0b08 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 2486              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2487              		.loc 1 328 39 view .LVU755
 2488 0b0c 907827E0 		mla	r7, r0, r8, r7	@ tmp322, tmp378, xx, yy
 2489              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2490              		.loc 1 321 44 view .LVU756
 2491 0b10 FF4804E2 		and	r4, r4, #16711680	@ tmp326, tmp325,
 2492              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2493              		.loc 1 321 56 view .LVU757
 2494 0b14 7660FFE6 		uxth	r6, r6	@ tmp330, tmp329
 2495              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2496              		.loc 1 321 51 view .LVU758
 2497 0b18 066084E1 		orr	r6, r4, r6	@ tmp332, tmp326, tmp330
 2498              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2499              		.loc 1 321 62 view .LVU759
 2500 0b1c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 2501              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2502              		.loc 1 328 49 view .LVU760
 2503 0b20 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2504              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2505              		.loc 1 321 62 view .LVU761
 2506 0b24 0EE086E1 		orr	lr, r6, lr	@ tmp336, tmp332, rr
 2507              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2508              		.loc 1 321 26 view .LVU762
 2509 0b28 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp336,
 2510              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2511              		.loc 1 328 49 view .LVU763
 2512 0b2c 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 2513              	.L129:
 2514              	.LVL176:
 308:armwave.c     ****                 wave_word >>= 8;
 2515              		.loc 1 308 17 is_stmt 1 view .LVU764
 309:armwave.c     **** 
 2516              		.loc 1 309 17 view .LVU765
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2517              		.loc 1 311 17 view .LVU766
 2518              	@ armwave.c:311:                 if(value != 0) {
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2519              		.loc 1 311 19 is_stmt 0 view .LVU767
 2520 0b30 000052E3 		cmp	r2, #0	@ wave_word,
 2521 0b34 9DFFFF0A 		beq	.L126		@,
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2522              		.loc 1 312 21 is_stmt 1 view .LVU768
 2523              	.LVL177:
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2524              		.loc 1 313 21 view .LVU769
 314:armwave.c     **** 
 2525              		.loc 1 314 21 view .LVU770
 316:armwave.c     ****                     g = MIN(gg, 255);
 2526              		.loc 1 316 21 view .LVU771
 317:armwave.c     ****                     b = MIN(bb, 255);
 2527              		.loc 1 317 21 view .LVU772
 318:armwave.c     **** 
 2528              		.loc 1 318 21 view .LVU773
 321:armwave.c     **** 
 2529              		.loc 1 321 21 view .LVU774
 324:armwave.c     ****                     xx = nsub & 0xff;
 2530              		.loc 1 324 21 view .LVU775
 2531              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     **** 
 2532              		.loc 1 314 55 is_stmt 0 view .LVU776
 2533 0b38 920B0EE0 		mul	lr, r2, fp	@ tmp345, wave_word, _80
 2534              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2535              		.loc 1 313 55 view .LVU777
 2536 0b3c 920904E0 		mul	r4, r2, r9	@ tmp349, wave_word, _76
 2537              	@ armwave.c:314:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 314:armwave.c     **** 
 2538              		.loc 1 314 24 view .LVU778
 2539 0b40 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp345,
 2540              	.LVL178:
 2541              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2542              		.loc 1 312 55 view .LVU779
 2543 0b44 920A02E0 		mul	r2, r2, r10	@ tmp355, wave_word, _70
 2544              	.LVL179:
 2545              	@ armwave.c:318:                     b = MIN(bb, 255);
 318:armwave.c     **** 
 2546              		.loc 1 318 25 view .LVU780
 2547 0b48 FF005EE3 		cmp	lr, #255	@ bb,
 2548              	@ armwave.c:313:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2549              		.loc 1 313 24 view .LVU781
 2550 0b4c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp349,
 2551              	.LVL180:
 2552              	@ armwave.c:318:                     b = MIN(bb, 255);
 318:armwave.c     **** 
 2553              		.loc 1 318 25 view .LVU782
 2554 0b50 FFE0A0A3 		movge	lr, #255	@ bb,
 2555              	.LVL181:
 2556              	@ armwave.c:317:                     g = MIN(gg, 255);
 317:armwave.c     ****                     b = MIN(bb, 255);
 2557              		.loc 1 317 25 view .LVU783
 2558 0b54 FF0054E3 		cmp	r4, #255	@ gg,
 2559 0b58 FF40A0A3 		movge	r4, #255	@ gg,
 2560              	.LVL182:
 317:armwave.c     ****                     b = MIN(bb, 255);
 2561              		.loc 1 317 25 view .LVU784
 2562 0b5c 036083E2 		add	r6, r3, #3	@ _59, n,
 325:armwave.c     ****                     yy = nsub >> 8;
 2563              		.loc 1 325 21 is_stmt 1 view .LVU785
 326:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 2564              		.loc 1 326 21 view .LVU786
 327:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2565              		.loc 1 327 21 view .LVU787
 328:armwave.c     ****                 }
 2566              		.loc 1 328 21 view .LVU788
 2567              	@ armwave.c:312:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2568              		.loc 1 312 24 is_stmt 0 view .LVU789
 2569 0b60 4224A0E1 		asr	r2, r2, #8	@ rr, tmp355,
 2570              	.LVL183:
 2571              	@ armwave.c:327:                     offset = (yy + (xx * g_armwave_state.target_width));
 327:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2572              		.loc 1 327 40 view .LVU790
 2573 0b64 347095E5 		ldr	r7, [r5, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2574              	@ armwave.c:316:                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 2575              		.loc 1 316 25 view .LVU791
 2576 0b68 FF0052E3 		cmp	r2, #255	@ rr,
 2577              	@ armwave.c:325:                     xx = nsub & 0xff;
 325:armwave.c     ****                     yy = nsub >> 8;
 2578              		.loc 1 325 24 view .LVU792
 2579 0b6c 7680EFE6 		uxtb	r8, r6	@ xx, _59
 2580              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2581              		.loc 1 321 56 view .LVU793
 2582 0b70 0444A0E1 		lsl	r4, r4, #8	@ tmp350, gg,
 2583              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2584              		.loc 1 321 44 view .LVU794
 2585 0b74 0EE8A0E1 		lsl	lr, lr, #16	@ tmp346, bb,
 2586              	@ armwave.c:316:                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 2587              		.loc 1 316 25 view .LVU795
 2588 0b78 FF20A0A3 		movge	r2, #255	@ rr,
 2589              	.LVL184:
 2590              	@ armwave.c:326:                     yy = nsub >> 8;
 326:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width));
 2591              		.loc 1 326 31 view .LVU796
 2592 0b7c 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 2593              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2594              		.loc 1 321 44 view .LVU797
 2595 0b80 FFE80EE2 		and	lr, lr, #16711680	@ tmp347, tmp346,
 2596              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2597              		.loc 1 321 56 view .LVU798
 2598 0b84 7440FFE6 		uxth	r4, r4	@ tmp351, tmp350
 2599              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2600              		.loc 1 328 39 view .LVU799
 2601 0b88 976826E0 		mla	r6, r7, r8, r6	@ tmp343, g_armwave_state.target_width, xx, yy
 2602              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2603              		.loc 1 321 51 view .LVU800
 2604 0b8c 04E08EE1 		orr	lr, lr, r4	@ tmp353, tmp347, tmp351
 2605              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2606              		.loc 1 321 62 view .LVU801
 2607 0b90 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2608              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2609              		.loc 1 328 49 view .LVU802
 2610 0b94 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2611              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2612              		.loc 1 321 62 view .LVU803
 2613 0b98 02208EE1 		orr	r2, lr, r2	@ tmp357, tmp353, rr
 2614              	@ armwave.c:321:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 2615              		.loc 1 321 26 view .LVU804
 2616 0b9c FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp357,
 2617              	@ armwave.c:328:                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 2618              		.loc 1 328 49 view .LVU805
 2619 0ba0 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 2620 0ba4 81FFFFEA 		b	.L126		@
 2621              	.LVL185:
 2622              	.L147:
 295:armwave.c     **** 
 2623              		.loc 1 295 5 is_stmt 1 discriminator 1 view .LVU806
 2624 0ba8 10309FE5 		ldr	r3, .L149+4	@,
 2625 0bac 10209FE5 		ldr	r2, .L149+8	@,
 2626 0bb0 10109FE5 		ldr	r1, .L149+12	@,
 2627              	.LVL186:
 295:armwave.c     **** 
 2628              		.loc 1 295 5 is_stmt 0 discriminator 1 view .LVU807
 2629 0bb4 10009FE5 		ldr	r0, .L149+16	@,
 2630              	.LVL187:
 295:armwave.c     **** 
 2631              		.loc 1 295 5 discriminator 1 view .LVU808
 2632 0bb8 FEFFFFEB 		bl	__assert_fail		@
 2633              	.LVL188:
 2634              	.L150:
 295:armwave.c     **** 
 2635              		.loc 1 295 5 discriminator 1 view .LVU809
 2636              		.align	2
 2637              	.L149:
 2638 0bbc 00000000 		.word	g_armwave_state
 2639 0bc0 30000000 		.word	.LANCHOR0+48
 2640 0bc4 27010000 		.word	295
 2641 0bc8 00000000 		.word	.LC0
 2642 0bcc D4000000 		.word	.LC5
 2643              		.cfi_endproc
 2644              	.LFE64:
 2646              		.align	2
 2647              		.global	armwave_dump_ppm_debug
 2648              		.syntax unified
 2649              		.arm
 2650              		.fpu vfp
 2652              	armwave_dump_ppm_debug:
 2653              	.LVL189:
 2654              	.LFB65:
 334:armwave.c     **** 
 335:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 336:armwave.c     **** {
 2655              		.loc 1 336 1 is_stmt 1 view -0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 0
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
 337:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2659              		.loc 1 337 5 view .LVU811
 2660              	@ armwave.c:336: {
 336:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2661              		.loc 1 336 1 is_stmt 0 view .LVU812
 2662 0bd0 0130A0E1 		mov	r3, r1	@ fn, fn
 2663 0bd4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2664              		.cfi_def_cfa_offset 28
 2665              		.cfi_offset 4, -28
 2666              		.cfi_offset 5, -24
 2667              		.cfi_offset 6, -20
 2668              		.cfi_offset 7, -16
 2669              		.cfi_offset 8, -12
 2670              		.cfi_offset 9, -8
 2671              		.cfi_offset 14, -4
 2672 0bd8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2673 0bdc 0CD04DE2 		sub	sp, sp, #12	@,,
 2674              		.cfi_def_cfa_offset 40
 2675              	@ armwave.c:337:     FILE *fp = fopen(fn, "wb");
 2676              		.loc 1 337 16 view .LVU813
 2677 0be0 D8109FE5 		ldr	r1, .L163	@,
 2678              	.LVL190:
 2679              		.loc 1 337 16 view .LVU814
 2680 0be4 0300A0E1 		mov	r0, r3	@, fn
 2681              	.LVL191:
 2682              		.loc 1 337 16 view .LVU815
 2683 0be8 FEFFFFEB 		bl	fopen64		@
 2684              	.LVL192:
 2685              	@ armwave.c:344:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 338:armwave.c     ****     uint32_t data;
 339:armwave.c     ****     int xx, yy;
 340:armwave.c     **** 
 341:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 342:armwave.c     **** 
 343:armwave.c     ****     fputs("P3\n", fp);
 344:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2686              		.loc 1 344 5 view .LVU816
 2687 0bec D0609FE5 		ldr	r6, .L163+4	@ tmp154,
 2688              	@ armwave.c:343:     fputs("P3\n", fp);
 343:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2689              		.loc 1 343 5 view .LVU817
 2690 0bf0 0320A0E3 		mov	r2, #3	@,
 2691 0bf4 0110A0E3 		mov	r1, #1	@,
 2692              	@ armwave.c:337:     FILE *fp = fopen(fn, "wb");
 337:armwave.c     ****     uint32_t data;
 2693              		.loc 1 337 16 view .LVU818
 2694 0bf8 0070A0E1 		mov	r7, r0	@ fp,
 2695              	.LVL193:
 338:armwave.c     ****     uint32_t data;
 2696              		.loc 1 338 5 is_stmt 1 view .LVU819
 339:armwave.c     **** 
 2697              		.loc 1 339 5 view .LVU820
 343:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2698              		.loc 1 343 5 view .LVU821
 2699 0bfc 0030A0E1 		mov	r3, r0	@, fp
 2700 0c00 C0009FE5 		ldr	r0, .L163+8	@,
 2701              	.LVL194:
 343:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2702              		.loc 1 343 5 is_stmt 0 view .LVU822
 2703 0c04 FEFFFFEB 		bl	fwrite		@
 2704              	.LVL195:
 2705              		.loc 1 344 5 is_stmt 1 view .LVU823
 2706 0c08 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 2707 0c0c 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 2708 0c10 B4109FE5 		ldr	r1, .L163+12	@,
 2709 0c14 0700A0E1 		mov	r0, r7	@, fp
 2710 0c18 FEFFFFEB 		bl	fprintf		@
 2711              	.LVL196:
 345:armwave.c     ****     fputs("255\n", fp);
 2712              		.loc 1 345 5 view .LVU824
 2713 0c1c 0420A0E3 		mov	r2, #4	@,
 2714 0c20 0730A0E1 		mov	r3, r7	@, fp
 2715 0c24 0110A0E3 		mov	r1, #1	@,
 2716 0c28 A0009FE5 		ldr	r0, .L163+16	@,
 2717 0c2c FEFFFFEB 		bl	fwrite		@
 2718              	.LVL197:
 346:armwave.c     **** 
 347:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2719              		.loc 1 347 5 view .LVU825
 2720              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2721              		.loc 1 347 37 is_stmt 0 view .LVU826
 2722 0c30 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 2723              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2724              		.loc 1 347 5 view .LVU827
 2725 0c34 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2726 0c38 1800000A 		beq	.L152		@,
 2727 0c3c 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 2728              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 349:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 350:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 351:armwave.c     **** 
 352:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2729              		.loc 1 352 13 view .LVU828
 2730 0c40 8C909FE5 		ldr	r9, .L163+20	@ tmp156,
 2731              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2732              		.loc 1 347 12 view .LVU829
 2733 0c44 0050A0E3 		mov	r5, #0	@ yy,
 2734              	.LVL198:
 2735              	.L153:
 2736              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2737              		.loc 1 348 9 view .LVU830
 2738 0c48 000053E3 		cmp	r3, #0	@ _12,
 2739              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2740              		.loc 1 348 16 view .LVU831
 2741 0c4c 0040A013 		movne	r4, #0	@ xx,
 2742              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2743              		.loc 1 348 9 view .LVU832
 2744 0c50 1600000A 		beq	.L162		@,
 2745              	.LVL199:
 2746              	.L154:
 349:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2747              		.loc 1 349 13 is_stmt 1 discriminator 3 view .LVU833
 2748              	@ armwave.c:349:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 349:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2749              		.loc 1 349 29 is_stmt 0 discriminator 3 view .LVU834
 2750 0c54 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2751              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2752              		.loc 1 352 13 discriminator 3 view .LVU835
 2753 0c58 0910A0E1 		mov	r1, r9	@, tmp156
 2754 0c5c 0700A0E1 		mov	r0, r7	@, fp
 2755              	@ armwave.c:349:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 349:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2756              		.loc 1 349 18 discriminator 3 view .LVU836
 2757 0c60 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2758              	.LVL200:
 2759              		.loc 1 352 13 is_stmt 1 discriminator 3 view .LVU837
 2760              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2761              		.loc 1 348 58 is_stmt 0 discriminator 3 view .LVU838
 2762 0c64 014084E2 		add	r4, r4, #1	@ xx, xx,
 2763              	.LVL201:
 2764              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2765              		.loc 1 352 81 discriminator 3 view .LVU839
 2766 0c68 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2767              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2768              		.loc 1 352 61 discriminator 3 view .LVU840
 2769 0c6c 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2770              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2771              		.loc 1 352 13 discriminator 3 view .LVU841
 2772 0c70 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2773 0c74 7330EFE6 		uxtb	r3, r3	@, tmp146
 2774 0c78 00C08DE5 		str	ip, [sp]	@ tmp151,
 2775 0c7c 7220EFE6 		uxtb	r2, r2	@, data
 2776              	.LVL202:
 2777              		.loc 1 352 13 discriminator 3 view .LVU842
 2778 0c80 FEFFFFEB 		bl	fprintf		@
 2779              	.LVL203:
 2780              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2781              		.loc 1 348 41 discriminator 3 view .LVU843
 2782 0c84 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 2783              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2784              		.loc 1 348 9 discriminator 3 view .LVU844
 2785 0c88 040053E1 		cmp	r3, r4	@ _12, xx
 2786 0c8c F0FFFF8A 		bhi	.L154		@,
 2787 0c90 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 2788              	.LVL204:
 2789              	.L155:
 2790              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2791              		.loc 1 347 55 discriminator 2 view .LVU845
 2792 0c94 015085E2 		add	r5, r5, #1	@ yy, yy,
 2793              	.LVL205:
 2794              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2795              		.loc 1 347 5 discriminator 2 view .LVU846
 2796 0c98 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2797 0c9c E9FFFF3A 		bcc	.L153		@,
 2798              	.LVL206:
 2799              	.L152:
 353:armwave.c     ****         }
 354:armwave.c     ****     }
 355:armwave.c     **** 
 356:armwave.c     ****     fclose(fp);
 2800              		.loc 1 356 5 is_stmt 1 view .LVU847
 2801 0ca0 0700A0E1 		mov	r0, r7	@, fp
 2802              	@ armwave.c:357: }
 357:armwave.c     **** }
 2803              		.loc 1 357 1 is_stmt 0 view .LVU848
 2804 0ca4 0CD08DE2 		add	sp, sp, #12	@,,
 2805              		.cfi_remember_state
 2806              		.cfi_def_cfa_offset 28
 2807              		@ sp needed	@
 2808 0ca8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2809              		.cfi_restore 14
 2810              		.cfi_restore 9
 2811              		.cfi_restore 8
 2812              		.cfi_restore 7
 2813              		.cfi_restore 6
 2814              		.cfi_restore 5
 2815              		.cfi_restore 4
 2816              		.cfi_def_cfa_offset 0
 2817              	.LVL207:
 2818              	@ armwave.c:356:     fclose(fp);
 356:armwave.c     **** }
 2819              		.loc 1 356 5 view .LVU849
 2820 0cac FEFFFFEA 		b	fclose		@
 2821              	.LVL208:
 2822              	.L162:
 2823              		.cfi_restore_state
 2824              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2825              		.loc 1 347 55 view .LVU850
 2826 0cb0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2827              	.LVL209:
 2828              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2829              		.loc 1 347 5 view .LVU851
 2830 0cb4 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2831 0cb8 F5FFFF8A 		bhi	.L155		@,
 2832 0cbc F7FFFFEA 		b	.L152		@
 2833              	.L164:
 2834              		.align	2
 2835              	.L163:
 2836 0cc0 F0000000 		.word	.LC7
 2837 0cc4 00000000 		.word	g_armwave_state
 2838 0cc8 F4000000 		.word	.LC8
 2839 0ccc F8000000 		.word	.LC9
 2840 0cd0 00010000 		.word	.LC10
 2841 0cd4 08010000 		.word	.LC11
 2842              		.cfi_endproc
 2843              	.LFE65:
 2845              		.align	2
 2846              		.global	armwave_test_init
 2847              		.syntax unified
 2848              		.arm
 2849              		.fpu vfp
 2851              	armwave_test_init:
 2852              	.LVL210:
 2853              	.LFB66:
 358:armwave.c     **** 
 359:armwave.c     **** void armwave_test_init(float mod, int render_width, int render_height)
 360:armwave.c     **** {
 2854              		.loc 1 360 1 is_stmt 1 view -0
 2855              		.cfi_startproc
 2856              		@ args = 0, pretend = 0, frame = 0
 2857              		@ frame_needed = 0, uses_anonymous_args = 0
 361:armwave.c     ****     mod_depth = mod;
 2858              		.loc 1 361 5 view .LVU853
 2859              	@ armwave.c:361:     mod_depth = mod;
 2860              		.loc 1 361 15 is_stmt 0 view .LVU854
 2861 0cd8 9C309FE5 		ldr	r3, .L169+20	@ tmp128,
 2862              	@ armwave.c:360: {
 360:armwave.c     ****     mod_depth = mod;
 2863              		.loc 1 360 1 view .LVU855
 2864 0cdc F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2865              		.cfi_def_cfa_offset 24
 2866              		.cfi_offset 4, -24
 2867              		.cfi_offset 5, -20
 2868              		.cfi_offset 6, -16
 2869              		.cfi_offset 7, -12
 2870              		.cfi_offset 8, -8
 2871              		.cfi_offset 14, -4
 2872 0ce0 068B2DED 		vpush.64	{d8, d9, d10}	@
 2873              		.cfi_def_cfa_offset 48
 2874              		.cfi_offset 80, -48
 2875              		.cfi_offset 81, -44
 2876              		.cfi_offset 82, -40
 2877              		.cfi_offset 83, -36
 2878              		.cfi_offset 84, -32
 2879              		.cfi_offset 85, -28
 2880 0ce4 94409FE5 		ldr	r4, .L169+24	@ ivtmp.105,
 2881              	.LBB6:
 2882              	.LBB7:
 2883              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2884              		.loc 1 87 32 view .LVU856
 2885 0ce8 22AA9FED 		vldr.32	s20, .L169+16	@ tmp134,
 2886              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2887              		.loc 1 87 26 view .LVU857
 2888 0cec 1D9B9FED 		vldr.64	d9, .L169	@ tmp143,
 2889              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2890              		.loc 1 87 49 view .LVU858
 2891 0cf0 1E8B9FED 		vldr.64	d8, .L169+8	@ tmp137,
 2892              	.LBE7:
 2893              	.LBE6:
 2894              	@ armwave.c:361:     mod_depth = mod;
 2895              		.loc 1 361 15 view .LVU859
 2896 0cf4 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 362:armwave.c     **** 
 363:armwave.c     ****     test_create_waveform();
 2897              		.loc 1 363 5 is_stmt 1 view .LVU860
 2898              	@ armwave.c:360: {
 360:armwave.c     ****     mod_depth = mod;
 2899              		.loc 1 360 1 is_stmt 0 view .LVU861
 2900 0cf8 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2901 0cfc 0170A0E1 		mov	r7, r1	@ render_height, render_height
 2902              	@ armwave.c:363:     test_create_waveform();
 2903              		.loc 1 363 5 view .LVU862
 2904 0d00 FEFFFFEB 		bl	test_create_waveform		@
 2905              	.LVL211:
 364:armwave.c     ****     test_create_gamma();
 2906              		.loc 1 364 5 is_stmt 1 view .LVU863
 2907              	.LBB9:
 2908              	.LBI6:
  81:armwave.c     **** {
 2909              		.loc 1 81 6 view .LVU864
  81:armwave.c     **** {
 2910              		.loc 1 81 6 is_stmt 0 view .LVU865
 2911 0d04 013084E2 		add	r3, r4, #1	@ _34, ivtmp.105,
 2912 0d08 018C84E2 		add	r8, r4, #256	@ _35, ivtmp.105,
 2913 0d0c 015063E2 		rsb	r5, r3, #1	@ tmp142, _34,
 2914              	.LVL212:
 2915              	.L166:
 2916              	.LBB8:
  87:armwave.c     ****     }
 2917              		.loc 1 87 9 is_stmt 1 view .LVU866
 2918              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2919              		.loc 1 87 32 is_stmt 0 view .LVU867
 2920 0d10 043085E0 		add	r3, r5, r4	@ tmp131, tmp142, ivtmp.105
 2921              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2922              		.loc 1 87 26 view .LVU868
 2923 0d14 491BB0EE 		vmov.f64	d1, d9	@, tmp143
 2924              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2925              		.loc 1 87 32 view .LVU869
 2926 0d18 903A07EE 		vmov	s15, r3	@ int	@ tmp131, tmp131
 2927 0d1c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp132, tmp131
 2928 0d20 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp133, tmp132, tmp134
 2929              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2930              		.loc 1 87 26 view .LVU870
 2931 0d24 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp133
 2932 0d28 FEFFFFEB 		bl	pow		@
 2933              	.LVL213:
 2934              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2935              		.loc 1 87 49 view .LVU871
 2936 0d2c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp136,, tmp137
 2937              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2938              		.loc 1 87 24 view .LVU872
 2939 0d30 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp138, tmp136
 2940 0d34 903A17EE 		vmov	r3, s15	@ int	@ tmp138, tmp138
 2941 0d38 0130E4E5 		strb	r3, [r4, #1]!	@ tmp138, MEM[base: _33, offset: 0B]
 2942              	.LVL214:
 2943              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2944              		.loc 1 86 5 view .LVU873
 2945 0d3c 080054E1 		cmp	r4, r8	@ ivtmp.105, _35
 2946 0d40 F2FFFF1A 		bne	.L166		@,
 2947              	.LVL215:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2948              		.loc 1 86 5 view .LVU874
 2949              	.LBE8:
 2950              	.LBE9:
 365:armwave.c     **** 
 366:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_
 2951              		.loc 1 366 5 is_stmt 1 view .LVU875
 2952 0d44 0710A0E1 		mov	r1, r7	@, render_height
 2953 0d48 0600A0E1 		mov	r0, r6	@, render_width
 2954 0d4c ABFCFFEB 		bl	armwave_setup_render.constprop.0		@
 2955              	.LVL216:
 367:armwave.c     **** 
 368:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2956              		.loc 1 368 5 view .LVU876
 2957              	@ armwave.c:369: }
 369:armwave.c     **** }
 2958              		.loc 1 369 1 is_stmt 0 view .LVU877
 2959 0d50 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2960              		.cfi_restore 84
 2961              		.cfi_restore 85
 2962              		.cfi_restore 82
 2963              		.cfi_restore 83
 2964              		.cfi_restore 80
 2965              		.cfi_restore 81
 2966              		.cfi_def_cfa_offset 24
 2967              	@ armwave.c:368:     printf("armwave version: %s\n", ARMWAVE_VER);
 368:armwave.c     **** }
 2968              		.loc 1 368 5 view .LVU878
 2969 0d54 28109FE5 		ldr	r1, .L169+28	@,
 2970 0d58 28009FE5 		ldr	r0, .L169+32	@,
 2971              	@ armwave.c:369: }
 2972              		.loc 1 369 1 view .LVU879
 2973 0d5c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2974              		.cfi_restore 14
 2975              		.cfi_restore 8
 2976              		.cfi_restore 7
 2977              		.cfi_restore 6
 2978              		.cfi_restore 5
 2979              		.cfi_restore 4
 2980              		.cfi_def_cfa_offset 0
 2981              	.LVL217:
 2982              	@ armwave.c:368:     printf("armwave version: %s\n", ARMWAVE_VER);
 368:armwave.c     **** }
 2983              		.loc 1 368 5 view .LVU880
 2984 0d60 FEFFFFEA 		b	printf		@
 2985              	.LVL218:
 2986              	.L170:
 2987 0d64 0000A0E1 		.align	3
 2988              	.L169:
 2989 0d68 000000C0 		.word	-1073741824
 2990 0d6c CCCCEC3F 		.word	1072483532
 2991 0d70 00000000 		.word	0
 2992 0d74 00E06F40 		.word	1081073664
 2993 0d78 00007F43 		.word	1132396544
 2994 0d7c 00000000 		.word	.LANCHOR1
 2995 0d80 FFFFFFFF 		.word	gamma_table-1
 2996 0d84 18010000 		.word	.LC12
 2997 0d88 20010000 		.word	.LC13
 2998              		.cfi_endproc
 2999              	.LFE66:
 3001              		.global	__aeabi_uidiv
 3002              		.align	2
 3003              		.global	armwave_test_generate
 3004              		.syntax unified
 3005              		.arm
 3006              		.fpu vfp
 3008              	armwave_test_generate:
 3009              	.LFB67:
 370:armwave.c     **** 
 371:armwave.c     **** void armwave_test_generate()
 372:armwave.c     **** {
 3010              		.loc 1 372 1 is_stmt 1 view -0
 3011              		.cfi_startproc
 3012              		@ args = 0, pretend = 0, frame = 8
 3013              		@ frame_needed = 0, uses_anonymous_args = 0
 373:armwave.c     ****     uint32_t yy;
 3014              		.loc 1 373 5 view .LVU882
 374:armwave.c     **** 
 375:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3015              		.loc 1 375 5 view .LVU883
 3016              	@ armwave.c:372: {
 372:armwave.c     ****     uint32_t yy;
 3017              		.loc 1 372 1 is_stmt 0 view .LVU884
 3018 0d8c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3019              		.cfi_def_cfa_offset 36
 3020              		.cfi_offset 4, -36
 3021              		.cfi_offset 5, -32
 3022              		.cfi_offset 6, -28
 3023              		.cfi_offset 7, -24
 3024              		.cfi_offset 8, -20
 3025              		.cfi_offset 9, -16
 3026              		.cfi_offset 10, -12
 3027              		.cfi_offset 11, -8
 3028              		.cfi_offset 14, -4
 3029              	@ armwave.c:375:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3030              		.loc 1 375 5 view .LVU885
 3031 0d90 0010A0E3 		mov	r1, #0	@,
 3032 0d94 44419FE5 		ldr	r4, .L189	@ tmp269,
 3033              	@ armwave.c:372: {
 372:armwave.c     ****     uint32_t yy;
 3034              		.loc 1 372 1 view .LVU886
 3035 0d98 0CD04DE2 		sub	sp, sp, #12	@,,
 3036              		.cfi_def_cfa_offset 48
 3037              	@ armwave.c:375:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3038              		.loc 1 375 5 view .LVU887
 3039 0d9c 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 3040 0da0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3041 0da4 FEFFFFEB 		bl	memset		@
 3042              	.LVL219:
 376:armwave.c     **** 
 377:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3043              		.loc 1 377 5 is_stmt 1 view .LVU888
 3044              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3045              		.loc 1 377 45 is_stmt 0 view .LVU889
 3046 0da8 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 3047              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3048              		.loc 1 377 5 view .LVU890
 3049 0dac 020B55E3 		cmp	r5, #2048	@ _72,
 3050 0db0 4800008A 		bhi	.L171		@,
 3051 0db4 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3052              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3053              		.loc 1 377 12 view .LVU891
 3054 0db8 00A0A0E3 		mov	r10, #0	@ yy,
 3055              	.LVL220:
 3056              	.L177:
 378:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3057              		.loc 1 378 9 is_stmt 1 discriminator 3 view .LVU892
 3058 0dbc 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 3059              	.LBB12:
 3060              	.LBB13:
 3061              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3062              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU893
 3063 0dc0 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3064              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3065              		.loc 1 109 5 discriminator 3 view .LVU894
 3066 0dc4 000056E3 		cmp	r6, #0	@ prephitmp_171,
 3067              	.LBE13:
 3068              	.LBE12:
 3069              	@ armwave.c:378:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 3070              		.loc 1 378 9 discriminator 3 view .LVU895
 3071 0dc8 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 3072              	.LVL221:
 3073              	.LBB15:
 3074              	.LBI12:
  98:armwave.c     **** {
 3075              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU896
 3076              	.LBB14:
 100:armwave.c     ****     uint32_t value, word;
 3077              		.loc 1 100 5 discriminator 3 view .LVU897
 101:armwave.c     ****     uint8_t *wave_base;
 3078              		.loc 1 101 5 discriminator 3 view .LVU898
 102:armwave.c     ****     uint8_t *write_buffer_base;
 3079              		.loc 1 102 5 discriminator 3 view .LVU899
 103:armwave.c     ****     uint8_t *write_buffer;
 3080              		.loc 1 103 5 discriminator 3 view .LVU900
 104:armwave.c     ****     
 3081              		.loc 1 104 5 discriminator 3 view .LVU901
 106:armwave.c     **** 
 3082              		.loc 1 106 5 discriminator 3 view .LVU902
 3083              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3084              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU903
 3085 0dcc 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 3086              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3087              		.loc 1 106 40 discriminator 3 view .LVU904
 3088 0dd0 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 3089              	.LVL222:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3090              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU905
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3091              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU906
 3092 0dd4 3900000A 		beq	.L173		@,
 3093              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3094              		.loc 1 109 11 view .LVU907
 3095 0dd8 0080A0E3 		mov	r8, #0	@ w,
 3096 0ddc 043043E2 		sub	r3, r3, #4	@ _77, _3,
 3097              	.LVL223:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3098              		.loc 1 109 11 view .LVU908
 3099 0de0 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 3100              	.LVL224:
 3101              	.L176:
 110:armwave.c     **** 
 3102              		.loc 1 110 9 is_stmt 1 view .LVU909
 3103              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3104              		.loc 1 110 64 is_stmt 0 view .LVU910
 3105 0de4 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3106              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3107              		.loc 1 120 9 view .LVU911
 3108 0de8 000059E3 		cmp	r9, #0	@ _4,
 3109              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3110              		.loc 1 110 36 view .LVU912
 3111 0dec 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 3112              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3113              		.loc 1 110 64 view .LVU913
 3114 0df0 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 3115              	.LVL225:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3116              		.loc 1 120 9 is_stmt 1 view .LVU914
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3117              		.loc 1 120 9 is_stmt 0 view .LVU915
 3118 0df4 2D00000A 		beq	.L174		@,
 3119 0df8 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 3120 0dfc 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 3121              	.LVL226:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3122              		.loc 1 120 9 view .LVU916
 3123 0e00 03E08EE0 		add	lr, lr, r3	@ ivtmp.111, _16, tmp205
 3124              	.LVL227:
 3125              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3126              		.loc 1 120 16 view .LVU917
 3127 0e04 0010A0E3 		mov	r1, #0	@ yy,
 3128              	.LVL228:
 3129              	.L175:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 3130              		.loc 1 135 13 is_stmt 1 view .LVU918
 3131              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 3132              		.loc 1 135 18 is_stmt 0 view .LVU919
 3133 0e08 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 3134              	.LVL229:
 139:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3135              		.loc 1 139 13 is_stmt 1 view .LVU920
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3136              		.loc 1 140 17 view .LVU921
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3137              		.loc 1 141 17 view .LVU922
 142:armwave.c     ****                 word >>= 8;
 3138              		.loc 1 142 17 view .LVU923
 3139              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3140              		.loc 1 140 45 is_stmt 0 view .LVU924
 3141 0e0c 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3142              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3143              		.loc 1 141 63 view .LVU925
 3144 0e10 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3145              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3146              		.loc 1 140 37 view .LVU926
 3147 0e14 73C0EFE6 		uxtb	ip, r3	@ word, word
 3148              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3149              		.loc 1 143 22 view .LVU927
 3150 0e18 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 3151              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3152              		.loc 1 142 47 view .LVU928
 3153 0e1c 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 3154              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3155              		.loc 1 140 37 view .LVU929
 3156 0e20 7550EFE6 		uxtb	r5, r5	@ word, word
 3157              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3158              		.loc 1 142 47 view .LVU930
 3159 0e24 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 3160              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3161              		.loc 1 141 63 view .LVU931
 3162 0e28 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 3163              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3164              		.loc 1 143 22 view .LVU932
 3165 0e2c 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3166              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3167              		.loc 1 142 47 view .LVU933
 3168 0e30 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 3169              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3170              		.loc 1 140 37 view .LVU934
 3171 0e34 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3172              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3173              		.loc 1 143 22 view .LVU935
 3174 0e38 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3175              	.LVL230:
 3176              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3177              		.loc 1 142 47 view .LVU936
 3178 0e3c 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 3179 0e40 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 3180              	.LVL231:
 143:armwave.c     ****             }
 3181              		.loc 1 143 17 is_stmt 1 view .LVU937
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3182              		.loc 1 140 17 view .LVU938
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3183              		.loc 1 141 17 view .LVU939
 142:armwave.c     ****                 word >>= 8;
 3184              		.loc 1 142 17 view .LVU940
 3185              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3186              		.loc 1 140 45 is_stmt 0 view .LVU941
 3187 0e44 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3188              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3189              		.loc 1 141 63 view .LVU942
 3190 0e48 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 3191              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3192              		.loc 1 142 47 view .LVU943
 3193 0e4c 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 3194              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3195              		.loc 1 141 63 view .LVU944
 3196 0e50 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3197              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3198              		.loc 1 142 47 view .LVU945
 3199 0e54 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 3200              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3201              		.loc 1 141 63 view .LVU946
 3202 0e58 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 3203              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3204              		.loc 1 120 37 view .LVU947
 3205 0e5c 041081E2 		add	r1, r1, #4	@ yy, yy,
 3206              	.LVL232:
 3207              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3208              		.loc 1 142 47 view .LVU948
 3209 0e60 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 3210              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3211              		.loc 1 120 9 view .LVU949
 3212 0e64 010059E1 		cmp	r9, r1	@ _4, yy
 3213              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3214              		.loc 1 142 47 view .LVU950
 3215 0e68 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 3216 0e6c 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 3217              	.LVL233:
 143:armwave.c     ****             }
 3218              		.loc 1 143 17 is_stmt 1 view .LVU951
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3219              		.loc 1 140 17 view .LVU952
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3220              		.loc 1 141 17 view .LVU953
 142:armwave.c     ****                 word >>= 8;
 3221              		.loc 1 142 17 view .LVU954
 3222              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3223              		.loc 1 140 45 is_stmt 0 view .LVU955
 3224 0e70 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3225              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3226              		.loc 1 141 63 view .LVU956
 3227 0e74 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3228              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3229              		.loc 1 142 47 view .LVU957
 3230 0e78 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 3231 0e7c 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 3232 0e80 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 3233 0e84 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 3234 0e88 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 143:armwave.c     ****             }
 3235              		.loc 1 143 17 is_stmt 1 view .LVU958
 3236              	.LVL234:
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3237              		.loc 1 140 17 view .LVU959
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3238              		.loc 1 141 17 view .LVU960
 142:armwave.c     ****                 word >>= 8;
 3239              		.loc 1 142 17 view .LVU961
 3240              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3241              		.loc 1 140 45 is_stmt 0 view .LVU962
 3242 0e8c 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3243              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3244              		.loc 1 141 63 view .LVU963
 3245 0e90 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3246              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3247              		.loc 1 142 47 view .LVU964
 3248 0e94 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 3249 0e98 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 3250 0e9c 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 3251 0ea0 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 3252 0ea4 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 143:armwave.c     ****             }
 3253              		.loc 1 143 17 is_stmt 1 view .LVU965
 3254              	.LVL235:
 3255              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3256              		.loc 1 120 9 is_stmt 0 view .LVU966
 3257 0ea8 D6FFFF8A 		bhi	.L175		@,
 3258 0eac 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3259              	.LVL236:
 3260              	.L174:
 3261              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3262              		.loc 1 109 44 view .LVU967
 3263 0eb0 018088E2 		add	r8, r8, #1	@ w, w,
 3264              	.LVL237:
 3265              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3266              		.loc 1 109 5 view .LVU968
 3267 0eb4 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 3268 0eb8 C9FFFF3A 		bcc	.L176		@,
 3269 0ebc 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 3270              	.LVL238:
 3271              	.L173:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3272              		.loc 1 109 5 view .LVU969
 3273              	.LBE14:
 3274              	.LBE15:
 3275              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3276              		.loc 1 377 28 discriminator 3 view .LVU970
 3277 0ec0 0510A0E1 		mov	r1, r5	@, _72
 3278 0ec4 020BA0E3 		mov	r0, #2048	@,
 3279              	.LVL239:
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3280              		.loc 1 377 28 discriminator 3 view .LVU971
 3281 0ec8 FEFFFFEB 		bl	__aeabi_uidiv		@
 3282              	.LVL240:
 3283              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3284              		.loc 1 377 63 discriminator 3 view .LVU972
 3285 0ecc 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 3286              	.LVL241:
 3287              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3288              		.loc 1 377 5 discriminator 3 view .LVU973
 3289 0ed0 0A0050E1 		cmp	r0, r10	@, yy
 3290 0ed4 B8FFFF8A 		bhi	.L177		@,
 3291              	.LVL242:
 3292              	.L171:
 3293              	@ armwave.c:380: }
 379:armwave.c     ****     }
 380:armwave.c     **** }
 3294              		.loc 1 380 1 view .LVU974
 3295 0ed8 0CD08DE2 		add	sp, sp, #12	@,,
 3296              		.cfi_def_cfa_offset 36
 3297              		@ sp needed	@
 3298 0edc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3299              	.L190:
 3300              		.align	2
 3301              	.L189:
 3302 0ee0 00000000 		.word	g_armwave_state
 3303              		.cfi_endproc
 3304              	.LFE67:
 3306              		.align	2
 3307              		.global	armwave_test_get_buffer
 3308              		.syntax unified
 3309              		.arm
 3310              		.fpu vfp
 3312              	armwave_test_get_buffer:
 3313              	.LFB68:
 381:armwave.c     **** 
 382:armwave.c     **** PyObject *armwave_test_get_buffer()
 383:armwave.c     **** {
 3314              		.loc 1 383 1 is_stmt 1 view -0
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 0
 3317              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     PyObject *mv;
 3318              		.loc 1 384 5 view .LVU976
 385:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3319              		.loc 1 385 5 view .LVU977
 3320              	@ armwave.c:383: {
 383:armwave.c     ****     PyObject *mv;
 3321              		.loc 1 383 1 is_stmt 0 view .LVU978
 3322 0ee4 30402DE9 		push	{r4, r5, lr}	@
 3323              		.cfi_def_cfa_offset 12
 3324              		.cfi_offset 4, -12
 3325              		.cfi_offset 5, -8
 3326              		.cfi_offset 14, -4
 3327              	@ armwave.c:385:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3328              		.loc 1 385 22 view .LVU979
 3329 0ee8 2C00A0E3 		mov	r0, #44	@,
 3330              	@ armwave.c:383: {
 383:armwave.c     ****     PyObject *mv;
 3331              		.loc 1 383 1 view .LVU980
 3332 0eec 0CD04DE2 		sub	sp, sp, #12	@,,
 3333              		.cfi_def_cfa_offset 24
 3334              	@ armwave.c:385:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3335              		.loc 1 385 22 view .LVU981
 3336 0ef0 FEFFFFEB 		bl	malloc		@
 3337              	.LVL243:
 3338 0ef4 54409FE5 		ldr	r4, .L196	@ tmp129,
 3339              	@ armwave.c:387:     if(g_armwave_state.target_height == 256) {
 386:armwave.c     ****     
 387:armwave.c     ****     if(g_armwave_state.target_height == 256) {
 3340              		.loc 1 387 7 view .LVU982
 3341 0ef8 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3342 0efc 010C53E3 		cmp	r3, #256	@ g_armwave_state.target_height,
 3343              	@ armwave.c:385:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 385:armwave.c     ****     
 3344              		.loc 1 385 22 view .LVU983
 3345 0f00 0050A0E1 		mov	r5, r0	@ buf,
 3346              	.LVL244:
 3347              		.loc 1 387 5 is_stmt 1 view .LVU984
 3348 0f04 440094E5 		ldr	r0, [r4, #68]	@ pretmp_20, g_armwave_state.out_pixbuf
 3349              	.LVL245:
 3350              	@ armwave.c:387:     if(g_armwave_state.target_height == 256) {
 3351              		.loc 1 387 7 is_stmt 0 view .LVU985
 3352 0f08 0E00000A 		beq	.L195		@,
 388:armwave.c     ****  	   armwave_fill_pixbuf_256(g_armwave_state.out_pixbuf);
 389:armwave.c     ****     } else {
 390:armwave.c     ****  	   armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 3353              		.loc 1 390 6 is_stmt 1 view .LVU986
 3354 0f0c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3355              	.LVL246:
 3356              	.L193:
 391:armwave.c     **** 	}
 392:armwave.c     **** 
 393:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 3357              		.loc 1 393 5 view .LVU987
 3358              	@ armwave.c:393:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3359              		.loc 1 393 79 is_stmt 0 view .LVU988
 3360 0f10 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 3361              	@ armwave.c:393:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3362              		.loc 1 393 5 view .LVU989
 3363 0f14 0800A0E3 		mov	r0, #8	@ tmp127,
 3364 0f18 0110A0E3 		mov	r1, #1	@ tmp128,
 3365 0f1c 04008DE5 		str	r0, [sp, #4]	@ tmp127,
 3366 0f20 00108DE5 		str	r1, [sp]	@ tmp128,
 3367 0f24 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 3368 0f28 442094E5 		ldr	r2, [r4, #68]	@, g_armwave_state.out_pixbuf
 3369 0f2c 0010A0E3 		mov	r1, #0	@,
 3370 0f30 0500A0E1 		mov	r0, r5	@, buf
 3371 0f34 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 3372              	.LVL247:
 394:armwave.c     **** 
 395:armwave.c     ****     mv = PyMemoryView_FromBuffer(buf);
 3373              		.loc 1 395 5 is_stmt 1 view .LVU990
 3374              	@ armwave.c:395:     mv = PyMemoryView_FromBuffer(buf);
 3375              		.loc 1 395 10 is_stmt 0 view .LVU991
 3376 0f38 0500A0E1 		mov	r0, r5	@, buf
 3377              	@ armwave.c:396: }
 396:armwave.c     **** }
 3378              		.loc 1 396 1 view .LVU992
 3379 0f3c 0CD08DE2 		add	sp, sp, #12	@,,
 3380              		.cfi_remember_state
 3381              		.cfi_def_cfa_offset 12
 3382              		@ sp needed	@
 3383 0f40 3040BDE8 		pop	{r4, r5, lr}	@
 3384              		.cfi_restore 14
 3385              		.cfi_restore 5
 3386              		.cfi_restore 4
 3387              		.cfi_def_cfa_offset 0
 3388              	.LVL248:
 3389              	@ armwave.c:395:     mv = PyMemoryView_FromBuffer(buf);
 395:armwave.c     **** }
 3390              		.loc 1 395 10 view .LVU993
 3391 0f44 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 3392              	.LVL249:
 3393              	.L195:
 3394              		.cfi_restore_state
 388:armwave.c     ****     } else {
 3395              		.loc 1 388 6 is_stmt 1 view .LVU994
 3396 0f48 FEFFFFEB 		bl	armwave_fill_pixbuf_256		@
 3397              	.LVL250:
 3398 0f4c EFFFFFEA 		b	.L193		@
 3399              	.L197:
 3400              		.align	2
 3401              	.L196:
 3402 0f50 00000000 		.word	g_armwave_state
 3403              		.cfi_endproc
 3404              	.LFE68:
 3406              		.align	2
 3407              		.global	armwave_test_dump_buffer_to_ppm
 3408              		.syntax unified
 3409              		.arm
 3410              		.fpu vfp
 3412              	armwave_test_dump_buffer_to_ppm:
 3413              	.LVL251:
 3414              	.LFB69:
 397:armwave.c     **** 
 398:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 399:armwave.c     **** {
 3415              		.loc 1 399 1 view -0
 3416              		.cfi_startproc
 3417              		@ args = 0, pretend = 0, frame = 0
 3418              		@ frame_needed = 0, uses_anonymous_args = 0
 3419              		@ link register save eliminated.
 400:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3420              		.loc 1 400 5 view .LVU996
 3421 0f54 08309FE5 		ldr	r3, .L199	@ tmp112,
 3422 0f58 0010A0E1 		mov	r1, r0	@, fn
 3423 0f5c 440093E5 		ldr	r0, [r3, #68]	@, g_armwave_state.out_pixbuf
 3424              	.LVL252:
 3425              		.loc 1 400 5 is_stmt 0 view .LVU997
 3426 0f60 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3427              	.LVL253:
 3428              	.L200:
 3429              		.loc 1 400 5 view .LVU998
 3430              		.align	2
 3431              	.L199:
 3432 0f64 00000000 		.word	g_armwave_state
 3433              		.cfi_endproc
 3434              	.LFE69:
 3436              		.align	2
 3437              		.global	armwave_cleanup
 3438              		.syntax unified
 3439              		.arm
 3440              		.fpu vfp
 3442              	armwave_cleanup:
 3443              	.LFB70:
 401:armwave.c     **** }
 402:armwave.c     **** 
 403:armwave.c     **** void armwave_cleanup()
 404:armwave.c     **** {
 3444              		.loc 1 404 1 is_stmt 1 view -0
 3445              		.cfi_startproc
 3446              		@ args = 0, pretend = 0, frame = 0
 3447              		@ frame_needed = 0, uses_anonymous_args = 0
 405:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3448              		.loc 1 405 5 view .LVU1000
 3449              	@ armwave.c:404: {
 404:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3450              		.loc 1 404 1 is_stmt 0 view .LVU1001
 3451 0f68 10402DE9 		push	{r4, lr}	@
 3452              		.cfi_def_cfa_offset 8
 3453              		.cfi_offset 4, -8
 3454              		.cfi_offset 14, -4
 3455              	@ armwave.c:405:     free(g_armwave_state.out_pixbuf);
 3456              		.loc 1 405 25 view .LVU1002
 3457 0f6c 28409FE5 		ldr	r4, .L203	@ tmp113,
 3458              	@ armwave.c:405:     free(g_armwave_state.out_pixbuf);
 3459              		.loc 1 405 5 view .LVU1003
 3460 0f70 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 3461 0f74 FEFFFFEB 		bl	free		@
 3462              	.LVL254:
 406:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3463              		.loc 1 406 5 is_stmt 1 view .LVU1004
 3464 0f78 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3465 0f7c FEFFFFEB 		bl	free		@
 3466              	.LVL255:
 407:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3467              		.loc 1 407 5 view .LVU1005
 3468 0f80 600094E5 		ldr	r0, [r4, #96]	@, g_armwave_state.xcoord_to_xpixel
 3469 0f84 FEFFFFEB 		bl	free		@
 3470              	.LVL256:
 408:armwave.c     **** 
 409:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3471              		.loc 1 409 5 view .LVU1006
 3472              	@ armwave.c:409:     g_armwave_state.out_pixbuf = NULL;
 3473              		.loc 1 409 32 is_stmt 0 view .LVU1007
 3474 0f88 0030A0E3 		mov	r3, #0	@ tmp120,
 3475 0f8c 443084E5 		str	r3, [r4, #68]	@ tmp120, g_armwave_state.out_pixbuf
 410:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3476              		.loc 1 410 5 is_stmt 1 view .LVU1008
 3477              	@ armwave.c:410:     g_armwave_state.ch1_buffer = NULL;
 3478              		.loc 1 410 32 is_stmt 0 view .LVU1009
 3479 0f90 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 411:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3480              		.loc 1 411 5 is_stmt 1 view .LVU1010
 3481              	@ armwave.c:411:     g_armwave_state.xcoord_to_xpixel = NULL;
 3482              		.loc 1 411 38 is_stmt 0 view .LVU1011
 3483 0f94 603084E5 		str	r3, [r4, #96]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3484              	@ armwave.c:412: }
 412:armwave.c     **** }
 3485              		.loc 1 412 1 view .LVU1012
 3486 0f98 1080BDE8 		pop	{r4, pc}	@
 3487              	.L204:
 3488              		.align	2
 3489              	.L203:
 3490 0f9c 00000000 		.word	g_armwave_state
 3491              		.cfi_endproc
 3492              	.LFE70:
 3494              		.section	.text.startup,"ax",%progbits
 3495              		.align	2
 3496              		.global	main
 3497              		.syntax unified
 3498              		.arm
 3499              		.fpu vfp
 3501              	main:
 3502              	.LVL257:
 3503              	.LFB71:
 413:armwave.c     **** 
 414:armwave.c     **** int main(int argc, char *argv[])
 415:armwave.c     **** {
 3504              		.loc 1 415 1 is_stmt 1 view -0
 3505              		.cfi_startproc
 3506              		@ args = 0, pretend = 0, frame = 8
 3507              		@ frame_needed = 0, uses_anonymous_args = 0
 416:armwave.c     ****     uint32_t *out_buffer;
 3508              		.loc 1 416 5 view .LVU1014
 417:armwave.c     ****     uint32_t xx, yy, n;
 3509              		.loc 1 417 5 view .LVU1015
 418:armwave.c     **** 
 419:armwave.c     ****     //printf("Starting armwave...\n");
 420:armwave.c     ****     armwave_init();
 3510              		.loc 1 420 5 view .LVU1016
 3511              	.LBB20:
 3512              	.LBI20:
 151:armwave.c     **** {
 3513              		.loc 1 151 6 view .LVU1017
 3514              	.LBB21:
 153:armwave.c     **** }
 3515              		.loc 1 153 5 view .LVU1018
 3516              	.LBE21:
 3517              	.LBE20:
 3518              	@ armwave.c:415: {
 415:armwave.c     ****     uint32_t *out_buffer;
 3519              		.loc 1 415 1 is_stmt 0 view .LVU1019
 3520 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3521              		.cfi_def_cfa_offset 36
 3522              		.cfi_offset 4, -36
 3523              		.cfi_offset 5, -32
 3524              		.cfi_offset 6, -28
 3525              		.cfi_offset 7, -24
 3526              		.cfi_offset 8, -20
 3527              		.cfi_offset 9, -16
 3528              		.cfi_offset 10, -12
 3529              		.cfi_offset 11, -8
 3530              		.cfi_offset 14, -4
 3531 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 3532              		.cfi_def_cfa_offset 48
 3533              	.LBB25:
 3534              	.LBB22:
 3535              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 3536              		.loc 1 153 27 view .LVU1020
 3537 0008 70919FE5 		ldr	r9, .L225	@ tmp267,
 3538              	.LBE22:
 3539              	.LBE25:
 3540              	@ armwave.c:429:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 421:armwave.c     **** 
 422:armwave.c     ****     //printf("Creating test waveform...\n");
 423:armwave.c     ****     test_create_waveform();
 424:armwave.c     **** 
 425:armwave.c     ****     //printf("Creating gamma LUT...\n");
 426:armwave.c     ****     test_create_gamma();
 427:armwave.c     **** 
 428:armwave.c     ****     //printf("Setting up render...\n");
 429:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 3541              		.loc 1 429 5 view .LVU1021
 3542 000c 70219FE5 		ldr	r2, .L225+4	@ ivtmp_191,
 3543              	.LBB26:
 3544              	.LBB23:
 3545              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 3546              		.loc 1 153 27 view .LVU1022
 3547 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 3548              	.LBE23:
 3549              	.LBE26:
 3550              	@ armwave.c:429:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 3551              		.loc 1 429 5 view .LVU1023
 3552 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 3553              	.LBB27:
 3554              	.LBB24:
 3555              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 3556              		.loc 1 153 27 view .LVU1024
 3557 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 3558              	.LBE24:
 3559              	.LBE27:
 423:armwave.c     **** 
 3560              		.loc 1 423 5 is_stmt 1 view .LVU1025
 3561 001c FEFFFFEB 		bl	test_create_waveform		@
 3562              	.LVL258:
 426:armwave.c     **** 
 3563              		.loc 1 426 5 view .LVU1026
 3564 0020 FEFFFFEB 		bl	test_create_gamma		@
 3565              	.LVL259:
 3566              		.loc 1 429 5 view .LVU1027
 3567 0024 011CA0E3 		mov	r1, #256	@,
 3568 0028 020BA0E3 		mov	r0, #2048	@,
 3569 002c FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 3570              	.LVL260:
 430:armwave.c     **** 
 431:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 432:armwave.c     **** 
 433:armwave.c     ****     for(n = 0; n < 5000; n++) {
 3571              		.loc 1 433 5 view .LVU1028
 3572              		.loc 1 433 5 is_stmt 0 view .LVU1029
 3573 0030 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 3574              	.LVL261:
 3575              	.L206:
 3576              	@ armwave.c:434:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 434:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3577              		.loc 1 434 9 view .LVU1030
 3578 0034 020B55E3 		cmp	r5, #2048	@ _61,
 3579 0038 4900008A 		bhi	.L214		@,
 3580 003c 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3581              	@ armwave.c:434:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3582              		.loc 1 434 16 view .LVU1031
 3583 0040 0080A0E3 		mov	r8, #0	@ yy,
 3584 0044 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 3585              	.LVL262:
 3586              	.L211:
 435:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 436:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 3587              		.loc 1 436 13 is_stmt 1 discriminator 3 view .LVU1032
 3588 0048 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 3589              	.LBB28:
 3590              	.LBB29:
 3591              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3592              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU1033
 3593 004c 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3594              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3595              		.loc 1 109 5 discriminator 3 view .LVU1034
 3596 0050 000056E3 		cmp	r6, #0	@ prephitmp_178,
 3597              	.LBE29:
 3598              	.LBE28:
 3599              	@ armwave.c:436:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 3600              		.loc 1 436 13 discriminator 3 view .LVU1035
 3601 0054 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 3602              	.LVL263:
 3603              	.LBB31:
 3604              	.LBI28:
  98:armwave.c     **** {
 3605              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU1036
 3606              	.LBB30:
 100:armwave.c     ****     uint32_t value, word;
 3607              		.loc 1 100 5 discriminator 3 view .LVU1037
 101:armwave.c     ****     uint8_t *wave_base;
 3608              		.loc 1 101 5 discriminator 3 view .LVU1038
 102:armwave.c     ****     uint8_t *write_buffer_base;
 3609              		.loc 1 102 5 discriminator 3 view .LVU1039
 103:armwave.c     ****     uint8_t *write_buffer;
 3610              		.loc 1 103 5 discriminator 3 view .LVU1040
 104:armwave.c     ****     
 3611              		.loc 1 104 5 discriminator 3 view .LVU1041
 106:armwave.c     **** 
 3612              		.loc 1 106 5 discriminator 3 view .LVU1042
 3613              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3614              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU1043
 3615 0058 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 3616              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3617              		.loc 1 106 40 discriminator 3 view .LVU1044
 3618 005c 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 3619              	.LVL264:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3620              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU1045
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3621              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU1046
 3622 0060 3900000A 		beq	.L207		@,
 3623              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3624              		.loc 1 109 11 view .LVU1047
 3625 0064 0070A0E3 		mov	r7, #0	@ w,
 3626 0068 043043E2 		sub	r3, r3, #4	@ _81, _1,
 3627              	.LVL265:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3628              		.loc 1 109 11 view .LVU1048
 3629 006c 00308DE5 		str	r3, [sp]	@ _81, %sfp
 3630              	.LVL266:
 3631              	.L210:
 110:armwave.c     **** 
 3632              		.loc 1 110 9 is_stmt 1 view .LVU1049
 3633              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3634              		.loc 1 110 64 is_stmt 0 view .LVU1050
 3635 0070 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3636              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3637              		.loc 1 120 9 view .LVU1051
 3638 0074 00005AE3 		cmp	r10, #0	@ _2,
 3639              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3640              		.loc 1 110 36 view .LVU1052
 3641 0078 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 3642              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3643              		.loc 1 110 64 view .LVU1053
 3644 007c 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 3645              	.LVL267:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3646              		.loc 1 120 9 is_stmt 1 view .LVU1054
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3647              		.loc 1 120 9 is_stmt 0 view .LVU1055
 3648 0080 2D00000A 		beq	.L208		@,
 3649 0084 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 3650 0088 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 3651              	.LVL268:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3652              		.loc 1 120 9 view .LVU1056
 3653 008c 03E08EE0 		add	lr, lr, r3	@ ivtmp.124, _20, tmp202
 3654              	.LVL269:
 3655              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3656              		.loc 1 120 16 view .LVU1057
 3657 0090 0010A0E3 		mov	r1, #0	@ yy,
 3658              	.LVL270:
 3659              	.L209:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 3660              		.loc 1 135 13 is_stmt 1 view .LVU1058
 3661              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 3662              		.loc 1 135 18 is_stmt 0 view .LVU1059
 3663 0094 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 3664              	.LVL271:
 139:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3665              		.loc 1 139 13 is_stmt 1 view .LVU1060
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3666              		.loc 1 140 17 view .LVU1061
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3667              		.loc 1 141 17 view .LVU1062
 142:armwave.c     ****                 word >>= 8;
 3668              		.loc 1 142 17 view .LVU1063
 3669              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3670              		.loc 1 140 45 is_stmt 0 view .LVU1064
 3671 0098 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3672              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3673              		.loc 1 141 63 view .LVU1065
 3674 009c 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3675              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3676              		.loc 1 140 37 view .LVU1066
 3677 00a0 73C0EFE6 		uxtb	ip, r3	@ word, word
 3678              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3679              		.loc 1 143 22 view .LVU1067
 3680 00a4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 3681              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3682              		.loc 1 142 47 view .LVU1068
 3683 00a8 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 3684              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3685              		.loc 1 140 37 view .LVU1069
 3686 00ac 7440EFE6 		uxtb	r4, r4	@ word, word
 3687              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3688              		.loc 1 142 47 view .LVU1070
 3689 00b0 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 3690              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3691              		.loc 1 141 63 view .LVU1071
 3692 00b4 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 3693              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3694              		.loc 1 143 22 view .LVU1072
 3695 00b8 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3696              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3697              		.loc 1 142 47 view .LVU1073
 3698 00bc 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 3699              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3700              		.loc 1 140 37 view .LVU1074
 3701 00c0 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3702              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3703              		.loc 1 143 22 view .LVU1075
 3704 00c4 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3705              	.LVL272:
 3706              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3707              		.loc 1 142 47 view .LVU1076
 3708 00c8 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 3709 00cc 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 3710              	.LVL273:
 143:armwave.c     ****             }
 3711              		.loc 1 143 17 is_stmt 1 view .LVU1077
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3712              		.loc 1 140 17 view .LVU1078
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3713              		.loc 1 141 17 view .LVU1079
 142:armwave.c     ****                 word >>= 8;
 3714              		.loc 1 142 17 view .LVU1080
 3715              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3716              		.loc 1 140 45 is_stmt 0 view .LVU1081
 3717 00d0 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3718              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3719              		.loc 1 141 63 view .LVU1082
 3720 00d4 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 3721              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3722              		.loc 1 142 47 view .LVU1083
 3723 00d8 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 3724              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3725              		.loc 1 141 63 view .LVU1084
 3726 00dc 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3727              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3728              		.loc 1 142 47 view .LVU1085
 3729 00e0 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 3730              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3731              		.loc 1 141 63 view .LVU1086
 3732 00e4 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 3733              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3734              		.loc 1 120 37 view .LVU1087
 3735 00e8 041081E2 		add	r1, r1, #4	@ yy, yy,
 3736              	.LVL274:
 3737              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3738              		.loc 1 142 47 view .LVU1088
 3739 00ec 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 3740              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3741              		.loc 1 120 9 view .LVU1089
 3742 00f0 01005AE1 		cmp	r10, r1	@ _2, yy
 3743              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3744              		.loc 1 142 47 view .LVU1090
 3745 00f4 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 3746 00f8 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 3747              	.LVL275:
 143:armwave.c     ****             }
 3748              		.loc 1 143 17 is_stmt 1 view .LVU1091
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3749              		.loc 1 140 17 view .LVU1092
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3750              		.loc 1 141 17 view .LVU1093
 142:armwave.c     ****                 word >>= 8;
 3751              		.loc 1 142 17 view .LVU1094
 3752              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3753              		.loc 1 140 45 is_stmt 0 view .LVU1095
 3754 00fc 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3755              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3756              		.loc 1 141 63 view .LVU1096
 3757 0100 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3758              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3759              		.loc 1 142 47 view .LVU1097
 3760 0104 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 3761 0108 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 3762 010c 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 3763 0110 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 3764 0114 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 143:armwave.c     ****             }
 3765              		.loc 1 143 17 is_stmt 1 view .LVU1098
 3766              	.LVL276:
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3767              		.loc 1 140 17 view .LVU1099
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3768              		.loc 1 141 17 view .LVU1100
 142:armwave.c     ****                 word >>= 8;
 3769              		.loc 1 142 17 view .LVU1101
 3770              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3771              		.loc 1 140 45 is_stmt 0 view .LVU1102
 3772 0118 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3773              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3774              		.loc 1 141 63 view .LVU1103
 3775 011c 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3776              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3777              		.loc 1 142 47 view .LVU1104
 3778 0120 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 3779 0124 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 3780 0128 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 3781 012c 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 3782 0130 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 143:armwave.c     ****             }
 3783              		.loc 1 143 17 is_stmt 1 view .LVU1105
 3784              	.LVL277:
 3785              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3786              		.loc 1 120 9 is_stmt 0 view .LVU1106
 3787 0134 D6FFFF8A 		bhi	.L209		@,
 3788 0138 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3789              	.LVL278:
 3790              	.L208:
 3791              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3792              		.loc 1 109 44 view .LVU1107
 3793 013c 017087E2 		add	r7, r7, #1	@ w, w,
 3794              	.LVL279:
 3795              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3796              		.loc 1 109 5 view .LVU1108
 3797 0140 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 3798 0144 C9FFFF3A 		bcc	.L210		@,
 3799 0148 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 3800              	.LVL280:
 3801              	.L207:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3802              		.loc 1 109 5 view .LVU1109
 3803              	.LBE30:
 3804              	.LBE31:
 3805              	@ armwave.c:434:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 434:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3806              		.loc 1 434 32 discriminator 3 view .LVU1110
 3807 014c 0510A0E1 		mov	r1, r5	@, _61
 3808 0150 020BA0E3 		mov	r0, #2048	@,
 3809              	.LVL281:
 434:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3810              		.loc 1 434 32 discriminator 3 view .LVU1111
 3811 0154 FEFFFFEB 		bl	__aeabi_uidiv		@
 3812              	.LVL282:
 3813              	@ armwave.c:434:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 434:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3814              		.loc 1 434 67 discriminator 3 view .LVU1112
 3815 0158 018088E2 		add	r8, r8, #1	@ yy, yy,
 3816              	.LVL283:
 3817              	@ armwave.c:434:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 434:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3818              		.loc 1 434 9 discriminator 3 view .LVU1113
 3819 015c 080050E1 		cmp	r0, r8	@, yy
 3820 0160 B8FFFF8A 		bhi	.L211		@,
 3821              	.LVL284:
 3822              	.L214:
 3823              	@ armwave.c:433:     for(n = 0; n < 5000; n++) {
 433:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3824              		.loc 1 433 5 discriminator 2 view .LVU1114
 3825 0164 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 3826 0168 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 3827 016c 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 3828 0170 AFFFFF1A 		bne	.L206		@,
 3829 0174 0300A0E1 		mov	r0, r3	@, ivtmp_191
 437:armwave.c     ****         }
 438:armwave.c     ****     }
 439:armwave.c     **** 
 440:armwave.c     ****     /*
 441:armwave.c     ****     printf("Creating pixbuf\n");
 442:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 443:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 444:armwave.c     **** 
 445:armwave.c     ****     printf("Dumping pixbuf\n");
 446:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 447:armwave.c     ****     */
 448:armwave.c     **** 
 449:armwave.c     ****     return 0;
 3830              		.loc 1 449 5 is_stmt 1 view .LVU1115
 3831              	@ armwave.c:450: }
 450:armwave.c     **** }...
 3832              		.loc 1 450 1 is_stmt 0 view .LVU1116
 3833 0178 0CD08DE2 		add	sp, sp, #12	@,,
 3834              		.cfi_def_cfa_offset 36
 3835              		@ sp needed	@
 3836 017c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3837              	.L226:
 3838              		.align	2
 3839              	.L225:
 3840 0180 00000000 		.word	g_armwave_state
 3841 0184 88130000 		.word	5000
 3842              		.cfi_endproc
 3843              	.LFE71:
 3845              		.global	mod_depth
 3846              		.global	overall_scale
 3847              		.comm	gamma_table,256,4
 3848              		.comm	test_wave_buffer,131072,4
 3849              		.comm	g_armwave_state,100,4
 3850              		.section	.rodata
 3851              		.align	2
 3852              		.set	.LANCHOR0,. + 0
 3855              	__PRETTY_FUNCTION__.17001:
 3856 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3856      6176655F 
 3856      73657475 
 3856      705F7265 
 3856      6E646572 
 3857 0015 000000   		.space	3
 3860              	__PRETTY_FUNCTION__.17029:
 3861 0018 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3861      6176655F 
 3861      66696C6C 
 3861      5F706978 
 3861      6275665F 
 3864              	__PRETTY_FUNCTION__.17059:
 3865 0030 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3865      6176655F 
 3865      66696C6C 
 3865      5F706978 
 3865      6275665F 
 3866 004b 00       		.space	1
 3869              	overall_scale:
 3870 004c 00002041 		.word	1092616192
 3871              		.bss
 3872              		.align	2
 3873              		.set	.LANCHOR1,. + 0
 3876              	mod_depth:
 3877 0000 00000000 		.space	4
 3878              		.section	.rodata.str1.4,"aMS",%progbits,1
 3879              		.align	2
 3880              	.LC0:
 3881 0000 61726D77 		.ascii	"armwave.c\000"
 3881      6176652E 
 3881      6300
 3882 000a 0000     		.space	2
 3883              	.LC1:
 3884 000c 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3884      65745F68 
 3884      65696768 
 3884      74203D3D 
 3884      20323536 
 3885 003f 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3885      68656967 
 3885      6874203D 
 3885      3D203130 
 3885      3234207C 
 3886 006b 00       		.space	1
 3887              	.LC2:
 3888 006c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3888      6D776176 
 3888      655F7374 
 3888      6174652E 
 3888      6368315F 
 3889 008f 00       		.space	1
 3890              	.LC3:
 3891 0090 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3891      6D776176 
 3891      655F7374 
 3891      6174652E 
 3891      78636F6F 
 3892 00b9 000000   		.space	3
 3893              	.LC4:
 3894 00bc 73746172 		.ascii	"start_point < end_point\000"
 3894      745F706F 
 3894      696E7420 
 3894      3C20656E 
 3894      645F706F 
 3895              	.LC5:
 3896 00d4 6F75745F 		.ascii	"out_buffer != NULL\000"
 3896      62756666 
 3896      65722021 
 3896      3D204E55 
 3896      4C4C00
 3897 00e7 00       		.space	1
 3898              	.LC6:
 3899 00e8 25642025 		.ascii	"%d %d\000"
 3899      6400
 3900 00ee 0000     		.space	2
 3901              	.LC7:
 3902 00f0 776200   		.ascii	"wb\000"
 3903 00f3 00       		.space	1
 3904              	.LC8:
 3905 00f4 50330A00 		.ascii	"P3\012\000"
 3906              	.LC9:
 3907 00f8 25642025 		.ascii	"%d %d\012\000"
 3907      640A00
 3908 00ff 00       		.space	1
 3909              	.LC10:
 3910 0100 3235350A 		.ascii	"255\012\000"
 3910      00
 3911 0105 000000   		.space	3
 3912              	.LC11:
 3913 0108 25336420 		.ascii	"%3d %3d %3d\012\000"
 3913      25336420 
 3913      2533640A 
 3913      00
 3914 0115 000000   		.space	3
 3915              	.LC12:
 3916 0118 76302E30 		.ascii	"v0.0.1\000"
 3916      2E3100
 3917 011f 00       		.space	1
 3918              	.LC13:
 3919 0120 61726D77 		.ascii	"armwave version: %s\012\000"
 3919      61766520 
 3919      76657273 
 3919      696F6E3A 
 3919      2025730A 
 3920              		.text
 3921              	.Letext0:
 3922              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3923              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3924              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3925              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3926              		.file 6 "/usr/include/stdio.h"
 3927              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3928              		.file 8 "/usr/include/errno.h"
 3929              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3930              		.file 10 "/usr/include/unistd.h"
 3931              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3932              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3933              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3934              		.file 14 "/usr/include/math.h"
 3935              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3936              		.file 16 "/usr/include/time.h"
 3937              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3938              		.file 18 "/usr/local/include/python3.8/object.h"
 3939              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3940              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3941              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3942              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3943              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3944              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3945              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3946              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3947              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3948              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3949              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3950              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3951              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3952              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3953              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3954              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3955              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3956              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3957              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3958              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3959              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3960              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3961              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3962              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3963              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3964              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3965              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3966              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3967              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3968              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3969              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3970              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3971              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3972              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3973              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3974              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3975              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3976              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3977              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3978              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3979              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3980              		.file 60 "/usr/local/include/python3.8/context.h"
 3981              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3982              		.file 62 "/usr/local/include/python3.8/code.h"
 3983              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3984              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3985              		.file 65 "/usr/local/include/python3.8/import.h"
 3986              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3987              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3988              		.file 68 "armwave.h"
 3989              		.file 69 "/usr/include/stdlib.h"
 3990              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 3991              		.file 71 "<built-in>"
 3992              		.file 72 "/usr/include/assert.h"
 3993              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
