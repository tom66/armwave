   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 70819FE5 		ldr	r8, .L22	@ tmp194,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0090A0E1 		mov	r9, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241098E5 		ldr	r1, [r8, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403098E5 		ldr	r3, [r8, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044098E5 		ldr	r4, [r8, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp197, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp198, tmp197,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp199, _5, tmp198
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 40019FE5 		ldr	r0, .L22+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp199,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp204, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp204,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141098E5 		ldr	r1, [r8, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383098E5 		ldr	r3, [r8, #56]	@ _82, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _82,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _82, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3E0000DA 		ble	.L12		@,
 317 0108 14A098E5 		ldr	r10, [r8, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 318 010c 343098E5 		ldr	r3, [r8, #52]	@ _266, g_armwave_state.wave_stride
 319 0110 09A08AE0 		add	r10, r10, r9	@ ivtmp.52, g_armwave_state.wave_buffer, slice_y
 320              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 103 51 view .LVU52
 322 0114 247098E5 		ldr	r7, [r8, #36]	@ _75, g_armwave_state.cmp_x_bitdepth_scale
 323              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 324              		.loc 1 103 116 view .LVU53
 325 0118 40E098E5 		ldr	lr, [r8, #64]	@ _79, g_armwave_state.bitdepth_height
 326 011c 00906AE2 		rsb	r9, r10, #0	@ ivtmp.53, ivtmp.52
 327              	.LVL11:
 328              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 329              		.loc 1 79 11 view .LVU54
 330 0120 05C0A0E1 		mov	ip, r5	@ write_buffer, write_buffer
 331 0124 24308DE5 		str	r3, [sp, #36]	@ _266, %sfp
 332 0128 0030A0E3 		mov	r3, #0	@ w,
 333 012c 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 334              	.LVL12:
 335              	.L15:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 336              		.loc 1 80 9 is_stmt 1 view .LVU55
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 337              		.loc 1 84 9 view .LVU56
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 338              		.loc 1 84 9 is_stmt 0 view .LVU57
 339 0130 000056E3 		cmp	r6, #0	@ height,
 340 0134 2800000A 		beq	.L13		@,
 341 0138 0A80A0E1 		mov	r8, r10	@ ivtmp.45, ivtmp.52
 342 013c 0030A0E3 		mov	r3, #0	@ ivtmp.46,
 343              	.LVL13:
 344              	.L14:
  87:armwave.c     **** 
 345              		.loc 1 87 13 is_stmt 1 view .LVU58
 346              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 347              		.loc 1 87 18 is_stmt 0 view .LVU59
 348 0140 042098E4 		ldr	r2, [r8], #4	@ word, MEM[base: _275, offset: 0B]
 349              	.LVL14:
  89:armwave.c     ****                 scale_value = word & 0xff;
 350              		.loc 1 89 13 is_stmt 1 view .LVU60
  90:armwave.c     ****                 
 351              		.loc 1 90 17 view .LVU61
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 102 17 view .LVU62
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 107 17 view .LVU63
 354              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 355              		.loc 1 103 74 is_stmt 0 view .LVU64
 356 0144 23C8A0E1 		lsr	ip, r3, #16	@ tmp211, ivtmp.46,
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 34 view .LVU65
 359 0148 033087E0 		add	r3, r7, r3	@ _102, _75, ivtmp.46
 360              	.LVL15:
 361              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 362              		.loc 1 90 29 view .LVU66
 363 014c 7210EFE6 		uxtb	r1, r2	@ scale_value, word
 364              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 365              		.loc 1 107 47 view .LVU67
 366 0150 9E1C2CE0 		mla	ip, lr, ip, r1	@ tmp214, _79, tmp211, scale_value
 367              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 368              		.loc 1 108 22 view .LVU68
 369 0154 2214A0E1 		lsr	r1, r2, #8	@ word, word,
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 74 view .LVU69
 372 0158 2308A0E1 		lsr	r0, r3, #16	@ tmp219, _102,
 373              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 374              		.loc 1 90 29 view .LVU70
 375 015c 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU71
 378 0160 8CC0A0E1 		lsl	ip, ip, #1	@ tmp215, tmp214,
 379 0164 9E1020E0 		mla	r0, lr, r0, r1	@ tmp223, _79, tmp219, scale_value
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 34 view .LVU72
 382 0168 033087E0 		add	r3, r7, r3	@ _128, _75, _102
 383              	@ armwave.c:108:                 word >>= 8;
 384              		.loc 1 108 22 view .LVU73
 385 016c 2218A0E1 		lsr	r1, r2, #16	@ word, word,
 386              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 387              		.loc 1 107 47 view .LVU74
 388 0170 BC5094E1 		ldrh	r5, [r4, ip]	@ *_85, *_85
 389              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 390              		.loc 1 103 74 view .LVU75
 391 0174 23B8A0E1 		lsr	fp, r3, #16	@ tmp228, _128,
 392              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 393              		.loc 1 90 29 view .LVU76
 394 0178 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 395              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 396              		.loc 1 107 47 view .LVU77
 397 017c 8000A0E1 		lsl	r0, r0, #1	@ tmp224, tmp223,
 398              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 399              		.loc 1 103 34 view .LVU78
 400 0180 033087E0 		add	r3, r7, r3	@ _154, _75, _128
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 view .LVU79
 403 0184 9E1B21E0 		mla	r1, lr, fp, r1	@ tmp232, _79, tmp228, scale_value
 404 0188 015085E2 		add	r5, r5, #1	@ tmp218, *_85,
 405 018c BC5084E1 		strh	r5, [r4, ip]	@ movhi	@ tmp218, *_85
 406              		.loc 1 108 17 is_stmt 1 view .LVU80
 407              	.LVL16:
  90:armwave.c     ****                 
 408              		.loc 1 90 17 view .LVU81
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 409              		.loc 1 102 17 view .LVU82
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 17 view .LVU83
 411              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 412              		.loc 1 103 74 is_stmt 0 view .LVU84
 413 0190 23C8A0E1 		lsr	ip, r3, #16	@ tmp237, _154,
 414              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 47 view .LVU85
 416 0194 B05094E1 		ldrh	r5, [r4, r0]	@ *_111, *_111
 417 0198 8110A0E1 		lsl	r1, r1, #1	@ tmp233, tmp232,
 418              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 419              		.loc 1 102 50 view .LVU86
 420 019c 9E0C0CE0 		mul	ip, lr, ip	@ tmp238, _79, tmp237
 421              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 422              		.loc 1 107 47 view .LVU87
 423 01a0 015085E2 		add	r5, r5, #1	@ tmp227, *_111,
 424 01a4 B05084E1 		strh	r5, [r4, r0]	@ movhi	@ tmp227, *_111
 425              		.loc 1 108 17 is_stmt 1 view .LVU88
 426              	.LVL17:
  90:armwave.c     ****                 
 427              		.loc 1 90 17 view .LVU89
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 428              		.loc 1 102 17 view .LVU90
 107:armwave.c     ****                 word >>= 8;
 429              		.loc 1 107 17 view .LVU91
 430              	@ armwave.c:108:                 word >>= 8;
 431              		.loc 1 108 22 is_stmt 0 view .LVU92
 432 01a8 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 433              	.LVL18:
 434              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 435              		.loc 1 107 47 view .LVU93
 436 01ac B10094E1 		ldrh	r0, [r4, r1]	@ *_137, *_137
 437 01b0 8220A0E1 		lsl	r2, r2, #1	@ tmp241, word,
 438              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 439              		.loc 1 102 30 view .LVU94
 440 01b4 8CC084E0 		add	ip, r4, ip, lsl #1	@ write_buffer, write_buffer_base, tmp238,
 441              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 442              		.loc 1 107 47 view .LVU95
 443 01b8 010080E2 		add	r0, r0, #1	@ tmp236, *_137,
 444 01bc B10084E1 		strh	r0, [r4, r1]	@ movhi	@ tmp236, *_137
 445              		.loc 1 108 17 is_stmt 1 view .LVU96
 446              	.LVL19:
  90:armwave.c     ****                 
 447              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 448              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 449              		.loc 1 107 17 view .LVU99
 450              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 451              		.loc 1 107 47 is_stmt 0 view .LVU100
 452 01c0 B2109CE1 		ldrh	r1, [ip, r2]	@ *_163, *_163
 453              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 454              		.loc 1 84 9 view .LVU101
 455 01c4 080089E0 		add	r0, r9, r8	@ tmp245, ivtmp.53, ivtmp.45
 456 01c8 000056E1 		cmp	r6, r0	@ height, tmp245
 457              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 458              		.loc 1 107 47 view .LVU102
 459 01cc 011081E2 		add	r1, r1, #1	@ tmp244, *_163,
 460 01d0 033087E0 		add	r3, r7, r3	@ ivtmp.46, _75, _154
 461              	.LVL20:
 107:armwave.c     ****                 word >>= 8;
 462              		.loc 1 107 47 view .LVU103
 463 01d4 B2108CE1 		strh	r1, [ip, r2]	@ movhi	@ tmp244, *_163
 464              		.loc 1 108 17 is_stmt 1 view .LVU104
 465              	.LVL21:
 466              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 467              		.loc 1 84 9 is_stmt 0 view .LVU105
 468 01d8 D8FFFF8A 		bhi	.L14		@,
 469              	.LVL22:
 470              	.L13:
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 discriminator 2 view .LVU106
 473 01dc 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 474              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 475              		.loc 1 79 5 discriminator 2 view .LVU107
 476 01e0 20209DE5 		ldr	r2, [sp, #32]	@ _82, %sfp
 477              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 478              		.loc 1 79 44 discriminator 2 view .LVU108
 479 01e4 013083E2 		add	r3, r3, #1	@ w, w,
 480 01e8 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 481              	.LVL23:
 482              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 discriminator 2 view .LVU109
 484 01ec 020053E1 		cmp	r3, r2	@ w, _82
 485 01f0 24309DE5 		ldr	r3, [sp, #36]	@ _266, %sfp
 486              	.LVL24:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 487              		.loc 1 79 5 discriminator 2 view .LVU110
 488 01f4 03A08AE0 		add	r10, r10, r3	@ ivtmp.52, ivtmp.52, _266
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 489              		.loc 1 79 5 discriminator 2 view .LVU111
 490 01f8 039049E0 		sub	r9, r9, r3	@ ivtmp.53, ivtmp.53, _266
 491 01fc CBFFFF1A 		bne	.L15		@,
 492 0200 0C50A0E1 		mov	r5, ip	@ write_buffer, write_buffer
 493              	.LVL25:
 494              	.L12:
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** 
 113:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 495              		.loc 1 113 5 is_stmt 1 view .LVU112
 496              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 497              		.loc 1 113 40 is_stmt 0 view .LVU113
 498 0204 041045E0 		sub	r1, r5, r4	@ tmp246, write_buffer, write_buffer_base
 499              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 500              		.loc 1 113 5 view .LVU114
 501 0208 14009FE5 		ldr	r0, .L22+8	@,
 502 020c C110A0E1 		asr	r1, r1, #1	@, tmp246,
 503              	@ armwave.c:114: }
 114:armwave.c     **** }
 504              		.loc 1 114 1 view .LVU115
 505 0210 2CD08DE2 		add	sp, sp, #44	@,,
 506              		.cfi_def_cfa_offset 36
 507              		@ sp needed	@
 508 0214 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_restore 14
 510              		.cfi_restore 11
 511              		.cfi_restore 10
 512              		.cfi_restore 9
 513              		.cfi_restore 8
 514              		.cfi_restore 7
 515              		.cfi_restore 6
 516              		.cfi_restore 5
 517              		.cfi_restore 4
 518              		.cfi_def_cfa_offset 0
 519              	.LVL26:
 520              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 521              		.loc 1 113 5 view .LVU116
 522 0218 FEFFFFEA 		b	printf		@
 523              	.LVL27:
 524              	.L23:
 525              		.align	2
 526              	.L22:
 527 021c 00000000 		.word	g_armwave_state
 528 0220 20000000 		.word	.LC2
 529 0224 78000000 		.word	.LC3
 530              		.cfi_endproc
 531              	.LFE59:
 533              		.align	2
 534              		.global	armwave_fill_pixbuf_scaled
 535              		.syntax unified
 536              		.arm
 537              		.fpu vfp
 539              	armwave_fill_pixbuf_scaled:
 540              	.LVL28:
 541              	.LFB60:
 115:armwave.c     **** 
 116:armwave.c     **** /*
 117:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 118:armwave.c     ****  * Rows are repeated as necessary.
 119:armwave.c     ****  */
 120:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 121:armwave.c     **** {
 542              		.loc 1 121 1 is_stmt 1 view -0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 24
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 122:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 546              		.loc 1 122 5 view .LVU118
 123:armwave.c     ****     // uint32_t ysub;
 124:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 547              		.loc 1 124 5 view .LVU119
 125:armwave.c     ****     uint8_t r, g, b;
 548              		.loc 1 125 5 view .LVU120
 126:armwave.c     ****     int value; 
 549              		.loc 1 126 5 view .LVU121
 127:armwave.c     ****     // uint8_t row;
 128:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 550              		.loc 1 128 5 view .LVU122
 551              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 552              		.loc 1 121 1 is_stmt 0 view .LVU123
 553 0228 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 554              		.cfi_def_cfa_offset 36
 555              		.cfi_offset 4, -36
 556              		.cfi_offset 5, -32
 557              		.cfi_offset 6, -28
 558              		.cfi_offset 7, -24
 559              		.cfi_offset 8, -20
 560              		.cfi_offset 9, -16
 561              		.cfi_offset 10, -12
 562              		.cfi_offset 11, -8
 563              		.cfi_offset 14, -4
 564              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 130:armwave.c     ****     uint32_t offset;
 131:armwave.c     **** 
 132:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 565              		.loc 1 132 5 view .LVU124
 566 022c 0010A0E1 		mov	r1, r0	@, out_buffer
 567              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 568              		.loc 1 128 15 view .LVU125
 569 0230 1C629FE5 		ldr	r6, .L47	@ tmp255,
 570              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 571              		.loc 1 121 1 view .LVU126
 572 0234 0070A0E1 		mov	r7, r0	@ out_buffer, out_buffer
 573 0238 24D04DE2 		sub	sp, sp, #36	@,,
 574              		.cfi_def_cfa_offset 72
 575              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 576              		.loc 1 132 5 view .LVU127
 577 023c 14029FE5 		ldr	r0, .L47+4	@,
 578              	.LVL29:
 579              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 580              		.loc 1 128 15 view .LVU128
 581 0240 049096E5 		ldr	r9, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 582              	.LVL30:
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 583              		.loc 1 129 5 is_stmt 1 view .LVU129
 130:armwave.c     **** 
 584              		.loc 1 130 5 view .LVU130
 585              		.loc 1 132 5 view .LVU131
 586 0244 FEFFFFEB 		bl	printf		@
 587              	.LVL31:
 133:armwave.c     **** 
 134:armwave.c     ****     if(out_buffer == NULL)
 588              		.loc 1 134 5 view .LVU132
 589              	@ armwave.c:134:     if(out_buffer == NULL)
 590              		.loc 1 134 7 is_stmt 0 view .LVU133
 591 0248 000057E3 		cmp	r7, #0	@ out_buffer,
 592 024c 7B00000A 		beq	.L24		@,
 135:armwave.c     ****         return;
 136:armwave.c     **** 
 137:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 593              		.loc 1 137 5 is_stmt 1 view .LVU134
 594              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 595              		.loc 1 137 27 is_stmt 0 view .LVU135
 596 0250 583096E5 		ldr	r3, [r6, #88]	@ _1, g_armwave_state.target_width
 597              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 138:armwave.c     ****     
 139:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%08x\n", \
 140:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 598              		.loc 1 140 38 view .LVU136
 599 0254 5C1096E5 		ldr	r1, [r6, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 600              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 601              		.loc 1 137 10 view .LVU137
 602 0258 402096E5 		ldr	r2, [r6, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 603              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%0
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 604              		.loc 1 139 5 view .LVU138
 605 025c 1C008DE2 		add	r0, sp, #28	@ tmp194,,
 606              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 607              		.loc 1 140 38 view .LVU139
 608 0260 910301E0 		mul	r1, r1, r3	@ tmp190, g_armwave_state.target_height, _1
 609              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 610              		.loc 1 137 10 view .LVU140
 611 0264 92030AE0 		mul	r10, r2, r3	@ npix, g_armwave_state.bitdepth_height, _1
 612              	.LVL32:
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 613              		.loc 1 139 5 is_stmt 1 view .LVU141
 614 0268 0111A0E1 		lsl	r1, r1, #2	@, tmp190,
 615 026c 0A20A0E1 		mov	r2, r10	@, npix
 616 0270 04008DE5 		str	r0, [sp, #4]	@ tmp194,
 617 0274 503096E5 		ldr	r3, [r6, #80]	@, g_armwave_state.ch_buff_size
 618 0278 00908DE5 		str	r9, [sp]	@ base_32ptr,
 619 027c D8019FE5 		ldr	r0, .L47+8	@,
 620 0280 FEFFFFEB 		bl	printf		@
 621              	.LVL33:
 141:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, &w);
 142:armwave.c     **** 
 143:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 144:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 622              		.loc 1 144 5 view .LVU142
 623              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 624              		.loc 1 144 59 is_stmt 0 view .LVU143
 625 0284 583096E5 		ldr	r3, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 626 0288 5C2096E5 		ldr	r2, [r6, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 627              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 628              		.loc 1 144 5 view .LVU144
 629 028c 0010A0E3 		mov	r1, #0	@,
 630 0290 0700A0E1 		mov	r0, r7	@, out_buffer
 631              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 632              		.loc 1 144 59 view .LVU145
 633 0294 920302E0 		mul	r2, r2, r3	@ tmp197, g_armwave_state.target_height, g_armwave_state.target_width
 634              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 635              		.loc 1 144 5 view .LVU146
 636 0298 0221A0E1 		lsl	r2, r2, #2	@, tmp197,
 637 029c FEFFFFEB 		bl	memset		@
 638              	.LVL34:
 145:armwave.c     **** 
 146:armwave.c     ****     printf("iter...\n");
 639              		.loc 1 146 5 is_stmt 1 view .LVU147
 640 02a0 B8019FE5 		ldr	r0, .L47+12	@,
 641 02a4 FEFFFFEB 		bl	puts		@
 642              	.LVL35:
 147:armwave.c     **** 
 148:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 643              		.loc 1 148 5 view .LVU148
 644              		.loc 1 148 5 is_stmt 0 view .LVU149
 645 02a8 00005AE3 		cmp	r10, #0	@ npix,
 646 02ac 650000DA 		ble	.L34		@,
 647              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 648              		.loc 1 148 11 view .LVU150
 649 02b0 0040A0E3 		mov	r4, #0	@ n,
 650              	@ armwave.c:153:         if(n % 200 == 0) {
 149:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 150:armwave.c     ****         //wave_word = 0x12345678;
 151:armwave.c     ****         wave_word = *base_32ptr++;
 152:armwave.c     **** 
 153:armwave.c     ****         if(n % 200 == 0) {
 651              		.loc 1 153 14 view .LVU151
 652 02b4 A8B19FE5 		ldr	fp, .L47+16	@ tmp208,
 653              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 654              		.loc 1 122 46 view .LVU152
 655 02b8 08408DE5 		str	r4, [sp, #8]	@ n, %sfp
 656 02bc 040000EA 		b	.L33		@
 657              	.LVL36:
 658              	.L28:
 154:armwave.c     ****            printf("%d\n", n);
 155:armwave.c     ****         }
 156:armwave.c     **** 
 157:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 659              		.loc 1 157 9 is_stmt 1 view .LVU153
 660              	@ armwave.c:157:         if(COND_UNLIKELY(wave_word != 0)) {
 661              		.loc 1 157 11 is_stmt 0 view .LVU154
 662 02c0 000055E3 		cmp	r5, #0	@ wave_word,
 663 02c4 0F00001A 		bne	.L45		@,
 664              	.LVL37:
 665              	.L29:
 666              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 667              		.loc 1 148 28 discriminator 2 view .LVU155
 668 02c8 024084E2 		add	r4, r4, #2	@ n, n,
 669              	.LVL38:
 670              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 671              		.loc 1 148 5 discriminator 2 view .LVU156
 672 02cc 04005AE1 		cmp	r10, r4	@ npix, n
 673 02d0 570000DA 		ble	.L27		@,
 674              	.LVL39:
 675              	.L33:
 151:armwave.c     **** 
 676              		.loc 1 151 9 is_stmt 1 view .LVU157
 677              	@ armwave.c:153:         if(n % 200 == 0) {
 153:armwave.c     ****            printf("%d\n", n);
 678              		.loc 1 153 14 is_stmt 0 view .LVU158
 679 02d4 9B24C3E0 		smull	r2, r3, fp, r4	@ tmp283, tmp207, tmp208, n
 680              	@ armwave.c:151:         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 681              		.loc 1 151 19 view .LVU159
 682 02d8 045099E4 		ldr	r5, [r9], #4	@ wave_word, MEM[base: base_32ptr_79, offset: 4294967292B]
 683              	.LVL40:
 153:armwave.c     ****            printf("%d\n", n);
 684              		.loc 1 153 9 is_stmt 1 view .LVU160
 685              	@ armwave.c:153:         if(n % 200 == 0) {
 153:armwave.c     ****            printf("%d\n", n);
 686              		.loc 1 153 14 is_stmt 0 view .LVU161
 687 02dc C42FA0E1 		asr	r2, r4, #31	@ tmp210, n,
 688 02e0 433362E0 		rsb	r3, r2, r3, asr #6	@ tmp206, tmp210, tmp207,
 689 02e4 033183E0 		add	r3, r3, r3, lsl #2	@ tmp213, tmp206, tmp206,
 690 02e8 033183E0 		add	r3, r3, r3, lsl #2	@ tmp215, tmp213, tmp213,
 691              	@ armwave.c:153:         if(n % 200 == 0) {
 153:armwave.c     ****            printf("%d\n", n);
 692              		.loc 1 153 11 view .LVU162
 693 02ec 830154E1 		cmp	r4, r3, lsl #3	@ n, tmp215,
 694 02f0 F2FFFF1A 		bne	.L28		@,
 695              	.LVL41:
 154:armwave.c     ****         }
 696              		.loc 1 154 12 is_stmt 1 view .LVU163
 697 02f4 0410A0E1 		mov	r1, r4	@, n
 698 02f8 68019FE5 		ldr	r0, .L47+20	@,
 699 02fc FEFFFFEB 		bl	printf		@
 700              	.LVL42:
 701              		.loc 1 157 9 view .LVU164
 702              	@ armwave.c:157:         if(COND_UNLIKELY(wave_word != 0)) {
 703              		.loc 1 157 11 is_stmt 0 view .LVU165
 704 0300 000055E3 		cmp	r5, #0	@ wave_word,
 705 0304 EFFFFF0A 		beq	.L29		@,
 706              	.LVL43:
 707              	.L45:
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 708              		.loc 1 158 13 is_stmt 1 view .LVU166
 709              	@ armwave.c:163:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 159:armwave.c     ****                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 161:armwave.c     **** 
 162:armwave.c     ****                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 710              		.loc 1 163 52 is_stmt 0 view .LVU167
 711 0308 FC36D6E1 		ldrsh	r3, [r6, #108]	@ _19, g_armwave_state.ch1_color.r
 712              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 167:armwave.c     ****                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 170:armwave.c     **** 
 171:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 172:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 174:armwave.c     ****                     // Plot the pixels
 175:armwave.c     ****                     nsub = n + w;
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 713              		.loc 1 176 57 view .LVU168
 714 030c 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _39, g_armwave_state.vscale_frac
 715              	@ armwave.c:158:             for(w = 0; w < 2; w++) {
 158:armwave.c     ****                 value = wave_word & 0xffff;
 716              		.loc 1 158 26 view .LVU169
 717 0310 00E0A0E3 		mov	lr, #0	@ w.9_110,
 718              	@ armwave.c:163:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 719              		.loc 1 163 52 view .LVU170
 720 0314 0C308DE5 		str	r3, [sp, #12]	@ _19, %sfp
 721              	@ armwave.c:164:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 722              		.loc 1 164 52 view .LVU171
 723 0318 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _22, g_armwave_state.ch1_color.g
 724 031c 10308DE5 		str	r3, [sp, #16]	@ _22, %sfp
 725              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 165:armwave.c     **** 
 726              		.loc 1 165 52 view .LVU172
 727 0320 F037D6E1 		ldrsh	r3, [r6, #112]	@ _25, g_armwave_state.ch1_color.b
 728 0324 14308DE5 		str	r3, [sp, #20]	@ _25, %sfp
 729 0328 020000EA 		b	.L32		@
 730              	.LVL44:
 731              	.L30:
 732              	@ armwave.c:158:             for(w = 0; w < 2; w++) {
 158:armwave.c     ****                 value = wave_word & 0xffff;
 733              		.loc 1 158 13 discriminator 2 view .LVU173
 734 032c 01005EE3 		cmp	lr, #1	@ w.9_110,
 735 0330 3A00000A 		beq	.L46		@,
 736              	.L35:
 158:armwave.c     ****                 value = wave_word & 0xffff;
 737              		.loc 1 158 13 discriminator 2 view .LVU174
 738 0334 01E0A0E3 		mov	lr, #1	@ w.9_110,
 739              	.L32:
 159:armwave.c     ****                 wave_word >>= 16;
 740              		.loc 1 159 17 is_stmt 1 view .LVU175
 741              	@ armwave.c:159:                 value = wave_word & 0xffff;
 159:armwave.c     ****                 wave_word >>= 16;
 742              		.loc 1 159 23 is_stmt 0 view .LVU176
 743 0338 7530FFE6 		uxth	r3, r5	@ value, wave_word
 744              	.LVL45:
 160:armwave.c     **** 
 745              		.loc 1 160 17 is_stmt 1 view .LVU177
 746              	@ armwave.c:162:                 if(value != 0) {
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 747              		.loc 1 162 19 is_stmt 0 view .LVU178
 748 033c 000053E3 		cmp	r3, #0	@ value,
 749              	@ armwave.c:160:                 wave_word >>= 16;
 160:armwave.c     **** 
 750              		.loc 1 160 27 view .LVU179
 751 0340 2558A0E1 		lsr	r5, r5, #16	@ wave_word, wave_word,
 752              	.LVL46:
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 753              		.loc 1 162 17 is_stmt 1 view .LVU180
 754              	@ armwave.c:162:                 if(value != 0) {
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 755              		.loc 1 162 19 is_stmt 0 view .LVU181
 756 0344 F8FFFF0A 		beq	.L30		@,
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 757              		.loc 1 163 21 is_stmt 1 view .LVU182
 758              	.LVL47:
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 759              		.loc 1 164 21 view .LVU183
 165:armwave.c     **** 
 760              		.loc 1 165 21 view .LVU184
 167:armwave.c     ****                     g = MIN(gg, 255);
 761              		.loc 1 167 21 view .LVU185
 168:armwave.c     ****                     b = MIN(bb, 255);
 762              		.loc 1 168 21 view .LVU186
 169:armwave.c     **** 
 763              		.loc 1 169 21 view .LVU187
 172:armwave.c     **** 
 764              		.loc 1 172 21 view .LVU188
 765 0348 0E0084E0 		add	r0, r4, lr	@ _165, n, w.9_110
 766              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 165:armwave.c     **** 
 767              		.loc 1 165 55 is_stmt 0 view .LVU189
 768 034c 14209DE5 		ldr	r2, [sp, #20]	@ _25, %sfp
 769              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 770              		.loc 1 176 32 view .LVU190
 771 0350 7010EFE6 		uxtb	r1, r0	@ _37, _165
 772              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 773              		.loc 1 177 41 view .LVU191
 774 0354 01C081E2 		add	ip, r1, #1	@ tmp241, _37,
 775              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 776              		.loc 1 176 40 view .LVU192
 777 0358 901A07EE 		vmov	s15, r1	@ int	@ _37, _37
 778              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 779              		.loc 1 177 41 view .LVU193
 780 035c 10CA07EE 		vmov	s14, ip	@ int	@ tmp241, tmp241
 781              	@ armwave.c:164:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 782              		.loc 1 164 55 view .LVU194
 783 0360 10109DE5 		ldr	r1, [sp, #16]	@ _22, %sfp
 784              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 165:armwave.c     **** 
 785              		.loc 1 165 55 view .LVU195
 786 0364 930202E0 		mul	r2, r3, r2	@ tmp226, value, _25
 787              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 788              		.loc 1 176 40 view .LVU196
 789 0368 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp239, _37
 790              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 791              		.loc 1 177 46 view .LVU197
 792 036c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp242, tmp241
 793              	@ armwave.c:164:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 794              		.loc 1 164 55 view .LVU198
 795 0370 930101E0 		mul	r1, r3, r1	@ tmp230, value, _22
 796              	@ armwave.c:163:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 797              		.loc 1 163 55 view .LVU199
 798 0374 0CC09DE5 		ldr	ip, [sp, #12]	@ _19, %sfp
 799              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 165:armwave.c     **** 
 800              		.loc 1 165 24 view .LVU200
 801 0378 4224A0E1 		asr	r2, r2, #8	@ bb, tmp226,
 802              	.LVL48:
 803              	@ armwave.c:169:                     b = MIN(bb, 255);
 169:armwave.c     **** 
 804              		.loc 1 169 25 view .LVU201
 805 037c FF0052E3 		cmp	r2, #255	@ bb,
 806              	@ armwave.c:163:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 807              		.loc 1 163 55 view .LVU202
 808 0380 930C03E0 		mul	r3, r3, ip	@ tmp236, value, _19
 809              	.LVL49:
 810              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 811              		.loc 1 176 40 view .LVU203
 812 0384 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp240, tmp239, _39
 813              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 814              		.loc 1 177 46 view .LVU204
 815 0388 267A27EE 		vmul.f32	s14, s14, s13	@ tmp243, tmp242, _39
 816              	@ armwave.c:164:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 817              		.loc 1 164 24 view .LVU205
 818 038c 4114A0E1 		asr	r1, r1, #8	@ gg, tmp230,
 819              	.LVL50:
 820              	@ armwave.c:169:                     b = MIN(bb, 255);
 169:armwave.c     **** 
 821              		.loc 1 169 25 view .LVU206
 822 0390 FF20A0A3 		movge	r2, #255	@ bb,
 823              	.LVL51:
 824              	@ armwave.c:168:                     g = MIN(gg, 255);
 168:armwave.c     ****                     b = MIN(bb, 255);
 825              		.loc 1 168 25 view .LVU207
 826 0394 FF0051E3 		cmp	r1, #255	@ gg,
 827 0398 FF10A0A3 		movge	r1, #255	@ gg,
 828              	.LVL52:
 829              	@ armwave.c:163:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 830              		.loc 1 163 24 view .LVU208
 831 039c 4334A0E1 		asr	r3, r3, #8	@ rr, tmp236,
 832              	.LVL53:
 833              	@ armwave.c:167:                     r = MIN(rr, 255);
 167:armwave.c     ****                     g = MIN(gg, 255);
 834              		.loc 1 167 25 view .LVU209
 835 03a0 FF0053E3 		cmp	r3, #255	@ rr,
 836              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 837              		.loc 1 176 24 view .LVU210
 838 03a4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp240
 839              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 840              		.loc 1 172 56 view .LVU211
 841 03a8 0114A0E1 		lsl	r1, r1, #8	@ tmp231, gg,
 842              	@ armwave.c:167:                     r = MIN(rr, 255);
 167:armwave.c     ****                     g = MIN(gg, 255);
 843              		.loc 1 167 25 view .LVU212
 844 03ac FF30A0A3 		movge	r3, #255	@ rr,
 845              	.LVL54:
 846              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 847              		.loc 1 172 44 view .LVU213
 848 03b0 0228A0E1 		lsl	r2, r2, #16	@ tmp227, bb,
 849              	@ armwave.c:178:                     xx = (nsub >> 8) / 2;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 850              		.loc 1 178 32 view .LVU214
 851 03b4 4004A0E1 		asr	r0, r0, #8	@ tmp244, _165,
 852              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 853              		.loc 1 172 44 view .LVU215
 854 03b8 FF2802E2 		and	r2, r2, #16711680	@ tmp228, tmp227,
 855              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 856              		.loc 1 172 56 view .LVU216
 857 03bc 7110FFE6 		uxth	r1, r1	@ tmp232, tmp231
 858              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 859              		.loc 1 172 51 view .LVU217
 860 03c0 011082E1 		orr	r1, r2, r1	@ tmp234, tmp228, tmp232
 861              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 862              		.loc 1 176 24 view .LVU218
 863 03c4 908A17EE 		vmov	r8, s15	@ int	@ yy, yy
 864              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 865              		.loc 1 177 24 view .LVU219
 866 03c8 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp243
 867              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 868              		.loc 1 172 62 view .LVU220
 869 03cc 7330EFE6 		uxtb	r3, r3	@ rr, rr
 870              	@ armwave.c:178:                     xx = (nsub >> 8) / 2;
 871              		.loc 1 178 38 view .LVU221
 872 03d0 A00F80E0 		add	r0, r0, r0, lsr #31	@ tmp246, tmp244, tmp244,
 873              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 874              		.loc 1 172 62 view .LVU222
 875 03d4 031081E1 		orr	r1, r1, r3	@ tmp238, tmp234, rr
 876              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 877              		.loc 1 172 26 view .LVU223
 878 03d8 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp238,
 879              	.LVL55:
 175:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 880              		.loc 1 175 21 is_stmt 1 view .LVU224
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 881              		.loc 1 176 21 view .LVU225
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 882              		.loc 1 177 21 view .LVU226
 883              	@ armwave.c:178:                     xx = (nsub >> 8) / 2;
 884              		.loc 1 178 38 is_stmt 0 view .LVU227
 885 03dc C000A0E1 		asr	r0, r0, #1	@ xx, tmp246,
 886              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 887              		.loc 1 177 24 view .LVU228
 888 03e0 90CA17EE 		vmov	ip, s15	@ int	@ ye, ye
 889              	.LVL56:
 890              		.loc 1 178 21 is_stmt 1 view .LVU229
 179:armwave.c     **** 
 180:armwave.c     ****                     for(y = yy; y < ye; y++) {
 891              		.loc 1 180 21 view .LVU230
 892              		.loc 1 180 21 is_stmt 0 view .LVU231
 893 03e4 0C0058E1 		cmp	r8, ip	@ yy, ye
 894 03e8 CFFFFF2A 		bcs	.L30		@,
 895 03ec 0830A0E1 		mov	r3, r8	@ y, yy
 896              	.LVL57:
 897              	.L31:
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 898              		.loc 1 181 25 is_stmt 1 discriminator 3 view .LVU232
 182:armwave.c     ****                         *(out_buffer_base + offset) = word;
 899              		.loc 1 182 25 discriminator 3 view .LVU233
 900              	@ armwave.c:181:                         offset = (xx + (y * g_armwave_state.target_width)); 
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 901              		.loc 1 181 43 is_stmt 0 discriminator 3 view .LVU234
 902 03f0 582096E5 		ldr	r2, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 903              	@ armwave.c:182:                         *(out_buffer_base + offset) = word;
 904              		.loc 1 182 43 discriminator 3 view .LVU235
 905 03f4 920322E0 		mla	r2, r2, r3, r0	@ tmp251, g_armwave_state.target_width, y, xx
 906              	.LVL58:
 907              	@ armwave.c:180:                     for(y = yy; y < ye; y++) {
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 908              		.loc 1 180 42 discriminator 3 view .LVU236
 909 03f8 013083E2 		add	r3, r3, #1	@ y, y,
 910              	.LVL59:
 911              	@ armwave.c:180:                     for(y = yy; y < ye; y++) {
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 912              		.loc 1 180 21 discriminator 3 view .LVU237
 913 03fc 03005CE1 		cmp	ip, r3	@ ye, y
 914              	@ armwave.c:182:                         *(out_buffer_base + offset) = word;
 915              		.loc 1 182 53 discriminator 3 view .LVU238
 916 0400 021187E7 		str	r1, [r7, r2, lsl #2]	@ word, *_50
 183:armwave.c     ****                         painted++;
 917              		.loc 1 183 25 is_stmt 1 discriminator 3 view .LVU239
 918              	.LVL60:
 919              	@ armwave.c:180:                     for(y = yy; y < ye; y++) {
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 920              		.loc 1 180 21 is_stmt 0 discriminator 3 view .LVU240
 921 0404 F9FFFF1A 		bne	.L31		@,
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 922              		.loc 1 180 21 discriminator 3 view .LVU241
 923 0408 08309DE5 		ldr	r3, [sp, #8]	@ painted, %sfp
 924              	.LVL61:
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 925              		.loc 1 180 21 discriminator 3 view .LVU242
 926 040c 08C04CE0 		sub	ip, ip, r8	@ tmp252, ye, yy
 927              	.LVL62:
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 928              		.loc 1 180 21 discriminator 3 view .LVU243
 929 0410 0C3083E0 		add	r3, r3, ip	@ painted, painted, tmp252
 930              	@ armwave.c:158:             for(w = 0; w < 2; w++) {
 158:armwave.c     ****                 value = wave_word & 0xffff;
 931              		.loc 1 158 13 view .LVU244
 932 0414 01005EE3 		cmp	lr, #1	@ w.9_110,
 933 0418 08308DE5 		str	r3, [sp, #8]	@ painted, %sfp
 934              	.LVL63:
 158:armwave.c     ****                 value = wave_word & 0xffff;
 935              		.loc 1 158 13 view .LVU245
 936 041c C4FFFF1A 		bne	.L35		@,
 937              	.LVL64:
 938              	.L46:
 939              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 940              		.loc 1 148 28 view .LVU246
 941 0420 024084E2 		add	r4, r4, #2	@ n, n,
 942              	.LVL65:
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 943              		.loc 1 148 28 view .LVU247
 944 0424 0230A0E3 		mov	r3, #2	@ tmp253,
 945              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 946              		.loc 1 148 5 view .LVU248
 947 0428 04005AE1 		cmp	r10, r4	@ npix, n
 948 042c 1C308DE5 		str	r3, [sp, #28]	@ tmp253, w
 949              	.LVL66:
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 950              		.loc 1 148 5 view .LVU249
 951 0430 A7FFFFCA 		bgt	.L33		@,
 952              	.LVL67:
 953              	.L27:
 184:armwave.c     ****                     }
 185:armwave.c     ****                 }
 186:armwave.c     ****             }
 187:armwave.c     ****         }
 188:armwave.c     ****     }
 189:armwave.c     **** 
 190:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 954              		.loc 1 190 5 is_stmt 1 view .LVU250
 955 0434 08109DE5 		ldr	r1, [sp, #8]	@, %sfp
 956 0438 2C009FE5 		ldr	r0, .L47+24	@,
 957 043c FEFFFFEB 		bl	printf		@
 958              	.LVL68:
 959              	.L24:
 960              	@ armwave.c:191: }
 191:armwave.c     **** }
 961              		.loc 1 191 1 is_stmt 0 view .LVU251
 962 0440 24D08DE2 		add	sp, sp, #36	@,,
 963              		.cfi_remember_state
 964              		.cfi_def_cfa_offset 36
 965              		@ sp needed	@
 966 0444 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 967              	.LVL69:
 968              	.L34:
 969              		.cfi_restore_state
 970              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 971              		.loc 1 122 46 view .LVU252
 972 0448 0030A0E3 		mov	r3, #0	@ painted,
 973 044c 08308DE5 		str	r3, [sp, #8]	@ painted, %sfp
 974 0450 F7FFFFEA 		b	.L27		@
 975              	.L48:
 976              		.align	2
 977              	.L47:
 978 0454 00000000 		.word	g_armwave_state
 979 0458 84000000 		.word	.LC4
 980 045c 9C000000 		.word	.LC5
 981 0460 E8000000 		.word	.LC6
 982 0464 1F85EB51 		.word	1374389535
 983 0468 F0000000 		.word	.LC7
 984 046c F4000000 		.word	.LC8
 985              		.cfi_endproc
 986              	.LFE60:
 988              		.global	__aeabi_idiv
 989              		.align	2
 990              		.global	armwave_generate
 991              		.syntax unified
 992              		.arm
 993              		.fpu vfp
 995              	armwave_generate:
 996              	.LFB61:
 192:armwave.c     **** 
 193:armwave.c     **** /*
 194:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 195:armwave.c     ****  */
 196:armwave.c     **** void armwave_generate()
 197:armwave.c     **** {
 997              		.loc 1 197 1 is_stmt 1 view -0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 0
 1000              		@ frame_needed = 0, uses_anonymous_args = 0
 198:armwave.c     ****     uint32_t yy;
 1001              		.loc 1 198 5 view .LVU254
 199:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 1002              		.loc 1 199 5 view .LVU255
 1003              	.LVL70:
 200:armwave.c     **** 
 201:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1004              		.loc 1 201 5 view .LVU256
 1005              	@ armwave.c:197: {
 197:armwave.c     ****     uint32_t yy;
 1006              		.loc 1 197 1 is_stmt 0 view .LVU257
 1007 0470 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 1008              		.cfi_def_cfa_offset 20
 1009              		.cfi_offset 4, -20
 1010              		.cfi_offset 5, -16
 1011              		.cfi_offset 6, -12
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 1014              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1015              		.loc 1 201 5 view .LVU258
 1016 0474 0010A0E3 		mov	r1, #0	@,
 1017              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1018              		.loc 1 201 58 view .LVU259
 1019 0478 84509FE5 		ldr	r5, .L57	@ tmp154,
 1020              	@ armwave.c:197: {
 197:armwave.c     ****     uint32_t yy;
 1021              		.loc 1 197 1 view .LVU260
 1022 047c 0CD04DE2 		sub	sp, sp, #12	@,,
 1023              		.cfi_def_cfa_offset 32
 1024              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1025              		.loc 1 201 5 view .LVU261
 1026 0480 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 1027 0484 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 1028 0488 FEFFFFEB 		bl	memset		@
 1029              	.LVL71:
 202:armwave.c     **** 
 203:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 1030              		.loc 1 203 5 is_stmt 1 view .LVU262
 1031              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1032              		.loc 1 203 68 is_stmt 0 view .LVU263
 1033 048c 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1034              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1035              		.loc 1 203 51 view .LVU264
 1036 0490 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1037 0494 0610A0E1 		mov	r1, r6	@, _13
 1038 0498 FEFFFFEB 		bl	__aeabi_idiv		@
 1039              	.LVL72:
 1040              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1041              		.loc 1 203 5 view .LVU265
 1042 049c 000050E3 		cmp	r0, #0	@,
 1043 04a0 1500000A 		beq	.L49		@,
 1044              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 204:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 205:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 1045              		.loc 1 205 9 view .LVU266
 1046 04a4 5C709FE5 		ldr	r7, .L57+4	@ tmp155,
 1047              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1048              		.loc 1 203 12 view .LVU267
 1049 04a8 0040A0E3 		mov	r4, #0	@ yy,
 1050              	.LVL73:
 1051              	.L51:
 1052              		.loc 1 205 9 is_stmt 1 discriminator 3 view .LVU268
 1053 04ac 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 1054              	@ armwave.c:207:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 206:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 207:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1055              		.loc 1 207 48 is_stmt 0 discriminator 3 view .LVU269
 1056 04b0 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1057              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 205:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1058              		.loc 1 205 9 discriminator 3 view .LVU270
 1059 04b4 0630A0E1 		mov	r3, r6	@, _13
 1060 04b8 0120A0E1 		mov	r2, r1	@, _5
 1061              	@ armwave.c:207:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1062              		.loc 1 207 48 discriminator 3 view .LVU271
 1063 04bc 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 1064              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 205:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1065              		.loc 1 205 9 discriminator 3 view .LVU272
 1066 04c0 0700A0E1 		mov	r0, r7	@, tmp155
 1067 04c4 0410A0E1 		mov	r1, r4	@, yy
 1068 04c8 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 1069 04cc 00C08DE5 		str	ip, [sp]	@ tmp145,
 1070 04d0 FEFFFFEB 		bl	printf		@
 1071              	.LVL74:
 208:armwave.c     **** 
 209:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1072              		.loc 1 209 9 is_stmt 1 discriminator 3 view .LVU273
 1073              	@ armwave.c:209:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1074              		.loc 1 209 62 is_stmt 0 discriminator 3 view .LVU274
 1075 04d4 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 1076              	@ armwave.c:209:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1077              		.loc 1 209 9 discriminator 3 view .LVU275
 1078 04d8 940100E0 		mul	r0, r4, r1	@, yy,
 1079 04dc FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1080              	.LVL75:
 210:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1081              		.loc 1 210 9 is_stmt 1 discriminator 3 view .LVU276
 211:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1082              		.loc 1 211 9 discriminator 3 view .LVU277
 1083              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1084              		.loc 1 203 68 is_stmt 0 discriminator 3 view .LVU278
 1085 04e0 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1086              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1087              		.loc 1 203 51 discriminator 3 view .LVU279
 1088 04e4 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1089 04e8 0610A0E1 		mov	r1, r6	@, _13
 1090 04ec FEFFFFEB 		bl	__aeabi_idiv		@
 1091              	.LVL76:
 1092              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1093              		.loc 1 203 86 discriminator 3 view .LVU280
 1094 04f0 014084E2 		add	r4, r4, #1	@ yy, yy,
 1095              	.LVL77:
 1096              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1097              		.loc 1 203 5 discriminator 3 view .LVU281
 1098 04f4 040050E1 		cmp	r0, r4	@, yy
 1099 04f8 EBFFFF8A 		bhi	.L51		@,
 1100              	.LVL78:
 1101              	.L49:
 1102              	@ armwave.c:220: }
 212:armwave.c     ****     }
 213:armwave.c     **** 
 214:armwave.c     ****     /*
 215:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 216:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 217:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 218:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 219:armwave.c     ****     */
 220:armwave.c     **** }
 1103              		.loc 1 220 1 view .LVU282
 1104 04fc 0CD08DE2 		add	sp, sp, #12	@,,
 1105              		.cfi_def_cfa_offset 20
 1106              		@ sp needed	@
 1107 0500 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1108              	.L58:
 1109              		.align	2
 1110              	.L57:
 1111 0504 00000000 		.word	g_armwave_state
 1112 0508 10010000 		.word	.LC9
 1113              		.cfi_endproc
 1114              	.LFE61:
 1116              		.align	2
 1117              		.global	armwave_setup_render
 1118              		.syntax unified
 1119              		.arm
 1120              		.fpu vfp
 1122              	armwave_setup_render:
 1123              	.LVL79:
 1124              	.LFB62:
 221:armwave.c     **** 
 222:armwave.c     **** /*
 223:armwave.c     ****  * Setup the renderer with passed parameters.
 224:armwave.c     ****  */
 225:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 226:armwave.c     **** {
 1125              		.loc 1 226 1 is_stmt 1 view -0
 1126              		.cfi_startproc
 1127              		@ args = 12, pretend = 0, frame = 0
 1128              		@ frame_needed = 0, uses_anonymous_args = 0
 227:armwave.c     ****     uint32_t length, xx;
 1129              		.loc 1 227 5 view .LVU284
 228:armwave.c     ****     float points_per_pixel;
 1130              		.loc 1 228 5 view .LVU285
 229:armwave.c     **** 
 230:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1131              		.loc 1 230 5 view .LVU286
 1132              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1133              		.loc 1 226 1 is_stmt 0 view .LVU287
 1134 050c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1135              		.cfi_def_cfa_offset 28
 1136              		.cfi_offset 4, -28
 1137              		.cfi_offset 5, -24
 1138              		.cfi_offset 6, -20
 1139              		.cfi_offset 7, -16
 1140              		.cfi_offset 8, -12
 1141              		.cfi_offset 9, -8
 1142              		.cfi_offset 14, -4
 1143 0510 14D04DE2 		sub	sp, sp, #20	@,,
 1144              		.cfi_def_cfa_offset 48
 1145              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1146              		.loc 1 226 1 view .LVU288
 1147 0514 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1148 0518 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1149 051c 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1150 0520 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1151              	@ armwave.c:230:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1152              		.loc 1 230 5 view .LVU289
 1153 0524 00308DE5 		str	r3, [sp]	@ wave_stride,
 1154              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1155              		.loc 1 226 1 view .LVU290
 1156 0528 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1157 052c 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1158              	@ armwave.c:230:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1159              		.loc 1 230 5 view .LVU291
 1160 0530 F460CDE1 		strd	r6, [sp, #4]	@,,
 1161 0534 0230A0E1 		mov	r3, r2	@, waves_max
 1162              	.LVL80:
 1163              		.loc 1 230 5 view .LVU292
 1164 0538 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1165 053c 0120A0E1 		mov	r2, r1	@, end_point
 1166              	.LVL81:
 1167              		.loc 1 230 5 view .LVU293
 1168 0540 0010A0E1 		mov	r1, r0	@, start_point
 1169              	.LVL82:
 1170              		.loc 1 230 5 view .LVU294
 1171 0544 8C019FE5 		ldr	r0, .L69+12	@,
 1172              	.LVL83:
 1173              		.loc 1 230 5 view .LVU295
 1174 0548 FEFFFFEB 		bl	printf		@
 1175              	.LVL84:
 231:armwave.c     **** 
 232:armwave.c     ****     // TODO these asserts should instead raise PyExc
 233:armwave.c     ****     assert(start_point < end_point);
 1176              		.loc 1 233 5 is_stmt 1 view .LVU296
 1177 054c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1178 0550 5100002A 		bcs	.L67		@,
 234:armwave.c     **** 
 235:armwave.c     ****     /*
 236:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 237:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 238:armwave.c     ****     if(target_height == 256) {
 239:armwave.c     ****         g_armwave_state.row_shift = 8;
 240:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 241:armwave.c     ****     } else if(target_height == 512) {
 242:armwave.c     ****         g_armwave_state.row_shift = 9;
 243:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 244:armwave.c     ****     } else if(target_height == 1024) {
 245:armwave.c     ****         g_armwave_state.row_shift = 10;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 247:armwave.c     ****     } else if(target_height == 2048) {
 248:armwave.c     ****         g_armwave_state.row_shift = 11;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 250:armwave.c     ****     }
 251:armwave.c     ****     */
 252:armwave.c     **** 
 253:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 254:armwave.c     ****     g_armwave_state.xstride = target_height;
 1179              		.loc 1 254 5 view .LVU297
 1180              	@ armwave.c:265:     g_armwave_state.wave_length = end_point - start_point;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 256:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 257:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 258:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 259:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 260:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 261:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 262:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 263:armwave.c     ****     g_armwave_state.target_width = target_width;
 264:armwave.c     ****     g_armwave_state.target_height = target_height;
 265:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1181              		.loc 1 265 45 is_stmt 0 view .LVU298
 1182 0554 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1183              	.LVL85:
 1184              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 266:armwave.c     **** 
 267:armwave.c     ****     // Calculate compound scaler
 268:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 269:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1185              		.loc 1 269 48 view .LVU299
 1186 0558 5B5A9FED 		vldr.32	s10, .L69	@ tmp187,
 1187 055c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1188              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1189              		.loc 1 255 49 view .LVU300
 1190 0560 5A7A9FED 		vldr.32	s14, .L69+4	@ tmp165,
 1191              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1192              		.loc 1 269 81 view .LVU301
 1193 0564 5A6A9FED 		vldr.32	s12, .L69+8	@ tmp191,
 1194              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1195              		.loc 1 262 90 view .LVU302
 1196 0568 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1197              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1198              		.loc 1 269 48 view .LVU303
 1199 056c E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1200              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1201              		.loc 1 255 49 view .LVU304
 1202 0570 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1203              	@ armwave.c:254:     g_armwave_state.xstride = target_height;
 254:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1204              		.loc 1 254 29 view .LVU305
 1205 0574 60419FE5 		ldr	r4, .L69+16	@ tmp222,
 1206              	.LVL86:
 1207              	@ armwave.c:260:     g_armwave_state.size = target_height * target_width;
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1208              		.loc 1 260 42 view .LVU306
 1209 0578 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1210              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1211              		.loc 1 255 49 view .LVU307
 1212 057c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1213              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1214              		.loc 1 262 95 view .LVU308
 1215 0580 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1216              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 270:armwave.c     **** 
 271:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1217              		.loc 1 271 5 view .LVU309
 1218 0584 0128A0E3 		mov	r2, #65536	@ tmp194,
 1219              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1220              		.loc 1 269 48 view .LVU310
 1221 0588 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1222              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1223              		.loc 1 271 5 view .LVU311
 1224 058c 04508DE5 		str	r5, [sp, #4]	@ _13,
 1225 0590 00608DE5 		str	r6, [sp]	@ target_width,
 1226              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1227              		.loc 1 262 95 view .LVU312
 1228 0594 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1229              	@ armwave.c:254:     g_armwave_state.xstride = target_height;
 254:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1230              		.loc 1 254 29 view .LVU313
 1231 0598 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1232              		.loc 1 255 5 is_stmt 1 view .LVU314
 1233              	@ armwave.c:257:     g_armwave_state.wave_stride = wave_stride;
 257:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1234              		.loc 1 257 33 is_stmt 0 view .LVU315
 1235 059c 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1236              	@ armwave.c:258:     g_armwave_state.waves_max = waves_max;
 258:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1237              		.loc 1 258 31 view .LVU316
 1238 05a0 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1239              	@ armwave.c:259:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 259:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1240              		.loc 1 259 27 view .LVU317
 1241 05a4 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1242              	@ armwave.c:264:     g_armwave_state.target_height = target_height;
 264:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1243              		.loc 1 264 35 view .LVU318
 1244 05a8 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1245              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1246              		.loc 1 271 5 view .LVU319
 1247 05ac 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1248              	@ armwave.c:261:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1249              		.loc 1 261 37 view .LVU320
 1250 05b0 022CA0E3 		mov	r2, #512	@ tmp175,
 1251              	@ armwave.c:260:     g_armwave_state.size = target_height * target_width;
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1252              		.loc 1 260 26 view .LVU321
 1253 05b4 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1254              	@ armwave.c:261:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1255              		.loc 1 261 37 view .LVU322
 1256 05b8 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1257              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1258              		.loc 1 271 5 view .LVU323
 1259 05bc 0310A0E1 		mov	r1, r3	@, tmp180
 1260              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1261              		.loc 1 262 34 view .LVU324
 1262 05c0 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1263              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1264              		.loc 1 255 49 view .LVU325
 1265 05c4 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1266              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1267              		.loc 1 269 40 view .LVU326
 1268 05c8 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1269              	@ armwave.c:265:     g_armwave_state.wave_length = end_point - start_point;
 265:armwave.c     **** 
 1270              		.loc 1 265 33 view .LVU327
 1271 05cc 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1272              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1273              		.loc 1 271 5 view .LVU328
 1274 05d0 08019FE5 		ldr	r0, .L69+20	@,
 1275              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1276              		.loc 1 269 40 view .LVU329
 1277 05d4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1278 05d8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1279              	@ armwave.c:256:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1280              		.loc 1 256 30 view .LVU330
 1281 05dc E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1282              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1283              		.loc 1 255 33 view .LVU331
 1284 05e0 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1285              		.loc 1 256 5 is_stmt 1 view .LVU332
 1286              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1287              		.loc 1 269 81 is_stmt 0 view .LVU333
 1288 05e4 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1289              	@ armwave.c:256:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1290              		.loc 1 256 30 view .LVU334
 1291 05e8 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 257:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1292              		.loc 1 257 5 is_stmt 1 view .LVU335
 258:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1293              		.loc 1 258 5 view .LVU336
 259:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1294              		.loc 1 259 5 view .LVU337
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1295              		.loc 1 260 5 view .LVU338
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1296              		.loc 1 261 5 view .LVU339
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1297              		.loc 1 262 5 view .LVU340
 263:armwave.c     ****     g_armwave_state.target_height = target_height;
 1298              		.loc 1 263 5 view .LVU341
 264:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1299              		.loc 1 264 5 view .LVU342
 265:armwave.c     **** 
 1300              		.loc 1 265 5 view .LVU343
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1301              		.loc 1 268 5 view .LVU344
 1302              	@ armwave.c:268:     g_armwave_state.cmp_x_bitdepth_scale = \
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1303              		.loc 1 268 42 is_stmt 0 view .LVU345
 1304 05ec E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1305 05f0 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1306              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1307              		.loc 1 271 5 view .LVU346
 1308 05f4 903A17EE 		vmov	r3, s15	@ int	@, _20
 1309              	@ armwave.c:268:     g_armwave_state.cmp_x_bitdepth_scale = \
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1310              		.loc 1 268 42 view .LVU347
 1311 05f8 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1312              		.loc 1 271 5 is_stmt 1 view .LVU348
 1313 05fc 0C20A0E1 		mov	r2, ip	@, tmp3
 1314 0600 FEFFFFEB 		bl	printf		@
 1315              	.LVL87:
 272:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 273:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 274:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 275:armwave.c     **** 
 276:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 277:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 278:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 279:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1316              		.loc 1 279 5 view .LVU349
 1317              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 280:armwave.c     **** 
 281:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1318              		.loc 1 281 23 is_stmt 0 view .LVU350
 1319 0604 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1320              	@ armwave.c:279:     g_armwave_state.slice_height = 64; // 64;  
 279:armwave.c     **** 
 1321              		.loc 1 279 34 view .LVU351
 1322 0608 4030A0E3 		mov	r3, #64	@ tmp196,
 1323              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 1324              		.loc 1 281 7 view .LVU352
 1325 060c 000050E3 		cmp	r0, #0	@ _21,
 1326              	@ armwave.c:279:     g_armwave_state.slice_height = 64; // 64;  
 279:armwave.c     **** 
 1327              		.loc 1 279 34 view .LVU353
 1328 0610 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1329              		.loc 1 281 5 is_stmt 1 view .LVU354
 1330              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 1331              		.loc 1 281 7 is_stmt 0 view .LVU355
 1332 0614 0000000A 		beq	.L61		@,
 282:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1333              		.loc 1 282 9 is_stmt 1 view .LVU356
 1334 0618 FEFFFFEB 		bl	free		@
 1335              	.LVL88:
 1336              	.L61:
 283:armwave.c     **** 
 284:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1337              		.loc 1 284 5 view .LVU357
 1338              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1339              		.loc 1 284 56 is_stmt 0 view .LVU358
 1340 061c 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1341              	.LVL89:
 1342              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1343              		.loc 1 284 34 view .LVU359
 1344 0620 0110A0E3 		mov	r1, #1	@,
 1345 0624 0800A0E1 		mov	r0, r8	@, _22
 1346 0628 FEFFFFEB 		bl	calloc		@
 1347              	.LVL90:
 1348              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer == NULL) {
 285:armwave.c     **** 
 286:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1349              		.loc 1 286 7 view .LVU360
 1350 062c 000050E3 		cmp	r0, #0	@ tmp199,
 1351              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 284:armwave.c     **** 
 1352              		.loc 1 284 34 view .LVU361
 1353 0630 0070A0E1 		mov	r7, r0	@ tmp199,
 1354              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 284:armwave.c     **** 
 1355              		.loc 1 284 32 view .LVU362
 1356 0634 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1357              		.loc 1 286 5 is_stmt 1 view .LVU363
 1358              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer == NULL) {
 1359              		.loc 1 286 7 is_stmt 0 view .LVU364
 1360 0638 1C00000A 		beq	.L68		@,
 287:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 288:armwave.c     ****         exit(-1);
 289:armwave.c     ****     }
 290:armwave.c     **** 
 291:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 292:armwave.c     ****     length = end_point - start_point;
 1361              		.loc 1 292 5 is_stmt 1 view .LVU365
 1362              	.LVL91:
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1363              		.loc 1 293 5 view .LVU366
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1364              		.loc 1 294 5 view .LVU367
 1365              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1366              		.loc 1 293 31 is_stmt 0 view .LVU368
 1367 063c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1368              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1369              		.loc 1 293 34 view .LVU369
 1370 0640 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1371              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1372              		.loc 1 294 60 view .LVU370
 1373 0644 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1374              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 295:armwave.c     **** 
 296:armwave.c     ****     /*
 297:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     **** 
 299:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 300:armwave.c     **** 
 301:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 303:armwave.c     **** 
 304:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 305:armwave.c     ****     }
 306:armwave.c     ****     */
 307:armwave.c     **** 
 308:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1375              		.loc 1 308 34 view .LVU371
 1376 0648 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1377              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1378              		.loc 1 293 31 view .LVU372
 1379 064c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1380              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1381              		.loc 1 293 34 view .LVU373
 1382 0650 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1383              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1384              		.loc 1 294 60 view .LVU374
 1385 0654 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1386              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1387              		.loc 1 308 34 view .LVU375
 1388 0658 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1389              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1390              		.loc 1 293 22 view .LVU376
 1391 065c 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1392              	.LVL92:
 1393              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1394              		.loc 1 294 60 view .LVU377
 1395 0660 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1396              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1397              		.loc 1 294 41 view .LVU378
 1398 0664 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1399 0668 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1400              		.loc 1 308 5 is_stmt 1 view .LVU379
 1401              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1402              		.loc 1 308 34 is_stmt 0 view .LVU380
 1403 066c FEFFFFEB 		bl	malloc		@
 1404              	.LVL93:
 1405              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 309:armwave.c     **** 
 310:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1406              		.loc 1 310 5 view .LVU381
 1407 0670 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1408 0674 0710A0E1 		mov	r1, r7	@, tmp199
 1409 0678 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1410 067c 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1411              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1412              		.loc 1 308 34 view .LVU382
 1413 0680 00C0A0E1 		mov	ip, r0	@ tmp215,
 1414              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1415              		.loc 1 310 5 view .LVU383
 1416 0684 0030A0E1 		mov	r3, r0	@, tmp215
 1417              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1418              		.loc 1 308 32 view .LVU384
 1419 0688 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1420              		.loc 1 310 5 is_stmt 1 view .LVU385
 1421 068c 50009FE5 		ldr	r0, .L69+24	@,
 1422              	@ armwave.c:317: }
 311:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 312:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 313:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 315:armwave.c     **** 
 316:armwave.c     ****      //malloc_stats();
 317:armwave.c     **** }
 1423              		.loc 1 317 1 is_stmt 0 view .LVU386
 1424 0690 14D08DE2 		add	sp, sp, #20	@,,
 1425              		.cfi_remember_state
 1426              		.cfi_def_cfa_offset 28
 1427              		@ sp needed	@
 1428 0694 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1429              		.cfi_restore 14
 1430              		.cfi_restore 9
 1431              		.cfi_restore 8
 1432              		.cfi_restore 7
 1433              		.cfi_restore 6
 1434              		.cfi_restore 5
 1435              		.cfi_restore 4
 1436              		.cfi_def_cfa_offset 0
 1437              	.LVL94:
 1438              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 310:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1439              		.loc 1 310 5 view .LVU387
 1440 0698 FEFFFFEA 		b	printf		@
 1441              	.LVL95:
 1442              	.L67:
 1443              		.cfi_restore_state
 233:armwave.c     **** 
 1444              		.loc 1 233 5 is_stmt 1 discriminator 1 view .LVU388
 1445 069c 44309FE5 		ldr	r3, .L69+28	@,
 1446 06a0 E920A0E3 		mov	r2, #233	@,
 1447 06a4 40109FE5 		ldr	r1, .L69+32	@,
 1448 06a8 40009FE5 		ldr	r0, .L69+36	@,
 1449 06ac FEFFFFEB 		bl	__assert_fail		@
 1450              	.LVL96:
 1451              	.L68:
 287:armwave.c     ****         exit(-1);
 1452              		.loc 1 287 9 view .LVU389
 1453 06b0 3C309FE5 		ldr	r3, .L69+40	@ tmp202,
 1454 06b4 0820A0E1 		mov	r2, r8	@, _22
 1455 06b8 38109FE5 		ldr	r1, .L69+44	@,
 1456 06bc 000093E5 		ldr	r0, [r3]	@, stderr
 1457 06c0 FEFFFFEB 		bl	fprintf		@
 1458              	.LVL97:
 288:armwave.c     ****     }
 1459              		.loc 1 288 9 view .LVU390
 1460 06c4 0000E0E3 		mvn	r0, #0	@,
 1461 06c8 FEFFFFEB 		bl	exit		@
 1462              	.LVL98:
 1463              	.L70:
 1464              		.align	2
 1465              	.L69:
 1466 06cc 0000803F 		.word	1065353216
 1467 06d0 00007F43 		.word	1132396544
 1468 06d4 00008047 		.word	1199570944
 1469 06d8 44010000 		.word	.LC10
 1470 06dc 00000000 		.word	g_armwave_state
 1471 06e0 94010000 		.word	.LC13
 1472 06e4 38020000 		.word	.LC15
 1473 06e8 00000000 		.word	.LANCHOR0
 1474 06ec 70010000 		.word	.LC11
 1475 06f0 7C010000 		.word	.LC12
 1476 06f4 00000000 		.word	stderr
 1477 06f8 F4010000 		.word	.LC14
 1478              		.cfi_endproc
 1479              	.LFE62:
 1481              		.align	2
 1482              		.global	armwave_set_wave_pointer
 1483              		.syntax unified
 1484              		.arm
 1485              		.fpu vfp
 1487              	armwave_set_wave_pointer:
 1488              	.LVL99:
 1489              	.LFB63:
 318:armwave.c     **** 
 319:armwave.c     **** /*
 320:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 321:armwave.c     ****  * in the future.
 322:armwave.c     ****  */
 323:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 324:armwave.c     **** {
 1490              		.loc 1 324 1 view -0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1494              		.loc 1 325 5 view .LVU392
 1495 06fc 000050E3 		cmp	r0, #0	@ wave_buffer
 1496              		.loc 1 325 5 is_stmt 0 view .LVU393
 1497 0700 0200000A 		beq	.L76		@,
 326:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1498              		.loc 1 326 5 is_stmt 1 view .LVU394
 1499              	@ armwave.c:326:     g_armwave_state.wave_buffer = wave_buffer;
 1500              		.loc 1 326 33 is_stmt 0 view .LVU395
 1501 0704 1C309FE5 		ldr	r3, .L77	@ tmp116,
 1502 0708 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1503 070c 1EFF2FE1 		bx	lr	@
 1504              	.L76:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1505              		.loc 1 325 5 is_stmt 1 discriminator 1 view .LVU396
 1506              	@ armwave.c:324: {
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1507              		.loc 1 324 1 is_stmt 0 discriminator 1 view .LVU397
 1508 0710 10402DE9 		push	{r4, lr}	@
 1509              		.cfi_def_cfa_offset 8
 1510              		.cfi_offset 4, -8
 1511              		.cfi_offset 14, -4
 1512              	@ armwave.c:325:     assert(wave_buffer != NULL);
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1513              		.loc 1 325 5 discriminator 1 view .LVU398
 1514 0714 10309FE5 		ldr	r3, .L77+4	@,
 1515 0718 10209FE5 		ldr	r2, .L77+8	@,
 1516 071c 10109FE5 		ldr	r1, .L77+12	@,
 1517 0720 10009FE5 		ldr	r0, .L77+16	@,
 1518              	.LVL100:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1519              		.loc 1 325 5 discriminator 1 view .LVU399
 1520 0724 FEFFFFEB 		bl	__assert_fail		@
 1521              	.LVL101:
 1522              	.L78:
 1523              		.align	2
 1524              	.L77:
 1525 0728 00000000 		.word	g_armwave_state
 1526 072c 18000000 		.word	.LANCHOR0+24
 1527 0730 45010000 		.word	325
 1528 0734 70010000 		.word	.LC11
 1529 0738 5C020000 		.word	.LC16
 1530              		.cfi_endproc
 1531              	.LFE63:
 1533              		.align	2
 1534              		.global	armwave_set_wave_pointer_as_testbuf
 1535              		.syntax unified
 1536              		.arm
 1537              		.fpu vfp
 1539              	armwave_set_wave_pointer_as_testbuf:
 1540              	.LVL102:
 1541              	.LFB64:
 327:armwave.c     **** }
 328:armwave.c     **** 
 329:armwave.c     **** /*
 330:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 331:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 332:armwave.c     ****  */
 333:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 334:armwave.c     **** {
 1542              		.loc 1 334 1 is_stmt 1 view -0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 0
 1545              		@ frame_needed = 0, uses_anonymous_args = 0
 1546              		@ link register save eliminated.
 335:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1547              		.loc 1 335 5 view .LVU401
 1548              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1549              		.loc 1 335 29 is_stmt 0 view .LVU402
 1550 073c 24309FE5 		ldr	r3, .L82	@ tmp117,
 1551              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1552              		.loc 1 335 7 view .LVU403
 1553 0740 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1554 0744 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1555 0748 0400003A 		bcc	.L81		@,
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 337:armwave.c     ****         return;
 338:armwave.c     ****     }
 339:armwave.c     **** 
 340:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1556              		.loc 1 340 5 is_stmt 1 view .LVU404
 1557              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1558              		.loc 1 340 111 is_stmt 0 view .LVU405
 1559 074c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1560              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1561              		.loc 1 340 68 view .LVU406
 1562 0750 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1563 0754 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1564              	.LVL103:
 1565              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1566              		.loc 1 340 33 view .LVU407
 1567 0758 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1568              	@ armwave.c:341: }
 341:armwave.c     **** }
 1569              		.loc 1 341 1 view .LVU408
 1570 075c 1EFF2FE1 		bx	lr	@
 1571              	.LVL104:
 1572              	.L81:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1573              		.loc 1 336 9 is_stmt 1 view .LVU409
 1574 0760 04009FE5 		ldr	r0, .L82+4	@,
 1575              	.LVL105:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1576              		.loc 1 336 9 is_stmt 0 view .LVU410
 1577 0764 FEFFFFEA 		b	puts		@
 1578              	.LVL106:
 1579              	.L83:
 1580              		.align	2
 1581              	.L82:
 1582 0768 00000000 		.word	g_armwave_state
 1583 076c 70020000 		.word	.LC17
 1584              		.cfi_endproc
 1585              	.LFE64:
 1587              		.align	2
 1588              		.global	armwave_set_wave_pointer_u32
 1589              		.syntax unified
 1590              		.arm
 1591              		.fpu vfp
 1593              	armwave_set_wave_pointer_u32:
 1594              	.LVL107:
 1595              	.LFB65:
 342:armwave.c     **** 
 343:armwave.c     **** /*
 344:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 345:armwave.c     ****  * disjointed buffers in the future.
 346:armwave.c     ****  */
 347:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 348:armwave.c     **** {
 1596              		.loc 1 348 1 is_stmt 1 view -0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 0
 1599              		@ frame_needed = 0, uses_anonymous_args = 0
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1600              		.loc 1 349 5 view .LVU412
 1601 0770 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1602              		.loc 1 349 5 is_stmt 0 view .LVU413
 1603 0774 0200000A 		beq	.L89		@,
 350:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1604              		.loc 1 350 5 is_stmt 1 view .LVU414
 1605              	@ armwave.c:350:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1606              		.loc 1 350 33 is_stmt 0 view .LVU415
 1607 0778 1C309FE5 		ldr	r3, .L90	@ tmp117,
 1608 077c 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1609 0780 1EFF2FE1 		bx	lr	@
 1610              	.L89:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1611              		.loc 1 349 5 is_stmt 1 discriminator 1 view .LVU416
 1612              	@ armwave.c:348: {
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1613              		.loc 1 348 1 is_stmt 0 discriminator 1 view .LVU417
 1614 0784 10402DE9 		push	{r4, lr}	@
 1615              		.cfi_def_cfa_offset 8
 1616              		.cfi_offset 4, -8
 1617              		.cfi_offset 14, -4
 1618              	@ armwave.c:349:     assert(wave_buffer_ptr != 0);
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1619              		.loc 1 349 5 discriminator 1 view .LVU418
 1620 0788 10309FE5 		ldr	r3, .L90+4	@,
 1621 078c 10209FE5 		ldr	r2, .L90+8	@,
 1622 0790 10109FE5 		ldr	r1, .L90+12	@,
 1623 0794 10009FE5 		ldr	r0, .L90+16	@,
 1624              	.LVL108:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1625              		.loc 1 349 5 discriminator 1 view .LVU419
 1626 0798 FEFFFFEB 		bl	__assert_fail		@
 1627              	.LVL109:
 1628              	.L91:
 1629              		.align	2
 1630              	.L90:
 1631 079c 00000000 		.word	g_armwave_state
 1632 07a0 34000000 		.word	.LANCHOR0+52
 1633 07a4 5D010000 		.word	349
 1634 07a8 70010000 		.word	.LC11
 1635 07ac AC020000 		.word	.LC18
 1636              		.cfi_endproc
 1637              	.LFE65:
 1639              		.align	2
 1640              		.global	armwave_clear_buffer
 1641              		.syntax unified
 1642              		.arm
 1643              		.fpu vfp
 1645              	armwave_clear_buffer:
 1646              	.LVL110:
 1647              	.LFB66:
 351:armwave.c     **** }
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 357:armwave.c     **** {
 1648              		.loc 1 357 1 is_stmt 1 view -0
 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 0
 1651              		@ frame_needed = 0, uses_anonymous_args = 0
 1652              		@ link register save eliminated.
 358:armwave.c     ****     // Flags ignored, only one buffer cleared
 359:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1653              		.loc 1 359 5 view .LVU421
 1654              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1655              		.loc 1 359 58 is_stmt 0 view .LVU422
 1656 07b0 0C309FE5 		ldr	r3, .L93	@ tmp114,
 1657              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1658              		.loc 1 359 5 view .LVU423
 1659 07b4 0010A0E3 		mov	r1, #0	@,
 1660 07b8 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1661 07bc 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1662              	.LVL111:
 1663              		.loc 1 359 5 view .LVU424
 1664 07c0 FEFFFFEA 		b	memset		@
 1665              	.LVL112:
 1666              	.L94:
 1667              		.align	2
 1668              	.L93:
 1669 07c4 00000000 		.word	g_armwave_state
 1670              		.cfi_endproc
 1671              	.LFE66:
 1673              		.align	2
 1674              		.global	armwave_set_channel_colour
 1675              		.syntax unified
 1676              		.arm
 1677              		.fpu vfp
 1679              	armwave_set_channel_colour:
 1680              	.LVL113:
 1681              	.LFB67:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 364:armwave.c     ****  */
 365:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 366:armwave.c     **** {
 1682              		.loc 1 366 1 is_stmt 1 view -0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 0, uses_anonymous_args = 0
 1686              		@ link register save eliminated.
 367:armwave.c     ****     // Only 1ch supported for now
 368:armwave.c     ****     switch(ch) {
 1687              		.loc 1 368 5 view .LVU426
 1688 07c8 010050E3 		cmp	r0, #1	@ ch,
 369:armwave.c     ****         case 1:
 370:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1689              		.loc 1 370 13 view .LVU427
 1690              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 1691              		.loc 1 370 41 is_stmt 0 view .LVU428
 1692 07cc 0C009F05 		ldreq	r0, .L97	@ tmp117,
 1693              	.LVL114:
 1694              		.loc 1 370 41 view .LVU429
 1695 07d0 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 371:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1696              		.loc 1 371 13 is_stmt 1 view .LVU430
 1697              	@ armwave.c:371:             g_armwave_state.ch1_color.g = g;
 1698              		.loc 1 371 41 is_stmt 0 view .LVU431
 1699 07d4 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 372:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1700              		.loc 1 372 13 is_stmt 1 view .LVU432
 1701              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 1702              		.loc 1 372 41 is_stmt 0 view .LVU433
 1703 07d8 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 373:armwave.c     ****             break;
 1704              		.loc 1 373 13 is_stmt 1 view .LVU434
 1705              	@ armwave.c:375: }
 374:armwave.c     ****     }
 375:armwave.c     **** }
 1706              		.loc 1 375 1 is_stmt 0 view .LVU435
 1707 07dc 1EFF2FE1 		bx	lr	@
 1708              	.L98:
 1709              		.align	2
 1710              	.L97:
 1711 07e0 00000000 		.word	g_armwave_state
 1712              		.cfi_endproc
 1713              	.LFE67:
 1715              		.align	2
 1716              		.global	armwave_dump_ppm_debug
 1717              		.syntax unified
 1718              		.arm
 1719              		.fpu vfp
 1721              	armwave_dump_ppm_debug:
 1722              	.LVL115:
 1723              	.LFB68:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Dump a ppm of a buffer to a file.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 381:armwave.c     **** {
 1724              		.loc 1 381 1 is_stmt 1 view -0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 0
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1728              		.loc 1 382 5 view .LVU437
 1729              	@ armwave.c:381: {
 381:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1730              		.loc 1 381 1 is_stmt 0 view .LVU438
 1731 07e4 0130A0E1 		mov	r3, r1	@ fn, fn
 1732 07e8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1733              		.cfi_def_cfa_offset 28
 1734              		.cfi_offset 4, -28
 1735              		.cfi_offset 5, -24
 1736              		.cfi_offset 6, -20
 1737              		.cfi_offset 7, -16
 1738              		.cfi_offset 8, -12
 1739              		.cfi_offset 9, -8
 1740              		.cfi_offset 14, -4
 1741 07ec 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1742 07f0 0CD04DE2 		sub	sp, sp, #12	@,,
 1743              		.cfi_def_cfa_offset 40
 1744              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 1745              		.loc 1 382 16 view .LVU439
 1746 07f4 C4109FE5 		ldr	r1, .L107	@,
 1747              	.LVL116:
 1748              		.loc 1 382 16 view .LVU440
 1749 07f8 0300A0E1 		mov	r0, r3	@, fn
 1750              	.LVL117:
 1751              		.loc 1 382 16 view .LVU441
 1752 07fc FEFFFFEB 		bl	fopen64		@
 1753              	.LVL118:
 1754              	@ armwave.c:389:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 383:armwave.c     ****     uint32_t data;
 384:armwave.c     ****     int xx, yy;
 385:armwave.c     **** 
 386:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 387:armwave.c     **** 
 388:armwave.c     ****     fputs("P3\n", fp);
 389:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1755              		.loc 1 389 5 view .LVU442
 1756 0800 BC609FE5 		ldr	r6, .L107+4	@ tmp150,
 1757              	@ armwave.c:388:     fputs("P3\n", fp);
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1758              		.loc 1 388 5 view .LVU443
 1759 0804 0320A0E3 		mov	r2, #3	@,
 1760 0808 0110A0E3 		mov	r1, #1	@,
 1761              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 382:armwave.c     ****     uint32_t data;
 1762              		.loc 1 382 16 view .LVU444
 1763 080c 0070A0E1 		mov	r7, r0	@ fp,
 1764              	.LVL119:
 383:armwave.c     ****     uint32_t data;
 1765              		.loc 1 383 5 is_stmt 1 view .LVU445
 384:armwave.c     **** 
 1766              		.loc 1 384 5 view .LVU446
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1767              		.loc 1 388 5 view .LVU447
 1768 0810 0030A0E1 		mov	r3, r0	@, fp
 1769 0814 AC009FE5 		ldr	r0, .L107+8	@,
 1770              	.LVL120:
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1771              		.loc 1 388 5 is_stmt 0 view .LVU448
 1772 0818 FEFFFFEB 		bl	fwrite		@
 1773              	.LVL121:
 1774              		.loc 1 389 5 is_stmt 1 view .LVU449
 1775 081c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1776 0820 A4109FE5 		ldr	r1, .L107+12	@,
 1777 0824 0700A0E1 		mov	r0, r7	@, fp
 1778 0828 FEFFFFEB 		bl	fprintf		@
 1779              	.LVL122:
 390:armwave.c     ****     fputs("255\n", fp);
 1780              		.loc 1 390 5 view .LVU450
 1781 082c 0420A0E3 		mov	r2, #4	@,
 1782 0830 0730A0E1 		mov	r3, r7	@, fp
 1783 0834 0110A0E3 		mov	r1, #1	@,
 1784 0838 90009FE5 		ldr	r0, .L107+16	@,
 1785 083c FEFFFFEB 		bl	fwrite		@
 1786              	.LVL123:
 391:armwave.c     **** 
 392:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1787              		.loc 1 392 5 view .LVU451
 1788              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1789              		.loc 1 392 37 is_stmt 0 view .LVU452
 1790 0840 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1791              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1792              		.loc 1 392 5 view .LVU453
 1793 0844 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1794 0848 180000DA 		ble	.L100		@,
 1795 084c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1796              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 395:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 396:armwave.c     **** 
 397:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1797              		.loc 1 397 13 view .LVU454
 1798 0850 7C909FE5 		ldr	r9, .L107+20	@ tmp152,
 1799              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1800              		.loc 1 392 12 view .LVU455
 1801 0854 0050A0E3 		mov	r5, #0	@ yy,
 1802              	.LVL124:
 1803              	.L101:
 1804              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1805              		.loc 1 393 9 view .LVU456
 1806 0858 000053E3 		cmp	r3, #0	@ _13,
 1807              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1808              		.loc 1 393 16 view .LVU457
 1809 085c 0040A0C3 		movgt	r4, #0	@ xx,
 1810              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1811              		.loc 1 393 9 view .LVU458
 1812 0860 0F0000DA 		ble	.L103		@,
 1813              	.LVL125:
 1814              	.L102:
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1815              		.loc 1 394 13 is_stmt 1 discriminator 3 view .LVU459
 1816              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1817              		.loc 1 394 29 is_stmt 0 discriminator 3 view .LVU460
 1818 0864 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1819              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1820              		.loc 1 397 13 discriminator 3 view .LVU461
 1821 0868 0910A0E1 		mov	r1, r9	@, tmp152
 1822 086c 0700A0E1 		mov	r0, r7	@, fp
 1823              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1824              		.loc 1 394 18 discriminator 3 view .LVU462
 1825 0870 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1826              	.LVL126:
 1827              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU463
 1828              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1829              		.loc 1 393 58 is_stmt 0 discriminator 3 view .LVU464
 1830 0874 014084E2 		add	r4, r4, #1	@ xx, xx,
 1831              	.LVL127:
 1832              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1833              		.loc 1 397 81 discriminator 3 view .LVU465
 1834 0878 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1835              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1836              		.loc 1 397 61 discriminator 3 view .LVU466
 1837 087c 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1838              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1839              		.loc 1 397 13 discriminator 3 view .LVU467
 1840 0880 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1841 0884 7330EFE6 		uxtb	r3, r3	@, tmp142
 1842 0888 00C08DE5 		str	ip, [sp]	@ tmp147,
 1843 088c 7220EFE6 		uxtb	r2, r2	@, data
 1844              	.LVL128:
 1845              		.loc 1 397 13 discriminator 3 view .LVU468
 1846 0890 FEFFFFEB 		bl	fprintf		@
 1847              	.LVL129:
 1848              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1849              		.loc 1 393 41 discriminator 3 view .LVU469
 1850 0894 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1851              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1852              		.loc 1 393 9 discriminator 3 view .LVU470
 1853 0898 040053E1 		cmp	r3, r4	@ _13, xx
 1854 089c F0FFFFCA 		bgt	.L102		@,
 1855 08a0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1856              	.LVL130:
 1857              	.L103:
 1858              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1859              		.loc 1 392 55 discriminator 2 view .LVU471
 1860 08a4 015085E2 		add	r5, r5, #1	@ yy, yy,
 1861              	.LVL131:
 1862              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1863              		.loc 1 392 5 discriminator 2 view .LVU472
 1864 08a8 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1865 08ac E9FFFFBA 		blt	.L101		@,
 1866              	.LVL132:
 1867              	.L100:
 398:armwave.c     ****         }
 399:armwave.c     ****     }
 400:armwave.c     **** 
 401:armwave.c     ****     fclose(fp);
 1868              		.loc 1 401 5 is_stmt 1 view .LVU473
 1869 08b0 0700A0E1 		mov	r0, r7	@, fp
 1870              	@ armwave.c:402: }
 402:armwave.c     **** }
 1871              		.loc 1 402 1 is_stmt 0 view .LVU474
 1872 08b4 0CD08DE2 		add	sp, sp, #12	@,,
 1873              		.cfi_def_cfa_offset 28
 1874              		@ sp needed	@
 1875 08b8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1876              		.cfi_restore 14
 1877              		.cfi_restore 9
 1878              		.cfi_restore 8
 1879              		.cfi_restore 7
 1880              		.cfi_restore 6
 1881              		.cfi_restore 5
 1882              		.cfi_restore 4
 1883              		.cfi_def_cfa_offset 0
 1884              	.LVL133:
 1885              	@ armwave.c:401:     fclose(fp);
 401:armwave.c     **** }
 1886              		.loc 1 401 5 view .LVU475
 1887 08bc FEFFFFEA 		b	fclose		@
 1888              	.LVL134:
 1889              	.L108:
 401:armwave.c     **** }
 1890              		.loc 1 401 5 view .LVU476
 1891              		.align	2
 1892              	.L107:
 1893 08c0 C4020000 		.word	.LC19
 1894 08c4 00000000 		.word	g_armwave_state
 1895 08c8 C8020000 		.word	.LC20
 1896 08cc CC020000 		.word	.LC21
 1897 08d0 D4020000 		.word	.LC22
 1898 08d4 DC020000 		.word	.LC23
 1899              		.cfi_endproc
 1900              	.LFE68:
 1902              		.align	2
 1903              		.global	armwave_test_init
 1904              		.syntax unified
 1905              		.arm
 1906              		.fpu vfp
 1908              	armwave_test_init:
 1909              	.LVL135:
 1910              	.LFB69:
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Initialise some test functionry.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 408:armwave.c     **** {
 1911              		.loc 1 408 1 is_stmt 1 view -0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     test_create_gamma();
 1915              		.loc 1 409 5 view .LVU478
 1916              	.LBB12:
 1917              	.LBI12:
  34:armwave.c     **** {
 1918              		.loc 1 34 6 view .LVU479
  34:armwave.c     **** {
 1919              		.loc 1 34 6 is_stmt 0 view .LVU480
 1920              	.LBE12:
 1921              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1922              		.loc 1 408 1 view .LVU481
 1923 08d8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1924              		.cfi_def_cfa_offset 32
 1925              		.cfi_offset 4, -32
 1926              		.cfi_offset 5, -28
 1927              		.cfi_offset 6, -24
 1928              		.cfi_offset 7, -20
 1929              		.cfi_offset 8, -16
 1930              		.cfi_offset 9, -12
 1931              		.cfi_offset 10, -8
 1932              		.cfi_offset 14, -4
 1933 08dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 1934              		.cfi_def_cfa_offset 56
 1935              		.cfi_offset 80, -56
 1936              		.cfi_offset 81, -52
 1937              		.cfi_offset 82, -48
 1938              		.cfi_offset 83, -44
 1939              		.cfi_offset 84, -40
 1940              		.cfi_offset 85, -36
 1941 08e0 BC409FE5 		ldr	r4, .L113+20	@ ivtmp.87,
 1942              	.LBB15:
 1943              	.LBB13:
 1944              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1945              		.loc 1 40 32 view .LVU482
 1946 08e4 2DAA9FED 		vldr.32	s20, .L113+16	@ tmp136,
 1947              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1948              		.loc 1 40 26 view .LVU483
 1949 08e8 289B9FED 		vldr.64	d9, .L113	@ tmp151,
 1950              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1951              		.loc 1 40 49 view .LVU484
 1952 08ec 298B9FED 		vldr.64	d8, .L113+8	@ tmp139,
 1953 08f0 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.87,
 1954              	.LBE13:
 1955              	.LBE15:
 1956              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1957              		.loc 1 408 1 view .LVU485
 1958 08f4 10D04DE2 		sub	sp, sp, #16	@,,
 1959              		.cfi_def_cfa_offset 72
 1960              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1961              		.loc 1 408 1 view .LVU486
 1962 08f8 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1963 08fc 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1964 0900 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1965 0904 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1966 0908 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.87,
 1967 090c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1968              	.LVL136:
 1969              	.L110:
 1970              	.LBB16:
 1971              	.LBB14:
  40:armwave.c     ****     }
 1972              		.loc 1 40 9 is_stmt 1 view .LVU487
 1973              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1974              		.loc 1 40 32 is_stmt 0 view .LVU488
 1975 0910 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.87
 1976              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1977              		.loc 1 40 26 view .LVU489
 1978 0914 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1979              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1980              		.loc 1 40 32 view .LVU490
 1981 0918 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1982 091c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1983 0920 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1984              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1985              		.loc 1 40 26 view .LVU491
 1986 0924 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1987 0928 FEFFFFEB 		bl	pow		@
 1988              	.LVL137:
 1989              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1990              		.loc 1 40 49 view .LVU492
 1991 092c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1992              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1993              		.loc 1 40 24 view .LVU493
 1994 0930 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1995 0934 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1996 0938 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1997              	.LVL138:
 1998              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1999              		.loc 1 39 5 view .LVU494
 2000 093c 0A0054E1 		cmp	r4, r10	@ ivtmp.87, _39
 2001 0940 F2FFFF1A 		bne	.L110		@,
 2002              	.LVL139:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2003              		.loc 1 39 5 view .LVU495
 2004              	.LBE14:
 2005              	.LBE16:
 410:armwave.c     **** 
 411:armwave.c     ****     // make ch1 yellowish by default
 412:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2006              		.loc 1 412 5 is_stmt 1 view .LVU496
 2007              	.LBB17:
 2008              	.LBI17:
 365:armwave.c     **** {
 2009              		.loc 1 365 6 view .LVU497
 2010              	.LBB18:
 368:armwave.c     ****         case 1:
 2011              		.loc 1 368 5 view .LVU498
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2012              		.loc 1 370 13 view .LVU499
 371:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2013              		.loc 1 371 13 view .LVU500
 2014              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2015              		.loc 1 370 41 is_stmt 0 view .LVU501
 2016 0944 5CC09FE5 		ldr	ip, .L113+24	@ tmp142,
 2017 0948 5C409FE5 		ldr	r4, .L113+28	@ tmp143,
 2018              	.LBE18:
 2019              	.LBE17:
 2020              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 413:armwave.c     **** 
 414:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2021              		.loc 1 414 5 view .LVU502
 2022 094c 0000A0E3 		mov	r0, #0	@ tmp147,
 2023              	.LBB22:
 2024              	.LBB19:
 2025              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 2026              		.loc 1 372 41 view .LVU503
 2027 0950 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2028              	.LBE19:
 2029              	.LBE22:
 2030              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2031              		.loc 1 414 5 view .LVU504
 2032 0954 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2033 0958 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2034 095c 00808DE5 		str	r8, [sp]	@ render_width,
 2035 0960 0610A0E1 		mov	r1, r6	@, tmp3
 2036 0964 0720A0E1 		mov	r2, r7	@, nwaves
 2037              	.LBB23:
 2038              	.LBB20:
 2039              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2040              		.loc 1 370 41 view .LVU505
 2041 0968 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 372:armwave.c     ****             break;
 2042              		.loc 1 372 13 is_stmt 1 view .LVU506
 2043              	.LBE20:
 2044              	.LBE23:
 2045              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2046              		.loc 1 414 5 is_stmt 0 view .LVU507
 2047 096c 0630A0E1 		mov	r3, r6	@, wave_size
 2048              	.LBB24:
 2049              	.LBB21:
 2050              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 2051              		.loc 1 372 41 view .LVU508
 2052 0970 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 373:armwave.c     ****     }
 2053              		.loc 1 373 13 is_stmt 1 view .LVU509
 2054              	.LVL140:
 373:armwave.c     ****     }
 2055              		.loc 1 373 13 is_stmt 0 view .LVU510
 2056              	.LBE21:
 2057              	.LBE24:
 2058              		.loc 1 414 5 is_stmt 1 view .LVU511
 2059 0974 FEFFFFEB 		bl	armwave_setup_render		@
 2060              	.LVL141:
 415:armwave.c     **** 
 416:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2061              		.loc 1 416 5 view .LVU512
 2062 0978 30109FE5 		ldr	r1, .L113+32	@,
 2063 097c 30009FE5 		ldr	r0, .L113+36	@,
 2064              	@ armwave.c:417: }
 417:armwave.c     **** }
 2065              		.loc 1 417 1 is_stmt 0 view .LVU513
 2066 0980 10D08DE2 		add	sp, sp, #16	@,,
 2067              		.cfi_def_cfa_offset 56
 2068              		@ sp needed	@
 2069 0984 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2070              		.cfi_restore 84
 2071              		.cfi_restore 85
 2072              		.cfi_restore 82
 2073              		.cfi_restore 83
 2074              		.cfi_restore 80
 2075              		.cfi_restore 81
 2076              		.cfi_def_cfa_offset 32
 2077 0988 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2078              		.cfi_restore 14
 2079              		.cfi_restore 10
 2080              		.cfi_restore 9
 2081              		.cfi_restore 8
 2082              		.cfi_restore 7
 2083              		.cfi_restore 6
 2084              		.cfi_restore 5
 2085              		.cfi_restore 4
 2086              		.cfi_def_cfa_offset 0
 2087              	.LVL142:
 2088              	@ armwave.c:416:     printf("armwave version: %s\n", ARMWAVE_VER);
 416:armwave.c     **** }
 2089              		.loc 1 416 5 view .LVU514
 2090 098c FEFFFFEA 		b	printf		@
 2091              	.LVL143:
 2092              	.L114:
 2093              		.align	3
 2094              	.L113:
 2095 0990 000000C0 		.word	-1073741824
 2096 0994 CCCCEC3F 		.word	1072483532
 2097 0998 00000000 		.word	0
 2098 099c 00E06F40 		.word	1081073664
 2099 09a0 00007F43 		.word	1132396544
 2100 09a4 FFFFFFFF 		.word	gamma_table-1
 2101 09a8 00000000 		.word	g_armwave_state
 2102 09ac F609F406 		.word	116656630
 2103 09b0 00000000 		.word	.LC0
 2104 09b4 08000000 		.word	.LC1
 2105              		.cfi_endproc
 2106              	.LFE69:
 2108              		.align	2
 2109              		.global	armwave_test_fill_outbuf
 2110              		.syntax unified
 2111              		.arm
 2112              		.fpu vfp
 2114              	armwave_test_fill_outbuf:
 2115              	.LFB70:
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Render image to the local allocated buffer.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_fill_outbuf()
 423:armwave.c     **** {
 2116              		.loc 1 423 1 is_stmt 1 view -0
 2117              		.cfi_startproc
 2118              		@ args = 0, pretend = 0, frame = 0
 2119              		@ frame_needed = 0, uses_anonymous_args = 0
 2120              		@ link register save eliminated.
 424:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2121              		.loc 1 424 5 view .LVU516
 2122 09b8 04309FE5 		ldr	r3, .L116	@ tmp111,
 2123 09bc 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2124 09c0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2125              	.LVL144:
 2126              	.L117:
 2127              		.align	2
 2128              	.L116:
 2129 09c4 00000000 		.word	g_armwave_state
 2130              		.cfi_endproc
 2131              	.LFE70:
 2133              		.align	2
 2134              		.global	armwave_test_dump_buffer_to_ppm
 2135              		.syntax unified
 2136              		.arm
 2137              		.fpu vfp
 2139              	armwave_test_dump_buffer_to_ppm:
 2140              	.LVL145:
 2141              	.LFB71:
 425:armwave.c     **** }
 426:armwave.c     **** 
 427:armwave.c     **** /*
 428:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 429:armwave.c     ****  */
 430:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 431:armwave.c     **** {
 2142              		.loc 1 431 1 view -0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 0
 2145              		@ frame_needed = 0, uses_anonymous_args = 0
 2146              		@ link register save eliminated.
 432:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2147              		.loc 1 432 5 view .LVU518
 2148 09c8 08309FE5 		ldr	r3, .L119	@ tmp112,
 2149 09cc 0010A0E1 		mov	r1, r0	@, fn
 2150 09d0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2151              	.LVL146:
 2152              		.loc 1 432 5 is_stmt 0 view .LVU519
 2153 09d4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2154              	.LVL147:
 2155              	.L120:
 2156              		.loc 1 432 5 view .LVU520
 2157              		.align	2
 2158              	.L119:
 2159 09d8 00000000 		.word	g_armwave_state
 2160              		.cfi_endproc
 2161              	.LFE71:
 2163              		.align	2
 2164              		.global	armwave_test_fill_gdkbuf
 2165              		.syntax unified
 2166              		.arm
 2167              		.fpu vfp
 2169              	armwave_test_fill_gdkbuf:
 2170              	.LVL148:
 2171              	.LFB72:
 433:armwave.c     **** }
 434:armwave.c     **** 
 435:armwave.c     **** /*
 436:armwave.c     ****  * Render GDK buffer with test funtionry.
 437:armwave.c     ****  */
 438:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 439:armwave.c     **** {
 2172              		.loc 1 439 1 is_stmt 1 view -0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 0
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
 2176              		@ link register save eliminated.
 440:armwave.c     ****     //PyObject *mv;
 441:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 442:armwave.c     **** 
 443:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 444:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2177              		.loc 1 444 5 view .LVU522
 445:armwave.c     ****     
 446:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 447:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2178              		.loc 1 447 5 view .LVU523
 2179              	@ armwave.c:444:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 444:armwave.c     ****     
 2180              		.loc 1 444 11 is_stmt 0 view .LVU524
 2181 09dc 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2182              	@ armwave.c:447:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2183              		.loc 1 447 5 view .LVU525
 2184 09e0 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2185              	.LVL149:
 2186              		.loc 1 447 5 view .LVU526
 2187 09e4 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2188              	.LVL150:
 2189              		.loc 1 447 5 view .LVU527
 2190              		.cfi_endproc
 2191              	.LFE72:
 2193              		.align	2
 2194              		.global	armwave_test_buffer_alloc
 2195              		.syntax unified
 2196              		.arm
 2197              		.fpu vfp
 2199              	armwave_test_buffer_alloc:
 2200              	.LVL151:
 2201              	.LFB73:
 448:armwave.c     **** }
 449:armwave.c     **** 
 450:armwave.c     **** /*
 451:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 452:armwave.c     ****  */
 453:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 454:armwave.c     **** {
 2202              		.loc 1 454 1 is_stmt 1 view -0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 0
 2205              		@ frame_needed = 0, uses_anonymous_args = 0
 455:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2206              		.loc 1 455 5 view .LVU529
 2207              	@ armwave.c:454: {
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2208              		.loc 1 454 1 is_stmt 0 view .LVU530
 2209 09e8 70402DE9 		push	{r4, r5, r6, lr}	@
 2210              		.cfi_def_cfa_offset 16
 2211              		.cfi_offset 4, -16
 2212              		.cfi_offset 5, -12
 2213              		.cfi_offset 6, -8
 2214              		.cfi_offset 14, -4
 2215              	@ armwave.c:454: {
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2216              		.loc 1 454 1 view .LVU531
 2217 09ec 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2218              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 2219              		.loc 1 455 23 view .LVU532
 2220 09f0 44409FE5 		ldr	r4, .L129	@ tmp128,
 2221 09f4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2222              	.LVL152:
 2223              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 2224              		.loc 1 455 7 view .LVU533
 2225 09f8 000050E3 		cmp	r0, #0	@ _1,
 2226 09fc 0000000A 		beq	.L123		@,
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2227              		.loc 1 456 9 is_stmt 1 view .LVU534
 2228 0a00 FEFFFFEB 		bl	free		@
 2229              	.LVL153:
 2230              	.L123:
 457:armwave.c     ****     }
 458:armwave.c     **** 
 459:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 460:armwave.c     **** 
 461:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2231              		.loc 1 461 5 view .LVU535
 2232              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2233              		.loc 1 461 75 is_stmt 0 view .LVU536
 2234 0a04 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2235 0a08 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2236              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2237              		.loc 1 461 40 view .LVU537
 2238 0a0c 0610A0E1 		mov	r1, r6	@, nsets
 2239              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2240              		.loc 1 461 75 view .LVU538
 2241 0a10 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2242              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2243              		.loc 1 461 40 view .LVU539
 2244 0a14 0500A0E1 		mov	r0, r5	@, _4
 2245 0a18 FEFFFFEB 		bl	calloc		@
 2246              	.LVL154:
 2247              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 462:armwave.c     **** 
 463:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2248              		.loc 1 463 7 view .LVU540
 2249 0a1c 000050E3 		cmp	r0, #0	@ tmp124,
 2250              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2251              		.loc 1 461 38 view .LVU541
 2252 0a20 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2253              		.loc 1 463 5 is_stmt 1 view .LVU542
 2254              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 2255              		.loc 1 463 7 is_stmt 0 view .LVU543
 2256 0a24 7080BD18 		popne	{r4, r5, r6, pc}	@
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2257              		.loc 1 464 9 is_stmt 1 view .LVU544
 2258 0a28 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2259 0a2c 0620A0E1 		mov	r2, r6	@, nsets
 2260 0a30 08009FE5 		ldr	r0, .L129+4	@,
 2261              	@ armwave.c:468: }
 465:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 466:armwave.c     ****         return;
 467:armwave.c     ****     }
 468:armwave.c     **** }
 2262              		.loc 1 468 1 is_stmt 0 view .LVU545
 2263 0a34 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2264              		.cfi_restore 14
 2265              		.cfi_restore 6
 2266              		.cfi_restore 5
 2267              		.cfi_restore 4
 2268              		.cfi_def_cfa_offset 0
 2269              	.LVL155:
 2270              	@ armwave.c:464:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2271              		.loc 1 464 9 view .LVU546
 2272 0a38 FEFFFFEA 		b	printf		@
 2273              	.LVL156:
 2274              	.L130:
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2275              		.loc 1 464 9 view .LVU547
 2276              		.align	2
 2277              	.L129:
 2278 0a3c 00000000 		.word	g_armwave_state
 2279 0a40 EC020000 		.word	.LC24
 2280              		.cfi_endproc
 2281              	.LFE73:
 2283              		.align	2
 2284              		.global	armwave_fill_pixbuf_into_pybuffer
 2285              		.syntax unified
 2286              		.arm
 2287              		.fpu vfp
 2289              	armwave_fill_pixbuf_into_pybuffer:
 2290              	.LVL157:
 2291              	.LFB74:
 469:armwave.c     **** 
 470:armwave.c     **** /*
 471:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 472:armwave.c     ****  */
 473:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 474:armwave.c     **** {
 2292              		.loc 1 474 1 is_stmt 1 view -0
 2293              		.cfi_startproc
 2294              		@ args = 0, pretend = 0, frame = 48
 2295              		@ frame_needed = 0, uses_anonymous_args = 0
 475:armwave.c     ****     Py_buffer buffer;
 2296              		.loc 1 475 5 view .LVU549
 476:armwave.c     ****     int ret;
 2297              		.loc 1 476 5 view .LVU550
 477:armwave.c     **** 
 478:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 479:armwave.c     **** 
 480:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2298              		.loc 1 480 5 view .LVU551
 2299              	@ armwave.c:474: {
 474:armwave.c     ****     Py_buffer buffer;
 2300              		.loc 1 474 1 is_stmt 0 view .LVU552
 2301 0a44 04E02DE5 		str	lr, [sp, #-4]!	@,
 2302              		.cfi_def_cfa_offset 4
 2303              		.cfi_offset 14, -4
 2304 0a48 34D04DE2 		sub	sp, sp, #52	@,,
 2305              		.cfi_def_cfa_offset 56
 2306              	@ armwave.c:480:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2307              		.loc 1 480 11 view .LVU553
 2308 0a4c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2309 0a50 0120A0E3 		mov	r2, #1	@,
 2310 0a54 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2311              	.LVL158:
 481:armwave.c     **** 
 482:armwave.c     ****     if(ret != 0) {
 2312              		.loc 1 482 5 is_stmt 1 view .LVU554
 2313              	@ armwave.c:482:     if(ret != 0) {
 2314              		.loc 1 482 7 is_stmt 0 view .LVU555
 2315 0a58 000050E3 		cmp	r0, #0	@,
 2316 0a5c 0A00001A 		bne	.L135		@,
 483:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 484:armwave.c     ****         Py_RETURN_FALSE;
 485:armwave.c     ****     }
 486:armwave.c     **** 
 487:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 488:armwave.c     **** 
 489:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2317              		.loc 1 489 5 is_stmt 1 view .LVU556
 2318 0a60 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2319              	.LVL159:
 2320              		.loc 1 489 5 is_stmt 0 view .LVU557
 2321 0a64 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2322              	.LVL160:
 490:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 491:armwave.c     **** 
 492:armwave.c     ****     PyBuffer_Release(&buffer);
 2323              		.loc 1 492 5 is_stmt 1 view .LVU558
 2324 0a68 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2325 0a6c FEFFFFEB 		bl	PyBuffer_Release		@
 2326              	.LVL161:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     Py_RETURN_TRUE;
 2327              		.loc 1 495 5 view .LVU559
 2328              	.LBB25:
 2329              	.LBI25:
 2330              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2331              		.loc 2 456 20 view .LVU560
 2332              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2333              		.loc 2 458 21 view .LVU561
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2334              		.loc 2 459 5 view .LVU562
 2335              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2336              		.loc 2 459 18 is_stmt 0 view .LVU563
 2337 0a70 38309FE5 		ldr	r3, .L136	@ tmp126,
 2338              	.LBE26:
 2339              	.LBE25:
 2340              	@ armwave.c:495:     Py_RETURN_TRUE;
 2341              		.loc 1 495 5 view .LVU564
 2342 0a74 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2343              	.LBB28:
 2344              	.LBB27:
 2345              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2346              		.loc 2 459 18 view .LVU565
 2347 0a78 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2348 0a7c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2349 0a80 002083E5 		str	r2, [r3]	@ tmp128,
 2350              	.LBE27:
 2351              	.LBE28:
 2352              	@ armwave.c:496: }
 496:armwave.c     **** }
 2353              		.loc 1 496 1 view .LVU566
 2354 0a84 34D08DE2 		add	sp, sp, #52	@,,
 2355              		.cfi_remember_state
 2356              		.cfi_def_cfa_offset 4
 2357              		@ sp needed	@
 2358 0a88 04F09DE4 		ldr	pc, [sp], #4	@
 2359              	.LVL162:
 2360              	.L135:
 2361              		.cfi_restore_state
 483:armwave.c     ****         Py_RETURN_FALSE;
 2362              		.loc 1 483 9 is_stmt 1 view .LVU567
 2363 0a8c 20009FE5 		ldr	r0, .L136+4	@,
 2364              	.LVL163:
 483:armwave.c     ****         Py_RETURN_FALSE;
 2365              		.loc 1 483 9 is_stmt 0 view .LVU568
 2366 0a90 FEFFFFEB 		bl	puts		@
 2367              	.LVL164:
 484:armwave.c     ****     }
 2368              		.loc 1 484 9 is_stmt 1 view .LVU569
 2369              	.LBB29:
 2370              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2371              		.loc 2 456 20 view .LVU570
 2372              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2373              		.loc 2 458 21 view .LVU571
 2374              		.loc 2 459 5 view .LVU572
 2375              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2376              		.loc 2 459 18 is_stmt 0 view .LVU573
 2377 0a94 1C309FE5 		ldr	r3, .L136+8	@ tmp120,
 2378              	.LBE30:
 2379              	.LBE29:
 2380              	@ armwave.c:484:         Py_RETURN_FALSE;
 484:armwave.c     ****     }
 2381              		.loc 1 484 9 view .LVU574
 2382 0a98 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2383              	.LBB32:
 2384              	.LBB31:
 2385              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2386              		.loc 2 459 18 view .LVU575
 2387 0a9c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2388 0aa0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2389 0aa4 002083E5 		str	r2, [r3]	@ tmp122,
 2390              	.LBE31:
 2391              	.LBE32:
 2392              	@ armwave.c:496: }
 2393              		.loc 1 496 1 view .LVU576
 2394 0aa8 34D08DE2 		add	sp, sp, #52	@,,
 2395              		.cfi_def_cfa_offset 4
 2396              		@ sp needed	@
 2397 0aac 04F09DE4 		ldr	pc, [sp], #4	@
 2398              	.L137:
 2399              		.align	2
 2400              	.L136:
 2401 0ab0 00000000 		.word	_Py_TrueStruct
 2402 0ab4 40030000 		.word	.LC25
 2403 0ab8 00000000 		.word	_Py_FalseStruct
 2404              		.cfi_endproc
 2405              	.LFE74:
 2407              		.align	2
 2408              		.global	armwave_test_create_am_sine
 2409              		.syntax unified
 2410              		.arm
 2411              		.fpu vfp
 2413              	armwave_test_create_am_sine:
 2414              	.LVL165:
 2415              	.LFB75:
 497:armwave.c     **** 
 498:armwave.c     **** /*
 499:armwave.c     ****  * Make a test AM waveform for render tests.
 500:armwave.c     ****  *
 501:armwave.c     ****  * @param   mod                     modulation depth
 502:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 503:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 504:armwave.c     ****  */
 505:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 506:armwave.c     **** {
 2416              		.loc 1 506 1 is_stmt 1 view -0
 2417              		.cfi_startproc
 2418              		@ args = 0, pretend = 0, frame = 8
 2419              		@ frame_needed = 0, uses_anonymous_args = 0
 507:armwave.c     ****     float v, noise, xnoise, mod_val;
 2420              		.loc 1 507 5 view .LVU578
 508:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2421              		.loc 1 508 5 view .LVU579
 2422              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2423              		.loc 1 506 1 is_stmt 0 view .LVU580
 2424 0abc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2425              		.cfi_def_cfa_offset 32
 2426              		.cfi_offset 4, -32
 2427              		.cfi_offset 5, -28
 2428              		.cfi_offset 6, -24
 2429              		.cfi_offset 7, -20
 2430              		.cfi_offset 8, -16
 2431              		.cfi_offset 9, -12
 2432              		.cfi_offset 10, -8
 2433              		.cfi_offset 14, -4
 2434              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2435              		.loc 1 508 38 view .LVU581
 2436 0ac0 7A7A9FED 		vldr.32	s14, .L169	@ tmp180,
 2437              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2438              		.loc 1 508 55 view .LVU582
 2439 0ac4 00529FE5 		ldr	r5, .L169+28	@ tmp250,
 2440              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2441              		.loc 1 506 1 view .LVU583
 2442 0ac8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2443              		.cfi_def_cfa_offset 80
 2444              		.cfi_offset 80, -80
 2445              		.cfi_offset 81, -76
 2446              		.cfi_offset 82, -72
 2447              		.cfi_offset 83, -68
 2448              		.cfi_offset 84, -64
 2449              		.cfi_offset 85, -60
 2450              		.cfi_offset 86, -56
 2451              		.cfi_offset 87, -52
 2452              		.cfi_offset 88, -48
 2453              		.cfi_offset 89, -44
 2454              		.cfi_offset 90, -40
 2455              		.cfi_offset 91, -36
 2456 0acc 0090A0E1 		mov	r9, r0	@ sets, sets
 2457              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2458              		.loc 1 508 38 view .LVU584
 2459 0ad0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2460              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 509:armwave.c     ****     int s, set_offset = 0;
 510:armwave.c     ****     int w, x;
 511:armwave.c     **** 
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2461              		.loc 1 512 70 view .LVU585
 2462 0ad4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2463 0ad8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2464              	.LBB35:
 2465              	.LBB36:
 2466              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2467              		.loc 1 455 23 view .LVU586
 2468 0adc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2469              	.LVL166:
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2470              		.loc 1 455 23 view .LVU587
 2471              	.LBE36:
 2472              	.LBE35:
 2473              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2474              		.loc 1 508 38 view .LVU588
 2475 0ae0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2476              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2477              		.loc 1 512 70 view .LVU589
 2478 0ae4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2479              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2480              		.loc 1 506 1 view .LVU590
 2481 0ae8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2482              	.LBB40:
 2483              	.LBB37:
 2484              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2485              		.loc 1 455 7 view .LVU591
 2486 0aec 000050E3 		cmp	r0, #0	@ _82,
 2487              	.LBE37:
 2488              	.LBE40:
 2489              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2490              		.loc 1 506 1 view .LVU592
 2491 0af0 08D04DE2 		sub	sp, sp, #8	@,,
 2492              		.cfi_def_cfa_offset 88
 2493              	@ armwave.c:513:     g_armwave_state.test_wave_buffer_nsets = sets;
 513:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2494              		.loc 1 513 44 view .LVU593
 2495 0af4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2496              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2497              		.loc 1 512 45 view .LVU594
 2498 0af8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2499              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2500              		.loc 1 508 38 view .LVU595
 2501 0afc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2502              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2503              		.loc 1 508 11 view .LVU596
 2504 0b00 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2505              	.LVL167:
 509:armwave.c     ****     int w, x;
 2506              		.loc 1 509 5 is_stmt 1 view .LVU597
 510:armwave.c     **** 
 2507              		.loc 1 510 5 view .LVU598
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2508              		.loc 1 512 5 view .LVU599
 2509              		.loc 1 513 5 view .LVU600
 514:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2510              		.loc 1 514 5 view .LVU601
 2511              	.LBB41:
 2512              	.LBI35:
 453:armwave.c     **** {
 2513              		.loc 1 453 6 view .LVU602
 2514              	.LBB38:
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2515              		.loc 1 455 5 view .LVU603
 2516              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2517              		.loc 1 455 7 is_stmt 0 view .LVU604
 2518 0b04 0000000A 		beq	.L139		@,
 456:armwave.c     ****     }
 2519              		.loc 1 456 9 is_stmt 1 view .LVU605
 2520 0b08 FEFFFFEB 		bl	free		@
 2521              	.LVL168:
 2522              	.L139:
 461:armwave.c     **** 
 2523              		.loc 1 461 5 view .LVU606
 2524              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2525              		.loc 1 461 75 is_stmt 0 view .LVU607
 2526 0b0c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2527 0b10 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2528              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2529              		.loc 1 461 40 view .LVU608
 2530 0b14 0910A0E1 		mov	r1, r9	@, sets
 2531              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2532              		.loc 1 461 75 view .LVU609
 2533 0b18 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2534              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2535              		.loc 1 461 40 view .LVU610
 2536 0b1c 0400A0E1 		mov	r0, r4	@, _85
 2537 0b20 FEFFFFEB 		bl	calloc		@
 2538              	.LVL169:
 2539              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2540              		.loc 1 463 7 view .LVU611
 2541 0b24 000050E3 		cmp	r0, #0	@ tmp191,
 2542              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2543              		.loc 1 461 38 view .LVU612
 2544 0b28 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2545              		.loc 1 463 5 is_stmt 1 view .LVU613
 2546              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2547              		.loc 1 463 7 is_stmt 0 view .LVU614
 2548 0b2c 5A00000A 		beq	.L168		@,
 2549              	.L140:
 2550              	.LVL170:
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2551              		.loc 1 463 7 view .LVU615
 2552              	.LBE38:
 2553              	.LBE41:
 2554              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 515:armwave.c     **** 
 516:armwave.c     ****     for(s = 0; s < sets; s++) {
 2555              		.loc 1 516 5 discriminator 1 view .LVU616
 2556 0b30 000059E3 		cmp	r9, #0	@ sets,
 2557 0b34 550000DA 		ble	.L138		@,
 2558              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 518:armwave.c     ****     
 519:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 521:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 522:armwave.c     **** 
 523:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     **** 
 529:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 530:armwave.c     ****                     noise = -noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 noise += 1.0f;
 533:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 535:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2559              		.loc 1 535 45 view .LVU617
 2560 0b38 5C8A9FED 		vldr.32	s16, .L169	@ tmp258,
 2561              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 537:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 538:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2562              		.loc 1 538 104 view .LVU618
 2563 0b3c 5CCA9FED 		vldr.32	s24, .L169+4	@ tmp259,
 2564              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2565              		.loc 1 516 5 view .LVU619
 2566 0b40 0070A0E3 		mov	r7, #0	@ set_offset,
 2567              	@ armwave.c:517:         printf("Calculating test set %d\n", s);
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2568              		.loc 1 517 9 view .LVU620
 2569 0b44 84A19FE5 		ldr	r10, .L169+32	@ tmp257,
 2570              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2571              		.loc 1 516 5 view .LVU621
 2572 0b48 0780A0E1 		mov	r8, r7	@ s, set_offset
 2573              	.LVL171:
 2574              	.L141:
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2575              		.loc 1 517 9 is_stmt 1 view .LVU622
 2576 0b4c 0810A0E1 		mov	r1, r8	@, s
 2577 0b50 0A00A0E1 		mov	r0, r10	@, tmp257
 2578 0b54 FEFFFFEB 		bl	printf		@
 2579              	.LVL172:
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2580              		.loc 1 519 9 view .LVU623
 2581              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2582              		.loc 1 519 39 is_stmt 0 view .LVU624
 2583 0b58 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2584              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2585              		.loc 1 519 9 view .LVU625
 2586 0b5c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2587 0b60 450000DA 		ble	.L142		@,
 2588              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2589              		.loc 1 521 21 view .LVU626
 2590 0b64 53CADFED 		vldr.32	s25, .L169+8	@ tmp200,
 2591              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2592              		.loc 1 535 33 view .LVU627
 2593 0b68 53BA9FED 		vldr.32	s22, .L169+12	@ tmp253,
 2594              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2595              		.loc 1 533 24 view .LVU628
 2596 0b6c 53AADFED 		vldr.32	s21, .L169+16	@ tmp254,
 2597 0b70 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2598              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2599              		.loc 1 519 15 view .LVU629
 2600 0b74 0060A0E3 		mov	r6, #0	@ w,
 2601              	.LVL173:
 2602              	.L149:
 521:armwave.c     **** 
 2603              		.loc 1 521 13 is_stmt 1 view .LVU630
 2604              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2605              		.loc 1 521 21 is_stmt 0 view .LVU631
 2606 0b78 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2607 0b7c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2608              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2609              		.loc 1 523 13 view .LVU632
 2610 0b80 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2611              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2612              		.loc 1 521 21 view .LVU633
 2613 0b84 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2614 0b88 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2615              	.LVL174:
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2616              		.loc 1 523 13 is_stmt 1 view .LVU634
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2617              		.loc 1 523 13 is_stmt 0 view .LVU635
 2618 0b8c 370000DA 		ble	.L143		@,
 2619 0b90 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2620              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2621              		.loc 1 538 113 view .LVU636
 2622 0b94 4AAA9FED 		vldr.32	s20, .L169+20	@ tmp229,
 2623 0b98 4A8ADFED 		vldr.32	s17, .L169+24	@ tmp230,
 2624              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2625              		.loc 1 523 19 view .LVU637
 2626 0b9c 0040A0E3 		mov	r4, #0	@ x,
 2627              	.LVL175:
 2628              	.L148:
 524:armwave.c     ****                 noise *= noise;
 2629              		.loc 1 524 17 is_stmt 1 view .LVU638
 2630              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2631              		.loc 1 524 28 is_stmt 0 view .LVU639
 2632 0ba0 FEFFFFEB 		bl	rand		@
 2633              	.LVL176:
 2634              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2635              		.loc 1 524 35 view .LVU640
 2636 0ba4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2637              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2638              		.loc 1 524 45 view .LVU641
 2639 0ba8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2640 0bac E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2641              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2642              		.loc 1 524 24 view .LVU642
 2643 0bb0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2644              	.LVL177:
 525:armwave.c     ****                 noise *= noise;
 2645              		.loc 1 525 17 is_stmt 1 view .LVU643
 2646              	@ armwave.c:525:                 noise *= noise;
 525:armwave.c     ****                 noise *= noise;
 2647              		.loc 1 525 23 is_stmt 0 view .LVU644
 2648 0bb4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2649              	.LVL178:
 526:armwave.c     ****                 noise *= noise;
 2650              		.loc 1 526 17 is_stmt 1 view .LVU645
 2651              	@ armwave.c:526:                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 2652              		.loc 1 526 23 is_stmt 0 view .LVU646
 2653 0bb8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2654              	.LVL179:
 527:armwave.c     **** 
 2655              		.loc 1 527 17 is_stmt 1 view .LVU647
 2656              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     **** 
 2657              		.loc 1 527 23 is_stmt 0 view .LVU648
 2658 0bbc A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2659              	.LVL180:
 529:armwave.c     ****                     noise = -noise;
 2660              		.loc 1 529 17 is_stmt 1 view .LVU649
 2661              	@ armwave.c:529:                 if((rand() & 0xffff) > 0x7fff)
 529:armwave.c     ****                     noise = -noise;
 2662              		.loc 1 529 21 is_stmt 0 view .LVU650
 2663 0bc0 FEFFFFEB 		bl	rand		@
 2664              	.LVL181:
 530:armwave.c     **** 
 2665              		.loc 1 530 21 is_stmt 1 view .LVU651
 2666              	@ armwave.c:529:                 if((rand() & 0xffff) > 0x7fff)
 529:armwave.c     ****                     noise = -noise;
 2667              		.loc 1 529 19 is_stmt 0 view .LVU652
 2668 0bc4 020910E3 		tst	r0, #32768	@,
 2669              	@ armwave.c:530:                     noise = -noise;
 530:armwave.c     **** 
 2670              		.loc 1 530 27 view .LVU653
 2671 0bc8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2672              	.LVL182:
 532:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2673              		.loc 1 532 17 is_stmt 1 view .LVU654
 533:armwave.c     **** 
 2674              		.loc 1 533 17 view .LVU655
 2675              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2676              		.loc 1 533 27 is_stmt 0 view .LVU656
 2677 0bcc FEFFFFEB 		bl	rand		@
 2678              	.LVL183:
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2679              		.loc 1 535 17 is_stmt 1 view .LVU657
 2680              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2681              		.loc 1 535 45 is_stmt 0 view .LVU658
 2682 0bd0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2683              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2684              		.loc 1 535 33 view .LVU659
 2685 0bd4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2686              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2687              		.loc 1 535 45 view .LVU660
 2688 0bd8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2689              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2690              		.loc 1 535 33 view .LVU661
 2691 0bdc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2692              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2693              		.loc 1 535 45 view .LVU662
 2694 0be0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2695              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2696              		.loc 1 535 33 view .LVU663
 2697 0be4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2698              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2699              		.loc 1 533 34 view .LVU664
 2700 0be8 7000FFE6 		uxth	r0, r0	@ tmp214,
 2701              	.LVL184:
 2702              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2703              		.loc 1 533 44 view .LVU665
 2704 0bec 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2705 0bf0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2706              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2707              		.loc 1 533 24 view .LVU666
 2708 0bf4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2709              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2710              		.loc 1 535 77 view .LVU667
 2711 0bf8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2712              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2713              		.loc 1 535 22 view .LVU668
 2714 0bfc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2715 0c00 FEFFFFEB 		bl	sin		@
 2716              	.LVL185:
 2717              		.loc 1 538 17 is_stmt 1 view .LVU669
 2718              	@ armwave.c:532:                 noise += 1.0f;
 532:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2719              		.loc 1 532 23 is_stmt 0 view .LVU670
 2720 0c04 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2721              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2722              		.loc 1 538 104 view .LVU671
 2723 0c08 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 2724              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2725              		.loc 1 535 98 view .LVU672
 2726 0c0c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2727              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2728              		.loc 1 535 87 view .LVU673
 2729 0c10 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2730              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2731              		.loc 1 535 98 view .LVU674
 2732 0c14 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2733              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2734              		.loc 1 535 19 view .LVU675
 2735 0c18 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2736              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2737              		.loc 1 538 113 view .LVU676
 2738 0c1c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2739 0c20 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2740 0c24 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2741 0c28 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2742 0c2c 050000DA 		ble	.L145		@,
 2743              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2744              		.loc 1 538 104 discriminator 1 view .LVU677
 2745 0c30 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2746 0c34 FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 2747 0c38 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2748 0c3c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2749 0c40 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2750 0c44 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 2751              	.L145:
 2752              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2753              		.loc 1 538 57 discriminator 12 view .LVU678
 2754 0c48 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2755              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2756              		.loc 1 538 102 discriminator 12 view .LVU679
 2757 0c4c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2758 0c50 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2759 0c54 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2760              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2761              		.loc 1 523 58 discriminator 12 view .LVU680
 2762 0c58 014084E2 		add	r4, r4, #1	@ x, x,
 2763              	.LVL186:
 2764              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2765              		.loc 1 538 102 discriminator 12 view .LVU681
 2766 0c5c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 2767              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2768              		.loc 1 523 43 discriminator 12 view .LVU682
 2769 0c60 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2770              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2771              		.loc 1 523 13 discriminator 12 view .LVU683
 2772 0c64 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2773 0c68 CCFFFFCA 		bgt	.L148		@,
 2774 0c6c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2775              	.LVL187:
 2776              	.L143:
 2777              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2778              		.loc 1 519 48 discriminator 2 view .LVU684
 2779 0c70 016086E2 		add	r6, r6, #1	@ w, w,
 2780              	.LVL188:
 2781              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2782              		.loc 1 519 9 discriminator 2 view .LVU685
 2783 0c74 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2784 0c78 BEFFFFBA 		blt	.L149		@,
 2785              	.LVL189:
 2786              	.L142:
 539:armwave.c     ****             }
 540:armwave.c     ****         }
 541:armwave.c     **** 
 542:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2787              		.loc 1 542 9 is_stmt 1 discriminator 2 view .LVU686
 2788              	@ armwave.c:542:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2789              		.loc 1 542 46 is_stmt 0 discriminator 2 view .LVU687
 2790 0c7c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2791              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2792              		.loc 1 516 27 discriminator 2 view .LVU688
 2793 0c80 018088E2 		add	r8, r8, #1	@ s, s,
 2794              	.LVL190:
 2795              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2796              		.loc 1 516 5 discriminator 2 view .LVU689
 2797 0c84 080059E1 		cmp	r9, r8	@ sets, s
 2798              	@ armwave.c:542:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2799              		.loc 1 542 20 discriminator 2 view .LVU690
 2800 0c88 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2801              	.LVL191:
 2802              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2803              		.loc 1 516 5 discriminator 2 view .LVU691
 2804 0c8c AEFFFF1A 		bne	.L141		@,
 2805              	.LVL192:
 2806              	.L138:
 2807              	@ armwave.c:544: }
 543:armwave.c     ****     }
 544:armwave.c     **** }
 2808              		.loc 1 544 1 view .LVU692
 2809 0c90 08D08DE2 		add	sp, sp, #8	@,,
 2810              		.cfi_remember_state
 2811              		.cfi_def_cfa_offset 80
 2812              		@ sp needed	@
 2813 0c94 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2814              		.cfi_restore 90
 2815              		.cfi_restore 91
 2816              		.cfi_restore 88
 2817              		.cfi_restore 89
 2818              		.cfi_restore 86
 2819              		.cfi_restore 87
 2820              		.cfi_restore 84
 2821              		.cfi_restore 85
 2822              		.cfi_restore 82
 2823              		.cfi_restore 83
 2824              		.cfi_restore 80
 2825              		.cfi_restore 81
 2826              		.cfi_def_cfa_offset 32
 2827              	.LVL193:
 2828              		.loc 1 544 1 view .LVU693
 2829 0c98 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2830              	.LVL194:
 2831              	.L168:
 2832              		.cfi_restore_state
 2833              	.LBB42:
 2834              	.LBB39:
 464:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2835              		.loc 1 464 9 is_stmt 1 view .LVU694
 2836 0c9c 940901E0 		mul	r1, r4, r9	@, _85, sets
 2837 0ca0 0920A0E1 		mov	r2, r9	@, sets
 2838 0ca4 28009FE5 		ldr	r0, .L169+36	@,
 2839 0ca8 FEFFFFEB 		bl	printf		@
 2840              	.LVL195:
 466:armwave.c     ****     }
 2841              		.loc 1 466 9 view .LVU695
 2842 0cac 9FFFFFEA 		b	.L140		@
 2843              	.L170:
 2844              		.align	2
 2845              	.L169:
 2846 0cb0 0000803F 		.word	1065353216
 2847 0cb4 00007F43 		.word	1132396544
 2848 0cb8 0000003F 		.word	1056964608
 2849 0cbc C3F5C840 		.word	1086911939
 2850 0cc0 38FFC74A 		.word	1254620984
 2851 0cc4 0000FE42 		.word	1123942400
 2852 0cc8 00000043 		.word	1124073472
 2853 0ccc 00000000 		.word	g_armwave_state
 2854 0cd0 94030000 		.word	.LC26
 2855 0cd4 EC020000 		.word	.LC24
 2856              	.LBE39:
 2857              	.LBE42:
 2858              		.cfi_endproc
 2859              	.LFE75:
 2861              		.align	2
 2862              		.global	armwave_cleanup
 2863              		.syntax unified
 2864              		.arm
 2865              		.fpu vfp
 2867              	armwave_cleanup:
 2868              	.LFB76:
 545:armwave.c     **** 
 546:armwave.c     **** /*
 547:armwave.c     ****  * Make a test square waveform.
 548:armwave.c     ****  *
 549:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 550:armwave.c     ****  */
 551:armwave.c     **** #if 0
 552:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 553:armwave.c     **** {
 554:armwave.c     ****     uint8_t v;
 555:armwave.c     ****     float noise, xnoise;
 556:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 557:armwave.c     ****     int w, x;
 558:armwave.c     **** 
 559:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 560:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 561:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 562:armwave.c     ****             noise *= noise;
 563:armwave.c     ****             noise *= noise;
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     **** 
 566:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 567:armwave.c     ****                 noise = -noise;
 568:armwave.c     **** 
 569:armwave.c     ****             //noise += 1.0f;
 570:armwave.c     **** 
 571:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 572:armwave.c     ****                 new_level = 0.2f;
 573:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 574:armwave.c     ****                 new_level = 0.8f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 576:armwave.c     ****                 new_level = 0.2f;
 577:armwave.c     ****             } else {
 578:armwave.c     ****                 new_level = 0.8f;
 579:armwave.c     ****             }
 580:armwave.c     **** 
 581:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 582:armwave.c     **** 
 583:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 584:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 585:armwave.c     ****         }
 586:armwave.c     ****     }
 587:armwave.c     **** }
 588:armwave.c     **** #endif
 589:armwave.c     **** 
 590:armwave.c     **** /*
 591:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 592:armwave.c     ****  */
 593:armwave.c     **** void armwave_cleanup()
 594:armwave.c     **** {
 2869              		.loc 1 594 1 view -0
 2870              		.cfi_startproc
 2871              		@ args = 0, pretend = 0, frame = 0
 2872              		@ frame_needed = 0, uses_anonymous_args = 0
 595:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2873              		.loc 1 595 5 view .LVU697
 2874              	@ armwave.c:594: {
 594:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2875              		.loc 1 594 1 is_stmt 0 view .LVU698
 2876 0cd8 10402DE9 		push	{r4, lr}	@
 2877              		.cfi_def_cfa_offset 8
 2878              		.cfi_offset 4, -8
 2879              		.cfi_offset 14, -4
 2880              	@ armwave.c:595:     free(g_armwave_state.out_pixbuf);
 2881              		.loc 1 595 25 view .LVU699
 2882 0cdc 34409FE5 		ldr	r4, .L173	@ tmp114,
 2883              	@ armwave.c:595:     free(g_armwave_state.out_pixbuf);
 2884              		.loc 1 595 5 view .LVU700
 2885 0ce0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2886 0ce4 FEFFFFEB 		bl	free		@
 2887              	.LVL196:
 596:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2888              		.loc 1 596 5 is_stmt 1 view .LVU701
 2889 0ce8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2890 0cec FEFFFFEB 		bl	free		@
 2891              	.LVL197:
 597:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2892              		.loc 1 597 5 view .LVU702
 2893 0cf0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2894 0cf4 FEFFFFEB 		bl	free		@
 2895              	.LVL198:
 598:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2896              		.loc 1 598 5 view .LVU703
 2897 0cf8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2898 0cfc FEFFFFEB 		bl	free		@
 2899              	.LVL199:
 599:armwave.c     **** 
 600:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2900              		.loc 1 600 5 view .LVU704
 2901              	@ armwave.c:600:     g_armwave_state.out_pixbuf = NULL;
 2902              		.loc 1 600 32 is_stmt 0 view .LVU705
 2903 0d00 0030A0E3 		mov	r3, #0	@ tmp123,
 2904 0d04 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 601:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2905              		.loc 1 601 5 is_stmt 1 view .LVU706
 2906              	@ armwave.c:601:     g_armwave_state.ch1_buffer = NULL;
 2907              		.loc 1 601 32 is_stmt 0 view .LVU707
 2908 0d08 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 602:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2909              		.loc 1 602 5 is_stmt 1 view .LVU708
 2910              	@ armwave.c:602:     g_armwave_state.xcoord_to_xpixel = NULL;
 2911              		.loc 1 602 38 is_stmt 0 view .LVU709
 2912 0d0c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 603:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2913              		.loc 1 603 5 is_stmt 1 view .LVU710
 2914              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = NULL;
 2915              		.loc 1 603 38 is_stmt 0 view .LVU711
 2916 0d10 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2917              	@ armwave.c:604: }
 604:armwave.c     **** }
 2918              		.loc 1 604 1 view .LVU712
 2919 0d14 1080BDE8 		pop	{r4, pc}	@
 2920              	.L174:
 2921              		.align	2
 2922              	.L173:
 2923 0d18 00000000 		.word	g_armwave_state
 2924              		.cfi_endproc
 2925              	.LFE76:
 2927              		.comm	gamma_table,256,4
 2928              		.comm	g_armwave_state,136,4
 2929              		.section	.rodata
 2930              		.align	2
 2931              		.set	.LANCHOR0,. + 0
 2934              	__PRETTY_FUNCTION__.17125:
 2935 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2935      6176655F 
 2935      73657475 
 2935      705F7265 
 2935      6E646572 
 2936 0015 000000   		.space	3
 2939              	__PRETTY_FUNCTION__.17129:
 2940 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2940      6176655F 
 2940      7365745F 
 2940      77617665 
 2940      5F706F69 
 2941 0031 000000   		.space	3
 2944              	__PRETTY_FUNCTION__.17136:
 2945 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2945      6176655F 
 2945      7365745F 
 2945      77617665 
 2945      5F706F69 
 2946              		.section	.rodata.str1.4,"aMS",%progbits,1
 2947              		.align	2
 2948              	.LC0:
 2949 0000 76302E30 		.ascii	"v0.0.1\000"
 2949      2E3100
 2950 0007 00       		.space	1
 2951              	.LC1:
 2952 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2952      61766520 
 2952      76657273 
 2952      696F6E3A 
 2952      2025730A 
 2953 001d 000000   		.space	3
 2954              	.LC2:
 2955 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2955      78253038 
 2955      7820623D 
 2955      30782530 
 2955      38782063 
 2956 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2956      25642073 
 2956      63616C65 
 2956      3D256420 
 2956      62697464 
 2957 0077 00       		.space	1
 2958              	.LC3:
 2959 0078 77625F65 		.ascii	"wb_end=%d\012\000"
 2959      6E643D25 
 2959      640A00
 2960 0083 00       		.space	1
 2961              	.LC4:
 2962 0084 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 2962      75742062 
 2962      75666665 
 2962      723A2030 
 2962      78253038 
 2963 009b 00       		.space	1
 2964              	.LC5:
 2965 009c 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 2965      65742025 
 2965      64206279 
 2965      7465732C 
 2965      206E7069 
 2966 00cf 30782530 		.ascii	"0x%08x, stack ~0x%08x\012\000"
 2966      38782C20 
 2966      73746163 
 2966      6B207E30 
 2966      78253038 
 2967 00e6 0000     		.space	2
 2968              	.LC6:
 2969 00e8 69746572 		.ascii	"iter...\000"
 2969      2E2E2E00 
 2970              	.LC7:
 2971 00f0 25640A00 		.ascii	"%d\012\000"
 2972              	.LC8:
 2973 00f4 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 2973      6F6E6520 
 2973      7061696E 
 2973      74202564 
 2973      20706978 
 2974              	.LC9:
 2975 0110 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2975      6176655F 
 2975      67656E65 
 2975      72617465 
 2975      3A20736C 
 2976 0141 00       		.ascii	"\000"
 2977 0142 0000     		.space	2
 2978              	.LC10:
 2979 0144 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2979      20653D25 
 2979      6420773D 
 2979      25642077 
 2979      733D2564 
 2980              	.LC11:
 2981 0170 61726D77 		.ascii	"armwave.c\000"
 2981      6176652E 
 2981      6300
 2982 017a 0000     		.space	2
 2983              	.LC12:
 2984 017c 73746172 		.ascii	"start_point < end_point\000"
 2984      745F706F 
 2984      696E7420 
 2984      3C20656E 
 2984      645F706F 
 2985              	.LC13:
 2986 0194 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2986      7566665F 
 2986      73697A65 
 2986      3D25642C 
 2986      20636D70 
 2987 01c7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2987      5F776964 
 2987      74683D25 
 2987      642C2077 
 2987      6176655F 
 2988 01f1 000000   		.space	3
 2989              	.LC14:
 2990 01f4 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2990      6F632066 
 2990      61696C75 
 2990      72652061 
 2990      6C6C6F63 
 2991 0227 2E636831 		.ascii	".ch1_buffer)\012\000"
 2991      5F627566 
 2991      66657229 
 2991      0A00
 2992 0235 000000   		.space	3
 2993              	.LC15:
 2994 0238 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2994      3A203078 
 2994      25303878 
 2994      20307825 
 2994      30387820 
 2995              	.LC16:
 2996 025c 77617665 		.ascii	"wave_buffer != NULL\000"
 2996      5F627566 
 2996      66657220 
 2996      213D204E 
 2996      554C4C00 
 2997              	.LC17:
 2998 0270 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2998      6176655F 
 2998      7365745F 
 2998      77617665 
 2998      5F706F69 
 2999 02a3 78636565 		.ascii	"xceeded\000"
 2999      64656400 
 3000 02ab 00       		.space	1
 3001              	.LC18:
 3002 02ac 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3002      5F627566 
 3002      6665725F 
 3002      70747220 
 3002      213D2030 
 3003 02c1 000000   		.space	3
 3004              	.LC19:
 3005 02c4 776200   		.ascii	"wb\000"
 3006 02c7 00       		.space	1
 3007              	.LC20:
 3008 02c8 50330A00 		.ascii	"P3\012\000"
 3009              	.LC21:
 3010 02cc 25642025 		.ascii	"%d %d\012\000"
 3010      640A00
 3011 02d3 00       		.space	1
 3012              	.LC22:
 3013 02d4 3235350A 		.ascii	"255\012\000"
 3013      00
 3014 02d9 000000   		.space	3
 3015              	.LC23:
 3016 02dc 25336420 		.ascii	"%3d %3d %3d\012\000"
 3016      25336420 
 3016      2533640A 
 3016      00
 3017 02e9 000000   		.space	3
 3018              	.LC24:
 3019 02ec 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3019      6176655F 
 3019      74657374 
 3019      5F627566 
 3019      6665725F 
 3020 031f 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3020      20627566 
 3020      66657220 
 3020      28256420 
 3020      62797465 
 3021              	.LC25:
 3022 0340 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3022      6176655F 
 3022      66696C6C 
 3022      5F706978 
 3022      6275665F 
 3023 0373 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3023      20666169 
 3023      6C65642C 
 3023      20726574 
 3023      75726E69 
 3024 0392 0000     		.space	2
 3025              	.LC26:
 3026 0394 43616C63 		.ascii	"Calculating test set %d\012\000"
 3026      756C6174 
 3026      696E6720 
 3026      74657374 
 3026      20736574 
 3027              		.text
 3028              	.Letext0:
 3029              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3030              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3031              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3032              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3033              		.file 7 "/usr/include/stdio.h"
 3034              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3035              		.file 9 "/usr/include/errno.h"
 3036              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3037              		.file 11 "/usr/include/unistd.h"
 3038              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3039              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3040              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3041              		.file 15 "/usr/include/math.h"
 3042              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3043              		.file 17 "/usr/include/time.h"
 3044              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3045              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3046              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3047              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3048              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3049              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3050              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3051              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3052              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3053              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3054              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3055              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3056              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3057              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3058              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3059              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3060              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3061              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3062              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3063              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3064              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3065              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3066              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3067              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3068              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3069              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3070              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3071              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3072              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3073              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3074              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3075              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3076              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3077              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3078              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3079              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3080              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3081              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3082              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3083              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3084              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3085              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3086              		.file 60 "/usr/local/include/python3.8/context.h"
 3087              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3088              		.file 62 "/usr/local/include/python3.8/code.h"
 3089              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3090              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3091              		.file 65 "/usr/local/include/python3.8/import.h"
 3092              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3093              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3094              		.file 68 "/usr/include/malloc.h"
 3095              		.file 69 "armwave.h"
 3096              		.file 70 "/usr/include/stdlib.h"
 3097              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3098              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3099              		.file 73 "<built-in>"
 3100              		.file 74 "/usr/include/assert.h"
