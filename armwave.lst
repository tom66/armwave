   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C0C19FE5 		ldr	ip, .L27	@ tmp318,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 130 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp216, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp218, tmp216,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 130 view .LVU41
 279 00c8 950305E0 		mul	r5, r5, r3	@ _7, g_armwave_state.bitdepth_height, tmp218
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 610000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 5F00000A 		beq	.L11		@,
 289 00dc 043040E2 		sub	r3, r0, #4	@ tmp317, slice_y,
 290 00e0 0C308DE5 		str	r3, [sp, #12]	@ tmp317, %sfp
 291              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 292              		.loc 1 79 11 view .LVU45
 293 00e4 0030A0E3 		mov	r3, #0	@ w,
 294 00e8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 295              	.LVL8:
 296              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 297              		.loc 1 80 9 is_stmt 1 view .LVU46
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 298              		.loc 1 84 9 view .LVU47
 299              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 64 is_stmt 0 view .LVU48
 301 00ec 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 302 00f0 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 303 00f4 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp317, %sfp
 304 00f8 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 305 00fc 93E223E0 		mla	r3, r3, r2, lr	@ tmp228, g_armwave_state.wave_stride, w, tmp317
 306              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 84 16 view .LVU49
 308 0100 0000A0E3 		mov	r0, #0	@ yy,
 309 0104 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 310 0108 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 311              	.LVL9:
 312              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 313              		.loc 1 87 13 is_stmt 1 view .LVU50
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 314              		.loc 1 101 17 view .LVU51
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 315              		.loc 1 106 17 view .LVU52
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 316              		.loc 1 101 17 view .LVU53
 317              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 318              		.loc 1 101 17 view .LVU55
 319              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 320              		.loc 1 101 17 view .LVU57
 321              		.loc 1 106 17 view .LVU58
 322              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 323              		.loc 1 87 18 is_stmt 0 view .LVU59
 324 010c 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 325              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 326              		.loc 1 102 34 view .LVU60
 327 0110 019080E2 		add	r9, r0, #1	@ tmp259, yy,
 328 0114 028080E2 		add	r8, r0, #2	@ tmp281, yy,
 329              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 330              		.loc 1 87 18 view .LVU61
 331 0118 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _185, offset: 0B]
 332              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 102 34 view .LVU62
 334 011c 037080E2 		add	r7, r0, #3	@ tmp301, yy,
 335              	.LVL10:
 336              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 337              		.loc 1 94 20 view .LVU63
 338 0120 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 339              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 340              		.loc 1 87 18 view .LVU64
 341 0124 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 342              	.LVL11:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 343              		.loc 1 89 13 is_stmt 1 view .LVU65
  91:armwave.c     ****                 
 344              		.loc 1 91 17 view .LVU66
  94:armwave.c     ****                     continue;
 345              		.loc 1 94 17 view .LVU67
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 is_stmt 0 view .LVU68
 348 0128 0120A003 		moveq	r2, #1	@ tmp231,
 349 012c 0020A013 		movne	r2, #0	@ tmp231,
 350              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 351              		.loc 1 94 19 view .LVU69
 352 0130 FF005AE3 		cmp	r10, #255	@ scale_value,
 353 0134 01208203 		orreq	r2, r2, #1	@,, tmp236, tmp231
 354 0138 000052E3 		cmp	r2, #0	@ tmp236,
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU70
 357 013c 05B08AE0 		add	fp, r10, r5	@ tmp244, scale_value, _7
 358              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 359              		.loc 1 107 22 view .LVU71
 360 0140 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 361 0144 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 362              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 363              		.loc 1 94 19 view .LVU72
 364 0148 3900001A 		bne	.L20		@,
 365              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 366              		.loc 1 102 34 view .LVU73
 367 014c 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 369              		.loc 1 106 47 view .LVU74
 370 0150 40609CE5 		ldr	r6, [ip, #64]	@ tmp330, g_armwave_state.bitdepth_height
 371              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 372              		.loc 1 94 20 view .LVU75
 373 0154 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 374              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 375              		.loc 1 102 34 view .LVU76
 376 0158 920002E0 		mul	r2, r2, r0	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 377              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 378              		.loc 1 106 47 view .LVU77
 379 015c 05A084E0 		add	r10, r4, r5	@ tmp266, scale_value, _7
 380              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 381              		.loc 1 102 74 view .LVU78
 382 0160 2228A0E1 		lsr	r2, r2, #16	@ tmp240, tmp238,
 383              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 384              		.loc 1 106 47 view .LVU79
 385 0164 96B222E0 		mla	r2, r6, r2, fp	@ tmp245, tmp330, tmp240, tmp244
 386              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 387              		.loc 1 94 20 view .LVU80
 388 0168 01B0A003 		moveq	fp, #1	@ tmp252,
 389 016c 00B0A013 		movne	fp, #0	@ tmp252,
 390              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 391              		.loc 1 94 19 view .LVU81
 392 0170 FF0054E3 		cmp	r4, #255	@ scale_value,
 393 0174 0B40A011 		movne	r4, fp	@, tmp257, tmp252
 394 0178 01408B03 		orreq	r4, fp, #1	@,, tmp257, tmp252
 395              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 396              		.loc 1 106 47 view .LVU82
 397 017c 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_79, *_79
 398              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 399              		.loc 1 94 19 view .LVU83
 400 0180 000054E3 		cmp	r4, #0	@ tmp257,
 401              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 402              		.loc 1 106 47 view .LVU84
 403 0184 01B08BE2 		add	fp, fp, #1	@ tmp248, *_79,
 404 0188 02B0C1E7 		strb	fp, [r1, r2]	@ tmp248, *_79
 405              	.LVL12:
 406              		.loc 1 107 17 is_stmt 1 view .LVU85
  91:armwave.c     ****                 
 407              		.loc 1 91 17 view .LVU86
  94:armwave.c     ****                     continue;
 408              		.loc 1 94 17 view .LVU87
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 is_stmt 0 view .LVU88
 411 018c 2800001A 		bne	.L20		@,
 412              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 413              		.loc 1 102 34 view .LVU89
 414 0190 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 99 view .LVU90
 417 0194 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 418              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 419              		.loc 1 94 20 view .LVU91
 420 0198 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 421              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 422              		.loc 1 102 34 view .LVU92
 423 019c 920909E0 		mul	r9, r2, r9	@ tmp260, g_armwave_state.cmp_x_bitdepth_scale, tmp259
 424              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 425              		.loc 1 94 20 view .LVU93
 426 01a0 0120A003 		moveq	r2, #1	@ tmp274,
 427 01a4 0020A013 		movne	r2, #0	@ tmp274,
 428              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 429              		.loc 1 102 74 view .LVU94
 430 01a8 2998A0E1 		lsr	r9, r9, #16	@ tmp262, tmp260,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU95
 433 01ac 05408EE0 		add	r4, lr, r5	@ tmp288, scale_value, _7
 434 01b0 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp267, g_armwave_state.bitdepth_height, tmp262, tmp266
 435              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 19 view .LVU96
 437 01b4 FF005EE3 		cmp	lr, #255	@ scale_value,
 438 01b8 02E0A011 		movne	lr, r2	@, tmp279, tmp274
 439 01bc 01E08203 		orreq	lr, r2, #1	@,, tmp279, tmp274
 440 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 441              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 442              		.loc 1 106 47 view .LVU97
 443 01c4 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_110, *_110
 444 01c8 012082E2 		add	r2, r2, #1	@ tmp270, *_110,
 445 01cc 0A20C1E7 		strb	r2, [r1, r10]	@ tmp270, *_110
 446              		.loc 1 107 17 is_stmt 1 view .LVU98
 447              	.LVL13:
  91:armwave.c     ****                 
 448              		.loc 1 91 17 view .LVU99
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 17 view .LVU100
 450              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 451              		.loc 1 94 19 is_stmt 0 view .LVU101
 452 01d0 1700001A 		bne	.L20		@,
 453              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 454              		.loc 1 102 34 view .LVU102
 455 01d4 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 456              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 20 view .LVU103
 458 01d8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 459              	.LVL14:
 460              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 461              		.loc 1 106 47 view .LVU104
 462 01dc 032085E0 		add	r2, r5, r3	@ tmp309, _7, word
 463              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 464              		.loc 1 102 34 view .LVU105
 465 01e0 9E0808E0 		mul	r8, lr, r8	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 99 view .LVU106
 468 01e4 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 74 view .LVU107
 471 01e8 2888A0E1 		lsr	r8, r8, #16	@ tmp284, tmp282,
 472              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 473              		.loc 1 106 47 view .LVU108
 474 01ec 9E4828E0 		mla	r8, lr, r8, r4	@ tmp289, g_armwave_state.bitdepth_height, tmp284, tmp288
 475              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 476              		.loc 1 94 20 view .LVU109
 477 01f0 01E0A003 		moveq	lr, #1	@ tmp295,
 478 01f4 00E0A013 		movne	lr, #0	@ tmp295,
 479              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 480              		.loc 1 94 19 view .LVU110
 481 01f8 FF0053E3 		cmp	r3, #255	@ word,
 482 01fc 01E08E03 		orreq	lr, lr, #1	@,, tmp300, tmp295
 483              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 484              		.loc 1 106 47 view .LVU111
 485 0200 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_141, *_141
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 19 view .LVU112
 488 0204 00005EE3 		cmp	lr, #0	@ tmp300,
 489              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 490              		.loc 1 106 47 view .LVU113
 491 0208 013083E2 		add	r3, r3, #1	@ tmp292, *_141,
 492 020c 0830C1E7 		strb	r3, [r1, r8]	@ tmp292, *_141
 493              		.loc 1 107 17 is_stmt 1 view .LVU114
 494              	.LVL15:
  91:armwave.c     ****                 
 495              		.loc 1 91 17 view .LVU115
  94:armwave.c     ****                     continue;
 496              		.loc 1 94 17 view .LVU116
 497              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 498              		.loc 1 94 19 is_stmt 0 view .LVU117
 499 0210 0700001A 		bne	.L20		@,
 500              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 501              		.loc 1 102 34 view .LVU118
 502 0214 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 99 view .LVU119
 505 0218 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 34 view .LVU120
 508 021c 930707E0 		mul	r7, r3, r7	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 74 view .LVU121
 511 0220 2778A0E1 		lsr	r7, r7, #16	@ tmp305, tmp303,
 512              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 513              		.loc 1 106 47 view .LVU122
 514 0224 9E2727E0 		mla	r7, lr, r7, r2	@ tmp310, g_armwave_state.bitdepth_height, tmp305, tmp309
 515 0228 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_172, *_172
 516 022c 013083E2 		add	r3, r3, #1	@ tmp313, *_172,
 517 0230 0730C1E7 		strb	r3, [r1, r7]	@ tmp313, *_172
 518              		.loc 1 107 17 is_stmt 1 view .LVU123
 519              	.LVL16:
 520              	.L20:
 521              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 522              		.loc 1 84 9 is_stmt 0 view .LVU124
 523 0234 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 37 view .LVU125
 526 0238 040080E2 		add	r0, r0, #4	@ yy, yy,
 527              	.LVL17:
 528              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 529              		.loc 1 84 9 view .LVU126
 530 023c 000053E1 		cmp	r3, r0	@ height, yy
 531 0240 B1FFFF8A 		bhi	.L17		@,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 44 view .LVU127
 534 0244 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 5 view .LVU128
 537 0248 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU129
 540 024c 012082E2 		add	r2, r2, #1	@ w, w,
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 5 view .LVU130
 543 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 44 view .LVU131
 546 0254 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 547              	.LVL18:
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 view .LVU132
 550 0258 A3FFFFBA 		blt	.L18		@,
 551              	.LVL19:
 552              	.L11:
 553              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 554              		.loc 1 111 1 view .LVU133
 555 025c 14D08DE2 		add	sp, sp, #20	@,,
 556              		.cfi_def_cfa_offset 36
 557              		@ sp needed	@
 558 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 559              	.LVL20:
 560              	.L28:
 561              		.loc 1 111 1 view .LVU134
 562              		.align	2
 563              	.L27:
 564 0264 00000000 		.word	g_armwave_state
 565              		.cfi_endproc
 566              	.LFE59:
 568              		.align	2
 569              		.global	armwave_fill_pixbuf_scaled
 570              		.syntax unified
 571              		.arm
 572              		.fpu vfp
 574              	armwave_fill_pixbuf_scaled:
 575              	.LVL21:
 576              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 577              		.loc 1 173 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 581              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 582              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 583              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 584              		.loc 1 179 5 view .LVU139
 585              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 586              		.loc 1 173 1 is_stmt 0 view .LVU140
 587 0268 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 588              		.cfi_def_cfa_offset 36
 589              		.cfi_offset 4, -36
 590              		.cfi_offset 5, -32
 591              		.cfi_offset 6, -28
 592              		.cfi_offset 7, -24
 593              		.cfi_offset 8, -20
 594              		.cfi_offset 9, -16
 595              		.cfi_offset 10, -12
 596              		.cfi_offset 11, -8
 597              		.cfi_offset 14, -4
 598              	@ armwave.c:183:     assert(out_buffer != NULL);
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 181:armwave.c     ****     uint32_t offset;
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 599              		.loc 1 183 5 view .LVU141
 600 026c 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 601              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 602              		.loc 1 179 15 view .LVU142
 603 0270 5C519FE5 		ldr	r5, .L51	@ tmp218,
 604              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 605              		.loc 1 173 1 view .LVU143
 606 0274 0CD04DE2 		sub	sp, sp, #12	@,,
 607              		.cfi_def_cfa_offset 48
 608              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 609              		.loc 1 179 15 view .LVU144
 610 0278 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 611              	.LVL22:
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 612              		.loc 1 180 5 is_stmt 1 view .LVU145
 181:armwave.c     **** 
 613              		.loc 1 181 5 view .LVU146
 614              		.loc 1 183 5 view .LVU147
 615 027c 4F00000A 		beq	.L48		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 616              		.loc 1 186 5 view .LVU148
 617              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 618              		.loc 1 186 59 is_stmt 0 view .LVU149
 619 0280 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 620 0284 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 621              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 622              		.loc 1 186 5 view .LVU150
 623 0288 0010A0E3 		mov	r1, #0	@,
 624              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 625              		.loc 1 186 59 view .LVU151
 626 028c 920302E0 		mul	r2, r2, r3	@ tmp179, g_armwave_state.target_height, g_armwave_state.target_width
 627              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 628              		.loc 1 186 5 view .LVU152
 629 0290 0221A0E1 		lsl	r2, r2, #2	@, tmp179,
 630 0294 FEFFFFEB 		bl	memset		@
 631              	.LVL23:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 632              		.loc 1 188 5 is_stmt 1 view .LVU153
 633              	@ armwave.c:188:     npix = g_armwave_state.target_width * 256; 
 634              		.loc 1 188 10 is_stmt 0 view .LVU154
 635 0298 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 636 029c 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 637              	.LVL24:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 638              		.loc 1 191 5 is_stmt 1 view .LVU155
 639              		.loc 1 191 5 is_stmt 0 view .LVU156
 640 02a0 000058E3 		cmp	r8, #0	@ npix,
 641 02a4 0C0000DA 		ble	.L29		@,
 642              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 193:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 194:armwave.c     ****         // most normal waveforms.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 4; w++) {
 199:armwave.c     ****                 value = wave_word & 0xff;
 200:armwave.c     ****                 wave_word >>= 8;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 643              		.loc 1 204 52 view .LVU157
 644 02a8 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 645              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 646              		.loc 1 203 52 view .LVU158
 647 02ac FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 648              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // Do line scaling as necessary.
 215:armwave.c     ****                     /*
 216:armwave.c     ****                     nsub = n + w;
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 220:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 223:armwave.c     ****                     */
 224:armwave.c     **** 
 225:armwave.c     ****                     nsub = n + w;
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 649              		.loc 1 226 57 view .LVU159
 650 02b0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 651              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 652              		.loc 1 204 52 view .LVU160
 653 02b4 00308DE5 		str	r3, [sp]	@ _15, %sfp
 654              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 655              		.loc 1 205 52 view .LVU161
 656 02b8 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 657              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 658              		.loc 1 191 11 view .LVU162
 659 02bc 0010A0E3 		mov	r1, #0	@ n,
 660              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 661              		.loc 1 205 52 view .LVU163
 662 02c0 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 663              	.LVL25:
 664              	.L36:
 195:armwave.c     **** 
 665              		.loc 1 195 9 is_stmt 1 view .LVU164
 666              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 667              		.loc 1 195 19 is_stmt 0 view .LVU165
 668 02c4 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 669              	.LVL26:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 670              		.loc 1 197 9 is_stmt 1 view .LVU166
 671              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 672              		.loc 1 197 11 is_stmt 0 view .LVU167
 673 02c8 000053E3 		cmp	r3, #0	@ wave_word,
 674 02cc 0400001A 		bne	.L49		@,
 675              	.L32:
 676              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 677              		.loc 1 191 28 view .LVU168
 678 02d0 041081E2 		add	r1, r1, #4	@ n, n,
 679              	.LVL27:
 680              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 681              		.loc 1 191 5 view .LVU169
 682 02d4 010058E1 		cmp	r8, r1	@ npix, n
 683 02d8 F9FFFFCA 		bgt	.L36		@,
 684              	.LVL28:
 685              	.L29:
 686              	@ armwave.c:238: }
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 229:armwave.c     **** 
 230:armwave.c     ****                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 234:armwave.c     ****                 }
 235:armwave.c     ****             }
 236:armwave.c     ****         }
 237:armwave.c     ****     }
 238:armwave.c     **** }
 687              		.loc 1 238 1 view .LVU170
 688 02dc 0CD08DE2 		add	sp, sp, #12	@,,
 689              		.cfi_remember_state
 690              		.cfi_def_cfa_offset 36
 691              		@ sp needed	@
 692 02e0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 693              	.LVL29:
 694              	.L49:
 695              		.cfi_restore_state
 696              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 202 19 view .LVU171
 698 02e4 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 699              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 700              		.loc 1 198 19 view .LVU172
 701 02e8 0070A0E3 		mov	r7, #0	@ w,
 702              	.LVL30:
 199:armwave.c     ****                 wave_word >>= 8;
 703              		.loc 1 199 17 is_stmt 1 view .LVU173
 200:armwave.c     **** 
 704              		.loc 1 200 17 view .LVU174
 705              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 706              		.loc 1 200 27 is_stmt 0 view .LVU175
 707 02ec 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 708              	.LVL31:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 709              		.loc 1 202 17 is_stmt 1 view .LVU176
 710              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 711              		.loc 1 202 19 is_stmt 0 view .LVU177
 712 02f0 0500001A 		bne	.L50		@,
 713              	.L33:
 714              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 715              		.loc 1 198 32 view .LVU178
 716 02f4 017087E2 		add	r7, r7, #1	@ w, w,
 717              	.LVL32:
 718              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 719              		.loc 1 198 13 view .LVU179
 720 02f8 040057E3 		cmp	r7, #4	@ w,
 721 02fc F3FFFF0A 		beq	.L32		@,
 199:armwave.c     ****                 wave_word >>= 8;
 722              		.loc 1 199 17 is_stmt 1 view .LVU180
 723              	.LVL33:
 200:armwave.c     **** 
 724              		.loc 1 200 17 view .LVU181
 725              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 726              		.loc 1 202 19 is_stmt 0 view .LVU182
 727 0300 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 728              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 729              		.loc 1 200 27 view .LVU183
 730 0304 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 731              	.LVL34:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 732              		.loc 1 202 17 is_stmt 1 view .LVU184
 733              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 734              		.loc 1 202 19 is_stmt 0 view .LVU185
 735 0308 F9FFFF0A 		beq	.L33		@,
 736              	.L50:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 737              		.loc 1 203 21 is_stmt 1 view .LVU186
 738              	.LVL35:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 739              		.loc 1 204 21 view .LVU187
 205:armwave.c     **** 
 740              		.loc 1 205 21 view .LVU188
 207:armwave.c     ****                     g = MIN(gg, 255);
 741              		.loc 1 207 21 view .LVU189
 208:armwave.c     ****                     b = MIN(bb, 255);
 742              		.loc 1 208 21 view .LVU190
 209:armwave.c     **** 
 743              		.loc 1 209 21 view .LVU191
 212:armwave.c     **** 
 744              		.loc 1 212 21 view .LVU192
 745              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 746              		.loc 1 205 55 is_stmt 0 view .LVU193
 747 030c 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 748 0310 07E081E0 		add	lr, r1, r7	@ _126, n, w
 749 0314 90020AE0 		mul	r10, r0, r2	@ tmp196, _18, _12
 750              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 751              		.loc 1 226 32 view .LVU194
 752 0318 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 753              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 754              		.loc 1 227 41 view .LVU195
 755 031c 01C080E2 		add	ip, r0, #1	@ tmp211, _30,
 756              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 757              		.loc 1 226 40 view .LVU196
 758 0320 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 759              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 760              		.loc 1 227 41 view .LVU197
 761 0324 10CA07EE 		vmov	s14, ip	@ int	@ tmp211, tmp211
 762              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 763              		.loc 1 204 55 view .LVU198
 764 0328 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 765              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 766              		.loc 1 205 24 view .LVU199
 767 032c 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp196,
 768              	.LVL36:
 769              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 770              		.loc 1 226 40 view .LVU200
 771 0330 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp209, _30
 772              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 773              		.loc 1 227 46 view .LVU201
 774 0334 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp212, tmp211
 775              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 776              		.loc 1 204 55 view .LVU202
 777 0338 90020CE0 		mul	ip, r0, r2	@ tmp200, _15, _12
 778              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 779              		.loc 1 203 55 view .LVU203
 780 033c 920B02E0 		mul	r2, r2, fp	@ tmp206, _12, _11
 781              	.LVL37:
 782              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 783              		.loc 1 209 25 view .LVU204
 784 0340 FF005AE3 		cmp	r10, #255	@ bb,
 785              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 786              		.loc 1 204 24 view .LVU205
 787 0344 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp200,
 788              	.LVL38:
 789              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 790              		.loc 1 226 40 view .LVU206
 791 0348 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp210, tmp209, _32
 792              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 793              		.loc 1 227 46 view .LVU207
 794 034c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp213, tmp212, _32
 795              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 796              		.loc 1 203 24 view .LVU208
 797 0350 4204A0E1 		asr	r0, r2, #8	@ rr, tmp206,
 798              	.LVL39:
 799              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 800              		.loc 1 209 25 view .LVU209
 801 0354 FFA0A0A3 		movge	r10, #255	@ bb,
 802              	.LVL40:
 803              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 804              		.loc 1 208 25 view .LVU210
 805 0358 FF005CE3 		cmp	ip, #255	@ gg,
 806 035c FFC0A0A3 		movge	ip, #255	@ gg,
 807              	.LVL41:
 808              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 809              		.loc 1 207 25 view .LVU211
 810 0360 FF0050E3 		cmp	r0, #255	@ rr,
 811              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 812              		.loc 1 212 56 view .LVU212
 813 0364 0CC4A0E1 		lsl	ip, ip, #8	@ tmp201, gg,
 814              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 815              		.loc 1 226 24 view .LVU213
 816 0368 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp210
 817              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 207 25 view .LVU214
 819 036c FF00A0A3 		movge	r0, #255	@ rr,
 820              	.LVL42:
 821              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 822              		.loc 1 212 44 view .LVU215
 823 0370 0AA8A0E1 		lsl	r10, r10, #16	@ tmp197, bb,
 824 0374 FFA80AE2 		and	r10, r10, #16711680	@ tmp198, tmp197,
 825              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 826              		.loc 1 212 56 view .LVU216
 827 0378 7CC0FFE6 		uxth	ip, ip	@ tmp202, tmp201
 828              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 829              		.loc 1 212 51 view .LVU217
 830 037c 0CC08AE1 		orr	ip, r10, ip	@ tmp204, tmp198, tmp202
 831              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 832              		.loc 1 212 62 view .LVU218
 833 0380 7000EFE6 		uxtb	r0, r0	@ rr, rr
 834 0384 00008CE1 		orr	r0, ip, r0	@ tmp208, tmp204, rr
 835              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 836              		.loc 1 226 24 view .LVU219
 837 0388 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 838              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 839              		.loc 1 227 24 view .LVU220
 840 038c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp213
 841              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 842              		.loc 1 212 26 view .LVU221
 843 0390 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp208,
 844              	.LVL43:
 225:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 845              		.loc 1 225 21 is_stmt 1 view .LVU222
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 846              		.loc 1 226 21 view .LVU223
 227:armwave.c     ****                     xx = (nsub >> 8);
 847              		.loc 1 227 21 view .LVU224
 848              	@ armwave.c:228:                     xx = (nsub >> 8);
 228:armwave.c     **** 
 849              		.loc 1 228 32 is_stmt 0 view .LVU225
 850 0394 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 851              	.LVL44:
 852              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 853              		.loc 1 227 24 view .LVU226
 854 0398 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 855              	.LVL45:
 228:armwave.c     **** 
 856              		.loc 1 228 21 is_stmt 1 view .LVU227
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 857              		.loc 1 230 21 view .LVU228
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 858              		.loc 1 230 21 is_stmt 0 view .LVU229
 859 039c 090052E1 		cmp	r2, r9	@ yy, ye
 860 03a0 D3FFFF2A 		bcs	.L33		@,
 861              	.LVL46:
 862              	.L34:
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 863              		.loc 1 231 25 is_stmt 1 discriminator 3 view .LVU230
 232:armwave.c     ****                     }
 864              		.loc 1 232 25 discriminator 3 view .LVU231
 865              	@ armwave.c:231:                         offset = (xx + (y * g_armwave_state.target_width)); 
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 866              		.loc 1 231 43 is_stmt 0 discriminator 3 view .LVU232
 867 03a4 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 868              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 869              		.loc 1 232 43 discriminator 3 view .LVU233
 870 03a8 90E220E0 		mla	r0, r0, r2, lr	@ tmp217, g_armwave_state.target_width, yy, xx
 871              	.LVL47:
 872              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 230 42 discriminator 3 view .LVU234
 874 03ac 012082E2 		add	r2, r2, #1	@ yy, yy,
 875              	.LVL48:
 876              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 877              		.loc 1 230 21 discriminator 3 view .LVU235
 878 03b0 020059E1 		cmp	r9, r2	@ ye, yy
 879              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 880              		.loc 1 232 53 discriminator 3 view .LVU236
 881 03b4 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 882              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 883              		.loc 1 230 21 discriminator 3 view .LVU237
 884 03b8 F9FFFF1A 		bne	.L34		@,
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 885              		.loc 1 230 21 discriminator 3 view .LVU238
 886 03bc CCFFFFEA 		b	.L33		@
 887              	.LVL49:
 888              	.L48:
 183:armwave.c     **** 
 889              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU239
 890 03c0 10309FE5 		ldr	r3, .L51+4	@,
 891 03c4 B720A0E3 		mov	r2, #183	@,
 892 03c8 0C109FE5 		ldr	r1, .L51+8	@,
 893 03cc 0C009FE5 		ldr	r0, .L51+12	@,
 894              	.LVL50:
 183:armwave.c     **** 
 895              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU240
 896 03d0 FEFFFFEB 		bl	__assert_fail		@
 897              	.LVL51:
 898              	.L52:
 899              		.align	2
 900              	.L51:
 901 03d4 00000000 		.word	g_armwave_state
 902 03d8 00000000 		.word	.LANCHOR0
 903 03dc 20000000 		.word	.LC2
 904 03e0 2C000000 		.word	.LC3
 905              		.cfi_endproc
 906              	.LFE60:
 908              		.global	__aeabi_idiv
 909              		.align	2
 910              		.global	armwave_generate
 911              		.syntax unified
 912              		.arm
 913              		.fpu vfp
 915              	armwave_generate:
 916              	.LFB61:
 239:armwave.c     **** 
 240:armwave.c     **** /*
 241:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 242:armwave.c     ****  */
 243:armwave.c     **** void armwave_generate()
 244:armwave.c     **** {
 917              		.loc 1 244 1 is_stmt 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 16
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 245:armwave.c     ****     uint32_t yy;
 921              		.loc 1 245 5 view .LVU242
 246:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 922              		.loc 1 246 5 view .LVU243
 923              	.LVL52:
 247:armwave.c     **** 
 248:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 924              		.loc 1 248 5 view .LVU244
 925              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 926              		.loc 1 244 1 is_stmt 0 view .LVU245
 927 03e4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 928              		.cfi_def_cfa_offset 36
 929              		.cfi_offset 4, -36
 930              		.cfi_offset 5, -32
 931              		.cfi_offset 6, -28
 932              		.cfi_offset 7, -24
 933              		.cfi_offset 8, -20
 934              		.cfi_offset 9, -16
 935              		.cfi_offset 10, -12
 936              		.cfi_offset 11, -8
 937              		.cfi_offset 14, -4
 938              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 939              		.loc 1 248 5 view .LVU246
 940 03e8 0010A0E3 		mov	r1, #0	@,
 941              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 942              		.loc 1 248 58 view .LVU247
 943 03ec 10829FE5 		ldr	r8, .L72	@ tmp340,
 944              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 945              		.loc 1 244 1 view .LVU248
 946 03f0 14D04DE2 		sub	sp, sp, #20	@,,
 947              		.cfi_def_cfa_offset 56
 948              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 949              		.loc 1 248 5 view .LVU249
 950 03f4 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 951 03f8 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 952 03fc FEFFFFEB 		bl	memset		@
 953              	.LVL53:
 249:armwave.c     **** 
 250:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 954              		.loc 1 250 5 is_stmt 1 view .LVU250
 955              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 956              		.loc 1 250 68 is_stmt 0 view .LVU251
 957 0400 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 958              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 959              		.loc 1 250 38 view .LVU252
 960 0404 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 961              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 962              		.loc 1 250 51 view .LVU253
 963 0408 0310A0E1 		mov	r1, r3	@, _34
 964 040c 0500A0E1 		mov	r0, r5	@, prephitmp_217
 965              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 966              		.loc 1 250 68 view .LVU254
 967 0410 00308DE5 		str	r3, [sp]	@ _34, %sfp
 968              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 969              		.loc 1 250 51 view .LVU255
 970 0414 FEFFFFEB 		bl	__aeabi_idiv		@
 971              	.LVL54:
 972              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 973              		.loc 1 250 5 view .LVU256
 974 0418 000050E3 		cmp	r0, #0	@,
 975 041c 7600000A 		beq	.L53		@,
 976 0420 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 977              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 978              		.loc 1 250 12 view .LVU257
 979 0424 0030A0E3 		mov	r3, #0	@ yy,
 980 0428 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 981              	.LVL55:
 982              	.L62:
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 253:armwave.c     **** 
 254:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 983              		.loc 1 254 9 is_stmt 1 discriminator 3 view .LVU258
 984 042c D020CDE1 		ldrd	r2, [sp]	@, %sfp
 985              	.LBB10:
 986              	.LBB11:
 987              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 988              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU259
 989 0430 40C098E5 		ldr	ip, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 990              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 991              		.loc 1 79 5 discriminator 3 view .LVU260
 992 0434 000054E3 		cmp	r4, #0	@ prephitmp_227,
 993              	.LBE11:
 994              	.LBE10:
 995              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 996              		.loc 1 254 9 discriminator 3 view .LVU261
 997 0438 930202E0 		mul	r2, r3, r2	@ _5, yy, _34
 998              	.LVL56:
 999              	.LBB13:
 1000              	.LBI10:
  62:armwave.c     **** {
 1001              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU262
 1002              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1003              		.loc 1 64 5 discriminator 3 view .LVU263
  65:armwave.c     ****     uint8_t *wave_base;
 1004              		.loc 1 65 5 discriminator 3 view .LVU264
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1005              		.loc 1 66 5 discriminator 3 view .LVU265
  67:armwave.c     ****     uint8_t *write_buffer;
 1006              		.loc 1 67 5 discriminator 3 view .LVU266
  68:armwave.c     **** 
 1007              		.loc 1 68 5 discriminator 3 view .LVU267
  71:armwave.c     **** 
 1008              		.loc 1 71 5 discriminator 3 view .LVU268
 1009              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1010              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU269
 1011 043c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1012              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1013              		.loc 1 71 40 discriminator 3 view .LVU270
 1014 0440 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1015              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1016              		.loc 1 71 65 discriminator 3 view .LVU271
 1017 0444 930203E0 		mul	r3, r3, r2	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, _5
 1018              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1019              		.loc 1 71 105 discriminator 3 view .LVU272
 1020 0448 2338A0E1 		lsr	r3, r3, #16	@ tmp240, tmp238,
 1021              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1022              		.loc 1 71 130 discriminator 3 view .LVU273
 1023 044c 9C030CE0 		mul	ip, ip, r3	@ _22, g_armwave_state.bitdepth_height, tmp240
 1024              	.LVL57:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1025              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU274
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1026              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU275
 1027 0450 610000DA 		ble	.L55		@,
 1028              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1029              		.loc 1 79 11 view .LVU276
 1030 0454 0070A0E3 		mov	r7, #0	@ w,
 1031 0458 043042E2 		sub	r3, r2, #4	@ _31, _5,
 1032 045c 08308DE5 		str	r3, [sp, #8]	@ _31, %sfp
 1033              	.LVL58:
 1034              	.L61:
  80:armwave.c     **** 
 1035              		.loc 1 80 9 is_stmt 1 view .LVU277
 1036              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1037              		.loc 1 84 9 is_stmt 0 view .LVU278
 1038 0460 00209DE5 		ldr	r2, [sp]	@ _34, %sfp
 1039              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1040              		.loc 1 80 64 view .LVU279
 1041 0464 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1042              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1043              		.loc 1 84 9 view .LVU280
 1044 0468 000052E3 		cmp	r2, #0	@ _34,
 1045              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1046              		.loc 1 80 36 view .LVU281
 1047 046c 142098E5 		ldr	r2, [r8, #20]	@ _23, g_armwave_state.wave_buffer
 1048              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1049              		.loc 1 80 64 view .LVU282
 1050 0470 930703E0 		mul	r3, r3, r7	@ _27, g_armwave_state.wave_stride, w
 1051              	.LVL59:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1052              		.loc 1 84 9 is_stmt 1 view .LVU283
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1053              		.loc 1 84 9 is_stmt 0 view .LVU284
 1054 0474 5200000A 		beq	.L56		@,
 1055 0478 08009DE5 		ldr	r0, [sp, #8]	@ _31, %sfp
 1056 047c 003083E0 		add	r3, r3, r0	@ tmp246, _27, _31
 1057              	.LVL60:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1058              		.loc 1 84 9 view .LVU285
 1059 0480 036082E0 		add	r6, r2, r3	@ ivtmp.66, _23, tmp246
 1060              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1061              		.loc 1 84 16 view .LVU286
 1062 0484 0000A0E3 		mov	r0, #0	@ yy,
 1063              	.LVL61:
 1064              	.L60:
  87:armwave.c     **** 
 1065              		.loc 1 87 13 is_stmt 1 view .LVU287
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1066              		.loc 1 101 17 view .LVU288
 106:armwave.c     ****                 word >>= 8;
 1067              		.loc 1 106 17 view .LVU289
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1068              		.loc 1 101 17 view .LVU290
 106:armwave.c     ****                 word >>= 8;
 1069              		.loc 1 106 17 view .LVU291
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1070              		.loc 1 101 17 view .LVU292
 106:armwave.c     ****                 word >>= 8;
 1071              		.loc 1 106 17 view .LVU293
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1072              		.loc 1 101 17 view .LVU294
 106:armwave.c     ****                 word >>= 8;
 1073              		.loc 1 106 17 view .LVU295
 1074              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1075              		.loc 1 87 18 is_stmt 0 view .LVU296
 1076 0488 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _260, offset: 0B]
 1077              	.LVL62:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1078              		.loc 1 89 13 is_stmt 1 view .LVU297
  91:armwave.c     ****                 
 1079              		.loc 1 91 17 view .LVU298
  94:armwave.c     ****                     continue;
 1080              		.loc 1 94 17 view .LVU299
 1081              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1082              		.loc 1 102 34 is_stmt 0 view .LVU300
 1083 048c 01A080E2 		add	r10, r0, #1	@ tmp276, yy,
 1084              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1085              		.loc 1 94 20 view .LVU301
 1086 0490 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1087 0494 0120A003 		moveq	r2, #1	@ tmp248,
 1088 0498 0020A013 		movne	r2, #0	@ tmp248,
 1089              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1090              		.loc 1 94 19 view .LVU302
 1091 049c FF0059E3 		cmp	r9, #255	@ scale_value,
 1092 04a0 01208203 		orreq	r2, r2, #1	@,, tmp253, tmp248
 1093              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1094              		.loc 1 107 22 view .LVU303
 1095 04a4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1096              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1097              		.loc 1 94 19 view .LVU304
 1098 04a8 000052E3 		cmp	r2, #0	@ tmp253,
 1099              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1100              		.loc 1 102 34 view .LVU305
 1101 04ac 025080E2 		add	r5, r0, #2	@ tmp298, yy,
 1102              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1103              		.loc 1 106 47 view .LVU306
 1104 04b0 0CB089E0 		add	fp, r9, ip	@ tmp261, scale_value, _22
 1105              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1106              		.loc 1 107 22 view .LVU307
 1107 04b4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1108 04b8 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1109              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1110              		.loc 1 94 19 view .LVU308
 1111 04bc 3B00001A 		bne	.L64		@,
 1112              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1113              		.loc 1 102 34 view .LVU309
 1114 04c0 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU310
 1117 04c4 40E098E5 		ldr	lr, [r8, #64]	@ tmp360, g_armwave_state.bitdepth_height
 1118              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1119              		.loc 1 94 20 view .LVU311
 1120 04c8 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1121              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1122              		.loc 1 102 34 view .LVU312
 1123 04cc 920002E0 		mul	r2, r2, r0	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, yy
 1124              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1125              		.loc 1 106 47 view .LVU313
 1126 04d0 0C9084E0 		add	r9, r4, ip	@ tmp283, scale_value, _22
 1127              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1128              		.loc 1 102 74 view .LVU314
 1129 04d4 2228A0E1 		lsr	r2, r2, #16	@ tmp257, tmp255,
 1130              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1131              		.loc 1 106 47 view .LVU315
 1132 04d8 9EB222E0 		mla	r2, lr, r2, fp	@ tmp262, tmp360, tmp257, tmp261
 1133              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1134              		.loc 1 94 20 view .LVU316
 1135 04dc 01B0A003 		moveq	fp, #1	@ tmp269,
 1136 04e0 00B0A013 		movne	fp, #0	@ tmp269,
 1137              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1138              		.loc 1 94 19 view .LVU317
 1139 04e4 FF0054E3 		cmp	r4, #255	@ scale_value,
 1140 04e8 0B40A011 		movne	r4, fp	@, tmp274, tmp269
 1141 04ec 01408B03 		orreq	r4, fp, #1	@,, tmp274, tmp269
 1142              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1143              		.loc 1 106 47 view .LVU318
 1144 04f0 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_90, *_90
 1145              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1146              		.loc 1 94 19 view .LVU319
 1147 04f4 000054E3 		cmp	r4, #0	@ tmp274,
 1148              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1149              		.loc 1 106 47 view .LVU320
 1150 04f8 01B08BE2 		add	fp, fp, #1	@ tmp265, *_90,
 1151 04fc 02B0C1E7 		strb	fp, [r1, r2]	@ tmp265, *_90
 1152              	.LVL63:
 107:armwave.c     ****             }
 1153              		.loc 1 107 17 is_stmt 1 view .LVU321
  91:armwave.c     ****                 
 1154              		.loc 1 91 17 view .LVU322
  94:armwave.c     ****                     continue;
 1155              		.loc 1 94 17 view .LVU323
 1156              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1157              		.loc 1 94 19 is_stmt 0 view .LVU324
 1158 0500 2A00001A 		bne	.L64		@,
 1159              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1160              		.loc 1 102 34 view .LVU325
 1161 0504 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1162              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1163              		.loc 1 102 99 view .LVU326
 1164 0508 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1165              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1166              		.loc 1 94 20 view .LVU327
 1167 050c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1168              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1169              		.loc 1 102 34 view .LVU328
 1170 0510 920A0AE0 		mul	r10, r2, r10	@ tmp277, g_armwave_state.cmp_x_bitdepth_scale, tmp276
 1171              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1172              		.loc 1 94 20 view .LVU329
 1173 0514 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1174 0518 0120A003 		moveq	r2, #1	@ tmp291,
 1175              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1176              		.loc 1 102 74 view .LVU330
 1177 051c 2AA8A0E1 		lsr	r10, r10, #16	@ tmp279, tmp277,
 1178              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1179              		.loc 1 94 20 view .LVU331
 1180 0520 0020A013 		movne	r2, #0	@ tmp291,
 1181              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1182              		.loc 1 106 47 view .LVU332
 1183 0524 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp284, g_armwave_state.bitdepth_height, tmp279, tmp283
 1184 0528 0C408EE0 		add	r4, lr, ip	@ tmp305, scale_value, _22
 1185              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1186              		.loc 1 94 19 view .LVU333
 1187 052c FF005EE3 		cmp	lr, #255	@ scale_value,
 1188 0530 02E0A011 		movne	lr, r2	@, tmp296, tmp291
 1189 0534 01E08203 		orreq	lr, r2, #1	@,, tmp296, tmp291
 1190              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1191              		.loc 1 106 47 view .LVU334
 1192 0538 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_121, *_121
 1193              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1194              		.loc 1 94 19 view .LVU335
 1195 053c 00005EE3 		cmp	lr, #0	@ tmp296,
 1196              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1197              		.loc 1 106 47 view .LVU336
 1198 0540 012082E2 		add	r2, r2, #1	@ tmp287, *_121,
 1199 0544 0920C1E7 		strb	r2, [r1, r9]	@ tmp287, *_121
 107:armwave.c     ****             }
 1200              		.loc 1 107 17 is_stmt 1 view .LVU337
 1201              	.LVL64:
  91:armwave.c     ****                 
 1202              		.loc 1 91 17 view .LVU338
  94:armwave.c     ****                     continue;
 1203              		.loc 1 94 17 view .LVU339
 1204              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1205              		.loc 1 94 19 is_stmt 0 view .LVU340
 1206 0548 1800001A 		bne	.L64		@,
 1207              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1208              		.loc 1 102 34 view .LVU341
 1209 054c 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1210              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1211              		.loc 1 94 20 view .LVU342
 1212 0550 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1213              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1214              		.loc 1 106 47 view .LVU343
 1215 0554 03208CE0 		add	r2, ip, r3	@ tmp326, _22, word
 1216              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1217              		.loc 1 102 34 view .LVU344
 1218 0558 9E0505E0 		mul	r5, lr, r5	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 1219              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1220              		.loc 1 102 99 view .LVU345
 1221 055c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1222              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1223              		.loc 1 102 74 view .LVU346
 1224 0560 2558A0E1 		lsr	r5, r5, #16	@ tmp301, tmp299,
 1225              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1226              		.loc 1 106 47 view .LVU347
 1227 0564 9E4525E0 		mla	r5, lr, r5, r4	@ tmp306, g_armwave_state.bitdepth_height, tmp301, tmp305
 1228              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1229              		.loc 1 94 20 view .LVU348
 1230 0568 01E0A003 		moveq	lr, #1	@ tmp312,
 1231 056c 00E0A013 		movne	lr, #0	@ tmp312,
 1232              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1233              		.loc 1 94 19 view .LVU349
 1234 0570 FF0053E3 		cmp	r3, #255	@ word,
 1235 0574 01E08E03 		orreq	lr, lr, #1	@,, tmp317, tmp312
 1236              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1237              		.loc 1 106 47 view .LVU350
 1238 0578 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_152, *_152
 1239              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1240              		.loc 1 94 19 view .LVU351
 1241 057c 00005EE3 		cmp	lr, #0	@ tmp317,
 1242              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1243              		.loc 1 106 47 view .LVU352
 1244 0580 013083E2 		add	r3, r3, #1	@ tmp309, *_152,
 1245 0584 0530C1E7 		strb	r3, [r1, r5]	@ tmp309, *_152
 107:armwave.c     ****             }
 1246              		.loc 1 107 17 is_stmt 1 view .LVU353
 1247              	.LVL65:
  91:armwave.c     ****                 
 1248              		.loc 1 91 17 view .LVU354
  94:armwave.c     ****                     continue;
 1249              		.loc 1 94 17 view .LVU355
 1250              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1251              		.loc 1 94 19 is_stmt 0 view .LVU356
 1252 0588 0800001A 		bne	.L64		@,
 1253              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1254              		.loc 1 102 34 view .LVU357
 1255 058c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1256 0590 034080E2 		add	r4, r0, #3	@ tmp319, yy,
 1257              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1258              		.loc 1 102 99 view .LVU358
 1259 0594 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1260              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1261              		.loc 1 102 34 view .LVU359
 1262 0598 930403E0 		mul	r3, r3, r4	@ tmp320, g_armwave_state.cmp_x_bitdepth_scale, tmp319
 1263              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1264              		.loc 1 102 74 view .LVU360
 1265 059c 2338A0E1 		lsr	r3, r3, #16	@ tmp322, tmp320,
 1266              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1267              		.loc 1 106 47 view .LVU361
 1268 05a0 9E2323E0 		mla	r3, lr, r3, r2	@ tmp327, g_armwave_state.bitdepth_height, tmp322, tmp326
 1269 05a4 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_183, *_183
 1270 05a8 012082E2 		add	r2, r2, #1	@ tmp330, *_183,
 1271 05ac 0320C1E7 		strb	r2, [r1, r3]	@ tmp330, *_183
 107:armwave.c     ****             }
 1272              		.loc 1 107 17 is_stmt 1 view .LVU362
 1273              	.LVL66:
 1274              	.L64:
 1275              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1276              		.loc 1 84 9 is_stmt 0 view .LVU363
 1277 05b0 00309DE5 		ldr	r3, [sp]	@ _34, %sfp
 1278              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1279              		.loc 1 84 37 view .LVU364
 1280 05b4 040080E2 		add	r0, r0, #4	@ yy, yy,
 1281              	.LVL67:
 1282              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1283              		.loc 1 84 9 view .LVU365
 1284 05b8 000053E1 		cmp	r3, r0	@ _34, yy
 1285 05bc B1FFFF8A 		bhi	.L60		@,
 1286 05c0 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 1287              	.LVL68:
 1288              	.L56:
 1289              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1290              		.loc 1 79 44 view .LVU366
 1291 05c4 017087E2 		add	r7, r7, #1	@ w, w,
 1292              	.LVL69:
 1293              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1294              		.loc 1 79 5 view .LVU367
 1295 05c8 040057E1 		cmp	r7, r4	@ w, prephitmp_227
 1296 05cc A3FFFFBA 		blt	.L61		@,
 1297 05d0 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 1298 05d4 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 1299 05d8 00308DE5 		str	r3, [sp]	@ _34, %sfp
 1300              	.LVL70:
 1301              	.L55:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1302              		.loc 1 79 5 view .LVU368
 1303              	.LBE12:
 1304              	.LBE13:
 255:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1305              		.loc 1 255 9 is_stmt 1 discriminator 3 view .LVU369
 256:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1306              		.loc 1 256 9 discriminator 3 view .LVU370
 1307              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1308              		.loc 1 250 51 is_stmt 0 discriminator 3 view .LVU371
 1309 05dc 00109DE5 		ldr	r1, [sp]	@, %sfp
 1310              	.LVL71:
 250:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1311              		.loc 1 250 51 discriminator 3 view .LVU372
 1312 05e0 0500A0E1 		mov	r0, r5	@, prephitmp_217
 1313 05e4 FEFFFFEB 		bl	__aeabi_idiv		@
 1314              	.LVL72:
 1315              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1316              		.loc 1 250 86 discriminator 3 view .LVU373
 1317 05e8 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1318 05ec 013083E2 		add	r3, r3, #1	@ yy, yy,
 1319 05f0 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1320              	.LVL73:
 1321              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1322              		.loc 1 250 5 discriminator 3 view .LVU374
 1323 05f4 030050E1 		cmp	r0, r3	@, yy
 1324 05f8 8BFFFF8A 		bhi	.L62		@,
 1325              	.LVL74:
 1326              	.L53:
 1327              	@ armwave.c:260: }
 257:armwave.c     ****     }
 258:armwave.c     **** 
 259:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 260:armwave.c     **** }
 1328              		.loc 1 260 1 view .LVU375
 1329 05fc 14D08DE2 		add	sp, sp, #20	@,,
 1330              		.cfi_def_cfa_offset 36
 1331              		@ sp needed	@
 1332 0600 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1333              	.L73:
 1334              		.align	2
 1335              	.L72:
 1336 0604 00000000 		.word	g_armwave_state
 1337              		.cfi_endproc
 1338              	.LFE61:
 1340              		.align	2
 1341              		.global	armwave_setup_render
 1342              		.syntax unified
 1343              		.arm
 1344              		.fpu vfp
 1346              	armwave_setup_render:
 1347              	.LVL75:
 1348              	.LFB62:
 261:armwave.c     **** 
 262:armwave.c     **** /*
 263:armwave.c     ****  * Setup the renderer with passed parameters.
 264:armwave.c     ****  */
 265:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 266:armwave.c     **** {
 1349              		.loc 1 266 1 is_stmt 1 view -0
 1350              		.cfi_startproc
 1351              		@ args = 12, pretend = 0, frame = 0
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 267:armwave.c     ****     uint32_t length, xx;
 1353              		.loc 1 267 5 view .LVU377
 268:armwave.c     ****     float points_per_pixel;
 1354              		.loc 1 268 5 view .LVU378
 269:armwave.c     **** 
 270:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1355              		.loc 1 270 5 view .LVU379
 1356              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 1357              		.loc 1 266 1 is_stmt 0 view .LVU380
 1358 0608 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1359              		.cfi_def_cfa_offset 28
 1360              		.cfi_offset 4, -28
 1361              		.cfi_offset 5, -24
 1362              		.cfi_offset 6, -20
 1363              		.cfi_offset 7, -16
 1364              		.cfi_offset 8, -12
 1365              		.cfi_offset 9, -8
 1366              		.cfi_offset 14, -4
 1367 060c 028B2DED 		vpush.64	{d8}	@
 1368              		.cfi_def_cfa_offset 36
 1369              		.cfi_offset 80, -36
 1370              		.cfi_offset 81, -32
 1371 0610 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1372 0614 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1373 0618 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1374 061c 14D04DE2 		sub	sp, sp, #20	@,,
 1375              		.cfi_def_cfa_offset 56
 1376              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 1377              		.loc 1 266 1 view .LVU381
 1378 0620 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1379 0624 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1380 0628 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1381              	@ armwave.c:270:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1382              		.loc 1 270 5 view .LVU382
 1383 062c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1384 0630 F460CDE1 		strd	r6, [sp, #4]	@,,
 1385 0634 0230A0E1 		mov	r3, r2	@, waves_max
 1386              	.LVL76:
 1387              		.loc 1 270 5 view .LVU383
 1388 0638 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1389 063c 0120A0E1 		mov	r2, r1	@, end_point
 1390              	.LVL77:
 1391              		.loc 1 270 5 view .LVU384
 1392 0640 0010A0E1 		mov	r1, r0	@, start_point
 1393              	.LVL78:
 1394              		.loc 1 270 5 view .LVU385
 1395 0644 DC019FE5 		ldr	r0, .L88+12	@,
 1396              	.LVL79:
 1397              		.loc 1 270 5 view .LVU386
 1398 0648 FEFFFFEB 		bl	printf		@
 1399              	.LVL80:
 271:armwave.c     **** 
 272:armwave.c     ****     // TODO these asserts should instead raise PyExc
 273:armwave.c     ****     assert(start_point < end_point);
 1400              		.loc 1 273 5 is_stmt 1 view .LVU387
 1401 064c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1402 0650 6200002A 		bcs	.L85		@,
 274:armwave.c     **** 
 275:armwave.c     ****     /*
 276:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 277:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 278:armwave.c     ****     if(target_height == 256) {
 279:armwave.c     ****         g_armwave_state.row_shift = 8;
 280:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 281:armwave.c     ****     } else if(target_height == 512) {
 282:armwave.c     ****         g_armwave_state.row_shift = 9;
 283:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 284:armwave.c     ****     } else if(target_height == 1024) {
 285:armwave.c     ****         g_armwave_state.row_shift = 10;
 286:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 287:armwave.c     ****     } else if(target_height == 2048) {
 288:armwave.c     ****         g_armwave_state.row_shift = 11;
 289:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 290:armwave.c     ****     }
 291:armwave.c     ****     */
 292:armwave.c     **** 
 293:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 294:armwave.c     ****     g_armwave_state.xstride = target_height;
 1403              		.loc 1 294 5 view .LVU388
 1404              	@ armwave.c:305:     g_armwave_state.wave_length = end_point - start_point;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 304:armwave.c     ****     g_armwave_state.target_height = target_height;
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1405              		.loc 1 305 45 is_stmt 0 view .LVU389
 1406 0654 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1407              	.LVL81:
 1408              	@ armwave.c:295:     g_armwave_state.vscale_frac = target_height / 255.0f;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1409              		.loc 1 295 49 view .LVU390
 1410 0658 6F6A9FED 		vldr.32	s12, .L88	@ tmp175,
 1411              	@ armwave.c:309:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 306:armwave.c     **** 
 307:armwave.c     ****     // Calculate compound scaler
 308:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1412              		.loc 1 309 48 view .LVU391
 1413 065c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1414              	@ armwave.c:309:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1415              		.loc 1 309 79 view .LVU392
 1416 0660 6E6ADFED 		vldr.32	s13, .L88+4	@ tmp199,
 1417              	@ armwave.c:302:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 302:armwave.c     ****     g_armwave_state.target_width = target_width;
 1418              		.loc 1 302 90 view .LVU393
 1419 0664 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1420              	@ armwave.c:294:     g_armwave_state.xstride = target_height;
 294:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1421              		.loc 1 294 29 view .LVU394
 1422 0668 BC419FE5 		ldr	r4, .L88+16	@ tmp243,
 1423              	.LVL82:
 1424              	@ armwave.c:309:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1425              		.loc 1 309 48 view .LVU395
 1426 066c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1427              	@ armwave.c:295:     g_armwave_state.vscale_frac = target_height / 255.0f;
 295:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1428              		.loc 1 295 49 view .LVU396
 1429 0670 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1430              	@ armwave.c:300:     g_armwave_state.size = target_height * target_width;
 300:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1431              		.loc 1 300 42 view .LVU397
 1432 0674 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1433              	@ armwave.c:302:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 302:armwave.c     ****     g_armwave_state.target_width = target_width;
 1434              		.loc 1 302 74 view .LVU398
 1435 0678 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1436              	@ armwave.c:295:     g_armwave_state.vscale_frac = target_height / 255.0f;
 295:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1437              		.loc 1 295 49 view .LVU399
 1438 067c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1439              	@ armwave.c:309:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1440              		.loc 1 309 48 view .LVU400
 1441 0680 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1442              	@ armwave.c:311:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 310:armwave.c     **** 
 311:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1443              		.loc 1 311 5 view .LVU401
 1444 0684 04508DE5 		str	r5, [sp, #4]	@ _13,
 1445 0688 00608DE5 		str	r6, [sp]	@ target_width,
 1446              	@ armwave.c:302:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 302:armwave.c     ****     g_armwave_state.target_width = target_width;
 1447              		.loc 1 302 74 view .LVU402
 1448 068c 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1449              	@ armwave.c:309:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 309:armwave.c     **** 
 1450              		.loc 1 309 48 view .LVU403
 1451 0690 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1452              	@ armwave.c:294:     g_armwave_state.xstride = target_height;
 294:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1453              		.loc 1 294 29 view .LVU404
 1454 0694 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 295:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1455              		.loc 1 295 5 is_stmt 1 view .LVU405
 1456              	@ armwave.c:304:     g_armwave_state.target_height = target_height;
 304:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1457              		.loc 1 304 35 is_stmt 0 view .LVU406
 1458 0698 F865C4E1 		strd	r6, [r4, #88]	@, tmp243,
 1459              	@ armwave.c:311:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1460              		.loc 1 311 5 view .LVU407
 1461 069c 0118A0E3 		mov	r1, #65536	@ tmp202,
 1462              	@ armwave.c:301:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 301:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1463              		.loc 1 301 37 view .LVU408
 1464 06a0 017CA0E3 		mov	r7, #256	@ tmp185,
 1465              	@ armwave.c:297:     g_armwave_state.wave_stride = wave_stride;
 297:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1466              		.loc 1 297 33 view .LVU409
 1467 06a4 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1468              	@ armwave.c:298:     g_armwave_state.waves_max = waves_max;
 298:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1469              		.loc 1 298 31 view .LVU410
 1470 06a8 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1471              	@ armwave.c:299:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 299:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1472              		.loc 1 299 27 view .LVU411
 1473 06ac 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1474              	@ armwave.c:309:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 309:armwave.c     **** 
 1475              		.loc 1 309 48 view .LVU412
 1476 06b0 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1477              	@ armwave.c:311:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1478              		.loc 1 311 5 view .LVU413
 1479 06b4 08108DE5 		str	r1, [sp, #8]	@ tmp202,
 1480 06b8 70019FE5 		ldr	r0, .L88+20	@,
 1481 06bc 0310A0E1 		mov	r1, r3	@, tmp190
 1482              	@ armwave.c:300:     g_armwave_state.size = target_height * target_width;
 300:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1483              		.loc 1 300 26 view .LVU414
 1484 06c0 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1485              	@ armwave.c:302:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 302:armwave.c     ****     g_armwave_state.target_width = target_width;
 1486              		.loc 1 302 34 view .LVU415
 1487 06c4 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1488              	@ armwave.c:305:     g_armwave_state.wave_length = end_point - start_point;
 305:armwave.c     **** 
 1489              		.loc 1 305 33 view .LVU416
 1490 06c8 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1491              	@ armwave.c:301:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 301:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1492              		.loc 1 301 37 view .LVU417
 1493 06cc 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1494              	@ armwave.c:295:     g_armwave_state.vscale_frac = target_height / 255.0f;
 295:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1495              		.loc 1 295 49 view .LVU418
 1496 06d0 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1497              	@ armwave.c:309:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 309:armwave.c     **** 
 1498              		.loc 1 309 79 view .LVU419
 1499 06d4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1500              	@ armwave.c:308:     g_armwave_state.cmp_x_bitdepth_scale = \
 308:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1501              		.loc 1 308 42 view .LVU420
 1502 06d8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1503              	@ armwave.c:295:     g_armwave_state.vscale_frac = target_height / 255.0f;
 295:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1504              		.loc 1 295 33 view .LVU421
 1505 06dc 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 296:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1506              		.loc 1 296 5 is_stmt 1 view .LVU422
 1507              	@ armwave.c:308:     g_armwave_state.cmp_x_bitdepth_scale = \
 308:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1508              		.loc 1 308 42 is_stmt 0 view .LVU423
 1509 06e0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1510              	@ armwave.c:296:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 296:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1511              		.loc 1 296 30 view .LVU424
 1512 06e4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1513              	@ armwave.c:311:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1514              		.loc 1 311 5 view .LVU425
 1515 06e8 0C30A0E1 		mov	r3, ip	@, _19
 1516 06ec 0C20A0E1 		mov	r2, ip	@, tmp3
 1517              	@ armwave.c:308:     g_armwave_state.cmp_x_bitdepth_scale = \
 308:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1518              		.loc 1 308 42 view .LVU426
 1519 06f0 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1520              	@ armwave.c:296:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 296:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1521              		.loc 1 296 30 view .LVU427
 1522 06f4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 297:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1523              		.loc 1 297 5 is_stmt 1 view .LVU428
 298:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1524              		.loc 1 298 5 view .LVU429
 299:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1525              		.loc 1 299 5 view .LVU430
 300:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1526              		.loc 1 300 5 view .LVU431
 301:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1527              		.loc 1 301 5 view .LVU432
 302:armwave.c     ****     g_armwave_state.target_width = target_width;
 1528              		.loc 1 302 5 view .LVU433
 303:armwave.c     ****     g_armwave_state.target_height = target_height;
 1529              		.loc 1 303 5 view .LVU434
 304:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1530              		.loc 1 304 5 view .LVU435
 305:armwave.c     **** 
 1531              		.loc 1 305 5 view .LVU436
 308:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1532              		.loc 1 308 5 view .LVU437
 1533              		.loc 1 311 5 view .LVU438
 1534 06f8 FEFFFFEB 		bl	printf		@
 1535              	.LVL83:
 312:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 313:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 314:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 315:armwave.c     **** 
 316:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 317:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 318:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 319:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1536              		.loc 1 319 5 view .LVU439
 1537              	@ armwave.c:321:     if(g_armwave_state.ch1_buffer != NULL)
 320:armwave.c     **** 
 321:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1538              		.loc 1 321 23 is_stmt 0 view .LVU440
 1539 06fc 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1540              	@ armwave.c:319:     g_armwave_state.slice_height = 256; // 64;  
 319:armwave.c     **** 
 1541              		.loc 1 319 34 view .LVU441
 1542 0700 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1543              		.loc 1 321 5 is_stmt 1 view .LVU442
 1544              	@ armwave.c:321:     if(g_armwave_state.ch1_buffer != NULL)
 1545              		.loc 1 321 7 is_stmt 0 view .LVU443
 1546 0704 000050E3 		cmp	r0, #0	@ _20,
 1547 0708 0000000A 		beq	.L76		@,
 322:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1548              		.loc 1 322 9 is_stmt 1 view .LVU444
 1549 070c FEFFFFEB 		bl	free		@
 1550              	.LVL84:
 1551              	.L76:
 323:armwave.c     **** 
 324:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1552              		.loc 1 324 5 view .LVU445
 1553              	@ armwave.c:324:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1554              		.loc 1 324 34 is_stmt 0 view .LVU446
 1555 0710 0110A0E3 		mov	r1, #1	@,
 1556 0714 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1557 0718 FEFFFFEB 		bl	calloc		@
 1558              	.LVL85:
 1559              	@ armwave.c:326:     assert(g_armwave_state.ch1_buffer != NULL);
 325:armwave.c     **** 
 326:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1560              		.loc 1 326 5 view .LVU447
 1561 071c 000050E3 		cmp	r0, #0	@ _23,
 1562              	@ armwave.c:324:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 324:armwave.c     **** 
 1563              		.loc 1 324 34 view .LVU448
 1564 0720 0070A0E1 		mov	r7, r0	@ _23,
 1565              	@ armwave.c:324:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 324:armwave.c     **** 
 1566              		.loc 1 324 32 view .LVU449
 1567 0724 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1568              		.loc 1 326 5 is_stmt 1 view .LVU450
 1569 0728 3600000A 		beq	.L86		@,
 327:armwave.c     **** 
 328:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 329:armwave.c     ****     length = end_point - start_point;
 1570              		.loc 1 329 5 view .LVU451
 1571              	.LVL86:
 330:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1572              		.loc 1 330 5 view .LVU452
 1573              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 1574              		.loc 1 330 34 is_stmt 0 view .LVU453
 1575 072c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1576              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 1577              		.loc 1 330 22 view .LVU454
 1578 0730 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1579              	@ armwave.c:331:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1580              		.loc 1 331 60 view .LVU455
 1581 0734 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp254, g_armwave_state.slice_height
 1582              	@ armwave.c:332:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 332:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1583              		.loc 1 332 40 view .LVU456
 1584 0738 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1585              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 330:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1586              		.loc 1 330 34 view .LVU457
 1587 073c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 1588              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 330:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1589              		.loc 1 330 22 view .LVU458
 1590 0740 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp215, _13
 1591              	@ armwave.c:331:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1592              		.loc 1 331 60 view .LVU459
 1593 0744 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp219, tmp254
 1594              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 330:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1595              		.loc 1 330 22 view .LVU460
 1596 0748 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp215, tmp216
 1597              	.LVL87:
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1598              		.loc 1 331 5 is_stmt 1 view .LVU461
 1599              	@ armwave.c:331:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1600              		.loc 1 331 60 is_stmt 0 view .LVU462
 1601 074c 087A67EE 		vmul.f32	s15, s14, s16	@ tmp221, tmp219, points_per_pixel
 1602              	@ armwave.c:331:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1603              		.loc 1 331 41 view .LVU463
 1604 0750 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp222, tmp221
 1605 0754 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp222, g_armwave_state.slice_record_height
 1606              		.loc 1 332 5 is_stmt 1 view .LVU464
 1607              	@ armwave.c:332:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1608              		.loc 1 332 40 is_stmt 0 view .LVU465
 1609 0758 FEFFFFEB 		bl	malloc		@
 1610              	.LVL88:
 1611              	@ armwave.c:334:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 333:armwave.c     **** 
 334:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1612              		.loc 1 334 5 view .LVU466
 1613 075c 000050E3 		cmp	r0, #0	@ _31,
 1614              	@ armwave.c:332:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 332:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1615              		.loc 1 332 40 view .LVU467
 1616 0760 0060A0E1 		mov	r6, r0	@ _31,
 1617              	@ armwave.c:332:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 332:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1618              		.loc 1 332 38 view .LVU468
 1619 0764 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1620              		.loc 1 334 5 is_stmt 1 view .LVU469
 1621 0768 2100000A 		beq	.L87		@,
 1622              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 335:armwave.c     **** 
 336:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 337:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1623              		.loc 1 337 54 is_stmt 0 view .LVU470
 1624 076c 2C7ADFED 		vldr.32	s15, .L88+8	@ tmp231,
 1625 0770 020040E2 		sub	r0, r0, #2	@ ivtmp.78, _31,
 1626              	@ armwave.c:336:     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1627              		.loc 1 336 12 view .LVU471
 1628 0774 0030A0E3 		mov	r3, #0	@ xx,
 1629              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1630              		.loc 1 337 54 view .LVU472
 1631 0778 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp231, points_per_pixel
 1632              	.L79:
 1633              	.LVL89:
 1634              		.loc 1 337 9 is_stmt 1 discriminator 3 view .LVU473
 1635              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1636              		.loc 1 337 74 is_stmt 0 discriminator 3 view .LVU474
 1637 077c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1638              	@ armwave.c:336:     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1639              		.loc 1 336 32 discriminator 3 view .LVU475
 1640 0780 013083E2 		add	r3, r3, #1	@ xx, xx,
 1641              	.LVL90:
 1642              	@ armwave.c:336:     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1643              		.loc 1 336 5 discriminator 3 view .LVU476
 1644 0784 030055E1 		cmp	r5, r3	@ _13, xx
 1645              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1646              		.loc 1 337 74 discriminator 3 view .LVU477
 1647 0788 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp232, xx
 1648 078c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp233, tmp232, _32
 1649              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1650              		.loc 1 337 46 discriminator 3 view .LVU478
 1651 0790 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp234, tmp233
 1652 0794 902A17EE 		vmov	r2, s15	@ int	@ tmp234, tmp234
 1653 0798 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp234, MEM[base: _101, offset: 0B]
 1654              	@ armwave.c:336:     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1655              		.loc 1 336 5 discriminator 3 view .LVU479
 1656 079c F6FFFF1A 		bne	.L79		@,
 338:armwave.c     **** 
 339:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1657              		.loc 1 342 5 is_stmt 1 view .LVU480
 1658              	@ armwave.c:342:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1659              		.loc 1 342 34 is_stmt 0 view .LVU481
 1660 07a0 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1661 07a4 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1662 07a8 FEFFFFEB 		bl	malloc		@
 1663              	.LVL91:
 1664              	@ armwave.c:344:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 343:armwave.c     **** 
 344:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1665              		.loc 1 344 5 view .LVU482
 1666 07ac 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1667 07b0 0620A0E1 		mov	r2, r6	@, _31
 1668 07b4 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1669 07b8 0710A0E1 		mov	r1, r7	@, _23
 1670              	@ armwave.c:342:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 342:armwave.c     **** 
 1671              		.loc 1 342 34 view .LVU483
 1672 07bc 00C0A0E1 		mov	ip, r0	@ tmp238,
 1673              	@ armwave.c:344:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1674              		.loc 1 344 5 view .LVU484
 1675 07c0 0030A0E1 		mov	r3, r0	@, tmp238
 1676              	@ armwave.c:342:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 342:armwave.c     **** 
 1677              		.loc 1 342 32 view .LVU485
 1678 07c4 68C084E5 		str	ip, [r4, #104]	@ tmp238, g_armwave_state.out_pixbuf
 1679              		.loc 1 344 5 is_stmt 1 view .LVU486
 1680 07c8 64009FE5 		ldr	r0, .L88+24	@,
 1681 07cc FEFFFFEB 		bl	printf		@
 1682              	.LVL92:
 345:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 346:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 347:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 348:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 349:armwave.c     **** 
 350:armwave.c     ****     malloc_stats();
 1683              		.loc 1 350 5 view .LVU487
 1684              	@ armwave.c:351: }
 351:armwave.c     **** }
 1685              		.loc 1 351 1 is_stmt 0 view .LVU488
 1686 07d0 14D08DE2 		add	sp, sp, #20	@,,
 1687              		.cfi_remember_state
 1688              		.cfi_def_cfa_offset 36
 1689              		@ sp needed	@
 1690 07d4 028BBDEC 		vldm	sp!, {d8}	@
 1691              		.cfi_restore 80
 1692              		.cfi_restore 81
 1693              		.cfi_def_cfa_offset 28
 1694              	.LVL93:
 1695              		.loc 1 351 1 view .LVU489
 1696 07d8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1697              		.cfi_restore 14
 1698              		.cfi_restore 9
 1699              		.cfi_restore 8
 1700              		.cfi_restore 7
 1701              		.cfi_restore 6
 1702              		.cfi_restore 5
 1703              		.cfi_restore 4
 1704              		.cfi_def_cfa_offset 0
 1705              	.LVL94:
 1706              	@ armwave.c:350:     malloc_stats();
 350:armwave.c     **** }
 1707              		.loc 1 350 5 view .LVU490
 1708 07dc FEFFFFEA 		b	malloc_stats		@
 1709              	.LVL95:
 1710              	.L85:
 1711              		.cfi_restore_state
 273:armwave.c     **** 
 1712              		.loc 1 273 5 is_stmt 1 discriminator 1 view .LVU491
 1713 07e0 50309FE5 		ldr	r3, .L88+28	@,
 1714 07e4 50209FE5 		ldr	r2, .L88+32	@,
 1715 07e8 50109FE5 		ldr	r1, .L88+36	@,
 1716 07ec 50009FE5 		ldr	r0, .L88+40	@,
 1717 07f0 FEFFFFEB 		bl	__assert_fail		@
 1718              	.LVL96:
 1719              	.L87:
 334:armwave.c     **** 
 1720              		.loc 1 334 5 discriminator 1 view .LVU492
 1721 07f4 3C309FE5 		ldr	r3, .L88+28	@,
 1722 07f8 48209FE5 		ldr	r2, .L88+44	@,
 1723 07fc 3C109FE5 		ldr	r1, .L88+36	@,
 1724 0800 44009FE5 		ldr	r0, .L88+48	@,
 1725 0804 FEFFFFEB 		bl	__assert_fail		@
 1726              	.LVL97:
 1727              	.L86:
 326:armwave.c     **** 
 1728              		.loc 1 326 5 discriminator 1 view .LVU493
 1729 0808 28309FE5 		ldr	r3, .L88+28	@,
 1730 080c 3C209FE5 		ldr	r2, .L88+52	@,
 1731 0810 28109FE5 		ldr	r1, .L88+36	@,
 1732 0814 38009FE5 		ldr	r0, .L88+56	@,
 1733 0818 FEFFFFEB 		bl	__assert_fail		@
 1734              	.LVL98:
 1735              	.L89:
 1736              		.align	2
 1737              	.L88:
 1738 081c 00007F43 		.word	1132396544
 1739 0820 00008047 		.word	1199570944
 1740 0824 0000803F 		.word	1065353216
 1741 0828 40000000 		.word	.LC4
 1742 082c 00000000 		.word	g_armwave_state
 1743 0830 84000000 		.word	.LC6
 1744 0834 34010000 		.word	.LC9
 1745 0838 1C000000 		.word	.LANCHOR0+28
 1746 083c 11010000 		.word	273
 1747 0840 20000000 		.word	.LC2
 1748 0844 6C000000 		.word	.LC5
 1749 0848 4E010000 		.word	334
 1750 084c 08010000 		.word	.LC8
 1751 0850 46010000 		.word	326
 1752 0854 E4000000 		.word	.LC7
 1753              		.cfi_endproc
 1754              	.LFE62:
 1756              		.align	2
 1757              		.global	armwave_set_wave_pointer
 1758              		.syntax unified
 1759              		.arm
 1760              		.fpu vfp
 1762              	armwave_set_wave_pointer:
 1763              	.LVL99:
 1764              	.LFB63:
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 355:armwave.c     ****  * in the future.
 356:armwave.c     ****  */
 357:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 358:armwave.c     **** {
 1765              		.loc 1 358 1 view -0
 1766              		.cfi_startproc
 1767              		@ args = 0, pretend = 0, frame = 0
 1768              		@ frame_needed = 0, uses_anonymous_args = 0
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1769              		.loc 1 359 5 view .LVU495
 1770 0858 000050E3 		cmp	r0, #0	@ wave_buffer
 1771              		.loc 1 359 5 is_stmt 0 view .LVU496
 1772 085c 0200000A 		beq	.L95		@,
 360:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1773              		.loc 1 360 5 is_stmt 1 view .LVU497
 1774              	@ armwave.c:360:     g_armwave_state.wave_buffer = wave_buffer;
 1775              		.loc 1 360 33 is_stmt 0 view .LVU498
 1776 0860 1C309FE5 		ldr	r3, .L96	@ tmp116,
 1777 0864 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1778 0868 1EFF2FE1 		bx	lr	@
 1779              	.L95:
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1780              		.loc 1 359 5 is_stmt 1 discriminator 1 view .LVU499
 1781              	@ armwave.c:358: {
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1782              		.loc 1 358 1 is_stmt 0 discriminator 1 view .LVU500
 1783 086c 10402DE9 		push	{r4, lr}	@
 1784              		.cfi_def_cfa_offset 8
 1785              		.cfi_offset 4, -8
 1786              		.cfi_offset 14, -4
 1787              	@ armwave.c:359:     assert(wave_buffer != NULL);
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1788              		.loc 1 359 5 discriminator 1 view .LVU501
 1789 0870 10309FE5 		ldr	r3, .L96+4	@,
 1790 0874 10209FE5 		ldr	r2, .L96+8	@,
 1791 0878 10109FE5 		ldr	r1, .L96+12	@,
 1792 087c 10009FE5 		ldr	r0, .L96+16	@,
 1793              	.LVL100:
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1794              		.loc 1 359 5 discriminator 1 view .LVU502
 1795 0880 FEFFFFEB 		bl	__assert_fail		@
 1796              	.LVL101:
 1797              	.L97:
 1798              		.align	2
 1799              	.L96:
 1800 0884 00000000 		.word	g_armwave_state
 1801 0888 34000000 		.word	.LANCHOR0+52
 1802 088c 67010000 		.word	359
 1803 0890 20000000 		.word	.LC2
 1804 0894 58010000 		.word	.LC10
 1805              		.cfi_endproc
 1806              	.LFE63:
 1808              		.align	2
 1809              		.global	armwave_set_wave_pointer_as_testbuf
 1810              		.syntax unified
 1811              		.arm
 1812              		.fpu vfp
 1814              	armwave_set_wave_pointer_as_testbuf:
 1815              	.LVL102:
 1816              	.LFB64:
 361:armwave.c     **** }
 362:armwave.c     **** 
 363:armwave.c     **** /*
 364:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 365:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 368:armwave.c     **** {
 1817              		.loc 1 368 1 is_stmt 1 view -0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 0
 1820              		@ frame_needed = 0, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
 369:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1822              		.loc 1 369 5 view .LVU504
 1823              	@ armwave.c:369:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1824              		.loc 1 369 29 is_stmt 0 view .LVU505
 1825 0898 24309FE5 		ldr	r3, .L101	@ tmp117,
 1826              	@ armwave.c:369:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1827              		.loc 1 369 7 view .LVU506
 1828 089c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1829 08a0 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1830 08a4 0400003A 		bcc	.L100		@,
 370:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 371:armwave.c     ****         return;
 372:armwave.c     ****     }
 373:armwave.c     **** 
 374:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1831              		.loc 1 374 5 is_stmt 1 view .LVU507
 1832              	@ armwave.c:374:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1833              		.loc 1 374 111 is_stmt 0 view .LVU508
 1834 08a8 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1835              	@ armwave.c:374:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1836              		.loc 1 374 68 view .LVU509
 1837 08ac 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1838 08b0 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1839              	.LVL103:
 1840              	@ armwave.c:374:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1841              		.loc 1 374 33 view .LVU510
 1842 08b4 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1843              	@ armwave.c:375: }
 375:armwave.c     **** }
 1844              		.loc 1 375 1 view .LVU511
 1845 08b8 1EFF2FE1 		bx	lr	@
 1846              	.LVL104:
 1847              	.L100:
 370:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1848              		.loc 1 370 9 is_stmt 1 view .LVU512
 1849 08bc 04009FE5 		ldr	r0, .L101+4	@,
 1850              	.LVL105:
 370:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1851              		.loc 1 370 9 is_stmt 0 view .LVU513
 1852 08c0 FEFFFFEA 		b	puts		@
 1853              	.LVL106:
 1854              	.L102:
 1855              		.align	2
 1856              	.L101:
 1857 08c4 00000000 		.word	g_armwave_state
 1858 08c8 6C010000 		.word	.LC11
 1859              		.cfi_endproc
 1860              	.LFE64:
 1862              		.align	2
 1863              		.global	armwave_set_wave_pointer_u32
 1864              		.syntax unified
 1865              		.arm
 1866              		.fpu vfp
 1868              	armwave_set_wave_pointer_u32:
 1869              	.LVL107:
 1870              	.LFB65:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 379:armwave.c     ****  * disjointed buffers in the future.
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 382:armwave.c     **** {
 1871              		.loc 1 382 1 is_stmt 1 view -0
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 0
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1875              		.loc 1 383 5 view .LVU515
 1876 08cc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1877              		.loc 1 383 5 is_stmt 0 view .LVU516
 1878 08d0 0200000A 		beq	.L108		@,
 384:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1879              		.loc 1 384 5 is_stmt 1 view .LVU517
 1880              	@ armwave.c:384:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1881              		.loc 1 384 33 is_stmt 0 view .LVU518
 1882 08d4 1C309FE5 		ldr	r3, .L109	@ tmp117,
 1883 08d8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1884 08dc 1EFF2FE1 		bx	lr	@
 1885              	.L108:
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1886              		.loc 1 383 5 is_stmt 1 discriminator 1 view .LVU519
 1887              	@ armwave.c:382: {
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1888              		.loc 1 382 1 is_stmt 0 discriminator 1 view .LVU520
 1889 08e0 10402DE9 		push	{r4, lr}	@
 1890              		.cfi_def_cfa_offset 8
 1891              		.cfi_offset 4, -8
 1892              		.cfi_offset 14, -4
 1893              	@ armwave.c:383:     assert(wave_buffer_ptr != 0);
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1894              		.loc 1 383 5 discriminator 1 view .LVU521
 1895 08e4 10309FE5 		ldr	r3, .L109+4	@,
 1896 08e8 10209FE5 		ldr	r2, .L109+8	@,
 1897 08ec 10109FE5 		ldr	r1, .L109+12	@,
 1898 08f0 10009FE5 		ldr	r0, .L109+16	@,
 1899              	.LVL108:
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1900              		.loc 1 383 5 discriminator 1 view .LVU522
 1901 08f4 FEFFFFEB 		bl	__assert_fail		@
 1902              	.LVL109:
 1903              	.L110:
 1904              		.align	2
 1905              	.L109:
 1906 08f8 00000000 		.word	g_armwave_state
 1907 08fc 50000000 		.word	.LANCHOR0+80
 1908 0900 7F010000 		.word	383
 1909 0904 20000000 		.word	.LC2
 1910 0908 A8010000 		.word	.LC12
 1911              		.cfi_endproc
 1912              	.LFE65:
 1914              		.align	2
 1915              		.global	armwave_clear_buffer
 1916              		.syntax unified
 1917              		.arm
 1918              		.fpu vfp
 1920              	armwave_clear_buffer:
 1921              	.LVL110:
 1922              	.LFB66:
 385:armwave.c     **** }
 386:armwave.c     **** 
 387:armwave.c     **** /*
 388:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 391:armwave.c     **** {
 1923              		.loc 1 391 1 is_stmt 1 view -0
 1924              		.cfi_startproc
 1925              		@ args = 0, pretend = 0, frame = 0
 1926              		@ frame_needed = 0, uses_anonymous_args = 0
 1927              		@ link register save eliminated.
 392:armwave.c     ****     // Flags ignored, only one buffer cleared
 393:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1928              		.loc 1 393 5 view .LVU524
 1929              	@ armwave.c:393:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1930              		.loc 1 393 58 is_stmt 0 view .LVU525
 1931 090c 0C309FE5 		ldr	r3, .L112	@ tmp114,
 1932              	@ armwave.c:393:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1933              		.loc 1 393 5 view .LVU526
 1934 0910 0010A0E3 		mov	r1, #0	@,
 1935 0914 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1936 0918 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1937              	.LVL111:
 1938              		.loc 1 393 5 view .LVU527
 1939 091c FEFFFFEA 		b	memset		@
 1940              	.LVL112:
 1941              	.L113:
 1942              		.align	2
 1943              	.L112:
 1944 0920 00000000 		.word	g_armwave_state
 1945              		.cfi_endproc
 1946              	.LFE66:
 1948              		.align	2
 1949              		.global	armwave_set_channel_colour
 1950              		.syntax unified
 1951              		.arm
 1952              		.fpu vfp
 1954              	armwave_set_channel_colour:
 1955              	.LVL113:
 1956              	.LFB67:
 394:armwave.c     **** }
 395:armwave.c     **** 
 396:armwave.c     **** /*
 397:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 398:armwave.c     ****  */
 399:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 400:armwave.c     **** {
 1957              		.loc 1 400 1 is_stmt 1 view -0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 1961              		@ link register save eliminated.
 401:armwave.c     ****     // Only 1ch supported for now
 402:armwave.c     ****     switch(ch) {
 1962              		.loc 1 402 5 view .LVU529
 1963 0924 010050E3 		cmp	r0, #1	@ ch,
 403:armwave.c     ****         case 1:
 404:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1964              		.loc 1 404 13 view .LVU530
 1965              	@ armwave.c:404:             g_armwave_state.ch1_color.r = r;
 1966              		.loc 1 404 41 is_stmt 0 view .LVU531
 1967 0928 0C009F05 		ldreq	r0, .L116	@ tmp117,
 1968              	.LVL114:
 1969              		.loc 1 404 41 view .LVU532
 1970 092c BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 405:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1971              		.loc 1 405 13 is_stmt 1 view .LVU533
 1972              	@ armwave.c:405:             g_armwave_state.ch1_color.g = g;
 1973              		.loc 1 405 41 is_stmt 0 view .LVU534
 1974 0930 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 406:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1975              		.loc 1 406 13 is_stmt 1 view .LVU535
 1976              	@ armwave.c:406:             g_armwave_state.ch1_color.b = b;
 1977              		.loc 1 406 41 is_stmt 0 view .LVU536
 1978 0934 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 407:armwave.c     ****             break;
 1979              		.loc 1 407 13 is_stmt 1 view .LVU537
 1980              	@ armwave.c:409: }
 408:armwave.c     ****     }
 409:armwave.c     **** }
 1981              		.loc 1 409 1 is_stmt 0 view .LVU538
 1982 0938 1EFF2FE1 		bx	lr	@
 1983              	.L117:
 1984              		.align	2
 1985              	.L116:
 1986 093c 00000000 		.word	g_armwave_state
 1987              		.cfi_endproc
 1988              	.LFE67:
 1990              		.align	2
 1991              		.global	armwave_dump_ppm_debug
 1992              		.syntax unified
 1993              		.arm
 1994              		.fpu vfp
 1996              	armwave_dump_ppm_debug:
 1997              	.LVL115:
 1998              	.LFB68:
 410:armwave.c     **** 
 411:armwave.c     **** /*
 412:armwave.c     ****  * Dump a ppm of a buffer to a file.
 413:armwave.c     ****  */
 414:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 415:armwave.c     **** {
 1999              		.loc 1 415 1 is_stmt 1 view -0
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 0
 2002              		@ frame_needed = 0, uses_anonymous_args = 0
 416:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2003              		.loc 1 416 5 view .LVU540
 2004              	@ armwave.c:415: {
 415:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2005              		.loc 1 415 1 is_stmt 0 view .LVU541
 2006 0940 0130A0E1 		mov	r3, r1	@ fn, fn
 2007 0944 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2008              		.cfi_def_cfa_offset 28
 2009              		.cfi_offset 4, -28
 2010              		.cfi_offset 5, -24
 2011              		.cfi_offset 6, -20
 2012              		.cfi_offset 7, -16
 2013              		.cfi_offset 8, -12
 2014              		.cfi_offset 9, -8
 2015              		.cfi_offset 14, -4
 2016 0948 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2017 094c 0CD04DE2 		sub	sp, sp, #12	@,,
 2018              		.cfi_def_cfa_offset 40
 2019              	@ armwave.c:416:     FILE *fp = fopen(fn, "wb");
 2020              		.loc 1 416 16 view .LVU542
 2021 0950 C4109FE5 		ldr	r1, .L126	@,
 2022              	.LVL116:
 2023              		.loc 1 416 16 view .LVU543
 2024 0954 0300A0E1 		mov	r0, r3	@, fn
 2025              	.LVL117:
 2026              		.loc 1 416 16 view .LVU544
 2027 0958 FEFFFFEB 		bl	fopen64		@
 2028              	.LVL118:
 2029              	@ armwave.c:423:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 417:armwave.c     ****     uint32_t data;
 418:armwave.c     ****     int xx, yy;
 419:armwave.c     **** 
 420:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 421:armwave.c     **** 
 422:armwave.c     ****     fputs("P3\n", fp);
 423:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2030              		.loc 1 423 5 view .LVU545
 2031 095c BC609FE5 		ldr	r6, .L126+4	@ tmp150,
 2032              	@ armwave.c:422:     fputs("P3\n", fp);
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2033              		.loc 1 422 5 view .LVU546
 2034 0960 0320A0E3 		mov	r2, #3	@,
 2035 0964 0110A0E3 		mov	r1, #1	@,
 2036              	@ armwave.c:416:     FILE *fp = fopen(fn, "wb");
 416:armwave.c     ****     uint32_t data;
 2037              		.loc 1 416 16 view .LVU547
 2038 0968 0070A0E1 		mov	r7, r0	@ fp,
 2039              	.LVL119:
 417:armwave.c     ****     uint32_t data;
 2040              		.loc 1 417 5 is_stmt 1 view .LVU548
 418:armwave.c     **** 
 2041              		.loc 1 418 5 view .LVU549
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2042              		.loc 1 422 5 view .LVU550
 2043 096c 0030A0E1 		mov	r3, r0	@, fp
 2044 0970 AC009FE5 		ldr	r0, .L126+8	@,
 2045              	.LVL120:
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2046              		.loc 1 422 5 is_stmt 0 view .LVU551
 2047 0974 FEFFFFEB 		bl	fwrite		@
 2048              	.LVL121:
 2049              		.loc 1 423 5 is_stmt 1 view .LVU552
 2050 0978 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2051 097c A4109FE5 		ldr	r1, .L126+12	@,
 2052 0980 0700A0E1 		mov	r0, r7	@, fp
 2053 0984 FEFFFFEB 		bl	fprintf		@
 2054              	.LVL122:
 424:armwave.c     ****     fputs("255\n", fp);
 2055              		.loc 1 424 5 view .LVU553
 2056 0988 0420A0E3 		mov	r2, #4	@,
 2057 098c 0730A0E1 		mov	r3, r7	@, fp
 2058 0990 0110A0E3 		mov	r1, #1	@,
 2059 0994 90009FE5 		ldr	r0, .L126+16	@,
 2060 0998 FEFFFFEB 		bl	fwrite		@
 2061              	.LVL123:
 425:armwave.c     **** 
 426:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2062              		.loc 1 426 5 view .LVU554
 2063              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2064              		.loc 1 426 37 is_stmt 0 view .LVU555
 2065 099c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2066              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2067              		.loc 1 426 5 view .LVU556
 2068 09a0 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2069 09a4 180000DA 		ble	.L119		@,
 2070 09a8 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2071              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 428:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 429:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 430:armwave.c     **** 
 431:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2072              		.loc 1 431 13 view .LVU557
 2073 09ac 7C909FE5 		ldr	r9, .L126+20	@ tmp152,
 2074              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2075              		.loc 1 426 12 view .LVU558
 2076 09b0 0050A0E3 		mov	r5, #0	@ yy,
 2077              	.LVL124:
 2078              	.L120:
 2079              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2080              		.loc 1 427 9 view .LVU559
 2081 09b4 000053E3 		cmp	r3, #0	@ _13,
 2082              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2083              		.loc 1 427 16 view .LVU560
 2084 09b8 0040A0C3 		movgt	r4, #0	@ xx,
 2085              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2086              		.loc 1 427 9 view .LVU561
 2087 09bc 0F0000DA 		ble	.L122		@,
 2088              	.LVL125:
 2089              	.L121:
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2090              		.loc 1 428 13 is_stmt 1 discriminator 3 view .LVU562
 2091              	@ armwave.c:428:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2092              		.loc 1 428 29 is_stmt 0 discriminator 3 view .LVU563
 2093 09c0 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2094              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2095              		.loc 1 431 13 discriminator 3 view .LVU564
 2096 09c4 0910A0E1 		mov	r1, r9	@, tmp152
 2097 09c8 0700A0E1 		mov	r0, r7	@, fp
 2098              	@ armwave.c:428:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2099              		.loc 1 428 18 discriminator 3 view .LVU565
 2100 09cc 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2101              	.LVL126:
 2102              		.loc 1 431 13 is_stmt 1 discriminator 3 view .LVU566
 2103              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2104              		.loc 1 427 58 is_stmt 0 discriminator 3 view .LVU567
 2105 09d0 014084E2 		add	r4, r4, #1	@ xx, xx,
 2106              	.LVL127:
 2107              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2108              		.loc 1 431 81 discriminator 3 view .LVU568
 2109 09d4 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2110              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2111              		.loc 1 431 61 discriminator 3 view .LVU569
 2112 09d8 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2113              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2114              		.loc 1 431 13 discriminator 3 view .LVU570
 2115 09dc 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2116 09e0 7330EFE6 		uxtb	r3, r3	@, tmp142
 2117 09e4 00C08DE5 		str	ip, [sp]	@ tmp147,
 2118 09e8 7220EFE6 		uxtb	r2, r2	@, data
 2119              	.LVL128:
 2120              		.loc 1 431 13 discriminator 3 view .LVU571
 2121 09ec FEFFFFEB 		bl	fprintf		@
 2122              	.LVL129:
 2123              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2124              		.loc 1 427 41 discriminator 3 view .LVU572
 2125 09f0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2126              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2127              		.loc 1 427 9 discriminator 3 view .LVU573
 2128 09f4 040053E1 		cmp	r3, r4	@ _13, xx
 2129 09f8 F0FFFFCA 		bgt	.L121		@,
 2130 09fc 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2131              	.LVL130:
 2132              	.L122:
 2133              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2134              		.loc 1 426 55 discriminator 2 view .LVU574
 2135 0a00 015085E2 		add	r5, r5, #1	@ yy, yy,
 2136              	.LVL131:
 2137              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2138              		.loc 1 426 5 discriminator 2 view .LVU575
 2139 0a04 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2140 0a08 E9FFFFBA 		blt	.L120		@,
 2141              	.LVL132:
 2142              	.L119:
 432:armwave.c     ****         }
 433:armwave.c     ****     }
 434:armwave.c     **** 
 435:armwave.c     ****     fclose(fp);
 2143              		.loc 1 435 5 is_stmt 1 view .LVU576
 2144 0a0c 0700A0E1 		mov	r0, r7	@, fp
 2145              	@ armwave.c:436: }
 436:armwave.c     **** }
 2146              		.loc 1 436 1 is_stmt 0 view .LVU577
 2147 0a10 0CD08DE2 		add	sp, sp, #12	@,,
 2148              		.cfi_def_cfa_offset 28
 2149              		@ sp needed	@
 2150 0a14 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2151              		.cfi_restore 14
 2152              		.cfi_restore 9
 2153              		.cfi_restore 8
 2154              		.cfi_restore 7
 2155              		.cfi_restore 6
 2156              		.cfi_restore 5
 2157              		.cfi_restore 4
 2158              		.cfi_def_cfa_offset 0
 2159              	.LVL133:
 2160              	@ armwave.c:435:     fclose(fp);
 435:armwave.c     **** }
 2161              		.loc 1 435 5 view .LVU578
 2162 0a18 FEFFFFEA 		b	fclose		@
 2163              	.LVL134:
 2164              	.L127:
 435:armwave.c     **** }
 2165              		.loc 1 435 5 view .LVU579
 2166              		.align	2
 2167              	.L126:
 2168 0a1c C0010000 		.word	.LC13
 2169 0a20 00000000 		.word	g_armwave_state
 2170 0a24 C4010000 		.word	.LC14
 2171 0a28 C8010000 		.word	.LC15
 2172 0a2c D0010000 		.word	.LC16
 2173 0a30 D8010000 		.word	.LC17
 2174              		.cfi_endproc
 2175              	.LFE68:
 2177              		.align	2
 2178              		.global	armwave_test_init
 2179              		.syntax unified
 2180              		.arm
 2181              		.fpu vfp
 2183              	armwave_test_init:
 2184              	.LVL135:
 2185              	.LFB69:
 437:armwave.c     **** 
 438:armwave.c     **** /*
 439:armwave.c     ****  * Initialise some test functionry.
 440:armwave.c     ****  */
 441:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 442:armwave.c     **** {
 2186              		.loc 1 442 1 is_stmt 1 view -0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 0
 2189              		@ frame_needed = 0, uses_anonymous_args = 0
 443:armwave.c     ****     test_create_gamma();
 2190              		.loc 1 443 5 view .LVU581
 2191              	.LBB18:
 2192              	.LBI18:
  34:armwave.c     **** {
 2193              		.loc 1 34 6 view .LVU582
  34:armwave.c     **** {
 2194              		.loc 1 34 6 is_stmt 0 view .LVU583
 2195              	.LBE18:
 2196              	@ armwave.c:442: {
 442:armwave.c     ****     test_create_gamma();
 2197              		.loc 1 442 1 view .LVU584
 2198 0a34 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2199              		.cfi_def_cfa_offset 32
 2200              		.cfi_offset 4, -32
 2201              		.cfi_offset 5, -28
 2202              		.cfi_offset 6, -24
 2203              		.cfi_offset 7, -20
 2204              		.cfi_offset 8, -16
 2205              		.cfi_offset 9, -12
 2206              		.cfi_offset 10, -8
 2207              		.cfi_offset 14, -4
 2208 0a38 068B2DED 		vpush.64	{d8, d9, d10}	@
 2209              		.cfi_def_cfa_offset 56
 2210              		.cfi_offset 80, -56
 2211              		.cfi_offset 81, -52
 2212              		.cfi_offset 82, -48
 2213              		.cfi_offset 83, -44
 2214              		.cfi_offset 84, -40
 2215              		.cfi_offset 85, -36
 2216 0a3c C0409FE5 		ldr	r4, .L132+20	@ ivtmp.92,
 2217              	.LBB21:
 2218              	.LBB19:
 2219              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2220              		.loc 1 40 32 view .LVU585
 2221 0a40 2EAA9FED 		vldr.32	s20, .L132+16	@ tmp136,
 2222              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2223              		.loc 1 40 26 view .LVU586
 2224 0a44 299B9FED 		vldr.64	d9, .L132	@ tmp151,
 2225              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2226              		.loc 1 40 49 view .LVU587
 2227 0a48 2A8B9FED 		vldr.64	d8, .L132+8	@ tmp139,
 2228 0a4c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.92,
 2229              	.LBE19:
 2230              	.LBE21:
 2231              	@ armwave.c:442: {
 442:armwave.c     ****     test_create_gamma();
 2232              		.loc 1 442 1 view .LVU588
 2233 0a50 10D04DE2 		sub	sp, sp, #16	@,,
 2234              		.cfi_def_cfa_offset 72
 2235              	@ armwave.c:442: {
 442:armwave.c     ****     test_create_gamma();
 2236              		.loc 1 442 1 view .LVU589
 2237 0a54 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2238 0a58 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2239 0a5c 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2240 0a60 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2241 0a64 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.92,
 2242 0a68 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2243              	.LVL136:
 2244              	.L129:
 2245              	.LBB22:
 2246              	.LBB20:
  40:armwave.c     ****     }
 2247              		.loc 1 40 9 is_stmt 1 view .LVU590
 2248              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2249              		.loc 1 40 32 is_stmt 0 view .LVU591
 2250 0a6c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.92
 2251              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2252              		.loc 1 40 26 view .LVU592
 2253 0a70 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2254              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2255              		.loc 1 40 32 view .LVU593
 2256 0a74 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2257 0a78 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2258 0a7c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2259              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2260              		.loc 1 40 26 view .LVU594
 2261 0a80 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2262 0a84 FEFFFFEB 		bl	pow		@
 2263              	.LVL137:
 2264              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2265              		.loc 1 40 49 view .LVU595
 2266 0a88 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2267              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2268              		.loc 1 40 24 view .LVU596
 2269 0a8c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2270 0a90 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2271 0a94 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2272              	.LVL138:
 2273              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2274              		.loc 1 39 5 view .LVU597
 2275 0a98 0A0054E1 		cmp	r4, r10	@ ivtmp.92, _39
 2276 0a9c F2FFFF1A 		bne	.L129		@,
 2277              	.LVL139:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2278              		.loc 1 39 5 view .LVU598
 2279              	.LBE20:
 2280              	.LBE22:
 444:armwave.c     **** 
 445:armwave.c     ****     // make ch1 yellowish by default
 446:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2281              		.loc 1 446 5 is_stmt 1 view .LVU599
 2282              	.LBB23:
 2283              	.LBI23:
 399:armwave.c     **** {
 2284              		.loc 1 399 6 view .LVU600
 2285              	.LBB24:
 402:armwave.c     ****         case 1:
 2286              		.loc 1 402 5 view .LVU601
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2287              		.loc 1 404 13 view .LVU602
 405:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2288              		.loc 1 405 13 view .LVU603
 2289              	@ armwave.c:404:             g_armwave_state.ch1_color.r = r;
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2290              		.loc 1 404 41 is_stmt 0 view .LVU604
 2291 0aa0 60C09FE5 		ldr	ip, .L132+24	@ tmp142,
 2292 0aa4 60409FE5 		ldr	r4, .L132+28	@ tmp143,
 2293              	.LBE24:
 2294              	.LBE23:
 2295              	@ armwave.c:448:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 447:armwave.c     **** 
 448:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2296              		.loc 1 448 5 view .LVU605
 2297 0aa8 0000A0E3 		mov	r0, #0	@ tmp147,
 2298              	.LBB28:
 2299              	.LBB25:
 2300              	@ armwave.c:406:             g_armwave_state.ch1_color.b = b;
 406:armwave.c     ****             break;
 2301              		.loc 1 406 41 view .LVU606
 2302 0aac FAE0A0E3 		mov	lr, #250	@ tmp146,
 2303              	.LBE25:
 2304              	.LBE28:
 2305              	@ armwave.c:448:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2306              		.loc 1 448 5 view .LVU607
 2307 0ab0 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2308 0ab4 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2309 0ab8 00808DE5 		str	r8, [sp]	@ render_width,
 2310 0abc 0610A0E1 		mov	r1, r6	@, tmp3
 2311 0ac0 0720A0E1 		mov	r2, r7	@, nwaves
 2312              	.LBB29:
 2313              	.LBB26:
 2314              	@ armwave.c:404:             g_armwave_state.ch1_color.r = r;
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2315              		.loc 1 404 41 view .LVU608
 2316 0ac4 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 406:armwave.c     ****             break;
 2317              		.loc 1 406 13 is_stmt 1 view .LVU609
 2318              	.LBE26:
 2319              	.LBE29:
 2320              	@ armwave.c:448:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2321              		.loc 1 448 5 is_stmt 0 view .LVU610
 2322 0ac8 0630A0E1 		mov	r3, r6	@, wave_size
 2323              	.LBB30:
 2324              	.LBB27:
 2325              	@ armwave.c:406:             g_armwave_state.ch1_color.b = b;
 406:armwave.c     ****             break;
 2326              		.loc 1 406 41 view .LVU611
 2327 0acc B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 407:armwave.c     ****     }
 2328              		.loc 1 407 13 is_stmt 1 view .LVU612
 2329              	.LVL140:
 407:armwave.c     ****     }
 2330              		.loc 1 407 13 is_stmt 0 view .LVU613
 2331              	.LBE27:
 2332              	.LBE30:
 2333              		.loc 1 448 5 is_stmt 1 view .LVU614
 2334 0ad0 FEFFFFEB 		bl	armwave_setup_render		@
 2335              	.LVL141:
 449:armwave.c     **** 
 450:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2336              		.loc 1 450 5 view .LVU615
 2337 0ad4 34109FE5 		ldr	r1, .L132+32	@,
 2338 0ad8 34009FE5 		ldr	r0, .L132+36	@,
 2339              	@ armwave.c:451: }
 451:armwave.c     **** }
 2340              		.loc 1 451 1 is_stmt 0 view .LVU616
 2341 0adc 10D08DE2 		add	sp, sp, #16	@,,
 2342              		.cfi_def_cfa_offset 56
 2343              		@ sp needed	@
 2344 0ae0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2345              		.cfi_restore 84
 2346              		.cfi_restore 85
 2347              		.cfi_restore 82
 2348              		.cfi_restore 83
 2349              		.cfi_restore 80
 2350              		.cfi_restore 81
 2351              		.cfi_def_cfa_offset 32
 2352 0ae4 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2353              		.cfi_restore 14
 2354              		.cfi_restore 10
 2355              		.cfi_restore 9
 2356              		.cfi_restore 8
 2357              		.cfi_restore 7
 2358              		.cfi_restore 6
 2359              		.cfi_restore 5
 2360              		.cfi_restore 4
 2361              		.cfi_def_cfa_offset 0
 2362              	.LVL142:
 2363              	@ armwave.c:450:     printf("armwave version: %s\n", ARMWAVE_VER);
 450:armwave.c     **** }
 2364              		.loc 1 450 5 view .LVU617
 2365 0ae8 FEFFFFEA 		b	printf		@
 2366              	.LVL143:
 2367              	.L133:
 2368 0aec 0000A0E1 		.align	3
 2369              	.L132:
 2370 0af0 000000C0 		.word	-1073741824
 2371 0af4 CCCCEC3F 		.word	1072483532
 2372 0af8 00000000 		.word	0
 2373 0afc 00E06F40 		.word	1081073664
 2374 0b00 00007F43 		.word	1132396544
 2375 0b04 FFFFFFFF 		.word	gamma_table-1
 2376 0b08 00000000 		.word	g_armwave_state
 2377 0b0c F609F406 		.word	116656630
 2378 0b10 00000000 		.word	.LC0
 2379 0b14 08000000 		.word	.LC1
 2380              		.cfi_endproc
 2381              	.LFE69:
 2383              		.align	2
 2384              		.global	armwave_test_fill_outbuf
 2385              		.syntax unified
 2386              		.arm
 2387              		.fpu vfp
 2389              	armwave_test_fill_outbuf:
 2390              	.LFB70:
 452:armwave.c     **** 
 453:armwave.c     **** /*
 454:armwave.c     ****  * Render image to the local allocated buffer.
 455:armwave.c     ****  */
 456:armwave.c     **** void armwave_test_fill_outbuf()
 457:armwave.c     **** {
 2391              		.loc 1 457 1 is_stmt 1 view -0
 2392              		.cfi_startproc
 2393              		@ args = 0, pretend = 0, frame = 0
 2394              		@ frame_needed = 0, uses_anonymous_args = 0
 2395              		@ link register save eliminated.
 458:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2396              		.loc 1 458 5 view .LVU619
 2397 0b18 04309FE5 		ldr	r3, .L135	@ tmp111,
 2398 0b1c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2399 0b20 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2400              	.LVL144:
 2401              	.L136:
 2402              		.align	2
 2403              	.L135:
 2404 0b24 00000000 		.word	g_armwave_state
 2405              		.cfi_endproc
 2406              	.LFE70:
 2408              		.align	2
 2409              		.global	armwave_test_dump_buffer_to_ppm
 2410              		.syntax unified
 2411              		.arm
 2412              		.fpu vfp
 2414              	armwave_test_dump_buffer_to_ppm:
 2415              	.LVL145:
 2416              	.LFB71:
 459:armwave.c     **** }
 460:armwave.c     **** 
 461:armwave.c     **** /*
 462:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 463:armwave.c     ****  */
 464:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 465:armwave.c     **** {
 2417              		.loc 1 465 1 view -0
 2418              		.cfi_startproc
 2419              		@ args = 0, pretend = 0, frame = 0
 2420              		@ frame_needed = 0, uses_anonymous_args = 0
 2421              		@ link register save eliminated.
 466:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2422              		.loc 1 466 5 view .LVU621
 2423 0b28 08309FE5 		ldr	r3, .L138	@ tmp112,
 2424 0b2c 0010A0E1 		mov	r1, r0	@, fn
 2425 0b30 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2426              	.LVL146:
 2427              		.loc 1 466 5 is_stmt 0 view .LVU622
 2428 0b34 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2429              	.LVL147:
 2430              	.L139:
 2431              		.loc 1 466 5 view .LVU623
 2432              		.align	2
 2433              	.L138:
 2434 0b38 00000000 		.word	g_armwave_state
 2435              		.cfi_endproc
 2436              	.LFE71:
 2438              		.align	2
 2439              		.global	armwave_test_fill_gdkbuf
 2440              		.syntax unified
 2441              		.arm
 2442              		.fpu vfp
 2444              	armwave_test_fill_gdkbuf:
 2445              	.LVL148:
 2446              	.LFB72:
 467:armwave.c     **** }
 468:armwave.c     **** 
 469:armwave.c     **** /*
 470:armwave.c     ****  * Render GDK buffer with test funtionry.
 471:armwave.c     ****  */
 472:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 473:armwave.c     **** {
 2447              		.loc 1 473 1 is_stmt 1 view -0
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 0
 2450              		@ frame_needed = 0, uses_anonymous_args = 0
 2451              		@ link register save eliminated.
 474:armwave.c     ****     //PyObject *mv;
 475:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 476:armwave.c     **** 
 477:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 478:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2452              		.loc 1 478 5 view .LVU625
 479:armwave.c     ****     
 480:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 481:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2453              		.loc 1 481 5 view .LVU626
 2454              	@ armwave.c:478:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 478:armwave.c     ****     
 2455              		.loc 1 478 11 is_stmt 0 view .LVU627
 2456 0b3c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2457              	@ armwave.c:481:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2458              		.loc 1 481 5 view .LVU628
 2459 0b40 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2460              	.LVL149:
 2461              		.loc 1 481 5 view .LVU629
 2462 0b44 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2463              	.LVL150:
 2464              		.loc 1 481 5 view .LVU630
 2465              		.cfi_endproc
 2466              	.LFE72:
 2468              		.align	2
 2469              		.global	armwave_test_buffer_alloc
 2470              		.syntax unified
 2471              		.arm
 2472              		.fpu vfp
 2474              	armwave_test_buffer_alloc:
 2475              	.LVL151:
 2476              	.LFB73:
 482:armwave.c     **** }
 483:armwave.c     **** 
 484:armwave.c     **** /*
 485:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 486:armwave.c     ****  */
 487:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 488:armwave.c     **** {
 2477              		.loc 1 488 1 is_stmt 1 view -0
 2478              		.cfi_startproc
 2479              		@ args = 0, pretend = 0, frame = 0
 2480              		@ frame_needed = 0, uses_anonymous_args = 0
 489:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2481              		.loc 1 489 5 view .LVU632
 2482              	@ armwave.c:488: {
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2483              		.loc 1 488 1 is_stmt 0 view .LVU633
 2484 0b48 70402DE9 		push	{r4, r5, r6, lr}	@
 2485              		.cfi_def_cfa_offset 16
 2486              		.cfi_offset 4, -16
 2487              		.cfi_offset 5, -12
 2488              		.cfi_offset 6, -8
 2489              		.cfi_offset 14, -4
 2490              	@ armwave.c:488: {
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2491              		.loc 1 488 1 view .LVU634
 2492 0b4c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2493              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 2494              		.loc 1 489 23 view .LVU635
 2495 0b50 44409FE5 		ldr	r4, .L148	@ tmp128,
 2496 0b54 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2497              	.LVL152:
 2498              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 2499              		.loc 1 489 7 view .LVU636
 2500 0b58 000050E3 		cmp	r0, #0	@ _1,
 2501 0b5c 0000000A 		beq	.L142		@,
 490:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2502              		.loc 1 490 9 is_stmt 1 view .LVU637
 2503 0b60 FEFFFFEB 		bl	free		@
 2504              	.LVL153:
 2505              	.L142:
 491:armwave.c     ****     }
 492:armwave.c     **** 
 493:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 494:armwave.c     **** 
 495:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2506              		.loc 1 495 5 view .LVU638
 2507              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2508              		.loc 1 495 75 is_stmt 0 view .LVU639
 2509 0b64 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2510 0b68 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2511              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2512              		.loc 1 495 40 view .LVU640
 2513 0b6c 0610A0E1 		mov	r1, r6	@, nsets
 2514              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2515              		.loc 1 495 75 view .LVU641
 2516 0b70 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2517              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2518              		.loc 1 495 40 view .LVU642
 2519 0b74 0500A0E1 		mov	r0, r5	@, _4
 2520 0b78 FEFFFFEB 		bl	calloc		@
 2521              	.LVL154:
 2522              	@ armwave.c:497:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     **** 
 497:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2523              		.loc 1 497 7 view .LVU643
 2524 0b7c 000050E3 		cmp	r0, #0	@ tmp124,
 2525              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2526              		.loc 1 495 38 view .LVU644
 2527 0b80 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2528              		.loc 1 497 5 is_stmt 1 view .LVU645
 2529              	@ armwave.c:497:     if(g_armwave_state.test_wave_buffer == NULL) {
 2530              		.loc 1 497 7 is_stmt 0 view .LVU646
 2531 0b84 7080BD18 		popne	{r4, r5, r6, pc}	@
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2532              		.loc 1 498 9 is_stmt 1 view .LVU647
 2533 0b88 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2534 0b8c 0620A0E1 		mov	r2, r6	@, nsets
 2535 0b90 08009FE5 		ldr	r0, .L148+4	@,
 2536              	@ armwave.c:502: }
 499:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 500:armwave.c     ****         return;
 501:armwave.c     ****     }
 502:armwave.c     **** }
 2537              		.loc 1 502 1 is_stmt 0 view .LVU648
 2538 0b94 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2539              		.cfi_restore 14
 2540              		.cfi_restore 6
 2541              		.cfi_restore 5
 2542              		.cfi_restore 4
 2543              		.cfi_def_cfa_offset 0
 2544              	.LVL155:
 2545              	@ armwave.c:498:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2546              		.loc 1 498 9 view .LVU649
 2547 0b98 FEFFFFEA 		b	printf		@
 2548              	.LVL156:
 2549              	.L149:
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2550              		.loc 1 498 9 view .LVU650
 2551              		.align	2
 2552              	.L148:
 2553 0b9c 00000000 		.word	g_armwave_state
 2554 0ba0 E8010000 		.word	.LC18
 2555              		.cfi_endproc
 2556              	.LFE73:
 2558              		.align	2
 2559              		.global	armwave_fill_pixbuf_into_pybuffer
 2560              		.syntax unified
 2561              		.arm
 2562              		.fpu vfp
 2564              	armwave_fill_pixbuf_into_pybuffer:
 2565              	.LVL157:
 2566              	.LFB74:
 503:armwave.c     **** 
 504:armwave.c     **** /*
 505:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 506:armwave.c     ****  */
 507:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 508:armwave.c     **** {
 2567              		.loc 1 508 1 is_stmt 1 view -0
 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 48
 2570              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     Py_buffer buffer;
 2571              		.loc 1 509 5 view .LVU652
 510:armwave.c     ****     int ret;
 2572              		.loc 1 510 5 view .LVU653
 511:armwave.c     **** 
 512:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 513:armwave.c     **** 
 514:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2573              		.loc 1 514 5 view .LVU654
 2574              	@ armwave.c:508: {
 508:armwave.c     ****     Py_buffer buffer;
 2575              		.loc 1 508 1 is_stmt 0 view .LVU655
 2576 0ba4 04E02DE5 		str	lr, [sp, #-4]!	@,
 2577              		.cfi_def_cfa_offset 4
 2578              		.cfi_offset 14, -4
 2579 0ba8 34D04DE2 		sub	sp, sp, #52	@,,
 2580              		.cfi_def_cfa_offset 56
 2581              	@ armwave.c:514:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2582              		.loc 1 514 11 view .LVU656
 2583 0bac 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2584 0bb0 0120A0E3 		mov	r2, #1	@,
 2585 0bb4 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2586              	.LVL158:
 515:armwave.c     **** 
 516:armwave.c     ****     if(ret != 0) {
 2587              		.loc 1 516 5 is_stmt 1 view .LVU657
 2588              	@ armwave.c:516:     if(ret != 0) {
 2589              		.loc 1 516 7 is_stmt 0 view .LVU658
 2590 0bb8 000050E3 		cmp	r0, #0	@,
 2591 0bbc 0A00001A 		bne	.L154		@,
 517:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 518:armwave.c     ****         Py_RETURN_FALSE;
 519:armwave.c     ****     }
 520:armwave.c     **** 
 521:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 522:armwave.c     **** 
 523:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2592              		.loc 1 523 5 is_stmt 1 view .LVU659
 2593 0bc0 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2594              	.LVL159:
 2595              		.loc 1 523 5 is_stmt 0 view .LVU660
 2596 0bc4 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2597              	.LVL160:
 524:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 525:armwave.c     **** 
 526:armwave.c     ****     PyBuffer_Release(&buffer);
 2598              		.loc 1 526 5 is_stmt 1 view .LVU661
 2599 0bc8 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2600 0bcc FEFFFFEB 		bl	PyBuffer_Release		@
 2601              	.LVL161:
 527:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 528:armwave.c     **** 
 529:armwave.c     ****     Py_RETURN_TRUE;
 2602              		.loc 1 529 5 view .LVU662
 2603              	.LBB31:
 2604              	.LBI31:
 2605              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2606              		.loc 2 456 20 view .LVU663
 2607              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2608              		.loc 2 458 21 view .LVU664
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2609              		.loc 2 459 5 view .LVU665
 2610              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2611              		.loc 2 459 18 is_stmt 0 view .LVU666
 2612 0bd0 38309FE5 		ldr	r3, .L155	@ tmp126,
 2613              	.LBE32:
 2614              	.LBE31:
 2615              	@ armwave.c:529:     Py_RETURN_TRUE;
 2616              		.loc 1 529 5 view .LVU667
 2617 0bd4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2618              	.LBB34:
 2619              	.LBB33:
 2620              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2621              		.loc 2 459 18 view .LVU668
 2622 0bd8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2623 0bdc 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2624 0be0 002083E5 		str	r2, [r3]	@ tmp128,
 2625              	.LBE33:
 2626              	.LBE34:
 2627              	@ armwave.c:530: }
 530:armwave.c     **** }
 2628              		.loc 1 530 1 view .LVU669
 2629 0be4 34D08DE2 		add	sp, sp, #52	@,,
 2630              		.cfi_remember_state
 2631              		.cfi_def_cfa_offset 4
 2632              		@ sp needed	@
 2633 0be8 04F09DE4 		ldr	pc, [sp], #4	@
 2634              	.LVL162:
 2635              	.L154:
 2636              		.cfi_restore_state
 517:armwave.c     ****         Py_RETURN_FALSE;
 2637              		.loc 1 517 9 is_stmt 1 view .LVU670
 2638 0bec 20009FE5 		ldr	r0, .L155+4	@,
 2639              	.LVL163:
 517:armwave.c     ****         Py_RETURN_FALSE;
 2640              		.loc 1 517 9 is_stmt 0 view .LVU671
 2641 0bf0 FEFFFFEB 		bl	puts		@
 2642              	.LVL164:
 518:armwave.c     ****     }
 2643              		.loc 1 518 9 is_stmt 1 view .LVU672
 2644              	.LBB35:
 2645              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2646              		.loc 2 456 20 view .LVU673
 2647              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2648              		.loc 2 458 21 view .LVU674
 2649              		.loc 2 459 5 view .LVU675
 2650              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2651              		.loc 2 459 18 is_stmt 0 view .LVU676
 2652 0bf4 1C309FE5 		ldr	r3, .L155+8	@ tmp120,
 2653              	.LBE36:
 2654              	.LBE35:
 2655              	@ armwave.c:518:         Py_RETURN_FALSE;
 518:armwave.c     ****     }
 2656              		.loc 1 518 9 view .LVU677
 2657 0bf8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2658              	.LBB38:
 2659              	.LBB37:
 2660              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2661              		.loc 2 459 18 view .LVU678
 2662 0bfc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2663 0c00 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2664 0c04 002083E5 		str	r2, [r3]	@ tmp122,
 2665              	.LBE37:
 2666              	.LBE38:
 2667              	@ armwave.c:530: }
 2668              		.loc 1 530 1 view .LVU679
 2669 0c08 34D08DE2 		add	sp, sp, #52	@,,
 2670              		.cfi_def_cfa_offset 4
 2671              		@ sp needed	@
 2672 0c0c 04F09DE4 		ldr	pc, [sp], #4	@
 2673              	.L156:
 2674              		.align	2
 2675              	.L155:
 2676 0c10 00000000 		.word	_Py_TrueStruct
 2677 0c14 3C020000 		.word	.LC19
 2678 0c18 00000000 		.word	_Py_FalseStruct
 2679              		.cfi_endproc
 2680              	.LFE74:
 2682              		.align	2
 2683              		.global	armwave_test_create_am_sine
 2684              		.syntax unified
 2685              		.arm
 2686              		.fpu vfp
 2688              	armwave_test_create_am_sine:
 2689              	.LVL165:
 2690              	.LFB75:
 531:armwave.c     **** 
 532:armwave.c     **** /*
 533:armwave.c     ****  * Make a test AM waveform for render tests.
 534:armwave.c     ****  *
 535:armwave.c     ****  * @param   mod                     modulation depth
 536:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 537:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 538:armwave.c     ****  */
 539:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 540:armwave.c     **** {
 2691              		.loc 1 540 1 is_stmt 1 view -0
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 8
 2694              		@ frame_needed = 0, uses_anonymous_args = 0
 541:armwave.c     ****     float v, noise, xnoise, mod_val;
 2695              		.loc 1 541 5 view .LVU681
 542:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2696              		.loc 1 542 5 view .LVU682
 2697              	@ armwave.c:540: {
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2698              		.loc 1 540 1 is_stmt 0 view .LVU683
 2699 0c1c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2700              		.cfi_def_cfa_offset 32
 2701              		.cfi_offset 4, -32
 2702              		.cfi_offset 5, -28
 2703              		.cfi_offset 6, -24
 2704              		.cfi_offset 7, -20
 2705              		.cfi_offset 8, -16
 2706              		.cfi_offset 9, -12
 2707              		.cfi_offset 10, -8
 2708              		.cfi_offset 14, -4
 2709              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2710              		.loc 1 542 38 view .LVU684
 2711 0c20 7A7A9FED 		vldr.32	s14, .L188	@ tmp180,
 2712              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2713              		.loc 1 542 55 view .LVU685
 2714 0c24 00529FE5 		ldr	r5, .L188+28	@ tmp250,
 2715              	@ armwave.c:540: {
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2716              		.loc 1 540 1 view .LVU686
 2717 0c28 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2718              		.cfi_def_cfa_offset 80
 2719              		.cfi_offset 80, -80
 2720              		.cfi_offset 81, -76
 2721              		.cfi_offset 82, -72
 2722              		.cfi_offset 83, -68
 2723              		.cfi_offset 84, -64
 2724              		.cfi_offset 85, -60
 2725              		.cfi_offset 86, -56
 2726              		.cfi_offset 87, -52
 2727              		.cfi_offset 88, -48
 2728              		.cfi_offset 89, -44
 2729              		.cfi_offset 90, -40
 2730              		.cfi_offset 91, -36
 2731 0c2c 0090A0E1 		mov	r9, r0	@ sets, sets
 2732              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2733              		.loc 1 542 38 view .LVU687
 2734 0c30 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2735              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 543:armwave.c     ****     int s, set_offset = 0;
 544:armwave.c     ****     int w, x;
 545:armwave.c     **** 
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2736              		.loc 1 546 70 view .LVU688
 2737 0c34 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2738 0c38 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2739              	.LBB41:
 2740              	.LBB42:
 2741              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2742              		.loc 1 489 23 view .LVU689
 2743 0c3c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2744              	.LVL166:
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2745              		.loc 1 489 23 view .LVU690
 2746              	.LBE42:
 2747              	.LBE41:
 2748              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 542:armwave.c     ****     int s, set_offset = 0;
 2749              		.loc 1 542 38 view .LVU691
 2750 0c40 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2751              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2752              		.loc 1 546 70 view .LVU692
 2753 0c44 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2754              	@ armwave.c:540: {
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2755              		.loc 1 540 1 view .LVU693
 2756 0c48 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2757              	.LBB46:
 2758              	.LBB43:
 2759              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2760              		.loc 1 489 7 view .LVU694
 2761 0c4c 000050E3 		cmp	r0, #0	@ _82,
 2762              	.LBE43:
 2763              	.LBE46:
 2764              	@ armwave.c:540: {
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2765              		.loc 1 540 1 view .LVU695
 2766 0c50 08D04DE2 		sub	sp, sp, #8	@,,
 2767              		.cfi_def_cfa_offset 88
 2768              	@ armwave.c:547:     g_armwave_state.test_wave_buffer_nsets = sets;
 547:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2769              		.loc 1 547 44 view .LVU696
 2770 0c54 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2771              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2772              		.loc 1 546 45 view .LVU697
 2773 0c58 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2774              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 542:armwave.c     ****     int s, set_offset = 0;
 2775              		.loc 1 542 38 view .LVU698
 2776 0c5c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2777              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 542:armwave.c     ****     int s, set_offset = 0;
 2778              		.loc 1 542 11 view .LVU699
 2779 0c60 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2780              	.LVL167:
 543:armwave.c     ****     int w, x;
 2781              		.loc 1 543 5 is_stmt 1 view .LVU700
 544:armwave.c     **** 
 2782              		.loc 1 544 5 view .LVU701
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2783              		.loc 1 546 5 view .LVU702
 2784              		.loc 1 547 5 view .LVU703
 548:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2785              		.loc 1 548 5 view .LVU704
 2786              	.LBB47:
 2787              	.LBI41:
 487:armwave.c     **** {
 2788              		.loc 1 487 6 view .LVU705
 2789              	.LBB44:
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2790              		.loc 1 489 5 view .LVU706
 2791              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2792              		.loc 1 489 7 is_stmt 0 view .LVU707
 2793 0c64 0000000A 		beq	.L158		@,
 490:armwave.c     ****     }
 2794              		.loc 1 490 9 is_stmt 1 view .LVU708
 2795 0c68 FEFFFFEB 		bl	free		@
 2796              	.LVL168:
 2797              	.L158:
 495:armwave.c     **** 
 2798              		.loc 1 495 5 view .LVU709
 2799              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2800              		.loc 1 495 75 is_stmt 0 view .LVU710
 2801 0c6c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2802 0c70 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2803              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2804              		.loc 1 495 40 view .LVU711
 2805 0c74 0910A0E1 		mov	r1, r9	@, sets
 2806              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2807              		.loc 1 495 75 view .LVU712
 2808 0c78 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2809              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2810              		.loc 1 495 40 view .LVU713
 2811 0c7c 0400A0E1 		mov	r0, r4	@, _85
 2812 0c80 FEFFFFEB 		bl	calloc		@
 2813              	.LVL169:
 2814              	@ armwave.c:497:     if(g_armwave_state.test_wave_buffer == NULL) {
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2815              		.loc 1 497 7 view .LVU714
 2816 0c84 000050E3 		cmp	r0, #0	@ tmp191,
 2817              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2818              		.loc 1 495 38 view .LVU715
 2819 0c88 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2820              		.loc 1 497 5 is_stmt 1 view .LVU716
 2821              	@ armwave.c:497:     if(g_armwave_state.test_wave_buffer == NULL) {
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2822              		.loc 1 497 7 is_stmt 0 view .LVU717
 2823 0c8c 5A00000A 		beq	.L187		@,
 2824              	.L159:
 2825              	.LVL170:
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2826              		.loc 1 497 7 view .LVU718
 2827              	.LBE44:
 2828              	.LBE47:
 2829              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 549:armwave.c     **** 
 550:armwave.c     ****     for(s = 0; s < sets; s++) {
 2830              		.loc 1 550 5 discriminator 1 view .LVU719
 2831 0c90 000059E3 		cmp	r9, #0	@ sets,
 2832 0c94 550000DA 		ble	.L157		@,
 2833              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 552:armwave.c     ****     
 553:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 554:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 555:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 556:armwave.c     **** 
 557:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 559:armwave.c     ****                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 561:armwave.c     ****                 noise *= noise;
 562:armwave.c     **** 
 563:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 564:armwave.c     ****                     noise = -noise;
 565:armwave.c     **** 
 566:armwave.c     ****                 noise += 1.0f;
 567:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 568:armwave.c     **** 
 569:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2834              		.loc 1 569 45 view .LVU720
 2835 0c98 5C8A9FED 		vldr.32	s16, .L188	@ tmp258,
 2836              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 571:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 572:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2837              		.loc 1 572 104 view .LVU721
 2838 0c9c 5CCA9FED 		vldr.32	s24, .L188+4	@ tmp259,
 2839              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2840              		.loc 1 550 5 view .LVU722
 2841 0ca0 0070A0E3 		mov	r7, #0	@ set_offset,
 2842              	@ armwave.c:551:         printf("Calculating test set %d\n", s);
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 2843              		.loc 1 551 9 view .LVU723
 2844 0ca4 84A19FE5 		ldr	r10, .L188+32	@ tmp257,
 2845              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2846              		.loc 1 550 5 view .LVU724
 2847 0ca8 0780A0E1 		mov	r8, r7	@ s, set_offset
 2848              	.LVL171:
 2849              	.L160:
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 2850              		.loc 1 551 9 is_stmt 1 view .LVU725
 2851 0cac 0810A0E1 		mov	r1, r8	@, s
 2852 0cb0 0A00A0E1 		mov	r0, r10	@, tmp257
 2853 0cb4 FEFFFFEB 		bl	printf		@
 2854              	.LVL172:
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2855              		.loc 1 553 9 view .LVU726
 2856              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2857              		.loc 1 553 39 is_stmt 0 view .LVU727
 2858 0cb8 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2859              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2860              		.loc 1 553 9 view .LVU728
 2861 0cbc 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2862 0cc0 450000DA 		ble	.L161		@,
 2863              	@ armwave.c:555:             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 2864              		.loc 1 555 21 view .LVU729
 2865 0cc4 53CADFED 		vldr.32	s25, .L188+8	@ tmp200,
 2866              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2867              		.loc 1 569 33 view .LVU730
 2868 0cc8 53BA9FED 		vldr.32	s22, .L188+12	@ tmp253,
 2869              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2870              		.loc 1 567 24 view .LVU731
 2871 0ccc 53AADFED 		vldr.32	s21, .L188+16	@ tmp254,
 2872 0cd0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2873              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2874              		.loc 1 553 15 view .LVU732
 2875 0cd4 0060A0E3 		mov	r6, #0	@ w,
 2876              	.LVL173:
 2877              	.L168:
 555:armwave.c     **** 
 2878              		.loc 1 555 13 is_stmt 1 view .LVU733
 2879              	@ armwave.c:555:             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 2880              		.loc 1 555 21 is_stmt 0 view .LVU734
 2881 0cd8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2882 0cdc 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2883              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2884              		.loc 1 557 13 view .LVU735
 2885 0ce0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2886              	@ armwave.c:555:             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 2887              		.loc 1 555 21 view .LVU736
 2888 0ce4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2889 0ce8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2890              	.LVL174:
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2891              		.loc 1 557 13 is_stmt 1 view .LVU737
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2892              		.loc 1 557 13 is_stmt 0 view .LVU738
 2893 0cec 370000DA 		ble	.L162		@,
 2894 0cf0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2895              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2896              		.loc 1 572 113 view .LVU739
 2897 0cf4 4AAA9FED 		vldr.32	s20, .L188+20	@ tmp229,
 2898 0cf8 4A8ADFED 		vldr.32	s17, .L188+24	@ tmp230,
 2899              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2900              		.loc 1 557 19 view .LVU740
 2901 0cfc 0040A0E3 		mov	r4, #0	@ x,
 2902              	.LVL175:
 2903              	.L167:
 558:armwave.c     ****                 noise *= noise;
 2904              		.loc 1 558 17 is_stmt 1 view .LVU741
 2905              	@ armwave.c:558:                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 2906              		.loc 1 558 28 is_stmt 0 view .LVU742
 2907 0d00 FEFFFFEB 		bl	rand		@
 2908              	.LVL176:
 2909              	@ armwave.c:558:                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 2910              		.loc 1 558 35 view .LVU743
 2911 0d04 7000FFE6 		uxth	r0, r0	@ tmp201,
 2912              	@ armwave.c:558:                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 2913              		.loc 1 558 45 view .LVU744
 2914 0d08 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2915 0d0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2916              	@ armwave.c:558:                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 2917              		.loc 1 558 24 view .LVU745
 2918 0d10 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2919              	.LVL177:
 559:armwave.c     ****                 noise *= noise;
 2920              		.loc 1 559 17 is_stmt 1 view .LVU746
 2921              	@ armwave.c:559:                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 2922              		.loc 1 559 23 is_stmt 0 view .LVU747
 2923 0d14 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2924              	.LVL178:
 560:armwave.c     ****                 noise *= noise;
 2925              		.loc 1 560 17 is_stmt 1 view .LVU748
 2926              	@ armwave.c:560:                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 2927              		.loc 1 560 23 is_stmt 0 view .LVU749
 2928 0d18 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2929              	.LVL179:
 561:armwave.c     **** 
 2930              		.loc 1 561 17 is_stmt 1 view .LVU750
 2931              	@ armwave.c:561:                 noise *= noise;
 561:armwave.c     **** 
 2932              		.loc 1 561 23 is_stmt 0 view .LVU751
 2933 0d1c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2934              	.LVL180:
 563:armwave.c     ****                     noise = -noise;
 2935              		.loc 1 563 17 is_stmt 1 view .LVU752
 2936              	@ armwave.c:563:                 if((rand() & 0xffff) > 0x7fff)
 563:armwave.c     ****                     noise = -noise;
 2937              		.loc 1 563 21 is_stmt 0 view .LVU753
 2938 0d20 FEFFFFEB 		bl	rand		@
 2939              	.LVL181:
 564:armwave.c     **** 
 2940              		.loc 1 564 21 is_stmt 1 view .LVU754
 2941              	@ armwave.c:563:                 if((rand() & 0xffff) > 0x7fff)
 563:armwave.c     ****                     noise = -noise;
 2942              		.loc 1 563 19 is_stmt 0 view .LVU755
 2943 0d24 020910E3 		tst	r0, #32768	@,
 2944              	@ armwave.c:564:                     noise = -noise;
 564:armwave.c     **** 
 2945              		.loc 1 564 27 view .LVU756
 2946 0d28 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2947              	.LVL182:
 566:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2948              		.loc 1 566 17 is_stmt 1 view .LVU757
 567:armwave.c     **** 
 2949              		.loc 1 567 17 view .LVU758
 2950              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2951              		.loc 1 567 27 is_stmt 0 view .LVU759
 2952 0d2c FEFFFFEB 		bl	rand		@
 2953              	.LVL183:
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2954              		.loc 1 569 17 is_stmt 1 view .LVU760
 2955              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2956              		.loc 1 569 45 is_stmt 0 view .LVU761
 2957 0d30 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2958              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2959              		.loc 1 569 33 view .LVU762
 2960 0d34 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2961              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2962              		.loc 1 569 45 view .LVU763
 2963 0d38 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2964              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2965              		.loc 1 569 33 view .LVU764
 2966 0d3c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2967              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2968              		.loc 1 569 45 view .LVU765
 2969 0d40 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2970              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2971              		.loc 1 569 33 view .LVU766
 2972 0d44 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2973              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2974              		.loc 1 567 34 view .LVU767
 2975 0d48 7000FFE6 		uxth	r0, r0	@ tmp214,
 2976              	.LVL184:
 2977              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2978              		.loc 1 567 44 view .LVU768
 2979 0d4c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2980 0d50 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2981              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2982              		.loc 1 567 24 view .LVU769
 2983 0d54 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2984              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2985              		.loc 1 569 77 view .LVU770
 2986 0d58 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2987              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2988              		.loc 1 569 22 view .LVU771
 2989 0d5c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2990 0d60 FEFFFFEB 		bl	sin		@
 2991              	.LVL185:
 2992              		.loc 1 572 17 is_stmt 1 view .LVU772
 2993              	@ armwave.c:566:                 noise += 1.0f;
 566:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2994              		.loc 1 566 23 is_stmt 0 view .LVU773
 2995 0d64 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2996              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2997              		.loc 1 572 104 view .LVU774
 2998 0d68 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2999              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3000              		.loc 1 569 98 view .LVU775
 3001 0d6c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3002              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3003              		.loc 1 569 87 view .LVU776
 3004 0d70 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3005              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3006              		.loc 1 569 98 view .LVU777
 3007 0d74 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3008              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3009              		.loc 1 569 19 view .LVU778
 3010 0d78 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3011              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3012              		.loc 1 572 113 view .LVU779
 3013 0d7c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3014 0d80 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3015 0d84 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3016 0d88 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3017 0d8c 050000DA 		ble	.L164		@,
 3018              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3019              		.loc 1 572 104 discriminator 1 view .LVU780
 3020 0d90 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3021 0d94 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3022 0d98 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3023 0d9c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3024 0da0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3025 0da4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3026              	.L164:
 3027              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3028              		.loc 1 572 57 discriminator 12 view .LVU781
 3029 0da8 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3030              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3031              		.loc 1 572 102 discriminator 12 view .LVU782
 3032 0dac 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3033 0db0 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3034 0db4 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3035              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3036              		.loc 1 557 58 discriminator 12 view .LVU783
 3037 0db8 014084E2 		add	r4, r4, #1	@ x, x,
 3038              	.LVL186:
 3039              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3040              		.loc 1 572 102 discriminator 12 view .LVU784
 3041 0dbc 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3042              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3043              		.loc 1 557 43 discriminator 12 view .LVU785
 3044 0dc0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3045              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3046              		.loc 1 557 13 discriminator 12 view .LVU786
 3047 0dc4 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3048 0dc8 CCFFFFCA 		bgt	.L167		@,
 3049 0dcc 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3050              	.LVL187:
 3051              	.L162:
 3052              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3053              		.loc 1 553 48 discriminator 2 view .LVU787
 3054 0dd0 016086E2 		add	r6, r6, #1	@ w, w,
 3055              	.LVL188:
 3056              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3057              		.loc 1 553 9 discriminator 2 view .LVU788
 3058 0dd4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3059 0dd8 BEFFFFBA 		blt	.L168		@,
 3060              	.LVL189:
 3061              	.L161:
 573:armwave.c     ****             }
 574:armwave.c     ****         }
 575:armwave.c     **** 
 576:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3062              		.loc 1 576 9 is_stmt 1 discriminator 2 view .LVU789
 3063              	@ armwave.c:576:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3064              		.loc 1 576 46 is_stmt 0 discriminator 2 view .LVU790
 3065 0ddc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3066              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 3067              		.loc 1 550 27 discriminator 2 view .LVU791
 3068 0de0 018088E2 		add	r8, r8, #1	@ s, s,
 3069              	.LVL190:
 3070              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 3071              		.loc 1 550 5 discriminator 2 view .LVU792
 3072 0de4 080059E1 		cmp	r9, r8	@ sets, s
 3073              	@ armwave.c:576:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3074              		.loc 1 576 20 discriminator 2 view .LVU793
 3075 0de8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3076              	.LVL191:
 3077              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 3078              		.loc 1 550 5 discriminator 2 view .LVU794
 3079 0dec AEFFFF1A 		bne	.L160		@,
 3080              	.LVL192:
 3081              	.L157:
 3082              	@ armwave.c:578: }
 577:armwave.c     ****     }
 578:armwave.c     **** }
 3083              		.loc 1 578 1 view .LVU795
 3084 0df0 08D08DE2 		add	sp, sp, #8	@,,
 3085              		.cfi_remember_state
 3086              		.cfi_def_cfa_offset 80
 3087              		@ sp needed	@
 3088 0df4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3089              		.cfi_restore 90
 3090              		.cfi_restore 91
 3091              		.cfi_restore 88
 3092              		.cfi_restore 89
 3093              		.cfi_restore 86
 3094              		.cfi_restore 87
 3095              		.cfi_restore 84
 3096              		.cfi_restore 85
 3097              		.cfi_restore 82
 3098              		.cfi_restore 83
 3099              		.cfi_restore 80
 3100              		.cfi_restore 81
 3101              		.cfi_def_cfa_offset 32
 3102              	.LVL193:
 3103              		.loc 1 578 1 view .LVU796
 3104 0df8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3105              	.LVL194:
 3106              	.L187:
 3107              		.cfi_restore_state
 3108              	.LBB48:
 3109              	.LBB45:
 498:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3110              		.loc 1 498 9 is_stmt 1 view .LVU797
 3111 0dfc 940901E0 		mul	r1, r4, r9	@, _85, sets
 3112 0e00 0920A0E1 		mov	r2, r9	@, sets
 3113 0e04 28009FE5 		ldr	r0, .L188+36	@,
 3114 0e08 FEFFFFEB 		bl	printf		@
 3115              	.LVL195:
 500:armwave.c     ****     }
 3116              		.loc 1 500 9 view .LVU798
 3117 0e0c 9FFFFFEA 		b	.L159		@
 3118              	.L189:
 3119              		.align	2
 3120              	.L188:
 3121 0e10 0000803F 		.word	1065353216
 3122 0e14 00007F43 		.word	1132396544
 3123 0e18 0000003F 		.word	1056964608
 3124 0e1c C3F5C840 		.word	1086911939
 3125 0e20 38FFC74A 		.word	1254620984
 3126 0e24 0000FE42 		.word	1123942400
 3127 0e28 00000043 		.word	1124073472
 3128 0e2c 00000000 		.word	g_armwave_state
 3129 0e30 90020000 		.word	.LC20
 3130 0e34 E8010000 		.word	.LC18
 3131              	.LBE45:
 3132              	.LBE48:
 3133              		.cfi_endproc
 3134              	.LFE75:
 3136              		.align	2
 3137              		.global	armwave_cleanup
 3138              		.syntax unified
 3139              		.arm
 3140              		.fpu vfp
 3142              	armwave_cleanup:
 3143              	.LFB76:
 579:armwave.c     **** 
 580:armwave.c     **** /*
 581:armwave.c     ****  * Make a test square waveform.
 582:armwave.c     ****  *
 583:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 584:armwave.c     ****  */
 585:armwave.c     **** #if 0
 586:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 587:armwave.c     **** {
 588:armwave.c     ****     uint8_t v;
 589:armwave.c     ****     float noise, xnoise;
 590:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 591:armwave.c     ****     int w, x;
 592:armwave.c     **** 
 593:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 594:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 595:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 596:armwave.c     ****             noise *= noise;
 597:armwave.c     ****             noise *= noise;
 598:armwave.c     ****             noise *= noise;
 599:armwave.c     **** 
 600:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 601:armwave.c     ****                 noise = -noise;
 602:armwave.c     **** 
 603:armwave.c     ****             //noise += 1.0f;
 604:armwave.c     **** 
 605:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 606:armwave.c     ****                 new_level = 0.2f;
 607:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 608:armwave.c     ****                 new_level = 0.8f;
 609:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 610:armwave.c     ****                 new_level = 0.2f;
 611:armwave.c     ****             } else {
 612:armwave.c     ****                 new_level = 0.8f;
 613:armwave.c     ****             }
 614:armwave.c     **** 
 615:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 616:armwave.c     **** 
 617:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 618:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 619:armwave.c     ****         }
 620:armwave.c     ****     }
 621:armwave.c     **** }
 622:armwave.c     **** #endif
 623:armwave.c     **** 
 624:armwave.c     **** /*
 625:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 626:armwave.c     ****  */
 627:armwave.c     **** void armwave_cleanup()
 628:armwave.c     **** {
 3144              		.loc 1 628 1 view -0
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 0
 3147              		@ frame_needed = 0, uses_anonymous_args = 0
 629:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3148              		.loc 1 629 5 view .LVU800
 3149              	@ armwave.c:628: {
 628:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3150              		.loc 1 628 1 is_stmt 0 view .LVU801
 3151 0e38 10402DE9 		push	{r4, lr}	@
 3152              		.cfi_def_cfa_offset 8
 3153              		.cfi_offset 4, -8
 3154              		.cfi_offset 14, -4
 3155              	@ armwave.c:629:     free(g_armwave_state.out_pixbuf);
 3156              		.loc 1 629 25 view .LVU802
 3157 0e3c 34409FE5 		ldr	r4, .L192	@ tmp114,
 3158              	@ armwave.c:629:     free(g_armwave_state.out_pixbuf);
 3159              		.loc 1 629 5 view .LVU803
 3160 0e40 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3161 0e44 FEFFFFEB 		bl	free		@
 3162              	.LVL196:
 630:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3163              		.loc 1 630 5 is_stmt 1 view .LVU804
 3164 0e48 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3165 0e4c FEFFFFEB 		bl	free		@
 3166              	.LVL197:
 631:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3167              		.loc 1 631 5 view .LVU805
 3168 0e50 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3169 0e54 FEFFFFEB 		bl	free		@
 3170              	.LVL198:
 632:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3171              		.loc 1 632 5 view .LVU806
 3172 0e58 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3173 0e5c FEFFFFEB 		bl	free		@
 3174              	.LVL199:
 633:armwave.c     **** 
 634:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3175              		.loc 1 634 5 view .LVU807
 3176              	@ armwave.c:634:     g_armwave_state.out_pixbuf = NULL;
 3177              		.loc 1 634 32 is_stmt 0 view .LVU808
 3178 0e60 0030A0E3 		mov	r3, #0	@ tmp123,
 3179 0e64 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 635:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3180              		.loc 1 635 5 is_stmt 1 view .LVU809
 3181              	@ armwave.c:635:     g_armwave_state.ch1_buffer = NULL;
 3182              		.loc 1 635 32 is_stmt 0 view .LVU810
 3183 0e68 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 636:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3184              		.loc 1 636 5 is_stmt 1 view .LVU811
 3185              	@ armwave.c:636:     g_armwave_state.xcoord_to_xpixel = NULL;
 3186              		.loc 1 636 38 is_stmt 0 view .LVU812
 3187 0e6c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 637:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3188              		.loc 1 637 5 is_stmt 1 view .LVU813
 3189              	@ armwave.c:637:     g_armwave_state.test_wave_buffer = NULL;
 3190              		.loc 1 637 38 is_stmt 0 view .LVU814
 3191 0e70 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3192              	@ armwave.c:638: }
 638:armwave.c     **** }
 3193              		.loc 1 638 1 view .LVU815
 3194 0e74 1080BDE8 		pop	{r4, pc}	@
 3195              	.L193:
 3196              		.align	2
 3197              	.L192:
 3198 0e78 00000000 		.word	g_armwave_state
 3199              		.cfi_endproc
 3200              	.LFE76:
 3202              		.comm	gamma_table,256,4
 3203              		.comm	g_armwave_state,136,4
 3204              		.section	.rodata
 3205              		.align	2
 3206              		.set	.LANCHOR0,. + 0
 3209              	__PRETTY_FUNCTION__.17096:
 3210 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3210      6176655F 
 3210      66696C6C 
 3210      5F706978 
 3210      6275665F 
 3211 001b 00       		.space	1
 3214              	__PRETTY_FUNCTION__.17126:
 3215 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3215      6176655F 
 3215      73657475 
 3215      705F7265 
 3215      6E646572 
 3216 0031 000000   		.space	3
 3219              	__PRETTY_FUNCTION__.17133:
 3220 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3220      6176655F 
 3220      7365745F 
 3220      77617665 
 3220      5F706F69 
 3221 004d 000000   		.space	3
 3224              	__PRETTY_FUNCTION__.17140:
 3225 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3225      6176655F 
 3225      7365745F 
 3225      77617665 
 3225      5F706F69 
 3226              		.section	.rodata.str1.4,"aMS",%progbits,1
 3227              		.align	2
 3228              	.LC0:
 3229 0000 76302E30 		.ascii	"v0.0.1\000"
 3229      2E3100
 3230 0007 00       		.space	1
 3231              	.LC1:
 3232 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3232      61766520 
 3232      76657273 
 3232      696F6E3A 
 3232      2025730A 
 3233 001d 000000   		.space	3
 3234              	.LC2:
 3235 0020 61726D77 		.ascii	"armwave.c\000"
 3235      6176652E 
 3235      6300
 3236 002a 0000     		.space	2
 3237              	.LC3:
 3238 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3238      62756666 
 3238      65722021 
 3238      3D204E55 
 3238      4C4C00
 3239 003f 00       		.space	1
 3240              	.LC4:
 3241 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3241      20653D25 
 3241      6420773D 
 3241      25642077 
 3241      733D2564 
 3242              	.LC5:
 3243 006c 73746172 		.ascii	"start_point < end_point\000"
 3243      745F706F 
 3243      696E7420 
 3243      3C20656E 
 3243      645F706F 
 3244              	.LC6:
 3245 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3245      7566665F 
 3245      73697A65 
 3245      3D25642C 
 3245      20636D70 
 3246 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3246      5F776964 
 3246      74683D25 
 3246      642C2077 
 3246      6176655F 
 3247 00e1 000000   		.space	3
 3248              	.LC7:
 3249 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3249      6D776176 
 3249      655F7374 
 3249      6174652E 
 3249      6368315F 
 3250 0107 00       		.space	1
 3251              	.LC8:
 3252 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3252      6D776176 
 3252      655F7374 
 3252      6174652E 
 3252      78636F6F 
 3253 0131 000000   		.space	3
 3254              	.LC9:
 3255 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3255      3A203078 
 3255      25303878 
 3255      20307825 
 3255      30387820 
 3256              	.LC10:
 3257 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3257      5F627566 
 3257      66657220 
 3257      213D204E 
 3257      554C4C00 
 3258              	.LC11:
 3259 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3259      6176655F 
 3259      7365745F 
 3259      77617665 
 3259      5F706F69 
 3260 019f 78636565 		.ascii	"xceeded\000"
 3260      64656400 
 3261 01a7 00       		.space	1
 3262              	.LC12:
 3263 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3263      5F627566 
 3263      6665725F 
 3263      70747220 
 3263      213D2030 
 3264 01bd 000000   		.space	3
 3265              	.LC13:
 3266 01c0 776200   		.ascii	"wb\000"
 3267 01c3 00       		.space	1
 3268              	.LC14:
 3269 01c4 50330A00 		.ascii	"P3\012\000"
 3270              	.LC15:
 3271 01c8 25642025 		.ascii	"%d %d\012\000"
 3271      640A00
 3272 01cf 00       		.space	1
 3273              	.LC16:
 3274 01d0 3235350A 		.ascii	"255\012\000"
 3274      00
 3275 01d5 000000   		.space	3
 3276              	.LC17:
 3277 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3277      25336420 
 3277      2533640A 
 3277      00
 3278 01e5 000000   		.space	3
 3279              	.LC18:
 3280 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3280      6176655F 
 3280      74657374 
 3280      5F627566 
 3280      6665725F 
 3281 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3281      20627566 
 3281      66657220 
 3281      28256420 
 3281      62797465 
 3282              	.LC19:
 3283 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3283      6176655F 
 3283      66696C6C 
 3283      5F706978 
 3283      6275665F 
 3284 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3284      20666169 
 3284      6C65642C 
 3284      20726574 
 3284      75726E69 
 3285 028e 0000     		.space	2
 3286              	.LC20:
 3287 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3287      756C6174 
 3287      696E6720 
 3287      74657374 
 3287      20736574 
 3288              		.text
 3289              	.Letext0:
 3290              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3291              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3292              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3293              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3294              		.file 7 "/usr/include/stdio.h"
 3295              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3296              		.file 9 "/usr/include/errno.h"
 3297              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3298              		.file 11 "/usr/include/unistd.h"
 3299              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3300              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3301              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3302              		.file 15 "/usr/include/math.h"
 3303              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3304              		.file 17 "/usr/include/time.h"
 3305              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3306              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3307              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3308              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3309              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3310              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3311              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3312              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3313              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3314              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3315              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3316              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3317              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3318              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3319              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3320              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3321              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3322              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3323              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3324              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3325              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3326              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3327              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3328              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3329              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3330              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3331              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3332              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3333              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3334              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3335              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3336              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3337              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3338              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3339              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3340              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3341              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3342              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3343              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3344              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3345              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3346              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3347              		.file 60 "/usr/local/include/python3.8/context.h"
 3348              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3349              		.file 62 "/usr/local/include/python3.8/code.h"
 3350              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3351              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3352              		.file 65 "/usr/local/include/python3.8/import.h"
 3353              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3354              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3355              		.file 68 "/usr/include/malloc.h"
 3356              		.file 69 "armwave.h"
 3357              		.file 70 "/usr/include/stdlib.h"
 3358              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3359              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3360              		.file 73 "<built-in>"
 3361              		.file 74 "/usr/include/assert.h"
