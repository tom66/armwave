   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** #define TEST_WAVE_SIZE              2048
  27:armwave.c     **** 
  28:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  29:armwave.c     **** 
  30:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  31:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  32:armwave.c     **** 
  33:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  34:armwave.c     **** 
  35:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  36:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  37:armwave.c     **** 
  38:armwave.c     **** struct armwave_state_t g_armwave_state;
  39:armwave.c     **** 
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.41,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.41,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.41,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.41
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.41, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     **** 
  81:armwave.c     ****     //printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 82 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 249              		.loc 1 82 40 view .LVU32
 250 00a0 D0409FE5 		ldr	r4, .L23	@ tmp242,
 251              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  83:armwave.c     **** 
  84:armwave.c     ****     // roll through each waveform
  85:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 252              		.loc 1 85 5 view .LVU33
 253 00a4 2C2094E5 		ldr	r2, [r4, #44]	@ g_armwave_state.waves, g_armwave_state.waves
 254              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 255              		.loc 1 82 63 view .LVU34
 256 00a8 345094E5 		ldr	r5, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 257              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 85 5 view .LVU35
 259 00ac 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 261              		.loc 1 82 40 view .LVU36
 262 00b0 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 264              		.loc 1 82 63 view .LVU37
 265 00b4 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 266              	.LVL7:
 267              		.loc 1 85 5 is_stmt 1 view .LVU38
 268              		.loc 1 85 5 is_stmt 0 view .LVU39
 269 00b8 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 270 00bc 000051E3 		cmp	r1, #0	@ height,
 271 00c0 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 272 00c4 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 273              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 85 11 view .LVU40
 275 00c8 0070A0E3 		mov	r7, #0	@ w,
 276              	.LVL8:
 277              	.L15:
  86:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 87 9 is_stmt 1 view .LVU41
  88:armwave.c     **** 
  89:armwave.c     ****         // roll through y and render the slice into the out buffer
  90:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  91:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 279              		.loc 1 91 9 view .LVU42
 280              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 281              		.loc 1 87 64 is_stmt 0 view .LVU43
 282 00cc 280094E5 		ldr	r0, [r4, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 283 00d0 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 284              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
 285              		.loc 1 91 16 view .LVU44
 286 00d4 0020A0E3 		mov	r2, #0	@ yy,
 287 00d8 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 288 00dc 006086E0 		add	r6, r6, r0	@ ivtmp.48, g_armwave_state.wave_buffer, tmp193
 289              	.LVL9:
 290              	.L14:
  92:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 291              		.loc 1 92 13 is_stmt 1 view .LVU45
 292              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
 293              		.loc 1 92 18 is_stmt 0 view .LVU46
 294 00e0 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 295              	.LVL10:
  93:armwave.c     **** 
  94:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 296              		.loc 1 94 13 is_stmt 1 view .LVU47
  95:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  96:armwave.c     ****                 scale_value = (word & 0xff);
 297              		.loc 1 96 17 view .LVU48
  97:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 298              		.loc 1 97 17 view .LVU49
  98:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 299              		.loc 1 98 17 view .LVU50
 300              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 97 63 is_stmt 0 view .LVU51
 302 00e4 349094E5 		ldr	r9, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 303 00e8 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 304              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 98 47 view .LVU52
 306 00ec 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 307 00f0 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 308              	@ armwave.c:99:                 word >>= 8;
  99:armwave.c     ****                 word >>= 8;
 309              		.loc 1 99 22 view .LVU53
 310 00f4 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 311 00f8 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 312              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 313              		.loc 1 98 47 view .LVU54
 314 00fc 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 315 0100 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 316 0104 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 317 0108 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 318              	.LVL11:
 319              		.loc 1 99 17 is_stmt 1 view .LVU55
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 320              		.loc 1 96 17 view .LVU56
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 97 17 view .LVU57
  98:armwave.c     ****                 word >>= 8;
 322              		.loc 1 98 17 view .LVU58
 323              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 97 63 is_stmt 0 view .LVU59
 325 010c 34E094E5 		ldr	lr, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 326              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 327              		.loc 1 98 47 view .LVU60
 328 0110 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 329 0114 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 330              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 97 63 view .LVU61
 332 0118 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 333 011c 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 334              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 335              		.loc 1 98 47 view .LVU62
 336 0120 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 337 0124 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 338              	.LVL12:
 339              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 340              		.loc 1 91 37 view .LVU63
 341 0128 042082E2 		add	r2, r2, #4	@ yy, yy,
 342              	.LVL13:
 343              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 344              		.loc 1 98 47 view .LVU64
 345 012c 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 346 0130 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 347              	.LVL14:
 348              		.loc 1 99 17 is_stmt 1 view .LVU65
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 349              		.loc 1 96 17 view .LVU66
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 350              		.loc 1 97 17 view .LVU67
  98:armwave.c     ****                 word >>= 8;
 351              		.loc 1 98 17 view .LVU68
 352              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 97 63 is_stmt 0 view .LVU69
 354 0134 34E094E5 		ldr	lr, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 355              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 356              		.loc 1 91 9 view .LVU70
 357 0138 020051E1 		cmp	r1, r2	@ height, yy
 358              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 359              		.loc 1 98 47 view .LVU71
 360 013c 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 361 0140 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 362 0144 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 363 0148 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 364              		.loc 1 99 17 is_stmt 1 view .LVU72
 365              	.LVL15:
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 366              		.loc 1 96 17 view .LVU73
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 367              		.loc 1 97 17 view .LVU74
  98:armwave.c     ****                 word >>= 8;
 368              		.loc 1 98 17 view .LVU75
 369              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 97 63 is_stmt 0 view .LVU76
 371 014c 34C094E5 		ldr	ip, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 372              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 373              		.loc 1 98 47 view .LVU77
 374 0150 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 375 0154 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 376 0158 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 377 015c 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 378              		.loc 1 99 17 is_stmt 1 view .LVU78
 379              	.LVL16:
 380              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 381              		.loc 1 91 9 is_stmt 0 view .LVU79
 382 0160 DEFFFF8A 		bhi	.L14		@,
 383              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 384              		.loc 1 85 5 view .LVU80
 385 0164 2C2094E5 		ldr	r2, [r4, #44]	@ g_armwave_state.waves, g_armwave_state.waves
 386              	.LVL17:
 387              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 388              		.loc 1 85 44 view .LVU81
 389 0168 017087E2 		add	r7, r7, #1	@ w, w,
 390              	.LVL18:
 391              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 392              		.loc 1 85 5 view .LVU82
 393 016c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 394 0170 D5FFFF3A 		bcc	.L15		@,
 395 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 396              	.L24:
 397              		.align	2
 398              	.L23:
 399 0178 00000000 		.word	g_armwave_state
 400              		.cfi_endproc
 401              	.LFE59:
 403              		.align	2
 404              		.global	armwave_fill_pixbuf_256
 405              		.syntax unified
 406              		.arm
 407              		.fpu vfp
 409              	armwave_fill_pixbuf_256:
 410              	.LVL19:
 411              	.LFB60:
 100:armwave.c     ****             }
 101:armwave.c     ****         }
 102:armwave.c     ****     }
 103:armwave.c     **** }
 104:armwave.c     **** 
 105:armwave.c     **** /*
 106:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 107:armwave.c     ****  */
 108:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 109:armwave.c     **** {
 412              		.loc 1 109 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 110:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 416              		.loc 1 110 5 view .LVU84
 111:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 417              		.loc 1 111 5 view .LVU85
 112:armwave.c     ****     uint8_t r, g, b, value;
 418              		.loc 1 112 5 view .LVU86
 113:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 419              		.loc 1 113 5 view .LVU87
 420              	@ armwave.c:109: {
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 421              		.loc 1 109 1 is_stmt 0 view .LVU88
 422 017c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 423              		.cfi_def_cfa_offset 36
 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 8, -20
 429              		.cfi_offset 9, -16
 430              		.cfi_offset 10, -12
 431              		.cfi_offset 11, -8
 432              		.cfi_offset 14, -4
 433              	@ armwave.c:117:     assert(out_buffer != NULL);
 114:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 115:armwave.c     ****     uint32_t offset;
 116:armwave.c     **** 
 117:armwave.c     ****     assert(out_buffer != NULL);
 434              		.loc 1 117 5 view .LVU89
 435 0180 000050E3 		cmp	r0, #0	@ out_buffer
 436              	@ armwave.c:113:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 437              		.loc 1 113 15 view .LVU90
 438 0184 44529FE5 		ldr	r5, .L52	@ tmp360,
 439              	@ armwave.c:109: {
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 440              		.loc 1 109 1 view .LVU91
 441 0188 0CD04DE2 		sub	sp, sp, #12	@,,
 442              		.cfi_def_cfa_offset 48
 443              	@ armwave.c:113:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 444              		.loc 1 113 15 view .LVU92
 445 018c 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 446              	.LVL20:
 114:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 447              		.loc 1 114 5 is_stmt 1 view .LVU93
 115:armwave.c     **** 
 448              		.loc 1 115 5 view .LVU94
 449              		.loc 1 117 5 view .LVU95
 450 0190 8900000A 		beq	.L50		@,
 118:armwave.c     **** 
 119:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 120:armwave.c     **** 
 121:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 451              		.loc 1 121 5 view .LVU96
 452              	@ armwave.c:121:     npix = g_armwave_state.target_width * 256;
 453              		.loc 1 121 41 is_stmt 0 view .LVU97
 454 0194 4CC095E5 		ldr	ip, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 455 0198 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 456              	.LVL21:
 122:armwave.c     **** 
 123:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 457              		.loc 1 123 5 is_stmt 1 view .LVU98
 458              		.loc 1 123 5 is_stmt 0 view .LVU99
 459 019c 00005CE3 		cmp	ip, #0	@ npix,
 460 01a0 0A0000DA 		ble	.L25		@,
 461              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 124:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 125:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 126:armwave.c     ****         // most normal waveforms.
 127:armwave.c     ****         wave_word = *base_32ptr++;
 128:armwave.c     **** 
 129:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 130:armwave.c     ****             for(i = 0; i < 4; i++) {
 131:armwave.c     ****                 value = wave_word & 0xff;
 132:armwave.c     ****                 wave_word >>= 8;
 133:armwave.c     **** 
 134:armwave.c     ****                 if(value != 0) {
 135:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 462              		.loc 1 135 52 view .LVU100
 463 01a4 F0A6D5E1 		ldrsh	r10, [r5, #96]	@ _70, g_armwave_state.ch1_color.r
 464              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 465              		.loc 1 136 52 view .LVU101
 466 01a8 F296D5E1 		ldrsh	r9, [r5, #98]	@ _76, g_armwave_state.ch1_color.g
 467              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 468              		.loc 1 137 52 view .LVU102
 469 01ac F4B6D5E1 		ldrsh	fp, [r5, #100]	@ _80, g_armwave_state.ch1_color.b
 470              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 471              		.loc 1 123 11 view .LVU103
 472 01b0 0030A0E3 		mov	r3, #0	@ n,
 473 01b4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 474              	.LVL22:
 475              	.L34:
 127:armwave.c     **** 
 476              		.loc 1 127 9 is_stmt 1 view .LVU104
 477              	@ armwave.c:127:         wave_word = *base_32ptr++;
 127:armwave.c     **** 
 478              		.loc 1 127 19 is_stmt 0 view .LVU105
 479 01b8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 480              	.LVL23:
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 481              		.loc 1 129 9 is_stmt 1 view .LVU106
 482              	@ armwave.c:129:         if(COND_UNLIKELY(wave_word != 0)) {
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 483              		.loc 1 129 11 is_stmt 0 view .LVU107
 484 01bc 000052E3 		cmp	r2, #0	@ wave_word,
 485 01c0 0400001A 		bne	.L51		@,
 486              	.LVL24:
 487              	.L29:
 488              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 489              		.loc 1 123 28 discriminator 2 view .LVU108
 490 01c4 043083E2 		add	r3, r3, #4	@ n, n,
 491              	.LVL25:
 492              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 493              		.loc 1 123 5 discriminator 2 view .LVU109
 494 01c8 03005CE1 		cmp	ip, r3	@ npix, n
 495 01cc F9FFFFCA 		bgt	.L34		@,
 496              	.LVL26:
 497              	.L25:
 498              	@ armwave.c:156: }
 138:armwave.c     **** 
 139:armwave.c     ****                     r = MIN(rr, 255);
 140:armwave.c     ****                     g = MIN(gg, 255);
 141:armwave.c     ****                     b = MIN(bb, 255);
 142:armwave.c     **** 
 143:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 144:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 145:armwave.c     **** 
 146:armwave.c     ****                     // Is there a better way?
 147:armwave.c     ****                     nsub = n + i;
 148:armwave.c     ****                     xx = nsub & 0xff;
 149:armwave.c     ****                     yy = nsub >> 8;
 150:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 151:armwave.c     ****                     *(out_buffer_base + offset) = word;
 152:armwave.c     ****                 }
 153:armwave.c     ****             }
 154:armwave.c     ****         } 
 155:armwave.c     ****     }
 156:armwave.c     **** }
 499              		.loc 1 156 1 view .LVU110
 500 01d0 0CD08DE2 		add	sp, sp, #12	@,,
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed	@
 504 01d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 505              	.LVL27:
 506              	.L51:
 507              		.cfi_restore_state
 131:armwave.c     ****                 wave_word >>= 8;
 508              		.loc 1 131 17 is_stmt 1 view .LVU111
 132:armwave.c     **** 
 509              		.loc 1 132 17 view .LVU112
 510              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 511              		.loc 1 134 19 is_stmt 0 view .LVU113
 512 01d8 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 513              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 514              		.loc 1 132 27 view .LVU114
 515 01dc 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 516              	.LVL28:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 517              		.loc 1 134 17 is_stmt 1 view .LVU115
 518              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 519              		.loc 1 134 19 is_stmt 0 view .LVU116
 520 01e0 1900000A 		beq	.L30		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 521              		.loc 1 135 21 is_stmt 1 view .LVU117
 522              	.LVL29:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 523              		.loc 1 136 21 view .LVU118
 137:armwave.c     **** 
 524              		.loc 1 137 21 view .LVU119
 139:armwave.c     ****                     g = MIN(gg, 255);
 525              		.loc 1 139 21 view .LVU120
 140:armwave.c     ****                     b = MIN(bb, 255);
 526              		.loc 1 140 21 view .LVU121
 141:armwave.c     **** 
 527              		.loc 1 141 21 view .LVU122
 144:armwave.c     **** 
 528              		.loc 1 144 21 view .LVU123
 147:armwave.c     ****                     xx = nsub & 0xff;
 529              		.loc 1 147 21 view .LVU124
 148:armwave.c     ****                     yy = nsub >> 8;
 530              		.loc 1 148 21 view .LVU125
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 531              		.loc 1 149 21 view .LVU126
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 532              		.loc 1 150 21 view .LVU127
 151:armwave.c     ****                 }
 533              		.loc 1 151 21 view .LVU128
 534              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 535              		.loc 1 137 55 is_stmt 0 view .LVU129
 536 01e4 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 537              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 538              		.loc 1 136 55 view .LVU130
 539 01e8 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 540              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 541              		.loc 1 137 24 view .LVU131
 542 01ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 543              	.LVL30:
 544              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 545              		.loc 1 141 25 view .LVU132
 546 01f0 FF0054E3 		cmp	r4, #255	@ bb,
 547              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 548              		.loc 1 136 24 view .LVU133
 549 01f4 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 550              	.LVL31:
 551              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 552              		.loc 1 141 25 view .LVU134
 553 01f8 FF40A0A3 		movge	r4, #255	@ bb,
 554              	.LVL32:
 555              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 556              		.loc 1 135 55 view .LVU135
 557 01fc 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 558              	.LVL33:
 559              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 560              		.loc 1 140 25 view .LVU136
 561 0200 FF0058E3 		cmp	r8, #255	@ gg,
 562 0204 FF80A0A3 		movge	r8, #255	@ gg,
 563              	.LVL34:
 564              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 565              		.loc 1 135 24 view .LVU137
 566 0208 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 567              	.LVL35:
 568              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 569              		.loc 1 144 56 view .LVU138
 570 020c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 571              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 572              		.loc 1 151 39 view .LVU139
 573 0210 4C0095E5 		ldr	r0, [r5, #76]	@ tmp372, g_armwave_state.target_width
 574              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 575              		.loc 1 144 44 view .LVU140
 576 0214 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 577              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 578              		.loc 1 139 25 view .LVU141
 579 0218 FF0056E3 		cmp	r6, #255	@ rr,
 580              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 581              		.loc 1 144 56 view .LVU142
 582 021c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 583              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 584              		.loc 1 148 24 view .LVU143
 585 0220 7370EFE6 		uxtb	r7, r3	@ xx, n
 586              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 587              		.loc 1 144 44 view .LVU144
 588 0224 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 589              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 590              		.loc 1 144 51 view .LVU145
 591 0228 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 592              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 593              		.loc 1 139 25 view .LVU146
 594 022c FF60A0A3 		movge	r6, #255	@ rr,
 595              	.LVL36:
 596              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 597              		.loc 1 149 31 view .LVU147
 598 0230 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 599              	.LVL37:
 600              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 601              		.loc 1 151 39 view .LVU148
 602 0234 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 603              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 604              		.loc 1 144 62 view .LVU149
 605 0238 7660EFE6 		uxtb	r6, r6	@ rr, rr
 606              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 607              		.loc 1 151 49 view .LVU150
 608 023c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 609              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 610              		.loc 1 144 62 view .LVU151
 611 0240 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 612              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 613              		.loc 1 144 26 view .LVU152
 614 0244 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 615              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 616              		.loc 1 151 49 view .LVU153
 617 0248 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 618              	.LVL38:
 619              	.L30:
 131:armwave.c     ****                 wave_word >>= 8;
 620              		.loc 1 131 17 is_stmt 1 view .LVU154
 132:armwave.c     **** 
 621              		.loc 1 132 17 view .LVU155
 622              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 134 19 is_stmt 0 view .LVU156
 624 024c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 625              	.LVL39:
 626              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 627              		.loc 1 132 27 view .LVU157
 628 0250 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 629              	.LVL40:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 630              		.loc 1 134 17 is_stmt 1 view .LVU158
 631              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 134 19 is_stmt 0 view .LVU159
 633 0254 1C00000A 		beq	.L31		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 135 21 is_stmt 1 view .LVU160
 635              	.LVL41:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 136 21 view .LVU161
 137:armwave.c     **** 
 637              		.loc 1 137 21 view .LVU162
 139:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 139 21 view .LVU163
 140:armwave.c     ****                     b = MIN(bb, 255);
 639              		.loc 1 140 21 view .LVU164
 141:armwave.c     **** 
 640              		.loc 1 141 21 view .LVU165
 144:armwave.c     **** 
 641              		.loc 1 144 21 view .LVU166
 147:armwave.c     ****                     xx = nsub & 0xff;
 642              		.loc 1 147 21 view .LVU167
 643              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 644              		.loc 1 137 55 is_stmt 0 view .LVU168
 645 0258 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 646              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 136 55 view .LVU169
 648 025c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 649              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 650              		.loc 1 137 24 view .LVU170
 651 0260 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 652              	.LVL42:
 653              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 654              		.loc 1 141 25 view .LVU171
 655 0264 FF0054E3 		cmp	r4, #255	@ bb,
 656 0268 FF40A0A3 		movge	r4, #255	@ bb,
 657              	.LVL43:
 658              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 659              		.loc 1 135 55 view .LVU172
 660 026c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 661              	.LVL44:
 662              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 136 24 view .LVU173
 664 0270 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 665              	.LVL45:
 666              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 667              		.loc 1 144 44 view .LVU174
 668 0274 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 669              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 670              		.loc 1 140 25 view .LVU175
 671 0278 FF0057E3 		cmp	r7, #255	@ gg,
 672 027c 016083E2 		add	r6, r3, #1	@ _158, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 673              		.loc 1 148 21 is_stmt 1 view .LVU176
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 674              		.loc 1 149 21 view .LVU177
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 675              		.loc 1 150 21 view .LVU178
 151:armwave.c     ****                 }
 676              		.loc 1 151 21 view .LVU179
 677              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 678              		.loc 1 144 44 is_stmt 0 view .LVU180
 679 0280 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 680              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 681              		.loc 1 140 25 view .LVU181
 682 0284 FF70A0A3 		movge	r7, #255	@ gg,
 683              	.LVL46:
 684              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 685              		.loc 1 144 44 view .LVU182
 686 0288 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 687              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 688              		.loc 1 151 39 view .LVU183
 689 028c 4C4095E5 		ldr	r4, [r5, #76]	@ tmp375, g_armwave_state.target_width
 690              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 691              		.loc 1 135 24 view .LVU184
 692 0290 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 693              	.LVL47:
 694              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 695              		.loc 1 148 24 view .LVU185
 696 0294 7600EFE6 		uxtb	r0, r6	@ xx, _158
 697              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 698              		.loc 1 139 25 view .LVU186
 699 0298 FF005EE3 		cmp	lr, #255	@ rr,
 700              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 701              		.loc 1 144 56 view .LVU187
 702 029c 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 703              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 704              		.loc 1 149 31 view .LVU188
 705 02a0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 706              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 707              		.loc 1 151 39 view .LVU189
 708 02a4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 709              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 139 25 view .LVU190
 711 02a8 FFE0A0A3 		movge	lr, #255	@ rr,
 712              	.LVL48:
 713              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 714              		.loc 1 144 51 view .LVU191
 715 02ac 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 716              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 717              		.loc 1 144 56 view .LVU192
 718 02b0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 719              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 720              		.loc 1 144 51 view .LVU193
 721 02b4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 722              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 723              		.loc 1 144 62 view .LVU194
 724 02b8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 725              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 726              		.loc 1 151 49 view .LVU195
 727 02bc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 728              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 729              		.loc 1 144 62 view .LVU196
 730 02c0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 731              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 732              		.loc 1 144 26 view .LVU197
 733 02c4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 734              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 735              		.loc 1 151 49 view .LVU198
 736 02c8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 737              	.LVL49:
 738              	.L31:
 131:armwave.c     ****                 wave_word >>= 8;
 739              		.loc 1 131 17 is_stmt 1 view .LVU199
 132:armwave.c     **** 
 740              		.loc 1 132 17 view .LVU200
 741              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 134 19 is_stmt 0 view .LVU201
 743 02cc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 744              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 745              		.loc 1 132 27 view .LVU202
 746 02d0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 747              	.LVL50:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 134 17 is_stmt 1 view .LVU203
 749              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 134 19 is_stmt 0 view .LVU204
 751 02d4 1A00000A 		beq	.L32		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 135 21 is_stmt 1 view .LVU205
 753              	.LVL51:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 136 21 view .LVU206
 137:armwave.c     **** 
 755              		.loc 1 137 21 view .LVU207
 139:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 139 21 view .LVU208
 140:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 140 21 view .LVU209
 141:armwave.c     **** 
 758              		.loc 1 141 21 view .LVU210
 144:armwave.c     **** 
 759              		.loc 1 144 21 view .LVU211
 147:armwave.c     ****                     xx = nsub & 0xff;
 760              		.loc 1 147 21 view .LVU212
 761              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 762              		.loc 1 137 55 is_stmt 0 view .LVU213
 763 02d8 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 764              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 765              		.loc 1 136 55 view .LVU214
 766 02dc 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 767              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 768              		.loc 1 137 24 view .LVU215
 769 02e0 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 770              	.LVL52:
 771              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 772              		.loc 1 135 55 view .LVU216
 773 02e4 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 774              	.LVL53:
 775              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 776              		.loc 1 141 25 view .LVU217
 777 02e8 FF0054E3 		cmp	r4, #255	@ bb,
 778              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 779              		.loc 1 136 24 view .LVU218
 780 02ec 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 781              	.LVL54:
 782              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 783              		.loc 1 141 25 view .LVU219
 784 02f0 FF40A0A3 		movge	r4, #255	@ bb,
 785              	.LVL55:
 786              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 787              		.loc 1 140 25 view .LVU220
 788 02f4 FF0056E3 		cmp	r6, #255	@ gg,
 789 02f8 FF60A0A3 		movge	r6, #255	@ gg,
 790              	.LVL56:
 140:armwave.c     ****                     b = MIN(bb, 255);
 791              		.loc 1 140 25 view .LVU221
 792 02fc 027083E2 		add	r7, r3, #2	@ _66, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 793              		.loc 1 148 21 is_stmt 1 view .LVU222
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 794              		.loc 1 149 21 view .LVU223
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 795              		.loc 1 150 21 view .LVU224
 151:armwave.c     ****                 }
 796              		.loc 1 151 21 view .LVU225
 797              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 798              		.loc 1 135 24 is_stmt 0 view .LVU226
 799 0300 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 800              	.LVL57:
 801              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 802              		.loc 1 151 39 view .LVU227
 803 0304 4C0095E5 		ldr	r0, [r5, #76]	@ tmp376, g_armwave_state.target_width
 804              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 805              		.loc 1 139 25 view .LVU228
 806 0308 FF005EE3 		cmp	lr, #255	@ rr,
 807              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 808              		.loc 1 148 24 view .LVU229
 809 030c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 810              	.LVL58:
 811              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 812              		.loc 1 144 56 view .LVU230
 813 0310 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 814              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 815              		.loc 1 144 44 view .LVU231
 816 0314 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 817              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 139 25 view .LVU232
 819 0318 FFE0A0A3 		movge	lr, #255	@ rr,
 820              	.LVL59:
 821              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 822              		.loc 1 149 31 view .LVU233
 823 031c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 824              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 825              		.loc 1 151 39 view .LVU234
 826 0320 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 827              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 828              		.loc 1 144 44 view .LVU235
 829 0324 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 830              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 831              		.loc 1 144 56 view .LVU236
 832 0328 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 833              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 834              		.loc 1 144 51 view .LVU237
 835 032c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 836              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 837              		.loc 1 144 62 view .LVU238
 838 0330 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 839              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 840              		.loc 1 151 49 view .LVU239
 841 0334 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 842              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 843              		.loc 1 144 62 view .LVU240
 844 0338 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 845              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 846              		.loc 1 144 26 view .LVU241
 847 033c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 848              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 849              		.loc 1 151 49 view .LVU242
 850 0340 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 851              	.L32:
 852              	.LVL60:
 131:armwave.c     ****                 wave_word >>= 8;
 853              		.loc 1 131 17 is_stmt 1 view .LVU243
 132:armwave.c     **** 
 854              		.loc 1 132 17 view .LVU244
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 855              		.loc 1 134 17 view .LVU245
 856              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 857              		.loc 1 134 19 is_stmt 0 view .LVU246
 858 0344 000052E3 		cmp	r2, #0	@ wave_word,
 859 0348 9DFFFF0A 		beq	.L29		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 860              		.loc 1 135 21 is_stmt 1 view .LVU247
 861              	.LVL61:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 862              		.loc 1 136 21 view .LVU248
 137:armwave.c     **** 
 863              		.loc 1 137 21 view .LVU249
 139:armwave.c     ****                     g = MIN(gg, 255);
 864              		.loc 1 139 21 view .LVU250
 140:armwave.c     ****                     b = MIN(bb, 255);
 865              		.loc 1 140 21 view .LVU251
 141:armwave.c     **** 
 866              		.loc 1 141 21 view .LVU252
 144:armwave.c     **** 
 867              		.loc 1 144 21 view .LVU253
 147:armwave.c     ****                     xx = nsub & 0xff;
 868              		.loc 1 147 21 view .LVU254
 869              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 870              		.loc 1 137 55 is_stmt 0 view .LVU255
 871 034c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 872              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 873              		.loc 1 136 55 view .LVU256
 874 0350 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 875              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 876              		.loc 1 137 24 view .LVU257
 877 0354 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 878              	.LVL62:
 879              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 880              		.loc 1 135 55 view .LVU258
 881 0358 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 882              	.LVL63:
 883              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 884              		.loc 1 141 25 view .LVU259
 885 035c FF005EE3 		cmp	lr, #255	@ bb,
 886              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 887              		.loc 1 136 24 view .LVU260
 888 0360 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 889              	.LVL64:
 890              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 891              		.loc 1 141 25 view .LVU261
 892 0364 FFE0A0A3 		movge	lr, #255	@ bb,
 893              	.LVL65:
 894              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 140 25 view .LVU262
 896 0368 FF0054E3 		cmp	r4, #255	@ gg,
 897 036c FF40A0A3 		movge	r4, #255	@ gg,
 898              	.LVL66:
 140:armwave.c     ****                     b = MIN(bb, 255);
 899              		.loc 1 140 25 view .LVU263
 900 0370 036083E2 		add	r6, r3, #3	@ _59, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 901              		.loc 1 148 21 is_stmt 1 view .LVU264
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 902              		.loc 1 149 21 view .LVU265
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 903              		.loc 1 150 21 view .LVU266
 151:armwave.c     ****                 }
 904              		.loc 1 151 21 view .LVU267
 905              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 906              		.loc 1 135 24 is_stmt 0 view .LVU268
 907 0374 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 908              	.LVL67:
 909              	@ armwave.c:150:                     offset = yy + (xx * g_armwave_state.target_width);
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 910              		.loc 1 150 39 view .LVU269
 911 0378 4C7095E5 		ldr	r7, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 912              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 913              		.loc 1 139 25 view .LVU270
 914 037c FF0052E3 		cmp	r2, #255	@ rr,
 915              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 916              		.loc 1 148 24 view .LVU271
 917 0380 7680EFE6 		uxtb	r8, r6	@ xx, _59
 918              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 919              		.loc 1 144 56 view .LVU272
 920 0384 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 921              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 922              		.loc 1 144 44 view .LVU273
 923 0388 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 924              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 925              		.loc 1 139 25 view .LVU274
 926 038c FF20A0A3 		movge	r2, #255	@ rr,
 927              	.LVL68:
 928              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 929              		.loc 1 149 31 view .LVU275
 930 0390 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 931              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 932              		.loc 1 144 44 view .LVU276
 933 0394 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 934              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 935              		.loc 1 144 56 view .LVU277
 936 0398 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 937              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 938              		.loc 1 151 39 view .LVU278
 939 039c 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 940              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 941              		.loc 1 144 51 view .LVU279
 942 03a0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 943              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 944              		.loc 1 144 62 view .LVU280
 945 03a4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 946              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 947              		.loc 1 151 49 view .LVU281
 948 03a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 949              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 950              		.loc 1 144 62 view .LVU282
 951 03ac 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 952              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 953              		.loc 1 144 26 view .LVU283
 954 03b0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 955              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 956              		.loc 1 151 49 view .LVU284
 957 03b4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 958 03b8 81FFFFEA 		b	.L29		@
 959              	.LVL69:
 960              	.L50:
 117:armwave.c     **** 
 961              		.loc 1 117 5 is_stmt 1 discriminator 1 view .LVU285
 962 03bc 10309FE5 		ldr	r3, .L52+4	@,
 963 03c0 7520A0E3 		mov	r2, #117	@,
 964 03c4 0C109FE5 		ldr	r1, .L52+8	@,
 965              	.LVL70:
 117:armwave.c     **** 
 966              		.loc 1 117 5 is_stmt 0 discriminator 1 view .LVU286
 967 03c8 0C009FE5 		ldr	r0, .L52+12	@,
 968              	.LVL71:
 117:armwave.c     **** 
 969              		.loc 1 117 5 discriminator 1 view .LVU287
 970 03cc FEFFFFEB 		bl	__assert_fail		@
 971              	.LVL72:
 972              	.L53:
 117:armwave.c     **** 
 973              		.loc 1 117 5 discriminator 1 view .LVU288
 974              		.align	2
 975              	.L52:
 976 03d0 00000000 		.word	g_armwave_state
 977 03d4 00000000 		.word	.LANCHOR0
 978 03d8 20000000 		.word	.LC2
 979 03dc 2C000000 		.word	.LC3
 980              		.cfi_endproc
 981              	.LFE60:
 983              		.align	2
 984              		.global	armwave_fill_pixbuf_scaled
 985              		.syntax unified
 986              		.arm
 987              		.fpu vfp
 989              	armwave_fill_pixbuf_scaled:
 990              	.LVL73:
 991              	.LFB61:
 157:armwave.c     **** 
 158:armwave.c     **** /*
 159:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 160:armwave.c     ****  * Rows are repeated as necessary.
 161:armwave.c     ****  */
 162:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 163:armwave.c     **** {
 992              		.loc 1 163 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 164:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 996              		.loc 1 164 5 view .LVU290
 165:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 997              		.loc 1 165 5 view .LVU291
 166:armwave.c     ****     uint8_t r, g, b, value, row;
 998              		.loc 1 166 5 view .LVU292
 167:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 999              		.loc 1 167 5 view .LVU293
 1000              	@ armwave.c:163: {
 163:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 1001              		.loc 1 163 1 is_stmt 0 view .LVU294
 1002 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1003              		.cfi_def_cfa_offset 36
 1004              		.cfi_offset 4, -36
 1005              		.cfi_offset 5, -32
 1006              		.cfi_offset 6, -28
 1007              		.cfi_offset 7, -24
 1008              		.cfi_offset 8, -20
 1009              		.cfi_offset 9, -16
 1010              		.cfi_offset 10, -12
 1011              		.cfi_offset 11, -8
 1012              		.cfi_offset 14, -4
 1013              	@ armwave.c:171:     assert(out_buffer != NULL);
 168:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 169:armwave.c     ****     uint32_t offset;
 170:armwave.c     **** 
 171:armwave.c     ****     assert(out_buffer != NULL);
 1014              		.loc 1 171 5 view .LVU295
 1015 03e4 000050E3 		cmp	r0, #0	@ out_buffer
 1016              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1017              		.loc 1 167 15 view .LVU296
 1018 03e8 44619FE5 		ldr	r6, .L76	@ tmp204,
 1019              	@ armwave.c:163: {
 163:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 1020              		.loc 1 163 1 view .LVU297
 1021 03ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1022              		.cfi_def_cfa_offset 48
 1023              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1024              		.loc 1 167 15 view .LVU298
 1025 03f0 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1026              	.LVL74:
 168:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1027              		.loc 1 168 5 is_stmt 1 view .LVU299
 169:armwave.c     **** 
 1028              		.loc 1 169 5 view .LVU300
 1029              		.loc 1 171 5 view .LVU301
 1030 03f4 4900000A 		beq	.L73		@,
 172:armwave.c     **** 
 173:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1031              		.loc 1 173 5 view .LVU302
 1032              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 1033              		.loc 1 173 41 is_stmt 0 view .LVU303
 1034 03f8 4C8096E5 		ldr	r8, [r6, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1035 03fc 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1036              	.LVL75:
 174:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1037              		.loc 1 174 5 is_stmt 1 view .LVU304
 175:armwave.c     **** 
 176:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1038              		.loc 1 176 5 view .LVU305
 1039              		.loc 1 176 5 is_stmt 0 view .LVU306
 1040 0400 000058E3 		cmp	r8, #0	@ npix,
 1041 0404 0C0000DA 		ble	.L54		@,
 1042              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 177:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 178:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 179:armwave.c     ****         // most normal waveforms.
 180:armwave.c     ****         wave_word = *base_32ptr++;
 181:armwave.c     **** 
 182:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 183:armwave.c     ****             for(w = 0; w < 4; w++) {
 184:armwave.c     ****                 value = wave_word & 0xff;
 185:armwave.c     ****                 wave_word >>= 8;
 186:armwave.c     **** 
 187:armwave.c     ****                 if(value != 0) {
 188:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 189:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1043              		.loc 1 189 52 view .LVU307
 1044 0408 F236D6E1 		ldrsh	r3, [r6, #98]	@ _11, g_armwave_state.ch1_color.g
 1045              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1046              		.loc 1 188 52 view .LVU308
 1047 040c F0B6D6E1 		ldrsh	fp, [r6, #96]	@ _7, g_armwave_state.ch1_color.r
 1048              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 190:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 191:armwave.c     **** 
 192:armwave.c     ****                     r = MIN(rr, 255);
 193:armwave.c     ****                     g = MIN(gg, 255);
 194:armwave.c     ****                     b = MIN(bb, 255);
 195:armwave.c     **** 
 196:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 197:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 198:armwave.c     **** 
 199:armwave.c     ****                     // Do line scaling as necessary.
 200:armwave.c     ****                     /*
 201:armwave.c     ****                     nsub = n + w;
 202:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 203:armwave.c     ****                     xx = (nsub >> 8);
 204:armwave.c     **** 
 205:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 206:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 207:armwave.c     ****                         *(out_buffer_base + offset) = word;
 208:armwave.c     ****                     }
 209:armwave.c     ****                     */
 210:armwave.c     **** 
 211:armwave.c     ****                     nsub = n + w;
 212:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 1049              		.loc 1 212 57 view .LVU309
 1050 0410 076AD6ED 		vldr.32	s13, [r6, #28]	@ _28, g_armwave_state.vscale_frac
 1051              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1052              		.loc 1 189 52 view .LVU310
 1053 0414 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1054              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1055              		.loc 1 190 52 view .LVU311
 1056 0418 F436D6E1 		ldrsh	r3, [r6, #100]	@ _14, g_armwave_state.ch1_color.b
 1057              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1058              		.loc 1 176 11 view .LVU312
 1059 041c 0010A0E3 		mov	r1, #0	@ n,
 1060              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1061              		.loc 1 190 52 view .LVU313
 1062 0420 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1063              	.LVL76:
 1064              	.L61:
 180:armwave.c     **** 
 1065              		.loc 1 180 9 is_stmt 1 view .LVU314
 1066              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 1067              		.loc 1 180 19 is_stmt 0 view .LVU315
 1068 0424 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 1069              	.LVL77:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 1070              		.loc 1 182 9 is_stmt 1 view .LVU316
 1071              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 1072              		.loc 1 182 11 is_stmt 0 view .LVU317
 1073 0428 000053E3 		cmp	r3, #0	@ wave_word,
 1074 042c 0400001A 		bne	.L74		@,
 1075              	.L57:
 1076              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1077              		.loc 1 176 28 view .LVU318
 1078 0430 041081E2 		add	r1, r1, #4	@ n, n,
 1079              	.LVL78:
 1080              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1081              		.loc 1 176 5 view .LVU319
 1082 0434 010058E1 		cmp	r8, r1	@ npix, n
 1083 0438 F9FFFFCA 		bgt	.L61		@,
 1084              	.LVL79:
 1085              	.L54:
 1086              	@ armwave.c:224: }
 213:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     xx = (nsub >> 8);
 215:armwave.c     **** 
 216:armwave.c     ****                     for(y = yy; y < ye; y++) {
 217:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 218:armwave.c     ****                         *(out_buffer_base + offset) = word;
 219:armwave.c     ****                     }
 220:armwave.c     ****                 }
 221:armwave.c     ****             }
 222:armwave.c     ****         }
 223:armwave.c     ****     }
 224:armwave.c     **** }
 1087              		.loc 1 224 1 view .LVU320
 1088 043c 0CD08DE2 		add	sp, sp, #12	@,,
 1089              		.cfi_remember_state
 1090              		.cfi_def_cfa_offset 36
 1091              		@ sp needed	@
 1092 0440 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1093              	.LVL80:
 1094              	.L74:
 1095              		.cfi_restore_state
 1096              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1097              		.loc 1 187 19 view .LVU321
 1098 0444 FF2013E2 		ands	r2, r3, #255	@ _8, wave_word,
 1099              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1100              		.loc 1 183 19 view .LVU322
 1101 0448 0070A0E3 		mov	r7, #0	@ w,
 1102              	.LVL81:
 184:armwave.c     ****                 wave_word >>= 8;
 1103              		.loc 1 184 17 is_stmt 1 view .LVU323
 185:armwave.c     **** 
 1104              		.loc 1 185 17 view .LVU324
 1105              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 1106              		.loc 1 185 27 is_stmt 0 view .LVU325
 1107 044c 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 1108              	.LVL82:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1109              		.loc 1 187 17 is_stmt 1 view .LVU326
 1110              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1111              		.loc 1 187 19 is_stmt 0 view .LVU327
 1112 0450 0500001A 		bne	.L75		@,
 1113              	.L58:
 1114              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1115              		.loc 1 183 32 view .LVU328
 1116 0454 017087E2 		add	r7, r7, #1	@ w, w,
 1117              	.LVL83:
 1118              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1119              		.loc 1 183 13 view .LVU329
 1120 0458 040057E3 		cmp	r7, #4	@ w,
 1121 045c F3FFFF0A 		beq	.L57		@,
 184:armwave.c     ****                 wave_word >>= 8;
 1122              		.loc 1 184 17 is_stmt 1 view .LVU330
 1123              	.LVL84:
 185:armwave.c     **** 
 1124              		.loc 1 185 17 view .LVU331
 1125              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1126              		.loc 1 187 19 is_stmt 0 view .LVU332
 1127 0460 FF2013E2 		ands	r2, r3, #255	@ _8, wave_word,
 1128              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 1129              		.loc 1 185 27 view .LVU333
 1130 0464 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 1131              	.LVL85:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1132              		.loc 1 187 17 is_stmt 1 view .LVU334
 1133              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1134              		.loc 1 187 19 is_stmt 0 view .LVU335
 1135 0468 F9FFFF0A 		beq	.L58		@,
 1136              	.L75:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1137              		.loc 1 188 21 is_stmt 1 view .LVU336
 1138              	.LVL86:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1139              		.loc 1 189 21 view .LVU337
 190:armwave.c     **** 
 1140              		.loc 1 190 21 view .LVU338
 192:armwave.c     ****                     g = MIN(gg, 255);
 1141              		.loc 1 192 21 view .LVU339
 193:armwave.c     ****                     b = MIN(bb, 255);
 1142              		.loc 1 193 21 view .LVU340
 194:armwave.c     **** 
 1143              		.loc 1 194 21 view .LVU341
 197:armwave.c     **** 
 1144              		.loc 1 197 21 view .LVU342
 1145              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 1146              		.loc 1 190 55 is_stmt 0 view .LVU343
 1147 046c 04C09DE5 		ldr	ip, [sp, #4]	@ _14, %sfp
 1148 0470 075081E0 		add	r5, r1, r7	@ _117, n, w
 1149 0474 9C020AE0 		mul	r10, ip, r2	@ tmp182, _14, _8
 1150              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1151              		.loc 1 212 32 view .LVU344
 1152 0478 75C0EFE6 		uxtb	ip, r5	@ _26, _117
 1153              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 1154              		.loc 1 213 41 view .LVU345
 1155 047c 01408CE2 		add	r4, ip, #1	@ tmp197, _26,
 1156              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1157              		.loc 1 212 40 view .LVU346
 1158 0480 90CA07EE 		vmov	s15, ip	@ int	@ _26, _26
 1159              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 1160              		.loc 1 213 41 view .LVU347
 1161 0484 104A07EE 		vmov	s14, r4	@ int	@ tmp197, tmp197
 1162              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1163              		.loc 1 189 55 view .LVU348
 1164 0488 00C09DE5 		ldr	ip, [sp]	@ _11, %sfp
 1165              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 1166              		.loc 1 190 24 view .LVU349
 1167 048c 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp182,
 1168              	.LVL87:
 1169              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1170              		.loc 1 212 40 view .LVU350
 1171 0490 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, _26
 1172              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 1173              		.loc 1 213 46 view .LVU351
 1174 0494 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, tmp197
 1175              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1176              		.loc 1 189 55 view .LVU352
 1177 0498 9C0204E0 		mul	r4, ip, r2	@ tmp186, _11, _8
 1178              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1179              		.loc 1 188 55 view .LVU353
 1180 049c 920B02E0 		mul	r2, r2, fp	@ tmp192, _8, _7
 1181              	.LVL88:
 1182              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 1183              		.loc 1 194 25 view .LVU354
 1184 04a0 FF005AE3 		cmp	r10, #255	@ bb,
 1185              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1186              		.loc 1 189 24 view .LVU355
 1187 04a4 4444A0E1 		asr	r4, r4, #8	@ gg, tmp186,
 1188              	.LVL89:
 1189              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1190              		.loc 1 212 40 view .LVU356
 1191 04a8 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp196, tmp195, _28
 1192              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 1193              		.loc 1 213 46 view .LVU357
 1194 04ac 267A27EE 		vmul.f32	s14, s14, s13	@ tmp199, tmp198, _28
 1195              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1196              		.loc 1 188 24 view .LVU358
 1197 04b0 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp192,
 1198              	.LVL90:
 1199              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 1200              		.loc 1 194 25 view .LVU359
 1201 04b4 FFA0A0A3 		movge	r10, #255	@ bb,
 1202              	.LVL91:
 1203              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 1204              		.loc 1 193 25 view .LVU360
 1205 04b8 FF0054E3 		cmp	r4, #255	@ gg,
 1206 04bc FF40A0A3 		movge	r4, #255	@ gg,
 1207              	.LVL92:
 1208              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 1209              		.loc 1 192 25 view .LVU361
 1210 04c0 FF005CE3 		cmp	ip, #255	@ rr,
 1211              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1212              		.loc 1 197 56 view .LVU362
 1213 04c4 0444A0E1 		lsl	r4, r4, #8	@ tmp187, gg,
 1214              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1215              		.loc 1 212 24 view .LVU363
 1216 04c8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 1217              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 1218              		.loc 1 192 25 view .LVU364
 1219 04cc FFC0A0A3 		movge	ip, #255	@ rr,
 1220              	.LVL93:
 1221              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1222              		.loc 1 197 44 view .LVU365
 1223 04d0 0AA8A0E1 		lsl	r10, r10, #16	@ tmp183, bb,
 1224 04d4 FFA80AE2 		and	r10, r10, #16711680	@ tmp184, tmp183,
 1225              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1226              		.loc 1 197 56 view .LVU366
 1227 04d8 7440FFE6 		uxth	r4, r4	@ tmp188, tmp187
 1228              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1229              		.loc 1 197 51 view .LVU367
 1230 04dc 04408AE1 		orr	r4, r10, r4	@ tmp190, tmp184, tmp188
 1231              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1232              		.loc 1 197 62 view .LVU368
 1233 04e0 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 1234 04e4 0CC084E1 		orr	ip, r4, ip	@ tmp194, tmp190, rr
 1235              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1236              		.loc 1 212 24 view .LVU369
 1237 04e8 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 1238              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 1239              		.loc 1 213 24 view .LVU370
 1240 04ec C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp199
 1241              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1242              		.loc 1 197 26 view .LVU371
 1243 04f0 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp194,
 1244              	.LVL94:
 211:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 1245              		.loc 1 211 21 is_stmt 1 view .LVU372
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1246              		.loc 1 212 21 view .LVU373
 213:armwave.c     ****                     xx = (nsub >> 8);
 1247              		.loc 1 213 21 view .LVU374
 1248              	@ armwave.c:214:                     xx = (nsub >> 8);
 214:armwave.c     **** 
 1249              		.loc 1 214 32 is_stmt 0 view .LVU375
 1250 04f4 4554A0E1 		asr	r5, r5, #8	@ xx, _117,
 1251              	.LVL95:
 1252              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 1253              		.loc 1 213 24 view .LVU376
 1254 04f8 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 1255              	.LVL96:
 214:armwave.c     **** 
 1256              		.loc 1 214 21 is_stmt 1 view .LVU377
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1257              		.loc 1 216 21 view .LVU378
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1258              		.loc 1 216 21 is_stmt 0 view .LVU379
 1259 04fc 090052E1 		cmp	r2, r9	@ yy, ye
 1260 0500 D3FFFF2A 		bcs	.L58		@,
 1261              	.LVL97:
 1262              	.L59:
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1263              		.loc 1 217 25 is_stmt 1 discriminator 3 view .LVU380
 218:armwave.c     ****                     }
 1264              		.loc 1 218 25 discriminator 3 view .LVU381
 1265              	@ armwave.c:217:                         offset = (xx + (y * g_armwave_state.target_width)); 
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1266              		.loc 1 217 43 is_stmt 0 discriminator 3 view .LVU382
 1267 0504 4CC096E5 		ldr	ip, [r6, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1268              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 1269              		.loc 1 218 43 discriminator 3 view .LVU383
 1270 0508 9C522CE0 		mla	ip, ip, r2, r5	@ tmp203, g_armwave_state.target_width, yy, xx
 1271              	.LVL98:
 1272              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1273              		.loc 1 216 42 discriminator 3 view .LVU384
 1274 050c 012082E2 		add	r2, r2, #1	@ yy, yy,
 1275              	.LVL99:
 1276              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1277              		.loc 1 216 21 discriminator 3 view .LVU385
 1278 0510 020059E1 		cmp	r9, r2	@ ye, yy
 1279              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 1280              		.loc 1 218 53 discriminator 3 view .LVU386
 1281 0514 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 1282              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1283              		.loc 1 216 21 discriminator 3 view .LVU387
 1284 0518 F9FFFF1A 		bne	.L59		@,
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1285              		.loc 1 216 21 discriminator 3 view .LVU388
 1286 051c CCFFFFEA 		b	.L58		@
 1287              	.LVL100:
 1288              	.L73:
 171:armwave.c     **** 
 1289              		.loc 1 171 5 is_stmt 1 discriminator 1 view .LVU389
 1290 0520 10309FE5 		ldr	r3, .L76+4	@,
 1291 0524 AB20A0E3 		mov	r2, #171	@,
 1292 0528 0C109FE5 		ldr	r1, .L76+8	@,
 1293 052c 0C009FE5 		ldr	r0, .L76+12	@,
 1294              	.LVL101:
 171:armwave.c     **** 
 1295              		.loc 1 171 5 is_stmt 0 discriminator 1 view .LVU390
 1296 0530 FEFFFFEB 		bl	__assert_fail		@
 1297              	.LVL102:
 1298              	.L77:
 171:armwave.c     **** 
 1299              		.loc 1 171 5 discriminator 1 view .LVU391
 1300              		.align	2
 1301              	.L76:
 1302 0534 00000000 		.word	g_armwave_state
 1303 0538 18000000 		.word	.LANCHOR0+24
 1304 053c 20000000 		.word	.LC2
 1305 0540 2C000000 		.word	.LC3
 1306              		.cfi_endproc
 1307              	.LFE61:
 1309              		.align	2
 1310              		.global	armwave_setup_render
 1311              		.syntax unified
 1312              		.arm
 1313              		.fpu vfp
 1315              	armwave_setup_render:
 1316              	.LVL103:
 1317              	.LFB62:
 225:armwave.c     **** 
 226:armwave.c     **** /*
 227:armwave.c     ****  * Setup the renderer with passed parameters.
 228:armwave.c     ****  */
 229:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 230:armwave.c     **** {
 1318              		.loc 1 230 1 is_stmt 1 view -0
 1319              		.cfi_startproc
 1320              		@ args = 12, pretend = 0, frame = 0
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 231:armwave.c     ****     uint32_t length, xx;
 1322              		.loc 1 231 5 view .LVU393
 232:armwave.c     ****     float points_per_pixel;
 1323              		.loc 1 232 5 view .LVU394
 233:armwave.c     **** 
 234:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1324              		.loc 1 234 5 view .LVU395
 1325              	@ armwave.c:230: {
 230:armwave.c     ****     uint32_t length, xx;
 1326              		.loc 1 230 1 is_stmt 0 view .LVU396
 1327 0544 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1328              		.cfi_def_cfa_offset 32
 1329              		.cfi_offset 4, -32
 1330              		.cfi_offset 5, -28
 1331              		.cfi_offset 6, -24
 1332              		.cfi_offset 7, -20
 1333              		.cfi_offset 8, -16
 1334              		.cfi_offset 9, -12
 1335              		.cfi_offset 10, -8
 1336              		.cfi_offset 14, -4
 1337 0548 028B2DED 		vpush.64	{d8}	@
 1338              		.cfi_def_cfa_offset 40
 1339              		.cfi_offset 80, -40
 1340              		.cfi_offset 81, -36
 1341 054c 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1342 0550 0190A0E1 		mov	r9, r1	@ end_point, end_point
 1343 0554 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1344 0558 10D04DE2 		sub	sp, sp, #16	@,,
 1345              		.cfi_def_cfa_offset 56
 1346              	@ armwave.c:230: {
 230:armwave.c     ****     uint32_t length, xx;
 1347              		.loc 1 230 1 view .LVU397
 1348 055c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1349 0560 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1350 0564 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1351              	@ armwave.c:234:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1352              		.loc 1 234 5 view .LVU398
 1353 0568 00308DE5 		str	r3, [sp]	@ wave_stride,
 1354 056c F460CDE1 		strd	r6, [sp, #4]	@,,
 1355 0570 0230A0E1 		mov	r3, r2	@, waves_max
 1356              	.LVL104:
 1357              		.loc 1 234 5 view .LVU399
 1358 0574 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1359 0578 0120A0E1 		mov	r2, r1	@, end_point
 1360              	.LVL105:
 1361              		.loc 1 234 5 view .LVU400
 1362 057c 0010A0E1 		mov	r1, r0	@, start_point
 1363              	.LVL106:
 1364              		.loc 1 234 5 view .LVU401
 1365 0580 94019FE5 		ldr	r0, .L92+8	@,
 1366              	.LVL107:
 1367              		.loc 1 234 5 view .LVU402
 1368 0584 FEFFFFEB 		bl	printf		@
 1369              	.LVL108:
 235:armwave.c     **** 
 236:armwave.c     ****     // TODO these asserts should instead raise PyExc
 237:armwave.c     ****     assert(start_point < end_point);
 1370              		.loc 1 237 5 is_stmt 1 view .LVU403
 1371 0588 090055E1 		cmp	r5, r9	@ start_point, end_point
 1372 058c 5100002A 		bcs	.L89		@,
 238:armwave.c     **** 
 239:armwave.c     ****     /*
 240:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 241:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 242:armwave.c     **** 
 243:armwave.c     ****     if(target_height == 256) {
 244:armwave.c     ****         g_armwave_state.row_shift = 8;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 246:armwave.c     ****     } else if(target_height == 512) {
 247:armwave.c     ****         g_armwave_state.row_shift = 9;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 249:armwave.c     ****     } else if(target_height == 1024) {
 250:armwave.c     ****         g_armwave_state.row_shift = 10;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 252:armwave.c     ****     } else if(target_height == 2048) {
 253:armwave.c     ****         g_armwave_state.row_shift = 11;
 254:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 255:armwave.c     ****     }
 256:armwave.c     ****     */
 257:armwave.c     **** 
 258:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 259:armwave.c     ****     g_armwave_state.xstride = target_height;
 1373              		.loc 1 259 5 view .LVU404
 1374              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 256.0f;
 260:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 256.0f;
 1375              		.loc 1 260 49 is_stmt 0 view .LVU405
 1376 0590 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1377 0594 5E7A9FED 		vldr.32	s14, .L92	@ tmp156,
 1378              	@ armwave.c:259:     g_armwave_state.xstride = target_height;
 259:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 256.0f;
 1379              		.loc 1 259 29 view .LVU406
 1380 0598 80419FE5 		ldr	r4, .L92+12	@ tmp210,
 1381              	@ armwave.c:265:     g_armwave_state.size = target_height * target_width;
 261:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 262:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 263:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 264:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 265:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1382              		.loc 1 265 42 view .LVU407
 1383 059c 970600E0 		mul	r0, r7, r6	@ tmp164, target_height, target_width
 1384              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 256.0f;
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1385              		.loc 1 260 49 view .LVU408
 1386 05a0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp155, target_height
 1387              	@ armwave.c:267:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 266:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 267:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1388              		.loc 1 267 68 view .LVU409
 1389 05a4 0634A0E1 		lsl	r3, r6, #8	@ _6, target_width,
 1390              	@ armwave.c:266:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 266:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1391              		.loc 1 266 37 view .LVU410
 1392 05a8 01CCA0E3 		mov	ip, #256	@ tmp166,
 1393              	@ armwave.c:272:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 268:armwave.c     ****     g_armwave_state.target_width = target_width;
 269:armwave.c     ****     g_armwave_state.target_height = target_height;
 270:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 271:armwave.c     **** 
 272:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1394              		.loc 1 272 5 view .LVU411
 1395 05ac 0310A0E1 		mov	r1, r3	@, _6
 1396              	@ armwave.c:265:     g_armwave_state.size = target_height * target_width;
 265:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1397              		.loc 1 265 26 view .LVU412
 1398 05b0 480084E5 		str	r0, [r4, #72]	@ tmp164, g_armwave_state.size
 1399              	@ armwave.c:270:     g_armwave_state.wave_length = end_point - start_point;
 270:armwave.c     **** 
 1400              		.loc 1 270 45 view .LVU413
 1401 05b4 055049E0 		sub	r5, r9, r5	@ _7, end_point, start_point
 1402              	.LVL109:
 1403              	@ armwave.c:272:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1404              		.loc 1 272 5 view .LVU414
 1405 05b8 64019FE5 		ldr	r0, .L92+16	@,
 1406              	@ armwave.c:267:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 267:armwave.c     ****     g_armwave_state.target_width = target_width;
 1407              		.loc 1 267 34 view .LVU415
 1408 05bc 443084E5 		str	r3, [r4, #68]	@ _6, g_armwave_state.ch_buff_size
 1409              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 256.0f;
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1410              		.loc 1 260 49 view .LVU416
 1411 05c0 877A67EE 		vmul.f32	s15, s15, s14	@ _2, tmp155, tmp156
 1412              	@ armwave.c:259:     g_armwave_state.xstride = target_height;
 259:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 256.0f;
 1413              		.loc 1 259 29 view .LVU417
 1414 05c4 207084E5 		str	r7, [r4, #32]	@ target_height, g_armwave_state.xstride
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1415              		.loc 1 260 5 is_stmt 1 view .LVU418
 1416              	@ armwave.c:262:     g_armwave_state.wave_stride = wave_stride;
 262:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1417              		.loc 1 262 33 is_stmt 0 view .LVU419
 1418 05c8 28A084E5 		str	r10, [r4, #40]	@ wave_stride, g_armwave_state.wave_stride
 1419              	@ armwave.c:263:     g_armwave_state.waves_max = waves_max;
 263:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1420              		.loc 1 263 31 view .LVU420
 1421 05cc 308084E5 		str	r8, [r4, #48]	@ waves_max, g_armwave_state.waves_max
 1422              	@ armwave.c:264:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 264:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1423              		.loc 1 264 27 view .LVU421
 1424 05d0 2C8084E5 		str	r8, [r4, #44]	@ waves_max, g_armwave_state.waves
 1425              	@ armwave.c:269:     g_armwave_state.target_height = target_height;
 269:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1426              		.loc 1 269 35 view .LVU422
 1427 05d4 FC64C4E1 		strd	r6, [r4, #76]	@, tmp210,
 1428              	@ armwave.c:270:     g_armwave_state.wave_length = end_point - start_point;
 270:armwave.c     **** 
 1429              		.loc 1 270 33 view .LVU423
 1430 05d8 405084E5 		str	r5, [r4, #64]	@ _7, g_armwave_state.wave_length
 1431              	@ armwave.c:266:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 266:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1432              		.loc 1 266 37 view .LVU424
 1433 05dc 34C084E5 		str	ip, [r4, #52]	@ tmp166, g_armwave_state.bitdepth_height
 1434              	@ armwave.c:261:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 261:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1435              		.loc 1 261 30 view .LVU425
 1436 05e0 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp159, _2
 1437              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 256.0f;
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1438              		.loc 1 260 33 view .LVU426
 1439 05e4 077AC4ED 		vstr.32	s15, [r4, #28]	@ _2, g_armwave_state.vscale_frac
 261:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1440              		.loc 1 261 5 is_stmt 1 view .LVU427
 1441              	@ armwave.c:261:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 261:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1442              		.loc 1 261 30 is_stmt 0 view .LVU428
 1443 05e8 097A84ED 		vstr.32	s14, [r4, #36]	@ int	@ tmp159, g_armwave_state.vscale
 262:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1444              		.loc 1 262 5 is_stmt 1 view .LVU429
 263:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1445              		.loc 1 263 5 view .LVU430
 264:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1446              		.loc 1 264 5 view .LVU431
 265:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1447              		.loc 1 265 5 view .LVU432
 266:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1448              		.loc 1 266 5 view .LVU433
 267:armwave.c     ****     g_armwave_state.target_width = target_width;
 1449              		.loc 1 267 5 view .LVU434
 268:armwave.c     ****     g_armwave_state.target_height = target_height;
 1450              		.loc 1 268 5 view .LVU435
 269:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1451              		.loc 1 269 5 view .LVU436
 270:armwave.c     **** 
 1452              		.loc 1 270 5 view .LVU437
 1453              		.loc 1 272 5 view .LVU438
 1454 05ec FEFFFFEB 		bl	printf		@
 1455              	.LVL110:
 273:armwave.c     **** 
 274:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 275:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 276:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 277:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1456              		.loc 1 277 5 view .LVU439
 1457              	@ armwave.c:279:     if(g_armwave_state.ch1_buffer != NULL)
 278:armwave.c     **** 
 279:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1458              		.loc 1 279 23 is_stmt 0 view .LVU440
 1459 05f0 040094E5 		ldr	r0, [r4, #4]	@ _8, g_armwave_state.ch1_buffer
 1460              	@ armwave.c:277:     g_armwave_state.slice_height = 64;  
 277:armwave.c     **** 
 1461              		.loc 1 277 34 view .LVU441
 1462 05f4 4030A0E3 		mov	r3, #64	@ tmp173,
 1463              	@ armwave.c:279:     if(g_armwave_state.ch1_buffer != NULL)
 1464              		.loc 1 279 7 view .LVU442
 1465 05f8 000050E3 		cmp	r0, #0	@ _8,
 1466              	@ armwave.c:277:     g_armwave_state.slice_height = 64;  
 277:armwave.c     **** 
 1467              		.loc 1 277 34 view .LVU443
 1468 05fc 383084E5 		str	r3, [r4, #56]	@ tmp173, g_armwave_state.slice_height
 1469              		.loc 1 279 5 is_stmt 1 view .LVU444
 1470              	@ armwave.c:279:     if(g_armwave_state.ch1_buffer != NULL)
 1471              		.loc 1 279 7 is_stmt 0 view .LVU445
 1472 0600 0000000A 		beq	.L80		@,
 280:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1473              		.loc 1 280 9 is_stmt 1 view .LVU446
 1474 0604 FEFFFFEB 		bl	free		@
 1475              	.LVL111:
 1476              	.L80:
 281:armwave.c     **** 
 282:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1477              		.loc 1 282 5 view .LVU447
 1478              	@ armwave.c:282:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1479              		.loc 1 282 34 is_stmt 0 view .LVU448
 1480 0608 0110A0E3 		mov	r1, #1	@,
 1481 060c 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.ch_buff_size
 1482 0610 FEFFFFEB 		bl	calloc		@
 1483              	.LVL112:
 1484              	@ armwave.c:284:     assert(g_armwave_state.ch1_buffer != NULL);
 283:armwave.c     **** 
 284:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1485              		.loc 1 284 5 view .LVU449
 1486 0614 000050E3 		cmp	r0, #0	@ _10,
 1487              	@ armwave.c:282:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 282:armwave.c     **** 
 1488              		.loc 1 282 34 view .LVU450
 1489 0618 0070A0E1 		mov	r7, r0	@ _10,
 1490              	@ armwave.c:282:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 282:armwave.c     **** 
 1491              		.loc 1 282 32 view .LVU451
 1492 061c 040084E5 		str	r0, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 1493              		.loc 1 284 5 is_stmt 1 view .LVU452
 1494 0620 3600000A 		beq	.L90		@,
 285:armwave.c     **** 
 286:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 287:armwave.c     ****     length = end_point - start_point;
 1495              		.loc 1 287 5 view .LVU453
 1496              	.LVL113:
 288:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1497              		.loc 1 288 5 view .LVU454
 1498              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 1499              		.loc 1 288 34 is_stmt 0 view .LVU455
 1500 0624 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1501              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 1502              		.loc 1 288 22 view .LVU456
 1503 0628 905A06EE 		vmov	s13, r5	@ int	@ _7, _7
 1504              	@ armwave.c:290:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 290:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1505              		.loc 1 290 40 view .LVU457
 1506 062c 8500A0E1 		lsl	r0, r5, #1	@, _7,
 1507              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 288:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1508              		.loc 1 288 34 view .LVU458
 1509 0630 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp184, target_width
 1510              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 288:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1511              		.loc 1 288 22 view .LVU459
 1512 0634 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp183, _7
 1513              	@ armwave.c:289:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1514              		.loc 1 289 60 view .LVU460
 1515 0638 0E7AD4ED 		vldr.32	s15, [r4, #56]	@ int	@ tmp216, g_armwave_state.slice_height
 1516 063c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp187, tmp216
 1517              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 288:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1518              		.loc 1 288 22 view .LVU461
 1519 0640 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp183, tmp184
 1520              	.LVL114:
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1521              		.loc 1 289 5 is_stmt 1 view .LVU462
 1522              	@ armwave.c:289:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1523              		.loc 1 289 60 is_stmt 0 view .LVU463
 1524 0644 887A67EE 		vmul.f32	s15, s15, s16	@ tmp189, tmp187, points_per_pixel
 1525              	@ armwave.c:289:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1526              		.loc 1 289 41 view .LVU464
 1527 0648 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp190, tmp189
 1528 064c 0F7AC4ED 		vstr.32	s15, [r4, #60]	@ int	@ tmp190, g_armwave_state.slice_record_height
 1529              		.loc 1 290 5 is_stmt 1 view .LVU465
 1530              	@ armwave.c:290:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1531              		.loc 1 290 40 is_stmt 0 view .LVU466
 1532 0650 FEFFFFEB 		bl	malloc		@
 1533              	.LVL115:
 1534              	@ armwave.c:292:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 291:armwave.c     **** 
 292:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1535              		.loc 1 292 5 view .LVU467
 1536 0654 000050E3 		cmp	r0, #0	@ _18,
 1537              	@ armwave.c:290:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 290:armwave.c     **** 
 1538              		.loc 1 290 40 view .LVU468
 1539 0658 0060A0E1 		mov	r6, r0	@ _18,
 1540              	@ armwave.c:290:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 290:armwave.c     **** 
 1541              		.loc 1 290 38 view .LVU469
 1542 065c 780084E5 		str	r0, [r4, #120]	@ _18, g_armwave_state.xcoord_to_xpixel
 1543              		.loc 1 292 5 is_stmt 1 view .LVU470
 1544 0660 2100000A 		beq	.L91		@,
 1545              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 293:armwave.c     **** 
 294:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 295:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1546              		.loc 1 295 54 is_stmt 0 view .LVU471
 1547 0664 2B7ADFED 		vldr.32	s15, .L92+4	@ tmp198,
 1548 0668 02C040E2 		sub	ip, r0, #2	@ ivtmp.84, _18,
 1549              	@ armwave.c:294:     for(xx = 0; xx < length; xx++) {
 294:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1550              		.loc 1 294 12 view .LVU472
 1551 066c 0030A0E3 		mov	r3, #0	@ xx,
 1552              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1553              		.loc 1 295 54 view .LVU473
 1554 0670 887A87EE 		vdiv.f32	s14, s15, s16	@ _19, tmp198, points_per_pixel
 1555              	.L83:
 1556              	.LVL116:
 1557              		.loc 1 295 9 is_stmt 1 discriminator 3 view .LVU474
 1558              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1559              		.loc 1 295 74 is_stmt 0 discriminator 3 view .LVU475
 1560 0674 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1561              	@ armwave.c:294:     for(xx = 0; xx < length; xx++) {
 294:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1562              		.loc 1 294 32 discriminator 3 view .LVU476
 1563 0678 013083E2 		add	r3, r3, #1	@ xx, xx,
 1564              	.LVL117:
 1565              	@ armwave.c:294:     for(xx = 0; xx < length; xx++) {
 294:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1566              		.loc 1 294 5 discriminator 3 view .LVU477
 1567 067c 030055E1 		cmp	r5, r3	@ _7, xx
 1568              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1569              		.loc 1 295 74 discriminator 3 view .LVU478
 1570 0680 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp199, xx
 1571 0684 877A67EE 		vmul.f32	s15, s15, s14	@ tmp200, tmp199, _19
 1572              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1573              		.loc 1 295 46 discriminator 3 view .LVU479
 1574 0688 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp201, tmp200
 1575 068c 902A17EE 		vmov	r2, s15	@ int	@ tmp201, tmp201
 1576 0690 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp201, MEM[base: _74, offset: 0B]
 1577              	@ armwave.c:294:     for(xx = 0; xx < length; xx++) {
 294:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1578              		.loc 1 294 5 discriminator 3 view .LVU480
 1579 0694 F6FFFF1A 		bne	.L83		@,
 296:armwave.c     **** 
 297:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 298:armwave.c     ****     }
 299:armwave.c     **** 
 300:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1580              		.loc 1 300 5 is_stmt 1 view .LVU481
 1581              	@ armwave.c:300:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1582              		.loc 1 300 34 is_stmt 0 view .LVU482
 1583 0698 480094E5 		ldr	r0, [r4, #72]	@ g_armwave_state.size, g_armwave_state.size
 1584 069c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1585 06a0 FEFFFFEB 		bl	malloc		@
 1586              	.LVL118:
 1587              	@ armwave.c:302:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 301:armwave.c     **** 
 302:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1588              		.loc 1 302 5 view .LVU483
 1589 06a4 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1590 06a8 0620A0E1 		mov	r2, r6	@, _18
 1591 06ac 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1592 06b0 0710A0E1 		mov	r1, r7	@, _10
 1593              	@ armwave.c:300:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 300:armwave.c     **** 
 1594              		.loc 1 300 34 view .LVU484
 1595 06b4 00C0A0E1 		mov	ip, r0	@ tmp205,
 1596              	@ armwave.c:302:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1597              		.loc 1 302 5 view .LVU485
 1598 06b8 0030A0E1 		mov	r3, r0	@, tmp205
 1599 06bc 64009FE5 		ldr	r0, .L92+20	@,
 1600              	@ armwave.c:300:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 300:armwave.c     **** 
 1601              		.loc 1 300 32 view .LVU486
 1602 06c0 5CC084E5 		str	ip, [r4, #92]	@ tmp205, g_armwave_state.out_pixbuf
 1603              		.loc 1 302 5 is_stmt 1 view .LVU487
 1604 06c4 FEFFFFEB 		bl	printf		@
 1605              	.LVL119:
 303:armwave.c     ****         g_armwave_state.ch1_buffer, g_armwave_state.xcoord_to_xpixel, g_armwave_state.out_pixbuf, g
 304:armwave.c     **** 
 305:armwave.c     ****     malloc_stats();
 1606              		.loc 1 305 5 view .LVU488
 1607              	@ armwave.c:306: }
 306:armwave.c     **** }
 1608              		.loc 1 306 1 is_stmt 0 view .LVU489
 1609 06c8 10D08DE2 		add	sp, sp, #16	@,,
 1610              		.cfi_remember_state
 1611              		.cfi_def_cfa_offset 40
 1612              		@ sp needed	@
 1613 06cc 028BBDEC 		vldm	sp!, {d8}	@
 1614              		.cfi_restore 80
 1615              		.cfi_restore 81
 1616              		.cfi_def_cfa_offset 32
 1617              	.LVL120:
 1618              		.loc 1 306 1 view .LVU490
 1619 06d0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1620              		.cfi_restore 14
 1621              		.cfi_restore 10
 1622              		.cfi_restore 9
 1623              		.cfi_restore 8
 1624              		.cfi_restore 7
 1625              		.cfi_restore 6
 1626              		.cfi_restore 5
 1627              		.cfi_restore 4
 1628              		.cfi_def_cfa_offset 0
 1629              	.LVL121:
 1630              	@ armwave.c:305:     malloc_stats();
 305:armwave.c     **** }
 1631              		.loc 1 305 5 view .LVU491
 1632 06d4 FEFFFFEA 		b	malloc_stats		@
 1633              	.LVL122:
 1634              	.L89:
 1635              		.cfi_restore_state
 237:armwave.c     **** 
 1636              		.loc 1 237 5 is_stmt 1 discriminator 1 view .LVU492
 1637 06d8 4C309FE5 		ldr	r3, .L92+24	@,
 1638 06dc ED20A0E3 		mov	r2, #237	@,
 1639 06e0 48109FE5 		ldr	r1, .L92+28	@,
 1640 06e4 48009FE5 		ldr	r0, .L92+32	@,
 1641 06e8 FEFFFFEB 		bl	__assert_fail		@
 1642              	.LVL123:
 1643              	.L91:
 292:armwave.c     **** 
 1644              		.loc 1 292 5 discriminator 1 view .LVU493
 1645 06ec 38309FE5 		ldr	r3, .L92+24	@,
 1646 06f0 492FA0E3 		mov	r2, #292	@,
 1647 06f4 34109FE5 		ldr	r1, .L92+28	@,
 1648 06f8 38009FE5 		ldr	r0, .L92+36	@,
 1649 06fc FEFFFFEB 		bl	__assert_fail		@
 1650              	.LVL124:
 1651              	.L90:
 284:armwave.c     **** 
 1652              		.loc 1 284 5 discriminator 1 view .LVU494
 1653 0700 24309FE5 		ldr	r3, .L92+24	@,
 1654 0704 472FA0E3 		mov	r2, #284	@,
 1655 0708 20109FE5 		ldr	r1, .L92+28	@,
 1656 070c 28009FE5 		ldr	r0, .L92+40	@,
 1657 0710 FEFFFFEB 		bl	__assert_fail		@
 1658              	.LVL125:
 1659              	.L93:
 1660              		.align	2
 1661              	.L92:
 1662 0714 0000803B 		.word	998244352
 1663 0718 0000803F 		.word	1065353216
 1664 071c 40000000 		.word	.LC4
 1665 0720 00000000 		.word	g_armwave_state
 1666 0724 84000000 		.word	.LC6
 1667 0728 E8000000 		.word	.LC9
 1668 072c 34000000 		.word	.LANCHOR0+52
 1669 0730 20000000 		.word	.LC2
 1670 0734 6C000000 		.word	.LC5
 1671 0738 BC000000 		.word	.LC8
 1672 073c 98000000 		.word	.LC7
 1673              		.cfi_endproc
 1674              	.LFE62:
 1676              		.align	2
 1677              		.global	armwave_set_wave_pointer
 1678              		.syntax unified
 1679              		.arm
 1680              		.fpu vfp
 1682              	armwave_set_wave_pointer:
 1683              	.LVL126:
 1684              	.LFB63:
 307:armwave.c     **** 
 308:armwave.c     **** /*
 309:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 310:armwave.c     ****  * in the future.
 311:armwave.c     ****  */
 312:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 313:armwave.c     **** {
 1685              		.loc 1 313 1 view -0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 314:armwave.c     ****     assert(wave_buffer != NULL);
 1689              		.loc 1 314 5 view .LVU496
 1690 0740 000050E3 		cmp	r0, #0	@ wave_buffer
 1691              		.loc 1 314 5 is_stmt 0 view .LVU497
 1692 0744 0200000A 		beq	.L99		@,
 315:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1693              		.loc 1 315 5 is_stmt 1 view .LVU498
 1694              	@ armwave.c:315:     g_armwave_state.wave_buffer = wave_buffer;
 1695              		.loc 1 315 33 is_stmt 0 view .LVU499
 1696 0748 1C309FE5 		ldr	r3, .L100	@ tmp116,
 1697 074c 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1698 0750 1EFF2FE1 		bx	lr	@
 1699              	.L99:
 314:armwave.c     ****     assert(wave_buffer != NULL);
 1700              		.loc 1 314 5 is_stmt 1 discriminator 1 view .LVU500
 1701              	@ armwave.c:313: {
 313:armwave.c     ****     assert(wave_buffer != NULL);
 1702              		.loc 1 313 1 is_stmt 0 discriminator 1 view .LVU501
 1703 0754 10402DE9 		push	{r4, lr}	@
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 4, -8
 1706              		.cfi_offset 14, -4
 1707              	@ armwave.c:314:     assert(wave_buffer != NULL);
 314:armwave.c     ****     assert(wave_buffer != NULL);
 1708              		.loc 1 314 5 discriminator 1 view .LVU502
 1709 0758 10309FE5 		ldr	r3, .L100+4	@,
 1710 075c 10209FE5 		ldr	r2, .L100+8	@,
 1711 0760 10109FE5 		ldr	r1, .L100+12	@,
 1712 0764 10009FE5 		ldr	r0, .L100+16	@,
 1713              	.LVL127:
 314:armwave.c     ****     assert(wave_buffer != NULL);
 1714              		.loc 1 314 5 discriminator 1 view .LVU503
 1715 0768 FEFFFFEB 		bl	__assert_fail		@
 1716              	.LVL128:
 1717              	.L101:
 1718              		.align	2
 1719              	.L100:
 1720 076c 00000000 		.word	g_armwave_state
 1721 0770 4C000000 		.word	.LANCHOR0+76
 1722 0774 3A010000 		.word	314
 1723 0778 20000000 		.word	.LC2
 1724 077c 0C010000 		.word	.LC10
 1725              		.cfi_endproc
 1726              	.LFE63:
 1728              		.align	2
 1729              		.global	armwave_set_wave_pointer_as_testbuf
 1730              		.syntax unified
 1731              		.arm
 1732              		.fpu vfp
 1734              	armwave_set_wave_pointer_as_testbuf:
 1735              	.LFB64:
 316:armwave.c     **** }
 317:armwave.c     **** 
 318:armwave.c     **** /*
 319:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 320:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 321:armwave.c     ****  */
 322:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 323:armwave.c     **** {
 1736              		.loc 1 323 1 is_stmt 1 view -0
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 0
 1739              		@ frame_needed = 0, uses_anonymous_args = 0
 1740              		@ link register save eliminated.
 324:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1741              		.loc 1 324 5 view .LVU505
 1742              	@ armwave.c:324:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1743              		.loc 1 324 33 is_stmt 0 view .LVU506
 1744 0780 08309FE5 		ldr	r3, .L103	@ tmp111,
 1745 0784 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1746 0788 142083E5 		str	r2, [r3, #20]	@ g_armwave_state.test_wave_buffer, g_armwave_state.wave_buffer
 1747              	@ armwave.c:325: }
 325:armwave.c     **** }
 1748              		.loc 1 325 1 view .LVU507
 1749 078c 1EFF2FE1 		bx	lr	@
 1750              	.L104:
 1751              		.align	2
 1752              	.L103:
 1753 0790 00000000 		.word	g_armwave_state
 1754              		.cfi_endproc
 1755              	.LFE64:
 1757              		.align	2
 1758              		.global	armwave_set_wave_pointer_u32
 1759              		.syntax unified
 1760              		.arm
 1761              		.fpu vfp
 1763              	armwave_set_wave_pointer_u32:
 1764              	.LVL129:
 1765              	.LFB65:
 326:armwave.c     **** 
 327:armwave.c     **** /*
 328:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 329:armwave.c     ****  * disjointed buffers in the future.
 330:armwave.c     ****  */
 331:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 332:armwave.c     **** {
 1766              		.loc 1 332 1 is_stmt 1 view -0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 0
 1769              		@ frame_needed = 0, uses_anonymous_args = 0
 333:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1770              		.loc 1 333 5 view .LVU509
 1771 0794 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1772              		.loc 1 333 5 is_stmt 0 view .LVU510
 1773 0798 0200000A 		beq	.L110		@,
 334:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1774              		.loc 1 334 5 is_stmt 1 view .LVU511
 1775              	@ armwave.c:334:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1776              		.loc 1 334 33 is_stmt 0 view .LVU512
 1777 079c 1C309FE5 		ldr	r3, .L111	@ tmp117,
 1778 07a0 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1779 07a4 1EFF2FE1 		bx	lr	@
 1780              	.L110:
 333:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1781              		.loc 1 333 5 is_stmt 1 discriminator 1 view .LVU513
 1782              	@ armwave.c:332: {
 332:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1783              		.loc 1 332 1 is_stmt 0 discriminator 1 view .LVU514
 1784 07a8 10402DE9 		push	{r4, lr}	@
 1785              		.cfi_def_cfa_offset 8
 1786              		.cfi_offset 4, -8
 1787              		.cfi_offset 14, -4
 1788              	@ armwave.c:333:     assert(wave_buffer_ptr != 0);
 333:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1789              		.loc 1 333 5 discriminator 1 view .LVU515
 1790 07ac 10309FE5 		ldr	r3, .L111+4	@,
 1791 07b0 10209FE5 		ldr	r2, .L111+8	@,
 1792 07b4 10109FE5 		ldr	r1, .L111+12	@,
 1793 07b8 10009FE5 		ldr	r0, .L111+16	@,
 1794              	.LVL130:
 333:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1795              		.loc 1 333 5 discriminator 1 view .LVU516
 1796 07bc FEFFFFEB 		bl	__assert_fail		@
 1797              	.LVL131:
 1798              	.L112:
 1799              		.align	2
 1800              	.L111:
 1801 07c0 00000000 		.word	g_armwave_state
 1802 07c4 68000000 		.word	.LANCHOR0+104
 1803 07c8 4D010000 		.word	333
 1804 07cc 20000000 		.word	.LC2
 1805 07d0 20010000 		.word	.LC11
 1806              		.cfi_endproc
 1807              	.LFE65:
 1809              		.align	2
 1810              		.global	armwave_clear_buffer
 1811              		.syntax unified
 1812              		.arm
 1813              		.fpu vfp
 1815              	armwave_clear_buffer:
 1816              	.LVL132:
 1817              	.LFB66:
 335:armwave.c     **** }
 336:armwave.c     **** 
 337:armwave.c     **** /*
 338:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 339:armwave.c     ****  */
 340:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 341:armwave.c     **** {
 1818              		.loc 1 341 1 is_stmt 1 view -0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822              		@ link register save eliminated.
 342:armwave.c     ****     // Flags ignored, only one buffer cleared
 343:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1823              		.loc 1 343 5 view .LVU518
 1824 07d4 0C309FE5 		ldr	r3, .L114	@ tmp113,
 1825 07d8 0010A0E3 		mov	r1, #0	@,
 1826 07dc 442093E5 		ldr	r2, [r3, #68]	@, g_armwave_state.ch_buff_size
 1827 07e0 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1828              	.LVL133:
 1829              		.loc 1 343 5 is_stmt 0 view .LVU519
 1830 07e4 FEFFFFEA 		b	memset		@
 1831              	.LVL134:
 1832              	.L115:
 1833              		.align	2
 1834              	.L114:
 1835 07e8 00000000 		.word	g_armwave_state
 1836              		.cfi_endproc
 1837              	.LFE66:
 1839              		.align	2
 1840              		.global	armwave_set_channel_colour
 1841              		.syntax unified
 1842              		.arm
 1843              		.fpu vfp
 1845              	armwave_set_channel_colour:
 1846              	.LVL135:
 1847              	.LFB67:
 344:armwave.c     **** }
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 350:armwave.c     **** {
 1848              		.loc 1 350 1 is_stmt 1 view -0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 0
 1851              		@ frame_needed = 0, uses_anonymous_args = 0
 1852              		@ link register save eliminated.
 351:armwave.c     ****     // Only 1ch supported for now
 352:armwave.c     ****     switch(ch) {
 1853              		.loc 1 352 5 view .LVU521
 1854 07ec 010050E3 		cmp	r0, #1	@ ch,
 353:armwave.c     ****         case 1:
 354:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1855              		.loc 1 354 13 view .LVU522
 1856              	@ armwave.c:354:             g_armwave_state.ch1_color.r = r;
 1857              		.loc 1 354 41 is_stmt 0 view .LVU523
 1858 07f0 0C009F05 		ldreq	r0, .L118	@ tmp117,
 1859              	.LVL136:
 1860              		.loc 1 354 41 view .LVU524
 1861 07f4 B016C001 		strheq	r1, [r0, #96]	@ movhi	@ r, g_armwave_state.ch1_color.r
 355:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1862              		.loc 1 355 13 is_stmt 1 view .LVU525
 1863              	@ armwave.c:355:             g_armwave_state.ch1_color.g = g;
 1864              		.loc 1 355 41 is_stmt 0 view .LVU526
 1865 07f8 B226C001 		strheq	r2, [r0, #98]	@ movhi	@ g, g_armwave_state.ch1_color.g
 356:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1866              		.loc 1 356 13 is_stmt 1 view .LVU527
 1867              	@ armwave.c:356:             g_armwave_state.ch1_color.b = b;
 1868              		.loc 1 356 41 is_stmt 0 view .LVU528
 1869 07fc B436C001 		strheq	r3, [r0, #100]	@ movhi	@ b, g_armwave_state.ch1_color.b
 357:armwave.c     ****             break;
 1870              		.loc 1 357 13 is_stmt 1 view .LVU529
 1871              	@ armwave.c:359: }
 358:armwave.c     ****     }
 359:armwave.c     **** }
 1872              		.loc 1 359 1 is_stmt 0 view .LVU530
 1873 0800 1EFF2FE1 		bx	lr	@
 1874              	.L119:
 1875              		.align	2
 1876              	.L118:
 1877 0804 00000000 		.word	g_armwave_state
 1878              		.cfi_endproc
 1879              	.LFE67:
 1881              		.align	2
 1882              		.global	armwave_dump_ppm_debug
 1883              		.syntax unified
 1884              		.arm
 1885              		.fpu vfp
 1887              	armwave_dump_ppm_debug:
 1888              	.LVL137:
 1889              	.LFB68:
 360:armwave.c     **** 
 361:armwave.c     **** /*
 362:armwave.c     ****  * Dump a ppm of a buffer to a file.
 363:armwave.c     ****  */
 364:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 365:armwave.c     **** {
 1890              		.loc 1 365 1 is_stmt 1 view -0
 1891              		.cfi_startproc
 1892              		@ args = 0, pretend = 0, frame = 0
 1893              		@ frame_needed = 0, uses_anonymous_args = 0
 366:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1894              		.loc 1 366 5 view .LVU532
 1895              	@ armwave.c:365: {
 365:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1896              		.loc 1 365 1 is_stmt 0 view .LVU533
 1897 0808 0130A0E1 		mov	r3, r1	@ fn, fn
 1898 080c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1899              		.cfi_def_cfa_offset 28
 1900              		.cfi_offset 4, -28
 1901              		.cfi_offset 5, -24
 1902              		.cfi_offset 6, -20
 1903              		.cfi_offset 7, -16
 1904              		.cfi_offset 8, -12
 1905              		.cfi_offset 9, -8
 1906              		.cfi_offset 14, -4
 1907 0810 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1908 0814 0CD04DE2 		sub	sp, sp, #12	@,,
 1909              		.cfi_def_cfa_offset 40
 1910              	@ armwave.c:366:     FILE *fp = fopen(fn, "wb");
 1911              		.loc 1 366 16 view .LVU534
 1912 0818 D4109FE5 		ldr	r1, .L132	@,
 1913              	.LVL138:
 1914              		.loc 1 366 16 view .LVU535
 1915 081c 0300A0E1 		mov	r0, r3	@, fn
 1916              	.LVL139:
 1917              		.loc 1 366 16 view .LVU536
 1918 0820 FEFFFFEB 		bl	fopen64		@
 1919              	.LVL140:
 1920              	@ armwave.c:373:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 367:armwave.c     ****     uint32_t data;
 368:armwave.c     ****     int xx, yy;
 369:armwave.c     **** 
 370:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 371:armwave.c     **** 
 372:armwave.c     ****     fputs("P3\n", fp);
 373:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1921              		.loc 1 373 5 view .LVU537
 1922 0824 CC609FE5 		ldr	r6, .L132+4	@ tmp154,
 1923              	@ armwave.c:372:     fputs("P3\n", fp);
 372:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1924              		.loc 1 372 5 view .LVU538
 1925 0828 0320A0E3 		mov	r2, #3	@,
 1926 082c 0110A0E3 		mov	r1, #1	@,
 1927              	@ armwave.c:366:     FILE *fp = fopen(fn, "wb");
 366:armwave.c     ****     uint32_t data;
 1928              		.loc 1 366 16 view .LVU539
 1929 0830 0070A0E1 		mov	r7, r0	@ fp,
 1930              	.LVL141:
 367:armwave.c     ****     uint32_t data;
 1931              		.loc 1 367 5 is_stmt 1 view .LVU540
 368:armwave.c     **** 
 1932              		.loc 1 368 5 view .LVU541
 372:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1933              		.loc 1 372 5 view .LVU542
 1934 0834 0030A0E1 		mov	r3, r0	@, fp
 1935 0838 BC009FE5 		ldr	r0, .L132+8	@,
 1936              	.LVL142:
 372:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1937              		.loc 1 372 5 is_stmt 0 view .LVU543
 1938 083c FEFFFFEB 		bl	fwrite		@
 1939              	.LVL143:
 1940              		.loc 1 373 5 is_stmt 1 view .LVU544
 1941 0840 DC24C6E1 		ldrd	r2, [r6, #76]	@, tmp154,
 1942 0844 B4109FE5 		ldr	r1, .L132+12	@,
 1943 0848 0700A0E1 		mov	r0, r7	@, fp
 1944 084c FEFFFFEB 		bl	fprintf		@
 1945              	.LVL144:
 374:armwave.c     ****     fputs("255\n", fp);
 1946              		.loc 1 374 5 view .LVU545
 1947 0850 0420A0E3 		mov	r2, #4	@,
 1948 0854 0730A0E1 		mov	r3, r7	@, fp
 1949 0858 0110A0E3 		mov	r1, #1	@,
 1950 085c A0009FE5 		ldr	r0, .L132+16	@,
 1951 0860 FEFFFFEB 		bl	fwrite		@
 1952              	.LVL145:
 375:armwave.c     **** 
 376:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1953              		.loc 1 376 5 view .LVU546
 1954              	@ armwave.c:376:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1955              		.loc 1 376 37 is_stmt 0 view .LVU547
 1956 0864 502096E5 		ldr	r2, [r6, #80]	@ prephitmp_57, g_armwave_state.target_height
 1957              	@ armwave.c:376:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1958              		.loc 1 376 5 view .LVU548
 1959 0868 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1960 086c 1800000A 		beq	.L121		@,
 1961 0870 4C3096E5 		ldr	r3, [r6, #76]	@ _12, g_armwave_state.target_width
 1962              	@ armwave.c:381:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 377:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 378:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 379:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 380:armwave.c     **** 
 381:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1963              		.loc 1 381 13 view .LVU549
 1964 0874 8C909FE5 		ldr	r9, .L132+20	@ tmp156,
 1965              	@ armwave.c:376:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 376:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1966              		.loc 1 376 12 view .LVU550
 1967 0878 0050A0E3 		mov	r5, #0	@ yy,
 1968              	.LVL146:
 1969              	.L122:
 1970              	@ armwave.c:377:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 377:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1971              		.loc 1 377 9 view .LVU551
 1972 087c 000053E3 		cmp	r3, #0	@ _12,
 1973              	@ armwave.c:377:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 377:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1974              		.loc 1 377 16 view .LVU552
 1975 0880 0040A013 		movne	r4, #0	@ xx,
 1976              	@ armwave.c:377:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 377:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1977              		.loc 1 377 9 view .LVU553
 1978 0884 1600000A 		beq	.L131		@,
 1979              	.LVL147:
 1980              	.L123:
 378:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1981              		.loc 1 378 13 is_stmt 1 discriminator 3 view .LVU554
 1982              	@ armwave.c:378:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 378:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1983              		.loc 1 378 29 is_stmt 0 discriminator 3 view .LVU555
 1984 0888 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1985              	@ armwave.c:381:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1986              		.loc 1 381 13 discriminator 3 view .LVU556
 1987 088c 0910A0E1 		mov	r1, r9	@, tmp156
 1988 0890 0700A0E1 		mov	r0, r7	@, fp
 1989              	@ armwave.c:378:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 378:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1990              		.loc 1 378 18 discriminator 3 view .LVU557
 1991 0894 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1992              	.LVL148:
 1993              		.loc 1 381 13 is_stmt 1 discriminator 3 view .LVU558
 1994              	@ armwave.c:377:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 377:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1995              		.loc 1 377 58 is_stmt 0 discriminator 3 view .LVU559
 1996 0898 014084E2 		add	r4, r4, #1	@ xx, xx,
 1997              	.LVL149:
 1998              	@ armwave.c:381:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1999              		.loc 1 381 81 discriminator 3 view .LVU560
 2000 089c 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2001              	@ armwave.c:381:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2002              		.loc 1 381 61 discriminator 3 view .LVU561
 2003 08a0 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2004              	@ armwave.c:381:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2005              		.loc 1 381 13 discriminator 3 view .LVU562
 2006 08a4 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2007 08a8 7330EFE6 		uxtb	r3, r3	@, tmp146
 2008 08ac 00C08DE5 		str	ip, [sp]	@ tmp151,
 2009 08b0 7220EFE6 		uxtb	r2, r2	@, data
 2010              	.LVL150:
 2011              		.loc 1 381 13 discriminator 3 view .LVU563
 2012 08b4 FEFFFFEB 		bl	fprintf		@
 2013              	.LVL151:
 2014              	@ armwave.c:377:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 377:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2015              		.loc 1 377 41 discriminator 3 view .LVU564
 2016 08b8 4C3096E5 		ldr	r3, [r6, #76]	@ _12, g_armwave_state.target_width
 2017              	@ armwave.c:377:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 377:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2018              		.loc 1 377 9 discriminator 3 view .LVU565
 2019 08bc 040053E1 		cmp	r3, r4	@ _12, xx
 2020 08c0 F0FFFF8A 		bhi	.L123		@,
 2021 08c4 502096E5 		ldr	r2, [r6, #80]	@ prephitmp_57, g_armwave_state.target_height
 2022              	.LVL152:
 2023              	.L124:
 2024              	@ armwave.c:376:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 376:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2025              		.loc 1 376 55 discriminator 2 view .LVU566
 2026 08c8 015085E2 		add	r5, r5, #1	@ yy, yy,
 2027              	.LVL153:
 2028              	@ armwave.c:376:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 376:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2029              		.loc 1 376 5 discriminator 2 view .LVU567
 2030 08cc 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2031 08d0 E9FFFF3A 		bcc	.L122		@,
 2032              	.LVL154:
 2033              	.L121:
 382:armwave.c     ****         }
 383:armwave.c     ****     }
 384:armwave.c     **** 
 385:armwave.c     ****     fclose(fp);
 2034              		.loc 1 385 5 is_stmt 1 view .LVU568
 2035 08d4 0700A0E1 		mov	r0, r7	@, fp
 2036              	@ armwave.c:386: }
 386:armwave.c     **** }
 2037              		.loc 1 386 1 is_stmt 0 view .LVU569
 2038 08d8 0CD08DE2 		add	sp, sp, #12	@,,
 2039              		.cfi_remember_state
 2040              		.cfi_def_cfa_offset 28
 2041              		@ sp needed	@
 2042 08dc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2043              		.cfi_restore 14
 2044              		.cfi_restore 9
 2045              		.cfi_restore 8
 2046              		.cfi_restore 7
 2047              		.cfi_restore 6
 2048              		.cfi_restore 5
 2049              		.cfi_restore 4
 2050              		.cfi_def_cfa_offset 0
 2051              	.LVL155:
 2052              	@ armwave.c:385:     fclose(fp);
 385:armwave.c     **** }
 2053              		.loc 1 385 5 view .LVU570
 2054 08e0 FEFFFFEA 		b	fclose		@
 2055              	.LVL156:
 2056              	.L131:
 2057              		.cfi_restore_state
 2058              	@ armwave.c:376:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 376:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2059              		.loc 1 376 55 view .LVU571
 2060 08e4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2061              	.LVL157:
 2062              	@ armwave.c:376:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 376:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2063              		.loc 1 376 5 view .LVU572
 2064 08e8 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2065 08ec F5FFFF8A 		bhi	.L124		@,
 2066 08f0 F7FFFFEA 		b	.L121		@
 2067              	.L133:
 2068              		.align	2
 2069              	.L132:
 2070 08f4 38010000 		.word	.LC12
 2071 08f8 00000000 		.word	g_armwave_state
 2072 08fc 3C010000 		.word	.LC13
 2073 0900 40010000 		.word	.LC14
 2074 0904 48010000 		.word	.LC15
 2075 0908 50010000 		.word	.LC16
 2076              		.cfi_endproc
 2077              	.LFE68:
 2079              		.align	2
 2080              		.global	armwave_test_init
 2081              		.syntax unified
 2082              		.arm
 2083              		.fpu vfp
 2085              	armwave_test_init:
 2086              	.LVL158:
 2087              	.LFB69:
 387:armwave.c     **** 
 388:armwave.c     **** /*
 389:armwave.c     ****  * Initialise some test functionry.
 390:armwave.c     ****  */
 391:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 392:armwave.c     **** {
 2088              		.loc 1 392 1 is_stmt 1 view -0
 2089              		.cfi_startproc
 2090              		@ args = 0, pretend = 0, frame = 0
 2091              		@ frame_needed = 0, uses_anonymous_args = 0
 393:armwave.c     ****     test_create_gamma();
 2092              		.loc 1 393 5 view .LVU574
 2093              	.LBB12:
 2094              	.LBI12:
  45:armwave.c     **** {
 2095              		.loc 1 45 6 view .LVU575
  45:armwave.c     **** {
 2096              		.loc 1 45 6 is_stmt 0 view .LVU576
 2097              	.LBE12:
 2098              	@ armwave.c:392: {
 392:armwave.c     ****     test_create_gamma();
 2099              		.loc 1 392 1 view .LVU577
 2100 090c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2101              		.cfi_def_cfa_offset 32
 2102              		.cfi_offset 4, -32
 2103              		.cfi_offset 5, -28
 2104              		.cfi_offset 6, -24
 2105              		.cfi_offset 7, -20
 2106              		.cfi_offset 8, -16
 2107              		.cfi_offset 9, -12
 2108              		.cfi_offset 10, -8
 2109              		.cfi_offset 14, -4
 2110 0910 068B2DED 		vpush.64	{d8, d9, d10}	@
 2111              		.cfi_def_cfa_offset 56
 2112              		.cfi_offset 80, -56
 2113              		.cfi_offset 81, -52
 2114              		.cfi_offset 82, -48
 2115              		.cfi_offset 83, -44
 2116              		.cfi_offset 84, -40
 2117              		.cfi_offset 85, -36
 2118 0914 C0409FE5 		ldr	r4, .L138+20	@ ivtmp.98,
 2119              	.LBB15:
 2120              	.LBB13:
 2121              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2122              		.loc 1 51 32 view .LVU578
 2123 0918 2EAA9FED 		vldr.32	s20, .L138+16	@ tmp136,
 2124              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2125              		.loc 1 51 26 view .LVU579
 2126 091c 299B9FED 		vldr.64	d9, .L138	@ tmp151,
 2127              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2128              		.loc 1 51 49 view .LVU580
 2129 0920 2A8B9FED 		vldr.64	d8, .L138+8	@ tmp139,
 2130 0924 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.98,
 2131              	.LBE13:
 2132              	.LBE15:
 2133              	@ armwave.c:392: {
 392:armwave.c     ****     test_create_gamma();
 2134              		.loc 1 392 1 view .LVU581
 2135 0928 10D04DE2 		sub	sp, sp, #16	@,,
 2136              		.cfi_def_cfa_offset 72
 2137              	@ armwave.c:392: {
 392:armwave.c     ****     test_create_gamma();
 2138              		.loc 1 392 1 view .LVU582
 2139 092c 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2140 0930 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2141 0934 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2142 0938 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2143 093c 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.98,
 2144 0940 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2145              	.LVL159:
 2146              	.L135:
 2147              	.LBB16:
 2148              	.LBB14:
  51:armwave.c     ****     }
 2149              		.loc 1 51 9 is_stmt 1 view .LVU583
 2150              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2151              		.loc 1 51 32 is_stmt 0 view .LVU584
 2152 0944 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.98
 2153              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2154              		.loc 1 51 26 view .LVU585
 2155 0948 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2156              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2157              		.loc 1 51 32 view .LVU586
 2158 094c 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2159 0950 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2160 0954 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2161              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2162              		.loc 1 51 26 view .LVU587
 2163 0958 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2164 095c FEFFFFEB 		bl	pow		@
 2165              	.LVL160:
 2166              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2167              		.loc 1 51 49 view .LVU588
 2168 0960 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2169              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2170              		.loc 1 51 24 view .LVU589
 2171 0964 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2172 0968 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2173 096c 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2174              	.LVL161:
 2175              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2176              		.loc 1 50 5 view .LVU590
 2177 0970 0A0054E1 		cmp	r4, r10	@ ivtmp.98, _39
 2178 0974 F2FFFF1A 		bne	.L135		@,
 2179              	.LVL162:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2180              		.loc 1 50 5 view .LVU591
 2181              	.LBE14:
 2182              	.LBE16:
 394:armwave.c     **** 
 395:armwave.c     ****     // make ch1 yellowish by default
 396:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2183              		.loc 1 396 5 is_stmt 1 view .LVU592
 2184              	.LBB17:
 2185              	.LBI17:
 349:armwave.c     **** {
 2186              		.loc 1 349 6 view .LVU593
 2187              	.LBB18:
 352:armwave.c     ****         case 1:
 2188              		.loc 1 352 5 view .LVU594
 354:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2189              		.loc 1 354 13 view .LVU595
 355:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2190              		.loc 1 355 13 view .LVU596
 2191              	@ armwave.c:354:             g_armwave_state.ch1_color.r = r;
 354:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2192              		.loc 1 354 41 is_stmt 0 view .LVU597
 2193 0978 60C09FE5 		ldr	ip, .L138+24	@ tmp142,
 2194 097c 60409FE5 		ldr	r4, .L138+28	@ tmp143,
 2195              	.LBE18:
 2196              	.LBE17:
 2197              	@ armwave.c:398:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 397:armwave.c     **** 
 398:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2198              		.loc 1 398 5 view .LVU598
 2199 0980 0000A0E3 		mov	r0, #0	@ tmp147,
 2200              	.LBB22:
 2201              	.LBB19:
 2202              	@ armwave.c:356:             g_armwave_state.ch1_color.b = b;
 356:armwave.c     ****             break;
 2203              		.loc 1 356 41 view .LVU599
 2204 0984 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2205              	.LBE19:
 2206              	.LBE22:
 2207              	@ armwave.c:398:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2208              		.loc 1 398 5 view .LVU600
 2209 0988 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2210 098c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2211 0990 00808DE5 		str	r8, [sp]	@ render_width,
 2212 0994 0610A0E1 		mov	r1, r6	@, tmp3
 2213 0998 0720A0E1 		mov	r2, r7	@, nwaves
 2214              	.LBB23:
 2215              	.LBB20:
 2216              	@ armwave.c:354:             g_armwave_state.ch1_color.r = r;
 354:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2217              		.loc 1 354 41 view .LVU601
 2218 099c 60408CE5 		str	r4, [ip, #96]	@ tmp143, MEM[(short int *)&g_armwave_state + 96B]
 356:armwave.c     ****             break;
 2219              		.loc 1 356 13 is_stmt 1 view .LVU602
 2220              	.LBE20:
 2221              	.LBE23:
 2222              	@ armwave.c:398:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2223              		.loc 1 398 5 is_stmt 0 view .LVU603
 2224 09a0 0630A0E1 		mov	r3, r6	@, wave_size
 2225              	.LBB24:
 2226              	.LBB21:
 2227              	@ armwave.c:356:             g_armwave_state.ch1_color.b = b;
 356:armwave.c     ****             break;
 2228              		.loc 1 356 41 view .LVU604
 2229 09a4 B4E6CCE1 		strh	lr, [ip, #100]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 357:armwave.c     ****     }
 2230              		.loc 1 357 13 is_stmt 1 view .LVU605
 2231              	.LVL163:
 357:armwave.c     ****     }
 2232              		.loc 1 357 13 is_stmt 0 view .LVU606
 2233              	.LBE21:
 2234              	.LBE24:
 2235              		.loc 1 398 5 is_stmt 1 view .LVU607
 2236 09a8 FEFFFFEB 		bl	armwave_setup_render		@
 2237              	.LVL164:
 399:armwave.c     **** 
 400:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2238              		.loc 1 400 5 view .LVU608
 2239 09ac 34109FE5 		ldr	r1, .L138+32	@,
 2240 09b0 34009FE5 		ldr	r0, .L138+36	@,
 2241              	@ armwave.c:401: }
 401:armwave.c     **** }
 2242              		.loc 1 401 1 is_stmt 0 view .LVU609
 2243 09b4 10D08DE2 		add	sp, sp, #16	@,,
 2244              		.cfi_def_cfa_offset 56
 2245              		@ sp needed	@
 2246 09b8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2247              		.cfi_restore 84
 2248              		.cfi_restore 85
 2249              		.cfi_restore 82
 2250              		.cfi_restore 83
 2251              		.cfi_restore 80
 2252              		.cfi_restore 81
 2253              		.cfi_def_cfa_offset 32
 2254 09bc F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2255              		.cfi_restore 14
 2256              		.cfi_restore 10
 2257              		.cfi_restore 9
 2258              		.cfi_restore 8
 2259              		.cfi_restore 7
 2260              		.cfi_restore 6
 2261              		.cfi_restore 5
 2262              		.cfi_restore 4
 2263              		.cfi_def_cfa_offset 0
 2264              	.LVL165:
 2265              	@ armwave.c:400:     printf("armwave version: %s\n", ARMWAVE_VER);
 400:armwave.c     **** }
 2266              		.loc 1 400 5 view .LVU610
 2267 09c0 FEFFFFEA 		b	printf		@
 2268              	.LVL166:
 2269              	.L139:
 2270 09c4 0000A0E1 		.align	3
 2271              	.L138:
 2272 09c8 000000C0 		.word	-1073741824
 2273 09cc CCCCEC3F 		.word	1072483532
 2274 09d0 00000000 		.word	0
 2275 09d4 00E06F40 		.word	1081073664
 2276 09d8 00007F43 		.word	1132396544
 2277 09dc FFFFFFFF 		.word	gamma_table-1
 2278 09e0 00000000 		.word	g_armwave_state
 2279 09e4 F609F406 		.word	116656630
 2280 09e8 00000000 		.word	.LC0
 2281 09ec 08000000 		.word	.LC1
 2282              		.cfi_endproc
 2283              	.LFE69:
 2285              		.global	__aeabi_uidiv
 2286              		.align	2
 2287              		.global	armwave_test_generate
 2288              		.syntax unified
 2289              		.arm
 2290              		.fpu vfp
 2292              	armwave_test_generate:
 2293              	.LFB70:
 402:armwave.c     **** 
 403:armwave.c     **** /*
 404:armwave.c     ****  * Fill buffers with test funtionry.
 405:armwave.c     ****  */
 406:armwave.c     **** void armwave_test_generate()
 407:armwave.c     **** {
 2294              		.loc 1 407 1 is_stmt 1 view -0
 2295              		.cfi_startproc
 2296              		@ args = 0, pretend = 0, frame = 16
 2297              		@ frame_needed = 0, uses_anonymous_args = 0
 408:armwave.c     ****     uint32_t yy;
 2298              		.loc 1 408 5 view .LVU612
 409:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2299              		.loc 1 409 5 view .LVU613
 2300              	@ armwave.c:407: {
 407:armwave.c     ****     uint32_t yy;
 2301              		.loc 1 407 1 is_stmt 0 view .LVU614
 2302 09f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2303              		.cfi_def_cfa_offset 36
 2304              		.cfi_offset 4, -36
 2305              		.cfi_offset 5, -32
 2306              		.cfi_offset 6, -28
 2307              		.cfi_offset 7, -24
 2308              		.cfi_offset 8, -20
 2309              		.cfi_offset 9, -16
 2310              		.cfi_offset 10, -12
 2311              		.cfi_offset 11, -8
 2312              		.cfi_offset 14, -4
 2313 09f4 14D04DE2 		sub	sp, sp, #20	@,,
 2314              		.cfi_def_cfa_offset 56
 2315              	@ armwave.c:409:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2316              		.loc 1 409 14 view .LVU615
 2317 09f8 40429FE5 		ldr	r4, .L168	@ tmp386,
 2318              	@ armwave.c:411:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 410:armwave.c     **** 
 411:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2319              		.loc 1 411 5 view .LVU616
 2320 09fc 0010A0E3 		mov	r1, #0	@,
 2321              	@ armwave.c:409:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 409:armwave.c     **** 
 2322              		.loc 1 409 14 view .LVU617
 2323 0a00 4C3094E5 		ldr	r3, [r4, #76]	@ xx_rem, g_armwave_state.target_width
 2324              	@ armwave.c:411:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2325              		.loc 1 411 5 view .LVU618
 2326 0a04 442094E5 		ldr	r2, [r4, #68]	@, g_armwave_state.ch_buff_size
 2327 0a08 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2328              	@ armwave.c:409:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 409:armwave.c     **** 
 2329              		.loc 1 409 14 view .LVU619
 2330 0a0c 08308DE5 		str	r3, [sp, #8]	@ xx_rem, %sfp
 2331              	.LVL167:
 2332              		.loc 1 411 5 is_stmt 1 view .LVU620
 2333 0a10 FEFFFFEB 		bl	memset		@
 2334              	.LVL168:
 412:armwave.c     **** 
 413:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 2335              		.loc 1 413 5 view .LVU621
 2336              	@ armwave.c:413:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2337              		.loc 1 413 38 is_stmt 0 view .LVU622
 2338 0a14 4CB094E5 		ldr	fp, [r4, #76]	@ prephitmp_309, g_armwave_state.target_width
 2339              	@ armwave.c:413:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2340              		.loc 1 413 69 view .LVU623
 2341 0a18 387094E5 		ldr	r7, [r4, #56]	@ _120, g_armwave_state.slice_height
 2342              	@ armwave.c:413:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2343              		.loc 1 413 5 view .LVU624
 2344 0a1c 07005BE1 		cmp	fp, r7	@ prephitmp_309, _120
 2345 0a20 8100003A 		bcc	.L141		@,
 2346              	@ armwave.c:409:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 409:armwave.c     **** 
 2347              		.loc 1 409 53 view .LVU625
 2348 0a24 0030A0E3 		mov	r3, #0	@ ypos,
 2349 0a28 045094E5 		ldr	r5, [r4, #4]	@ prephitmp_360, g_armwave_state.ch1_buffer
 2350 0a2c 346094E5 		ldr	r6, [r4, #52]	@ prephitmp_313, g_armwave_state.bitdepth_height
 2351 0a30 2CA094E5 		ldr	r10, [r4, #44]	@ prephitmp_331, g_armwave_state.waves
 2352              	@ armwave.c:413:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2353              		.loc 1 413 12 view .LVU626
 2354 0a34 0390A0E1 		mov	r9, r3	@ yy, ypos
 2355              	@ armwave.c:409:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 409:armwave.c     **** 
 2356              		.loc 1 409 53 view .LVU627
 2357 0a38 04308DE5 		str	r3, [sp, #4]	@ ypos, %sfp
 2358              	.LVL169:
 2359              	.L147:
 414:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 415:armwave.c     **** 
 416:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2360              		.loc 1 416 9 is_stmt 1 discriminator 3 view .LVU628
 2361 0a3c 970903E0 		mul	r3, r7, r9	@ _4, _120, yy
 2362              	.LBB29:
 2363              	.LBB30:
 2364              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2365              		.loc 1 85 5 is_stmt 0 discriminator 3 view .LVU629
 2366 0a40 00005AE3 		cmp	r10, #0	@ prephitmp_331,
 2367              	.LBE30:
 2368              	.LBE29:
 2369              	@ armwave.c:416:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2370              		.loc 1 416 9 discriminator 3 view .LVU630
 2371 0a44 3C8094E5 		ldr	r8, [r4, #60]	@ _5, g_armwave_state.slice_record_height
 2372              	.LVL170:
 2373              	.LBB32:
 2374              	.LBI29:
  73:armwave.c     **** {
 2375              		.loc 1 73 6 is_stmt 1 discriminator 3 view .LVU631
 2376              	.LBB31:
  75:armwave.c     ****     uint32_t value, word;
 2377              		.loc 1 75 5 discriminator 3 view .LVU632
  76:armwave.c     ****     uint8_t *wave_base;
 2378              		.loc 1 76 5 discriminator 3 view .LVU633
  77:armwave.c     ****     uint8_t *write_buffer_base;
 2379              		.loc 1 77 5 discriminator 3 view .LVU634
  78:armwave.c     ****     uint8_t *write_buffer;
 2380              		.loc 1 78 5 discriminator 3 view .LVU635
  79:armwave.c     **** 
 2381              		.loc 1 79 5 discriminator 3 view .LVU636
  82:armwave.c     **** 
 2382              		.loc 1 82 5 discriminator 3 view .LVU637
 2383              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 2384              		.loc 1 82 63 is_stmt 0 discriminator 3 view .LVU638
 2385 0a48 96030EE0 		mul	lr, r6, r3	@ _25, prephitmp_313, _4
 2386              	.LVL171:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2387              		.loc 1 85 5 is_stmt 1 discriminator 3 view .LVU639
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2388              		.loc 1 85 5 is_stmt 0 discriminator 3 view .LVU640
 2389 0a4c 3500000A 		beq	.L142		@,
 2390              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2391              		.loc 1 85 11 view .LVU641
 2392 0a50 0070A0E3 		mov	r7, #0	@ w,
 2393 0a54 043043E2 		sub	r3, r3, #4	@ _164, _4,
 2394              	.LVL172:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2395              		.loc 1 85 11 view .LVU642
 2396 0a58 0C308DE5 		str	r3, [sp, #12]	@ _164, %sfp
 2397              	.LVL173:
 2398              	.L146:
  87:armwave.c     **** 
 2399              		.loc 1 87 9 is_stmt 1 view .LVU643
 2400              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2401              		.loc 1 87 64 is_stmt 0 view .LVU644
 2402 0a5c 283094E5 		ldr	r3, [r4, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2403              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2404              		.loc 1 91 9 view .LVU645
 2405 0a60 000058E3 		cmp	r8, #0	@ _5,
 2406              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2407              		.loc 1 87 36 view .LVU646
 2408 0a64 141094E5 		ldr	r1, [r4, #20]	@ _26, g_armwave_state.wave_buffer
 2409              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2410              		.loc 1 87 64 view .LVU647
 2411 0a68 930703E0 		mul	r3, r3, r7	@ _29, g_armwave_state.wave_stride, w
 2412              	.LVL174:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2413              		.loc 1 91 9 is_stmt 1 view .LVU648
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2414              		.loc 1 91 9 is_stmt 0 view .LVU649
 2415 0a6c 2700000A 		beq	.L143		@,
 2416 0a70 0C209DE5 		ldr	r2, [sp, #12]	@ _164, %sfp
 2417 0a74 023083E0 		add	r3, r3, r2	@ tmp274, _29, _164
 2418              	.LVL175:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2419              		.loc 1 91 9 view .LVU650
 2420 0a78 031081E0 		add	r1, r1, r3	@ ivtmp.119, _26, tmp274
 2421              	.LVL176:
 2422              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2423              		.loc 1 91 16 view .LVU651
 2424 0a7c 0030A0E3 		mov	r3, #0	@ yy,
 2425 0a80 000000EA 		b	.L145		@
 2426              	.LVL177:
 2427              	.L144:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2428              		.loc 1 91 16 view .LVU652
 2429 0a84 346094E5 		ldr	r6, [r4, #52]	@ prephitmp_313, g_armwave_state.bitdepth_height
 2430              	.LVL178:
 2431              	.L145:
  92:armwave.c     **** 
 2432              		.loc 1 92 13 is_stmt 1 view .LVU653
 2433              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
  92:armwave.c     **** 
 2434              		.loc 1 92 18 is_stmt 0 view .LVU654
 2435 0a88 0420B1E5 		ldr	r2, [r1, #4]!	@ word, MEM[base: _354, offset: 0B]
 2436              	.LVL179:
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2437              		.loc 1 94 13 is_stmt 1 view .LVU655
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2438              		.loc 1 96 17 view .LVU656
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2439              		.loc 1 97 17 view .LVU657
  98:armwave.c     ****                 word >>= 8;
 2440              		.loc 1 98 17 view .LVU658
 2441              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2442              		.loc 1 97 63 is_stmt 0 view .LVU659
 2443 0a8c 01A083E2 		add	r10, r3, #1	@ tmp287, yy,
 2444 0a90 020083E2 		add	r0, r3, #2	@ tmp299, yy,
 2445              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2446              		.loc 1 98 47 view .LVU660
 2447 0a94 72C0EEE6 		uxtab	ip, lr, r2	@ tmp276, _25, word
 2448 0a98 93C626E0 		mla	r6, r3, r6, ip	@ tmp278, yy, prephitmp_313, tmp276
 2449              	@ armwave.c:99:                 word >>= 8;
  99:armwave.c     ****             }
 2450              		.loc 1 99 22 view .LVU661
 2451 0a9c 22B4A0E1 		lsr	fp, r2, #8	@ word, word,
 2452              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2453              		.loc 1 98 47 view .LVU662
 2454 0aa0 06C0D5E7 		ldrb	ip, [r5, r6]	@ zero_extendqisi2	@ *_191, *_191
 2455 0aa4 7BB0EEE6 		uxtab	fp, lr, fp	@ tmp285, _25, word
 2456 0aa8 01C08CE2 		add	ip, ip, #1	@ tmp281, *_191,
 2457 0aac 06C0C5E7 		strb	ip, [r5, r6]	@ tmp281, *_191
  99:armwave.c     ****             }
 2458              		.loc 1 99 17 is_stmt 1 view .LVU663
 2459              	.LVL180:
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2460              		.loc 1 96 17 view .LVU664
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2461              		.loc 1 97 17 view .LVU665
  98:armwave.c     ****                 word >>= 8;
 2462              		.loc 1 98 17 view .LVU666
 2463              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2464              		.loc 1 97 63 is_stmt 0 view .LVU667
 2465 0ab0 34C094E5 		ldr	ip, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2466              	@ armwave.c:99:                 word >>= 8;
  99:armwave.c     ****             }
 2467              		.loc 1 99 22 view .LVU668
 2468 0ab4 2268A0E1 		lsr	r6, r2, #16	@ word, word,
 2469              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2470              		.loc 1 98 47 view .LVU669
 2471 0ab8 222C8EE0 		add	r2, lr, r2, lsr #24	@ tmp312, _25, word,
 2472              	.LVL181:
  98:armwave.c     ****                 word >>= 8;
 2473              		.loc 1 98 47 view .LVU670
 2474 0abc 9CBA2CE0 		mla	ip, ip, r10, fp	@ tmp290, g_armwave_state.bitdepth_height, tmp287, tmp285
 2475 0ac0 7660EEE6 		uxtab	r6, lr, r6	@ tmp297, _25, word
 2476 0ac4 0CA0D5E7 		ldrb	r10, [r5, ip]	@ zero_extendqisi2	@ *_211, *_211
 2477              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2478              		.loc 1 97 63 view .LVU671
 2479 0ac8 03B083E2 		add	fp, r3, #3	@ tmp308, yy,
 2480              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2481              		.loc 1 91 37 view .LVU672
 2482 0acc 043083E2 		add	r3, r3, #4	@ yy, yy,
 2483              	.LVL182:
 2484              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2485              		.loc 1 98 47 view .LVU673
 2486 0ad0 01A08AE2 		add	r10, r10, #1	@ tmp293, *_211,
 2487 0ad4 0CA0C5E7 		strb	r10, [r5, ip]	@ tmp293, *_211
  99:armwave.c     ****             }
 2488              		.loc 1 99 17 is_stmt 1 view .LVU674
 2489              	.LVL183:
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2490              		.loc 1 96 17 view .LVU675
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2491              		.loc 1 97 17 view .LVU676
  98:armwave.c     ****                 word >>= 8;
 2492              		.loc 1 98 17 view .LVU677
 2493              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2494              		.loc 1 97 63 is_stmt 0 view .LVU678
 2495 0ad8 34C094E5 		ldr	ip, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2496              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2497              		.loc 1 91 9 view .LVU679
 2498 0adc 030058E1 		cmp	r8, r3	@ _5, yy
 2499              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2500              		.loc 1 98 47 view .LVU680
 2501 0ae0 9C6020E0 		mla	r0, ip, r0, r6	@ tmp302, g_armwave_state.bitdepth_height, tmp299, tmp297
 2502 0ae4 00C0D5E7 		ldrb	ip, [r5, r0]	@ zero_extendqisi2	@ *_231, *_231
 2503 0ae8 01C08CE2 		add	ip, ip, #1	@ tmp305, *_231,
 2504 0aec 00C0C5E7 		strb	ip, [r5, r0]	@ tmp305, *_231
  99:armwave.c     ****             }
 2505              		.loc 1 99 17 is_stmt 1 view .LVU681
 2506              	.LVL184:
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2507              		.loc 1 96 17 view .LVU682
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2508              		.loc 1 97 17 view .LVU683
  98:armwave.c     ****                 word >>= 8;
 2509              		.loc 1 98 17 view .LVU684
 2510              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2511              		.loc 1 97 63 is_stmt 0 view .LVU685
 2512 0af0 340094E5 		ldr	r0, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2513              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2514              		.loc 1 98 47 view .LVU686
 2515 0af4 902B22E0 		mla	r2, r0, fp, r2	@ tmp313, g_armwave_state.bitdepth_height, tmp308, tmp312
 2516 0af8 0200D5E7 		ldrb	r0, [r5, r2]	@ zero_extendqisi2	@ *_251, *_251
 2517 0afc 010080E2 		add	r0, r0, #1	@ tmp316, *_251,
 2518 0b00 0200C5E7 		strb	r0, [r5, r2]	@ tmp316, *_251
  99:armwave.c     ****             }
 2519              		.loc 1 99 17 is_stmt 1 view .LVU687
 2520              	.LVL185:
 2521              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2522              		.loc 1 91 9 is_stmt 0 view .LVU688
 2523 0b04 DEFFFF8A 		bhi	.L144		@,
 2524 0b08 2CA094E5 		ldr	r10, [r4, #44]	@ prephitmp_331, g_armwave_state.waves
 2525 0b0c 346094E5 		ldr	r6, [r4, #52]	@ prephitmp_313, g_armwave_state.bitdepth_height
 2526              	.LVL186:
 2527              	.L143:
 2528              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2529              		.loc 1 85 44 view .LVU689
 2530 0b10 017087E2 		add	r7, r7, #1	@ w, w,
 2531              	.LVL187:
 2532              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2533              		.loc 1 85 5 view .LVU690
 2534 0b14 0A0057E1 		cmp	r7, r10	@ w, prephitmp_331
 2535 0b18 CFFFFF3A 		bcc	.L146		@,
 2536 0b1c 387094E5 		ldr	r7, [r4, #56]	@ _120, g_armwave_state.slice_height
 2537              	.LVL188:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2538              		.loc 1 85 5 view .LVU691
 2539 0b20 4CB094E5 		ldr	fp, [r4, #76]	@ prephitmp_309, g_armwave_state.target_width
 2540 0b24 045094E5 		ldr	r5, [r4, #4]	@ prephitmp_360, g_armwave_state.ch1_buffer
 2541              	.LVL189:
 2542              	.L142:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2543              		.loc 1 85 5 view .LVU692
 2544              	.LBE31:
 2545              	.LBE32:
 417:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2546              		.loc 1 417 9 is_stmt 1 discriminator 3 view .LVU693
 2547              	@ armwave.c:413:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 413:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2548              		.loc 1 413 52 is_stmt 0 discriminator 3 view .LVU694
 2549 0b28 0710A0E1 		mov	r1, r7	@, _120
 2550 0b2c 0B00A0E1 		mov	r0, fp	@, prephitmp_309
 2551 0b30 FEFFFFEB 		bl	__aeabi_uidiv		@
 2552              	.LVL190:
 2553              	@ armwave.c:417:         xx_rem -= g_armwave_state.slice_height;
 2554              		.loc 1 417 16 discriminator 3 view .LVU695
 2555 0b34 08309DE5 		ldr	r3, [sp, #8]	@ xx_rem, %sfp
 2556              	@ armwave.c:413:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 413:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2557              		.loc 1 413 87 discriminator 3 view .LVU696
 2558 0b38 019089E2 		add	r9, r9, #1	@ yy, yy,
 2559              	.LVL191:
 2560              	@ armwave.c:417:         xx_rem -= g_armwave_state.slice_height;
 2561              		.loc 1 417 16 discriminator 3 view .LVU697
 2562 0b3c 073043E0 		sub	r3, r3, r7	@ xx_rem, xx_rem, _120
 2563 0b40 08308DE5 		str	r3, [sp, #8]	@ xx_rem, %sfp
 2564              	.LVL192:
 418:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2565              		.loc 1 418 9 is_stmt 1 discriminator 3 view .LVU698
 2566              	@ armwave.c:418:         ypos += g_armwave_state.slice_height;
 2567              		.loc 1 418 14 is_stmt 0 discriminator 3 view .LVU699
 2568 0b44 04309DE5 		ldr	r3, [sp, #4]	@ ypos, %sfp
 2569              	.LVL193:
 2570              		.loc 1 418 14 discriminator 3 view .LVU700
 2571 0b48 073083E0 		add	r3, r3, r7	@ ypos, ypos, _120
 2572              	.LVL194:
 2573              		.loc 1 418 14 discriminator 3 view .LVU701
 2574 0b4c 04308DE5 		str	r3, [sp, #4]	@ ypos, %sfp
 2575              	.LVL195:
 2576              	@ armwave.c:413:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 413:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2577              		.loc 1 413 5 discriminator 3 view .LVU702
 2578 0b50 090050E1 		cmp	r0, r9	@, yy
 2579 0b54 B8FFFF8A 		bhi	.L147		@,
 2580 0b58 960306E0 		mul	r6, r6, r3	@ _368, prephitmp_313, ypos
 2581              	.LVL196:
 2582              	.L148:
 419:armwave.c     ****     }
 420:armwave.c     **** 
 421:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2583              		.loc 1 421 5 is_stmt 1 view .LVU703
 2584              	.LBB33:
 2585              	.LBI33:
  73:armwave.c     **** {
 2586              		.loc 1 73 6 view .LVU704
 2587              	.LBB34:
  75:armwave.c     ****     uint32_t value, word;
 2588              		.loc 1 75 5 view .LVU705
  76:armwave.c     ****     uint8_t *wave_base;
 2589              		.loc 1 76 5 view .LVU706
  77:armwave.c     ****     uint8_t *write_buffer_base;
 2590              		.loc 1 77 5 view .LVU707
  78:armwave.c     ****     uint8_t *write_buffer;
 2591              		.loc 1 78 5 view .LVU708
  79:armwave.c     **** 
 2592              		.loc 1 79 5 view .LVU709
  82:armwave.c     **** 
 2593              		.loc 1 82 5 view .LVU710
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2594              		.loc 1 85 5 view .LVU711
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2595              		.loc 1 85 5 is_stmt 0 view .LVU712
 2596 0b5c 00005AE3 		cmp	r10, #0	@ prephitmp_331,
 2597 0b60 2F00000A 		beq	.L140		@,
 2598 0b64 08809DE5 		ldr	r8, [sp, #8]	@ xx_rem, %sfp
 2599 0b68 000058E3 		cmp	r8, #0	@ xx_rem,
 2600 0b6c 2C00000A 		beq	.L140		@,
 2601 0b70 04309DE5 		ldr	r3, [sp, #4]	@ ypos, %sfp
 2602              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2603              		.loc 1 85 11 view .LVU713
 2604 0b74 00E0A0E3 		mov	lr, #0	@ w,
 2605 0b78 047043E2 		sub	r7, r3, #4	@ tmp385, ypos,
 2606              	.LVL197:
 2607              	.L152:
  87:armwave.c     **** 
 2608              		.loc 1 87 9 is_stmt 1 view .LVU714
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2609              		.loc 1 91 9 view .LVU715
 2610              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2611              		.loc 1 87 64 is_stmt 0 view .LVU716
 2612 0b7c 282094E5 		ldr	r2, [r4, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2613 0b80 14C094E5 		ldr	ip, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2614              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2615              		.loc 1 91 16 view .LVU717
 2616 0b84 0030A0E3 		mov	r3, #0	@ yy,
 2617 0b88 927E22E0 		mla	r2, r2, lr, r7	@ tmp335, g_armwave_state.wave_stride, w, tmp385
 2618 0b8c 02C08CE0 		add	ip, ip, r2	@ ivtmp.104, g_armwave_state.wave_buffer, tmp335
 2619              	.LVL198:
 2620              	.L151:
  92:armwave.c     **** 
 2621              		.loc 1 92 13 is_stmt 1 view .LVU718
 2622              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
  92:armwave.c     **** 
 2623              		.loc 1 92 18 is_stmt 0 view .LVU719
 2624 0b90 0420BCE5 		ldr	r2, [ip, #4]!	@ word, MEM[base: _388, offset: 0B]
 2625              	.LVL199:
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2626              		.loc 1 94 13 is_stmt 1 view .LVU720
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2627              		.loc 1 96 17 view .LVU721
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2628              		.loc 1 97 17 view .LVU722
  98:armwave.c     ****                 word >>= 8;
 2629              		.loc 1 98 17 view .LVU723
 2630              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2631              		.loc 1 97 63 is_stmt 0 view .LVU724
 2632 0b94 349094E5 		ldr	r9, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2633 0b98 011083E2 		add	r1, r3, #1	@ tmp348, yy,
 2634              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2635              		.loc 1 98 47 view .LVU725
 2636 0b9c 7200E6E6 		uxtab	r0, r6, r2	@ tmp341, _368, word
 2637 0ba0 990329E0 		mla	r9, r9, r3, r0	@ tmp342, g_armwave_state.bitdepth_height, yy, tmp341
 2638              	@ armwave.c:99:                 word >>= 8;
  99:armwave.c     ****             }
 2639              		.loc 1 99 22 view .LVU726
 2640 0ba4 22B4A0E1 		lsr	fp, r2, #8	@ word, word,
 2641 0ba8 22A8A0E1 		lsr	r10, r2, #16	@ word, word,
 2642              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2643              		.loc 1 98 47 view .LVU727
 2644 0bac 0900D5E7 		ldrb	r0, [r5, r9]	@ zero_extendqisi2	@ *_111, *_111
 2645 0bb0 7BB0E6E6 		uxtab	fp, r6, fp	@ tmp353, _368, word
 2646 0bb4 010080E2 		add	r0, r0, #1	@ tmp345, *_111,
 2647 0bb8 0900C5E7 		strb	r0, [r5, r9]	@ tmp345, *_111
  99:armwave.c     ****             }
 2648              		.loc 1 99 17 is_stmt 1 view .LVU728
 2649              	.LVL200:
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2650              		.loc 1 96 17 view .LVU729
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2651              		.loc 1 97 17 view .LVU730
  98:armwave.c     ****                 word >>= 8;
 2652              		.loc 1 98 17 view .LVU731
 2653              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2654              		.loc 1 97 63 is_stmt 0 view .LVU732
 2655 0bbc 340094E5 		ldr	r0, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2656              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2657              		.loc 1 98 47 view .LVU733
 2658 0bc0 7AA0E6E6 		uxtab	r10, r6, r10	@ tmp361, _368, word
 2659 0bc4 90B120E0 		mla	r0, r0, r1, fp	@ tmp354, g_armwave_state.bitdepth_height, tmp348, tmp353
 2660              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2661              		.loc 1 97 63 view .LVU734
 2662 0bc8 021083E2 		add	r1, r3, #2	@ tmp363, yy,
 2663 0bcc 039083E2 		add	r9, r3, #3	@ tmp372, yy,
 2664              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2665              		.loc 1 98 47 view .LVU735
 2666 0bd0 00B0D5E7 		ldrb	fp, [r5, r0]	@ zero_extendqisi2	@ *_131, *_131
 2667 0bd4 222C86E0 		add	r2, r6, r2, lsr #24	@ tmp376, _368, word,
 2668              	.LVL201:
 2669              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2670              		.loc 1 91 37 view .LVU736
 2671 0bd8 043083E2 		add	r3, r3, #4	@ yy, yy,
 2672              	.LVL202:
 2673              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2674              		.loc 1 98 47 view .LVU737
 2675 0bdc 01B08BE2 		add	fp, fp, #1	@ tmp357, *_131,
 2676 0be0 00B0C5E7 		strb	fp, [r5, r0]	@ tmp357, *_131
  99:armwave.c     ****             }
 2677              		.loc 1 99 17 is_stmt 1 view .LVU738
 2678              	.LVL203:
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2679              		.loc 1 96 17 view .LVU739
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2680              		.loc 1 97 17 view .LVU740
  98:armwave.c     ****                 word >>= 8;
 2681              		.loc 1 98 17 view .LVU741
 2682              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2683              		.loc 1 97 63 is_stmt 0 view .LVU742
 2684 0be4 340094E5 		ldr	r0, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2685              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2686              		.loc 1 91 9 view .LVU743
 2687 0be8 030058E1 		cmp	r8, r3	@ xx_rem, yy
 2688              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2689              		.loc 1 98 47 view .LVU744
 2690 0bec 90A121E0 		mla	r1, r0, r1, r10	@ tmp366, g_armwave_state.bitdepth_height, tmp363, tmp361
 2691 0bf0 0100D5E7 		ldrb	r0, [r5, r1]	@ zero_extendqisi2	@ *_151, *_151
 2692 0bf4 010080E2 		add	r0, r0, #1	@ tmp369, *_151,
 2693 0bf8 0100C5E7 		strb	r0, [r5, r1]	@ tmp369, *_151
  99:armwave.c     ****             }
 2694              		.loc 1 99 17 is_stmt 1 view .LVU745
 2695              	.LVL204:
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2696              		.loc 1 96 17 view .LVU746
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2697              		.loc 1 97 17 view .LVU747
  98:armwave.c     ****                 word >>= 8;
 2698              		.loc 1 98 17 view .LVU748
 2699              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2700              		.loc 1 97 63 is_stmt 0 view .LVU749
 2701 0bfc 341094E5 		ldr	r1, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2702              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 2703              		.loc 1 98 47 view .LVU750
 2704 0c00 912922E0 		mla	r2, r1, r9, r2	@ tmp377, g_armwave_state.bitdepth_height, tmp372, tmp376
 2705 0c04 0210D5E7 		ldrb	r1, [r5, r2]	@ zero_extendqisi2	@ *_171, *_171
 2706 0c08 011081E2 		add	r1, r1, #1	@ tmp380, *_171,
 2707 0c0c 0210C5E7 		strb	r1, [r5, r2]	@ tmp380, *_171
  99:armwave.c     ****             }
 2708              		.loc 1 99 17 is_stmt 1 view .LVU751
 2709              	.LVL205:
 2710              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2711              		.loc 1 91 9 is_stmt 0 view .LVU752
 2712 0c10 DEFFFF8A 		bhi	.L151		@,
 2713              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2714              		.loc 1 85 5 view .LVU753
 2715 0c14 2C3094E5 		ldr	r3, [r4, #44]	@ g_armwave_state.waves, g_armwave_state.waves
 2716              	.LVL206:
 2717              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2718              		.loc 1 85 44 view .LVU754
 2719 0c18 01E08EE2 		add	lr, lr, #1	@ w, w,
 2720              	.LVL207:
 2721              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2722              		.loc 1 85 5 view .LVU755
 2723 0c1c 03005EE1 		cmp	lr, r3	@ w, g_armwave_state.waves
 2724 0c20 D5FFFF3A 		bcc	.L152		@,
 2725              	.LVL208:
 2726              	.L140:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2727              		.loc 1 85 5 view .LVU756
 2728              	.LBE34:
 2729              	.LBE33:
 2730              	@ armwave.c:422: }
 422:armwave.c     **** }
 2731              		.loc 1 422 1 view .LVU757
 2732 0c24 14D08DE2 		add	sp, sp, #20	@,,
 2733              		.cfi_remember_state
 2734              		.cfi_def_cfa_offset 36
 2735              		@ sp needed	@
 2736 0c28 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2737              	.LVL209:
 2738              	.L141:
 2739              		.cfi_restore_state
 2740              	@ armwave.c:413:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 413:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2741              		.loc 1 413 5 view .LVU758
 2742 0c2c 0060A0E3 		mov	r6, #0	@ _368,
 2743 0c30 045094E5 		ldr	r5, [r4, #4]	@ prephitmp_360, g_armwave_state.ch1_buffer
 2744 0c34 2CA094E5 		ldr	r10, [r4, #44]	@ prephitmp_331, g_armwave_state.waves
 2745              	@ armwave.c:409:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 409:armwave.c     **** 
 2746              		.loc 1 409 53 view .LVU759
 2747 0c38 04608DE5 		str	r6, [sp, #4]	@ _368, %sfp
 2748 0c3c C6FFFFEA 		b	.L148		@
 2749              	.L169:
 2750              		.align	2
 2751              	.L168:
 2752 0c40 00000000 		.word	g_armwave_state
 2753              		.cfi_endproc
 2754              	.LFE70:
 2756              		.align	2
 2757              		.global	armwave_test_fill_outbuf
 2758              		.syntax unified
 2759              		.arm
 2760              		.fpu vfp
 2762              	armwave_test_fill_outbuf:
 2763              	.LFB71:
 423:armwave.c     **** 
 424:armwave.c     **** /*
 425:armwave.c     ****  * Render image to the local allocated buffer.
 426:armwave.c     ****  */
 427:armwave.c     **** void armwave_test_fill_outbuf()
 428:armwave.c     **** {
 2764              		.loc 1 428 1 is_stmt 1 view -0
 2765              		.cfi_startproc
 2766              		@ args = 0, pretend = 0, frame = 8
 2767              		@ frame_needed = 0, uses_anonymous_args = 0
 429:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2768              		.loc 1 429 5 view .LVU761
 2769 0c44 50C19FE5 		ldr	ip, .L191	@ tmp205,
 2770              	@ armwave.c:428: {
 428:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2771              		.loc 1 428 1 is_stmt 0 view .LVU762
 2772 0c48 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2773              		.cfi_def_cfa_offset 36
 2774              		.cfi_offset 4, -36
 2775              		.cfi_offset 5, -32
 2776              		.cfi_offset 6, -28
 2777              		.cfi_offset 7, -24
 2778              		.cfi_offset 8, -20
 2779              		.cfi_offset 9, -16
 2780              		.cfi_offset 10, -12
 2781              		.cfi_offset 11, -8
 2782              		.cfi_offset 14, -4
 2783 0c4c 0CD04DE2 		sub	sp, sp, #12	@,,
 2784              		.cfi_def_cfa_offset 48
 2785              	@ armwave.c:429:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2786              		.loc 1 429 5 view .LVU763
 2787 0c50 5C809CE5 		ldr	r8, [ip, #92]	@ _1, g_armwave_state.out_pixbuf
 2788              	.LVL210:
 2789              	.LBB37:
 2790              	.LBI37:
 162:armwave.c     **** {
 2791              		.loc 1 162 6 is_stmt 1 view .LVU764
 2792              	.LBB38:
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2793              		.loc 1 164 5 view .LVU765
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 2794              		.loc 1 165 5 view .LVU766
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2795              		.loc 1 166 5 view .LVU767
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2796              		.loc 1 167 5 view .LVU768
 2797              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2798              		.loc 1 167 15 is_stmt 0 view .LVU769
 2799 0c54 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2800              	.LVL211:
 168:armwave.c     ****     uint32_t offset;
 2801              		.loc 1 168 5 is_stmt 1 view .LVU770
 169:armwave.c     **** 
 2802              		.loc 1 169 5 view .LVU771
 171:armwave.c     **** 
 2803              		.loc 1 171 5 view .LVU772
 2804 0c58 000058E3 		cmp	r8, #0	@ _1,
 2805 0c5c 4900000A 		beq	.L189		@,
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2806              		.loc 1 173 5 view .LVU773
 2807              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2808              		.loc 1 173 41 is_stmt 0 view .LVU774
 2809 0c60 4C709CE5 		ldr	r7, [ip, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2810 0c64 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2811              	.LVL212:
 174:armwave.c     **** 
 2812              		.loc 1 174 5 is_stmt 1 view .LVU775
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2813              		.loc 1 176 5 view .LVU776
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2814              		.loc 1 176 5 is_stmt 0 view .LVU777
 2815 0c68 000057E3 		cmp	r7, #0	@ npix,
 2816 0c6c 0A0000DA 		ble	.L170		@,
 2817              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2818              		.loc 1 188 52 view .LVU778
 2819 0c70 F0B6DCE1 		ldrsh	fp, [ip, #96]	@ _18, g_armwave_state.ch1_color.r
 2820              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2821              		.loc 1 189 52 view .LVU779
 2822 0c74 F2A6DCE1 		ldrsh	r10, [ip, #98]	@ _24, g_armwave_state.ch1_color.g
 2823              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2824              		.loc 1 190 52 view .LVU780
 2825 0c78 F456DCE1 		ldrsh	r5, [ip, #100]	@ _28, g_armwave_state.ch1_color.b
 2826              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2827              		.loc 1 212 57 view .LVU781
 2828 0c7c 076ADCED 		vldr.32	s13, [ip, #28]	@ _50, g_armwave_state.vscale_frac
 2829              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2830              		.loc 1 176 11 view .LVU782
 2831 0c80 00E0A0E3 		mov	lr, #0	@ n,
 2832              	.LVL213:
 2833              	.L177:
 180:armwave.c     **** 
 2834              		.loc 1 180 9 is_stmt 1 view .LVU783
 2835              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 2836              		.loc 1 180 19 is_stmt 0 view .LVU784
 2837 0c84 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2838              	.LVL214:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2839              		.loc 1 182 9 is_stmt 1 view .LVU785
 2840              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2841              		.loc 1 182 11 is_stmt 0 view .LVU786
 2842 0c88 000050E3 		cmp	r0, #0	@ wave_word,
 2843 0c8c 0400001A 		bne	.L186		@,
 2844 0c90 04E08EE2 		add	lr, lr, #4	@ n, n,
 2845              	.L173:
 2846              	.LVL215:
 2847              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2848              		.loc 1 176 5 view .LVU787
 2849 0c94 0E0057E1 		cmp	r7, lr	@ npix, n
 2850 0c98 F9FFFFCA 		bgt	.L177		@,
 2851              	.LVL216:
 2852              	.L170:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2853              		.loc 1 176 5 view .LVU788
 2854              	.LBE38:
 2855              	.LBE37:
 2856              	@ armwave.c:430: }
 430:armwave.c     **** }
 2857              		.loc 1 430 1 view .LVU789
 2858 0c9c 0CD08DE2 		add	sp, sp, #12	@,,
 2859              		.cfi_remember_state
 2860              		.cfi_def_cfa_offset 36
 2861              		@ sp needed	@
 2862 0ca0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2863              	.LVL217:
 2864              	.L186:
 2865              		.cfi_restore_state
 2866              	.LBB40:
 2867              	.LBB39:
 2868              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2869              		.loc 1 187 19 view .LVU790
 2870 0ca4 FF1010E2 		ands	r1, r0, #255	@ _20, wave_word,
 2871              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2872              		.loc 1 182 11 view .LVU791
 2873 0ca8 0E60A0E1 		mov	r6, lr	@ ivtmp.139, n
 2874              	.LVL218:
 184:armwave.c     ****                 wave_word >>= 8;
 2875              		.loc 1 184 17 is_stmt 1 view .LVU792
 185:armwave.c     **** 
 2876              		.loc 1 185 17 view .LVU793
 2877              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2878              		.loc 1 185 27 is_stmt 0 view .LVU794
 2879 0cac 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2880              	.LVL219:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2881              		.loc 1 187 17 is_stmt 1 view .LVU795
 2882 0cb0 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.139,
 2883              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2884              		.loc 1 187 19 is_stmt 0 view .LVU796
 2885 0cb4 0500001A 		bne	.L190		@,
 2886              	.LVL220:
 2887              	.L174:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2888              		.loc 1 187 19 view .LVU797
 2889 0cb8 016086E2 		add	r6, r6, #1	@ ivtmp.139, ivtmp.139,
 2890              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 2891              		.loc 1 183 13 view .LVU798
 2892 0cbc 06005EE1 		cmp	lr, r6	@ n, ivtmp.139
 2893 0cc0 F3FFFF0A 		beq	.L173		@,
 184:armwave.c     ****                 wave_word >>= 8;
 2894              		.loc 1 184 17 is_stmt 1 view .LVU799
 2895              	.LVL221:
 185:armwave.c     **** 
 2896              		.loc 1 185 17 view .LVU800
 2897              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2898              		.loc 1 187 19 is_stmt 0 view .LVU801
 2899 0cc4 FF1010E2 		ands	r1, r0, #255	@ _20, wave_word,
 2900              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2901              		.loc 1 185 27 view .LVU802
 2902 0cc8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2903              	.LVL222:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2904              		.loc 1 187 17 is_stmt 1 view .LVU803
 2905              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2906              		.loc 1 187 19 is_stmt 0 view .LVU804
 2907 0ccc F9FFFF0A 		beq	.L174		@,
 2908              	.L190:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2909              		.loc 1 188 21 is_stmt 1 view .LVU805
 2910              	.LVL223:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2911              		.loc 1 189 21 view .LVU806
 190:armwave.c     **** 
 2912              		.loc 1 190 21 view .LVU807
 192:armwave.c     ****                     g = MIN(gg, 255);
 2913              		.loc 1 192 21 view .LVU808
 193:armwave.c     ****                     b = MIN(bb, 255);
 2914              		.loc 1 193 21 view .LVU809
 194:armwave.c     **** 
 2915              		.loc 1 194 21 view .LVU810
 197:armwave.c     **** 
 2916              		.loc 1 197 21 view .LVU811
 2917              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2918              		.loc 1 212 32 is_stmt 0 view .LVU812
 2919 0cd0 7630EFE6 		uxtb	r3, r6	@ _48, ivtmp.139
 2920              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2921              		.loc 1 213 41 view .LVU813
 2922 0cd4 012083E2 		add	r2, r3, #1	@ tmp197, _48,
 2923              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2924              		.loc 1 212 40 view .LVU814
 2925 0cd8 903A07EE 		vmov	s15, r3	@ int	@ _48, _48
 2926              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2927              		.loc 1 213 41 view .LVU815
 2928 0cdc 102A07EE 		vmov	s14, r2	@ int	@ tmp197, tmp197
 2929              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2930              		.loc 1 190 55 view .LVU816
 2931 0ce0 950103E0 		mul	r3, r5, r1	@ tmp182, _28, _20
 2932              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2933              		.loc 1 212 40 view .LVU817
 2934 0ce4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, _48
 2935              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2936              		.loc 1 213 46 view .LVU818
 2937 0ce8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, tmp197
 2938              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2939              		.loc 1 189 55 view .LVU819
 2940 0cec 9A0102E0 		mul	r2, r10, r1	@ tmp186, _24, _20
 2941              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2942              		.loc 1 190 24 view .LVU820
 2943 0cf0 4334A0E1 		asr	r3, r3, #8	@ bb, tmp182,
 2944              	.LVL224:
 2945              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2946              		.loc 1 194 25 view .LVU821
 2947 0cf4 FF0053E3 		cmp	r3, #255	@ bb,
 2948              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2949              		.loc 1 189 24 view .LVU822
 2950 0cf8 4224A0E1 		asr	r2, r2, #8	@ gg, tmp186,
 2951              	.LVL225:
 2952              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2953              		.loc 1 194 25 view .LVU823
 2954 0cfc FF30A0A3 		movge	r3, #255	@ bb,
 2955              	.LVL226:
 2956              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2957              		.loc 1 212 40 view .LVU824
 2958 0d00 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp196, tmp195, _50
 2959              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2960              		.loc 1 213 46 view .LVU825
 2961 0d04 267A27EE 		vmul.f32	s14, s14, s13	@ tmp199, tmp198, _50
 2962              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 2963              		.loc 1 193 25 view .LVU826
 2964 0d08 FF0052E3 		cmp	r2, #255	@ gg,
 2965 0d0c FF20A0A3 		movge	r2, #255	@ gg,
 2966              	.LVL227:
 2967              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2968              		.loc 1 188 55 view .LVU827
 2969 0d10 910B01E0 		mul	r1, r1, fp	@ tmp192, _20, _18
 2970              	.LVL228:
 2971              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2972              		.loc 1 197 56 view .LVU828
 2973 0d14 0224A0E1 		lsl	r2, r2, #8	@ tmp187, gg,
 2974              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2975              		.loc 1 197 44 view .LVU829
 2976 0d18 0338A0E1 		lsl	r3, r3, #16	@ tmp183, bb,
 2977              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2978              		.loc 1 212 24 view .LVU830
 2979 0d1c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 2980              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2981              		.loc 1 188 24 view .LVU831
 2982 0d20 4114A0E1 		asr	r1, r1, #8	@ rr, tmp192,
 2983              	.LVL229:
 2984              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2985              		.loc 1 197 56 view .LVU832
 2986 0d24 7220FFE6 		uxth	r2, r2	@ tmp188, tmp187
 2987              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2988              		.loc 1 197 44 view .LVU833
 2989 0d28 FF3803E2 		and	r3, r3, #16711680	@ tmp184, tmp183,
 2990              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2991              		.loc 1 192 25 view .LVU834
 2992 0d2c FF0051E3 		cmp	r1, #255	@ rr,
 2993              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2994              		.loc 1 197 51 view .LVU835
 2995 0d30 023083E1 		orr	r3, r3, r2	@ tmp190, tmp184, tmp188
 2996              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2997              		.loc 1 192 25 view .LVU836
 2998 0d34 FF10A0A3 		movge	r1, #255	@ rr,
 2999              	.LVL230:
 3000              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3001              		.loc 1 212 24 view .LVU837
 3002 0d38 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 3003              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 3004              		.loc 1 213 24 view .LVU838
 3005 0d3c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp199
 3006              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3007              		.loc 1 197 62 view .LVU839
 3008 0d40 7110EFE6 		uxtb	r1, r1	@ rr, rr
 3009 0d44 013083E1 		orr	r3, r3, r1	@ tmp194, tmp190, rr
 3010              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3011              		.loc 1 197 26 view .LVU840
 3012 0d48 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp194,
 3013              	.LVL231:
 211:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3014              		.loc 1 211 21 is_stmt 1 view .LVU841
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3015              		.loc 1 212 21 view .LVU842
 213:armwave.c     ****                     xx = (nsub >> 8);
 3016              		.loc 1 213 21 view .LVU843
 214:armwave.c     **** 
 3017              		.loc 1 214 21 view .LVU844
 3018              	@ armwave.c:214:                     xx = (nsub >> 8);
 214:armwave.c     **** 
 3019              		.loc 1 214 32 is_stmt 0 view .LVU845
 3020 0d4c 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.139,
 3021              	.LVL232:
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3022              		.loc 1 216 21 is_stmt 1 view .LVU846
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3023              		.loc 1 216 21 is_stmt 0 view .LVU847
 3024 0d50 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3025              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 3026              		.loc 1 213 24 view .LVU848
 3027 0d54 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3028              	.LVL233:
 3029              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3030              		.loc 1 216 21 view .LVU849
 3031 0d58 020054E1 		cmp	r4, r2	@ yy, ye
 3032 0d5c D5FFFF2A 		bcs	.L174		@,
 3033 0d60 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3034              	.LVL234:
 3035              	.L175:
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3036              		.loc 1 217 25 is_stmt 1 view .LVU850
 218:armwave.c     ****                     }
 3037              		.loc 1 218 25 view .LVU851
 3038              	@ armwave.c:217:                         offset = (xx + (y * g_armwave_state.target_width)); 
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3039              		.loc 1 217 43 is_stmt 0 view .LVU852
 3040 0d64 4C209CE5 		ldr	r2, [ip, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3041              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3042              		.loc 1 216 21 view .LVU853
 3043 0d68 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3044              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 3045              		.loc 1 218 43 view .LVU854
 3046 0d6c 921422E0 		mla	r2, r2, r4, r1	@ tmp203, g_armwave_state.target_width, yy, xx
 3047              	.LVL235:
 3048              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3049              		.loc 1 216 42 view .LVU855
 3050 0d70 014084E2 		add	r4, r4, #1	@ yy, yy,
 3051              	.LVL236:
 3052              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3053              		.loc 1 216 21 view .LVU856
 3054 0d74 040050E1 		cmp	r0, r4	@ ye, yy
 3055              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 3056              		.loc 1 218 53 view .LVU857
 3057 0d78 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 3058              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3059              		.loc 1 216 21 view .LVU858
 3060 0d7c F8FFFF1A 		bne	.L175		@,
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3061              		.loc 1 216 21 view .LVU859
 3062 0d80 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3063 0d84 CBFFFFEA 		b	.L174		@
 3064              	.LVL237:
 3065              	.L189:
 171:armwave.c     **** 
 3066              		.loc 1 171 5 is_stmt 1 view .LVU860
 3067 0d88 10309FE5 		ldr	r3, .L191+4	@,
 3068 0d8c AB20A0E3 		mov	r2, #171	@,
 3069 0d90 0C109FE5 		ldr	r1, .L191+8	@,
 3070 0d94 0C009FE5 		ldr	r0, .L191+12	@,
 3071 0d98 FEFFFFEB 		bl	__assert_fail		@
 3072              	.LVL238:
 3073              	.L192:
 3074              		.align	2
 3075              	.L191:
 3076 0d9c 00000000 		.word	g_armwave_state
 3077 0da0 18000000 		.word	.LANCHOR0+24
 3078 0da4 20000000 		.word	.LC2
 3079 0da8 2C000000 		.word	.LC3
 3080              	.LBE39:
 3081              	.LBE40:
 3082              		.cfi_endproc
 3083              	.LFE71:
 3085              		.align	2
 3086              		.global	armwave_test_dump_buffer_to_ppm
 3087              		.syntax unified
 3088              		.arm
 3089              		.fpu vfp
 3091              	armwave_test_dump_buffer_to_ppm:
 3092              	.LVL239:
 3093              	.LFB72:
 431:armwave.c     **** 
 432:armwave.c     **** /*
 433:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 434:armwave.c     ****  */
 435:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 436:armwave.c     **** {
 3094              		.loc 1 436 1 view -0
 3095              		.cfi_startproc
 3096              		@ args = 0, pretend = 0, frame = 0
 3097              		@ frame_needed = 0, uses_anonymous_args = 0
 3098              		@ link register save eliminated.
 437:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3099              		.loc 1 437 5 view .LVU862
 3100 0dac 08309FE5 		ldr	r3, .L194	@ tmp112,
 3101 0db0 0010A0E1 		mov	r1, r0	@, fn
 3102 0db4 5C0093E5 		ldr	r0, [r3, #92]	@, g_armwave_state.out_pixbuf
 3103              	.LVL240:
 3104              		.loc 1 437 5 is_stmt 0 view .LVU863
 3105 0db8 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3106              	.LVL241:
 3107              	.L195:
 3108              		.loc 1 437 5 view .LVU864
 3109              		.align	2
 3110              	.L194:
 3111 0dbc 00000000 		.word	g_armwave_state
 3112              		.cfi_endproc
 3113              	.LFE72:
 3115              		.align	2
 3116              		.global	armwave_test_fill_gdkbuf
 3117              		.syntax unified
 3118              		.arm
 3119              		.fpu vfp
 3121              	armwave_test_fill_gdkbuf:
 3122              	.LVL242:
 3123              	.LFB73:
 438:armwave.c     **** }
 439:armwave.c     **** 
 440:armwave.c     **** /*
 441:armwave.c     ****  * Render GDK buffer with test funtionry.
 442:armwave.c     ****  */
 443:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 444:armwave.c     **** {
 3124              		.loc 1 444 1 is_stmt 1 view -0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 8
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 445:armwave.c     ****     //PyObject *mv;
 446:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 447:armwave.c     **** 
 448:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 449:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3128              		.loc 1 449 5 view .LVU866
 3129              	@ armwave.c:449:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3130              		.loc 1 449 11 is_stmt 0 view .LVU867
 3131 0dc0 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 3132              	@ armwave.c:444: {
 444:armwave.c     ****     //PyObject *mv;
 3133              		.loc 1 444 1 view .LVU868
 3134 0dc4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3135              		.cfi_def_cfa_offset 36
 3136              		.cfi_offset 4, -36
 3137              		.cfi_offset 5, -32
 3138              		.cfi_offset 6, -28
 3139              		.cfi_offset 7, -24
 3140              		.cfi_offset 8, -20
 3141              		.cfi_offset 9, -16
 3142              		.cfi_offset 10, -12
 3143              		.cfi_offset 11, -8
 3144              		.cfi_offset 14, -4
 3145 0dc8 0CD04DE2 		sub	sp, sp, #12	@,,
 3146              		.cfi_def_cfa_offset 48
 3147              	.LBB43:
 3148              	.LBB44:
 3149              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3150              		.loc 1 167 15 view .LVU869
 3151 0dcc 48519FE5 		ldr	r5, .L217	@ tmp208,
 3152              	.LBE44:
 3153              	.LBE43:
 3154              	@ armwave.c:449:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3155              		.loc 1 449 11 view .LVU870
 3156 0dd0 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 3157              	.LVL243:
 450:armwave.c     ****     
 451:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 452:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 3158              		.loc 1 452 5 is_stmt 1 view .LVU871
 3159              	.LBB47:
 3160              	.LBI43:
 162:armwave.c     **** {
 3161              		.loc 1 162 6 view .LVU872
 3162              	.LBB45:
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 3163              		.loc 1 164 5 view .LVU873
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 3164              		.loc 1 165 5 view .LVU874
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 3165              		.loc 1 166 5 view .LVU875
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3166              		.loc 1 167 5 view .LVU876
 3167              	@ armwave.c:171:     assert(out_buffer != NULL);
 171:armwave.c     **** 
 3168              		.loc 1 171 5 is_stmt 0 view .LVU877
 3169 0dd4 000058E3 		cmp	r8, #0	@ out_pixbuf,
 3170              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3171              		.loc 1 167 15 view .LVU878
 3172 0dd8 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3173              	.LVL244:
 168:armwave.c     ****     uint32_t offset;
 3174              		.loc 1 168 5 is_stmt 1 view .LVU879
 169:armwave.c     **** 
 3175              		.loc 1 169 5 view .LVU880
 171:armwave.c     **** 
 3176              		.loc 1 171 5 view .LVU881
 3177 0ddc 4900000A 		beq	.L215		@,
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3178              		.loc 1 173 5 view .LVU882
 3179              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3180              		.loc 1 173 41 is_stmt 0 view .LVU883
 3181 0de0 4C7095E5 		ldr	r7, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3182 0de4 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 3183              	.LVL245:
 174:armwave.c     **** 
 3184              		.loc 1 174 5 is_stmt 1 view .LVU884
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3185              		.loc 1 176 5 view .LVU885
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3186              		.loc 1 176 5 is_stmt 0 view .LVU886
 3187 0de8 000057E3 		cmp	r7, #0	@ npix,
 3188 0dec 0A0000DA 		ble	.L196		@,
 3189              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3190              		.loc 1 188 52 view .LVU887
 3191 0df0 F0B6D5E1 		ldrsh	fp, [r5, #96]	@ _20, g_armwave_state.ch1_color.r
 3192              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3193              		.loc 1 189 52 view .LVU888
 3194 0df4 F2A6D5E1 		ldrsh	r10, [r5, #98]	@ _26, g_armwave_state.ch1_color.g
 3195              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 3196              		.loc 1 190 52 view .LVU889
 3197 0df8 F446D5E1 		ldrsh	r4, [r5, #100]	@ _30, g_armwave_state.ch1_color.b
 3198              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3199              		.loc 1 212 57 view .LVU890
 3200 0dfc 076AD5ED 		vldr.32	s13, [r5, #28]	@ _52, g_armwave_state.vscale_frac
 3201              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3202              		.loc 1 176 11 view .LVU891
 3203 0e00 00C0A0E3 		mov	ip, #0	@ n,
 3204              	.LVL246:
 3205              	.L203:
 180:armwave.c     **** 
 3206              		.loc 1 180 9 is_stmt 1 view .LVU892
 3207              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 3208              		.loc 1 180 19 is_stmt 0 view .LVU893
 3209 0e04 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 3210              	.LVL247:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 3211              		.loc 1 182 9 is_stmt 1 view .LVU894
 3212              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 3213              		.loc 1 182 11 is_stmt 0 view .LVU895
 3214 0e08 000050E3 		cmp	r0, #0	@ wave_word,
 3215 0e0c 0400001A 		bne	.L212		@,
 3216 0e10 04C08CE2 		add	ip, ip, #4	@ n, n,
 3217              	.L199:
 3218              	.LVL248:
 3219              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3220              		.loc 1 176 5 view .LVU896
 3221 0e14 0C0057E1 		cmp	r7, ip	@ npix, n
 3222 0e18 F9FFFFCA 		bgt	.L203		@,
 3223              	.LVL249:
 3224              	.L196:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3225              		.loc 1 176 5 view .LVU897
 3226              	.LBE45:
 3227              	.LBE47:
 3228              	@ armwave.c:453: }
 453:armwave.c     **** }
 3229              		.loc 1 453 1 view .LVU898
 3230 0e1c 0CD08DE2 		add	sp, sp, #12	@,,
 3231              		.cfi_remember_state
 3232              		.cfi_def_cfa_offset 36
 3233              		@ sp needed	@
 3234 0e20 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3235              	.LVL250:
 3236              	.L212:
 3237              		.cfi_restore_state
 3238              	.LBB48:
 3239              	.LBB46:
 3240              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3241              		.loc 1 187 19 view .LVU899
 3242 0e24 FF1010E2 		ands	r1, r0, #255	@ _22, wave_word,
 3243              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 3244              		.loc 1 182 11 view .LVU900
 3245 0e28 0C60A0E1 		mov	r6, ip	@ ivtmp.155, n
 3246              	.LVL251:
 184:armwave.c     ****                 wave_word >>= 8;
 3247              		.loc 1 184 17 is_stmt 1 view .LVU901
 185:armwave.c     **** 
 3248              		.loc 1 185 17 view .LVU902
 3249              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 3250              		.loc 1 185 27 is_stmt 0 view .LVU903
 3251 0e2c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3252              	.LVL252:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3253              		.loc 1 187 17 is_stmt 1 view .LVU904
 3254 0e30 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.155,
 3255              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3256              		.loc 1 187 19 is_stmt 0 view .LVU905
 3257 0e34 0500001A 		bne	.L216		@,
 3258              	.LVL253:
 3259              	.L200:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3260              		.loc 1 187 19 view .LVU906
 3261 0e38 016086E2 		add	r6, r6, #1	@ ivtmp.155, ivtmp.155,
 3262              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 3263              		.loc 1 183 13 view .LVU907
 3264 0e3c 06005CE1 		cmp	ip, r6	@ n, ivtmp.155
 3265 0e40 F3FFFF0A 		beq	.L199		@,
 184:armwave.c     ****                 wave_word >>= 8;
 3266              		.loc 1 184 17 is_stmt 1 view .LVU908
 3267              	.LVL254:
 185:armwave.c     **** 
 3268              		.loc 1 185 17 view .LVU909
 3269              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3270              		.loc 1 187 19 is_stmt 0 view .LVU910
 3271 0e44 FF1010E2 		ands	r1, r0, #255	@ _22, wave_word,
 3272              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 3273              		.loc 1 185 27 view .LVU911
 3274 0e48 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3275              	.LVL255:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3276              		.loc 1 187 17 is_stmt 1 view .LVU912
 3277              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3278              		.loc 1 187 19 is_stmt 0 view .LVU913
 3279 0e4c F9FFFF0A 		beq	.L200		@,
 3280              	.L216:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3281              		.loc 1 188 21 is_stmt 1 view .LVU914
 3282              	.LVL256:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3283              		.loc 1 189 21 view .LVU915
 190:armwave.c     **** 
 3284              		.loc 1 190 21 view .LVU916
 192:armwave.c     ****                     g = MIN(gg, 255);
 3285              		.loc 1 192 21 view .LVU917
 193:armwave.c     ****                     b = MIN(bb, 255);
 3286              		.loc 1 193 21 view .LVU918
 194:armwave.c     **** 
 3287              		.loc 1 194 21 view .LVU919
 197:armwave.c     **** 
 3288              		.loc 1 197 21 view .LVU920
 3289              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3290              		.loc 1 212 32 is_stmt 0 view .LVU921
 3291 0e50 7630EFE6 		uxtb	r3, r6	@ _50, ivtmp.155
 3292              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 3293              		.loc 1 213 41 view .LVU922
 3294 0e54 012083E2 		add	r2, r3, #1	@ tmp199, _50,
 3295              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3296              		.loc 1 212 40 view .LVU923
 3297 0e58 903A07EE 		vmov	s15, r3	@ int	@ _50, _50
 3298              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 3299              		.loc 1 213 41 view .LVU924
 3300 0e5c 102A07EE 		vmov	s14, r2	@ int	@ tmp199, tmp199
 3301              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 3302              		.loc 1 190 55 view .LVU925
 3303 0e60 940103E0 		mul	r3, r4, r1	@ tmp184, _30, _22
 3304              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3305              		.loc 1 212 40 view .LVU926
 3306 0e64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp197, _50
 3307              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 3308              		.loc 1 213 46 view .LVU927
 3309 0e68 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp200, tmp199
 3310              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3311              		.loc 1 189 55 view .LVU928
 3312 0e6c 9A0102E0 		mul	r2, r10, r1	@ tmp188, _26, _22
 3313              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 3314              		.loc 1 190 24 view .LVU929
 3315 0e70 4334A0E1 		asr	r3, r3, #8	@ bb, tmp184,
 3316              	.LVL257:
 3317              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 3318              		.loc 1 194 25 view .LVU930
 3319 0e74 FF0053E3 		cmp	r3, #255	@ bb,
 3320              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3321              		.loc 1 189 24 view .LVU931
 3322 0e78 4224A0E1 		asr	r2, r2, #8	@ gg, tmp188,
 3323              	.LVL258:
 3324              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 3325              		.loc 1 194 25 view .LVU932
 3326 0e7c FF30A0A3 		movge	r3, #255	@ bb,
 3327              	.LVL259:
 3328              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3329              		.loc 1 212 40 view .LVU933
 3330 0e80 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, _52
 3331              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 3332              		.loc 1 213 46 view .LVU934
 3333 0e84 267A27EE 		vmul.f32	s14, s14, s13	@ tmp201, tmp200, _52
 3334              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 3335              		.loc 1 193 25 view .LVU935
 3336 0e88 FF0052E3 		cmp	r2, #255	@ gg,
 3337 0e8c FF20A0A3 		movge	r2, #255	@ gg,
 3338              	.LVL260:
 3339              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3340              		.loc 1 188 55 view .LVU936
 3341 0e90 910B01E0 		mul	r1, r1, fp	@ tmp194, _22, _20
 3342              	.LVL261:
 3343              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3344              		.loc 1 197 56 view .LVU937
 3345 0e94 0224A0E1 		lsl	r2, r2, #8	@ tmp189, gg,
 3346              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3347              		.loc 1 197 44 view .LVU938
 3348 0e98 0338A0E1 		lsl	r3, r3, #16	@ tmp185, bb,
 3349              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3350              		.loc 1 212 24 view .LVU939
 3351 0e9c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp198
 3352              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3353              		.loc 1 188 24 view .LVU940
 3354 0ea0 4114A0E1 		asr	r1, r1, #8	@ rr, tmp194,
 3355              	.LVL262:
 3356              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3357              		.loc 1 197 56 view .LVU941
 3358 0ea4 7220FFE6 		uxth	r2, r2	@ tmp190, tmp189
 3359              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3360              		.loc 1 197 44 view .LVU942
 3361 0ea8 FF3803E2 		and	r3, r3, #16711680	@ tmp186, tmp185,
 3362              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 3363              		.loc 1 192 25 view .LVU943
 3364 0eac FF0051E3 		cmp	r1, #255	@ rr,
 3365              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3366              		.loc 1 197 51 view .LVU944
 3367 0eb0 023083E1 		orr	r3, r3, r2	@ tmp192, tmp186, tmp190
 3368              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 3369              		.loc 1 192 25 view .LVU945
 3370 0eb4 FF10A0A3 		movge	r1, #255	@ rr,
 3371              	.LVL263:
 3372              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3373              		.loc 1 212 24 view .LVU946
 3374 0eb8 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 3375              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 3376              		.loc 1 213 24 view .LVU947
 3377 0ebc C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp201
 3378              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3379              		.loc 1 197 62 view .LVU948
 3380 0ec0 7110EFE6 		uxtb	r1, r1	@ rr, rr
 3381 0ec4 013083E1 		orr	r3, r3, r1	@ tmp196, tmp192, rr
 3382              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3383              		.loc 1 197 26 view .LVU949
 3384 0ec8 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp196,
 3385              	.LVL264:
 211:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3386              		.loc 1 211 21 is_stmt 1 view .LVU950
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3387              		.loc 1 212 21 view .LVU951
 213:armwave.c     ****                     xx = (nsub >> 8);
 3388              		.loc 1 213 21 view .LVU952
 214:armwave.c     **** 
 3389              		.loc 1 214 21 view .LVU953
 3390              	@ armwave.c:214:                     xx = (nsub >> 8);
 214:armwave.c     **** 
 3391              		.loc 1 214 32 is_stmt 0 view .LVU954
 3392 0ecc 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.155,
 3393              	.LVL265:
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3394              		.loc 1 216 21 is_stmt 1 view .LVU955
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3395              		.loc 1 216 21 is_stmt 0 view .LVU956
 3396 0ed0 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3397              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 3398              		.loc 1 213 24 view .LVU957
 3399 0ed4 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3400              	.LVL266:
 3401              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3402              		.loc 1 216 21 view .LVU958
 3403 0ed8 02005EE1 		cmp	lr, r2	@ yy, ye
 3404 0edc D5FFFF2A 		bcs	.L200		@,
 3405 0ee0 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3406              	.LVL267:
 3407              	.L201:
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3408              		.loc 1 217 25 is_stmt 1 view .LVU959
 218:armwave.c     ****                     }
 3409              		.loc 1 218 25 view .LVU960
 3410              	@ armwave.c:217:                         offset = (xx + (y * g_armwave_state.target_width)); 
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3411              		.loc 1 217 43 is_stmt 0 view .LVU961
 3412 0ee4 4C2095E5 		ldr	r2, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3413              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3414              		.loc 1 216 21 view .LVU962
 3415 0ee8 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3416              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 3417              		.loc 1 218 43 view .LVU963
 3418 0eec 921E22E0 		mla	r2, r2, lr, r1	@ tmp205, g_armwave_state.target_width, yy, xx
 3419              	.LVL268:
 3420              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3421              		.loc 1 216 42 view .LVU964
 3422 0ef0 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 3423              	.LVL269:
 3424              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3425              		.loc 1 216 21 view .LVU965
 3426 0ef4 0E0050E1 		cmp	r0, lr	@ ye, yy
 3427              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 3428              		.loc 1 218 53 view .LVU966
 3429 0ef8 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3430              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3431              		.loc 1 216 21 view .LVU967
 3432 0efc F8FFFF1A 		bne	.L201		@,
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3433              		.loc 1 216 21 view .LVU968
 3434 0f00 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3435 0f04 CBFFFFEA 		b	.L200		@
 3436              	.LVL270:
 3437              	.L215:
 171:armwave.c     **** 
 3438              		.loc 1 171 5 is_stmt 1 view .LVU969
 3439 0f08 10309FE5 		ldr	r3, .L217+4	@,
 3440 0f0c AB20A0E3 		mov	r2, #171	@,
 3441 0f10 0C109FE5 		ldr	r1, .L217+8	@,
 3442 0f14 0C009FE5 		ldr	r0, .L217+12	@,
 3443              	.LVL271:
 171:armwave.c     **** 
 3444              		.loc 1 171 5 is_stmt 0 view .LVU970
 3445 0f18 FEFFFFEB 		bl	__assert_fail		@
 3446              	.LVL272:
 3447              	.L218:
 3448              		.align	2
 3449              	.L217:
 3450 0f1c 00000000 		.word	g_armwave_state
 3451 0f20 18000000 		.word	.LANCHOR0+24
 3452 0f24 20000000 		.word	.LC2
 3453 0f28 2C000000 		.word	.LC3
 3454              	.LBE46:
 3455              	.LBE48:
 3456              		.cfi_endproc
 3457              	.LFE73:
 3459              		.align	2
 3460              		.global	armwave_test_buffer_alloc
 3461              		.syntax unified
 3462              		.arm
 3463              		.fpu vfp
 3465              	armwave_test_buffer_alloc:
 3466              	.LFB74:
 454:armwave.c     **** 
 455:armwave.c     **** /*
 456:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 457:armwave.c     ****  */
 458:armwave.c     **** void armwave_test_buffer_alloc()
 459:armwave.c     **** {
 3467              		.loc 1 459 1 is_stmt 1 view -0
 3468              		.cfi_startproc
 3469              		@ args = 0, pretend = 0, frame = 0
 3470              		@ frame_needed = 0, uses_anonymous_args = 0
 460:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3471              		.loc 1 460 5 view .LVU972
 3472              	@ armwave.c:459: {
 459:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3473              		.loc 1 459 1 is_stmt 0 view .LVU973
 3474 0f2c 70402DE9 		push	{r4, r5, r6, lr}	@
 3475              		.cfi_def_cfa_offset 16
 3476              		.cfi_offset 4, -16
 3477              		.cfi_offset 5, -12
 3478              		.cfi_offset 6, -8
 3479              		.cfi_offset 14, -4
 3480              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 3481              		.loc 1 460 23 view .LVU974
 3482 0f30 40409FE5 		ldr	r4, .L226	@ tmp123,
 3483 0f34 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3484              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 3485              		.loc 1 460 7 view .LVU975
 3486 0f38 000050E3 		cmp	r0, #0	@ _1,
 3487 0f3c 0000000A 		beq	.L220		@,
 461:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3488              		.loc 1 461 9 is_stmt 1 view .LVU976
 3489 0f40 FEFFFFEB 		bl	free		@
 3490              	.LVL273:
 3491              	.L220:
 462:armwave.c     ****     }
 463:armwave.c     **** 
 464:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 465:armwave.c     **** 
 466:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3492              		.loc 1 466 5 view .LVU977
 3493              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3494              		.loc 1 466 40 is_stmt 0 view .LVU978
 3495 0f44 403094E5 		ldr	r3, [r4, #64]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3496 0f48 305094E5 		ldr	r5, [r4, #48]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3497 0f4c 0110A0E3 		mov	r1, #1	@,
 3498 0f50 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3499 0f54 0500A0E1 		mov	r0, r5	@, _4
 3500 0f58 FEFFFFEB 		bl	calloc		@
 3501              	.LVL274:
 3502              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer == NULL) {
 467:armwave.c     **** 
 468:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3503              		.loc 1 468 7 view .LVU979
 3504 0f5c 000050E3 		cmp	r0, #0	@ tmp120,
 3505              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 3506              		.loc 1 466 38 view .LVU980
 3507 0f60 180084E5 		str	r0, [r4, #24]	@ tmp120, g_armwave_state.test_wave_buffer
 3508              		.loc 1 468 5 is_stmt 1 view .LVU981
 3509              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer == NULL) {
 3510              		.loc 1 468 7 is_stmt 0 view .LVU982
 3511 0f64 7080BD18 		popne	{r4, r5, r6, pc}	@
 469:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3512              		.loc 1 469 9 is_stmt 1 view .LVU983
 3513 0f68 0510A0E1 		mov	r1, r5	@, _4
 3514 0f6c 08009FE5 		ldr	r0, .L226+4	@,
 3515              	@ armwave.c:472: }
 470:armwave.c     ****         return;
 471:armwave.c     ****     }
 472:armwave.c     **** }
 3516              		.loc 1 472 1 is_stmt 0 view .LVU984
 3517 0f70 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3518              		.cfi_restore 14
 3519              		.cfi_restore 6
 3520              		.cfi_restore 5
 3521              		.cfi_restore 4
 3522              		.cfi_def_cfa_offset 0
 3523              	@ armwave.c:469:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 469:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3524              		.loc 1 469 9 view .LVU985
 3525 0f74 FEFFFFEA 		b	printf		@
 3526              	.LVL275:
 3527              	.L227:
 3528              		.align	2
 3529              	.L226:
 3530 0f78 00000000 		.word	g_armwave_state
 3531 0f7c 60010000 		.word	.LC17
 3532              		.cfi_endproc
 3533              	.LFE74:
 3535              		.align	2
 3536              		.global	armwave_fill_pixbuf_into_pybuffer
 3537              		.syntax unified
 3538              		.arm
 3539              		.fpu vfp
 3541              	armwave_fill_pixbuf_into_pybuffer:
 3542              	.LVL276:
 3543              	.LFB75:
 473:armwave.c     **** 
 474:armwave.c     **** /*
 475:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 476:armwave.c     ****  */
 477:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 478:armwave.c     **** {
 3544              		.loc 1 478 1 is_stmt 1 view -0
 3545              		.cfi_startproc
 3546              		@ args = 0, pretend = 0, frame = 48
 3547              		@ frame_needed = 0, uses_anonymous_args = 0
 479:armwave.c     ****     Py_buffer buffer;
 3548              		.loc 1 479 5 view .LVU987
 480:armwave.c     ****     int ret;
 3549              		.loc 1 480 5 view .LVU988
 481:armwave.c     **** 
 482:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 483:armwave.c     **** 
 484:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3550              		.loc 1 484 5 view .LVU989
 3551              	@ armwave.c:478: {
 478:armwave.c     ****     Py_buffer buffer;
 3552              		.loc 1 478 1 is_stmt 0 view .LVU990
 3553 0f80 04E02DE5 		str	lr, [sp, #-4]!	@,
 3554              		.cfi_def_cfa_offset 4
 3555              		.cfi_offset 14, -4
 3556 0f84 34D04DE2 		sub	sp, sp, #52	@,,
 3557              		.cfi_def_cfa_offset 56
 3558              	@ armwave.c:484:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3559              		.loc 1 484 11 view .LVU991
 3560 0f88 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3561 0f8c 0120A0E3 		mov	r2, #1	@,
 3562 0f90 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3563              	.LVL277:
 485:armwave.c     **** 
 486:armwave.c     ****     if(ret != 0) {
 3564              		.loc 1 486 5 is_stmt 1 view .LVU992
 3565              	@ armwave.c:486:     if(ret != 0) {
 3566              		.loc 1 486 7 is_stmt 0 view .LVU993
 3567 0f94 000050E3 		cmp	r0, #0	@,
 3568 0f98 0A00001A 		bne	.L232		@,
 487:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 488:armwave.c     ****         Py_RETURN_FALSE;
 489:armwave.c     ****     }
 490:armwave.c     **** 
 491:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 492:armwave.c     **** 
 493:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3569              		.loc 1 493 5 is_stmt 1 view .LVU994
 3570 0f9c 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3571              	.LVL278:
 3572              		.loc 1 493 5 is_stmt 0 view .LVU995
 3573 0fa0 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3574              	.LVL279:
 494:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 495:armwave.c     **** 
 496:armwave.c     ****     PyBuffer_Release(&buffer);
 3575              		.loc 1 496 5 is_stmt 1 view .LVU996
 3576 0fa4 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3577 0fa8 FEFFFFEB 		bl	PyBuffer_Release		@
 3578              	.LVL280:
 497:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 498:armwave.c     **** 
 499:armwave.c     ****     Py_RETURN_TRUE;
 3579              		.loc 1 499 5 view .LVU997
 3580              	.LBB49:
 3581              	.LBI49:
 3582              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3583              		.loc 2 456 20 view .LVU998
 3584              	.LBB50:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3585              		.loc 2 458 21 view .LVU999
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3586              		.loc 2 459 5 view .LVU1000
 3587              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3588              		.loc 2 459 18 is_stmt 0 view .LVU1001
 3589 0fac 38309FE5 		ldr	r3, .L233	@ tmp126,
 3590              	.LBE50:
 3591              	.LBE49:
 3592              	@ armwave.c:499:     Py_RETURN_TRUE;
 3593              		.loc 1 499 5 view .LVU1002
 3594 0fb0 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3595              	.LBB52:
 3596              	.LBB51:
 3597              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3598              		.loc 2 459 18 view .LVU1003
 3599 0fb4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3600 0fb8 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3601 0fbc 002083E5 		str	r2, [r3]	@ tmp128,
 3602              	.LBE51:
 3603              	.LBE52:
 3604              	@ armwave.c:500: }
 500:armwave.c     **** }
 3605              		.loc 1 500 1 view .LVU1004
 3606 0fc0 34D08DE2 		add	sp, sp, #52	@,,
 3607              		.cfi_remember_state
 3608              		.cfi_def_cfa_offset 4
 3609              		@ sp needed	@
 3610 0fc4 04F09DE4 		ldr	pc, [sp], #4	@
 3611              	.LVL281:
 3612              	.L232:
 3613              		.cfi_restore_state
 487:armwave.c     ****         Py_RETURN_FALSE;
 3614              		.loc 1 487 9 is_stmt 1 view .LVU1005
 3615 0fc8 20009FE5 		ldr	r0, .L233+4	@,
 3616              	.LVL282:
 487:armwave.c     ****         Py_RETURN_FALSE;
 3617              		.loc 1 487 9 is_stmt 0 view .LVU1006
 3618 0fcc FEFFFFEB 		bl	puts		@
 3619              	.LVL283:
 488:armwave.c     ****     }
 3620              		.loc 1 488 9 is_stmt 1 view .LVU1007
 3621              	.LBB53:
 3622              	.LBI53:
 456:/usr/local/include/python3.8/object.h **** {
 3623              		.loc 2 456 20 view .LVU1008
 3624              	.LBB54:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3625              		.loc 2 458 21 view .LVU1009
 3626              		.loc 2 459 5 view .LVU1010
 3627              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3628              		.loc 2 459 18 is_stmt 0 view .LVU1011
 3629 0fd0 1C309FE5 		ldr	r3, .L233+8	@ tmp120,
 3630              	.LBE54:
 3631              	.LBE53:
 3632              	@ armwave.c:488:         Py_RETURN_FALSE;
 488:armwave.c     ****     }
 3633              		.loc 1 488 9 view .LVU1012
 3634 0fd4 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3635              	.LBB56:
 3636              	.LBB55:
 3637              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3638              		.loc 2 459 18 view .LVU1013
 3639 0fd8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3640 0fdc 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3641 0fe0 002083E5 		str	r2, [r3]	@ tmp122,
 3642              	.LBE55:
 3643              	.LBE56:
 3644              	@ armwave.c:500: }
 3645              		.loc 1 500 1 view .LVU1014
 3646 0fe4 34D08DE2 		add	sp, sp, #52	@,,
 3647              		.cfi_def_cfa_offset 4
 3648              		@ sp needed	@
 3649 0fe8 04F09DE4 		ldr	pc, [sp], #4	@
 3650              	.L234:
 3651              		.align	2
 3652              	.L233:
 3653 0fec 00000000 		.word	_Py_TrueStruct
 3654 0ff0 AC010000 		.word	.LC18
 3655 0ff4 00000000 		.word	_Py_FalseStruct
 3656              		.cfi_endproc
 3657              	.LFE75:
 3659              		.align	2
 3660              		.global	armwave_test_create_am_sine
 3661              		.syntax unified
 3662              		.arm
 3663              		.fpu vfp
 3665              	armwave_test_create_am_sine:
 3666              	.LVL284:
 3667              	.LFB76:
 501:armwave.c     **** 
 502:armwave.c     **** /*
 503:armwave.c     ****  * Make a test AM waveform for render tests.
 504:armwave.c     ****  *
 505:armwave.c     ****  * @param   mod                 modulation depth
 506:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 507:armwave.c     ****  */
 508:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 509:armwave.c     **** {
 3668              		.loc 1 509 1 is_stmt 1 view -0
 3669              		.cfi_startproc
 3670              		@ args = 0, pretend = 0, frame = 8
 3671              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     float v, noise, xnoise, mod_val;
 3672              		.loc 1 510 5 view .LVU1016
 511:armwave.c     ****     int w, x;
 3673              		.loc 1 511 5 view .LVU1017
 512:armwave.c     **** 
 513:armwave.c     ****     armwave_test_buffer_alloc();
 3674              		.loc 1 513 5 view .LVU1018
 3675              	.LBB59:
 3676              	.LBI59:
 458:armwave.c     **** {
 3677              		.loc 1 458 6 view .LVU1019
 3678              	.LBB60:
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3679              		.loc 1 460 5 view .LVU1020
 3680              	.LBE60:
 3681              	.LBE59:
 3682              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 3683              		.loc 1 509 1 is_stmt 0 view .LVU1021
 3684 0ff8 70402DE9 		push	{r4, r5, r6, lr}	@
 3685              		.cfi_def_cfa_offset 16
 3686              		.cfi_offset 4, -16
 3687              		.cfi_offset 5, -12
 3688              		.cfi_offset 6, -8
 3689              		.cfi_offset 14, -4
 3690 0ffc 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3691              		.cfi_def_cfa_offset 72
 3692              		.cfi_offset 80, -72
 3693              		.cfi_offset 81, -68
 3694              		.cfi_offset 82, -64
 3695              		.cfi_offset 83, -60
 3696              		.cfi_offset 84, -56
 3697              		.cfi_offset 85, -52
 3698              		.cfi_offset 86, -48
 3699              		.cfi_offset 87, -44
 3700              		.cfi_offset 88, -40
 3701              		.cfi_offset 89, -36
 3702              		.cfi_offset 90, -32
 3703              		.cfi_offset 91, -28
 3704              		.cfi_offset 92, -24
 3705              		.cfi_offset 93, -20
 3706              	.LBB65:
 3707              	.LBB61:
 3708              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3709              		.loc 1 460 23 view .LVU1022
 3710 1000 A8519FE5 		ldr	r5, .L266+32	@ tmp224,
 3711              	.LBE61:
 3712              	.LBE65:
 3713              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 3714              		.loc 1 509 1 view .LVU1023
 3715 1004 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3716 1008 60BAB0EE 		vmov.f32	s22, s1	@ noise_fraction, noise_fraction
 3717              	.LBB66:
 3718              	.LBB62:
 3719              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3720              		.loc 1 460 23 view .LVU1024
 3721 100c 180095E5 		ldr	r0, [r5, #24]	@ _63, g_armwave_state.test_wave_buffer
 3722              	.LBE62:
 3723              	.LBE66:
 3724              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 3725              		.loc 1 509 1 view .LVU1025
 3726 1010 08D04DE2 		sub	sp, sp, #8	@,,
 3727              		.cfi_def_cfa_offset 80
 3728              	.LBB67:
 3729              	.LBB63:
 3730              	@ armwave.c:460:     if(g_armwave_state.test_wave_buffer != NULL) {
 460:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3731              		.loc 1 460 7 view .LVU1026
 3732 1014 000050E3 		cmp	r0, #0	@ _63,
 3733 1018 0000000A 		beq	.L236		@,
 461:armwave.c     ****     }
 3734              		.loc 1 461 9 is_stmt 1 view .LVU1027
 3735 101c FEFFFFEB 		bl	free		@
 3736              	.LVL285:
 3737              	.L236:
 466:armwave.c     **** 
 3738              		.loc 1 466 5 view .LVU1028
 3739              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 3740              		.loc 1 466 40 is_stmt 0 view .LVU1029
 3741 1020 403095E5 		ldr	r3, [r5, #64]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3742 1024 304095E5 		ldr	r4, [r5, #48]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3743 1028 0110A0E3 		mov	r1, #1	@,
 3744 102c 940304E0 		mul	r4, r4, r3	@ _66, g_armwave_state.waves_max, g_armwave_state.wave_length
 3745 1030 0400A0E1 		mov	r0, r4	@, _66
 3746 1034 FEFFFFEB 		bl	calloc		@
 3747              	.LVL286:
 3748              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer == NULL) {
 468:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3749              		.loc 1 468 7 view .LVU1030
 3750 1038 000050E3 		cmp	r0, #0	@ tmp170,
 3751              	@ armwave.c:466:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 466:armwave.c     **** 
 3752              		.loc 1 466 38 view .LVU1031
 3753 103c 180085E5 		str	r0, [r5, #24]	@ tmp170, g_armwave_state.test_wave_buffer
 468:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3754              		.loc 1 468 5 is_stmt 1 view .LVU1032
 3755              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer == NULL) {
 468:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3756              		.loc 1 468 7 is_stmt 0 view .LVU1033
 3757 1040 4E00000A 		beq	.L265		@,
 3758              	.L237:
 3759              	.LVL287:
 468:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3760              		.loc 1 468 7 view .LVU1034
 3761              	.LBE63:
 3762              	.LBE67:
 3763              	@ armwave.c:515:     for(w = 0; w < g_armwave_state.waves; w++) {
 514:armwave.c     **** 
 515:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3764              		.loc 1 515 35 discriminator 1 view .LVU1035
 3765 1044 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_92, g_armwave_state.waves
 3766              	@ armwave.c:515:     for(w = 0; w < g_armwave_state.waves; w++) {
 3767              		.loc 1 515 5 discriminator 1 view .LVU1036
 3768 1048 000052E3 		cmp	r2, #0	@ prephitmp_92,
 3769 104c 4800000A 		beq	.L235		@,
 3770              	@ armwave.c:516:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 516:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3771              		.loc 1 516 37 view .LVU1037
 3772 1050 4EDADFED 		vldr.32	s27, .L266	@ tmp177,
 3773              	@ armwave.c:516:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3774              		.loc 1 516 17 view .LVU1038
 3775 1054 4EDA9FED 		vldr.32	s26, .L266+4	@ tmp179,
 3776              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 517:armwave.c     ****         //mod = 1.0f;
 518:armwave.c     **** 
 519:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 520:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 521:armwave.c     ****             noise *= noise;
 522:armwave.c     ****             noise *= noise;
 523:armwave.c     ****             noise *= noise;
 524:armwave.c     **** 
 525:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 526:armwave.c     ****                 noise = -noise;
 527:armwave.c     **** 
 528:armwave.c     ****             noise += 1.0f;
 529:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 530:armwave.c     **** 
 531:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3777              		.loc 1 531 41 view .LVU1039
 3778 1058 4E8A9FED 		vldr.32	s16, .L266+8	@ tmp227,
 3779              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 3780              		.loc 1 531 29 view .LVU1040
 3781 105c 4EBADFED 		vldr.32	s23, .L266+12	@ tmp228,
 3782              	@ armwave.c:534:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 532:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 533:armwave.c     ****             //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127), 0
 534:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = (uint8_t)MIN(
 3783              		.loc 1 534 87 view .LVU1041
 3784 1060 4ECA9FED 		vldr.32	s24, .L266+16	@ tmp229,
 3785 1064 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_97, g_armwave_state.wave_length
 3786              	@ armwave.c:515:     for(w = 0; w < g_armwave_state.waves; w++) {
 515:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3787              		.loc 1 515 5 view .LVU1042
 3788 1068 0060A0E3 		mov	r6, #0	@ w,
 3789              	.LVL288:
 3790              	.L245:
 516:armwave.c     ****         //mod = 1.0f;
 3791              		.loc 1 516 9 is_stmt 1 view .LVU1043
 3792              	@ armwave.c:516:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 516:armwave.c     ****         //mod = 1.0f;
 3793              		.loc 1 516 28 is_stmt 0 view .LVU1044
 3794 106c 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3795              	@ armwave.c:516:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 516:armwave.c     ****         //mod = 1.0f;
 3796              		.loc 1 516 17 view .LVU1045
 3797 1070 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp179
 3798              	@ armwave.c:519:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 519:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3799              		.loc 1 519 9 view .LVU1046
 3800 1074 000053E3 		cmp	r3, #0	@ prephitmp_97,
 3801              	@ armwave.c:516:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 516:armwave.c     ****         //mod = 1.0f;
 3802              		.loc 1 516 28 view .LVU1047
 3803 1078 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp175, w
 3804              	@ armwave.c:516:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 516:armwave.c     ****         //mod = 1.0f;
 3805              		.loc 1 516 37 view .LVU1048
 3806 107c AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp176, tmp175, tmp177
 3807              	@ armwave.c:516:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 516:armwave.c     ****         //mod = 1.0f;
 3808              		.loc 1 516 17 view .LVU1049
 3809 1080 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp176, mod
 3810              	.LVL289:
 519:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3811              		.loc 1 519 9 is_stmt 1 view .LVU1050
 519:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3812              		.loc 1 519 9 is_stmt 0 view .LVU1051
 3813 1084 3700000A 		beq	.L239		@,
 3814 1088 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp225, mod_val
 3815              	@ armwave.c:529:             xnoise = (rand() & 0xffff) / 6553500.0f;
 529:armwave.c     **** 
 3816              		.loc 1 529 20 view .LVU1052
 3817 108c 44AADFED 		vldr.32	s21, .L266+20	@ tmp197,
 3818              	@ armwave.c:534:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3819              		.loc 1 534 96 view .LVU1053
 3820 1090 44AA9FED 		vldr.32	s20, .L266+24	@ tmp208,
 3821 1094 448ADFED 		vldr.32	s17, .L266+28	@ tmp209,
 3822              	@ armwave.c:519:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 519:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3823              		.loc 1 519 15 view .LVU1054
 3824 1098 0040A0E3 		mov	r4, #0	@ x,
 3825              	.LVL290:
 3826              	.L244:
 520:armwave.c     ****             noise *= noise;
 3827              		.loc 1 520 13 is_stmt 1 view .LVU1055
 3828              	@ armwave.c:520:             noise  = ((rand() & 0xffff) * noise_fraction);
 520:armwave.c     ****             noise *= noise;
 3829              		.loc 1 520 24 is_stmt 0 view .LVU1056
 3830 109c FEFFFFEB 		bl	rand		@
 3831              	.LVL291:
 3832              	@ armwave.c:520:             noise  = ((rand() & 0xffff) * noise_fraction);
 520:armwave.c     ****             noise *= noise;
 3833              		.loc 1 520 31 view .LVU1057
 3834 10a0 7000FFE6 		uxth	r0, r0	@ tmp180,
 3835              	@ armwave.c:520:             noise  = ((rand() & 0xffff) * noise_fraction);
 520:armwave.c     ****             noise *= noise;
 3836              		.loc 1 520 41 view .LVU1058
 3837 10a4 900A07EE 		vmov	s15, r0	@ int	@ tmp180, tmp180
 3838 10a8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp182, tmp180
 3839              	@ armwave.c:520:             noise  = ((rand() & 0xffff) * noise_fraction);
 520:armwave.c     ****             noise *= noise;
 3840              		.loc 1 520 20 view .LVU1059
 3841 10ac 8B7A67EE 		vmul.f32	s15, s15, s22	@ noise, tmp182, noise_fraction
 3842              	.LVL292:
 521:armwave.c     ****             noise *= noise;
 3843              		.loc 1 521 13 is_stmt 1 view .LVU1060
 3844              	@ armwave.c:521:             noise *= noise;
 521:armwave.c     ****             noise *= noise;
 3845              		.loc 1 521 19 is_stmt 0 view .LVU1061
 3846 10b0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3847              	.LVL293:
 522:armwave.c     ****             noise *= noise;
 3848              		.loc 1 522 13 is_stmt 1 view .LVU1062
 3849              	@ armwave.c:522:             noise *= noise;
 522:armwave.c     ****             noise *= noise;
 3850              		.loc 1 522 19 is_stmt 0 view .LVU1063
 3851 10b4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3852              	.LVL294:
 523:armwave.c     **** 
 3853              		.loc 1 523 13 is_stmt 1 view .LVU1064
 3854              	@ armwave.c:523:             noise *= noise;
 523:armwave.c     **** 
 3855              		.loc 1 523 19 is_stmt 0 view .LVU1065
 3856 10b8 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3857              	.LVL295:
 525:armwave.c     ****                 noise = -noise;
 3858              		.loc 1 525 13 is_stmt 1 view .LVU1066
 3859              	@ armwave.c:525:             if((rand() & 0xffff) > 0x7fff)
 525:armwave.c     ****                 noise = -noise;
 3860              		.loc 1 525 17 is_stmt 0 view .LVU1067
 3861 10bc FEFFFFEB 		bl	rand		@
 3862              	.LVL296:
 526:armwave.c     **** 
 3863              		.loc 1 526 17 is_stmt 1 view .LVU1068
 3864              	@ armwave.c:525:             if((rand() & 0xffff) > 0x7fff)
 525:armwave.c     ****                 noise = -noise;
 3865              		.loc 1 525 15 is_stmt 0 view .LVU1069
 3866 10c0 020910E3 		tst	r0, #32768	@,
 3867              	@ armwave.c:526:                 noise = -noise;
 526:armwave.c     **** 
 3868              		.loc 1 526 23 view .LVU1070
 3869 10c4 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3870              	.LVL297:
 528:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3871              		.loc 1 528 13 is_stmt 1 view .LVU1071
 529:armwave.c     **** 
 3872              		.loc 1 529 13 view .LVU1072
 3873              	@ armwave.c:529:             xnoise = (rand() & 0xffff) / 6553500.0f;
 529:armwave.c     **** 
 3874              		.loc 1 529 23 is_stmt 0 view .LVU1073
 3875 10c8 FEFFFFEB 		bl	rand		@
 3876              	.LVL298:
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3877              		.loc 1 531 13 is_stmt 1 view .LVU1074
 3878              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3879              		.loc 1 531 41 is_stmt 0 view .LVU1075
 3880 10cc 107A95ED 		vldr.32	s14, [r5, #64]	@ int	@ tmp235, g_armwave_state.wave_length
 3881              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3882              		.loc 1 531 29 view .LVU1076
 3883 10d0 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3884              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3885              		.loc 1 531 41 view .LVU1077
 3886 10d4 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp185, tmp235
 3887              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3888              		.loc 1 531 29 view .LVU1078
 3889 10d8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp189, x
 3890              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3891              		.loc 1 531 41 view .LVU1079
 3892 10dc 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp187, tmp227, tmp185
 3893              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3894              		.loc 1 531 29 view .LVU1080
 3895 10e0 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp190, tmp189, tmp228
 3896              	@ armwave.c:529:             xnoise = (rand() & 0xffff) / 6553500.0f;
 529:armwave.c     **** 
 3897              		.loc 1 529 30 view .LVU1081
 3898 10e4 7000FFE6 		uxth	r0, r0	@ tmp193,
 3899              	.LVL299:
 3900              	@ armwave.c:529:             xnoise = (rand() & 0xffff) / 6553500.0f;
 529:armwave.c     **** 
 3901              		.loc 1 529 40 view .LVU1082
 3902 10e8 100A07EE 		vmov	s14, r0	@ int	@ tmp193, tmp193
 3903 10ec C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp195, tmp193
 3904              	@ armwave.c:529:             xnoise = (rand() & 0xffff) / 6553500.0f;
 529:armwave.c     **** 
 3905              		.loc 1 529 20 view .LVU1083
 3906 10f0 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp195, tmp197
 3907              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3908              		.loc 1 531 73 view .LVU1084
 3909 10f4 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp198, tmp187, tmp190
 3910              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3911              		.loc 1 531 18 view .LVU1085
 3912 10f8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp198
 3913 10fc FEFFFFEB 		bl	sin		@
 3914              	.LVL300:
 3915              		.loc 1 534 13 is_stmt 1 view .LVU1086
 3916              	@ armwave.c:528:             noise += 1.0f;
 528:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3917              		.loc 1 528 19 is_stmt 0 view .LVU1087
 3918 1100 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp227
 3919              	@ armwave.c:534:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3920              		.loc 1 534 87 view .LVU1088
 3921 1104 0020A0E3 		mov	r2, #0	@ iftmp.20_39,
 3922              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3923              		.loc 1 531 94 view .LVU1089
 3924 1108 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp204, noise
 3925              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3926              		.loc 1 531 83 view .LVU1090
 3927 110c 000B29EE 		vmul.f64	d0, d9, d0	@ tmp201, tmp225,
 3928              	.LVL301:
 3929              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3930              		.loc 1 531 94 view .LVU1091
 3931 1110 077B20EE 		vmul.f64	d7, d0, d7	@ tmp205, tmp201, tmp204
 3932              	@ armwave.c:531:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 531:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3933              		.loc 1 531 15 view .LVU1092
 3934 1114 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp205
 3935              	@ armwave.c:534:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3936              		.loc 1 534 96 view .LVU1093
 3937 1118 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp209
 3938 111c 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp208
 3939 1120 C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3940 1124 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3941 1128 050000DA 		ble	.L241		@,
 3942              	@ armwave.c:534:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3943              		.loc 1 534 87 discriminator 1 view .LVU1094
 3944 112c CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp229
 3945 1130 FF20A0E3 		mov	r2, #255	@ iftmp.20_39,
 3946 1134 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3947 1138 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp213, _26
 3948 113c 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp213, %sfp
 3949 1140 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.20_39, %sfp
 3950              	.L241:
 3951              	@ armwave.c:534:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3952              		.loc 1 534 53 discriminator 12 view .LVU1095
 3953 1144 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3954              	@ armwave.c:534:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3955              		.loc 1 534 85 discriminator 12 view .LVU1096
 3956 1148 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3957 114c 931623E0 		mla	r3, r3, r6, r1	@ tmp219, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 3958 1150 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.20_39, *_31
 3959              	@ armwave.c:519:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 519:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3960              		.loc 1 519 39 discriminator 12 view .LVU1097
 3961 1154 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_97, g_armwave_state.wave_length
 3962              	@ armwave.c:519:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 519:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3963              		.loc 1 519 54 discriminator 12 view .LVU1098
 3964 1158 014084E2 		add	r4, r4, #1	@ x, x,
 3965              	.LVL302:
 3966              	@ armwave.c:519:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 519:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3967              		.loc 1 519 9 discriminator 12 view .LVU1099
 3968 115c 040053E1 		cmp	r3, r4	@ prephitmp_97, x
 3969 1160 CDFFFF8A 		bhi	.L244		@,
 3970 1164 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_92, g_armwave_state.waves
 3971              	.LVL303:
 3972              	.L239:
 3973              	@ armwave.c:515:     for(w = 0; w < g_armwave_state.waves; w++) {
 515:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3974              		.loc 1 515 44 discriminator 2 view .LVU1100
 3975 1168 016086E2 		add	r6, r6, #1	@ w, w,
 3976              	.LVL304:
 3977              	@ armwave.c:515:     for(w = 0; w < g_armwave_state.waves; w++) {
 515:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3978              		.loc 1 515 5 discriminator 2 view .LVU1101
 3979 116c 020056E1 		cmp	r6, r2	@ w, prephitmp_92
 3980 1170 BDFFFF3A 		bcc	.L245		@,
 3981              	.LVL305:
 3982              	.L235:
 3983              	@ armwave.c:537: }
 535:armwave.c     ****         }
 536:armwave.c     ****     }
 537:armwave.c     **** }
 3984              		.loc 1 537 1 view .LVU1102
 3985 1174 08D08DE2 		add	sp, sp, #8	@,,
 3986              		.cfi_remember_state
 3987              		.cfi_def_cfa_offset 72
 3988              		@ sp needed	@
 3989 1178 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3990              		.cfi_restore 92
 3991              		.cfi_restore 93
 3992              		.cfi_restore 90
 3993              		.cfi_restore 91
 3994              		.cfi_restore 88
 3995              		.cfi_restore 89
 3996              		.cfi_restore 86
 3997              		.cfi_restore 87
 3998              		.cfi_restore 84
 3999              		.cfi_restore 85
 4000              		.cfi_restore 82
 4001              		.cfi_restore 83
 4002              		.cfi_restore 80
 4003              		.cfi_restore 81
 4004              		.cfi_def_cfa_offset 16
 4005              	.LVL306:
 4006              		.loc 1 537 1 view .LVU1103
 4007 117c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4008              	.LVL307:
 4009              	.L265:
 4010              		.cfi_restore_state
 4011              	.LBB68:
 4012              	.LBB64:
 469:armwave.c     ****         return;
 4013              		.loc 1 469 9 is_stmt 1 view .LVU1104
 4014 1180 0410A0E1 		mov	r1, r4	@, _66
 4015 1184 28009FE5 		ldr	r0, .L266+36	@,
 4016 1188 FEFFFFEB 		bl	printf		@
 4017              	.LVL308:
 470:armwave.c     ****     }
 4018              		.loc 1 470 9 view .LVU1105
 4019 118c ACFFFFEA 		b	.L237		@
 4020              	.L267:
 4021              		.align	2
 4022              	.L266:
 4023 1190 0000803C 		.word	1015021568
 4024 1194 0000003F 		.word	1056964608
 4025 1198 0000803F 		.word	1065353216
 4026 119c C3F5C840 		.word	1086911939
 4027 11a0 00007F43 		.word	1132396544
 4028 11a4 38FFC74A 		.word	1254620984
 4029 11a8 0000FE42 		.word	1123942400
 4030 11ac 00000043 		.word	1124073472
 4031 11b0 00000000 		.word	g_armwave_state
 4032 11b4 60010000 		.word	.LC17
 4033              	.LBE64:
 4034              	.LBE68:
 4035              		.cfi_endproc
 4036              	.LFE76:
 4038              		.align	2
 4039              		.global	armwave_test_create_square
 4040              		.syntax unified
 4041              		.arm
 4042              		.fpu vfp
 4044              	armwave_test_create_square:
 4045              	.LVL309:
 4046              	.LFB77:
 538:armwave.c     **** 
 539:armwave.c     **** /*
 540:armwave.c     ****  * Make a test square waveform.
 541:armwave.c     ****  *
 542:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 543:armwave.c     ****  */
 544:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 545:armwave.c     **** {
 4047              		.loc 1 545 1 view -0
 4048              		.cfi_startproc
 4049              		@ args = 0, pretend = 0, frame = 8
 4050              		@ frame_needed = 0, uses_anonymous_args = 0
 546:armwave.c     ****     uint8_t v;
 4051              		.loc 1 546 5 view .LVU1107
 547:armwave.c     ****     float noise, xnoise;
 4052              		.loc 1 547 5 view .LVU1108
 548:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 4053              		.loc 1 548 5 view .LVU1109
 549:armwave.c     ****     int w, x;
 4054              		.loc 1 549 5 view .LVU1110
 550:armwave.c     **** 
 551:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 4055              		.loc 1 551 5 view .LVU1111
 4056              	@ armwave.c:545: {
 545:armwave.c     ****     uint8_t v;
 4057              		.loc 1 545 1 is_stmt 0 view .LVU1112
 4058 11b8 70402DE9 		push	{r4, r5, r6, lr}	@
 4059              		.cfi_def_cfa_offset 16
 4060              		.cfi_offset 4, -16
 4061              		.cfi_offset 5, -12
 4062              		.cfi_offset 6, -8
 4063              		.cfi_offset 14, -4
 4064 11bc 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 4065              		.cfi_def_cfa_offset 56
 4066              		.cfi_offset 80, -56
 4067              		.cfi_offset 81, -52
 4068              		.cfi_offset 82, -48
 4069              		.cfi_offset 83, -44
 4070              		.cfi_offset 84, -40
 4071              		.cfi_offset 85, -36
 4072              		.cfi_offset 86, -32
 4073              		.cfi_offset 87, -28
 4074              		.cfi_offset 88, -24
 4075              		.cfi_offset 89, -20
 4076              	@ armwave.c:551:     for(w = 0; w < g_armwave_state.waves; w++) {
 4077              		.loc 1 551 35 view .LVU1113
 4078 11c0 54519FE5 		ldr	r5, .L296+32	@ tmp179,
 4079 11c4 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_33, g_armwave_state.waves
 4080              	@ armwave.c:545: {
 545:armwave.c     ****     uint8_t v;
 4081              		.loc 1 545 1 view .LVU1114
 4082 11c8 08D04DE2 		sub	sp, sp, #8	@,,
 4083              		.cfi_def_cfa_offset 64
 4084              	@ armwave.c:551:     for(w = 0; w < g_armwave_state.waves; w++) {
 4085              		.loc 1 551 5 view .LVU1115
 4086 11cc 000052E3 		cmp	r2, #0	@ prephitmp_33,
 4087 11d0 4600000A 		beq	.L268		@,
 4088 11d4 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 4089              	@ armwave.c:548:     float level = 0.8f, new_level = 0.8f;
 548:armwave.c     ****     int w, x;
 4090              		.loc 1 548 11 view .LVU1116
 4091 11d8 47CA9FED 		vldr.32	s24, .L296	@ level,
 4092              	@ armwave.c:563:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 552:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****             noise *= noise;
 555:armwave.c     ****             noise *= noise;
 556:armwave.c     ****             noise *= noise;
 557:armwave.c     **** 
 558:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 559:armwave.c     ****                 noise = -noise;
 560:armwave.c     **** 
 561:armwave.c     ****             //noise += 1.0f;
 562:armwave.c     **** 
 563:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 4093              		.loc 1 563 49 view .LVU1117
 4094 11dc 47AA9FED 		vldr.32	s20, .L296+4	@ tmp186,
 4095              	@ armwave.c:568:                 new_level = 0.2f;
 564:armwave.c     ****                 new_level = 0.2f;
 565:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 566:armwave.c     ****                 new_level = 0.8f;
 567:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 568:armwave.c     ****                 new_level = 0.2f;
 4096              		.loc 1 568 27 view .LVU1118
 4097 11e0 47AADFED 		vldr.32	s21, .L296+8	@ new_level,
 4098              	@ armwave.c:565:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 565:armwave.c     ****                 new_level = 0.8f;
 4099              		.loc 1 565 56 view .LVU1119
 4100 11e4 47BADFED 		vldr.32	s23, .L296+12	@ tmp188,
 4101              	@ armwave.c:567:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 567:armwave.c     ****                 new_level = 0.2f;
 4102              		.loc 1 567 56 view .LVU1120
 4103 11e8 478ADFED 		vldr.32	s17, .L296+16	@ tmp189,
 4104 11ec 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_70, g_armwave_state.wave_length
 4105              	@ armwave.c:551:     for(w = 0; w < g_armwave_state.waves; w++) {
 551:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4106              		.loc 1 551 11 view .LVU1121
 4107 11f0 0060A0E3 		mov	r6, #0	@ w,
 4108              	.LVL310:
 4109              	.L270:
 4110              	@ armwave.c:552:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 552:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4111              		.loc 1 552 9 view .LVU1122
 4112 11f4 000053E3 		cmp	r3, #0	@ prephitmp_70,
 4113 11f8 3900000A 		beq	.L277		@,
 4114              	@ armwave.c:566:                 new_level = 0.8f;
 566:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4115              		.loc 1 566 27 view .LVU1123
 4116 11fc 3EBA9FED 		vldr.32	s22, .L296	@ new_level,
 4117              	@ armwave.c:573:             level = ((level * 3) + new_level) * 0.25f;
 569:armwave.c     ****             } else {
 570:armwave.c     ****                 new_level = 0.8f;
 571:armwave.c     ****             }
 572:armwave.c     **** 
 573:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 4118              		.loc 1 573 29 view .LVU1124
 4119 1200 429A9FED 		vldr.32	s18, .L296+20	@ tmp161,
 4120              	@ armwave.c:552:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 552:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4121              		.loc 1 552 15 view .LVU1125
 4122 1204 0040A0E3 		mov	r4, #0	@ x,
 4123              	.LVL311:
 4124              	.L276:
 553:armwave.c     ****             noise *= noise;
 4125              		.loc 1 553 13 is_stmt 1 view .LVU1126
 4126              	@ armwave.c:553:             noise  = ((rand() & 0xffff) * noise_fraction);
 553:armwave.c     ****             noise *= noise;
 4127              		.loc 1 553 24 is_stmt 0 view .LVU1127
 4128 1208 FEFFFFEB 		bl	rand		@
 4129              	.LVL312:
 4130              	@ armwave.c:553:             noise  = ((rand() & 0xffff) * noise_fraction);
 553:armwave.c     ****             noise *= noise;
 4131              		.loc 1 553 31 view .LVU1128
 4132 120c 7000FFE6 		uxth	r0, r0	@ tmp148,
 4133              	@ armwave.c:553:             noise  = ((rand() & 0xffff) * noise_fraction);
 553:armwave.c     ****             noise *= noise;
 4134              		.loc 1 553 41 view .LVU1129
 4135 1210 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 4136 1214 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 4137              	@ armwave.c:553:             noise  = ((rand() & 0xffff) * noise_fraction);
 553:armwave.c     ****             noise *= noise;
 4138              		.loc 1 553 20 view .LVU1130
 4139 1218 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 4140              	.LVL313:
 554:armwave.c     ****             noise *= noise;
 4141              		.loc 1 554 13 is_stmt 1 view .LVU1131
 4142              	@ armwave.c:554:             noise *= noise;
 554:armwave.c     ****             noise *= noise;
 4143              		.loc 1 554 19 is_stmt 0 view .LVU1132
 4144 121c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4145              	.LVL314:
 555:armwave.c     ****             noise *= noise;
 4146              		.loc 1 555 13 is_stmt 1 view .LVU1133
 4147              	@ armwave.c:555:             noise *= noise;
 555:armwave.c     ****             noise *= noise;
 4148              		.loc 1 555 19 is_stmt 0 view .LVU1134
 4149 1220 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4150              	.LVL315:
 556:armwave.c     **** 
 4151              		.loc 1 556 13 is_stmt 1 view .LVU1135
 4152              	@ armwave.c:556:             noise *= noise;
 556:armwave.c     **** 
 4153              		.loc 1 556 19 is_stmt 0 view .LVU1136
 4154 1224 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 4155              	.LVL316:
 558:armwave.c     ****                 noise = -noise;
 4156              		.loc 1 558 13 is_stmt 1 view .LVU1137
 4157              	@ armwave.c:558:             if((rand() & 0xff) > 0x7f)
 558:armwave.c     ****                 noise = -noise;
 4158              		.loc 1 558 17 is_stmt 0 view .LVU1138
 4159 1228 FEFFFFEB 		bl	rand		@
 4160              	.LVL317:
 4161              	@ armwave.c:563:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 563:armwave.c     ****                 new_level = 0.2f;
 4162              		.loc 1 563 18 view .LVU1139
 4163 122c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4164 1230 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 4165              	@ armwave.c:563:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 563:armwave.c     ****                 new_level = 0.2f;
 4166              		.loc 1 563 49 view .LVU1140
 4167 1234 107AD5ED 		vldr.32	s15, [r5, #64]	@ int	@ tmp195, g_armwave_state.wave_length
 4168 1238 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp195
 4169 123c 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp186
 4170              	@ armwave.c:563:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 563:armwave.c     ****                 new_level = 0.2f;
 4171              		.loc 1 563 15 view .LVU1141
 4172 1240 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 4173              	@ armwave.c:558:             if((rand() & 0xff) > 0x7f)
 558:armwave.c     ****                 noise = -noise;
 4174              		.loc 1 558 15 view .LVU1142
 4175 1244 800010E3 		tst	r0, #128	@,
 559:armwave.c     **** 
 4176              		.loc 1 559 17 is_stmt 1 view .LVU1143
 4177              	@ armwave.c:559:                 noise = -noise;
 559:armwave.c     **** 
 4178              		.loc 1 559 23 is_stmt 0 view .LVU1144
 4179 1248 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 4180              	.LVL318:
 563:armwave.c     ****                 new_level = 0.2f;
 4181              		.loc 1 563 13 is_stmt 1 view .LVU1145
 4182              	@ armwave.c:563:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 563:armwave.c     ****                 new_level = 0.2f;
 4183              		.loc 1 563 15 is_stmt 0 view .LVU1146
 4184 124c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4185              	@ armwave.c:568:                 new_level = 0.2f;
 568:armwave.c     ****             } else {
 4186              		.loc 1 568 27 view .LVU1147
 4187 1250 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 4188              	@ armwave.c:563:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 563:armwave.c     ****                 new_level = 0.2f;
 4189              		.loc 1 563 15 view .LVU1148
 4190 1254 090000CA 		bgt	.L272		@,
 565:armwave.c     ****                 new_level = 0.8f;
 4191              		.loc 1 565 20 is_stmt 1 view .LVU1149
 4192              	@ armwave.c:565:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 565:armwave.c     ****                 new_level = 0.8f;
 4193              		.loc 1 565 56 is_stmt 0 view .LVU1150
 4194 1258 AB6A67EE 		vmul.f32	s13, s15, s23	@ tmp156, _8, tmp188
 4195              	@ armwave.c:565:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 565:armwave.c     ****                 new_level = 0.8f;
 4196              		.loc 1 565 22 view .LVU1151
 4197 125c E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 4198 1260 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4199              	@ armwave.c:566:                 new_level = 0.8f;
 566:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4200              		.loc 1 566 27 view .LVU1152
 4201 1264 4B7AF0CE 		vmovgt.f32	s15, s22	@ new_level, new_level
 4202              	@ armwave.c:565:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 565:armwave.c     ****                 new_level = 0.8f;
 4203              		.loc 1 565 22 view .LVU1153
 4204 1268 040000CA 		bgt	.L272		@,
 567:armwave.c     ****                 new_level = 0.2f;
 4205              		.loc 1 567 20 is_stmt 1 view .LVU1154
 4206              	@ armwave.c:567:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 567:armwave.c     ****                 new_level = 0.2f;
 4207              		.loc 1 567 56 is_stmt 0 view .LVU1155
 4208 126c A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp189
 4209              	@ armwave.c:566:                 new_level = 0.8f;
 566:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4210              		.loc 1 566 27 view .LVU1156
 4211 1270 E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 4212 1274 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4213 1278 4B7AF0DE 		vmovle.f32	s15, s22	@, new_level, new_level
 4214 127c 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 4215              	.L272:
 4216              	.LVL319:
 4217              		.loc 1 573 13 is_stmt 1 view .LVU1157
 4218              	@ armwave.c:573:             level = ((level * 3) + new_level) * 0.25f;
 4219              		.loc 1 573 34 is_stmt 0 view .LVU1158
 4220 1280 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 4221              	.LVL320:
 4222              	@ armwave.c:573:             level = ((level * 3) + new_level) * 0.25f;
 4223              		.loc 1 573 19 view .LVU1159
 4224 1284 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp189
 4225              	.LVL321:
 574:armwave.c     **** 
 575:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4226              		.loc 1 575 13 is_stmt 1 view .LVU1160
 4227              	@ armwave.c:575:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4228              		.loc 1 575 27 is_stmt 0 view .LVU1161
 4229 1288 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 4230 128c C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 4231 1290 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4232              	@ armwave.c:575:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4233              		.loc 1 575 17 view .LVU1162
 4234 1294 0020A0D3 		movle	r2, #0	@ iftmp.27_32,
 4235              	@ armwave.c:575:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4236              		.loc 1 575 27 view .LVU1163
 4237 1298 080000DA 		ble	.L273		@,
 4238              	@ armwave.c:575:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4239              		.loc 1 575 17 discriminator 1 view .LVU1164
 4240 129c 1C7A9FED 		vldr.32	s14, .L296+24	@ tmp164,
 4241 12a0 C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 4242 12a4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4243              	@ armwave.c:575:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4244              		.loc 1 575 60 discriminator 1 view .LVU1165
 4245 12a8 1A7A9F4D 		vldrmi.32	s14, .L296+28	@ tmp166,
 4246              	@ armwave.c:575:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4247              		.loc 1 575 17 discriminator 1 view .LVU1166
 4248 12ac FF20A053 		movpl	r2, #255	@ iftmp.27_32,
 4249              	@ armwave.c:575:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4250              		.loc 1 575 60 discriminator 1 view .LVU1167
 4251 12b0 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 4252              	@ armwave.c:575:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4253              		.loc 1 575 17 discriminator 1 view .LVU1168
 4254 12b4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 4255 12b8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 4256 12bc 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_32, %sfp
 4257              	.L273:
 4258              	.LVL322:
 576:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 4259              		.loc 1 576 13 is_stmt 1 discriminator 12 view .LVU1169
 4260              	@ armwave.c:576:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4261              		.loc 1 576 53 is_stmt 0 discriminator 12 view .LVU1170
 4262 12c0 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4263              	@ armwave.c:576:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4264              		.loc 1 576 85 discriminator 12 view .LVU1171
 4265 12c4 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4266 12c8 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 4267 12cc 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.27_32, *_21
 4268              	@ armwave.c:552:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 552:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4269              		.loc 1 552 39 discriminator 12 view .LVU1172
 4270 12d0 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_70, g_armwave_state.wave_length
 4271              	@ armwave.c:552:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 552:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4272              		.loc 1 552 54 discriminator 12 view .LVU1173
 4273 12d4 014084E2 		add	r4, r4, #1	@ x, x,
 4274              	.LVL323:
 4275              	@ armwave.c:552:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 552:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4276              		.loc 1 552 9 discriminator 12 view .LVU1174
 4277 12d8 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 4278 12dc C9FFFF8A 		bhi	.L276		@,
 4279 12e0 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_33, g_armwave_state.waves
 4280              	.LVL324:
 4281              	.L277:
 4282              	@ armwave.c:551:     for(w = 0; w < g_armwave_state.waves; w++) {
 551:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4283              		.loc 1 551 44 discriminator 2 view .LVU1175
 4284 12e4 016086E2 		add	r6, r6, #1	@ w, w,
 4285              	.LVL325:
 4286              	@ armwave.c:551:     for(w = 0; w < g_armwave_state.waves; w++) {
 551:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4287              		.loc 1 551 5 discriminator 2 view .LVU1176
 4288 12e8 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 4289 12ec C0FFFF3A 		bcc	.L270		@,
 4290              	.LVL326:
 4291              	.L268:
 4292              	@ armwave.c:579: }
 577:armwave.c     ****         }
 578:armwave.c     ****     }
 579:armwave.c     **** }
 4293              		.loc 1 579 1 view .LVU1177
 4294 12f0 08D08DE2 		add	sp, sp, #8	@,,
 4295              		.cfi_def_cfa_offset 56
 4296              		@ sp needed	@
 4297 12f4 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 4298              		.cfi_restore 88
 4299              		.cfi_restore 89
 4300              		.cfi_restore 86
 4301              		.cfi_restore 87
 4302              		.cfi_restore 84
 4303              		.cfi_restore 85
 4304              		.cfi_restore 82
 4305              		.cfi_restore 83
 4306              		.cfi_restore 80
 4307              		.cfi_restore 81
 4308              		.cfi_def_cfa_offset 16
 4309 12f8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4310              	.L297:
 4311              		.align	2
 4312              	.L296:
 4313 12fc CDCC4C3F 		.word	1061997773
 4314 1300 0000403F 		.word	1061158912
 4315 1304 CDCC4C3E 		.word	1045220557
 4316 1308 0000003F 		.word	1056964608
 4317 130c 0000803E 		.word	1048576000
 4318 1310 00004040 		.word	1077936128
 4319 1314 0000803F 		.word	1065353216
 4320 1318 00007F43 		.word	1132396544
 4321 131c 00000000 		.word	g_armwave_state
 4322              		.cfi_endproc
 4323              	.LFE77:
 4325              		.align	2
 4326              		.global	armwave_cleanup
 4327              		.syntax unified
 4328              		.arm
 4329              		.fpu vfp
 4331              	armwave_cleanup:
 4332              	.LFB78:
 580:armwave.c     **** 
 581:armwave.c     **** /*
 582:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 583:armwave.c     ****  */
 584:armwave.c     **** void armwave_cleanup()
 585:armwave.c     **** {
 4333              		.loc 1 585 1 is_stmt 1 view -0
 4334              		.cfi_startproc
 4335              		@ args = 0, pretend = 0, frame = 0
 4336              		@ frame_needed = 0, uses_anonymous_args = 0
 586:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4337              		.loc 1 586 5 view .LVU1179
 4338              	@ armwave.c:585: {
 585:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4339              		.loc 1 585 1 is_stmt 0 view .LVU1180
 4340 1320 10402DE9 		push	{r4, lr}	@
 4341              		.cfi_def_cfa_offset 8
 4342              		.cfi_offset 4, -8
 4343              		.cfi_offset 14, -4
 4344              	@ armwave.c:586:     free(g_armwave_state.out_pixbuf);
 4345              		.loc 1 586 25 view .LVU1181
 4346 1324 34409FE5 		ldr	r4, .L300	@ tmp114,
 4347              	@ armwave.c:586:     free(g_armwave_state.out_pixbuf);
 4348              		.loc 1 586 5 view .LVU1182
 4349 1328 5C0094E5 		ldr	r0, [r4, #92]	@, g_armwave_state.out_pixbuf
 4350 132c FEFFFFEB 		bl	free		@
 4351              	.LVL327:
 587:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4352              		.loc 1 587 5 is_stmt 1 view .LVU1183
 4353 1330 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4354 1334 FEFFFFEB 		bl	free		@
 4355              	.LVL328:
 588:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4356              		.loc 1 588 5 view .LVU1184
 4357 1338 780094E5 		ldr	r0, [r4, #120]	@, g_armwave_state.xcoord_to_xpixel
 4358 133c FEFFFFEB 		bl	free		@
 4359              	.LVL329:
 589:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4360              		.loc 1 589 5 view .LVU1185
 4361 1340 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4362 1344 FEFFFFEB 		bl	free		@
 4363              	.LVL330:
 590:armwave.c     **** 
 591:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4364              		.loc 1 591 5 view .LVU1186
 4365              	@ armwave.c:591:     g_armwave_state.out_pixbuf = NULL;
 4366              		.loc 1 591 32 is_stmt 0 view .LVU1187
 4367 1348 0030A0E3 		mov	r3, #0	@ tmp123,
 4368 134c 5C3084E5 		str	r3, [r4, #92]	@ tmp123, g_armwave_state.out_pixbuf
 592:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4369              		.loc 1 592 5 is_stmt 1 view .LVU1188
 4370              	@ armwave.c:592:     g_armwave_state.ch1_buffer = NULL;
 4371              		.loc 1 592 32 is_stmt 0 view .LVU1189
 4372 1350 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 593:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4373              		.loc 1 593 5 is_stmt 1 view .LVU1190
 4374              	@ armwave.c:593:     g_armwave_state.xcoord_to_xpixel = NULL;
 4375              		.loc 1 593 38 is_stmt 0 view .LVU1191
 4376 1354 783084E5 		str	r3, [r4, #120]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 594:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4377              		.loc 1 594 5 is_stmt 1 view .LVU1192
 4378              	@ armwave.c:594:     g_armwave_state.test_wave_buffer = NULL;
 4379              		.loc 1 594 38 is_stmt 0 view .LVU1193
 4380 1358 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4381              	@ armwave.c:595: }
 595:armwave.c     **** }
 4382              		.loc 1 595 1 view .LVU1194
 4383 135c 1080BDE8 		pop	{r4, pc}	@
 4384              	.L301:
 4385              		.align	2
 4386              	.L300:
 4387 1360 00000000 		.word	g_armwave_state
 4388              		.cfi_endproc
 4389              	.LFE78:
 4391              		.comm	gamma_table,256,4
 4392              		.comm	g_armwave_state,124,4
 4393              		.section	.rodata
 4394              		.align	2
 4395              		.set	.LANCHOR0,. + 0
 4398              	__PRETTY_FUNCTION__.17092:
 4399 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4399      6176655F 
 4399      66696C6C 
 4399      5F706978 
 4399      6275665F 
 4402              	__PRETTY_FUNCTION__.17125:
 4403 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4403      6176655F 
 4403      66696C6C 
 4403      5F706978 
 4403      6275665F 
 4404 0033 00       		.space	1
 4407              	__PRETTY_FUNCTION__.17147:
 4408 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4408      6176655F 
 4408      73657475 
 4408      705F7265 
 4408      6E646572 
 4409 0049 000000   		.space	3
 4412              	__PRETTY_FUNCTION__.17154:
 4413 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4413      6176655F 
 4413      7365745F 
 4413      77617665 
 4413      5F706F69 
 4414 0065 000000   		.space	3
 4417              	__PRETTY_FUNCTION__.17160:
 4418 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4418      6176655F 
 4418      7365745F 
 4418      77617665 
 4418      5F706F69 
 4419              		.section	.rodata.str1.4,"aMS",%progbits,1
 4420              		.align	2
 4421              	.LC0:
 4422 0000 76302E30 		.ascii	"v0.0.1\000"
 4422      2E3100
 4423 0007 00       		.space	1
 4424              	.LC1:
 4425 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4425      61766520 
 4425      76657273 
 4425      696F6E3A 
 4425      2025730A 
 4426 001d 000000   		.space	3
 4427              	.LC2:
 4428 0020 61726D77 		.ascii	"armwave.c\000"
 4428      6176652E 
 4428      6300
 4429 002a 0000     		.space	2
 4430              	.LC3:
 4431 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4431      62756666 
 4431      65722021 
 4431      3D204E55 
 4431      4C4C00
 4432 003f 00       		.space	1
 4433              	.LC4:
 4434 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4434      20653D25 
 4434      6420773D 
 4434      25642077 
 4434      733D2564 
 4435              	.LC5:
 4436 006c 73746172 		.ascii	"start_point < end_point\000"
 4436      745F706F 
 4436      696E7420 
 4436      3C20656E 
 4436      645F706F 
 4437              	.LC6:
 4438 0084 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4438      7566665F 
 4438      73697A65 
 4438      3D25640A 
 4438      00
 4439 0095 000000   		.space	3
 4440              	.LC7:
 4441 0098 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4441      6D776176 
 4441      655F7374 
 4441      6174652E 
 4441      6368315F 
 4442 00bb 00       		.space	1
 4443              	.LC8:
 4444 00bc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4444      6D776176 
 4444      655F7374 
 4444      6174652E 
 4444      78636F6F 
 4445 00e5 000000   		.space	3
 4446              	.LC9:
 4447 00e8 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 4447      3A203078 
 4447      25303878 
 4447      20307825 
 4447      30387820 
 4448              	.LC10:
 4449 010c 77617665 		.ascii	"wave_buffer != NULL\000"
 4449      5F627566 
 4449      66657220 
 4449      213D204E 
 4449      554C4C00 
 4450              	.LC11:
 4451 0120 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4451      5F627566 
 4451      6665725F 
 4451      70747220 
 4451      213D2030 
 4452 0135 000000   		.space	3
 4453              	.LC12:
 4454 0138 776200   		.ascii	"wb\000"
 4455 013b 00       		.space	1
 4456              	.LC13:
 4457 013c 50330A00 		.ascii	"P3\012\000"
 4458              	.LC14:
 4459 0140 25642025 		.ascii	"%d %d\012\000"
 4459      640A00
 4460 0147 00       		.space	1
 4461              	.LC15:
 4462 0148 3235350A 		.ascii	"255\012\000"
 4462      00
 4463 014d 000000   		.space	3
 4464              	.LC16:
 4465 0150 25336420 		.ascii	"%3d %3d %3d\012\000"
 4465      25336420 
 4465      2533640A 
 4465      00
 4466 015d 000000   		.space	3
 4467              	.LC17:
 4468 0160 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 4468      6176655F 
 4468      74657374 
 4468      5F627566 
 4468      6665725F 
 4469 0193 77617665 		.ascii	"wave buffer (%d bytes)\012\000"
 4469      20627566 
 4469      66657220 
 4469      28256420 
 4469      62797465 
 4470 01ab 00       		.space	1
 4471              	.LC18:
 4472 01ac 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4472      6176655F 
 4472      66696C6C 
 4472      5F706978 
 4472      6275665F 
 4473 01df 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4473      20666169 
 4473      6C65642C 
 4473      20726574 
 4473      75726E69 
 4474              		.text
 4475              	.Letext0:
 4476              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4477              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4478              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4479              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4480              		.file 7 "/usr/include/stdio.h"
 4481              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4482              		.file 9 "/usr/include/errno.h"
 4483              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4484              		.file 11 "/usr/include/unistd.h"
 4485              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4486              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4487              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4488              		.file 15 "/usr/include/math.h"
 4489              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4490              		.file 17 "/usr/include/time.h"
 4491              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4492              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4493              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4494              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4495              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4496              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4497              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4498              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4499              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4500              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4501              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4502              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4503              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4504              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4505              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4506              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4507              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4508              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4509              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4510              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4511              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4512              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4513              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4514              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4515              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4516              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4517              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4518              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4519              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4520              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4521              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4522              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4523              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4524              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4525              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4526              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4527              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4528              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4529              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4530              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4531              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4532              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4533              		.file 60 "/usr/local/include/python3.8/context.h"
 4534              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4535              		.file 62 "/usr/local/include/python3.8/code.h"
 4536              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4537              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4538              		.file 65 "/usr/local/include/python3.8/import.h"
 4539              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4540              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4541              		.file 68 "/usr/include/malloc.h"
 4542              		.file 69 "armwave.h"
 4543              		.file 70 "/usr/include/stdlib.h"
 4544              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 4545              		.file 72 "/usr/include/assert.h"
 4546              		.file 73 "<built-in>"
 4547              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
