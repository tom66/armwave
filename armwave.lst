   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LFB72:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE		2048
  25:armwave.c     **** #define TEST_NWAVES			64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER			"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  			((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         	((a) < (b) ? (a) : (b))
  31:armwave.c     **** #define CLAMP(x,mi,mx)    	MIN(MAX((x),mi),mx)
  32:armwave.c     **** 
  33:armwave.c     **** struct armwave_state_t g_armwave_state;
  34:armwave.c     **** 
  35:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  36:armwave.c     **** uint8_t gamma_table[256];
  37:armwave.c     **** 
  38:armwave.c     **** float overall_scale = 20.0f;
  39:armwave.c     **** 
  40:armwave.c     **** float mod_depth = 0.0f;
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Make a test AM waveform for render tests.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_waveform()
  46:armwave.c     **** {
  47:armwave.c     ****     float v, mod, noise, xnoise;
  48:armwave.c     ****     int w, x;
  49:armwave.c     **** 
  50:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  51:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  52:armwave.c     ****         //mod = 1.0f;
  53:armwave.c     **** 
  54:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  55:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  56:armwave.c     ****             noise *= noise;
  57:armwave.c     ****             noise *= noise;
  58:armwave.c     ****             noise *= noise;
  59:armwave.c     **** 
  60:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  61:armwave.c     ****                 noise = -noise;
  62:armwave.c     **** 
  63:armwave.c     ****             noise += 1.0f;
  64:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  65:armwave.c     **** 
  66:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  67:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  68:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  69:armwave.c     ****         }
  70:armwave.c     ****     }
  71:armwave.c     **** }
  72:armwave.c     **** 
  73:armwave.c     **** /*
  74:armwave.c     ****  * Create a gamma table.
  75:armwave.c     ****  */
  76:armwave.c     **** void test_create_gamma()
  77:armwave.c     **** {
  78:armwave.c     ****     int i;
  79:armwave.c     ****     float gamma = 0.90f;
  80:armwave.c     **** 
  81:armwave.c     ****     for(i = 0; i < 256; i++) {
  82:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  83:armwave.c     ****     }
  84:armwave.c     **** }
  85:armwave.c     **** 
  86:armwave.c     **** /*
  87:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  88:armwave.c     ****  * pre-computed.
  89:armwave.c     ****  *
  90:armwave.c     ****  * @param    slice_y        Slice to render at
  91:armwave.c     ****  * @param    height         Number of wave points to render
  92:armwave.c     ****  */
  93:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  94:armwave.c     **** {
  95:armwave.c     ****     int yy, ys, w, scale_value;
  96:armwave.c     ****     uint32_t value, word;
  97:armwave.c     ****     uint8_t *wave_base;
  98:armwave.c     ****     uint8_t *write_buffer_base;
  99:armwave.c     ****     uint8_t *write_buffer;
 100:armwave.c     ****     
 101:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 102:armwave.c     **** 
 103:armwave.c     ****     // roll through each waveform
 104:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 105:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 106:armwave.c     **** 
 107:armwave.c     **** #if 0
 108:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 109:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 110:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 111:armwave.c     **** #endif
 112:armwave.c     **** 
 113:armwave.c     ****         // roll through y and render the slice into the out buffer
 114:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 115:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 116:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 117:armwave.c     **** 
 118:armwave.c     **** #if 0
 119:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 120:armwave.c     **** 
 121:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 122:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 123:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 124:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 125:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 126:armwave.c     ****                    wave_base + yy);
 127:armwave.c     **** #endif
 128:armwave.c     **** 
 129:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 130:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 131:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 132:armwave.c     ****             //*(write_buffer + value) = 0xff;
 133:armwave.c     **** 
 134:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 135:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 136:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 137:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 138:armwave.c     ****             	word >>= 8;
 139:armwave.c     ****     		}
 140:armwave.c     **** 
 141:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 142:armwave.c     ****         }
 143:armwave.c     ****     }
 144:armwave.c     **** }
 145:armwave.c     **** 
 146:armwave.c     **** void armwave_init()
 147:armwave.c     **** {
 148:armwave.c     ****     g_armwave_state.flags = 0;
 149:armwave.c     **** }
 150:armwave.c     **** 
 151:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 151 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 152:armwave.c     **** {
 153:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 153 5 view .LVU1
 154:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 154 5 view .LVU2
 155:armwave.c     **** 
 156:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 156 5 view .LVU3
 157:armwave.c     **** 
 158:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 159:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 159 5 view .LVU4
  93              	@ armwave.c:151: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 151:armwave.c     **** {
  94              		.loc 1 151 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:165:     g_armwave_state.xstride = target_height;
 160:armwave.c     **** 
 161:armwave.c     ****     // target_height must be multiple of 256 (8-bit samples);  other sizes should be scaled somehow
 162:armwave.c     ****     assert((target_height % 256) == 0);
 163:armwave.c     **** 
 164:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 165:armwave.c     ****     g_armwave_state.xstride = target_height;
 102              		.loc 1 165 29 view .LVU6
 103 0004 011CA0E3 		mov	r1, #256	@ tmp129,
 104              	@ armwave.c:159:     g_armwave_state.wave_buffer = wave_buffer;
 159:armwave.c     **** 
 105              		.loc 1 159 33 view .LVU7
 106 0008 FC409FE5 		ldr	r4, .L12	@ tmp172,
 107 000c FC309FE5 		ldr	r3, .L12+4	@ tmp127,
 108              	@ armwave.c:167:     g_armwave_state.wave_stride = wave_stride;
 166:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 167:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 109              		.loc 1 167 33 view .LVU8
 110 0010 022BA0E3 		mov	r2, #2048	@ tmp133,
 111              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 168:armwave.c     ****     g_armwave_state.waves = waves;
 169:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 170:armwave.c     ****     g_armwave_state.target_width = target_width;
 171:armwave.c     ****     g_armwave_state.target_height = target_height;
 172:armwave.c     **** 
 173:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 174:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 175:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 176:armwave.c     ****     g_armwave_state.slice_height = 64;  
 177:armwave.c     **** 
 178:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 178 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _4, g_armwave_state.ch1_buffer
 114              	@ armwave.c:166:     g_armwave_state.vscale = target_height / 256;
 166:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 115              		.loc 1 166 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp131,
 117              	@ armwave.c:159:     g_armwave_state.wave_buffer = wave_buffer;
 159:armwave.c     **** 
 118              		.loc 1 159 33 view .LVU11
 119 001c 143084E5 		str	r3, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 162:armwave.c     **** 
 120              		.loc 1 162 5 is_stmt 1 view .LVU12
 165:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 121              		.loc 1 165 5 view .LVU13
 122              	@ armwave.c:169:     g_armwave_state.size = target_height * target_width;
 169:armwave.c     ****     g_armwave_state.target_width = target_width;
 123              		.loc 1 169 26 is_stmt 0 view .LVU14
 124 0020 0257A0E3 		mov	r5, #524288	@ tmp137,
 125              	@ armwave.c:168:     g_armwave_state.waves = waves;
 168:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 126              		.loc 1 168 27 view .LVU15
 127 0024 4030A0E3 		mov	r3, #64	@ tmp135,
 128              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 129              		.loc 1 178 7 view .LVU16
 130 0028 000050E3 		cmp	r0, #0	@ _4,
 131              	@ armwave.c:166:     g_armwave_state.vscale = target_height / 256;
 166:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 132              		.loc 1 166 28 view .LVU17
 133 002c 1CC084E5 		str	ip, [r4, #28]	@ tmp131, g_armwave_state.vscale
 134              	@ armwave.c:165:     g_armwave_state.xstride = target_height;
 165:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 135              		.loc 1 165 29 view .LVU18
 136 0030 181084E5 		str	r1, [r4, #24]	@ tmp129, g_armwave_state.xstride
 166:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 137              		.loc 1 166 5 is_stmt 1 view .LVU19
 167:armwave.c     ****     g_armwave_state.waves = waves;
 138              		.loc 1 167 5 view .LVU20
 139              	@ armwave.c:171:     g_armwave_state.target_height = target_height;
 171:armwave.c     **** 
 140              		.loc 1 171 35 is_stmt 0 view .LVU21
 141 0034 381084E5 		str	r1, [r4, #56]	@ tmp129, g_armwave_state.target_height
 142              	@ armwave.c:167:     g_armwave_state.wave_stride = wave_stride;
 167:armwave.c     ****     g_armwave_state.waves = waves;
 143              		.loc 1 167 33 view .LVU22
 144 0038 202084E5 		str	r2, [r4, #32]	@ tmp133, g_armwave_state.wave_stride
 168:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 145              		.loc 1 168 5 is_stmt 1 view .LVU23
 146              	@ armwave.c:170:     g_armwave_state.target_width = target_width;
 170:armwave.c     ****     g_armwave_state.target_height = target_height;
 147              		.loc 1 170 34 is_stmt 0 view .LVU24
 148 003c 342084E5 		str	r2, [r4, #52]	@ tmp133, g_armwave_state.target_width
 149              	@ armwave.c:168:     g_armwave_state.waves = waves;
 168:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 150              		.loc 1 168 27 view .LVU25
 151 0040 243084E5 		str	r3, [r4, #36]	@ tmp135, g_armwave_state.waves
 169:armwave.c     ****     g_armwave_state.target_width = target_width;
 152              		.loc 1 169 5 is_stmt 1 view .LVU26
 153              	@ armwave.c:176:     g_armwave_state.slice_height = 64;  
 176:armwave.c     **** 
 154              		.loc 1 176 34 is_stmt 0 view .LVU27
 155 0044 283084E5 		str	r3, [r4, #40]	@ tmp135, g_armwave_state.slice_height
 156              	@ armwave.c:169:     g_armwave_state.size = target_height * target_width;
 169:armwave.c     ****     g_armwave_state.target_width = target_width;
 157              		.loc 1 169 26 view .LVU28
 158 0048 305084E5 		str	r5, [r4, #48]	@ tmp137, g_armwave_state.size
 170:armwave.c     ****     g_armwave_state.target_height = target_height;
 159              		.loc 1 170 5 is_stmt 1 view .LVU29
 171:armwave.c     **** 
 160              		.loc 1 171 5 view .LVU30
 176:armwave.c     **** 
 161              		.loc 1 176 5 view .LVU31
 162              		.loc 1 178 5 view .LVU32
 163              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 164              		.loc 1 178 7 is_stmt 0 view .LVU33
 165 004c 0100000A 		beq	.L2		@,
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 166              		.loc 1 179 9 is_stmt 1 view .LVU34
 167 0050 FEFFFFEB 		bl	free		@
 168              	.LVL1:
 169 0054 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_1, g_armwave_state.size
 170              	.L2:
 180:armwave.c     **** 
 181:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 171              		.loc 1 181 5 view .LVU35
 172              	@ armwave.c:181:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 173              		.loc 1 181 34 is_stmt 0 view .LVU36
 174 0058 0110A0E3 		mov	r1, #1	@,
 175 005c 0500A0E1 		mov	r0, r5	@, prephitmp_1
 176 0060 FEFFFFEB 		bl	calloc		@
 177              	.LVL2:
 178              	@ armwave.c:183:     g_armwave_state.ch1_color.g = 0.7f;
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 179              		.loc 1 183 33 view .LVU37
 180 0064 A8209FE5 		ldr	r2, .L12+8	@ tmp151,
 181              	@ armwave.c:184:     g_armwave_state.ch1_color.b = 0.1f;
 184:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 182              		.loc 1 184 33 view .LVU38
 183 0068 A8309FE5 		ldr	r3, .L12+12	@ tmp153,
 184              	@ armwave.c:182:     g_armwave_state.ch1_color.r = 1.0f;
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 185              		.loc 1 182 33 view .LVU39
 186 006c FE15A0E3 		mov	r1, #1065353216	@ tmp149,
 187 0070 401084E5 		str	r1, [r4, #64]	@ float	@ tmp149, g_armwave_state.ch1_color.r
 188              	@ armwave.c:183:     g_armwave_state.ch1_color.g = 0.7f;
 183:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 189              		.loc 1 183 33 view .LVU40
 190 0074 442084E5 		str	r2, [r4, #68]	@ float	@ tmp151, g_armwave_state.ch1_color.g
 191              	@ armwave.c:184:     g_armwave_state.ch1_color.b = 0.1f;
 192              		.loc 1 184 33 view .LVU41
 193 0078 483084E5 		str	r3, [r4, #72]	@ float	@ tmp153, g_armwave_state.ch1_color.b
 194              	@ armwave.c:186:     assert(g_armwave_state.ch1_buffer != NULL);
 185:armwave.c     **** 
 186:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 195              		.loc 1 186 5 view .LVU42
 196 007c 000050E3 		cmp	r0, #0	@ tmp146,
 197              	@ armwave.c:181:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 181:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 198              		.loc 1 181 32 view .LVU43
 199 0080 040084E5 		str	r0, [r4, #4]	@ tmp146, g_armwave_state.ch1_buffer
 182:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 200              		.loc 1 182 5 is_stmt 1 view .LVU44
 183:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 201              		.loc 1 183 5 view .LVU45
 184:armwave.c     **** 
 202              		.loc 1 184 5 view .LVU46
 203              		.loc 1 186 5 view .LVU47
 204 0084 1600000A 		beq	.L10		@,
 187:armwave.c     **** 
 188:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 189:armwave.c     ****     length = end_point - start_point;
 205              		.loc 1 189 5 view .LVU48
 206              	.LVL3:
 190:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 207              		.loc 1 190 5 view .LVU49
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 208              		.loc 1 191 5 view .LVU50
 209              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210              		.loc 1 191 60 is_stmt 0 view .LVU51
 211 0088 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp174, g_armwave_state.slice_height
 212              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 213              		.loc 1 192 40 view .LVU52
 214 008c 010AA0E3 		mov	r0, #4096	@,
 215              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 216              		.loc 1 191 60 view .LVU53
 217 0090 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp159, tmp174
 218              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 219              		.loc 1 191 41 view .LVU54
 220 0094 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp161, tmp159
 221 0098 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp161, g_armwave_state.slice_record_height
 222              		.loc 1 192 5 is_stmt 1 view .LVU55
 223              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 224              		.loc 1 192 40 is_stmt 0 view .LVU56
 225 009c FEFFFFEB 		bl	malloc		@
 226              	.LVL4:
 227              	@ armwave.c:194:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 193:armwave.c     **** 
 194:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 228              		.loc 1 194 5 view .LVU57
 229 00a0 000050E3 		cmp	r0, #0	@ tmp162,
 230              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 231              		.loc 1 192 38 view .LVU58
 232 00a4 700084E5 		str	r0, [r4, #112]	@ tmp162, g_armwave_state.xcoord_to_xpixel
 233              		.loc 1 194 5 is_stmt 1 view .LVU59
 234              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 195:armwave.c     **** 
 196:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 235              		.loc 1 196 12 is_stmt 0 view .LVU60
 236 00a8 0030A013 		movne	r3, #0	@ xx,
 237 00ac 02004012 		subne	r0, r0, #2	@ ivtmp.64, tmp162,
 238              	@ armwave.c:194:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 194:armwave.c     **** 
 239              		.loc 1 194 5 view .LVU61
 240 00b0 1000000A 		beq	.L11		@,
 241              	.L5:
 242              	.LVL5:
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 243              		.loc 1 197 9 is_stmt 1 view .LVU62
 244              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 245              		.loc 1 197 74 is_stmt 0 view .LVU63
 246 00b4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 247              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 248              		.loc 1 196 32 view .LVU64
 249 00b8 013083E2 		add	r3, r3, #1	@ xx, xx,
 250              	.LVL6:
 251              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 252              		.loc 1 196 5 view .LVU65
 253 00bc 020B53E3 		cmp	r3, #2048	@ xx,
 254              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 255              		.loc 1 197 74 view .LVU66
 256 00c0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp167, xx
 257              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 258              		.loc 1 197 46 view .LVU67
 259 00c4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp168, tmp167
 260 00c8 902A17EE 		vmov	r2, s15	@ int	@ tmp168, tmp168
 261 00cc B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp168, MEM[base: _20, offset: 0B]
 262              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 263              		.loc 1 196 5 view .LVU68
 264 00d0 F7FFFF1A 		bne	.L5		@,
 198:armwave.c     **** 
 199:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 200:armwave.c     ****     }
 201:armwave.c     **** 
 202:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 265              		.loc 1 202 5 is_stmt 1 view .LVU69
 266              	@ armwave.c:202:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 267              		.loc 1 202 34 is_stmt 0 view .LVU70
 268 00d4 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_1,
 269 00d8 FEFFFFEB 		bl	malloc		@
 270              	.LVL7:
 271              	@ armwave.c:202:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 272              		.loc 1 202 32 view .LVU71
 273 00dc 3C0084E5 		str	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 274              	@ armwave.c:203: }
 203:armwave.c     **** }
 275              		.loc 1 203 1 view .LVU72
 276 00e0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 277              	.LVL8:
 278              	.L10:
 186:armwave.c     **** 
 279              		.loc 1 186 5 is_stmt 1 view .LVU73
 280 00e4 30309FE5 		ldr	r3, .L12+16	@,
 281 00e8 BA20A0E3 		mov	r2, #186	@,
 282 00ec 2C109FE5 		ldr	r1, .L12+20	@,
 283 00f0 2C009FE5 		ldr	r0, .L12+24	@,
 284 00f4 FEFFFFEB 		bl	__assert_fail		@
 285              	.LVL9:
 286              	.L11:
 194:armwave.c     **** 
 287              		.loc 1 194 5 view .LVU74
 288 00f8 1C309FE5 		ldr	r3, .L12+16	@,
 289 00fc C220A0E3 		mov	r2, #194	@,
 290 0100 18109FE5 		ldr	r1, .L12+20	@,
 291 0104 1C009FE5 		ldr	r0, .L12+28	@,
 292 0108 FEFFFFEB 		bl	__assert_fail		@
 293              	.LVL10:
 294              	.L13:
 295              		.align	2
 296              	.L12:
 297 010c 00000000 		.word	g_armwave_state
 298 0110 00000000 		.word	test_wave_buffer
 299 0114 3333333F 		.word	1060320051
 300 0118 CDCCCC3D 		.word	1036831949
 301 011c 00000000 		.word	.LANCHOR0
 302 0120 00000000 		.word	.LC0
 303 0124 0C000000 		.word	.LC1
 304 0128 30000000 		.word	.LC2
 305              		.cfi_endproc
 306              	.LFE72:
 308              		.align	2
 309              		.global	test_create_waveform
 310              		.syntax unified
 311              		.arm
 312              		.fpu vfp
 314              	test_create_waveform:
 315              	.LFB57:
  46:armwave.c     ****     float v, mod, noise, xnoise;
 316              		.loc 1 46 1 view -0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 8
 319              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int w, x;
 320              		.loc 1 47 5 view .LVU76
  48:armwave.c     **** 
 321              		.loc 1 48 5 view .LVU77
  50:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 322              		.loc 1 50 5 view .LVU78
 323              	.LVL11:
 324              	@ armwave.c:46: {
  46:armwave.c     ****     float v, mod, noise, xnoise;
 325              		.loc 1 46 1 is_stmt 0 view .LVU79
 326 012c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 327              		.cfi_def_cfa_offset 36
 328              		.cfi_offset 4, -36
 329              		.cfi_offset 5, -32
 330              		.cfi_offset 6, -28
 331              		.cfi_offset 7, -24
 332              		.cfi_offset 8, -20
 333              		.cfi_offset 9, -16
 334              		.cfi_offset 10, -12
 335              		.cfi_offset 11, -8
 336              		.cfi_offset 14, -4
 337 0130 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 338              		.cfi_def_cfa_offset 84
 339              		.cfi_offset 80, -84
 340              		.cfi_offset 81, -80
 341              		.cfi_offset 82, -76
 342              		.cfi_offset 83, -72
 343              		.cfi_offset 84, -68
 344              		.cfi_offset 85, -64
 345              		.cfi_offset 86, -60
 346              		.cfi_offset 87, -56
 347              		.cfi_offset 88, -52
 348              		.cfi_offset 89, -48
 349              		.cfi_offset 90, -44
 350              		.cfi_offset 91, -40
 351 0134 5C819FE5 		ldr	r8, .L33+40	@ _75,
 352              	@ armwave.c:51:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  51:armwave.c     ****         //mod = 1.0f;
 353              		.loc 1 51 33 view .LVU80
 354 0138 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 355 013c 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.80, _75,
 356              	@ armwave.c:51:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  51:armwave.c     ****         //mod = 1.0f;
 357              		.loc 1 51 13 view .LVU81
 358 0140 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 359              	@ armwave.c:55:             noise  = ((rand() & 0xffff) / 100000.0f);
  55:armwave.c     ****             noise *= noise;
 360              		.loc 1 55 20 view .LVU82
 361 0144 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 362              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 363              		.loc 1 66 29 view .LVU83
 364 0148 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 365              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 366              		.loc 1 66 33 view .LVU84
 367 014c 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 368              	@ armwave.c:64:             xnoise = (rand() & 0xffff) / 6553500.0f;
  64:armwave.c     **** 
 369              		.loc 1 64 20 view .LVU85
 370 0150 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 371 0154 02B886E2 		add	fp, r6, #131072	@ _81,,
 372 0158 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 373              	@ armwave.c:46: {
  46:armwave.c     ****     float v, mod, noise, xnoise;
 374              		.loc 1 46 1 view .LVU86
 375 015c 0CD04DE2 		sub	sp, sp, #12	@,,
 376              		.cfi_def_cfa_offset 96
 377 0160 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 378 0164 0F6086E2 		add	r6, r6, #15	@ ivtmp.80, ivtmp.80,
 379 0168 008068E2 		rsb	r8, r8, #0	@ ivtmp.83, _75
 380              	@ armwave.c:50:     for(w = 0; w < TEST_NWAVES; w++) {
  50:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 381              		.loc 1 50 11 view .LVU87
 382 016c 0090A0E3 		mov	r9, #0	@ w,
 383              	.LVL12:
 384              	.L20:
  51:armwave.c     ****         //mod = 1.0f;
 385              		.loc 1 51 9 is_stmt 1 view .LVU88
 386              	@ armwave.c:51:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  51:armwave.c     ****         //mod = 1.0f;
 387              		.loc 1 51 24 is_stmt 0 view .LVU89
 388 0170 909A07EE 		vmov	s15, r9	@ int	@ w, w
 389              	@ armwave.c:51:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  51:armwave.c     ****         //mod = 1.0f;
 390              		.loc 1 51 48 view .LVU90
 391 0174 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 392              	@ armwave.c:51:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  51:armwave.c     ****         //mod = 1.0f;
 393              		.loc 1 51 13 view .LVU91
 394 0178 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 395              	@ armwave.c:63:             noise += 1.0f;
  63:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 396              		.loc 1 63 19 view .LVU92
 397 017c 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 398              	@ armwave.c:51:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  51:armwave.c     ****         //mod = 1.0f;
 399              		.loc 1 51 24 view .LVU93
 400 0180 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 401              	@ armwave.c:68:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  68:armwave.c     ****         }
 402              		.loc 1 68 58 view .LVU94
 403 0184 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 404 0188 025B46E2 		sub	r5, r6, #2048	@ ivtmp.73, ivtmp.80,
 405 018c 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.83,
 406              	@ armwave.c:51:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  51:armwave.c     ****         //mod = 1.0f;
 407              		.loc 1 51 33 view .LVU95
 408 0190 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 409              	@ armwave.c:51:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  51:armwave.c     ****         //mod = 1.0f;
 410              		.loc 1 51 13 view .LVU96
 411 0194 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 412              	.LVL13:
  54:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 413              		.loc 1 54 9 is_stmt 1 view .LVU97
  54:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 414              		.loc 1 54 9 is_stmt 0 view .LVU98
 415 0198 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 416              	.LVL14:
 417              	.L19:
 418              	@ armwave.c:55:             noise  = ((rand() & 0xffff) / 100000.0f);
  55:armwave.c     ****             noise *= noise;
 419              		.loc 1 55 24 view .LVU99
 420 019c FEFFFFEB 		bl	rand		@
 421              	.LVL15:
 422 01a0 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.73
 423              	.LVL16:
  55:armwave.c     ****             noise *= noise;
 424              		.loc 1 55 13 is_stmt 1 view .LVU100
 425              	@ armwave.c:55:             noise  = ((rand() & 0xffff) / 100000.0f);
  55:armwave.c     ****             noise *= noise;
 426              		.loc 1 55 31 is_stmt 0 view .LVU101
 427 01a4 7000FFE6 		uxth	r0, r0	@ tmp163,
 428              	@ armwave.c:55:             noise  = ((rand() & 0xffff) / 100000.0f);
  55:armwave.c     ****             noise *= noise;
 429              		.loc 1 55 41 view .LVU102
 430 01a8 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 431 01ac E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 432              	@ armwave.c:55:             noise  = ((rand() & 0xffff) / 100000.0f);
  55:armwave.c     ****             noise *= noise;
 433              		.loc 1 55 20 view .LVU103
 434 01b0 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 435              	.LVL17:
  56:armwave.c     ****             noise *= noise;
 436              		.loc 1 56 13 is_stmt 1 view .LVU104
 437              	@ armwave.c:56:             noise *= noise;
  56:armwave.c     ****             noise *= noise;
 438              		.loc 1 56 19 is_stmt 0 view .LVU105
 439 01b4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 440              	.LVL18:
  57:armwave.c     ****             noise *= noise;
 441              		.loc 1 57 13 is_stmt 1 view .LVU106
 442              	@ armwave.c:57:             noise *= noise;
  57:armwave.c     ****             noise *= noise;
 443              		.loc 1 57 19 is_stmt 0 view .LVU107
 444 01b8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 445              	.LVL19:
  58:armwave.c     **** 
 446              		.loc 1 58 13 is_stmt 1 view .LVU108
 447              	@ armwave.c:58:             noise *= noise;
  58:armwave.c     **** 
 448              		.loc 1 58 19 is_stmt 0 view .LVU109
 449 01bc A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 450              	.LVL20:
  60:armwave.c     ****                 noise = -noise;
 451              		.loc 1 60 13 is_stmt 1 view .LVU110
 452              	@ armwave.c:60:             if((rand() & 0xffff) > 0x7fff)
  60:armwave.c     ****                 noise = -noise;
 453              		.loc 1 60 17 is_stmt 0 view .LVU111
 454 01c0 FEFFFFEB 		bl	rand		@
 455              	.LVL21:
  61:armwave.c     **** 
 456              		.loc 1 61 17 is_stmt 1 view .LVU112
 457              	@ armwave.c:60:             if((rand() & 0xffff) > 0x7fff)
  60:armwave.c     ****                 noise = -noise;
 458              		.loc 1 60 15 is_stmt 0 view .LVU113
 459 01c4 020910E3 		tst	r0, #32768	@,
 460              	@ armwave.c:61:                 noise = -noise;
  61:armwave.c     **** 
 461              		.loc 1 61 23 view .LVU114
 462 01c8 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 463              	.LVL22:
  63:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 464              		.loc 1 63 13 is_stmt 1 view .LVU115
  64:armwave.c     **** 
 465              		.loc 1 64 13 view .LVU116
 466              	@ armwave.c:64:             xnoise = (rand() & 0xffff) / 6553500.0f;
  64:armwave.c     **** 
 467              		.loc 1 64 23 is_stmt 0 view .LVU117
 468 01cc FEFFFFEB 		bl	rand		@
 469              	.LVL23:
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 470              		.loc 1 66 13 is_stmt 1 view .LVU118
 471              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 472              		.loc 1 66 29 is_stmt 0 view .LVU119
 473 01d0 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 474 01d4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 475 01d8 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 476              	@ armwave.c:64:             xnoise = (rand() & 0xffff) / 6553500.0f;
  64:armwave.c     **** 
 477              		.loc 1 64 30 view .LVU120
 478 01dc 7000FFE6 		uxth	r0, r0	@ tmp173,
 479              	.LVL24:
 480              	@ armwave.c:64:             xnoise = (rand() & 0xffff) / 6553500.0f;
  64:armwave.c     **** 
 481              		.loc 1 64 40 view .LVU121
 482 01e0 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 483 01e4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 484              	@ armwave.c:64:             xnoise = (rand() & 0xffff) / 6553500.0f;
  64:armwave.c     **** 
 485              		.loc 1 64 20 view .LVU122
 486 01e8 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 487              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 488              		.loc 1 66 60 view .LVU123
 489 01ec 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 490              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 491              		.loc 1 66 18 view .LVU124
 492 01f0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 493 01f4 FEFFFFEB 		bl	sin		@
 494              	.LVL25:
  68:armwave.c     ****         }
 495              		.loc 1 68 13 is_stmt 1 view .LVU125
 496              	@ armwave.c:63:             noise += 1.0f;
  63:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 497              		.loc 1 63 19 is_stmt 0 view .LVU126
 498 01f8 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 499              	@ armwave.c:68:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  68:armwave.c     ****         }
 500              		.loc 1 68 58 view .LVU127
 501 01fc 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 502              	@ armwave.c:68:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  68:armwave.c     ****         }
 503              		.loc 1 68 56 view .LVU128
 504 0200 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 505 0204 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 506              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 507              		.loc 1 66 77 view .LVU129
 508 0208 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 509              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 510              		.loc 1 66 70 view .LVU130
 511 020c 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 512              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 513              		.loc 1 66 77 view .LVU131
 514 0210 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 515              	@ armwave.c:66:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  66:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 516              		.loc 1 66 15 view .LVU132
 517 0214 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 518              	@ armwave.c:68:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  68:armwave.c     ****         }
 519              		.loc 1 68 58 view .LVU133
 520 0218 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 521 021c 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 522 0220 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 523 0224 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 524 0228 050000DA 		ble	.L16		@,
 525              	@ armwave.c:68:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  68:armwave.c     ****         }
 526              		.loc 1 68 56 discriminator 1 view .LVU134
 527 022c C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 528 0230 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 529 0234 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 530 0238 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 531 023c 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 532 0240 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 533              	.L16:
 534              	@ armwave.c:68:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  68:armwave.c     ****         }
 535              		.loc 1 68 56 discriminator 12 view .LVU135
 536 0244 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 537              	.LVL26:
 538              	@ armwave.c:54:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  54:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 539              		.loc 1 54 9 discriminator 12 view .LVU136
 540 0248 060055E1 		cmp	r5, r6	@ ivtmp.73, ivtmp.80
 541 024c D2FFFF1A 		bne	.L19		@,
 542 0250 026B85E2 		add	r6, r5, #2048	@ ivtmp.80, ivtmp.73,
 543              	.LVL27:
 544              	@ armwave.c:50:     for(w = 0; w < TEST_NWAVES; w++) {
  50:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 545              		.loc 1 50 5 discriminator 2 view .LVU137
 546 0254 0B0056E1 		cmp	r6, fp	@ ivtmp.80, _81
 547              	@ armwave.c:50:     for(w = 0; w < TEST_NWAVES; w++) {
  50:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 548              		.loc 1 50 34 discriminator 2 view .LVU138
 549 0258 019089E2 		add	r9, r9, #1	@ w, w,
 550              	.LVL28:
  50:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 551              		.loc 1 50 34 discriminator 2 view .LVU139
 552 025c 028B48E2 		sub	r8, r8, #2048	@ ivtmp.83, ivtmp.83,
 553              	@ armwave.c:50:     for(w = 0; w < TEST_NWAVES; w++) {
  50:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 554              		.loc 1 50 5 discriminator 2 view .LVU140
 555 0260 C2FFFF1A 		bne	.L20		@,
 556              	@ armwave.c:71: }
  71:armwave.c     **** 
 557              		.loc 1 71 1 view .LVU141
 558 0264 0CD08DE2 		add	sp, sp, #12	@,,
 559              		.cfi_def_cfa_offset 84
 560              		@ sp needed	@
 561 0268 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 562              		.cfi_restore 90
 563              		.cfi_restore 91
 564              		.cfi_restore 88
 565              		.cfi_restore 89
 566              		.cfi_restore 86
 567              		.cfi_restore 87
 568              		.cfi_restore 84
 569              		.cfi_restore 85
 570              		.cfi_restore 82
 571              		.cfi_restore 83
 572              		.cfi_restore 80
 573              		.cfi_restore 81
 574              		.cfi_def_cfa_offset 36
 575              	.LVL29:
  71:armwave.c     **** 
 576              		.loc 1 71 1 view .LVU142
 577 026c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 578              	.LVL30:
 579              	.L34:
  71:armwave.c     **** 
 580              		.loc 1 71 1 view .LVU143
 581              		.align	2
 582              	.L33:
 583 0270 0000803C 		.word	1015021568
 584 0274 0000003F 		.word	1056964608
 585 0278 0050C347 		.word	1203982336
 586 027c C3F5C840 		.word	1086911939
 587 0280 0000003A 		.word	973078528
 588 0284 38FFC74A 		.word	1254620984
 589 0288 0000803F 		.word	1065353216
 590 028c 0000FE42 		.word	1123942400
 591 0290 00000043 		.word	1124073472
 592 0294 00007F43 		.word	1132396544
 593 0298 00000000 		.word	test_wave_buffer
 594 029c 00000000 		.word	.LANCHOR1
 595              		.cfi_endproc
 596              	.LFE57:
 598              		.align	2
 599              		.global	test_create_gamma
 600              		.syntax unified
 601              		.arm
 602              		.fpu vfp
 604              	test_create_gamma:
 605              	.LFB58:
  77:armwave.c     ****     int i;
 606              		.loc 1 77 1 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
  78:armwave.c     ****     float gamma = 0.90f;
 610              		.loc 1 78 5 view .LVU145
  79:armwave.c     **** 
 611              		.loc 1 79 5 view .LVU146
 612              	.LVL31:
  81:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 613              		.loc 1 81 5 view .LVU147
 614              	@ armwave.c:77: {
  77:armwave.c     ****     int i;
 615              		.loc 1 77 1 is_stmt 0 view .LVU148
 616 02a0 70402DE9 		push	{r4, r5, r6, lr}	@
 617              		.cfi_def_cfa_offset 16
 618              		.cfi_offset 4, -16
 619              		.cfi_offset 5, -12
 620              		.cfi_offset 6, -8
 621              		.cfi_offset 14, -4
 622 02a4 068B2DED 		vpush.64	{d8, d9, d10}	@
 623              		.cfi_def_cfa_offset 40
 624              		.cfi_offset 80, -40
 625              		.cfi_offset 81, -36
 626              		.cfi_offset 82, -32
 627              		.cfi_offset 83, -28
 628              		.cfi_offset 84, -24
 629              		.cfi_offset 85, -20
 630 02a8 64409FE5 		ldr	r4, .L39+20	@ ivtmp.91,
 631              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 632              		.loc 1 82 32 view .LVU149
 633 02ac 17AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 634              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 635              		.loc 1 82 26 view .LVU150
 636 02b0 129B9FED 		vldr.64	d9, .L39	@ tmp135,
 637              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 638              		.loc 1 82 49 view .LVU151
 639 02b4 138B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 640 02b8 015084E2 		add	r5, r4, #1	@ _25, ivtmp.91,
 641 02bc 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.91,
 642 02c0 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 643              	.LVL32:
 644              	.L36:
  82:armwave.c     ****     }
 645              		.loc 1 82 9 is_stmt 1 discriminator 3 view .LVU152
 646              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 647              		.loc 1 82 32 is_stmt 0 discriminator 3 view .LVU153
 648 02c4 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.91
 649              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 650              		.loc 1 82 26 discriminator 3 view .LVU154
 651 02c8 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 652              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 653              		.loc 1 82 32 discriminator 3 view .LVU155
 654 02cc 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 655 02d0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 656 02d4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 657              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 658              		.loc 1 82 26 discriminator 3 view .LVU156
 659 02d8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 660 02dc FEFFFFEB 		bl	pow		@
 661              	.LVL33:
 662              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 663              		.loc 1 82 49 discriminator 3 view .LVU157
 664 02e0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 665              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 666              		.loc 1 82 24 discriminator 3 view .LVU158
 667 02e4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 668 02e8 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 669 02ec 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 670              	.LVL34:
 671              	@ armwave.c:81:     for(i = 0; i < 256; i++) {
  81:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 672              		.loc 1 81 5 discriminator 3 view .LVU159
 673 02f0 060054E1 		cmp	r4, r6	@ ivtmp.91, _26
 674 02f4 F2FFFF1A 		bne	.L36		@,
 675              	@ armwave.c:84: }
  84:armwave.c     **** 
 676              		.loc 1 84 1 view .LVU160
 677 02f8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 678              		.cfi_restore 84
 679              		.cfi_restore 85
 680              		.cfi_restore 82
 681              		.cfi_restore 83
 682              		.cfi_restore 80
 683              		.cfi_restore 81
 684              		.cfi_def_cfa_offset 16
 685 02fc 7080BDE8 		pop	{r4, r5, r6, pc}	@
 686              	.LVL35:
 687              	.L40:
  84:armwave.c     **** 
 688              		.loc 1 84 1 view .LVU161
 689              		.align	3
 690              	.L39:
 691 0300 000000C0 		.word	-1073741824
 692 0304 CCCCEC3F 		.word	1072483532
 693 0308 00000000 		.word	0
 694 030c 00E06F40 		.word	1081073664
 695 0310 00007F43 		.word	1132396544
 696 0314 FFFFFFFF 		.word	gamma_table-1
 697              		.cfi_endproc
 698              	.LFE58:
 700              		.align	2
 701              		.global	render_nonaa_to_buffer_1ch_slice
 702              		.syntax unified
 703              		.arm
 704              		.fpu vfp
 706              	render_nonaa_to_buffer_1ch_slice:
 707              	.LVL36:
 708              	.LFB59:
  94:armwave.c     ****     int yy, ys, w, scale_value;
 709              		.loc 1 94 1 is_stmt 1 view -0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
 712              		@ frame_needed = 0, uses_anonymous_args = 0
  95:armwave.c     ****     uint32_t value, word;
 713              		.loc 1 95 5 view .LVU163
  96:armwave.c     ****     uint8_t *wave_base;
 714              		.loc 1 96 5 view .LVU164
  97:armwave.c     ****     uint8_t *write_buffer_base;
 715              		.loc 1 97 5 view .LVU165
  98:armwave.c     ****     uint8_t *write_buffer;
 716              		.loc 1 98 5 view .LVU166
  99:armwave.c     ****     
 717              		.loc 1 99 5 view .LVU167
 101:armwave.c     **** 
 718              		.loc 1 101 5 view .LVU168
 719              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 720              		.loc 1 101 40 is_stmt 0 view .LVU169
 721 0318 F4209FE5 		ldr	r2, .L53	@ tmp257,
 722              	@ armwave.c:94: {
  94:armwave.c     ****     int yy, ys, w, scale_value;
 723              		.loc 1 94 1 view .LVU170
 724 031c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 725              		.cfi_def_cfa_offset 36
 726              		.cfi_offset 4, -36
 727              		.cfi_offset 5, -32
 728              		.cfi_offset 6, -28
 729              		.cfi_offset 7, -24
 730              		.cfi_offset 8, -20
 731              		.cfi_offset 9, -16
 732              		.cfi_offset 10, -12
 733              		.cfi_offset 11, -8
 734              		.cfi_offset 14, -4
 735              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 736              		.loc 1 104 5 view .LVU171
 737 0320 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 738              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 739              		.loc 1 101 63 view .LVU172
 740 0324 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 741              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 742              		.loc 1 104 5 view .LVU173
 743 0328 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 744              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 745              		.loc 1 101 40 view .LVU174
 746 032c 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 747              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 748              		.loc 1 101 63 view .LVU175
 749 0330 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 750              	.LVL37:
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 751              		.loc 1 104 5 is_stmt 1 view .LVU176
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 752              		.loc 1 104 5 is_stmt 0 view .LVU177
 753 0334 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 754 0338 000051E3 		cmp	r1, #0	@ height,
 755 033c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 756 0340 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 757              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 758              		.loc 1 104 11 view .LVU178
 759 0344 0080A0E3 		mov	r8, #0	@ w,
 760              	.LVL38:
 761              	.L45:
 105:armwave.c     **** 
 762              		.loc 1 105 9 is_stmt 1 view .LVU179
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 763              		.loc 1 115 9 view .LVU180
 764              	@ armwave.c:105:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 105:armwave.c     **** 
 765              		.loc 1 105 64 is_stmt 0 view .LVU181
 766 0348 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 767 034c 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 768              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 769              		.loc 1 115 16 view .LVU182
 770 0350 0000A0E3 		mov	r0, #0	@ yy,
 771 0354 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 772 0358 037087E0 		add	r7, r7, r3	@ ivtmp.97, g_armwave_state.wave_buffer, tmp195
 773              	.LVL39:
 774              	.L44:
 130:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 775              		.loc 1 130 13 is_stmt 1 view .LVU183
 776              	@ armwave.c:130:             word = *(uint32_t*)(wave_base + yy);
 130:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 777              		.loc 1 130 18 is_stmt 0 view .LVU184
 778 035c 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 779              	.LVL40:
 134:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 780              		.loc 1 134 13 is_stmt 1 view .LVU185
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 781              		.loc 1 135 14 view .LVU186
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 782              		.loc 1 136 14 view .LVU187
 137:armwave.c     ****             	word >>= 8;
 783              		.loc 1 137 14 view .LVU188
 784              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 785              		.loc 1 135 42 is_stmt 0 view .LVU189
 786 0360 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 787              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 788              		.loc 1 136 60 view .LVU190
 789 0364 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 790              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 791              		.loc 1 135 34 view .LVU191
 792 0368 73E0EFE6 		uxtb	lr, r3	@ word, word
 793              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 794              		.loc 1 138 19 view .LVU192
 795 036c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 796              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 797              		.loc 1 137 44 view .LVU193
 798 0370 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 799              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 800              		.loc 1 135 34 view .LVU194
 801 0374 7440EFE6 		uxtb	r4, r4	@ word, word
 802              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 803              		.loc 1 137 44 view .LVU195
 804 0378 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 805              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 806              		.loc 1 136 60 view .LVU196
 807 037c 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 808              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 809              		.loc 1 138 19 view .LVU197
 810 0380 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 811              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 812              		.loc 1 137 44 view .LVU198
 813 0384 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 814              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 815              		.loc 1 135 34 view .LVU199
 816 0388 7EE0EFE6 		uxtb	lr, lr	@ word, word
 817              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 818              		.loc 1 138 19 view .LVU200
 819 038c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 820              	.LVL41:
 821              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 822              		.loc 1 137 44 view .LVU201
 823 0390 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 824 0394 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 825              	.LVL42:
 138:armwave.c     ****     		}
 826              		.loc 1 138 14 is_stmt 1 view .LVU202
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 827              		.loc 1 135 14 view .LVU203
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 828              		.loc 1 136 14 view .LVU204
 137:armwave.c     ****             	word >>= 8;
 829              		.loc 1 137 14 view .LVU205
 830              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 831              		.loc 1 135 42 is_stmt 0 view .LVU206
 832 0398 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 833              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 834              		.loc 1 136 60 view .LVU207
 835 039c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 836              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 837              		.loc 1 137 44 view .LVU208
 838 03a0 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 839              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 840              		.loc 1 136 60 view .LVU209
 841 03a4 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 842              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 843              		.loc 1 137 44 view .LVU210
 844 03a8 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 845              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 846              		.loc 1 136 60 view .LVU211
 847 03ac 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 848              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 849              		.loc 1 115 37 view .LVU212
 850 03b0 040080E2 		add	r0, r0, #4	@ yy, yy,
 851              	.LVL43:
 852              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 853              		.loc 1 137 44 view .LVU213
 854 03b4 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 855              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 856              		.loc 1 115 9 view .LVU214
 857 03b8 000051E1 		cmp	r1, r0	@ height, yy
 858              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 859              		.loc 1 137 44 view .LVU215
 860 03bc 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 861 03c0 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 862              	.LVL44:
 138:armwave.c     ****     		}
 863              		.loc 1 138 14 is_stmt 1 view .LVU216
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 864              		.loc 1 135 14 view .LVU217
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 865              		.loc 1 136 14 view .LVU218
 137:armwave.c     ****             	word >>= 8;
 866              		.loc 1 137 14 view .LVU219
 867              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 868              		.loc 1 135 42 is_stmt 0 view .LVU220
 869 03c4 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 870              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 871              		.loc 1 136 60 view .LVU221
 872 03c8 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 873              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 874              		.loc 1 137 44 view .LVU222
 875 03cc 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 876 03d0 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 877 03d4 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 878 03d8 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 879 03dc 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 138:armwave.c     ****     		}
 880              		.loc 1 138 14 is_stmt 1 view .LVU223
 881              	.LVL45:
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 882              		.loc 1 135 14 view .LVU224
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 883              		.loc 1 136 14 view .LVU225
 137:armwave.c     ****             	word >>= 8;
 884              		.loc 1 137 14 view .LVU226
 885              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 886              		.loc 1 135 42 is_stmt 0 view .LVU227
 887 03e0 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 888              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 889              		.loc 1 136 60 view .LVU228
 890 03e4 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 891              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 892              		.loc 1 137 44 view .LVU229
 893 03e8 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 894 03ec 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 895 03f0 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 896 03f4 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 897 03f8 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 138:armwave.c     ****     		}
 898              		.loc 1 138 14 is_stmt 1 view .LVU230
 899              	.LVL46:
 900              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 901              		.loc 1 115 9 is_stmt 0 view .LVU231
 902 03fc D6FFFF8A 		bhi	.L44		@,
 903              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 904              		.loc 1 104 5 view .LVU232
 905 0400 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 906              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 907              		.loc 1 104 44 view .LVU233
 908 0404 018088E2 		add	r8, r8, #1	@ w, w,
 909              	.LVL47:
 910              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 911              		.loc 1 104 5 view .LVU234
 912 0408 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 913 040c CDFFFF3A 		bcc	.L45		@,
 914 0410 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 915              	.L54:
 916              		.align	2
 917              	.L53:
 918 0414 00000000 		.word	g_armwave_state
 919              		.cfi_endproc
 920              	.LFE59:
 922              		.align	2
 923              		.global	armwave_init
 924              		.syntax unified
 925              		.arm
 926              		.fpu vfp
 928              	armwave_init:
 929              	.LFB60:
 147:armwave.c     ****     g_armwave_state.flags = 0;
 930              		.loc 1 147 1 is_stmt 1 view -0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 148:armwave.c     **** }
 935              		.loc 1 148 5 view .LVU236
 936              	@ armwave.c:148:     g_armwave_state.flags = 0;
 148:armwave.c     **** }
 937              		.loc 1 148 27 is_stmt 0 view .LVU237
 938 0418 08309FE5 		ldr	r3, .L56	@ tmp110,
 939 041c 0020A0E3 		mov	r2, #0	@ tmp111,
 940 0420 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 941              	@ armwave.c:149: }
 149:armwave.c     **** 
 942              		.loc 1 149 1 view .LVU238
 943 0424 1EFF2FE1 		bx	lr	@
 944              	.L57:
 945              		.align	2
 946              	.L56:
 947 0428 00000000 		.word	g_armwave_state
 948              		.cfi_endproc
 949              	.LFE60:
 951              		.align	2
 952              		.global	armwave_setup_render
 953              		.syntax unified
 954              		.arm
 955              		.fpu vfp
 957              	armwave_setup_render:
 958              	.LVL48:
 959              	.LFB61:
 152:armwave.c     ****     uint32_t length, xx;
 960              		.loc 1 152 1 is_stmt 1 view -0
 961              		.cfi_startproc
 962              		@ args = 16, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 153:armwave.c     ****     float points_per_pixel;
 964              		.loc 1 153 5 view .LVU240
 154:armwave.c     **** 
 965              		.loc 1 154 5 view .LVU241
 156:armwave.c     **** 
 966              		.loc 1 156 5 view .LVU242
 967              	@ armwave.c:152: {
 152:armwave.c     ****     uint32_t length, xx;
 968              		.loc 1 152 1 is_stmt 0 view .LVU243
 969 042c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 970              		.cfi_def_cfa_offset 32
 971              		.cfi_offset 4, -32
 972              		.cfi_offset 5, -28
 973              		.cfi_offset 6, -24
 974              		.cfi_offset 7, -20
 975              		.cfi_offset 8, -16
 976              		.cfi_offset 9, -12
 977              		.cfi_offset 10, -8
 978              		.cfi_offset 14, -4
 979              	@ armwave.c:156:     assert(start_point < end_point);
 156:armwave.c     **** 
 980              		.loc 1 156 5 view .LVU244
 981 0430 020051E1 		cmp	r1, r2	@ start_point, end_point
 982              	@ armwave.c:152: {
 152:armwave.c     ****     uint32_t length, xx;
 983              		.loc 1 152 1 view .LVU245
 984 0434 028B2DED 		vpush.64	{d8}	@
 985              		.cfi_def_cfa_offset 40
 986              		.cfi_offset 80, -40
 987              		.cfi_offset 81, -36
 988              	@ armwave.c:152: {
 152:armwave.c     ****     uint32_t length, xx;
 989              		.loc 1 152 1 view .LVU246
 990 0438 0190A0E1 		mov	r9, r1	@ start_point, start_point
 991 043c 0260A0E1 		mov	r6, r2	@ end_point, end_point
 992 0440 28109DE5 		ldr	r1, [sp, #40]	@ wave_stride, wave_stride
 993              	.LVL49:
 152:armwave.c     ****     uint32_t length, xx;
 994              		.loc 1 152 1 view .LVU247
 995 0444 2C809DE5 		ldr	r8, [sp, #44]	@ target_width, target_width
 996 0448 30209DE5 		ldr	r2, [sp, #48]	@ target_height, target_height
 997              	.LVL50:
 998              	@ armwave.c:156:     assert(start_point < end_point);
 156:armwave.c     **** 
 999              		.loc 1 156 5 view .LVU248
 1000 044c 3F00002A 		bcs	.L70		@,
 159:armwave.c     **** 
 1001              		.loc 1 159 5 is_stmt 1 view .LVU249
 1002              	@ armwave.c:159:     g_armwave_state.wave_buffer = wave_buffer;
 159:armwave.c     **** 
 1003              		.loc 1 159 33 is_stmt 0 view .LVU250
 1004 0450 4C519FE5 		ldr	r5, .L74+4	@ tmp194,
 1005              	@ armwave.c:162:     assert((target_height % 256) == 0);
 162:armwave.c     **** 
 1006              		.loc 1 162 5 view .LVU251
 1007 0454 FF4012E2 		ands	r4, r2, #255	@ xx, target_height,
 1008              	@ armwave.c:159:     g_armwave_state.wave_buffer = wave_buffer;
 159:armwave.c     **** 
 1009              		.loc 1 159 33 view .LVU252
 1010 0458 140085E5 		str	r0, [r5, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 162:armwave.c     **** 
 1011              		.loc 1 162 5 is_stmt 1 view .LVU253
 1012 045c 4A00001A 		bne	.L71		@,
 165:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1013              		.loc 1 165 5 view .LVU254
 1014              	@ armwave.c:169:     g_armwave_state.size = target_height * target_width;
 169:armwave.c     ****     g_armwave_state.target_width = target_width;
 1015              		.loc 1 169 42 is_stmt 0 view .LVU255
 1016 0460 980207E0 		mul	r7, r8, r2	@ _3, target_width, target_height
 1017              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 178:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1018              		.loc 1 178 23 view .LVU256
 1019 0464 040095E5 		ldr	r0, [r5, #4]	@ _4, g_armwave_state.ch1_buffer
 1020              	.LVL51:
 1021              	@ armwave.c:167:     g_armwave_state.wave_stride = wave_stride;
 167:armwave.c     ****     g_armwave_state.waves = waves;
 1022              		.loc 1 167 33 view .LVU257
 1023 0468 201085E5 		str	r1, [r5, #32]	@ wave_stride, g_armwave_state.wave_stride
 1024              	@ armwave.c:168:     g_armwave_state.waves = waves;
 168:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1025              		.loc 1 168 27 view .LVU258
 1026 046c 243085E5 		str	r3, [r5, #36]	@ waves, g_armwave_state.waves
 1027              	@ armwave.c:166:     g_armwave_state.vscale = target_height / 256;
 166:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1028              		.loc 1 166 44 view .LVU259
 1029 0470 2214A0E1 		lsr	r1, r2, #8	@ tmp152, target_height,
 1030              	@ armwave.c:176:     g_armwave_state.slice_height = 64;  
 176:armwave.c     **** 
 1031              		.loc 1 176 34 view .LVU260
 1032 0474 4030A0E3 		mov	r3, #64	@ tmp159,
 1033              	.LVL52:
 1034              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 178:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1035              		.loc 1 178 7 view .LVU261
 1036 0478 000050E3 		cmp	r0, #0	@ _4,
 1037              	@ armwave.c:165:     g_armwave_state.xstride = target_height;
 165:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1038              		.loc 1 165 29 view .LVU262
 1039 047c 182085E5 		str	r2, [r5, #24]	@ target_height, g_armwave_state.xstride
 166:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1040              		.loc 1 166 5 is_stmt 1 view .LVU263
 1041              	@ armwave.c:170:     g_armwave_state.target_width = target_width;
 170:armwave.c     ****     g_armwave_state.target_height = target_height;
 1042              		.loc 1 170 34 is_stmt 0 view .LVU264
 1043 0480 348085E5 		str	r8, [r5, #52]	@ target_width, g_armwave_state.target_width
 1044              	@ armwave.c:171:     g_armwave_state.target_height = target_height;
 171:armwave.c     **** 
 1045              		.loc 1 171 35 view .LVU265
 1046 0484 382085E5 		str	r2, [r5, #56]	@ target_height, g_armwave_state.target_height
 1047              	@ armwave.c:169:     g_armwave_state.size = target_height * target_width;
 169:armwave.c     ****     g_armwave_state.target_width = target_width;
 1048              		.loc 1 169 26 view .LVU266
 1049 0488 307085E5 		str	r7, [r5, #48]	@ _3, g_armwave_state.size
 1050              	@ armwave.c:166:     g_armwave_state.vscale = target_height / 256;
 166:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1051              		.loc 1 166 28 view .LVU267
 1052 048c 1C1085E5 		str	r1, [r5, #28]	@ tmp152, g_armwave_state.vscale
 167:armwave.c     ****     g_armwave_state.waves = waves;
 1053              		.loc 1 167 5 is_stmt 1 view .LVU268
 168:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1054              		.loc 1 168 5 view .LVU269
 169:armwave.c     ****     g_armwave_state.target_width = target_width;
 1055              		.loc 1 169 5 view .LVU270
 170:armwave.c     ****     g_armwave_state.target_height = target_height;
 1056              		.loc 1 170 5 view .LVU271
 171:armwave.c     **** 
 1057              		.loc 1 171 5 view .LVU272
 176:armwave.c     **** 
 1058              		.loc 1 176 5 view .LVU273
 1059              	@ armwave.c:176:     g_armwave_state.slice_height = 64;  
 176:armwave.c     **** 
 1060              		.loc 1 176 34 is_stmt 0 view .LVU274
 1061 0490 283085E5 		str	r3, [r5, #40]	@ tmp159, g_armwave_state.slice_height
 178:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1062              		.loc 1 178 5 is_stmt 1 view .LVU275
 1063              	@ armwave.c:178:     if(g_armwave_state.ch1_buffer != NULL)
 178:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1064              		.loc 1 178 7 is_stmt 0 view .LVU276
 1065 0494 0100000A 		beq	.L61		@,
 179:armwave.c     **** 
 1066              		.loc 1 179 9 is_stmt 1 view .LVU277
 1067 0498 FEFFFFEB 		bl	free		@
 1068              	.LVL53:
 179:armwave.c     **** 
 1069              		.loc 1 179 9 is_stmt 0 view .LVU278
 1070 049c 307095E5 		ldr	r7, [r5, #48]	@ _3, g_armwave_state.size
 1071              	.L61:
 181:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 1072              		.loc 1 181 5 is_stmt 1 view .LVU279
 1073              	@ armwave.c:181:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 181:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 1074              		.loc 1 181 34 is_stmt 0 view .LVU280
 1075 04a0 0110A0E3 		mov	r1, #1	@,
 1076 04a4 0700A0E1 		mov	r0, r7	@, _3
 1077 04a8 FEFFFFEB 		bl	calloc		@
 1078              	.LVL54:
 1079              	@ armwave.c:182:     g_armwave_state.ch1_color.r = 1.0f;
 182:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 1080              		.loc 1 182 33 view .LVU281
 1081 04ac 3B8ADFED 		vldr.32	s17, .L74	@ tmp165,
 1082              	@ armwave.c:183:     g_armwave_state.ch1_color.g = 0.7f;
 183:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 1083              		.loc 1 183 33 view .LVU282
 1084 04b0 F0209FE5 		ldr	r2, .L74+8	@ tmp167,
 1085              	@ armwave.c:184:     g_armwave_state.ch1_color.b = 0.1f;
 184:armwave.c     **** 
 1086              		.loc 1 184 33 view .LVU283
 1087 04b4 F0309FE5 		ldr	r3, .L74+12	@ tmp169,
 1088              	@ armwave.c:183:     g_armwave_state.ch1_color.g = 0.7f;
 183:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 1089              		.loc 1 183 33 view .LVU284
 1090 04b8 442085E5 		str	r2, [r5, #68]	@ float	@ tmp167, g_armwave_state.ch1_color.g
 1091              	@ armwave.c:182:     g_armwave_state.ch1_color.r = 1.0f;
 182:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 1092              		.loc 1 182 33 view .LVU285
 1093 04bc 108AC5ED 		vstr.32	s17, [r5, #64]	@ tmp165, g_armwave_state.ch1_color.r
 1094              	@ armwave.c:184:     g_armwave_state.ch1_color.b = 0.1f;
 184:armwave.c     **** 
 1095              		.loc 1 184 33 view .LVU286
 1096 04c0 483085E5 		str	r3, [r5, #72]	@ float	@ tmp169, g_armwave_state.ch1_color.b
 1097              	@ armwave.c:186:     assert(g_armwave_state.ch1_buffer != NULL);
 186:armwave.c     **** 
 1098              		.loc 1 186 5 view .LVU287
 1099 04c4 000050E3 		cmp	r0, #0	@ tmp162,
 1100              	@ armwave.c:181:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 181:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 1101              		.loc 1 181 32 view .LVU288
 1102 04c8 040085E5 		str	r0, [r5, #4]	@ tmp162, g_armwave_state.ch1_buffer
 182:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 1103              		.loc 1 182 5 is_stmt 1 view .LVU289
 183:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 1104              		.loc 1 183 5 view .LVU290
 184:armwave.c     **** 
 1105              		.loc 1 184 5 view .LVU291
 186:armwave.c     **** 
 1106              		.loc 1 186 5 view .LVU292
 1107 04cc 2900000A 		beq	.L72		@,
 189:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1108              		.loc 1 189 5 view .LVU293
 1109              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1110              		.loc 1 190 34 is_stmt 0 view .LVU294
 1111 04d0 908A07EE 		vmov	s15, r8	@ int	@ target_width, target_width
 1112              	@ armwave.c:189:     length = end_point - start_point;
 189:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1113              		.loc 1 189 12 view .LVU295
 1114 04d4 096046E0 		sub	r6, r6, r9	@ length, end_point, start_point
 1115              	.LVL55:
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1116              		.loc 1 190 5 is_stmt 1 view .LVU296
 1117              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     **** 
 1118              		.loc 1 192 40 is_stmt 0 view .LVU297
 1119 04d8 8600A0E1 		lsl	r0, r6, #1	@, length,
 1120              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1121              		.loc 1 190 34 view .LVU298
 1122 04dc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp174, target_width
 1123              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1124              		.loc 1 190 31 view .LVU299
 1125 04e0 906A07EE 		vmov	s15, r6	@ int	@ length, length
 1126 04e4 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp173, length
 1127              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1128              		.loc 1 191 60 view .LVU300
 1129 04e8 0A7AD5ED 		vldr.32	s15, [r5, #40]	@ int	@ tmp198, g_armwave_state.slice_height
 1130 04ec 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp177, tmp198
 1131              	@ armwave.c:190:     points_per_pixel = length / ((float)(target_width));
 190:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1132              		.loc 1 190 22 view .LVU301
 1133 04f0 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp173, tmp174
 1134              	.LVL56:
 191:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1135              		.loc 1 191 5 is_stmt 1 view .LVU302
 1136              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1137              		.loc 1 191 60 is_stmt 0 view .LVU303
 1138 04f4 887A67EE 		vmul.f32	s15, s15, s16	@ tmp179, tmp177, points_per_pixel
 1139              	@ armwave.c:191:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 191:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1140              		.loc 1 191 41 view .LVU304
 1141 04f8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp180, tmp179
 1142 04fc 0B7AC5ED 		vstr.32	s15, [r5, #44]	@ int	@ tmp180, g_armwave_state.slice_record_height
 192:armwave.c     **** 
 1143              		.loc 1 192 5 is_stmt 1 view .LVU305
 1144              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     **** 
 1145              		.loc 1 192 40 is_stmt 0 view .LVU306
 1146 0500 FEFFFFEB 		bl	malloc		@
 1147              	.LVL57:
 1148              	@ armwave.c:194:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 194:armwave.c     **** 
 1149              		.loc 1 194 5 view .LVU307
 1150 0504 000050E3 		cmp	r0, #0	@ tmp182,
 1151              	@ armwave.c:192:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     **** 
 1152              		.loc 1 192 38 view .LVU308
 1153 0508 700085E5 		str	r0, [r5, #112]	@ tmp182, g_armwave_state.xcoord_to_xpixel
 194:armwave.c     **** 
 1154              		.loc 1 194 5 is_stmt 1 view .LVU309
 1155 050c 1400000A 		beq	.L73		@,
 1156              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1157              		.loc 1 197 54 is_stmt 0 view .LVU310
 1158 0510 887A88EE 		vdiv.f32	s14, s17, s16	@ _15, tmp165, points_per_pixel
 1159 0514 020040E2 		sub	r0, r0, #2	@ ivtmp.107, tmp182,
 1160              	.L64:
 1161              	.LVL58:
 197:armwave.c     **** 
 1162              		.loc 1 197 9 is_stmt 1 discriminator 3 view .LVU311
 1163              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1164              		.loc 1 197 74 is_stmt 0 discriminator 3 view .LVU312
 1165 0518 904A07EE 		vmov	s15, r4	@ int	@ xx, xx
 1166              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1167              		.loc 1 196 32 discriminator 3 view .LVU313
 1168 051c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1169              	.LVL59:
 1170              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1171              		.loc 1 196 5 discriminator 3 view .LVU314
 1172 0520 040056E1 		cmp	r6, r4	@ length, xx
 1173              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1174              		.loc 1 197 74 discriminator 3 view .LVU315
 1175 0524 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp188, xx
 1176 0528 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp188, _15
 1177              	@ armwave.c:197:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 197:armwave.c     **** 
 1178              		.loc 1 197 46 discriminator 3 view .LVU316
 1179 052c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp190, tmp189
 1180 0530 903A17EE 		vmov	r3, s15	@ int	@ tmp190, tmp190
 1181 0534 B230E0E1 		strh	r3, [r0, #2]!	@ movhi	@ tmp190, MEM[base: _64, offset: 0B]
 1182              	@ armwave.c:196:     for(xx = 0; xx < length; xx++) {
 196:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1183              		.loc 1 196 5 discriminator 3 view .LVU317
 1184 0538 F6FFFF1A 		bne	.L64		@,
 202:armwave.c     **** }
 1185              		.loc 1 202 5 is_stmt 1 view .LVU318
 1186              	@ armwave.c:202:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 202:armwave.c     **** }
 1187              		.loc 1 202 34 is_stmt 0 view .LVU319
 1188 053c 0701A0E1 		lsl	r0, r7, #2	@, _3,
 1189 0540 FEFFFFEB 		bl	malloc		@
 1190              	.LVL60:
 1191              	@ armwave.c:203: }
 1192              		.loc 1 203 1 view .LVU320
 1193 0544 028BBDEC 		vldm	sp!, {d8}	@
 1194              		.cfi_remember_state
 1195              		.cfi_restore 80
 1196              		.cfi_restore 81
 1197              		.cfi_def_cfa_offset 32
 1198              	.LVL61:
 1199              	@ armwave.c:202:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 202:armwave.c     **** }
 1200              		.loc 1 202 32 view .LVU321
 1201 0548 3C0085E5 		str	r0, [r5, #60]	@, g_armwave_state.out_pixbuf
 1202              	@ armwave.c:203: }
 1203              		.loc 1 203 1 view .LVU322
 1204 054c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1205              	.LVL62:
 1206              	.L70:
 1207              		.cfi_restore_state
 156:armwave.c     **** 
 1208              		.loc 1 156 5 is_stmt 1 discriminator 1 view .LVU323
 1209 0550 58309FE5 		ldr	r3, .L74+16	@,
 1210              	.LVL63:
 156:armwave.c     **** 
 1211              		.loc 1 156 5 is_stmt 0 discriminator 1 view .LVU324
 1212 0554 9C20A0E3 		mov	r2, #156	@,
 1213 0558 54109FE5 		ldr	r1, .L74+20	@,
 1214 055c 54009FE5 		ldr	r0, .L74+24	@,
 1215              	.LVL64:
 156:armwave.c     **** 
 1216              		.loc 1 156 5 discriminator 1 view .LVU325
 1217 0560 FEFFFFEB 		bl	__assert_fail		@
 1218              	.LVL65:
 1219              	.L73:
 194:armwave.c     **** 
 1220              		.loc 1 194 5 is_stmt 1 discriminator 1 view .LVU326
 1221 0564 44309FE5 		ldr	r3, .L74+16	@,
 1222 0568 C220A0E3 		mov	r2, #194	@,
 1223 056c 40109FE5 		ldr	r1, .L74+20	@,
 1224 0570 44009FE5 		ldr	r0, .L74+28	@,
 1225 0574 FEFFFFEB 		bl	__assert_fail		@
 1226              	.LVL66:
 1227              	.L72:
 186:armwave.c     **** 
 1228              		.loc 1 186 5 discriminator 1 view .LVU327
 1229 0578 30309FE5 		ldr	r3, .L74+16	@,
 1230 057c BA20A0E3 		mov	r2, #186	@,
 1231 0580 2C109FE5 		ldr	r1, .L74+20	@,
 1232 0584 34009FE5 		ldr	r0, .L74+32	@,
 1233 0588 FEFFFFEB 		bl	__assert_fail		@
 1234              	.LVL67:
 1235              	.L71:
 162:armwave.c     **** 
 1236              		.loc 1 162 5 discriminator 1 view .LVU328
 1237 058c 1C309FE5 		ldr	r3, .L74+16	@,
 1238              	.LVL68:
 162:armwave.c     **** 
 1239              		.loc 1 162 5 is_stmt 0 discriminator 1 view .LVU329
 1240 0590 A220A0E3 		mov	r2, #162	@,
 1241 0594 18109FE5 		ldr	r1, .L74+20	@,
 1242 0598 24009FE5 		ldr	r0, .L74+36	@,
 1243              	.LVL69:
 162:armwave.c     **** 
 1244              		.loc 1 162 5 discriminator 1 view .LVU330
 1245 059c FEFFFFEB 		bl	__assert_fail		@
 1246              	.LVL70:
 1247              	.L75:
 162:armwave.c     **** 
 1248              		.loc 1 162 5 discriminator 1 view .LVU331
 1249              		.align	2
 1250              	.L74:
 1251 05a0 0000803F 		.word	1065353216
 1252 05a4 00000000 		.word	g_armwave_state
 1253 05a8 3333333F 		.word	1060320051
 1254 05ac CDCCCC3D 		.word	1036831949
 1255 05b0 00000000 		.word	.LANCHOR0
 1256 05b4 00000000 		.word	.LC0
 1257 05b8 5C000000 		.word	.LC3
 1258 05bc 30000000 		.word	.LC2
 1259 05c0 0C000000 		.word	.LC1
 1260 05c4 74000000 		.word	.LC4
 1261              		.cfi_endproc
 1262              	.LFE61:
 1264              		.align	2
 1265              		.global	armwave_clear_buffer
 1266              		.syntax unified
 1267              		.arm
 1268              		.fpu vfp
 1270              	armwave_clear_buffer:
 1271              	.LVL71:
 1272              	.LFB62:
 204:armwave.c     **** 
 205:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 206:armwave.c     **** {
 1273              		.loc 1 206 1 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 1277              		@ link register save eliminated.
 207:armwave.c     ****     // Flags ignored, only one buffer cleared
 208:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1278              		.loc 1 208 5 view .LVU333
 1279 05c8 0C309FE5 		ldr	r3, .L77	@ tmp113,
 1280 05cc 0010A0E3 		mov	r1, #0	@,
 1281 05d0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1282 05d4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1283              	.LVL72:
 1284              		.loc 1 208 5 is_stmt 0 view .LVU334
 1285 05d8 FEFFFFEA 		b	memset		@
 1286              	.LVL73:
 1287              	.L78:
 1288              		.align	2
 1289              	.L77:
 1290 05dc 00000000 		.word	g_armwave_state
 1291              		.cfi_endproc
 1292              	.LFE62:
 1294              		.align	2
 1295              		.global	armwave_fill_pixbuf
 1296              		.syntax unified
 1297              		.arm
 1298              		.fpu vfp
 1300              	armwave_fill_pixbuf:
 1301              	.LVL74:
 1302              	.LFB63:
 209:armwave.c     **** }
 210:armwave.c     **** 
 211:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 212:armwave.c     **** {
 1303              		.loc 1 212 1 is_stmt 1 view -0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 8
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 213:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1307              		.loc 1 213 5 view .LVU336
 214:armwave.c     ****     int rr, gg, bb;
 1308              		.loc 1 214 5 view .LVU337
 215:armwave.c     ****     uint8_t r, g, b;
 1309              		.loc 1 215 5 view .LVU338
 216:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1310              		.loc 1 216 5 view .LVU339
 1311              	@ armwave.c:212: {
 212:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1312              		.loc 1 212 1 is_stmt 0 view .LVU340
 1313 05e0 30402DE9 		push	{r4, r5, lr}	@
 1314              		.cfi_def_cfa_offset 12
 1315              		.cfi_offset 4, -12
 1316              		.cfi_offset 5, -8
 1317              		.cfi_offset 14, -4
 1318              	@ armwave.c:219:     assert(out_buffer != NULL);
 217:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 218:armwave.c     **** 
 219:armwave.c     ****     assert(out_buffer != NULL);
 1319              		.loc 1 219 5 view .LVU341
 1320 05e4 000050E3 		cmp	r0, #0	@ out_buffer
 1321              	@ armwave.c:216:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 216:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1322              		.loc 1 216 14 view .LVU342
 1323 05e8 48419FE5 		ldr	r4, .L113+4	@ tmp190,
 1324              	@ armwave.c:212: {
 212:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1325              		.loc 1 212 1 view .LVU343
 1326 05ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1327              		.cfi_def_cfa_offset 24
 1328              	@ armwave.c:216:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 216:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1329              		.loc 1 216 14 view .LVU344
 1330 05f0 045094E5 		ldr	r5, [r4, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1331              	.LVL75:
 217:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1332              		.loc 1 217 5 is_stmt 1 view .LVU345
 1333              		.loc 1 219 5 view .LVU346
 1334 05f4 4900000A 		beq	.L80		@,
 1335              	.LVL76:
 1336              	@ armwave.c:235:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 220:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 221:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 222:armwave.c     **** 
 223:armwave.c     **** #if 0
 224:armwave.c     ****     // Pixbuf tests
 225:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 226:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 227:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 228:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 229:armwave.c     ****         }
 230:armwave.c     ****     }
 231:armwave.c     **** #endif
 232:armwave.c     **** 
 233:armwave.c     **** #if 1
 234:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 235:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1337              		.loc 1 235 37 is_stmt 0 view .LVU347
 1338 05f8 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_99, g_armwave_state.target_height
 1339              	@ armwave.c:235:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1340              		.loc 1 235 5 view .LVU348
 1341 05fc 000052E3 		cmp	r2, #0	@ prephitmp_99,
 1342 0600 4400000A 		beq	.L79		@,
 1343              	@ armwave.c:256:             r = CLAMP(rr * overall_scale, 0, 255);
 236:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 237:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 238:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 239:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 240:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 241:armwave.c     **** 
 242:armwave.c     **** #if 0
 243:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 244:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 245:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 246:armwave.c     **** 
 247:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 248:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 249:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 250:armwave.c     **** #endif
 251:armwave.c     **** 
 252:armwave.c     ****             rr = g_armwave_state.ch1_color.r * value;
 253:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 254:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 255:armwave.c     **** 
 256:armwave.c     ****             r = CLAMP(rr * overall_scale, 0, 255);
 1344              		.loc 1 256 17 view .LVU349
 1345 0604 30319FE5 		ldr	r3, .L113+8	@ tmp154,
 1346              	@ armwave.c:252:             rr = g_armwave_state.ch1_color.r * value;
 252:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1347              		.loc 1 252 43 view .LVU350
 1348 0608 104A94ED 		vldr.32	s8, [r4, #64]	@ _6, g_armwave_state.ch1_color.r
 1349              	@ armwave.c:253:             gg = g_armwave_state.ch1_color.g * value;
 253:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1350              		.loc 1 253 43 view .LVU351
 1351 060c 114AD4ED 		vldr.32	s9, [r4, #68]	@ _9, g_armwave_state.ch1_color.g
 1352              	@ armwave.c:254:             bb = g_armwave_state.ch1_color.b * value;
 254:armwave.c     **** 
 1353              		.loc 1 254 43 view .LVU352
 1354 0610 125A94ED 		vldr.32	s10, [r4, #72]	@ _11, g_armwave_state.ch1_color.b
 1355              	@ armwave.c:256:             r = CLAMP(rr * overall_scale, 0, 255);
 1356              		.loc 1 256 15 view .LVU353
 1357 0614 465ADFED 		vldr.32	s11, .L113	@ tmp194,
 1358              	@ armwave.c:256:             r = CLAMP(rr * overall_scale, 0, 255);
 1359              		.loc 1 256 17 view .LVU354
 1360 0618 006A93ED 		vldr.32	s12, [r3]	@ overall_scale.12_14, overall_scale
 1361 061c 343094E5 		ldr	r3, [r4, #52]	@ _96, g_armwave_state.target_width
 1362              	@ armwave.c:235:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 235:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1363              		.loc 1 235 12 view .LVU355
 1364 0620 00E0A0E3 		mov	lr, #0	@ yy,
 1365              	.LVL77:
 1366              	.L82:
 1367              	@ armwave.c:236:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 236:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1368              		.loc 1 236 9 view .LVU356
 1369 0624 000053E3 		cmp	r3, #0	@ _96,
 1370              	@ armwave.c:236:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 236:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1371              		.loc 1 236 16 view .LVU357
 1372 0628 0020A013 		movne	r2, #0	@ xx,
 1373              	@ armwave.c:236:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 236:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1374              		.loc 1 236 9 view .LVU358
 1375 062c 3600000A 		beq	.L93		@,
 1376              	.LVL78:
 1377              	.L92:
 238:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 1378              		.loc 1 238 13 is_stmt 1 view .LVU359
 252:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1379              		.loc 1 252 13 view .LVU360
 1380              	@ armwave.c:238:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 238:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 1381              		.loc 1 238 21 is_stmt 0 view .LVU361
 1382 0630 935E23E0 		mla	r3, r3, lr, r5	@ tmp161, _96, yy, base_ptr
 1383              	.LVL79:
 1384              	@ armwave.c:252:             rr = g_armwave_state.ch1_color.r * value;
 252:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1385              		.loc 1 252 46 view .LVU362
 1386 0634 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2	@ *_90, *_90
 1387 0638 903A07EE 		vmov	s15, r3	@ int	@ *_90, *_90
 1388 063c 677AF8EE 		vcvt.f32.u32	s15, s15	@ _88, *_90
 1389              	.LVL80:
 253:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1390              		.loc 1 253 13 is_stmt 1 view .LVU363
 1391              	@ armwave.c:252:             rr = g_armwave_state.ch1_color.r * value;
 252:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1392              		.loc 1 252 46 is_stmt 0 view .LVU364
 1393 0640 276A64EE 		vmul.f32	s13, s8, s15	@ tmp166, _6, _88
 1394              	@ armwave.c:253:             gg = g_armwave_state.ch1_color.g * value;
 253:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1395              		.loc 1 253 46 view .LVU365
 1396 0644 A77A24EE 		vmul.f32	s14, s9, s15	@ tmp164, _9, _88
 1397              	@ armwave.c:254:             bb = g_armwave_state.ch1_color.b * value;
 254:armwave.c     **** 
 1398              		.loc 1 254 46 view .LVU366
 1399 0648 277A65EE 		vmul.f32	s15, s10, s15	@ tmp165, _11, _88
 1400              	.LVL81:
 1401              	@ armwave.c:252:             rr = g_armwave_state.ch1_color.r * value;
 252:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1402              		.loc 1 252 16 view .LVU367
 1403 064c E66AFDEE 		vcvt.s32.f32	s13, s13	@ rr, tmp166
 1404              	@ armwave.c:253:             gg = g_armwave_state.ch1_color.g * value;
 253:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1405              		.loc 1 253 16 view .LVU368
 1406 0650 C77ABDEE 		vcvt.s32.f32	s14, s14	@ gg, tmp164
 1407              	.LVL82:
 254:armwave.c     **** 
 1408              		.loc 1 254 13 is_stmt 1 view .LVU369
 1409              	@ armwave.c:254:             bb = g_armwave_state.ch1_color.b * value;
 254:armwave.c     **** 
 1410              		.loc 1 254 16 is_stmt 0 view .LVU370
 1411 0654 E77AFDEE 		vcvt.s32.f32	s15, s15	@ bb, tmp165
 1412              	.LVL83:
 1413              		.loc 1 256 13 is_stmt 1 view .LVU371
 1414              	@ armwave.c:256:             r = CLAMP(rr * overall_scale, 0, 255);
 1415              		.loc 1 256 17 is_stmt 0 view .LVU372
 1416 0658 E66AF8EE 		vcvt.f32.s32	s13, s13	@ tmp168, rr
 1417 065c 866A66EE 		vmul.f32	s13, s13, s12	@ _80, tmp168, overall_scale.12_14
 1418 0660 C06AF5EE 		vcmpe.f32	s13, #0	@ _80
 1419 0664 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1420 0668 0030A0D3 		movle	r3, #0	@ prephitmp_26,
 1421              	.LVL84:
 1422              		.loc 1 256 17 view .LVU373
 1423 066c 050000DA 		ble	.L83		@,
 1424              	@ armwave.c:256:             r = CLAMP(rr * overall_scale, 0, 255);
 1425              		.loc 1 256 15 view .LVU374
 1426 0670 E56AF4EE 		vcmpe.f32	s13, s11	@ _80, tmp194
 1427 0674 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1428 0678 E66AFC4E 		vcvtmi.u32.f32	s13, s13	@ tmp172, _80
 1429 067c FF30A053 		movpl	r3, #255	@ prephitmp_26,
 1430 0680 016ACD4D 		vstrmi.32	s13, [sp, #4]	@ int	@ tmp172, %sfp
 1431 0684 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ prephitmp_26, %sfp
 1432              	.L83:
 257:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1433              		.loc 1 257 13 is_stmt 1 view .LVU375
 1434              	@ armwave.c:257:             g = CLAMP(gg * overall_scale, 0, 255);
 1435              		.loc 1 257 17 is_stmt 0 view .LVU376
 1436 0688 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp173, gg
 1437              	.LVL85:
 1438              		.loc 1 257 17 view .LVU377
 1439 068c 067A27EE 		vmul.f32	s14, s14, s12	@ _75, tmp173, overall_scale.12_14
 1440 0690 C07AB5EE 		vcmpe.f32	s14, #0	@ _75
 1441 0694 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1442 0698 0010A0D3 		movle	r1, #0	@ prephitmp_59,
 1443 069c 060000DA 		ble	.L86		@,
 1444              	@ armwave.c:257:             g = CLAMP(gg * overall_scale, 0, 255);
 1445              		.loc 1 257 15 view .LVU378
 1446 06a0 E57AB4EE 		vcmpe.f32	s14, s11	@ _75, tmp194
 1447 06a4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1448 06a8 C77ABC4E 		vcvtmi.u32.f32	s14, s14	@ tmp177, _75
 1449 06ac FF1CA053 		movpl	r1, #65280	@ prephitmp_59,
 1450 06b0 017A8D4D 		vstrmi.32	s14, [sp, #4]	@ int	@ tmp177, %sfp
 1451 06b4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ tmp178, %sfp
 1452 06b8 0114A041 		lslmi	r1, r1, #8	@ prephitmp_59, tmp178,
 1453              	.L86:
 258:armwave.c     ****             b = CLAMP(bb * overall_scale, 0, 255);
 1454              		.loc 1 258 13 is_stmt 1 view .LVU379
 1455              	@ armwave.c:258:             b = CLAMP(bb * overall_scale, 0, 255);
 1456              		.loc 1 258 17 is_stmt 0 view .LVU380
 1457 06bc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp179, bb
 1458              	.LVL86:
 1459              		.loc 1 258 17 view .LVU381
 1460 06c0 867A67EE 		vmul.f32	s15, s15, s12	@ _47, tmp179, overall_scale.12_14
 1461 06c4 C07AF5EE 		vcmpe.f32	s15, #0	@ _47
 1462 06c8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1463 06cc 060000DA 		ble	.L89		@,
 1464              	@ armwave.c:258:             b = CLAMP(bb * overall_scale, 0, 255);
 1465              		.loc 1 258 15 view .LVU382
 1466 06d0 E57AF4EE 		vcmpe.f32	s15, s11	@ _47, tmp194
 1467 06d4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1468 06d8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp183, _47
 1469 06dc FF388353 		orrpl	r3, r3, #16711680	@ prephitmp_26, prephitmp_26,
 1470 06e0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp183, %sfp
 1471 06e4 04C0DD45 		ldrbmi	ip, [sp, #4]	@ zero_extendqisi2	@ tmp184, %sfp
 1472 06e8 0C388341 		orrmi	r3, r3, ip, lsl #16	@ prephitmp_26, prephitmp_26, tmp184,
 1473              	.L89:
 259:armwave.c     **** 
 260:armwave.c     ****             // ensure 100% alpha channel, if it is used
 261:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1474              		.loc 1 261 13 is_stmt 1 view .LVU383
 1475              	.LVL87:
 262:armwave.c     **** 
 263:armwave.c     ****             //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, val
 264:armwave.c     **** 
 265:armwave.c     ****             *out_buffer++ = word;
 1476              		.loc 1 265 13 view .LVU384
 1477              	@ armwave.c:261:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 261:armwave.c     **** 
 1478              		.loc 1 261 54 is_stmt 0 view .LVU385
 1479 06ec 013083E1 		orr	r3, r3, r1	@ tmp186, prephitmp_26, prephitmp_59
 1480              	.LVL88:
 1481              	@ armwave.c:261:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 261:armwave.c     **** 
 1482              		.loc 1 261 18 view .LVU386
 1483 06f0 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp186,
 1484              	.LVL89:
 1485              	@ armwave.c:265:             *out_buffer++ = word;
 1486              		.loc 1 265 27 view .LVU387
 1487 06f4 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_131, offset: 4294967292B]
 1488              	.LVL90:
 1489              	@ armwave.c:236:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 236:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1490              		.loc 1 236 41 view .LVU388
 1491 06f8 343094E5 		ldr	r3, [r4, #52]	@ _96, g_armwave_state.target_width
 1492              	.LVL91:
 1493              	@ armwave.c:236:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 236:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1494              		.loc 1 236 58 view .LVU389
 1495 06fc 012082E2 		add	r2, r2, #1	@ xx, xx,
 1496              	.LVL92:
 1497              	@ armwave.c:236:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 236:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1498              		.loc 1 236 9 view .LVU390
 1499 0700 020053E1 		cmp	r3, r2	@ _96, xx
 1500 0704 C9FFFF8A 		bhi	.L92		@,
 1501 0708 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_99, g_armwave_state.target_height
 1502              	.LVL93:
 1503              	.L93:
 1504              	@ armwave.c:235:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 235:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1505              		.loc 1 235 55 discriminator 2 view .LVU391
 1506 070c 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 1507              	.LVL94:
 1508              	@ armwave.c:235:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 235:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1509              		.loc 1 235 5 discriminator 2 view .LVU392
 1510 0710 02005EE1 		cmp	lr, r2	@ yy, prephitmp_99
 1511 0714 C2FFFF3A 		bcc	.L82		@,
 1512              	.LVL95:
 1513              	.L79:
 1514              	@ armwave.c:269: }
 266:armwave.c     ****         }
 267:armwave.c     ****     }
 268:armwave.c     **** #endif
 269:armwave.c     **** }
 1515              		.loc 1 269 1 view .LVU393
 1516 0718 0CD08DE2 		add	sp, sp, #12	@,,
 1517              		.cfi_remember_state
 1518              		.cfi_def_cfa_offset 12
 1519              		@ sp needed	@
 1520 071c 3080BDE8 		pop	{r4, r5, pc}	@
 1521              	.LVL96:
 1522              	.L80:
 1523              		.cfi_restore_state
 219:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 1524              		.loc 1 219 5 is_stmt 1 discriminator 1 view .LVU394
 1525 0720 18309FE5 		ldr	r3, .L113+12	@,
 1526 0724 DB20A0E3 		mov	r2, #219	@,
 1527 0728 14109FE5 		ldr	r1, .L113+16	@,
 1528 072c 14009FE5 		ldr	r0, .L113+20	@,
 1529              	.LVL97:
 219:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 1530              		.loc 1 219 5 is_stmt 0 discriminator 1 view .LVU395
 1531 0730 FEFFFFEB 		bl	__assert_fail		@
 1532              	.LVL98:
 1533              	.L114:
 1534              		.align	2
 1535              	.L113:
 1536 0734 00007F43 		.word	1132396544
 1537 0738 00000000 		.word	g_armwave_state
 1538 073c 00000000 		.word	.LANCHOR2
 1539 0740 18000000 		.word	.LANCHOR0+24
 1540 0744 00000000 		.word	.LC0
 1541 0748 90000000 		.word	.LC5
 1542              		.cfi_endproc
 1543              	.LFE63:
 1545              		.align	2
 1546              		.global	armwave_fill_pixbuf2
 1547              		.syntax unified
 1548              		.arm
 1549              		.fpu vfp
 1551              	armwave_fill_pixbuf2:
 1552              	.LVL99:
 1553              	.LFB64:
 270:armwave.c     **** 
 271:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 272:armwave.c     **** {
 1554              		.loc 1 272 1 is_stmt 1 view -0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 8
 1557              		@ frame_needed = 0, uses_anonymous_args = 0
 273:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1558              		.loc 1 273 5 view .LVU397
 274:armwave.c     ****     int rr, gg, bb;
 1559              		.loc 1 274 5 view .LVU398
 275:armwave.c     ****     uint8_t r, g, b;
 1560              		.loc 1 275 5 view .LVU399
 276:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1561              		.loc 1 276 5 view .LVU400
 1562              	@ armwave.c:272: {
 272:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1563              		.loc 1 272 1 is_stmt 0 view .LVU401
 1564 074c 30402DE9 		push	{r4, r5, lr}	@
 1565              		.cfi_def_cfa_offset 12
 1566              		.cfi_offset 4, -12
 1567              		.cfi_offset 5, -8
 1568              		.cfi_offset 14, -4
 1569              	@ armwave.c:279:     assert(out_buffer != NULL);
 277:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 278:armwave.c     **** 
 279:armwave.c     ****     assert(out_buffer != NULL);
 1570              		.loc 1 279 5 view .LVU402
 1571 0750 000050E3 		cmp	r0, #0	@ out_buffer
 1572              	@ armwave.c:276:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 276:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1573              		.loc 1 276 14 view .LVU403
 1574 0754 48419FE5 		ldr	r4, .L149+4	@ tmp191,
 1575              	@ armwave.c:272: {
 272:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1576              		.loc 1 272 1 view .LVU404
 1577 0758 0CD04DE2 		sub	sp, sp, #12	@,,
 1578              		.cfi_def_cfa_offset 24
 1579              	@ armwave.c:276:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 276:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1580              		.loc 1 276 14 view .LVU405
 1581 075c 045094E5 		ldr	r5, [r4, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1582              	.LVL100:
 277:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1583              		.loc 1 277 5 is_stmt 1 view .LVU406
 1584              		.loc 1 279 5 view .LVU407
 1585 0760 4900000A 		beq	.L116		@,
 1586              	.LVL101:
 1587              	@ armwave.c:282:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 280:armwave.c     **** 
 281:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 282:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1588              		.loc 1 282 37 is_stmt 0 view .LVU408
 1589 0764 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_99, g_armwave_state.target_height
 1590              	@ armwave.c:282:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1591              		.loc 1 282 5 view .LVU409
 1592 0768 000052E3 		cmp	r2, #0	@ prephitmp_99,
 1593 076c 4400000A 		beq	.L115		@,
 1594              	@ armwave.c:291:             r = CLAMP(rr * overall_scale, 0, 255);
 283:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 284:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 285:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 286:armwave.c     **** 
 287:armwave.c     ****             rr = g_armwave_state.ch1_color.r * value;
 288:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 289:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 290:armwave.c     **** 
 291:armwave.c     ****             r = CLAMP(rr * overall_scale, 0, 255);
 1595              		.loc 1 291 17 view .LVU410
 1596 0770 30319FE5 		ldr	r3, .L149+8	@ tmp154,
 1597              	@ armwave.c:287:             rr = g_armwave_state.ch1_color.r * value;
 287:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1598              		.loc 1 287 43 view .LVU411
 1599 0774 104A94ED 		vldr.32	s8, [r4, #64]	@ _6, g_armwave_state.ch1_color.r
 1600              	@ armwave.c:288:             gg = g_armwave_state.ch1_color.g * value;
 288:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1601              		.loc 1 288 43 view .LVU412
 1602 0778 114AD4ED 		vldr.32	s9, [r4, #68]	@ _9, g_armwave_state.ch1_color.g
 1603              	@ armwave.c:289:             bb = g_armwave_state.ch1_color.b * value;
 289:armwave.c     **** 
 1604              		.loc 1 289 43 view .LVU413
 1605 077c 125A94ED 		vldr.32	s10, [r4, #72]	@ _11, g_armwave_state.ch1_color.b
 1606              	@ armwave.c:291:             r = CLAMP(rr * overall_scale, 0, 255);
 1607              		.loc 1 291 15 view .LVU414
 1608 0780 465ADFED 		vldr.32	s11, .L149	@ tmp195,
 1609              	@ armwave.c:291:             r = CLAMP(rr * overall_scale, 0, 255);
 1610              		.loc 1 291 17 view .LVU415
 1611 0784 006A93ED 		vldr.32	s12, [r3]	@ overall_scale.34_14, overall_scale
 1612 0788 343094E5 		ldr	r3, [r4, #52]	@ _96, g_armwave_state.target_width
 1613              	@ armwave.c:282:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 282:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1614              		.loc 1 282 12 view .LVU416
 1615 078c 00E0A0E3 		mov	lr, #0	@ yy,
 1616              	.LVL102:
 1617              	.L118:
 1618              	@ armwave.c:283:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 283:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1619              		.loc 1 283 9 view .LVU417
 1620 0790 000053E3 		cmp	r3, #0	@ _96,
 1621              	@ armwave.c:283:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 283:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1622              		.loc 1 283 16 view .LVU418
 1623 0794 0020A013 		movne	r2, #0	@ xx,
 1624              	@ armwave.c:283:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 283:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1625              		.loc 1 283 9 view .LVU419
 1626 0798 3600000A 		beq	.L129		@,
 1627              	.LVL103:
 1628              	.L128:
 285:armwave.c     **** 
 1629              		.loc 1 285 13 is_stmt 1 view .LVU420
 287:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1630              		.loc 1 287 13 view .LVU421
 1631              	@ armwave.c:285:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 285:armwave.c     **** 
 1632              		.loc 1 285 21 is_stmt 0 view .LVU422
 1633 079c 935E23E0 		mla	r3, r3, lr, r5	@ tmp162, _96, yy, base_ptr
 1634              	.LVL104:
 1635              	@ armwave.c:287:             rr = g_armwave_state.ch1_color.r * value;
 287:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1636              		.loc 1 287 46 view .LVU423
 1637 07a0 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2	@ *_90, *_90
 1638 07a4 903A07EE 		vmov	s15, r3	@ int	@ *_90, *_90
 1639 07a8 677AF8EE 		vcvt.f32.u32	s15, s15	@ _88, *_90
 1640              	.LVL105:
 288:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1641              		.loc 1 288 13 is_stmt 1 view .LVU424
 1642              	@ armwave.c:287:             rr = g_armwave_state.ch1_color.r * value;
 287:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1643              		.loc 1 287 46 is_stmt 0 view .LVU425
 1644 07ac 276A64EE 		vmul.f32	s13, s8, s15	@ tmp167, _6, _88
 1645              	@ armwave.c:288:             gg = g_armwave_state.ch1_color.g * value;
 288:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1646              		.loc 1 288 46 view .LVU426
 1647 07b0 A77A24EE 		vmul.f32	s14, s9, s15	@ tmp165, _9, _88
 1648              	@ armwave.c:289:             bb = g_armwave_state.ch1_color.b * value;
 289:armwave.c     **** 
 1649              		.loc 1 289 46 view .LVU427
 1650 07b4 277A65EE 		vmul.f32	s15, s10, s15	@ tmp166, _11, _88
 1651              	.LVL106:
 1652              	@ armwave.c:287:             rr = g_armwave_state.ch1_color.r * value;
 287:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1653              		.loc 1 287 16 view .LVU428
 1654 07b8 E66AFDEE 		vcvt.s32.f32	s13, s13	@ rr, tmp167
 1655              	@ armwave.c:288:             gg = g_armwave_state.ch1_color.g * value;
 288:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1656              		.loc 1 288 16 view .LVU429
 1657 07bc C77ABDEE 		vcvt.s32.f32	s14, s14	@ gg, tmp165
 1658              	.LVL107:
 289:armwave.c     **** 
 1659              		.loc 1 289 13 is_stmt 1 view .LVU430
 1660              	@ armwave.c:289:             bb = g_armwave_state.ch1_color.b * value;
 289:armwave.c     **** 
 1661              		.loc 1 289 16 is_stmt 0 view .LVU431
 1662 07c0 E77AFDEE 		vcvt.s32.f32	s15, s15	@ bb, tmp166
 1663              	.LVL108:
 1664              		.loc 1 291 13 is_stmt 1 view .LVU432
 1665              	@ armwave.c:291:             r = CLAMP(rr * overall_scale, 0, 255);
 1666              		.loc 1 291 17 is_stmt 0 view .LVU433
 1667 07c4 E66AF8EE 		vcvt.f32.s32	s13, s13	@ tmp169, rr
 1668 07c8 866A66EE 		vmul.f32	s13, s13, s12	@ _80, tmp169, overall_scale.34_14
 1669 07cc C06AF5EE 		vcmpe.f32	s13, #0	@ _80
 1670 07d0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1671 07d4 0030A0D3 		movle	r3, #0	@ prephitmp_26,
 1672              	.LVL109:
 1673              		.loc 1 291 17 view .LVU434
 1674 07d8 050000DA 		ble	.L119		@,
 1675              	@ armwave.c:291:             r = CLAMP(rr * overall_scale, 0, 255);
 1676              		.loc 1 291 15 view .LVU435
 1677 07dc E56AF4EE 		vcmpe.f32	s13, s11	@ _80, tmp195
 1678 07e0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1679 07e4 E66AFC4E 		vcvtmi.u32.f32	s13, s13	@ tmp173, _80
 1680 07e8 FF30A053 		movpl	r3, #255	@ prephitmp_26,
 1681 07ec 016ACD4D 		vstrmi.32	s13, [sp, #4]	@ int	@ tmp173, %sfp
 1682 07f0 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ prephitmp_26, %sfp
 1683              	.L119:
 292:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1684              		.loc 1 292 13 is_stmt 1 view .LVU436
 1685              	@ armwave.c:292:             g = CLAMP(gg * overall_scale, 0, 255);
 1686              		.loc 1 292 17 is_stmt 0 view .LVU437
 1687 07f4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp174, gg
 1688              	.LVL110:
 1689              		.loc 1 292 17 view .LVU438
 1690 07f8 067A27EE 		vmul.f32	s14, s14, s12	@ _75, tmp174, overall_scale.34_14
 1691 07fc C07AB5EE 		vcmpe.f32	s14, #0	@ _75
 1692 0800 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1693 0804 0010A0D3 		movle	r1, #0	@ prephitmp_59,
 1694 0808 060000DA 		ble	.L122		@,
 1695              	@ armwave.c:292:             g = CLAMP(gg * overall_scale, 0, 255);
 1696              		.loc 1 292 15 view .LVU439
 1697 080c E57AB4EE 		vcmpe.f32	s14, s11	@ _75, tmp195
 1698 0810 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1699 0814 C77ABC4E 		vcvtmi.u32.f32	s14, s14	@ tmp178, _75
 1700 0818 FF1CA053 		movpl	r1, #65280	@ prephitmp_59,
 1701 081c 017A8D4D 		vstrmi.32	s14, [sp, #4]	@ int	@ tmp178, %sfp
 1702 0820 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ tmp179, %sfp
 1703 0824 0114A041 		lslmi	r1, r1, #8	@ prephitmp_59, tmp179,
 1704              	.L122:
 293:armwave.c     ****             b = CLAMP(bb * overall_scale, 0, 255);
 1705              		.loc 1 293 13 is_stmt 1 view .LVU440
 1706              	@ armwave.c:293:             b = CLAMP(bb * overall_scale, 0, 255);
 1707              		.loc 1 293 17 is_stmt 0 view .LVU441
 1708 0828 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp180, bb
 1709              	.LVL111:
 1710              		.loc 1 293 17 view .LVU442
 1711 082c 867A67EE 		vmul.f32	s15, s15, s12	@ _47, tmp180, overall_scale.34_14
 1712 0830 C07AF5EE 		vcmpe.f32	s15, #0	@ _47
 1713 0834 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1714 0838 060000DA 		ble	.L125		@,
 1715              	@ armwave.c:293:             b = CLAMP(bb * overall_scale, 0, 255);
 1716              		.loc 1 293 15 view .LVU443
 1717 083c E57AF4EE 		vcmpe.f32	s15, s11	@ _47, tmp195
 1718 0840 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1719 0844 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp184, _47
 1720 0848 FF388353 		orrpl	r3, r3, #16711680	@ prephitmp_26, prephitmp_26,
 1721 084c 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp184, %sfp
 1722 0850 04C0DD45 		ldrbmi	ip, [sp, #4]	@ zero_extendqisi2	@ tmp185, %sfp
 1723 0854 0C388341 		orrmi	r3, r3, ip, lsl #16	@ prephitmp_26, prephitmp_26, tmp185,
 1724              	.L125:
 294:armwave.c     **** 
 295:armwave.c     ****             // ensure 100% alpha channel, if it is used
 296:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1725              		.loc 1 296 13 is_stmt 1 view .LVU444
 1726              	.LVL112:
 297:armwave.c     **** 
 298:armwave.c     ****             *out_buffer++ = word;
 1727              		.loc 1 298 13 view .LVU445
 1728              	@ armwave.c:296:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 296:armwave.c     **** 
 1729              		.loc 1 296 54 is_stmt 0 view .LVU446
 1730 0858 013083E1 		orr	r3, r3, r1	@ tmp187, prephitmp_26, prephitmp_59
 1731              	.LVL113:
 1732              	@ armwave.c:296:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 296:armwave.c     **** 
 1733              		.loc 1 296 18 view .LVU447
 1734 085c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp187,
 1735              	.LVL114:
 1736              	@ armwave.c:298:             *out_buffer++ = word;
 1737              		.loc 1 298 27 view .LVU448
 1738 0860 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_131, offset: 4294967292B]
 1739              	.LVL115:
 1740              	@ armwave.c:283:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 283:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1741              		.loc 1 283 41 view .LVU449
 1742 0864 343094E5 		ldr	r3, [r4, #52]	@ _96, g_armwave_state.target_width
 1743              	.LVL116:
 1744              	@ armwave.c:283:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 283:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1745              		.loc 1 283 58 view .LVU450
 1746 0868 012082E2 		add	r2, r2, #1	@ xx, xx,
 1747              	.LVL117:
 1748              	@ armwave.c:283:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 283:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1749              		.loc 1 283 9 view .LVU451
 1750 086c 020053E1 		cmp	r3, r2	@ _96, xx
 1751 0870 C9FFFF8A 		bhi	.L128		@,
 1752 0874 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_99, g_armwave_state.target_height
 1753              	.LVL118:
 1754              	.L129:
 1755              	@ armwave.c:282:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 282:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1756              		.loc 1 282 55 discriminator 2 view .LVU452
 1757 0878 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 1758              	.LVL119:
 1759              	@ armwave.c:282:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 282:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1760              		.loc 1 282 5 discriminator 2 view .LVU453
 1761 087c 02005EE1 		cmp	lr, r2	@ yy, prephitmp_99
 1762 0880 C2FFFF3A 		bcc	.L118		@,
 1763              	.LVL120:
 1764              	.L115:
 1765              	@ armwave.c:301: }
 299:armwave.c     ****         }
 300:armwave.c     ****     }
 301:armwave.c     **** }
 1766              		.loc 1 301 1 view .LVU454
 1767 0884 0CD08DE2 		add	sp, sp, #12	@,,
 1768              		.cfi_remember_state
 1769              		.cfi_def_cfa_offset 12
 1770              		@ sp needed	@
 1771 0888 3080BDE8 		pop	{r4, r5, pc}	@
 1772              	.LVL121:
 1773              	.L116:
 1774              		.cfi_restore_state
 279:armwave.c     **** 
 1775              		.loc 1 279 5 is_stmt 1 discriminator 1 view .LVU455
 1776 088c 18309FE5 		ldr	r3, .L149+12	@,
 1777 0890 18209FE5 		ldr	r2, .L149+16	@,
 1778 0894 18109FE5 		ldr	r1, .L149+20	@,
 1779 0898 18009FE5 		ldr	r0, .L149+24	@,
 1780              	.LVL122:
 279:armwave.c     **** 
 1781              		.loc 1 279 5 is_stmt 0 discriminator 1 view .LVU456
 1782 089c FEFFFFEB 		bl	__assert_fail		@
 1783              	.LVL123:
 1784              	.L150:
 1785              		.align	2
 1786              	.L149:
 1787 08a0 00007F43 		.word	1132396544
 1788 08a4 00000000 		.word	g_armwave_state
 1789 08a8 00000000 		.word	.LANCHOR2
 1790 08ac 2C000000 		.word	.LANCHOR0+44
 1791 08b0 17010000 		.word	279
 1792 08b4 00000000 		.word	.LC0
 1793 08b8 90000000 		.word	.LC5
 1794              		.cfi_endproc
 1795              	.LFE64:
 1797              		.align	2
 1798              		.global	armwave_dump_ppm_debug
 1799              		.syntax unified
 1800              		.arm
 1801              		.fpu vfp
 1803              	armwave_dump_ppm_debug:
 1804              	.LVL124:
 1805              	.LFB65:
 302:armwave.c     **** 
 303:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 304:armwave.c     **** {
 1806              		.loc 1 304 1 is_stmt 1 view -0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 0, uses_anonymous_args = 0
 305:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1810              		.loc 1 305 5 view .LVU458
 1811              	@ armwave.c:304: {
 304:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1812              		.loc 1 304 1 is_stmt 0 view .LVU459
 1813 08bc 0130A0E1 		mov	r3, r1	@ fn, fn
 1814 08c0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1815              		.cfi_def_cfa_offset 28
 1816              		.cfi_offset 4, -28
 1817              		.cfi_offset 5, -24
 1818              		.cfi_offset 6, -20
 1819              		.cfi_offset 7, -16
 1820              		.cfi_offset 8, -12
 1821              		.cfi_offset 9, -8
 1822              		.cfi_offset 14, -4
 1823 08c4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1824 08c8 0CD04DE2 		sub	sp, sp, #12	@,,
 1825              		.cfi_def_cfa_offset 40
 1826              	@ armwave.c:305:     FILE *fp = fopen(fn, "wb");
 1827              		.loc 1 305 16 view .LVU460
 1828 08cc D8109FE5 		ldr	r1, .L163	@,
 1829              	.LVL125:
 1830              		.loc 1 305 16 view .LVU461
 1831 08d0 0300A0E1 		mov	r0, r3	@, fn
 1832              	.LVL126:
 1833              		.loc 1 305 16 view .LVU462
 1834 08d4 FEFFFFEB 		bl	fopen64		@
 1835              	.LVL127:
 1836              	@ armwave.c:312:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 306:armwave.c     ****     uint32_t data;
 307:armwave.c     ****     int xx, yy;
 308:armwave.c     **** 
 309:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 310:armwave.c     **** 
 311:armwave.c     ****     fputs("P3\n", fp);
 312:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1837              		.loc 1 312 5 view .LVU463
 1838 08d8 D0609FE5 		ldr	r6, .L163+4	@ tmp154,
 1839              	@ armwave.c:311:     fputs("P3\n", fp);
 311:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1840              		.loc 1 311 5 view .LVU464
 1841 08dc 0320A0E3 		mov	r2, #3	@,
 1842 08e0 0110A0E3 		mov	r1, #1	@,
 1843              	@ armwave.c:305:     FILE *fp = fopen(fn, "wb");
 305:armwave.c     ****     uint32_t data;
 1844              		.loc 1 305 16 view .LVU465
 1845 08e4 0070A0E1 		mov	r7, r0	@ fp,
 1846              	.LVL128:
 306:armwave.c     ****     uint32_t data;
 1847              		.loc 1 306 5 is_stmt 1 view .LVU466
 307:armwave.c     **** 
 1848              		.loc 1 307 5 view .LVU467
 311:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1849              		.loc 1 311 5 view .LVU468
 1850 08e8 0030A0E1 		mov	r3, r0	@, fp
 1851 08ec C0009FE5 		ldr	r0, .L163+8	@,
 1852              	.LVL129:
 311:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1853              		.loc 1 311 5 is_stmt 0 view .LVU469
 1854 08f0 FEFFFFEB 		bl	fwrite		@
 1855              	.LVL130:
 1856              		.loc 1 312 5 is_stmt 1 view .LVU470
 1857 08f4 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1858 08f8 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1859 08fc B4109FE5 		ldr	r1, .L163+12	@,
 1860 0900 0700A0E1 		mov	r0, r7	@, fp
 1861 0904 FEFFFFEB 		bl	fprintf		@
 1862              	.LVL131:
 313:armwave.c     ****     fputs("255\n", fp);
 1863              		.loc 1 313 5 view .LVU471
 1864 0908 0420A0E3 		mov	r2, #4	@,
 1865 090c 0730A0E1 		mov	r3, r7	@, fp
 1866 0910 0110A0E3 		mov	r1, #1	@,
 1867 0914 A0009FE5 		ldr	r0, .L163+16	@,
 1868 0918 FEFFFFEB 		bl	fwrite		@
 1869              	.LVL132:
 314:armwave.c     **** 
 315:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1870              		.loc 1 315 5 view .LVU472
 1871              	@ armwave.c:315:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1872              		.loc 1 315 37 is_stmt 0 view .LVU473
 1873 091c 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1874              	@ armwave.c:315:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1875              		.loc 1 315 5 view .LVU474
 1876 0920 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1877 0924 1800000A 		beq	.L152		@,
 1878 0928 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1879              	@ armwave.c:320:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 316:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 317:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 318:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 319:armwave.c     **** 
 320:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1880              		.loc 1 320 13 view .LVU475
 1881 092c 8C909FE5 		ldr	r9, .L163+20	@ tmp156,
 1882              	@ armwave.c:315:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 315:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1883              		.loc 1 315 12 view .LVU476
 1884 0930 0050A0E3 		mov	r5, #0	@ yy,
 1885              	.LVL133:
 1886              	.L153:
 1887              	@ armwave.c:316:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 316:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1888              		.loc 1 316 9 view .LVU477
 1889 0934 000053E3 		cmp	r3, #0	@ _12,
 1890              	@ armwave.c:316:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 316:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1891              		.loc 1 316 16 view .LVU478
 1892 0938 0040A013 		movne	r4, #0	@ xx,
 1893              	@ armwave.c:316:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 316:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1894              		.loc 1 316 9 view .LVU479
 1895 093c 1600000A 		beq	.L162		@,
 1896              	.LVL134:
 1897              	.L154:
 317:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1898              		.loc 1 317 13 is_stmt 1 discriminator 3 view .LVU480
 1899              	@ armwave.c:317:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 317:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1900              		.loc 1 317 29 is_stmt 0 discriminator 3 view .LVU481
 1901 0940 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1902              	@ armwave.c:320:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1903              		.loc 1 320 13 discriminator 3 view .LVU482
 1904 0944 0910A0E1 		mov	r1, r9	@, tmp156
 1905 0948 0700A0E1 		mov	r0, r7	@, fp
 1906              	@ armwave.c:317:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 317:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1907              		.loc 1 317 18 discriminator 3 view .LVU483
 1908 094c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1909              	.LVL135:
 1910              		.loc 1 320 13 is_stmt 1 discriminator 3 view .LVU484
 1911              	@ armwave.c:316:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 316:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1912              		.loc 1 316 58 is_stmt 0 discriminator 3 view .LVU485
 1913 0950 014084E2 		add	r4, r4, #1	@ xx, xx,
 1914              	.LVL136:
 1915              	@ armwave.c:320:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1916              		.loc 1 320 81 discriminator 3 view .LVU486
 1917 0954 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1918              	@ armwave.c:320:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1919              		.loc 1 320 61 discriminator 3 view .LVU487
 1920 0958 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1921              	@ armwave.c:320:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1922              		.loc 1 320 13 discriminator 3 view .LVU488
 1923 095c 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1924 0960 7330EFE6 		uxtb	r3, r3	@, tmp146
 1925 0964 00C08DE5 		str	ip, [sp]	@ tmp151,
 1926 0968 7220EFE6 		uxtb	r2, r2	@, data
 1927              	.LVL137:
 1928              		.loc 1 320 13 discriminator 3 view .LVU489
 1929 096c FEFFFFEB 		bl	fprintf		@
 1930              	.LVL138:
 1931              	@ armwave.c:316:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 316:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1932              		.loc 1 316 41 discriminator 3 view .LVU490
 1933 0970 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1934              	@ armwave.c:316:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 316:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1935              		.loc 1 316 9 discriminator 3 view .LVU491
 1936 0974 040053E1 		cmp	r3, r4	@ _12, xx
 1937 0978 F0FFFF8A 		bhi	.L154		@,
 1938 097c 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1939              	.LVL139:
 1940              	.L155:
 1941              	@ armwave.c:315:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 315:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1942              		.loc 1 315 55 discriminator 2 view .LVU492
 1943 0980 015085E2 		add	r5, r5, #1	@ yy, yy,
 1944              	.LVL140:
 1945              	@ armwave.c:315:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 315:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1946              		.loc 1 315 5 discriminator 2 view .LVU493
 1947 0984 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1948 0988 E9FFFF3A 		bcc	.L153		@,
 1949              	.LVL141:
 1950              	.L152:
 321:armwave.c     ****         }
 322:armwave.c     ****     }
 323:armwave.c     **** 
 324:armwave.c     ****     fclose(fp);
 1951              		.loc 1 324 5 is_stmt 1 view .LVU494
 1952 098c 0700A0E1 		mov	r0, r7	@, fp
 1953              	@ armwave.c:325: }
 325:armwave.c     **** }
 1954              		.loc 1 325 1 is_stmt 0 view .LVU495
 1955 0990 0CD08DE2 		add	sp, sp, #12	@,,
 1956              		.cfi_remember_state
 1957              		.cfi_def_cfa_offset 28
 1958              		@ sp needed	@
 1959 0994 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1960              		.cfi_restore 14
 1961              		.cfi_restore 9
 1962              		.cfi_restore 8
 1963              		.cfi_restore 7
 1964              		.cfi_restore 6
 1965              		.cfi_restore 5
 1966              		.cfi_restore 4
 1967              		.cfi_def_cfa_offset 0
 1968              	.LVL142:
 1969              	@ armwave.c:324:     fclose(fp);
 324:armwave.c     **** }
 1970              		.loc 1 324 5 view .LVU496
 1971 0998 FEFFFFEA 		b	fclose		@
 1972              	.LVL143:
 1973              	.L162:
 1974              		.cfi_restore_state
 1975              	@ armwave.c:315:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 315:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1976              		.loc 1 315 55 view .LVU497
 1977 099c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1978              	.LVL144:
 1979              	@ armwave.c:315:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 315:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1980              		.loc 1 315 5 view .LVU498
 1981 09a0 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 1982 09a4 F5FFFF8A 		bhi	.L155		@,
 1983 09a8 F7FFFFEA 		b	.L152		@
 1984              	.L164:
 1985              		.align	2
 1986              	.L163:
 1987 09ac A4000000 		.word	.LC6
 1988 09b0 00000000 		.word	g_armwave_state
 1989 09b4 A8000000 		.word	.LC7
 1990 09b8 AC000000 		.word	.LC8
 1991 09bc B4000000 		.word	.LC9
 1992 09c0 BC000000 		.word	.LC10
 1993              		.cfi_endproc
 1994              	.LFE65:
 1996              		.align	2
 1997              		.global	armwave_test_init
 1998              		.syntax unified
 1999              		.arm
 2000              		.fpu vfp
 2002              	armwave_test_init:
 2003              	.LVL145:
 2004              	.LFB66:
 326:armwave.c     **** 
 327:armwave.c     **** void armwave_test_init(float mod)
 328:armwave.c     **** {
 2005              		.loc 1 328 1 is_stmt 1 view -0
 2006              		.cfi_startproc
 2007              		@ args = 0, pretend = 0, frame = 0
 2008              		@ frame_needed = 0, uses_anonymous_args = 0
 329:armwave.c     **** 	mod_depth = mod;
 2009              		.loc 1 329 2 view .LVU500
 2010              	@ armwave.c:329: 	mod_depth = mod;
 2011              		.loc 1 329 12 is_stmt 0 view .LVU501
 2012 09c4 88309FE5 		ldr	r3, .L169+20	@ tmp124,
 2013              	@ armwave.c:328: {
 328:armwave.c     **** 	mod_depth = mod;
 2014              		.loc 1 328 1 view .LVU502
 2015 09c8 70402DE9 		push	{r4, r5, r6, lr}	@
 2016              		.cfi_def_cfa_offset 16
 2017              		.cfi_offset 4, -16
 2018              		.cfi_offset 5, -12
 2019              		.cfi_offset 6, -8
 2020              		.cfi_offset 14, -4
 2021 09cc 068B2DED 		vpush.64	{d8, d9, d10}	@
 2022              		.cfi_def_cfa_offset 40
 2023              		.cfi_offset 80, -40
 2024              		.cfi_offset 81, -36
 2025              		.cfi_offset 82, -32
 2026              		.cfi_offset 83, -28
 2027              		.cfi_offset 84, -24
 2028              		.cfi_offset 85, -20
 2029 09d0 80409FE5 		ldr	r4, .L169+24	@ ivtmp.137,
 2030              	.LBB6:
 2031              	.LBB7:
 2032              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2033              		.loc 1 82 32 view .LVU503
 2034 09d4 1DAA9FED 		vldr.32	s20, .L169+16	@ tmp130,
 2035              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2036              		.loc 1 82 26 view .LVU504
 2037 09d8 189B9FED 		vldr.64	d9, .L169	@ tmp139,
 2038              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2039              		.loc 1 82 49 view .LVU505
 2040 09dc 198B9FED 		vldr.64	d8, .L169+8	@ tmp133,
 2041              	.LBE7:
 2042              	.LBE6:
 2043              	@ armwave.c:329: 	mod_depth = mod;
 2044              		.loc 1 329 12 view .LVU506
 2045 09e0 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 330:armwave.c     **** 
 331:armwave.c     ****     test_create_waveform();
 2046              		.loc 1 331 5 is_stmt 1 view .LVU507
 2047 09e4 FEFFFFEB 		bl	test_create_waveform		@
 2048              	.LVL146:
 332:armwave.c     ****     test_create_gamma();
 2049              		.loc 1 332 5 view .LVU508
 2050              	.LBB9:
 2051              	.LBI6:
  76:armwave.c     **** {
 2052              		.loc 1 76 6 view .LVU509
  76:armwave.c     **** {
 2053              		.loc 1 76 6 is_stmt 0 view .LVU510
 2054 09e8 013084E2 		add	r3, r4, #1	@ _30, ivtmp.137,
 2055 09ec 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.137,
 2056 09f0 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 2057              	.LVL147:
 2058              	.L166:
 2059              	.LBB8:
  82:armwave.c     ****     }
 2060              		.loc 1 82 9 is_stmt 1 view .LVU511
 2061              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2062              		.loc 1 82 32 is_stmt 0 view .LVU512
 2063 09f4 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.137
 2064              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2065              		.loc 1 82 26 view .LVU513
 2066 09f8 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 2067              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2068              		.loc 1 82 32 view .LVU514
 2069 09fc 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 2070 0a00 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 2071 0a04 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 2072              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2073              		.loc 1 82 26 view .LVU515
 2074 0a08 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 2075 0a0c FEFFFFEB 		bl	pow		@
 2076              	.LVL148:
 2077              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2078              		.loc 1 82 49 view .LVU516
 2079 0a10 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 2080              	@ armwave.c:82:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  82:armwave.c     ****     }
 2081              		.loc 1 82 24 view .LVU517
 2082 0a14 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 2083 0a18 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 2084 0a1c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 2085              	.LVL149:
 2086              	@ armwave.c:81:     for(i = 0; i < 256; i++) {
  81:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2087              		.loc 1 81 5 view .LVU518
 2088 0a20 060054E1 		cmp	r4, r6	@ ivtmp.137, _31
 2089 0a24 F2FFFF1A 		bne	.L166		@,
 2090              	.LVL150:
  81:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2091              		.loc 1 81 5 view .LVU519
 2092              	.LBE8:
 2093              	.LBE9:
 333:armwave.c     **** 
 334:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2094              		.loc 1 334 5 is_stmt 1 view .LVU520
 2095 0a28 74FDFFEB 		bl	armwave_setup_render.constprop.0		@
 2096              	.LVL151:
 335:armwave.c     **** 
 336:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2097              		.loc 1 336 5 view .LVU521
 2098              	@ armwave.c:337: }
 337:armwave.c     **** }
 2099              		.loc 1 337 1 is_stmt 0 view .LVU522
 2100 0a2c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2101              		.cfi_restore 84
 2102              		.cfi_restore 85
 2103              		.cfi_restore 82
 2104              		.cfi_restore 83
 2105              		.cfi_restore 80
 2106              		.cfi_restore 81
 2107              		.cfi_def_cfa_offset 16
 2108              	@ armwave.c:336:     printf("armwave version: %s\n", ARMWAVE_VER);
 336:armwave.c     **** }
 2109              		.loc 1 336 5 view .LVU523
 2110 0a30 24109FE5 		ldr	r1, .L169+28	@,
 2111 0a34 24009FE5 		ldr	r0, .L169+32	@,
 2112              	@ armwave.c:337: }
 2113              		.loc 1 337 1 view .LVU524
 2114 0a38 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2115              		.cfi_restore 14
 2116              		.cfi_restore 6
 2117              		.cfi_restore 5
 2118              		.cfi_restore 4
 2119              		.cfi_def_cfa_offset 0
 2120              	@ armwave.c:336:     printf("armwave version: %s\n", ARMWAVE_VER);
 336:armwave.c     **** }
 2121              		.loc 1 336 5 view .LVU525
 2122 0a3c FEFFFFEA 		b	printf		@
 2123              	.LVL152:
 2124              	.L170:
 2125              		.align	3
 2126              	.L169:
 2127 0a40 000000C0 		.word	-1073741824
 2128 0a44 CCCCEC3F 		.word	1072483532
 2129 0a48 00000000 		.word	0
 2130 0a4c 00E06F40 		.word	1081073664
 2131 0a50 00007F43 		.word	1132396544
 2132 0a54 00000000 		.word	.LANCHOR1
 2133 0a58 FFFFFFFF 		.word	gamma_table-1
 2134 0a5c CC000000 		.word	.LC11
 2135 0a60 D4000000 		.word	.LC12
 2136              		.cfi_endproc
 2137              	.LFE66:
 2139              		.global	__aeabi_uidiv
 2140              		.align	2
 2141              		.global	armwave_test_generate
 2142              		.syntax unified
 2143              		.arm
 2144              		.fpu vfp
 2146              	armwave_test_generate:
 2147              	.LFB67:
 338:armwave.c     **** 
 339:armwave.c     **** void armwave_test_generate()
 340:armwave.c     **** {
 2148              		.loc 1 340 1 is_stmt 1 view -0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 8
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 341:armwave.c     **** 	uint32_t yy;
 2152              		.loc 1 341 2 view .LVU527
 342:armwave.c     **** 
 343:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2153              		.loc 1 343 5 view .LVU528
 2154              	@ armwave.c:340: {
 340:armwave.c     **** 	uint32_t yy;
 2155              		.loc 1 340 1 is_stmt 0 view .LVU529
 2156 0a64 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2157              		.cfi_def_cfa_offset 36
 2158              		.cfi_offset 4, -36
 2159              		.cfi_offset 5, -32
 2160              		.cfi_offset 6, -28
 2161              		.cfi_offset 7, -24
 2162              		.cfi_offset 8, -20
 2163              		.cfi_offset 9, -16
 2164              		.cfi_offset 10, -12
 2165              		.cfi_offset 11, -8
 2166              		.cfi_offset 14, -4
 2167              	@ armwave.c:343:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2168              		.loc 1 343 5 view .LVU530
 2169 0a68 0010A0E3 		mov	r1, #0	@,
 2170 0a6c 44419FE5 		ldr	r4, .L189	@ tmp269,
 2171              	@ armwave.c:340: {
 340:armwave.c     **** 	uint32_t yy;
 2172              		.loc 1 340 1 view .LVU531
 2173 0a70 0CD04DE2 		sub	sp, sp, #12	@,,
 2174              		.cfi_def_cfa_offset 48
 2175              	@ armwave.c:343:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2176              		.loc 1 343 5 view .LVU532
 2177 0a74 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 2178 0a78 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2179 0a7c FEFFFFEB 		bl	memset		@
 2180              	.LVL153:
 344:armwave.c     **** 
 345:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2181              		.loc 1 345 5 is_stmt 1 view .LVU533
 2182              	@ armwave.c:345:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2183              		.loc 1 345 45 is_stmt 0 view .LVU534
 2184 0a80 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2185              	@ armwave.c:345:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2186              		.loc 1 345 5 view .LVU535
 2187 0a84 020B55E3 		cmp	r5, #2048	@ _72,
 2188 0a88 4800008A 		bhi	.L171		@,
 2189 0a8c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2190              	@ armwave.c:345:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2191              		.loc 1 345 12 view .LVU536
 2192 0a90 00A0A0E3 		mov	r10, #0	@ yy,
 2193              	.LVL154:
 2194              	.L177:
 346:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2195              		.loc 1 346 9 is_stmt 1 discriminator 3 view .LVU537
 2196 0a94 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 2197              	.LBB12:
 2198              	.LBB13:
 2199              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 2200              		.loc 1 101 63 is_stmt 0 discriminator 3 view .LVU538
 2201 0a98 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2202              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2203              		.loc 1 104 5 discriminator 3 view .LVU539
 2204 0a9c 000056E3 		cmp	r6, #0	@ prephitmp_171,
 2205              	.LBE13:
 2206              	.LBE12:
 2207              	@ armwave.c:346:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2208              		.loc 1 346 9 discriminator 3 view .LVU540
 2209 0aa0 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 2210              	.LVL155:
 2211              	.LBB15:
 2212              	.LBI12:
  93:armwave.c     **** {
 2213              		.loc 1 93 6 is_stmt 1 discriminator 3 view .LVU541
 2214              	.LBB14:
  95:armwave.c     ****     uint32_t value, word;
 2215              		.loc 1 95 5 discriminator 3 view .LVU542
  96:armwave.c     ****     uint8_t *wave_base;
 2216              		.loc 1 96 5 discriminator 3 view .LVU543
  97:armwave.c     ****     uint8_t *write_buffer_base;
 2217              		.loc 1 97 5 discriminator 3 view .LVU544
  98:armwave.c     ****     uint8_t *write_buffer;
 2218              		.loc 1 98 5 discriminator 3 view .LVU545
  99:armwave.c     ****     
 2219              		.loc 1 99 5 discriminator 3 view .LVU546
 101:armwave.c     **** 
 2220              		.loc 1 101 5 discriminator 3 view .LVU547
 2221              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 2222              		.loc 1 101 63 is_stmt 0 discriminator 3 view .LVU548
 2223 0aa4 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 2224              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 2225              		.loc 1 101 40 discriminator 3 view .LVU549
 2226 0aa8 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2227              	.LVL156:
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2228              		.loc 1 104 5 is_stmt 1 discriminator 3 view .LVU550
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2229              		.loc 1 104 5 is_stmt 0 discriminator 3 view .LVU551
 2230 0aac 3900000A 		beq	.L173		@,
 2231              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2232              		.loc 1 104 11 view .LVU552
 2233 0ab0 0080A0E3 		mov	r8, #0	@ w,
 2234 0ab4 043043E2 		sub	r3, r3, #4	@ _77, _3,
 2235              	.LVL157:
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2236              		.loc 1 104 11 view .LVU553
 2237 0ab8 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 2238              	.LVL158:
 2239              	.L176:
 105:armwave.c     **** 
 2240              		.loc 1 105 9 is_stmt 1 view .LVU554
 2241              	@ armwave.c:105:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 105:armwave.c     **** 
 2242              		.loc 1 105 64 is_stmt 0 view .LVU555
 2243 0abc 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2244              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2245              		.loc 1 115 9 view .LVU556
 2246 0ac0 000059E3 		cmp	r9, #0	@ _4,
 2247              	@ armwave.c:105:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 105:armwave.c     **** 
 2248              		.loc 1 105 36 view .LVU557
 2249 0ac4 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2250              	@ armwave.c:105:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 105:armwave.c     **** 
 2251              		.loc 1 105 64 view .LVU558
 2252 0ac8 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 2253              	.LVL159:
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2254              		.loc 1 115 9 is_stmt 1 view .LVU559
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2255              		.loc 1 115 9 is_stmt 0 view .LVU560
 2256 0acc 2D00000A 		beq	.L174		@,
 2257 0ad0 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 2258 0ad4 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 2259              	.LVL160:
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2260              		.loc 1 115 9 view .LVU561
 2261 0ad8 03E08EE0 		add	lr, lr, r3	@ ivtmp.143, _16, tmp205
 2262              	.LVL161:
 2263              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2264              		.loc 1 115 16 view .LVU562
 2265 0adc 0010A0E3 		mov	r1, #0	@ yy,
 2266              	.LVL162:
 2267              	.L175:
 130:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2268              		.loc 1 130 13 is_stmt 1 view .LVU563
 2269              	@ armwave.c:130:             word = *(uint32_t*)(wave_base + yy);
 130:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2270              		.loc 1 130 18 is_stmt 0 view .LVU564
 2271 0ae0 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 2272              	.LVL163:
 134:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2273              		.loc 1 134 13 is_stmt 1 view .LVU565
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2274              		.loc 1 135 14 view .LVU566
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2275              		.loc 1 136 14 view .LVU567
 137:armwave.c     ****             	word >>= 8;
 2276              		.loc 1 137 14 view .LVU568
 2277              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2278              		.loc 1 135 42 is_stmt 0 view .LVU569
 2279 0ae4 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2280              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2281              		.loc 1 136 60 view .LVU570
 2282 0ae8 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2283              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2284              		.loc 1 135 34 view .LVU571
 2285 0aec 73C0EFE6 		uxtb	ip, r3	@ word, word
 2286              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 2287              		.loc 1 138 19 view .LVU572
 2288 0af0 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 2289              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2290              		.loc 1 137 44 view .LVU573
 2291 0af4 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 2292              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2293              		.loc 1 135 34 view .LVU574
 2294 0af8 7550EFE6 		uxtb	r5, r5	@ word, word
 2295              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2296              		.loc 1 137 44 view .LVU575
 2297 0afc 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 2298              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2299              		.loc 1 136 60 view .LVU576
 2300 0b00 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 2301              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 2302              		.loc 1 138 19 view .LVU577
 2303 0b04 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2304              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2305              		.loc 1 137 44 view .LVU578
 2306 0b08 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 2307              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2308              		.loc 1 135 34 view .LVU579
 2309 0b0c 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2310              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 2311              		.loc 1 138 19 view .LVU580
 2312 0b10 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2313              	.LVL164:
 2314              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2315              		.loc 1 137 44 view .LVU581
 2316 0b14 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 2317 0b18 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 2318              	.LVL165:
 138:armwave.c     ****     		}
 2319              		.loc 1 138 14 is_stmt 1 view .LVU582
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2320              		.loc 1 135 14 view .LVU583
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2321              		.loc 1 136 14 view .LVU584
 137:armwave.c     ****             	word >>= 8;
 2322              		.loc 1 137 14 view .LVU585
 2323              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2324              		.loc 1 135 42 is_stmt 0 view .LVU586
 2325 0b1c 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2326              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2327              		.loc 1 136 60 view .LVU587
 2328 0b20 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2329              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2330              		.loc 1 137 44 view .LVU588
 2331 0b24 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2332              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2333              		.loc 1 136 60 view .LVU589
 2334 0b28 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2335              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2336              		.loc 1 137 44 view .LVU590
 2337 0b2c 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2338              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2339              		.loc 1 136 60 view .LVU591
 2340 0b30 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2341              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2342              		.loc 1 115 37 view .LVU592
 2343 0b34 041081E2 		add	r1, r1, #4	@ yy, yy,
 2344              	.LVL166:
 2345              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2346              		.loc 1 137 44 view .LVU593
 2347 0b38 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2348              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2349              		.loc 1 115 9 view .LVU594
 2350 0b3c 010059E1 		cmp	r9, r1	@ _4, yy
 2351              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2352              		.loc 1 137 44 view .LVU595
 2353 0b40 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2354 0b44 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2355              	.LVL167:
 138:armwave.c     ****     		}
 2356              		.loc 1 138 14 is_stmt 1 view .LVU596
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2357              		.loc 1 135 14 view .LVU597
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2358              		.loc 1 136 14 view .LVU598
 137:armwave.c     ****             	word >>= 8;
 2359              		.loc 1 137 14 view .LVU599
 2360              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2361              		.loc 1 135 42 is_stmt 0 view .LVU600
 2362 0b48 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2363              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2364              		.loc 1 136 60 view .LVU601
 2365 0b4c 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2366              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2367              		.loc 1 137 44 view .LVU602
 2368 0b50 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2369 0b54 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2370 0b58 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2371 0b5c 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2372 0b60 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 138:armwave.c     ****     		}
 2373              		.loc 1 138 14 is_stmt 1 view .LVU603
 2374              	.LVL168:
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2375              		.loc 1 135 14 view .LVU604
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2376              		.loc 1 136 14 view .LVU605
 137:armwave.c     ****             	word >>= 8;
 2377              		.loc 1 137 14 view .LVU606
 2378              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2379              		.loc 1 135 42 is_stmt 0 view .LVU607
 2380 0b64 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2381              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2382              		.loc 1 136 60 view .LVU608
 2383 0b68 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2384              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2385              		.loc 1 137 44 view .LVU609
 2386 0b6c 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2387 0b70 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2388 0b74 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2389 0b78 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2390 0b7c 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 138:armwave.c     ****     		}
 2391              		.loc 1 138 14 is_stmt 1 view .LVU610
 2392              	.LVL169:
 2393              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2394              		.loc 1 115 9 is_stmt 0 view .LVU611
 2395 0b80 D6FFFF8A 		bhi	.L175		@,
 2396 0b84 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2397              	.LVL170:
 2398              	.L174:
 2399              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2400              		.loc 1 104 44 view .LVU612
 2401 0b88 018088E2 		add	r8, r8, #1	@ w, w,
 2402              	.LVL171:
 2403              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2404              		.loc 1 104 5 view .LVU613
 2405 0b8c 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2406 0b90 C9FFFF3A 		bcc	.L176		@,
 2407 0b94 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2408              	.LVL172:
 2409              	.L173:
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2410              		.loc 1 104 5 view .LVU614
 2411              	.LBE14:
 2412              	.LBE15:
 2413              	@ armwave.c:345:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 345:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2414              		.loc 1 345 28 discriminator 3 view .LVU615
 2415 0b98 0510A0E1 		mov	r1, r5	@, _72
 2416 0b9c 020BA0E3 		mov	r0, #2048	@,
 2417              	.LVL173:
 345:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2418              		.loc 1 345 28 discriminator 3 view .LVU616
 2419 0ba0 FEFFFFEB 		bl	__aeabi_uidiv		@
 2420              	.LVL174:
 2421              	@ armwave.c:345:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 345:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2422              		.loc 1 345 63 discriminator 3 view .LVU617
 2423 0ba4 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2424              	.LVL175:
 2425              	@ armwave.c:345:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 345:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2426              		.loc 1 345 5 discriminator 3 view .LVU618
 2427 0ba8 0A0050E1 		cmp	r0, r10	@, yy
 2428 0bac B8FFFF8A 		bhi	.L177		@,
 2429              	.LVL176:
 2430              	.L171:
 2431              	@ armwave.c:348: }
 347:armwave.c     ****     }
 348:armwave.c     **** }
 2432              		.loc 1 348 1 view .LVU619
 2433 0bb0 0CD08DE2 		add	sp, sp, #12	@,,
 2434              		.cfi_def_cfa_offset 36
 2435              		@ sp needed	@
 2436 0bb4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2437              	.L190:
 2438              		.align	2
 2439              	.L189:
 2440 0bb8 00000000 		.word	g_armwave_state
 2441              		.cfi_endproc
 2442              	.LFE67:
 2444              		.align	2
 2445              		.global	armwave_test_get_buffer
 2446              		.syntax unified
 2447              		.arm
 2448              		.fpu vfp
 2450              	armwave_test_get_buffer:
 2451              	.LFB68:
 349:armwave.c     **** 
 350:armwave.c     **** PyObject *armwave_test_get_buffer()
 351:armwave.c     **** {
 2452              		.loc 1 351 1 is_stmt 1 view -0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     PyObject *mv;
 2456              		.loc 1 352 5 view .LVU621
 353:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2457              		.loc 1 353 5 view .LVU622
 2458              	@ armwave.c:351: {
 351:armwave.c     ****     PyObject *mv;
 2459              		.loc 1 351 1 is_stmt 0 view .LVU623
 2460 0bbc 30402DE9 		push	{r4, r5, lr}	@
 2461              		.cfi_def_cfa_offset 12
 2462              		.cfi_offset 4, -12
 2463              		.cfi_offset 5, -8
 2464              		.cfi_offset 14, -4
 2465              	@ armwave.c:353:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2466              		.loc 1 353 22 view .LVU624
 2467 0bc0 2C00A0E3 		mov	r0, #44	@,
 2468              	@ armwave.c:351: {
 351:armwave.c     ****     PyObject *mv;
 2469              		.loc 1 351 1 view .LVU625
 2470 0bc4 0CD04DE2 		sub	sp, sp, #12	@,,
 2471              		.cfi_def_cfa_offset 24
 2472              	@ armwave.c:353:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2473              		.loc 1 353 22 view .LVU626
 2474 0bc8 FEFFFFEB 		bl	malloc		@
 2475              	.LVL177:
 2476              	@ armwave.c:355:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 354:armwave.c     ****     
 355:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2477              		.loc 1 355 5 view .LVU627
 2478 0bcc 3C409FE5 		ldr	r4, .L193	@ tmp118,
 2479              	@ armwave.c:353:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 353:armwave.c     ****     
 2480              		.loc 1 353 22 view .LVU628
 2481 0bd0 0050A0E1 		mov	r5, r0	@ tmp117,
 2482              	.LVL178:
 2483              		.loc 1 355 5 is_stmt 1 view .LVU629
 2484 0bd4 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2485              	.LVL179:
 2486              		.loc 1 355 5 is_stmt 0 view .LVU630
 2487 0bd8 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2488              	.LVL180:
 356:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2489              		.loc 1 356 5 is_stmt 1 view .LVU631
 2490              	@ armwave.c:356:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2491              		.loc 1 356 79 is_stmt 0 view .LVU632
 2492 0bdc 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2493              	@ armwave.c:356:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2494              		.loc 1 356 5 view .LVU633
 2495 0be0 08C0A0E3 		mov	ip, #8	@ tmp125,
 2496 0be4 0110A0E3 		mov	r1, #1	@ tmp126,
 2497 0be8 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2498 0bec 02108DE8 		stm	sp, {r1, ip}	@,,
 2499 0bf0 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.out_pixbuf
 2500 0bf4 0500A0E1 		mov	r0, r5	@, tmp117
 2501 0bf8 0010A0E3 		mov	r1, #0	@,
 2502 0bfc FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2503              	.LVL181:
 357:armwave.c     **** 
 358:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2504              		.loc 1 358 2 is_stmt 1 view .LVU634
 2505              	@ armwave.c:358: 	mv = PyMemoryView_FromBuffer(buf);
 2506              		.loc 1 358 7 is_stmt 0 view .LVU635
 2507 0c00 0500A0E1 		mov	r0, r5	@, tmp117
 2508              	@ armwave.c:359: }
 359:armwave.c     **** }
 2509              		.loc 1 359 1 view .LVU636
 2510 0c04 0CD08DE2 		add	sp, sp, #12	@,,
 2511              		.cfi_def_cfa_offset 12
 2512              		@ sp needed	@
 2513 0c08 3040BDE8 		pop	{r4, r5, lr}	@
 2514              		.cfi_restore 14
 2515              		.cfi_restore 5
 2516              		.cfi_restore 4
 2517              		.cfi_def_cfa_offset 0
 2518              	.LVL182:
 2519              	@ armwave.c:358: 	mv = PyMemoryView_FromBuffer(buf);
 358:armwave.c     **** }
 2520              		.loc 1 358 7 view .LVU637
 2521 0c0c FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2522              	.LVL183:
 2523              	.L194:
 358:armwave.c     **** }
 2524              		.loc 1 358 7 view .LVU638
 2525              		.align	2
 2526              	.L193:
 2527 0c10 00000000 		.word	g_armwave_state
 2528              		.cfi_endproc
 2529              	.LFE68:
 2531              		.align	2
 2532              		.global	armwave_test_dump_buffer_to_ppm
 2533              		.syntax unified
 2534              		.arm
 2535              		.fpu vfp
 2537              	armwave_test_dump_buffer_to_ppm:
 2538              	.LVL184:
 2539              	.LFB69:
 360:armwave.c     **** 
 361:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 362:armwave.c     **** {
 2540              		.loc 1 362 1 is_stmt 1 view -0
 2541              		.cfi_startproc
 2542              		@ args = 0, pretend = 0, frame = 0
 2543              		@ frame_needed = 0, uses_anonymous_args = 0
 2544              		@ link register save eliminated.
 363:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2545              		.loc 1 363 2 view .LVU640
 2546 0c14 08309FE5 		ldr	r3, .L196	@ tmp112,
 2547 0c18 0010A0E1 		mov	r1, r0	@, fn
 2548 0c1c 3C0093E5 		ldr	r0, [r3, #60]	@, g_armwave_state.out_pixbuf
 2549              	.LVL185:
 2550              		.loc 1 363 2 is_stmt 0 view .LVU641
 2551 0c20 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2552              	.LVL186:
 2553              	.L197:
 2554              		.loc 1 363 2 view .LVU642
 2555              		.align	2
 2556              	.L196:
 2557 0c24 00000000 		.word	g_armwave_state
 2558              		.cfi_endproc
 2559              	.LFE69:
 2561              		.align	2
 2562              		.global	armwave_cleanup
 2563              		.syntax unified
 2564              		.arm
 2565              		.fpu vfp
 2567              	armwave_cleanup:
 2568              	.LFB70:
 364:armwave.c     **** }
 365:armwave.c     **** 
 366:armwave.c     **** void armwave_cleanup()
 367:armwave.c     **** {
 2569              		.loc 1 367 1 is_stmt 1 view -0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 0
 2572              		@ frame_needed = 0, uses_anonymous_args = 0
 368:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2573              		.loc 1 368 2 view .LVU644
 2574              	@ armwave.c:367: {
 367:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2575              		.loc 1 367 1 is_stmt 0 view .LVU645
 2576 0c28 10402DE9 		push	{r4, lr}	@
 2577              		.cfi_def_cfa_offset 8
 2578              		.cfi_offset 4, -8
 2579              		.cfi_offset 14, -4
 2580              	@ armwave.c:368: 	free(g_armwave_state.out_pixbuf);
 2581              		.loc 1 368 22 view .LVU646
 2582 0c2c 28409FE5 		ldr	r4, .L200	@ tmp113,
 2583              	@ armwave.c:368: 	free(g_armwave_state.out_pixbuf);
 2584              		.loc 1 368 2 view .LVU647
 2585 0c30 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2586 0c34 FEFFFFEB 		bl	free		@
 2587              	.LVL187:
 369:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2588              		.loc 1 369 2 is_stmt 1 view .LVU648
 2589 0c38 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2590 0c3c FEFFFFEB 		bl	free		@
 2591              	.LVL188:
 370:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2592              		.loc 1 370 2 view .LVU649
 2593 0c40 700094E5 		ldr	r0, [r4, #112]	@, g_armwave_state.xcoord_to_xpixel
 2594 0c44 FEFFFFEB 		bl	free		@
 2595              	.LVL189:
 371:armwave.c     **** 
 372:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2596              		.loc 1 372 2 view .LVU650
 2597              	@ armwave.c:372: 	g_armwave_state.out_pixbuf = NULL;
 2598              		.loc 1 372 29 is_stmt 0 view .LVU651
 2599 0c48 0030A0E3 		mov	r3, #0	@ tmp120,
 2600 0c4c 3C3084E5 		str	r3, [r4, #60]	@ tmp120, g_armwave_state.out_pixbuf
 373:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2601              		.loc 1 373 2 is_stmt 1 view .LVU652
 2602              	@ armwave.c:373: 	g_armwave_state.ch1_buffer = NULL;
 2603              		.loc 1 373 29 is_stmt 0 view .LVU653
 2604 0c50 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 374:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2605              		.loc 1 374 2 is_stmt 1 view .LVU654
 2606              	@ armwave.c:374: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2607              		.loc 1 374 35 is_stmt 0 view .LVU655
 2608 0c54 703084E5 		str	r3, [r4, #112]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2609              	@ armwave.c:375: }
 375:armwave.c     **** }
 2610              		.loc 1 375 1 view .LVU656
 2611 0c58 1080BDE8 		pop	{r4, pc}	@
 2612              	.L201:
 2613              		.align	2
 2614              	.L200:
 2615 0c5c 00000000 		.word	g_armwave_state
 2616              		.cfi_endproc
 2617              	.LFE70:
 2619              		.section	.text.startup,"ax",%progbits
 2620              		.align	2
 2621              		.global	main
 2622              		.syntax unified
 2623              		.arm
 2624              		.fpu vfp
 2626              	main:
 2627              	.LVL190:
 2628              	.LFB71:
 376:armwave.c     **** 
 377:armwave.c     **** int main(int argc, char *argv[])
 378:armwave.c     **** {
 2629              		.loc 1 378 1 is_stmt 1 view -0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 8
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 379:armwave.c     ****     uint32_t *out_buffer;
 2633              		.loc 1 379 5 view .LVU658
 380:armwave.c     ****     uint32_t xx, yy, n;
 2634              		.loc 1 380 5 view .LVU659
 381:armwave.c     **** 
 382:armwave.c     ****     //printf("Starting armwave...\n");
 383:armwave.c     ****     armwave_init();
 2635              		.loc 1 383 5 view .LVU660
 2636              	.LBB20:
 2637              	.LBI20:
 146:armwave.c     **** {
 2638              		.loc 1 146 6 view .LVU661
 2639              	.LBB21:
 148:armwave.c     **** }
 2640              		.loc 1 148 5 view .LVU662
 2641              	.LBE21:
 2642              	.LBE20:
 2643              	@ armwave.c:378: {
 378:armwave.c     ****     uint32_t *out_buffer;
 2644              		.loc 1 378 1 is_stmt 0 view .LVU663
 2645 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2646              		.cfi_def_cfa_offset 36
 2647              		.cfi_offset 4, -36
 2648              		.cfi_offset 5, -32
 2649              		.cfi_offset 6, -28
 2650              		.cfi_offset 7, -24
 2651              		.cfi_offset 8, -20
 2652              		.cfi_offset 9, -16
 2653              		.cfi_offset 10, -12
 2654              		.cfi_offset 11, -8
 2655              		.cfi_offset 14, -4
 2656 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2657              		.cfi_def_cfa_offset 48
 2658              	.LBB25:
 2659              	.LBB22:
 2660              	@ armwave.c:148:     g_armwave_state.flags = 0;
 148:armwave.c     **** }
 2661              		.loc 1 148 27 view .LVU664
 2662 0008 68919FE5 		ldr	r9, .L222	@ tmp267,
 2663              	.LBE22:
 2664              	.LBE25:
 2665              	@ armwave.c:392:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 384:armwave.c     **** 
 385:armwave.c     ****     //printf("Creating test waveform...\n");
 386:armwave.c     ****     test_create_waveform();
 387:armwave.c     **** 
 388:armwave.c     ****     //printf("Creating gamma LUT...\n");
 389:armwave.c     ****     test_create_gamma();
 390:armwave.c     **** 
 391:armwave.c     ****     //printf("Setting up render...\n");
 392:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2666              		.loc 1 392 5 view .LVU665
 2667 000c 68219FE5 		ldr	r2, .L222+4	@ ivtmp_191,
 2668              	.LBB26:
 2669              	.LBB23:
 2670              	@ armwave.c:148:     g_armwave_state.flags = 0;
 148:armwave.c     **** }
 2671              		.loc 1 148 27 view .LVU666
 2672 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2673              	.LBE23:
 2674              	.LBE26:
 2675              	@ armwave.c:392:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2676              		.loc 1 392 5 view .LVU667
 2677 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2678              	.LBB27:
 2679              	.LBB24:
 2680              	@ armwave.c:148:     g_armwave_state.flags = 0;
 148:armwave.c     **** }
 2681              		.loc 1 148 27 view .LVU668
 2682 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2683              	.LBE24:
 2684              	.LBE27:
 386:armwave.c     **** 
 2685              		.loc 1 386 5 is_stmt 1 view .LVU669
 2686 001c FEFFFFEB 		bl	test_create_waveform		@
 2687              	.LVL191:
 389:armwave.c     **** 
 2688              		.loc 1 389 5 view .LVU670
 2689 0020 FEFFFFEB 		bl	test_create_gamma		@
 2690              	.LVL192:
 2691              		.loc 1 392 5 view .LVU671
 2692 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 2693              	.LVL193:
 393:armwave.c     **** 
 394:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 395:armwave.c     **** 
 396:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2694              		.loc 1 396 5 view .LVU672
 2695              		.loc 1 396 5 is_stmt 0 view .LVU673
 2696 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2697              	.LVL194:
 2698              	.L203:
 2699              	@ armwave.c:397:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 397:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2700              		.loc 1 397 9 view .LVU674
 2701 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2702 0030 4900008A 		bhi	.L211		@,
 2703 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2704              	@ armwave.c:397:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2705              		.loc 1 397 16 view .LVU675
 2706 0038 0080A0E3 		mov	r8, #0	@ yy,
 2707 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2708              	.LVL195:
 2709              	.L208:
 398:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 399:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2710              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU676
 2711 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2712              	.LBB28:
 2713              	.LBB29:
 2714              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 2715              		.loc 1 101 63 is_stmt 0 discriminator 3 view .LVU677
 2716 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2717              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2718              		.loc 1 104 5 discriminator 3 view .LVU678
 2719 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2720              	.LBE29:
 2721              	.LBE28:
 2722              	@ armwave.c:399:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2723              		.loc 1 399 13 discriminator 3 view .LVU679
 2724 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2725              	.LVL196:
 2726              	.LBB31:
 2727              	.LBI28:
  93:armwave.c     **** {
 2728              		.loc 1 93 6 is_stmt 1 discriminator 3 view .LVU680
 2729              	.LBB30:
  95:armwave.c     ****     uint32_t value, word;
 2730              		.loc 1 95 5 discriminator 3 view .LVU681
  96:armwave.c     ****     uint8_t *wave_base;
 2731              		.loc 1 96 5 discriminator 3 view .LVU682
  97:armwave.c     ****     uint8_t *write_buffer_base;
 2732              		.loc 1 97 5 discriminator 3 view .LVU683
  98:armwave.c     ****     uint8_t *write_buffer;
 2733              		.loc 1 98 5 discriminator 3 view .LVU684
  99:armwave.c     ****     
 2734              		.loc 1 99 5 discriminator 3 view .LVU685
 101:armwave.c     **** 
 2735              		.loc 1 101 5 discriminator 3 view .LVU686
 2736              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 2737              		.loc 1 101 63 is_stmt 0 discriminator 3 view .LVU687
 2738 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2739              	@ armwave.c:101:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 101:armwave.c     **** 
 2740              		.loc 1 101 40 discriminator 3 view .LVU688
 2741 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2742              	.LVL197:
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2743              		.loc 1 104 5 is_stmt 1 discriminator 3 view .LVU689
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2744              		.loc 1 104 5 is_stmt 0 discriminator 3 view .LVU690
 2745 0058 3900000A 		beq	.L204		@,
 2746              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2747              		.loc 1 104 11 view .LVU691
 2748 005c 0070A0E3 		mov	r7, #0	@ w,
 2749 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2750              	.LVL198:
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2751              		.loc 1 104 11 view .LVU692
 2752 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2753              	.LVL199:
 2754              	.L207:
 105:armwave.c     **** 
 2755              		.loc 1 105 9 is_stmt 1 view .LVU693
 2756              	@ armwave.c:105:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 105:armwave.c     **** 
 2757              		.loc 1 105 64 is_stmt 0 view .LVU694
 2758 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2759              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2760              		.loc 1 115 9 view .LVU695
 2761 006c 00005AE3 		cmp	r10, #0	@ _2,
 2762              	@ armwave.c:105:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 105:armwave.c     **** 
 2763              		.loc 1 105 36 view .LVU696
 2764 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2765              	@ armwave.c:105:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 105:armwave.c     **** 
 2766              		.loc 1 105 64 view .LVU697
 2767 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2768              	.LVL200:
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2769              		.loc 1 115 9 is_stmt 1 view .LVU698
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2770              		.loc 1 115 9 is_stmt 0 view .LVU699
 2771 0078 2D00000A 		beq	.L205		@,
 2772 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2773 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2774              	.LVL201:
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2775              		.loc 1 115 9 view .LVU700
 2776 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.156, _20, tmp202
 2777              	.LVL202:
 2778              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2779              		.loc 1 115 16 view .LVU701
 2780 0088 0010A0E3 		mov	r1, #0	@ yy,
 2781              	.LVL203:
 2782              	.L206:
 130:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2783              		.loc 1 130 13 is_stmt 1 view .LVU702
 2784              	@ armwave.c:130:             word = *(uint32_t*)(wave_base + yy);
 130:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2785              		.loc 1 130 18 is_stmt 0 view .LVU703
 2786 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2787              	.LVL204:
 134:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2788              		.loc 1 134 13 is_stmt 1 view .LVU704
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2789              		.loc 1 135 14 view .LVU705
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2790              		.loc 1 136 14 view .LVU706
 137:armwave.c     ****             	word >>= 8;
 2791              		.loc 1 137 14 view .LVU707
 2792              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2793              		.loc 1 135 42 is_stmt 0 view .LVU708
 2794 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2795              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2796              		.loc 1 136 60 view .LVU709
 2797 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2798              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2799              		.loc 1 135 34 view .LVU710
 2800 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2801              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 2802              		.loc 1 138 19 view .LVU711
 2803 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2804              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2805              		.loc 1 137 44 view .LVU712
 2806 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2807              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2808              		.loc 1 135 34 view .LVU713
 2809 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2810              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2811              		.loc 1 137 44 view .LVU714
 2812 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2813              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2814              		.loc 1 136 60 view .LVU715
 2815 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2816              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 2817              		.loc 1 138 19 view .LVU716
 2818 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2819              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2820              		.loc 1 137 44 view .LVU717
 2821 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2822              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2823              		.loc 1 135 34 view .LVU718
 2824 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2825              	@ armwave.c:138:             	word >>= 8;
 138:armwave.c     ****     		}
 2826              		.loc 1 138 19 view .LVU719
 2827 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2828              	.LVL205:
 2829              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2830              		.loc 1 137 44 view .LVU720
 2831 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2832 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2833              	.LVL206:
 138:armwave.c     ****     		}
 2834              		.loc 1 138 14 is_stmt 1 view .LVU721
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2835              		.loc 1 135 14 view .LVU722
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2836              		.loc 1 136 14 view .LVU723
 137:armwave.c     ****             	word >>= 8;
 2837              		.loc 1 137 14 view .LVU724
 2838              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2839              		.loc 1 135 42 is_stmt 0 view .LVU725
 2840 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2841              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2842              		.loc 1 136 60 view .LVU726
 2843 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2844              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2845              		.loc 1 137 44 view .LVU727
 2846 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2847              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2848              		.loc 1 136 60 view .LVU728
 2849 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2850              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2851              		.loc 1 137 44 view .LVU729
 2852 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2853              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2854              		.loc 1 136 60 view .LVU730
 2855 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2856              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2857              		.loc 1 115 37 view .LVU731
 2858 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2859              	.LVL207:
 2860              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2861              		.loc 1 137 44 view .LVU732
 2862 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2863              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2864              		.loc 1 115 9 view .LVU733
 2865 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2866              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2867              		.loc 1 137 44 view .LVU734
 2868 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2869 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2870              	.LVL208:
 138:armwave.c     ****     		}
 2871              		.loc 1 138 14 is_stmt 1 view .LVU735
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2872              		.loc 1 135 14 view .LVU736
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2873              		.loc 1 136 14 view .LVU737
 137:armwave.c     ****             	word >>= 8;
 2874              		.loc 1 137 14 view .LVU738
 2875              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2876              		.loc 1 135 42 is_stmt 0 view .LVU739
 2877 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2878              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2879              		.loc 1 136 60 view .LVU740
 2880 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2881              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2882              		.loc 1 137 44 view .LVU741
 2883 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2884 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2885 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2886 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2887 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 138:armwave.c     ****     		}
 2888              		.loc 1 138 14 is_stmt 1 view .LVU742
 2889              	.LVL209:
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2890              		.loc 1 135 14 view .LVU743
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2891              		.loc 1 136 14 view .LVU744
 137:armwave.c     ****             	word >>= 8;
 2892              		.loc 1 137 14 view .LVU745
 2893              	@ armwave.c:135:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 135:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2894              		.loc 1 135 42 is_stmt 0 view .LVU746
 2895 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2896              	@ armwave.c:136:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 136:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2897              		.loc 1 136 60 view .LVU747
 2898 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2899              	@ armwave.c:137:             	*(write_buffer + scale_value) += 1;
 137:armwave.c     ****             	word >>= 8;
 2900              		.loc 1 137 44 view .LVU748
 2901 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2902 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2903 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2904 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2905 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 138:armwave.c     ****     		}
 2906              		.loc 1 138 14 is_stmt 1 view .LVU749
 2907              	.LVL210:
 2908              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2909              		.loc 1 115 9 is_stmt 0 view .LVU750
 2910 012c D6FFFF8A 		bhi	.L206		@,
 2911 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2912              	.LVL211:
 2913              	.L205:
 2914              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2915              		.loc 1 104 44 view .LVU751
 2916 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2917              	.LVL212:
 2918              	@ armwave.c:104:     for(w = 0; w < g_armwave_state.waves; w++) {
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2919              		.loc 1 104 5 view .LVU752
 2920 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2921 013c C9FFFF3A 		bcc	.L207		@,
 2922 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2923              	.LVL213:
 2924              	.L204:
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2925              		.loc 1 104 5 view .LVU753
 2926              	.LBE30:
 2927              	.LBE31:
 2928              	@ armwave.c:397:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 397:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2929              		.loc 1 397 32 discriminator 3 view .LVU754
 2930 0144 0510A0E1 		mov	r1, r5	@, _61
 2931 0148 020BA0E3 		mov	r0, #2048	@,
 2932              	.LVL214:
 397:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2933              		.loc 1 397 32 discriminator 3 view .LVU755
 2934 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2935              	.LVL215:
 2936              	@ armwave.c:397:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 397:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2937              		.loc 1 397 67 discriminator 3 view .LVU756
 2938 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2939              	.LVL216:
 2940              	@ armwave.c:397:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 397:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2941              		.loc 1 397 9 discriminator 3 view .LVU757
 2942 0154 080050E1 		cmp	r0, r8	@, yy
 2943 0158 B8FFFF8A 		bhi	.L208		@,
 2944              	.LVL217:
 2945              	.L211:
 2946              	@ armwave.c:396:     for(n = 0; n < 5000; n++) {
 396:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2947              		.loc 1 396 5 discriminator 2 view .LVU758
 2948 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2949 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2950 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2951 0168 AFFFFF1A 		bne	.L203		@,
 2952 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 400:armwave.c     ****         }
 401:armwave.c     ****     }
 402:armwave.c     **** 
 403:armwave.c     ****     /*
 404:armwave.c     ****     printf("Creating pixbuf\n");
 405:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 406:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 407:armwave.c     **** 
 408:armwave.c     ****     printf("Dumping pixbuf\n");
 409:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 410:armwave.c     ****     */
 411:armwave.c     **** 
 412:armwave.c     ****     return 0;
 2953              		.loc 1 412 5 is_stmt 1 view .LVU759
 2954              	@ armwave.c:413: }
 413:armwave.c     **** }...
 2955              		.loc 1 413 1 is_stmt 0 view .LVU760
 2956 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2957              		.cfi_def_cfa_offset 36
 2958              		@ sp needed	@
 2959 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2960              	.L223:
 2961              		.align	2
 2962              	.L222:
 2963 0178 00000000 		.word	g_armwave_state
 2964 017c 88130000 		.word	5000
 2965              		.cfi_endproc
 2966              	.LFE71:
 2968              		.global	mod_depth
 2969              		.global	overall_scale
 2970              		.comm	gamma_table,256,4
 2971              		.comm	test_wave_buffer,131072,4
 2972              		.comm	g_armwave_state,116,4
 2973              		.section	.rodata
 2974              		.align	2
 2975              		.set	.LANCHOR0,. + 0
 2978              	__PRETTY_FUNCTION__.16995:
 2979 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2979      6176655F 
 2979      73657475 
 2979      705F7265 
 2979      6E646572 
 2980 0015 000000   		.space	3
 2983              	__PRETTY_FUNCTION__.17018:
 2984 0018 61726D77 		.ascii	"armwave_fill_pixbuf\000"
 2984      6176655F 
 2984      66696C6C 
 2984      5F706978 
 2984      62756600 
 2987              	__PRETTY_FUNCTION__.17041:
 2988 002c 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 2988      6176655F 
 2988      66696C6C 
 2988      5F706978 
 2988      62756632 
 2989              		.data
 2990              		.align	2
 2991              		.set	.LANCHOR2,. + 0
 2994              	overall_scale:
 2995 0000 0000A041 		.word	1101004800
 2996              		.bss
 2997              		.align	2
 2998              		.set	.LANCHOR1,. + 0
 3001              	mod_depth:
 3002 0000 00000000 		.space	4
 3003              		.section	.rodata.str1.4,"aMS",%progbits,1
 3004              		.align	2
 3005              	.LC0:
 3006 0000 61726D77 		.ascii	"armwave.c\000"
 3006      6176652E 
 3006      6300
 3007 000a 0000     		.space	2
 3008              	.LC1:
 3009 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3009      6D776176 
 3009      655F7374 
 3009      6174652E 
 3009      6368315F 
 3010 002f 00       		.space	1
 3011              	.LC2:
 3012 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3012      6D776176 
 3012      655F7374 
 3012      6174652E 
 3012      78636F6F 
 3013 0059 000000   		.space	3
 3014              	.LC3:
 3015 005c 73746172 		.ascii	"start_point < end_point\000"
 3015      745F706F 
 3015      696E7420 
 3015      3C20656E 
 3015      645F706F 
 3016              	.LC4:
 3017 0074 28746172 		.ascii	"(target_height % 256) == 0\000"
 3017      6765745F 
 3017      68656967 
 3017      68742025 
 3017      20323536 
 3018 008f 00       		.space	1
 3019              	.LC5:
 3020 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 3020      62756666 
 3020      65722021 
 3020      3D204E55 
 3020      4C4C00
 3021 00a3 00       		.space	1
 3022              	.LC6:
 3023 00a4 776200   		.ascii	"wb\000"
 3024 00a7 00       		.space	1
 3025              	.LC7:
 3026 00a8 50330A00 		.ascii	"P3\012\000"
 3027              	.LC8:
 3028 00ac 25642025 		.ascii	"%d %d\012\000"
 3028      640A00
 3029 00b3 00       		.space	1
 3030              	.LC9:
 3031 00b4 3235350A 		.ascii	"255\012\000"
 3031      00
 3032 00b9 000000   		.space	3
 3033              	.LC10:
 3034 00bc 25336420 		.ascii	"%3d %3d %3d\012\000"
 3034      25336420 
 3034      2533640A 
 3034      00
 3035 00c9 000000   		.space	3
 3036              	.LC11:
 3037 00cc 76302E30 		.ascii	"v0.0.1\000"
 3037      2E3100
 3038 00d3 00       		.space	1
 3039              	.LC12:
 3040 00d4 61726D77 		.ascii	"armwave version: %s\012\000"
 3040      61766520 
 3040      76657273 
 3040      696F6E3A 
 3040      2025730A 
 3041              		.text
 3042              	.Letext0:
 3043              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3044              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3045              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3046              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3047              		.file 6 "/usr/include/stdio.h"
 3048              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3049              		.file 8 "/usr/include/errno.h"
 3050              		.file 9 "/usr/include/unistd.h"
 3051              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3052              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3053              		.file 12 "/usr/local/include/python3.8/pyport.h"
 3054              		.file 13 "/usr/include/math.h"
 3055              		.file 14 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3056              		.file 15 "/usr/include/time.h"
 3057              		.file 16 "/usr/local/include/python3.8/pymem.h"
 3058              		.file 17 "/usr/local/include/python3.8/object.h"
 3059              		.file 18 "/usr/local/include/python3.8/cpython/object.h"
 3060              		.file 19 "/usr/local/include/python3.8/methodobject.h"
 3061              		.file 20 "/usr/local/include/python3.8/descrobject.h"
 3062              		.file 21 "/usr/local/include/python3.8/pyhash.h"
 3063              		.file 22 "/usr/local/include/python3.8/pydebug.h"
 3064              		.file 23 "/usr/local/include/python3.8/bytearrayobject.h"
 3065              		.file 24 "/usr/local/include/python3.8/bytesobject.h"
 3066              		.file 25 "/usr/local/include/python3.8/unicodeobject.h"
 3067              		.file 26 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3068              		.file 27 "/usr/local/include/python3.8/longintrepr.h"
 3069              		.file 28 "/usr/local/include/python3.8/longobject.h"
 3070              		.file 29 "/usr/local/include/python3.8/boolobject.h"
 3071              		.file 30 "/usr/local/include/python3.8/floatobject.h"
 3072              		.file 31 "/usr/local/include/python3.8/complexobject.h"
 3073              		.file 32 "/usr/local/include/python3.8/rangeobject.h"
 3074              		.file 33 "/usr/local/include/python3.8/memoryobject.h"
 3075              		.file 34 "/usr/local/include/python3.8/tupleobject.h"
 3076              		.file 35 "/usr/local/include/python3.8/listobject.h"
 3077              		.file 36 "/usr/local/include/python3.8/dictobject.h"
 3078              		.file 37 "/usr/local/include/python3.8/odictobject.h"
 3079              		.file 38 "/usr/local/include/python3.8/enumobject.h"
 3080              		.file 39 "/usr/local/include/python3.8/setobject.h"
 3081              		.file 40 "/usr/local/include/python3.8/moduleobject.h"
 3082              		.file 41 "/usr/local/include/python3.8/funcobject.h"
 3083              		.file 42 "/usr/local/include/python3.8/classobject.h"
 3084              		.file 43 "/usr/local/include/python3.8/fileobject.h"
 3085              		.file 44 "/usr/local/include/python3.8/cpython/fileobject.h"
 3086              		.file 45 "/usr/local/include/python3.8/pycapsule.h"
 3087              		.file 46 "/usr/local/include/python3.8/traceback.h"
 3088              		.file 47 "/usr/local/include/python3.8/sliceobject.h"
 3089              		.file 48 "/usr/local/include/python3.8/cellobject.h"
 3090              		.file 49 "/usr/local/include/python3.8/iterobject.h"
 3091              		.file 50 "/usr/local/include/python3.8/pystate.h"
 3092              		.file 51 "/usr/local/include/python3.8/cpython/pystate.h"
 3093              		.file 52 "/usr/local/include/python3.8/genobject.h"
 3094              		.file 53 "/usr/local/include/python3.8/weakrefobject.h"
 3095              		.file 54 "/usr/local/include/python3.8/structseq.h"
 3096              		.file 55 "/usr/local/include/python3.8/namespaceobject.h"
 3097              		.file 56 "/usr/local/include/python3.8/picklebufobject.h"
 3098              		.file 57 "/usr/local/include/python3.8/codecs.h"
 3099              		.file 58 "/usr/local/include/python3.8/pyerrors.h"
 3100              		.file 59 "/usr/local/include/python3.8/context.h"
 3101              		.file 60 "/usr/local/include/python3.8/modsupport.h"
 3102              		.file 61 "/usr/local/include/python3.8/code.h"
 3103              		.file 62 "/usr/local/include/python3.8/pythonrun.h"
 3104              		.file 63 "/usr/local/include/python3.8/ceval.h"
 3105              		.file 64 "/usr/local/include/python3.8/import.h"
 3106              		.file 65 "/usr/local/include/python3.8/bltinmodule.h"
 3107              		.file 66 "/usr/local/include/python3.8/pyctype.h"
 3108              		.file 67 "armwave.h"
 3109              		.file 68 "/usr/include/stdlib.h"
 3110              		.file 69 "/usr/local/include/python3.8/cpython/abstract.h"
 3111              		.file 70 "<built-in>"
 3112              		.file 71 "/usr/include/assert.h"
 3113              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
