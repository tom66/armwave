   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LVL0:
  83              	.LFB72:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  97:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  98:armwave.c     ****  */
  99:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 100:armwave.c     **** {
 101:armwave.c     ****     int yy, ys, w, scale_value;
 102:armwave.c     ****     uint32_t value, word;
 103:armwave.c     ****     uint8_t *wave_base;
 104:armwave.c     ****     uint8_t *write_buffer_base;
 105:armwave.c     ****     uint8_t *write_buffer;
 106:armwave.c     ****     
 107:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 108:armwave.c     **** 
 109:armwave.c     ****     // roll through each waveform
 110:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 111:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 112:armwave.c     **** 
 113:armwave.c     ****         // roll through y and render the slice into the out buffer
 114:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 115:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 116:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 117:armwave.c     **** 
 118:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 119:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 120:armwave.c     ****                 scale_value = (word & 0xff);
 121:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 122:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 123:armwave.c     ****                 word >>= 8;
 124:armwave.c     ****             }
 125:armwave.c     ****         }
 126:armwave.c     ****     }
 127:armwave.c     **** }
 128:armwave.c     **** 
 129:armwave.c     **** void armwave_init()
 130:armwave.c     **** {
 131:armwave.c     ****     g_armwave_state.flags = 0;
 132:armwave.c     **** }
 133:armwave.c     **** 
 134:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  85              		.loc 1 134 6 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 135:armwave.c     **** {
 136:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 136 5 view .LVU1
 137:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 137 5 view .LVU2
 138:armwave.c     **** 
 139:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 139 5 view .LVU3
 140:armwave.c     **** 
 141:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 142:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 142 5 view .LVU4
  93              	@ armwave.c:134: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 134:armwave.c     **** {
  94              		.loc 1 134 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:145:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 143:armwave.c     **** 
 144:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 145:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 102              		.loc 1 145 5 view .LVU6
 103 0004 012C41E2 		sub	r2, r1, #256	@ tmp143, target_height,
 104              	@ armwave.c:142:     g_armwave_state.wave_buffer = wave_buffer;
 142:armwave.c     **** 
 105              		.loc 1 142 33 view .LVU7
 106 0008 B0419FE5 		ldr	r4, .L21+8	@ tmp218,
 107 000c B0319FE5 		ldr	r3, .L21+12	@ tmp142,
 108              	@ armwave.c:145:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109              		.loc 1 145 5 view .LVU8
 110 0010 012CD2E3 		bics	r2, r2, #256	@ tmp220, tmp143,
 111              	@ armwave.c:134: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 134:armwave.c     **** {
 112              		.loc 1 134 6 view .LVU9
 113 0014 028B2DED 		vpush.64	{d8}	@
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 80, -24
 116              		.cfi_offset 81, -20
 117              	@ armwave.c:134: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 134:armwave.c     **** {
 118              		.loc 1 134 6 view .LVU10
 119 0018 0050A0E1 		mov	r5, r0	@ target_width, target_width
 120              	@ armwave.c:142:     g_armwave_state.wave_buffer = wave_buffer;
 142:armwave.c     **** 
 121              		.loc 1 142 33 view .LVU11
 122 001c 143084E5 		str	r3, [r4, #20]	@ tmp142, g_armwave_state.wave_buffer
 123              		.loc 1 145 5 is_stmt 1 view .LVU12
 124 0020 4A00000A 		beq	.L2		@,
 125 0024 013B41E2 		sub	r3, r1, #1024	@ tmp145, target_height,
 126 0028 013BD3E3 		bics	r3, r3, #1024	@ tmp221, tmp145,
 127 002c 5200001A 		bne	.L17		@,
 146:armwave.c     **** 
 147:armwave.c     ****     if(target_height == 256) {
 148:armwave.c     ****         g_armwave_state.row_shift = 8;
 149:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 150:armwave.c     ****     } else if(target_height == 512) {
 128              		.loc 1 150 12 view .LVU13
 151:armwave.c     ****         g_armwave_state.row_shift = 9;
 152:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 153:armwave.c     ****     } else if(target_height == 1024) {
 129              		.loc 1 153 12 view .LVU14
 130              	@ armwave.c:153:     } else if(target_height == 1024) {
 131              		.loc 1 153 14 is_stmt 0 view .LVU15
 132 0030 010B51E3 		cmp	r1, #1024	@ target_height,
 133 0034 4C00000A 		beq	.L18		@,
 154:armwave.c     ****         g_armwave_state.row_shift = 10;
 155:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 156:armwave.c     ****     } else if(target_height == 2048) {
 134              		.loc 1 156 12 is_stmt 1 view .LVU16
 135              	@ armwave.c:156:     } else if(target_height == 2048) {
 136              		.loc 1 156 14 is_stmt 0 view .LVU17
 137 0038 020B51E3 		cmp	r1, #2048	@ target_height,
 157:armwave.c     ****         g_armwave_state.row_shift = 11;
 138              		.loc 1 157 9 is_stmt 1 view .LVU18
 139              	@ armwave.c:157:         g_armwave_state.row_shift = 11;
 140              		.loc 1 157 35 is_stmt 0 view .LVU19
 141 003c 0B20A003 		moveq	r2, #11	@ tmp165,
 142 0040 80319F05 		ldreq	r3, .L21+16	@ tmp163,
 143 0044 F424C401 		strdeq	r2, [r4, #68]	@, tmp218,
 158:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 144              		.loc 1 158 9 is_stmt 1 view .LVU20
 145              	.L5:
 159:armwave.c     ****     } 
 160:armwave.c     **** 
 161:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 162:armwave.c     ****     g_armwave_state.xstride = target_height;
 146              		.loc 1 162 5 view .LVU21
 147              	@ armwave.c:166:     g_armwave_state.size = target_height * target_width;
 163:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 164:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 165:armwave.c     ****     g_armwave_state.waves = waves;
 166:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 148              		.loc 1 166 42 is_stmt 0 view .LVU22
 149 0048 950102E0 		mul	r2, r5, r1	@ tmp174, target_width, target_height
 150              	@ armwave.c:168:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 168:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 151              		.loc 1 168 68 view .LVU23
 152 004c 0534A0E1 		lsl	r3, r5, #8	@ _11, target_width,
 153              	@ armwave.c:163:     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 154              		.loc 1 163 44 view .LVU24
 155 0050 2104A0E1 		lsr	r0, r1, #8	@ tmp168, target_height,
 156              	.LVL1:
 157              	@ armwave.c:162:     g_armwave_state.xstride = target_height;
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 158              		.loc 1 162 29 view .LVU25
 159 0054 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 163:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 160              		.loc 1 163 5 is_stmt 1 view .LVU26
 161              	@ armwave.c:170:     g_armwave_state.target_height = target_height;
 169:armwave.c     ****     g_armwave_state.target_width = target_width;
 170:armwave.c     ****     g_armwave_state.target_height = target_height;
 162              		.loc 1 170 35 is_stmt 0 view .LVU27
 163 0058 401084E5 		str	r1, [r4, #64]	@ target_height, g_armwave_state.target_height
 164              	@ armwave.c:166:     g_armwave_state.size = target_height * target_width;
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 165              		.loc 1 166 26 view .LVU28
 166 005c 382084E5 		str	r2, [r4, #56]	@ tmp174, g_armwave_state.size
 167              	@ armwave.c:172:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 171:armwave.c     **** 
 172:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 168              		.loc 1 172 5 view .LVU29
 169 0060 0310A0E1 		mov	r1, r3	@, _11
 170              	.LVL2:
 171              	@ armwave.c:164:     g_armwave_state.wave_stride = wave_stride;
 164:armwave.c     ****     g_armwave_state.waves = waves;
 172              		.loc 1 164 33 view .LVU30
 173 0064 022BA0E3 		mov	r2, #2048	@ tmp170,
 174              	@ armwave.c:163:     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 175              		.loc 1 163 28 view .LVU31
 176 0068 1C0084E5 		str	r0, [r4, #28]	@ tmp168, g_armwave_state.vscale
 164:armwave.c     ****     g_armwave_state.waves = waves;
 177              		.loc 1 164 5 is_stmt 1 view .LVU32
 178              	@ armwave.c:165:     g_armwave_state.waves = waves;
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 179              		.loc 1 165 27 is_stmt 0 view .LVU33
 180 006c 4060A0E3 		mov	r6, #64	@ tmp172,
 181              	@ armwave.c:168:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 182              		.loc 1 168 34 view .LVU34
 183 0070 343084E5 		str	r3, [r4, #52]	@ _11, g_armwave_state.ch_buff_size
 184              	@ armwave.c:172:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 185              		.loc 1 172 5 view .LVU35
 186 0074 50019FE5 		ldr	r0, .L21+20	@,
 187              	@ armwave.c:167:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 188              		.loc 1 167 37 view .LVU36
 189 0078 013CA0E3 		mov	r3, #256	@ tmp176,
 190              	@ armwave.c:169:     g_armwave_state.target_width = target_width;
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 191              		.loc 1 169 34 view .LVU37
 192 007c 3C5084E5 		str	r5, [r4, #60]	@ target_width, g_armwave_state.target_width
 193              	@ armwave.c:164:     g_armwave_state.wave_stride = wave_stride;
 164:armwave.c     ****     g_armwave_state.waves = waves;
 194              		.loc 1 164 33 view .LVU38
 195 0080 202084E5 		str	r2, [r4, #32]	@ tmp170, g_armwave_state.wave_stride
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 196              		.loc 1 165 5 is_stmt 1 view .LVU39
 197              	@ armwave.c:165:     g_armwave_state.waves = waves;
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 198              		.loc 1 165 27 is_stmt 0 view .LVU40
 199 0084 246084E5 		str	r6, [r4, #36]	@ tmp172, g_armwave_state.waves
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 200              		.loc 1 166 5 is_stmt 1 view .LVU41
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 201              		.loc 1 167 5 view .LVU42
 202              	@ armwave.c:167:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 203              		.loc 1 167 37 is_stmt 0 view .LVU43
 204 0088 283084E5 		str	r3, [r4, #40]	@ tmp176, g_armwave_state.bitdepth_height
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 205              		.loc 1 168 5 is_stmt 1 view .LVU44
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 206              		.loc 1 169 5 view .LVU45
 170:armwave.c     **** 
 207              		.loc 1 170 5 view .LVU46
 208              		.loc 1 172 5 view .LVU47
 209 008c FEFFFFEB 		bl	printf		@
 210              	.LVL3:
 173:armwave.c     **** 
 174:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 175:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 176:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 177:armwave.c     ****     g_armwave_state.slice_height = 64;  
 211              		.loc 1 177 5 view .LVU48
 212              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 178:armwave.c     **** 
 179:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 213              		.loc 1 179 23 is_stmt 0 view .LVU49
 214 0090 040094E5 		ldr	r0, [r4, #4]	@ _12, g_armwave_state.ch1_buffer
 215              	@ armwave.c:177:     g_armwave_state.slice_height = 64;  
 177:armwave.c     **** 
 216              		.loc 1 177 34 view .LVU50
 217 0094 2C6084E5 		str	r6, [r4, #44]	@ tmp172, g_armwave_state.slice_height
 218              		.loc 1 179 5 is_stmt 1 view .LVU51
 219              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 220              		.loc 1 179 7 is_stmt 0 view .LVU52
 221 0098 000050E3 		cmp	r0, #0	@ _12,
 222 009c 0000000A 		beq	.L7		@,
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 223              		.loc 1 180 9 is_stmt 1 view .LVU53
 224 00a0 FEFFFFEB 		bl	free		@
 225              	.LVL4:
 226              	.L7:
 181:armwave.c     **** 
 182:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 227              		.loc 1 182 5 view .LVU54
 228              	@ armwave.c:182:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 229              		.loc 1 182 34 is_stmt 0 view .LVU55
 230 00a4 0110A0E3 		mov	r1, #1	@,
 231 00a8 340094E5 		ldr	r0, [r4, #52]	@, g_armwave_state.ch_buff_size
 232 00ac FEFFFFEB 		bl	calloc		@
 233              	.LVL5:
 234              	@ armwave.c:183:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 235              		.loc 1 183 33 view .LVU56
 236 00b0 18219FE5 		ldr	r2, .L21+24	@ tmp189,
 237              	@ armwave.c:185:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 238              		.loc 1 185 33 view .LVU57
 239 00b4 FA30A0E3 		mov	r3, #250	@ tmp192,
 240              	@ armwave.c:183:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 241              		.loc 1 183 33 view .LVU58
 242 00b8 502084E5 		str	r2, [r4, #80]	@ tmp189, MEM[(short int *)&g_armwave_state + 80B]
 243              	@ armwave.c:185:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 244              		.loc 1 185 33 view .LVU59
 245 00bc B435C4E1 		strh	r3, [r4, #84]	@ movhi	@ tmp192, g_armwave_state.ch1_color.b
 246              	@ armwave.c:187:     assert(g_armwave_state.ch1_buffer != NULL);
 186:armwave.c     **** 
 187:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 247              		.loc 1 187 5 view .LVU60
 248 00c0 000050E3 		cmp	r0, #0	@ tmp186,
 249              	@ armwave.c:182:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 250              		.loc 1 182 32 view .LVU61
 251 00c4 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 252              		.loc 1 183 5 is_stmt 1 view .LVU62
 184:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 253              		.loc 1 184 5 view .LVU63
 185:armwave.c     **** 
 254              		.loc 1 185 5 view .LVU64
 255              		.loc 1 187 5 view .LVU65
 256 00c8 3000000A 		beq	.L19		@,
 188:armwave.c     **** 
 189:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 190:armwave.c     ****     length = end_point - start_point;
 257              		.loc 1 190 5 view .LVU66
 258              	.LVL6:
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 259              		.loc 1 191 5 view .LVU67
 260              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 261              		.loc 1 191 34 is_stmt 0 view .LVU68
 262 00cc 905A07EE 		vmov	s15, r5	@ int	@ target_width, target_width
 263              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 264              		.loc 1 191 22 view .LVU69
 265 00d0 386ADFED 		vldr.32	s13, .L21	@ tmp197,
 266              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267              		.loc 1 193 40 view .LVU70
 268 00d4 010AA0E3 		mov	r0, #4096	@,
 269              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 270              		.loc 1 191 34 view .LVU71
 271 00d8 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp196, target_width
 272              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 273              		.loc 1 192 60 view .LVU72
 274 00dc 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp223, g_armwave_state.slice_height
 275 00e0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp200, tmp223
 276              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 277              		.loc 1 191 22 view .LVU73
 278 00e4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp197, tmp196
 279              	.LVL7:
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 280              		.loc 1 192 5 is_stmt 1 view .LVU74
 281              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 282              		.loc 1 192 60 is_stmt 0 view .LVU75
 283 00e8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 284              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 285              		.loc 1 192 41 view .LVU76
 286 00ec E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 287 00f0 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp203, g_armwave_state.slice_record_height
 288              		.loc 1 193 5 is_stmt 1 view .LVU77
 289              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 290              		.loc 1 193 40 is_stmt 0 view .LVU78
 291 00f4 FEFFFFEB 		bl	malloc		@
 292              	.LVL8:
 293              	@ armwave.c:195:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 194:armwave.c     **** 
 195:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 294              		.loc 1 195 5 view .LVU79
 295 00f8 000050E3 		cmp	r0, #0	@ tmp204,
 296              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 193:armwave.c     **** 
 297              		.loc 1 193 38 view .LVU80
 298 00fc 680084E5 		str	r0, [r4, #104]	@ tmp204, g_armwave_state.xcoord_to_xpixel
 299              		.loc 1 195 5 is_stmt 1 view .LVU81
 300 0100 2700000A 		beq	.L20		@,
 301              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 196:armwave.c     **** 
 197:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 302              		.loc 1 198 54 is_stmt 0 view .LVU82
 303 0104 2C7ADFED 		vldr.32	s15, .L21+4	@ tmp209,
 304 0108 020040E2 		sub	r0, r0, #2	@ ivtmp.30, tmp204,
 305              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 306              		.loc 1 197 12 view .LVU83
 307 010c 0030A0E3 		mov	r3, #0	@ xx,
 308              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 309              		.loc 1 198 54 view .LVU84
 310 0110 887A87EE 		vdiv.f32	s14, s15, s16	@ _25, tmp209, points_per_pixel
 311              	.L10:
 312              	.LVL9:
 313              		.loc 1 198 9 is_stmt 1 view .LVU85
 314              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 315              		.loc 1 198 74 is_stmt 0 view .LVU86
 316 0114 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 317              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 318              		.loc 1 197 32 view .LVU87
 319 0118 013083E2 		add	r3, r3, #1	@ xx, xx,
 320              	.LVL10:
 321              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 322              		.loc 1 197 5 view .LVU88
 323 011c 020B53E3 		cmp	r3, #2048	@ xx,
 324              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 325              		.loc 1 198 74 view .LVU89
 326 0120 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, xx
 327 0124 877A67EE 		vmul.f32	s15, s15, s14	@ tmp211, tmp210, _25
 328              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 329              		.loc 1 198 46 view .LVU90
 330 0128 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp212, tmp211
 331 012c 902A17EE 		vmov	r2, s15	@ int	@ tmp212, tmp212
 332 0130 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp212, MEM[base: _6, offset: 0B]
 333              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 334              		.loc 1 197 5 view .LVU91
 335 0134 F6FFFF1A 		bne	.L10		@,
 199:armwave.c     **** 
 200:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 201:armwave.c     ****     }
 202:armwave.c     **** 
 203:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 336              		.loc 1 203 5 is_stmt 1 view .LVU92
 337              	@ armwave.c:203:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 338              		.loc 1 203 34 is_stmt 0 view .LVU93
 339 0138 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 340 013c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 341 0140 FEFFFFEB 		bl	malloc		@
 342              	.LVL11:
 343              	@ armwave.c:204: }
 204:armwave.c     **** }
 344              		.loc 1 204 1 view .LVU94
 345 0144 028BBDEC 		vldm	sp!, {d8}	@
 346              		.cfi_remember_state
 347              		.cfi_restore 80
 348              		.cfi_restore 81
 349              		.cfi_def_cfa_offset 16
 350              	.LVL12:
 351              	@ armwave.c:203:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 203:armwave.c     **** }
 352              		.loc 1 203 32 view .LVU95
 353 0148 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 354              	@ armwave.c:204: }
 355              		.loc 1 204 1 view .LVU96
 356 014c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 357              	.LVL13:
 358              	.L2:
 359              		.cfi_restore_state
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 360              		.loc 1 147 5 is_stmt 1 view .LVU97
 361              	@ armwave.c:147:     if(target_height == 256) {
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 362              		.loc 1 147 7 is_stmt 0 view .LVU98
 363 0150 010C51E3 		cmp	r1, #256	@ target_height,
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 364              		.loc 1 148 9 is_stmt 1 view .LVU99
 365              	@ armwave.c:149:         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 366              		.loc 1 149 34 is_stmt 0 view .LVU100
 367 0154 0820A003 		moveq	r2, #8	@ tmp151,
 368              	@ armwave.c:151:         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 369              		.loc 1 151 35 view .LVU101
 370 0158 74309F15 		ldrne	r3, .L21+28	@ tmp155,
 371              	@ armwave.c:149:         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 372              		.loc 1 149 34 view .LVU102
 373 015c FF30A003 		moveq	r3, #255	@ tmp153,
 150:armwave.c     ****         g_armwave_state.row_shift = 9;
 374              		.loc 1 150 12 is_stmt 1 view .LVU103
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 375              		.loc 1 151 9 view .LVU104
 376              	@ armwave.c:151:         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 377              		.loc 1 151 35 is_stmt 0 view .LVU105
 378 0160 0920A013 		movne	r2, #9	@ tmp157,
 379 0164 F424C4E1 		strd	r2, [r4, #68]	@, tmp218,
 152:armwave.c     ****     } else if(target_height == 1024) {
 380              		.loc 1 152 9 is_stmt 1 view .LVU106
 381 0168 B6FFFFEA 		b	.L5		@
 382              	.L18:
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 383              		.loc 1 154 9 view .LVU107
 384              	@ armwave.c:154:         g_armwave_state.row_shift = 10;
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 385              		.loc 1 154 35 is_stmt 0 view .LVU108
 386 016c 64309FE5 		ldr	r3, .L21+32	@ tmp159,
 387 0170 0A20A0E3 		mov	r2, #10	@ tmp161,
 388 0174 F424C4E1 		strd	r2, [r4, #68]	@, tmp218,
 155:armwave.c     ****     } else if(target_height == 2048) {
 389              		.loc 1 155 9 is_stmt 1 view .LVU109
 390 0178 B2FFFFEA 		b	.L5		@
 391              	.L17:
 145:armwave.c     **** 
 392              		.loc 1 145 5 view .LVU110
 393 017c 58309FE5 		ldr	r3, .L21+36	@,
 394 0180 9120A0E3 		mov	r2, #145	@,
 395 0184 54109FE5 		ldr	r1, .L21+40	@,
 396              	.LVL14:
 145:armwave.c     **** 
 397              		.loc 1 145 5 is_stmt 0 view .LVU111
 398 0188 54009FE5 		ldr	r0, .L21+44	@,
 399              	.LVL15:
 145:armwave.c     **** 
 400              		.loc 1 145 5 view .LVU112
 401 018c FEFFFFEB 		bl	__assert_fail		@
 402              	.LVL16:
 403              	.L19:
 187:armwave.c     **** 
 404              		.loc 1 187 5 is_stmt 1 view .LVU113
 405 0190 44309FE5 		ldr	r3, .L21+36	@,
 406 0194 BB20A0E3 		mov	r2, #187	@,
 407 0198 40109FE5 		ldr	r1, .L21+40	@,
 408 019c 44009FE5 		ldr	r0, .L21+48	@,
 409 01a0 FEFFFFEB 		bl	__assert_fail		@
 410              	.LVL17:
 411              	.L20:
 195:armwave.c     **** 
 412              		.loc 1 195 5 view .LVU114
 413 01a4 30309FE5 		ldr	r3, .L21+36	@,
 414 01a8 C320A0E3 		mov	r2, #195	@,
 415 01ac 2C109FE5 		ldr	r1, .L21+40	@,
 416 01b0 34009FE5 		ldr	r0, .L21+52	@,
 417 01b4 FEFFFFEB 		bl	__assert_fail		@
 418              	.LVL18:
 419              	.L22:
 420              		.align	2
 421              	.L21:
 422 01b8 00000045 		.word	1157627904
 423 01bc 0000803F 		.word	1065353216
 424 01c0 00000000 		.word	g_armwave_state
 425 01c4 00000000 		.word	test_wave_buffer
 426 01c8 FF070000 		.word	2047
 427 01cc 6C000000 		.word	.LC2
 428 01d0 F609F406 		.word	116656630
 429 01d4 FF010000 		.word	511
 430 01d8 FF030000 		.word	1023
 431 01dc 00000000 		.word	.LANCHOR0
 432 01e0 00000000 		.word	.LC0
 433 01e4 0C000000 		.word	.LC1
 434 01e8 80000000 		.word	.LC3
 435 01ec A4000000 		.word	.LC4
 436              		.cfi_endproc
 437              	.LFE72:
 439              		.align	2
 440              		.global	test_create_waveform
 441              		.syntax unified
 442              		.arm
 443              		.fpu vfp
 445              	test_create_waveform:
 446              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 447              		.loc 1 51 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 451              		.loc 1 52 5 view .LVU116
  53:armwave.c     **** 
 452              		.loc 1 53 5 view .LVU117
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 453              		.loc 1 55 5 view .LVU118
 454              	.LVL19:
 455              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 456              		.loc 1 51 1 is_stmt 0 view .LVU119
 457 01f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 458              		.cfi_def_cfa_offset 36
 459              		.cfi_offset 4, -36
 460              		.cfi_offset 5, -32
 461              		.cfi_offset 6, -28
 462              		.cfi_offset 7, -24
 463              		.cfi_offset 8, -20
 464              		.cfi_offset 9, -16
 465              		.cfi_offset 10, -12
 466              		.cfi_offset 11, -8
 467              		.cfi_offset 14, -4
 468 01f4 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 469              		.cfi_def_cfa_offset 84
 470              		.cfi_offset 80, -84
 471              		.cfi_offset 81, -80
 472              		.cfi_offset 82, -76
 473              		.cfi_offset 83, -72
 474              		.cfi_offset 84, -68
 475              		.cfi_offset 85, -64
 476              		.cfi_offset 86, -60
 477              		.cfi_offset 87, -56
 478              		.cfi_offset 88, -52
 479              		.cfi_offset 89, -48
 480              		.cfi_offset 90, -44
 481              		.cfi_offset 91, -40
 482 01f8 5C819FE5 		ldr	r8, .L42+40	@ _75,
 483              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 484              		.loc 1 56 33 view .LVU120
 485 01fc 4CDA9FED 		vldr.32	s26, .L42	@ tmp157,
 486 0200 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.46, _75,
 487              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 488              		.loc 1 56 13 view .LVU121
 489 0204 4BCADFED 		vldr.32	s25, .L42+4	@ tmp161,
 490              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 491              		.loc 1 60 20 view .LVU122
 492 0208 4BCA9FED 		vldr.32	s24, .L42+8	@ tmp166,
 493              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 494              		.loc 1 71 29 view .LVU123
 495 020c 4BBADFED 		vldr.32	s23, .L42+12	@ tmp170,
 496              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 497              		.loc 1 71 33 view .LVU124
 498 0210 4BBA9FED 		vldr.32	s22, .L42+16	@ tmp172,
 499              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 500              		.loc 1 69 20 view .LVU125
 501 0214 4BAADFED 		vldr.32	s21, .L42+20	@ tmp177,
 502 0218 02B886E2 		add	fp, r6, #131072	@ _81,,
 503 021c 3CA19FE5 		ldr	r10, .L42+44	@ tmp197,
 504              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 505              		.loc 1 51 1 view .LVU126
 506 0220 0CD04DE2 		sub	sp, sp, #12	@,,
 507              		.cfi_def_cfa_offset 96
 508 0224 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 509 0228 0F6086E2 		add	r6, r6, #15	@ ivtmp.46, ivtmp.46,
 510 022c 008068E2 		rsb	r8, r8, #0	@ ivtmp.49, _75
 511              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 512              		.loc 1 55 11 view .LVU127
 513 0230 0090A0E3 		mov	r9, #0	@ w,
 514              	.LVL20:
 515              	.L29:
  56:armwave.c     ****         //mod = 1.0f;
 516              		.loc 1 56 9 is_stmt 1 view .LVU128
 517              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 518              		.loc 1 56 24 is_stmt 0 view .LVU129
 519 0234 909A07EE 		vmov	s15, r9	@ int	@ w, w
 520              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 521              		.loc 1 56 48 view .LVU130
 522 0238 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 523              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 524              		.loc 1 56 13 view .LVU131
 525 023c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 526              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 527              		.loc 1 68 19 view .LVU132
 528 0240 41AA9FED 		vldr.32	s20, .L42+24	@ tmp183,
 529              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 530              		.loc 1 56 24 view .LVU133
 531 0244 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 532              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 533              		.loc 1 73 58 view .LVU134
 534 0248 408ADFED 		vldr.32	s17, .L42+28	@ tmp188,
 535 024c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.39, ivtmp.46,
 536 0250 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.49,
 537              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 538              		.loc 1 56 33 view .LVU135
 539 0254 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 540              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 541              		.loc 1 56 13 view .LVU136
 542 0258 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 543              	.LVL21:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 544              		.loc 1 59 9 is_stmt 1 view .LVU137
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 545              		.loc 1 59 9 is_stmt 0 view .LVU138
 546 025c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 547              	.LVL22:
 548              	.L28:
 549              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 550              		.loc 1 60 24 view .LVU139
 551 0260 FEFFFFEB 		bl	rand		@
 552              	.LVL23:
 553 0264 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.39
 554              	.LVL24:
  60:armwave.c     ****             noise *= noise;
 555              		.loc 1 60 13 is_stmt 1 view .LVU140
 556              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 557              		.loc 1 60 31 is_stmt 0 view .LVU141
 558 0268 7000FFE6 		uxth	r0, r0	@ tmp163,
 559              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 560              		.loc 1 60 41 view .LVU142
 561 026c 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 562 0270 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 563              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 564              		.loc 1 60 20 view .LVU143
 565 0274 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 566              	.LVL25:
  61:armwave.c     ****             noise *= noise;
 567              		.loc 1 61 13 is_stmt 1 view .LVU144
 568              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 569              		.loc 1 61 19 is_stmt 0 view .LVU145
 570 0278 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 571              	.LVL26:
  62:armwave.c     ****             noise *= noise;
 572              		.loc 1 62 13 is_stmt 1 view .LVU146
 573              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 574              		.loc 1 62 19 is_stmt 0 view .LVU147
 575 027c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 576              	.LVL27:
  63:armwave.c     **** 
 577              		.loc 1 63 13 is_stmt 1 view .LVU148
 578              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 579              		.loc 1 63 19 is_stmt 0 view .LVU149
 580 0280 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 581              	.LVL28:
  65:armwave.c     ****                 noise = -noise;
 582              		.loc 1 65 13 is_stmt 1 view .LVU150
 583              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 584              		.loc 1 65 17 is_stmt 0 view .LVU151
 585 0284 FEFFFFEB 		bl	rand		@
 586              	.LVL29:
  66:armwave.c     **** 
 587              		.loc 1 66 17 is_stmt 1 view .LVU152
 588              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 589              		.loc 1 65 15 is_stmt 0 view .LVU153
 590 0288 020910E3 		tst	r0, #32768	@,
 591              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 592              		.loc 1 66 23 view .LVU154
 593 028c 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 594              	.LVL30:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 595              		.loc 1 68 13 is_stmt 1 view .LVU155
  69:armwave.c     **** 
 596              		.loc 1 69 13 view .LVU156
 597              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 598              		.loc 1 69 23 is_stmt 0 view .LVU157
 599 0290 FEFFFFEB 		bl	rand		@
 600              	.LVL31:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 601              		.loc 1 71 13 is_stmt 1 view .LVU158
 602              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 603              		.loc 1 71 29 is_stmt 0 view .LVU159
 604 0294 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 605 0298 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 606 029c AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 607              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 608              		.loc 1 69 30 view .LVU160
 609 02a0 7000FFE6 		uxth	r0, r0	@ tmp173,
 610              	.LVL32:
 611              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 612              		.loc 1 69 40 view .LVU161
 613 02a4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 614 02a8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 615              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 616              		.loc 1 69 20 view .LVU162
 617 02ac 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 618              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 619              		.loc 1 71 60 view .LVU163
 620 02b0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 621              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 622              		.loc 1 71 18 view .LVU164
 623 02b4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 624 02b8 FEFFFFEB 		bl	sin		@
 625              	.LVL33:
  73:armwave.c     ****         }
 626              		.loc 1 73 13 is_stmt 1 view .LVU165
 627              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 628              		.loc 1 68 19 is_stmt 0 view .LVU166
 629 02bc 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 630              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 631              		.loc 1 73 58 view .LVU167
 632 02c0 236ADFED 		vldr.32	s13, .L42+32	@ tmp189,
 633              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 634              		.loc 1 73 56 view .LVU168
 635 02c4 236A9FED 		vldr.32	s12, .L42+36	@ tmp191,
 636 02c8 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 637              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 638              		.loc 1 71 77 view .LVU169
 639 02cc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 640              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 641              		.loc 1 71 70 view .LVU170
 642 02d0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 643              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 644              		.loc 1 71 77 view .LVU171
 645 02d4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 646              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 647              		.loc 1 71 15 view .LVU172
 648 02d8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 649              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 650              		.loc 1 73 58 view .LVU173
 651 02dc 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 652 02e0 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 653 02e4 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 654 02e8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 655 02ec 050000DA 		ble	.L25		@,
 656              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 657              		.loc 1 73 56 discriminator 1 view .LVU174
 658 02f0 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 659 02f4 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 660 02f8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 661 02fc E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 662 0300 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 663 0304 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 664              	.L25:
 665              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 666              		.loc 1 73 56 discriminator 12 view .LVU175
 667 0308 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 668              	.LVL34:
 669              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 670              		.loc 1 59 9 discriminator 12 view .LVU176
 671 030c 060055E1 		cmp	r5, r6	@ ivtmp.39, ivtmp.46
 672 0310 D2FFFF1A 		bne	.L28		@,
 673 0314 026B85E2 		add	r6, r5, #2048	@ ivtmp.46, ivtmp.39,
 674              	.LVL35:
 675              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 676              		.loc 1 55 5 discriminator 2 view .LVU177
 677 0318 0B0056E1 		cmp	r6, fp	@ ivtmp.46, _81
 678              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 679              		.loc 1 55 34 discriminator 2 view .LVU178
 680 031c 019089E2 		add	r9, r9, #1	@ w, w,
 681              	.LVL36:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 682              		.loc 1 55 34 discriminator 2 view .LVU179
 683 0320 028B48E2 		sub	r8, r8, #2048	@ ivtmp.49, ivtmp.49,
 684              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 685              		.loc 1 55 5 discriminator 2 view .LVU180
 686 0324 C2FFFF1A 		bne	.L29		@,
 687              	@ armwave.c:76: }
  76:armwave.c     **** 
 688              		.loc 1 76 1 view .LVU181
 689 0328 0CD08DE2 		add	sp, sp, #12	@,,
 690              		.cfi_def_cfa_offset 84
 691              		@ sp needed	@
 692 032c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 693              		.cfi_restore 90
 694              		.cfi_restore 91
 695              		.cfi_restore 88
 696              		.cfi_restore 89
 697              		.cfi_restore 86
 698              		.cfi_restore 87
 699              		.cfi_restore 84
 700              		.cfi_restore 85
 701              		.cfi_restore 82
 702              		.cfi_restore 83
 703              		.cfi_restore 80
 704              		.cfi_restore 81
 705              		.cfi_def_cfa_offset 36
 706              	.LVL37:
  76:armwave.c     **** 
 707              		.loc 1 76 1 view .LVU182
 708 0330 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 709              	.LVL38:
 710              	.L43:
  76:armwave.c     **** 
 711              		.loc 1 76 1 view .LVU183
 712              		.align	2
 713              	.L42:
 714 0334 0000803C 		.word	1015021568
 715 0338 0000003F 		.word	1056964608
 716 033c 0050C347 		.word	1203982336
 717 0340 C3F5C840 		.word	1086911939
 718 0344 0000003A 		.word	973078528
 719 0348 38FFC74A 		.word	1254620984
 720 034c 0000803F 		.word	1065353216
 721 0350 0000FE42 		.word	1123942400
 722 0354 00000043 		.word	1124073472
 723 0358 00007F43 		.word	1132396544
 724 035c 00000000 		.word	test_wave_buffer
 725 0360 00000000 		.word	.LANCHOR1
 726              		.cfi_endproc
 727              	.LFE57:
 729              		.align	2
 730              		.global	test_create_gamma
 731              		.syntax unified
 732              		.arm
 733              		.fpu vfp
 735              	test_create_gamma:
 736              	.LFB58:
  82:armwave.c     ****     int i;
 737              		.loc 1 82 1 is_stmt 1 view -0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 0
 740              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 741              		.loc 1 83 5 view .LVU185
  84:armwave.c     **** 
 742              		.loc 1 84 5 view .LVU186
 743              	.LVL39:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 744              		.loc 1 86 5 view .LVU187
 745              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 746              		.loc 1 82 1 is_stmt 0 view .LVU188
 747 0364 70402DE9 		push	{r4, r5, r6, lr}	@
 748              		.cfi_def_cfa_offset 16
 749              		.cfi_offset 4, -16
 750              		.cfi_offset 5, -12
 751              		.cfi_offset 6, -8
 752              		.cfi_offset 14, -4
 753 0368 068B2DED 		vpush.64	{d8, d9, d10}	@
 754              		.cfi_def_cfa_offset 40
 755              		.cfi_offset 80, -40
 756              		.cfi_offset 81, -36
 757              		.cfi_offset 82, -32
 758              		.cfi_offset 83, -28
 759              		.cfi_offset 84, -24
 760              		.cfi_offset 85, -20
 761 036c 68409FE5 		ldr	r4, .L48+20	@ ivtmp.57,
 762              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 763              		.loc 1 87 32 view .LVU189
 764 0370 18AA9FED 		vldr.32	s20, .L48+16	@ tmp128,
 765              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 766              		.loc 1 87 26 view .LVU190
 767 0374 139B9FED 		vldr.64	d9, .L48	@ tmp135,
 768              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 769              		.loc 1 87 49 view .LVU191
 770 0378 148B9FED 		vldr.64	d8, .L48+8	@ tmp131,
 771 037c 015084E2 		add	r5, r4, #1	@ _25, ivtmp.57,
 772 0380 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.57,
 773 0384 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 774              	.LVL40:
 775              	.L45:
  87:armwave.c     ****     }
 776              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU192
 777              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 778              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU193
 779 0388 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.57
 780              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 781              		.loc 1 87 26 discriminator 3 view .LVU194
 782 038c 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 783              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 784              		.loc 1 87 32 discriminator 3 view .LVU195
 785 0390 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 786 0394 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 787 0398 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 788              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 789              		.loc 1 87 26 discriminator 3 view .LVU196
 790 039c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 791 03a0 FEFFFFEB 		bl	pow		@
 792              	.LVL41:
 793              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 794              		.loc 1 87 49 discriminator 3 view .LVU197
 795 03a4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 796              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 797              		.loc 1 87 24 discriminator 3 view .LVU198
 798 03a8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 799 03ac 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 800 03b0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 801              	.LVL42:
 802              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 803              		.loc 1 86 5 discriminator 3 view .LVU199
 804 03b4 060054E1 		cmp	r4, r6	@ ivtmp.57, _26
 805 03b8 F2FFFF1A 		bne	.L45		@,
 806              	@ armwave.c:89: }
  89:armwave.c     **** 
 807              		.loc 1 89 1 view .LVU200
 808 03bc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 809              		.cfi_restore 84
 810              		.cfi_restore 85
 811              		.cfi_restore 82
 812              		.cfi_restore 83
 813              		.cfi_restore 80
 814              		.cfi_restore 81
 815              		.cfi_def_cfa_offset 16
 816 03c0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 817              	.LVL43:
 818              	.L49:
  89:armwave.c     **** 
 819              		.loc 1 89 1 view .LVU201
 820 03c4 0000A0E1 		.align	3
 821              	.L48:
 822 03c8 000000C0 		.word	-1073741824
 823 03cc CCCCEC3F 		.word	1072483532
 824 03d0 00000000 		.word	0
 825 03d4 00E06F40 		.word	1081073664
 826 03d8 00007F43 		.word	1132396544
 827 03dc FFFFFFFF 		.word	gamma_table-1
 828              		.cfi_endproc
 829              	.LFE58:
 831              		.align	2
 832              		.global	render_nonaa_to_buffer_1ch_slice
 833              		.syntax unified
 834              		.arm
 835              		.fpu vfp
 837              	render_nonaa_to_buffer_1ch_slice:
 838              	.LVL44:
 839              	.LFB59:
 100:armwave.c     ****     int yy, ys, w, scale_value;
 840              		.loc 1 100 1 is_stmt 1 view -0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 101:armwave.c     ****     uint32_t value, word;
 844              		.loc 1 101 5 view .LVU203
 102:armwave.c     ****     uint8_t *wave_base;
 845              		.loc 1 102 5 view .LVU204
 103:armwave.c     ****     uint8_t *write_buffer_base;
 846              		.loc 1 103 5 view .LVU205
 104:armwave.c     ****     uint8_t *write_buffer;
 847              		.loc 1 104 5 view .LVU206
 105:armwave.c     ****     
 848              		.loc 1 105 5 view .LVU207
 107:armwave.c     **** 
 849              		.loc 1 107 5 view .LVU208
 850              	@ armwave.c:100: {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 851              		.loc 1 100 1 is_stmt 0 view .LVU209
 852 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 853              		.cfi_def_cfa_offset 36
 854              		.cfi_offset 4, -36
 855              		.cfi_offset 5, -32
 856              		.cfi_offset 6, -28
 857              		.cfi_offset 7, -24
 858              		.cfi_offset 8, -20
 859              		.cfi_offset 9, -16
 860              		.cfi_offset 10, -12
 861              		.cfi_offset 11, -8
 862              		.cfi_offset 14, -4
 863              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 864              		.loc 1 107 40 view .LVU210
 865 03e4 D0409FE5 		ldr	r4, .L62	@ tmp242,
 866              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 867              		.loc 1 110 5 view .LVU211
 868 03e8 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 869              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 870              		.loc 1 107 63 view .LVU212
 871 03ec 285094E5 		ldr	r5, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 872              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 873              		.loc 1 110 5 view .LVU213
 874 03f0 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 875              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 876              		.loc 1 107 40 view .LVU214
 877 03f4 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 878              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 879              		.loc 1 107 63 view .LVU215
 880 03f8 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 881              	.LVL45:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 882              		.loc 1 110 5 is_stmt 1 view .LVU216
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 883              		.loc 1 110 5 is_stmt 0 view .LVU217
 884 03fc F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 885 0400 000051E3 		cmp	r1, #0	@ height,
 886 0404 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 887 0408 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 888              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 889              		.loc 1 110 11 view .LVU218
 890 040c 0070A0E3 		mov	r7, #0	@ w,
 891              	.LVL46:
 892              	.L54:
 111:armwave.c     **** 
 893              		.loc 1 111 9 is_stmt 1 view .LVU219
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 894              		.loc 1 115 9 view .LVU220
 895              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 896              		.loc 1 111 64 is_stmt 0 view .LVU221
 897 0410 200094E5 		ldr	r0, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 898 0414 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 899              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 900              		.loc 1 115 16 view .LVU222
 901 0418 0020A0E3 		mov	r2, #0	@ yy,
 902 041c 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 903 0420 006086E0 		add	r6, r6, r0	@ ivtmp.63, g_armwave_state.wave_buffer, tmp193
 904              	.LVL47:
 905              	.L53:
 116:armwave.c     **** 
 906              		.loc 1 116 13 is_stmt 1 view .LVU223
 907              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 908              		.loc 1 116 18 is_stmt 0 view .LVU224
 909 0424 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 910              	.LVL48:
 118:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 911              		.loc 1 118 13 is_stmt 1 view .LVU225
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 912              		.loc 1 120 17 view .LVU226
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 913              		.loc 1 121 17 view .LVU227
 122:armwave.c     ****                 word >>= 8;
 914              		.loc 1 122 17 view .LVU228
 915              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 916              		.loc 1 121 63 is_stmt 0 view .LVU229
 917 0428 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 918 042c 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 919              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 920              		.loc 1 122 47 view .LVU230
 921 0430 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 922 0434 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 923              	@ armwave.c:123:                 word >>= 8;
 123:armwave.c     ****             }
 924              		.loc 1 123 22 view .LVU231
 925 0438 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 926 043c 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 927              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 928              		.loc 1 122 47 view .LVU232
 929 0440 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 930 0444 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 931 0448 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 932 044c 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 933              	.LVL49:
 123:armwave.c     ****             }
 934              		.loc 1 123 17 is_stmt 1 view .LVU233
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 935              		.loc 1 120 17 view .LVU234
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 936              		.loc 1 121 17 view .LVU235
 122:armwave.c     ****                 word >>= 8;
 937              		.loc 1 122 17 view .LVU236
 938              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 939              		.loc 1 121 63 is_stmt 0 view .LVU237
 940 0450 28E094E5 		ldr	lr, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 941              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 942              		.loc 1 122 47 view .LVU238
 943 0454 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 944 0458 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 945              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 946              		.loc 1 121 63 view .LVU239
 947 045c 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 948 0460 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 949              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 950              		.loc 1 122 47 view .LVU240
 951 0464 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 952 0468 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 953              	.LVL50:
 954              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 955              		.loc 1 115 37 view .LVU241
 956 046c 042082E2 		add	r2, r2, #4	@ yy, yy,
 957              	.LVL51:
 958              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 959              		.loc 1 122 47 view .LVU242
 960 0470 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 961 0474 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 962              	.LVL52:
 123:armwave.c     ****             }
 963              		.loc 1 123 17 is_stmt 1 view .LVU243
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 964              		.loc 1 120 17 view .LVU244
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 965              		.loc 1 121 17 view .LVU245
 122:armwave.c     ****                 word >>= 8;
 966              		.loc 1 122 17 view .LVU246
 967              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 968              		.loc 1 121 63 is_stmt 0 view .LVU247
 969 0478 28E094E5 		ldr	lr, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 970              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 971              		.loc 1 115 9 view .LVU248
 972 047c 020051E1 		cmp	r1, r2	@ height, yy
 973              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 974              		.loc 1 122 47 view .LVU249
 975 0480 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 976 0484 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 977 0488 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 978 048c 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 123:armwave.c     ****             }
 979              		.loc 1 123 17 is_stmt 1 view .LVU250
 980              	.LVL53:
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 981              		.loc 1 120 17 view .LVU251
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 982              		.loc 1 121 17 view .LVU252
 122:armwave.c     ****                 word >>= 8;
 983              		.loc 1 122 17 view .LVU253
 984              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 985              		.loc 1 121 63 is_stmt 0 view .LVU254
 986 0490 28C094E5 		ldr	ip, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 987              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 988              		.loc 1 122 47 view .LVU255
 989 0494 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 990 0498 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 991 049c 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 992 04a0 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 123:armwave.c     ****             }
 993              		.loc 1 123 17 is_stmt 1 view .LVU256
 994              	.LVL54:
 995              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 996              		.loc 1 115 9 is_stmt 0 view .LVU257
 997 04a4 DEFFFF8A 		bhi	.L53		@,
 998              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 999              		.loc 1 110 5 view .LVU258
 1000 04a8 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 1001              	.LVL55:
 1002              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1003              		.loc 1 110 44 view .LVU259
 1004 04ac 017087E2 		add	r7, r7, #1	@ w, w,
 1005              	.LVL56:
 1006              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1007              		.loc 1 110 5 view .LVU260
 1008 04b0 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 1009 04b4 D5FFFF3A 		bcc	.L54		@,
 1010 04b8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1011              	.L63:
 1012              		.align	2
 1013              	.L62:
 1014 04bc 00000000 		.word	g_armwave_state
 1015              		.cfi_endproc
 1016              	.LFE59:
 1018              		.align	2
 1019              		.global	armwave_init
 1020              		.syntax unified
 1021              		.arm
 1022              		.fpu vfp
 1024              	armwave_init:
 1025              	.LFB60:
 130:armwave.c     ****     g_armwave_state.flags = 0;
 1026              		.loc 1 130 1 is_stmt 1 view -0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              		@ link register save eliminated.
 131:armwave.c     **** }
 1031              		.loc 1 131 5 view .LVU262
 1032              	@ armwave.c:131:     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 1033              		.loc 1 131 27 is_stmt 0 view .LVU263
 1034 04c0 08309FE5 		ldr	r3, .L65	@ tmp110,
 1035 04c4 0020A0E3 		mov	r2, #0	@ tmp111,
 1036 04c8 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1037              	@ armwave.c:132: }
 132:armwave.c     **** 
 1038              		.loc 1 132 1 view .LVU264
 1039 04cc 1EFF2FE1 		bx	lr	@
 1040              	.L66:
 1041              		.align	2
 1042              	.L65:
 1043 04d0 00000000 		.word	g_armwave_state
 1044              		.cfi_endproc
 1045              	.LFE60:
 1047              		.align	2
 1048              		.global	armwave_setup_render
 1049              		.syntax unified
 1050              		.arm
 1051              		.fpu vfp
 1053              	armwave_setup_render:
 1054              	.LVL57:
 1055              	.LFB61:
 135:armwave.c     ****     uint32_t length, xx;
 1056              		.loc 1 135 1 is_stmt 1 view -0
 1057              		.cfi_startproc
 1058              		@ args = 16, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 136:armwave.c     ****     float points_per_pixel;
 1060              		.loc 1 136 5 view .LVU266
 137:armwave.c     **** 
 1061              		.loc 1 137 5 view .LVU267
 139:armwave.c     **** 
 1062              		.loc 1 139 5 view .LVU268
 1063              	@ armwave.c:135: {
 135:armwave.c     ****     uint32_t length, xx;
 1064              		.loc 1 135 1 is_stmt 0 view .LVU269
 1065 04d4 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1066              		.cfi_def_cfa_offset 24
 1067              		.cfi_offset 4, -24
 1068              		.cfi_offset 5, -20
 1069              		.cfi_offset 6, -16
 1070              		.cfi_offset 7, -12
 1071              		.cfi_offset 8, -8
 1072              		.cfi_offset 14, -4
 1073              	@ armwave.c:139:     assert(start_point < end_point);
 139:armwave.c     **** 
 1074              		.loc 1 139 5 view .LVU270
 1075 04d8 020051E1 		cmp	r1, r2	@ start_point, end_point
 1076              	@ armwave.c:135: {
 135:armwave.c     ****     uint32_t length, xx;
 1077              		.loc 1 135 1 view .LVU271
 1078 04dc 028B2DED 		vpush.64	{d8}	@
 1079              		.cfi_def_cfa_offset 32
 1080              		.cfi_offset 80, -32
 1081              		.cfi_offset 81, -28
 1082              	@ armwave.c:135: {
 135:armwave.c     ****     uint32_t length, xx;
 1083              		.loc 1 135 1 view .LVU272
 1084 04e0 0170A0E1 		mov	r7, r1	@ start_point, start_point
 1085 04e4 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1086 04e8 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 1087              	.LVL58:
 135:armwave.c     ****     uint32_t length, xx;
 1088              		.loc 1 135 1 view .LVU273
 1089 04ec 24609DE5 		ldr	r6, [sp, #36]	@ target_width, target_width
 1090 04f0 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1091              	.LVL59:
 1092              	@ armwave.c:139:     assert(start_point < end_point);
 139:armwave.c     **** 
 1093              		.loc 1 139 5 view .LVU274
 1094 04f4 6F00002A 		bcs	.L83		@,
 142:armwave.c     **** 
 1095              		.loc 1 142 5 is_stmt 1 view .LVU275
 1096              	@ armwave.c:142:     g_armwave_state.wave_buffer = wave_buffer;
 142:armwave.c     **** 
 1097              		.loc 1 142 33 is_stmt 0 view .LVU276
 1098 04f8 D0419FE5 		ldr	r4, .L88+4	@ tmp228,
 1099              	@ armwave.c:145:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 145:armwave.c     **** 
 1100              		.loc 1 145 5 view .LVU277
 1101 04fc 01CC42E2 		sub	ip, r2, #256	@ tmp154, target_height,
 1102 0500 01CCDCE3 		bics	ip, ip, #256	@ tmp230, tmp154,
 1103              	@ armwave.c:142:     g_armwave_state.wave_buffer = wave_buffer;
 142:armwave.c     **** 
 1104              		.loc 1 142 33 view .LVU278
 1105 0504 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 145:armwave.c     **** 
 1106              		.loc 1 145 5 is_stmt 1 view .LVU279
 1107 0508 4C00000A 		beq	.L69		@,
 1108              	@ armwave.c:145:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 145:armwave.c     **** 
 1109              		.loc 1 145 5 is_stmt 0 discriminator 1 view .LVU280
 1110 050c 010B42E2 		sub	r0, r2, #1024	@ tmp156, target_height,
 1111              	.LVL60:
 145:armwave.c     **** 
 1112              		.loc 1 145 5 discriminator 1 view .LVU281
 1113 0510 010BD0E3 		bics	r0, r0, #1024	@ tmp231, tmp156,
 1114 0514 5800001A 		bne	.L84		@,
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 1115              		.loc 1 147 5 is_stmt 1 view .LVU282
 153:armwave.c     ****         g_armwave_state.row_shift = 10;
 1116              		.loc 1 153 12 view .LVU283
 1117              	@ armwave.c:153:     } else if(target_height == 1024) {
 153:armwave.c     ****         g_armwave_state.row_shift = 10;
 1118              		.loc 1 153 14 is_stmt 0 view .LVU284
 1119 0518 010B52E3 		cmp	r2, #1024	@ target_height,
 1120 051c 5100000A 		beq	.L85		@,
 156:armwave.c     ****         g_armwave_state.row_shift = 11;
 1121              		.loc 1 156 12 is_stmt 1 view .LVU285
 1122              	@ armwave.c:156:     } else if(target_height == 2048) {
 156:armwave.c     ****         g_armwave_state.row_shift = 11;
 1123              		.loc 1 156 14 is_stmt 0 view .LVU286
 1124 0520 020B52E3 		cmp	r2, #2048	@ target_height,
 157:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1125              		.loc 1 157 9 is_stmt 1 view .LVU287
 1126              	@ armwave.c:157:         g_armwave_state.row_shift = 11;
 157:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1127              		.loc 1 157 35 is_stmt 0 view .LVU288
 1128 0524 0B00A003 		moveq	r0, #11	@ tmp174,
 1129              	@ armwave.c:158:         g_armwave_state.row_mask = 0x7ff;
 158:armwave.c     ****     } 
 1130              		.loc 1 158 34 view .LVU289
 1131 0528 A4C19F05 		ldreq	ip, .L88+8	@ tmp176,
 1132              	@ armwave.c:157:         g_armwave_state.row_shift = 11;
 157:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1133              		.loc 1 157 35 view .LVU290
 1134 052c 44008405 		streq	r0, [r4, #68]	@ tmp174, g_armwave_state.row_shift
 158:armwave.c     ****     } 
 1135              		.loc 1 158 9 is_stmt 1 view .LVU291
 1136              	@ armwave.c:158:         g_armwave_state.row_mask = 0x7ff;
 158:armwave.c     ****     } 
 1137              		.loc 1 158 34 is_stmt 0 view .LVU292
 1138 0530 48C08405 		streq	ip, [r4, #72]	@ tmp176, g_armwave_state.row_mask
 1139              	.L72:
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1140              		.loc 1 162 5 is_stmt 1 view .LVU293
 1141              	@ armwave.c:166:     g_armwave_state.size = target_height * target_width;
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1142              		.loc 1 166 42 is_stmt 0 view .LVU294
 1143 0534 96020EE0 		mul	lr, r6, r2	@ tmp183, target_width, target_height
 1144              	@ armwave.c:168:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 1145              		.loc 1 168 68 view .LVU295
 1146 0538 06C4A0E1 		lsl	ip, r6, #8	@ _9, target_width,
 1147              	@ armwave.c:163:     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1148              		.loc 1 163 44 view .LVU296
 1149 053c 2204A0E1 		lsr	r0, r2, #8	@ tmp179, target_height,
 1150              	@ armwave.c:164:     g_armwave_state.wave_stride = wave_stride;
 164:armwave.c     ****     g_armwave_state.waves = waves;
 1151              		.loc 1 164 33 view .LVU297
 1152 0540 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1153              	@ armwave.c:165:     g_armwave_state.waves = waves;
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1154              		.loc 1 165 27 view .LVU298
 1155 0544 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1156              	@ armwave.c:163:     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1157              		.loc 1 163 28 view .LVU299
 1158 0548 1C0084E5 		str	r0, [r4, #28]	@ tmp179, g_armwave_state.vscale
 1159              	@ armwave.c:167:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1160              		.loc 1 167 37 view .LVU300
 1161 054c 013CA0E3 		mov	r3, #256	@ tmp185,
 1162              	.LVL61:
 1163              	@ armwave.c:172:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 172:armwave.c     **** 
 1164              		.loc 1 172 5 view .LVU301
 1165 0550 0C10A0E1 		mov	r1, ip	@, _9
 1166 0554 7C019FE5 		ldr	r0, .L88+12	@,
 1167              	@ armwave.c:167:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1168              		.loc 1 167 37 view .LVU302
 1169 0558 283084E5 		str	r3, [r4, #40]	@ tmp185, g_armwave_state.bitdepth_height
 1170              	@ armwave.c:162:     g_armwave_state.xstride = target_height;
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1171              		.loc 1 162 29 view .LVU303
 1172 055c 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1173              		.loc 1 163 5 is_stmt 1 view .LVU304
 164:armwave.c     ****     g_armwave_state.waves = waves;
 1174              		.loc 1 164 5 view .LVU305
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1175              		.loc 1 165 5 view .LVU306
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1176              		.loc 1 166 5 view .LVU307
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1177              		.loc 1 167 5 view .LVU308
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 1178              		.loc 1 168 5 view .LVU309
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 1179              		.loc 1 169 5 view .LVU310
 170:armwave.c     **** 
 1180              		.loc 1 170 5 view .LVU311
 172:armwave.c     **** 
 1181              		.loc 1 172 5 view .LVU312
 1182              	@ armwave.c:169:     g_armwave_state.target_width = target_width;
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 1183              		.loc 1 169 34 is_stmt 0 view .LVU313
 1184 0560 3C6084E5 		str	r6, [r4, #60]	@ target_width, g_armwave_state.target_width
 1185              	@ armwave.c:170:     g_armwave_state.target_height = target_height;
 170:armwave.c     **** 
 1186              		.loc 1 170 35 view .LVU314
 1187 0564 402084E5 		str	r2, [r4, #64]	@ target_height, g_armwave_state.target_height
 1188              	@ armwave.c:166:     g_armwave_state.size = target_height * target_width;
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1189              		.loc 1 166 26 view .LVU315
 1190 0568 38E084E5 		str	lr, [r4, #56]	@ tmp183, g_armwave_state.size
 1191              	@ armwave.c:168:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 1192              		.loc 1 168 34 view .LVU316
 1193 056c 34C084E5 		str	ip, [r4, #52]	@ _9, g_armwave_state.ch_buff_size
 1194              	@ armwave.c:172:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 172:armwave.c     **** 
 1195              		.loc 1 172 5 view .LVU317
 1196 0570 FEFFFFEB 		bl	printf		@
 1197              	.LVL62:
 177:armwave.c     **** 
 1198              		.loc 1 177 5 is_stmt 1 view .LVU318
 1199              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1200              		.loc 1 179 23 is_stmt 0 view .LVU319
 1201 0574 040094E5 		ldr	r0, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 1202              	@ armwave.c:177:     g_armwave_state.slice_height = 64;  
 177:armwave.c     **** 
 1203              		.loc 1 177 34 view .LVU320
 1204 0578 4030A0E3 		mov	r3, #64	@ tmp191,
 1205              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1206              		.loc 1 179 7 view .LVU321
 1207 057c 000050E3 		cmp	r0, #0	@ _10,
 1208              	@ armwave.c:177:     g_armwave_state.slice_height = 64;  
 177:armwave.c     **** 
 1209              		.loc 1 177 34 view .LVU322
 1210 0580 2C3084E5 		str	r3, [r4, #44]	@ tmp191, g_armwave_state.slice_height
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1211              		.loc 1 179 5 is_stmt 1 view .LVU323
 1212              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1213              		.loc 1 179 7 is_stmt 0 view .LVU324
 1214 0584 0000000A 		beq	.L74		@,
 180:armwave.c     **** 
 1215              		.loc 1 180 9 is_stmt 1 view .LVU325
 1216 0588 FEFFFFEB 		bl	free		@
 1217              	.LVL63:
 1218              	.L74:
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1219              		.loc 1 182 5 view .LVU326
 1220              	@ armwave.c:182:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1221              		.loc 1 182 34 is_stmt 0 view .LVU327
 1222 058c 0110A0E3 		mov	r1, #1	@,
 1223 0590 340094E5 		ldr	r0, [r4, #52]	@, g_armwave_state.ch_buff_size
 1224 0594 FEFFFFEB 		bl	calloc		@
 1225              	.LVL64:
 1226              	@ armwave.c:183:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1227              		.loc 1 183 33 view .LVU328
 1228 0598 3C219FE5 		ldr	r2, .L88+16	@ tmp198,
 1229              	@ armwave.c:185:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 185:armwave.c     **** 
 1230              		.loc 1 185 33 view .LVU329
 1231 059c FA30A0E3 		mov	r3, #250	@ tmp201,
 1232              	@ armwave.c:183:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1233              		.loc 1 183 33 view .LVU330
 1234 05a0 502084E5 		str	r2, [r4, #80]	@ tmp198, MEM[(short int *)&g_armwave_state + 80B]
 1235              	@ armwave.c:185:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 185:armwave.c     **** 
 1236              		.loc 1 185 33 view .LVU331
 1237 05a4 B435C4E1 		strh	r3, [r4, #84]	@ movhi	@ tmp201, g_armwave_state.ch1_color.b
 1238              	@ armwave.c:187:     assert(g_armwave_state.ch1_buffer != NULL);
 187:armwave.c     **** 
 1239              		.loc 1 187 5 view .LVU332
 1240 05a8 000050E3 		cmp	r0, #0	@ tmp195,
 1241              	@ armwave.c:182:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1242              		.loc 1 182 32 view .LVU333
 1243 05ac 040084E5 		str	r0, [r4, #4]	@ tmp195, g_armwave_state.ch1_buffer
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1244              		.loc 1 183 5 is_stmt 1 view .LVU334
 184:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1245              		.loc 1 184 5 view .LVU335
 185:armwave.c     **** 
 1246              		.loc 1 185 5 view .LVU336
 187:armwave.c     **** 
 1247              		.loc 1 187 5 view .LVU337
 1248 05b0 3600000A 		beq	.L86		@,
 190:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1249              		.loc 1 190 5 view .LVU338
 1250              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1251              		.loc 1 191 34 is_stmt 0 view .LVU339
 1252 05b4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1253              	@ armwave.c:190:     length = end_point - start_point;
 190:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1254              		.loc 1 190 12 view .LVU340
 1255 05b8 075045E0 		sub	r5, r5, r7	@ length, end_point, start_point
 1256              	.LVL65:
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1257              		.loc 1 191 5 is_stmt 1 view .LVU341
 1258              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 193:armwave.c     **** 
 1259              		.loc 1 193 40 is_stmt 0 view .LVU342
 1260 05bc 8500A0E1 		lsl	r0, r5, #1	@, length,
 1261              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1262              		.loc 1 191 34 view .LVU343
 1263 05c0 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp206, target_width
 1264              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1265              		.loc 1 191 31 view .LVU344
 1266 05c4 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1267 05c8 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp205, length
 1268              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1269              		.loc 1 192 60 view .LVU345
 1270 05cc 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp234, g_armwave_state.slice_height
 1271 05d0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp209, tmp234
 1272              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1273              		.loc 1 191 22 view .LVU346
 1274 05d4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp205, tmp206
 1275              	.LVL66:
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1276              		.loc 1 192 5 is_stmt 1 view .LVU347
 1277              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1278              		.loc 1 192 60 is_stmt 0 view .LVU348
 1279 05d8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp211, tmp209, points_per_pixel
 1280              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1281              		.loc 1 192 41 view .LVU349
 1282 05dc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp212, tmp211
 1283 05e0 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp212, g_armwave_state.slice_record_height
 193:armwave.c     **** 
 1284              		.loc 1 193 5 is_stmt 1 view .LVU350
 1285              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 193:armwave.c     **** 
 1286              		.loc 1 193 40 is_stmt 0 view .LVU351
 1287 05e4 FEFFFFEB 		bl	malloc		@
 1288              	.LVL67:
 1289              	@ armwave.c:195:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 195:armwave.c     **** 
 1290              		.loc 1 195 5 view .LVU352
 1291 05e8 000050E3 		cmp	r0, #0	@ tmp214,
 1292              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 193:armwave.c     **** 
 1293              		.loc 1 193 38 view .LVU353
 1294 05ec 680084E5 		str	r0, [r4, #104]	@ tmp214, g_armwave_state.xcoord_to_xpixel
 195:armwave.c     **** 
 1295              		.loc 1 195 5 is_stmt 1 view .LVU354
 1296 05f0 2B00000A 		beq	.L87		@,
 1297              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1298              		.loc 1 198 54 is_stmt 0 view .LVU355
 1299 05f4 347ADFED 		vldr.32	s15, .L88	@ tmp219,
 1300 05f8 020040E2 		sub	r0, r0, #2	@ ivtmp.75, tmp214,
 1301              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1302              		.loc 1 197 12 view .LVU356
 1303 05fc 0030A0E3 		mov	r3, #0	@ xx,
 1304              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1305              		.loc 1 198 54 view .LVU357
 1306 0600 887A87EE 		vdiv.f32	s14, s15, s16	@ _21, tmp219, points_per_pixel
 1307              	.L77:
 1308              	.LVL68:
 198:armwave.c     **** 
 1309              		.loc 1 198 9 is_stmt 1 discriminator 3 view .LVU358
 1310              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1311              		.loc 1 198 74 is_stmt 0 discriminator 3 view .LVU359
 1312 0604 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1313              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1314              		.loc 1 197 32 discriminator 3 view .LVU360
 1315 0608 013083E2 		add	r3, r3, #1	@ xx, xx,
 1316              	.LVL69:
 1317              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1318              		.loc 1 197 5 discriminator 3 view .LVU361
 1319 060c 030055E1 		cmp	r5, r3	@ length, xx
 1320              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1321              		.loc 1 198 74 discriminator 3 view .LVU362
 1322 0610 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, xx
 1323 0614 877A67EE 		vmul.f32	s15, s15, s14	@ tmp221, tmp220, _21
 1324              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1325              		.loc 1 198 46 discriminator 3 view .LVU363
 1326 0618 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp222, tmp221
 1327 061c 902A17EE 		vmov	r2, s15	@ int	@ tmp222, tmp222
 1328 0620 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp222, MEM[base: _81, offset: 0B]
 1329              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1330              		.loc 1 197 5 discriminator 3 view .LVU364
 1331 0624 F6FFFF1A 		bne	.L77		@,
 203:armwave.c     **** }
 1332              		.loc 1 203 5 is_stmt 1 view .LVU365
 1333              	@ armwave.c:203:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 203:armwave.c     **** }
 1334              		.loc 1 203 34 is_stmt 0 view .LVU366
 1335 0628 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 1336 062c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1337 0630 FEFFFFEB 		bl	malloc		@
 1338              	.LVL70:
 1339              	@ armwave.c:204: }
 1340              		.loc 1 204 1 view .LVU367
 1341 0634 028BBDEC 		vldm	sp!, {d8}	@
 1342              		.cfi_remember_state
 1343              		.cfi_restore 80
 1344              		.cfi_restore 81
 1345              		.cfi_def_cfa_offset 24
 1346              	.LVL71:
 1347              	@ armwave.c:203:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 203:armwave.c     **** }
 1348              		.loc 1 203 32 view .LVU368
 1349 0638 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 1350              	@ armwave.c:204: }
 1351              		.loc 1 204 1 view .LVU369
 1352 063c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1353              	.LVL72:
 1354              	.L69:
 1355              		.cfi_restore_state
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 1356              		.loc 1 147 5 is_stmt 1 view .LVU370
 1357              	@ armwave.c:147:     if(target_height == 256) {
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 1358              		.loc 1 147 7 is_stmt 0 view .LVU371
 1359 0640 010C52E3 		cmp	r2, #256	@ target_height,
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1360              		.loc 1 148 9 is_stmt 1 view .LVU372
 1361              	@ armwave.c:148:         g_armwave_state.row_shift = 8;
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1362              		.loc 1 148 35 is_stmt 0 view .LVU373
 1363 0644 08C0A003 		moveq	ip, #8	@ tmp162,
 1364              	@ armwave.c:152:         g_armwave_state.row_mask = 0x1ff;
 152:armwave.c     ****     } else if(target_height == 1024) {
 1365              		.loc 1 152 34 view .LVU374
 1366 0648 90C09F15 		ldrne	ip, .L88+20	@ tmp168,
 1367              	@ armwave.c:149:         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 1368              		.loc 1 149 34 view .LVU375
 1369 064c FF00A003 		moveq	r0, #255	@ tmp164,
 1370              	.LVL73:
 1371              	@ armwave.c:151:         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1372              		.loc 1 151 35 view .LVU376
 1373 0650 0900A013 		movne	r0, #9	@ tmp166,
 1374              	@ armwave.c:148:         g_armwave_state.row_shift = 8;
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1375              		.loc 1 148 35 view .LVU377
 1376 0654 44C08405 		streq	ip, [r4, #68]	@ tmp162, g_armwave_state.row_shift
 149:armwave.c     ****     } else if(target_height == 512) {
 1377              		.loc 1 149 9 is_stmt 1 view .LVU378
 1378              	@ armwave.c:149:         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 1379              		.loc 1 149 34 is_stmt 0 view .LVU379
 1380 0658 48008405 		streq	r0, [r4, #72]	@ tmp164, g_armwave_state.row_mask
 150:armwave.c     ****         g_armwave_state.row_shift = 9;
 1381              		.loc 1 150 12 is_stmt 1 view .LVU380
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1382              		.loc 1 151 9 view .LVU381
 1383              	@ armwave.c:152:         g_armwave_state.row_mask = 0x1ff;
 152:armwave.c     ****     } else if(target_height == 1024) {
 1384              		.loc 1 152 34 is_stmt 0 view .LVU382
 1385 065c 48C08415 		strne	ip, [r4, #72]	@ tmp168, g_armwave_state.row_mask
 1386              	@ armwave.c:151:         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1387              		.loc 1 151 35 view .LVU383
 1388 0660 44008415 		strne	r0, [r4, #68]	@ tmp166, g_armwave_state.row_shift
 152:armwave.c     ****     } else if(target_height == 1024) {
 1389              		.loc 1 152 9 is_stmt 1 view .LVU384
 1390 0664 B2FFFFEA 		b	.L72		@
 1391              	.L85:
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1392              		.loc 1 154 9 view .LVU385
 1393              	@ armwave.c:155:         g_armwave_state.row_mask = 0x3ff;
 155:armwave.c     ****     } else if(target_height == 2048) {
 1394              		.loc 1 155 34 is_stmt 0 view .LVU386
 1395 0668 74C09FE5 		ldr	ip, .L88+24	@ tmp172,
 1396              	@ armwave.c:154:         g_armwave_state.row_shift = 10;
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1397              		.loc 1 154 35 view .LVU387
 1398 066c 0A00A0E3 		mov	r0, #10	@ tmp170,
 1399              	@ armwave.c:155:         g_armwave_state.row_mask = 0x3ff;
 155:armwave.c     ****     } else if(target_height == 2048) {
 1400              		.loc 1 155 34 view .LVU388
 1401 0670 48C084E5 		str	ip, [r4, #72]	@ tmp172, g_armwave_state.row_mask
 1402              	@ armwave.c:154:         g_armwave_state.row_shift = 10;
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1403              		.loc 1 154 35 view .LVU389
 1404 0674 440084E5 		str	r0, [r4, #68]	@ tmp170, g_armwave_state.row_shift
 155:armwave.c     ****     } else if(target_height == 2048) {
 1405              		.loc 1 155 9 is_stmt 1 view .LVU390
 1406 0678 ADFFFFEA 		b	.L72		@
 1407              	.L84:
 145:armwave.c     **** 
 1408              		.loc 1 145 5 discriminator 2 view .LVU391
 1409 067c 64309FE5 		ldr	r3, .L88+28	@,
 1410              	.LVL74:
 145:armwave.c     **** 
 1411              		.loc 1 145 5 is_stmt 0 discriminator 2 view .LVU392
 1412 0680 9120A0E3 		mov	r2, #145	@,
 1413 0684 60109FE5 		ldr	r1, .L88+32	@,
 1414 0688 60009FE5 		ldr	r0, .L88+36	@,
 1415 068c FEFFFFEB 		bl	__assert_fail		@
 1416              	.LVL75:
 1417              	.L86:
 187:armwave.c     **** 
 1418              		.loc 1 187 5 is_stmt 1 discriminator 1 view .LVU393
 1419 0690 50309FE5 		ldr	r3, .L88+28	@,
 1420 0694 BB20A0E3 		mov	r2, #187	@,
 1421 0698 4C109FE5 		ldr	r1, .L88+32	@,
 1422 069c 50009FE5 		ldr	r0, .L88+40	@,
 1423 06a0 FEFFFFEB 		bl	__assert_fail		@
 1424              	.LVL76:
 1425              	.L87:
 195:armwave.c     **** 
 1426              		.loc 1 195 5 discriminator 1 view .LVU394
 1427 06a4 3C309FE5 		ldr	r3, .L88+28	@,
 1428 06a8 C320A0E3 		mov	r2, #195	@,
 1429 06ac 38109FE5 		ldr	r1, .L88+32	@,
 1430 06b0 40009FE5 		ldr	r0, .L88+44	@,
 1431 06b4 FEFFFFEB 		bl	__assert_fail		@
 1432              	.LVL77:
 1433              	.L83:
 139:armwave.c     **** 
 1434              		.loc 1 139 5 discriminator 1 view .LVU395
 1435 06b8 28309FE5 		ldr	r3, .L88+28	@,
 1436              	.LVL78:
 139:armwave.c     **** 
 1437              		.loc 1 139 5 is_stmt 0 discriminator 1 view .LVU396
 1438 06bc 8B20A0E3 		mov	r2, #139	@,
 1439 06c0 24109FE5 		ldr	r1, .L88+32	@,
 1440 06c4 30009FE5 		ldr	r0, .L88+48	@,
 1441              	.LVL79:
 139:armwave.c     **** 
 1442              		.loc 1 139 5 discriminator 1 view .LVU397
 1443 06c8 FEFFFFEB 		bl	__assert_fail		@
 1444              	.LVL80:
 1445              	.L89:
 1446              		.align	2
 1447              	.L88:
 1448 06cc 0000803F 		.word	1065353216
 1449 06d0 00000000 		.word	g_armwave_state
 1450 06d4 FF070000 		.word	2047
 1451 06d8 6C000000 		.word	.LC2
 1452 06dc F609F406 		.word	116656630
 1453 06e0 FF010000 		.word	511
 1454 06e4 FF030000 		.word	1023
 1455 06e8 00000000 		.word	.LANCHOR0
 1456 06ec 00000000 		.word	.LC0
 1457 06f0 0C000000 		.word	.LC1
 1458 06f4 80000000 		.word	.LC3
 1459 06f8 A4000000 		.word	.LC4
 1460 06fc D0000000 		.word	.LC5
 1461              		.cfi_endproc
 1462              	.LFE61:
 1464              		.align	2
 1465              		.global	armwave_clear_buffer
 1466              		.syntax unified
 1467              		.arm
 1468              		.fpu vfp
 1470              	armwave_clear_buffer:
 1471              	.LVL81:
 1472              	.LFB62:
 205:armwave.c     **** 
 206:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 207:armwave.c     **** {
 1473              		.loc 1 207 1 is_stmt 1 view -0
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 0
 1476              		@ frame_needed = 0, uses_anonymous_args = 0
 1477              		@ link register save eliminated.
 208:armwave.c     ****     // Flags ignored, only one buffer cleared
 209:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1478              		.loc 1 209 5 view .LVU399
 1479 0700 0C309FE5 		ldr	r3, .L91	@ tmp113,
 1480 0704 0010A0E3 		mov	r1, #0	@,
 1481 0708 382093E5 		ldr	r2, [r3, #56]	@, g_armwave_state.size
 1482 070c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1483              	.LVL82:
 1484              		.loc 1 209 5 is_stmt 0 view .LVU400
 1485 0710 FEFFFFEA 		b	memset		@
 1486              	.LVL83:
 1487              	.L92:
 1488              		.align	2
 1489              	.L91:
 1490 0714 00000000 		.word	g_armwave_state
 1491              		.cfi_endproc
 1492              	.LFE62:
 1494              		.align	2
 1495              		.global	armwave_fill_pixbuf_256
 1496              		.syntax unified
 1497              		.arm
 1498              		.fpu vfp
 1500              	armwave_fill_pixbuf_256:
 1501              	.LVL84:
 1502              	.LFB63:
 210:armwave.c     **** }
 211:armwave.c     **** 
 212:armwave.c     **** /*
 213:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 214:armwave.c     ****  */
 215:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 216:armwave.c     **** {
 1503              		.loc 1 216 1 is_stmt 1 view -0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 8
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 217:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1507              		.loc 1 217 5 view .LVU402
 218:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1508              		.loc 1 218 5 view .LVU403
 219:armwave.c     ****     uint8_t r, g, b, value;
 1509              		.loc 1 219 5 view .LVU404
 220:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1510              		.loc 1 220 5 view .LVU405
 1511              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1512              		.loc 1 216 1 is_stmt 0 view .LVU406
 1513 0718 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1514              		.cfi_def_cfa_offset 36
 1515              		.cfi_offset 4, -36
 1516              		.cfi_offset 5, -32
 1517              		.cfi_offset 6, -28
 1518              		.cfi_offset 7, -24
 1519              		.cfi_offset 8, -20
 1520              		.cfi_offset 9, -16
 1521              		.cfi_offset 10, -12
 1522              		.cfi_offset 11, -8
 1523              		.cfi_offset 14, -4
 1524              	@ armwave.c:224:     assert(out_buffer != NULL);
 221:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 222:armwave.c     ****     uint32_t offset;
 223:armwave.c     **** 
 224:armwave.c     ****     assert(out_buffer != NULL);
 1525              		.loc 1 224 5 view .LVU407
 1526 071c 000050E3 		cmp	r0, #0	@ out_buffer
 1527              	@ armwave.c:220:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 220:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1528              		.loc 1 220 15 view .LVU408
 1529 0720 44529FE5 		ldr	r5, .L120	@ tmp361,
 1530              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1531              		.loc 1 216 1 view .LVU409
 1532 0724 0CD04DE2 		sub	sp, sp, #12	@,,
 1533              		.cfi_def_cfa_offset 48
 1534              	@ armwave.c:220:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 220:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1535              		.loc 1 220 15 view .LVU410
 1536 0728 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1537              	.LVL85:
 221:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1538              		.loc 1 221 5 is_stmt 1 view .LVU411
 222:armwave.c     **** 
 1539              		.loc 1 222 5 view .LVU412
 1540              		.loc 1 224 5 view .LVU413
 1541 072c 8900000A 		beq	.L118		@,
 225:armwave.c     **** 
 226:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 227:armwave.c     **** 
 228:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 1542              		.loc 1 228 5 view .LVU414
 1543              	@ armwave.c:228:     npix = g_armwave_state.target_width * 256;
 1544              		.loc 1 228 41 is_stmt 0 view .LVU415
 1545 0730 3CC095E5 		ldr	ip, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1546 0734 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 1547              	.LVL86:
 229:armwave.c     **** 
 230:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1548              		.loc 1 230 5 is_stmt 1 view .LVU416
 1549              		.loc 1 230 5 is_stmt 0 view .LVU417
 1550 0738 00005CE3 		cmp	ip, #0	@ npix,
 1551 073c 0A0000DA 		ble	.L93		@,
 1552              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 231:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 232:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 233:armwave.c     ****         // most normal waveforms.
 234:armwave.c     ****         wave_word = *base_32ptr++;
 235:armwave.c     **** 
 236:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 237:armwave.c     ****             for(i = 0; i < 4; i++) {
 238:armwave.c     ****                 value = wave_word & 0xff;
 239:armwave.c     ****                 wave_word >>= 8;
 240:armwave.c     **** 
 241:armwave.c     ****                 if(value != 0) {
 242:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1553              		.loc 1 242 52 view .LVU418
 1554 0740 F0A5D5E1 		ldrsh	r10, [r5, #80]	@ _70, g_armwave_state.ch1_color.r
 1555              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1556              		.loc 1 243 52 view .LVU419
 1557 0744 F295D5E1 		ldrsh	r9, [r5, #82]	@ _76, g_armwave_state.ch1_color.g
 1558              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1559              		.loc 1 244 52 view .LVU420
 1560 0748 F4B5D5E1 		ldrsh	fp, [r5, #84]	@ _80, g_armwave_state.ch1_color.b
 1561              	@ armwave.c:230:     for(n = 0; n < npix; n += 4) {
 230:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1562              		.loc 1 230 11 view .LVU421
 1563 074c 0030A0E3 		mov	r3, #0	@ n,
 1564 0750 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 1565              	.LVL87:
 1566              	.L102:
 234:armwave.c     **** 
 1567              		.loc 1 234 9 is_stmt 1 view .LVU422
 1568              	@ armwave.c:234:         wave_word = *base_32ptr++;
 234:armwave.c     **** 
 1569              		.loc 1 234 19 is_stmt 0 view .LVU423
 1570 0754 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 1571              	.LVL88:
 236:armwave.c     ****             for(i = 0; i < 4; i++) {
 1572              		.loc 1 236 9 is_stmt 1 view .LVU424
 1573              	@ armwave.c:236:         if(COND_UNLIKELY(wave_word != 0)) {
 236:armwave.c     ****             for(i = 0; i < 4; i++) {
 1574              		.loc 1 236 11 is_stmt 0 view .LVU425
 1575 0758 000052E3 		cmp	r2, #0	@ wave_word,
 1576 075c 0400001A 		bne	.L119		@,
 1577              	.LVL89:
 1578              	.L97:
 1579              	@ armwave.c:230:     for(n = 0; n < npix; n += 4) {
 230:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1580              		.loc 1 230 28 discriminator 2 view .LVU426
 1581 0760 043083E2 		add	r3, r3, #4	@ n, n,
 1582              	.LVL90:
 1583              	@ armwave.c:230:     for(n = 0; n < npix; n += 4) {
 230:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1584              		.loc 1 230 5 discriminator 2 view .LVU427
 1585 0764 03005CE1 		cmp	ip, r3	@ npix, n
 1586 0768 F9FFFFCA 		bgt	.L102		@,
 1587              	.LVL91:
 1588              	.L93:
 1589              	@ armwave.c:263: }
 245:armwave.c     **** 
 246:armwave.c     ****                     r = MIN(rr, 255);
 247:armwave.c     ****                     g = MIN(gg, 255);
 248:armwave.c     ****                     b = MIN(bb, 255);
 249:armwave.c     **** 
 250:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 251:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 252:armwave.c     **** 
 253:armwave.c     ****                     // Is there a better way?
 254:armwave.c     ****                     nsub = n + i;
 255:armwave.c     ****                     xx = nsub & 0xff;
 256:armwave.c     ****                     yy = nsub >> 8;
 257:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 258:armwave.c     ****                     *(out_buffer_base + offset) = word;
 259:armwave.c     ****                 }
 260:armwave.c     ****             }
 261:armwave.c     ****         } 
 262:armwave.c     ****     }
 263:armwave.c     **** }
 1590              		.loc 1 263 1 view .LVU428
 1591 076c 0CD08DE2 		add	sp, sp, #12	@,,
 1592              		.cfi_remember_state
 1593              		.cfi_def_cfa_offset 36
 1594              		@ sp needed	@
 1595 0770 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1596              	.LVL92:
 1597              	.L119:
 1598              		.cfi_restore_state
 238:armwave.c     ****                 wave_word >>= 8;
 1599              		.loc 1 238 17 is_stmt 1 view .LVU429
 239:armwave.c     **** 
 1600              		.loc 1 239 17 view .LVU430
 1601              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1602              		.loc 1 241 19 is_stmt 0 view .LVU431
 1603 0774 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 1604              	@ armwave.c:239:                 wave_word >>= 8;
 239:armwave.c     **** 
 1605              		.loc 1 239 27 view .LVU432
 1606 0778 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 1607              	.LVL93:
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1608              		.loc 1 241 17 is_stmt 1 view .LVU433
 1609              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1610              		.loc 1 241 19 is_stmt 0 view .LVU434
 1611 077c 1900000A 		beq	.L98		@,
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1612              		.loc 1 242 21 is_stmt 1 view .LVU435
 1613              	.LVL94:
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1614              		.loc 1 243 21 view .LVU436
 244:armwave.c     **** 
 1615              		.loc 1 244 21 view .LVU437
 246:armwave.c     ****                     g = MIN(gg, 255);
 1616              		.loc 1 246 21 view .LVU438
 247:armwave.c     ****                     b = MIN(bb, 255);
 1617              		.loc 1 247 21 view .LVU439
 248:armwave.c     **** 
 1618              		.loc 1 248 21 view .LVU440
 251:armwave.c     **** 
 1619              		.loc 1 251 21 view .LVU441
 254:armwave.c     ****                     xx = nsub & 0xff;
 1620              		.loc 1 254 21 view .LVU442
 255:armwave.c     ****                     yy = nsub >> 8;
 1621              		.loc 1 255 21 view .LVU443
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1622              		.loc 1 256 21 view .LVU444
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1623              		.loc 1 257 21 view .LVU445
 258:armwave.c     ****                 }
 1624              		.loc 1 258 21 view .LVU446
 1625              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1626              		.loc 1 244 55 is_stmt 0 view .LVU447
 1627 0780 9B0604E0 		mul	r4, fp, r6	@ tmp277, _80, _72
 1628              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1629              		.loc 1 243 55 view .LVU448
 1630 0784 990608E0 		mul	r8, r9, r6	@ tmp281, _76, _72
 1631              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1632              		.loc 1 244 24 view .LVU449
 1633 0788 4444A0E1 		asr	r4, r4, #8	@ bb, tmp277,
 1634              	.LVL95:
 1635              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1636              		.loc 1 248 25 view .LVU450
 1637 078c FF0054E3 		cmp	r4, #255	@ bb,
 1638              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1639              		.loc 1 243 24 view .LVU451
 1640 0790 4884A0E1 		asr	r8, r8, #8	@ gg, tmp281,
 1641              	.LVL96:
 1642              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1643              		.loc 1 248 25 view .LVU452
 1644 0794 FF40A0A3 		movge	r4, #255	@ bb,
 1645              	.LVL97:
 1646              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1647              		.loc 1 242 55 view .LVU453
 1648 0798 960A06E0 		mul	r6, r6, r10	@ tmp287, _72, _70
 1649              	.LVL98:
 1650              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1651              		.loc 1 247 25 view .LVU454
 1652 079c FF0058E3 		cmp	r8, #255	@ gg,
 1653 07a0 FF80A0A3 		movge	r8, #255	@ gg,
 1654              	.LVL99:
 1655              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1656              		.loc 1 242 24 view .LVU455
 1657 07a4 4664A0E1 		asr	r6, r6, #8	@ rr, tmp287,
 1658              	.LVL100:
 1659              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1660              		.loc 1 251 56 view .LVU456
 1661 07a8 0884A0E1 		lsl	r8, r8, #8	@ tmp282, gg,
 1662              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1663              		.loc 1 258 39 view .LVU457
 1664 07ac 3C0095E5 		ldr	r0, [r5, #60]	@ tmp373, g_armwave_state.target_width
 1665              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1666              		.loc 1 251 44 view .LVU458
 1667 07b0 0448A0E1 		lsl	r4, r4, #16	@ tmp278, bb,
 1668              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1669              		.loc 1 246 25 view .LVU459
 1670 07b4 FF0056E3 		cmp	r6, #255	@ rr,
 1671              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1672              		.loc 1 251 56 view .LVU460
 1673 07b8 7880FFE6 		uxth	r8, r8	@ tmp283, tmp282
 1674              	@ armwave.c:255:                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 1675              		.loc 1 255 24 view .LVU461
 1676 07bc 7370EFE6 		uxtb	r7, r3	@ xx, n
 1677              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1678              		.loc 1 251 44 view .LVU462
 1679 07c0 FF4804E2 		and	r4, r4, #16711680	@ tmp279, tmp278,
 1680              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1681              		.loc 1 251 51 view .LVU463
 1682 07c4 084084E1 		orr	r4, r4, r8	@ tmp285, tmp279, tmp283
 1683              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1684              		.loc 1 246 25 view .LVU464
 1685 07c8 FF60A0A3 		movge	r6, #255	@ rr,
 1686              	.LVL101:
 1687              	@ armwave.c:256:                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1688              		.loc 1 256 31 view .LVU465
 1689 07cc 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 1690              	.LVL102:
 1691              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1692              		.loc 1 258 39 view .LVU466
 1693 07d0 908727E0 		mla	r7, r0, r7, r8	@ tmp275, tmp373, xx, yy
 1694              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1695              		.loc 1 251 62 view .LVU467
 1696 07d4 7660EFE6 		uxtb	r6, r6	@ rr, rr
 1697              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1698              		.loc 1 258 49 view .LVU468
 1699 07d8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1700              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1701              		.loc 1 251 62 view .LVU469
 1702 07dc 066084E1 		orr	r6, r4, r6	@ tmp289, tmp285, rr
 1703              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1704              		.loc 1 251 26 view .LVU470
 1705 07e0 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp289,
 1706              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1707              		.loc 1 258 49 view .LVU471
 1708 07e4 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 1709              	.LVL103:
 1710              	.L98:
 238:armwave.c     ****                 wave_word >>= 8;
 1711              		.loc 1 238 17 is_stmt 1 view .LVU472
 239:armwave.c     **** 
 1712              		.loc 1 239 17 view .LVU473
 1713              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1714              		.loc 1 241 19 is_stmt 0 view .LVU474
 1715 07e8 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 1716              	.LVL104:
 1717              	@ armwave.c:239:                 wave_word >>= 8;
 239:armwave.c     **** 
 1718              		.loc 1 239 27 view .LVU475
 1719 07ec 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 1720              	.LVL105:
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1721              		.loc 1 241 17 is_stmt 1 view .LVU476
 1722              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1723              		.loc 1 241 19 is_stmt 0 view .LVU477
 1724 07f0 1C00000A 		beq	.L99		@,
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1725              		.loc 1 242 21 is_stmt 1 view .LVU478
 1726              	.LVL106:
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1727              		.loc 1 243 21 view .LVU479
 244:armwave.c     **** 
 1728              		.loc 1 244 21 view .LVU480
 246:armwave.c     ****                     g = MIN(gg, 255);
 1729              		.loc 1 246 21 view .LVU481
 247:armwave.c     ****                     b = MIN(bb, 255);
 1730              		.loc 1 247 21 view .LVU482
 248:armwave.c     **** 
 1731              		.loc 1 248 21 view .LVU483
 251:armwave.c     **** 
 1732              		.loc 1 251 21 view .LVU484
 254:armwave.c     ****                     xx = nsub & 0xff;
 1733              		.loc 1 254 21 view .LVU485
 1734              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1735              		.loc 1 244 55 is_stmt 0 view .LVU486
 1736 07f4 9E0B04E0 		mul	r4, lr, fp	@ tmp300, _118, _80
 1737              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1738              		.loc 1 243 55 view .LVU487
 1739 07f8 9E0907E0 		mul	r7, lr, r9	@ tmp304, _118, _76
 1740              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1741              		.loc 1 244 24 view .LVU488
 1742 07fc 4444A0E1 		asr	r4, r4, #8	@ bb, tmp300,
 1743              	.LVL107:
 1744              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1745              		.loc 1 248 25 view .LVU489
 1746 0800 FF0054E3 		cmp	r4, #255	@ bb,
 1747 0804 FF40A0A3 		movge	r4, #255	@ bb,
 1748              	.LVL108:
 1749              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1750              		.loc 1 242 55 view .LVU490
 1751 0808 9E0A0EE0 		mul	lr, lr, r10	@ tmp310, _118, _70
 1752              	.LVL109:
 1753              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1754              		.loc 1 243 24 view .LVU491
 1755 080c 4774A0E1 		asr	r7, r7, #8	@ gg, tmp304,
 1756              	.LVL110:
 1757              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1758              		.loc 1 251 44 view .LVU492
 1759 0810 0448A0E1 		lsl	r4, r4, #16	@ tmp301, bb,
 1760              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1761              		.loc 1 247 25 view .LVU493
 1762 0814 FF0057E3 		cmp	r7, #255	@ gg,
 1763 0818 016083E2 		add	r6, r3, #1	@ _158, n,
 255:armwave.c     ****                     yy = nsub >> 8;
 1764              		.loc 1 255 21 is_stmt 1 view .LVU494
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1765              		.loc 1 256 21 view .LVU495
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1766              		.loc 1 257 21 view .LVU496
 258:armwave.c     ****                 }
 1767              		.loc 1 258 21 view .LVU497
 1768              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1769              		.loc 1 251 44 is_stmt 0 view .LVU498
 1770 081c FF4804E2 		and	r4, r4, #16711680	@ tmp302, tmp301,
 1771              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1772              		.loc 1 247 25 view .LVU499
 1773 0820 FF70A0A3 		movge	r7, #255	@ gg,
 1774              	.LVL111:
 1775              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1776              		.loc 1 251 44 view .LVU500
 1777 0824 04408DE5 		str	r4, [sp, #4]	@ tmp302, %sfp
 1778              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1779              		.loc 1 258 39 view .LVU501
 1780 0828 3C4095E5 		ldr	r4, [r5, #60]	@ tmp376, g_armwave_state.target_width
 1781              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1782              		.loc 1 242 24 view .LVU502
 1783 082c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp310,
 1784              	.LVL112:
 1785              	@ armwave.c:255:                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 1786              		.loc 1 255 24 view .LVU503
 1787 0830 7600EFE6 		uxtb	r0, r6	@ xx, _158
 1788              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1789              		.loc 1 246 25 view .LVU504
 1790 0834 FF005EE3 		cmp	lr, #255	@ rr,
 1791              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1792              		.loc 1 251 56 view .LVU505
 1793 0838 0774A0E1 		lsl	r7, r7, #8	@ tmp305, gg,
 1794              	@ armwave.c:256:                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1795              		.loc 1 256 31 view .LVU506
 1796 083c 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 1797              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1798              		.loc 1 258 39 view .LVU507
 1799 0840 946026E0 		mla	r6, r4, r0, r6	@ tmp298, tmp376, xx, yy
 1800              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1801              		.loc 1 246 25 view .LVU508
 1802 0844 FFE0A0A3 		movge	lr, #255	@ rr,
 1803              	.LVL113:
 1804              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1805              		.loc 1 251 51 view .LVU509
 1806 0848 04009DE5 		ldr	r0, [sp, #4]	@ tmp302, %sfp
 1807              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1808              		.loc 1 251 56 view .LVU510
 1809 084c 7770FFE6 		uxth	r7, r7	@ tmp306, tmp305
 1810              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1811              		.loc 1 251 51 view .LVU511
 1812 0850 074080E1 		orr	r4, r0, r7	@ tmp308, tmp302, tmp306
 1813              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1814              		.loc 1 251 62 view .LVU512
 1815 0854 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1816              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1817              		.loc 1 258 49 view .LVU513
 1818 0858 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1819              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1820              		.loc 1 251 62 view .LVU514
 1821 085c 0EE084E1 		orr	lr, r4, lr	@ tmp312, tmp308, rr
 1822              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1823              		.loc 1 251 26 view .LVU515
 1824 0860 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp312,
 1825              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1826              		.loc 1 258 49 view .LVU516
 1827 0864 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 1828              	.LVL114:
 1829              	.L99:
 238:armwave.c     ****                 wave_word >>= 8;
 1830              		.loc 1 238 17 is_stmt 1 view .LVU517
 239:armwave.c     **** 
 1831              		.loc 1 239 17 view .LVU518
 1832              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1833              		.loc 1 241 19 is_stmt 0 view .LVU519
 1834 0868 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 1835              	@ armwave.c:239:                 wave_word >>= 8;
 239:armwave.c     **** 
 1836              		.loc 1 239 27 view .LVU520
 1837 086c 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 1838              	.LVL115:
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1839              		.loc 1 241 17 is_stmt 1 view .LVU521
 1840              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1841              		.loc 1 241 19 is_stmt 0 view .LVU522
 1842 0870 1A00000A 		beq	.L100		@,
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1843              		.loc 1 242 21 is_stmt 1 view .LVU523
 1844              	.LVL116:
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1845              		.loc 1 243 21 view .LVU524
 244:armwave.c     **** 
 1846              		.loc 1 244 21 view .LVU525
 246:armwave.c     ****                     g = MIN(gg, 255);
 1847              		.loc 1 246 21 view .LVU526
 247:armwave.c     ****                     b = MIN(bb, 255);
 1848              		.loc 1 247 21 view .LVU527
 248:armwave.c     **** 
 1849              		.loc 1 248 21 view .LVU528
 251:armwave.c     **** 
 1850              		.loc 1 251 21 view .LVU529
 254:armwave.c     ****                     xx = nsub & 0xff;
 1851              		.loc 1 254 21 view .LVU530
 1852              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1853              		.loc 1 244 55 is_stmt 0 view .LVU531
 1854 0874 9E0B04E0 		mul	r4, lr, fp	@ tmp323, _164, _80
 1855              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1856              		.loc 1 243 55 view .LVU532
 1857 0878 9E0906E0 		mul	r6, lr, r9	@ tmp327, _164, _76
 1858              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1859              		.loc 1 244 24 view .LVU533
 1860 087c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp323,
 1861              	.LVL117:
 1862              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1863              		.loc 1 242 55 view .LVU534
 1864 0880 9E0A0EE0 		mul	lr, lr, r10	@ tmp333, _164, _70
 1865              	.LVL118:
 1866              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1867              		.loc 1 248 25 view .LVU535
 1868 0884 FF0054E3 		cmp	r4, #255	@ bb,
 1869              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1870              		.loc 1 243 24 view .LVU536
 1871 0888 4664A0E1 		asr	r6, r6, #8	@ gg, tmp327,
 1872              	.LVL119:
 1873              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1874              		.loc 1 248 25 view .LVU537
 1875 088c FF40A0A3 		movge	r4, #255	@ bb,
 1876              	.LVL120:
 1877              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1878              		.loc 1 247 25 view .LVU538
 1879 0890 FF0056E3 		cmp	r6, #255	@ gg,
 1880 0894 FF60A0A3 		movge	r6, #255	@ gg,
 1881              	.LVL121:
 247:armwave.c     ****                     b = MIN(bb, 255);
 1882              		.loc 1 247 25 view .LVU539
 1883 0898 027083E2 		add	r7, r3, #2	@ _66, n,
 255:armwave.c     ****                     yy = nsub >> 8;
 1884              		.loc 1 255 21 is_stmt 1 view .LVU540
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1885              		.loc 1 256 21 view .LVU541
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1886              		.loc 1 257 21 view .LVU542
 258:armwave.c     ****                 }
 1887              		.loc 1 258 21 view .LVU543
 1888              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1889              		.loc 1 242 24 is_stmt 0 view .LVU544
 1890 089c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp333,
 1891              	.LVL122:
 1892              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1893              		.loc 1 258 39 view .LVU545
 1894 08a0 3C0095E5 		ldr	r0, [r5, #60]	@ tmp377, g_armwave_state.target_width
 1895              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1896              		.loc 1 246 25 view .LVU546
 1897 08a4 FF005EE3 		cmp	lr, #255	@ rr,
 1898              	@ armwave.c:255:                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 1899              		.loc 1 255 24 view .LVU547
 1900 08a8 7780EFE6 		uxtb	r8, r7	@ xx, _66
 1901              	.LVL123:
 1902              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1903              		.loc 1 251 56 view .LVU548
 1904 08ac 0664A0E1 		lsl	r6, r6, #8	@ tmp328, gg,
 1905              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1906              		.loc 1 251 44 view .LVU549
 1907 08b0 0448A0E1 		lsl	r4, r4, #16	@ tmp324, bb,
 1908              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1909              		.loc 1 246 25 view .LVU550
 1910 08b4 FFE0A0A3 		movge	lr, #255	@ rr,
 1911              	.LVL124:
 1912              	@ armwave.c:256:                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1913              		.loc 1 256 31 view .LVU551
 1914 08b8 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 1915              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1916              		.loc 1 258 39 view .LVU552
 1917 08bc 907827E0 		mla	r7, r0, r8, r7	@ tmp321, tmp377, xx, yy
 1918              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1919              		.loc 1 251 44 view .LVU553
 1920 08c0 FF4804E2 		and	r4, r4, #16711680	@ tmp325, tmp324,
 1921              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1922              		.loc 1 251 56 view .LVU554
 1923 08c4 7660FFE6 		uxth	r6, r6	@ tmp329, tmp328
 1924              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1925              		.loc 1 251 51 view .LVU555
 1926 08c8 066084E1 		orr	r6, r4, r6	@ tmp331, tmp325, tmp329
 1927              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1928              		.loc 1 251 62 view .LVU556
 1929 08cc 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1930              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1931              		.loc 1 258 49 view .LVU557
 1932 08d0 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1933              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1934              		.loc 1 251 62 view .LVU558
 1935 08d4 0EE086E1 		orr	lr, r6, lr	@ tmp335, tmp331, rr
 1936              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1937              		.loc 1 251 26 view .LVU559
 1938 08d8 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp335,
 1939              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1940              		.loc 1 258 49 view .LVU560
 1941 08dc 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 1942              	.L100:
 1943              	.LVL125:
 238:armwave.c     ****                 wave_word >>= 8;
 1944              		.loc 1 238 17 is_stmt 1 view .LVU561
 239:armwave.c     **** 
 1945              		.loc 1 239 17 view .LVU562
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1946              		.loc 1 241 17 view .LVU563
 1947              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1948              		.loc 1 241 19 is_stmt 0 view .LVU564
 1949 08e0 000052E3 		cmp	r2, #0	@ wave_word,
 1950 08e4 9DFFFF0A 		beq	.L97		@,
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1951              		.loc 1 242 21 is_stmt 1 view .LVU565
 1952              	.LVL126:
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1953              		.loc 1 243 21 view .LVU566
 244:armwave.c     **** 
 1954              		.loc 1 244 21 view .LVU567
 246:armwave.c     ****                     g = MIN(gg, 255);
 1955              		.loc 1 246 21 view .LVU568
 247:armwave.c     ****                     b = MIN(bb, 255);
 1956              		.loc 1 247 21 view .LVU569
 248:armwave.c     **** 
 1957              		.loc 1 248 21 view .LVU570
 251:armwave.c     **** 
 1958              		.loc 1 251 21 view .LVU571
 254:armwave.c     ****                     xx = nsub & 0xff;
 1959              		.loc 1 254 21 view .LVU572
 1960              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1961              		.loc 1 244 55 is_stmt 0 view .LVU573
 1962 08e8 920B0EE0 		mul	lr, r2, fp	@ tmp344, wave_word, _80
 1963              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1964              		.loc 1 243 55 view .LVU574
 1965 08ec 920904E0 		mul	r4, r2, r9	@ tmp348, wave_word, _76
 1966              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1967              		.loc 1 244 24 view .LVU575
 1968 08f0 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp344,
 1969              	.LVL127:
 1970              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1971              		.loc 1 242 55 view .LVU576
 1972 08f4 920A02E0 		mul	r2, r2, r10	@ tmp354, wave_word, _70
 1973              	.LVL128:
 1974              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1975              		.loc 1 248 25 view .LVU577
 1976 08f8 FF005EE3 		cmp	lr, #255	@ bb,
 1977              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1978              		.loc 1 243 24 view .LVU578
 1979 08fc 4444A0E1 		asr	r4, r4, #8	@ gg, tmp348,
 1980              	.LVL129:
 1981              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1982              		.loc 1 248 25 view .LVU579
 1983 0900 FFE0A0A3 		movge	lr, #255	@ bb,
 1984              	.LVL130:
 1985              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1986              		.loc 1 247 25 view .LVU580
 1987 0904 FF0054E3 		cmp	r4, #255	@ gg,
 1988 0908 FF40A0A3 		movge	r4, #255	@ gg,
 1989              	.LVL131:
 247:armwave.c     ****                     b = MIN(bb, 255);
 1990              		.loc 1 247 25 view .LVU581
 1991 090c 036083E2 		add	r6, r3, #3	@ _59, n,
 255:armwave.c     ****                     yy = nsub >> 8;
 1992              		.loc 1 255 21 is_stmt 1 view .LVU582
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1993              		.loc 1 256 21 view .LVU583
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1994              		.loc 1 257 21 view .LVU584
 258:armwave.c     ****                 }
 1995              		.loc 1 258 21 view .LVU585
 1996              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1997              		.loc 1 242 24 is_stmt 0 view .LVU586
 1998 0910 4224A0E1 		asr	r2, r2, #8	@ rr, tmp354,
 1999              	.LVL132:
 2000              	@ armwave.c:257:                     offset = yy + (xx * g_armwave_state.target_width);
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2001              		.loc 1 257 39 view .LVU587
 2002 0914 3C7095E5 		ldr	r7, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2003              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 2004              		.loc 1 246 25 view .LVU588
 2005 0918 FF0052E3 		cmp	r2, #255	@ rr,
 2006              	@ armwave.c:255:                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 2007              		.loc 1 255 24 view .LVU589
 2008 091c 7680EFE6 		uxtb	r8, r6	@ xx, _59
 2009              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2010              		.loc 1 251 56 view .LVU590
 2011 0920 0444A0E1 		lsl	r4, r4, #8	@ tmp349, gg,
 2012              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2013              		.loc 1 251 44 view .LVU591
 2014 0924 0EE8A0E1 		lsl	lr, lr, #16	@ tmp345, bb,
 2015              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 2016              		.loc 1 246 25 view .LVU592
 2017 0928 FF20A0A3 		movge	r2, #255	@ rr,
 2018              	.LVL133:
 2019              	@ armwave.c:256:                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 2020              		.loc 1 256 31 view .LVU593
 2021 092c 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 2022              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2023              		.loc 1 251 44 view .LVU594
 2024 0930 FFE80EE2 		and	lr, lr, #16711680	@ tmp346, tmp345,
 2025              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2026              		.loc 1 251 56 view .LVU595
 2027 0934 7440FFE6 		uxth	r4, r4	@ tmp350, tmp349
 2028              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 2029              		.loc 1 258 39 view .LVU596
 2030 0938 976826E0 		mla	r6, r7, r8, r6	@ tmp342, g_armwave_state.target_width, xx, yy
 2031              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2032              		.loc 1 251 51 view .LVU597
 2033 093c 04E08EE1 		orr	lr, lr, r4	@ tmp352, tmp346, tmp350
 2034              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2035              		.loc 1 251 62 view .LVU598
 2036 0940 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2037              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 2038              		.loc 1 258 49 view .LVU599
 2039 0944 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2040              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2041              		.loc 1 251 62 view .LVU600
 2042 0948 02208EE1 		orr	r2, lr, r2	@ tmp356, tmp352, rr
 2043              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2044              		.loc 1 251 26 view .LVU601
 2045 094c FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp356,
 2046              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 2047              		.loc 1 258 49 view .LVU602
 2048 0950 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 2049 0954 81FFFFEA 		b	.L97		@
 2050              	.LVL134:
 2051              	.L118:
 224:armwave.c     **** 
 2052              		.loc 1 224 5 is_stmt 1 discriminator 1 view .LVU603
 2053 0958 10309FE5 		ldr	r3, .L120+4	@,
 2054 095c E020A0E3 		mov	r2, #224	@,
 2055 0960 0C109FE5 		ldr	r1, .L120+8	@,
 2056              	.LVL135:
 224:armwave.c     **** 
 2057              		.loc 1 224 5 is_stmt 0 discriminator 1 view .LVU604
 2058 0964 0C009FE5 		ldr	r0, .L120+12	@,
 2059              	.LVL136:
 224:armwave.c     **** 
 2060              		.loc 1 224 5 discriminator 1 view .LVU605
 2061 0968 FEFFFFEB 		bl	__assert_fail		@
 2062              	.LVL137:
 2063              	.L121:
 224:armwave.c     **** 
 2064              		.loc 1 224 5 discriminator 1 view .LVU606
 2065              		.align	2
 2066              	.L120:
 2067 096c 00000000 		.word	g_armwave_state
 2068 0970 18000000 		.word	.LANCHOR0+24
 2069 0974 00000000 		.word	.LC0
 2070 0978 E8000000 		.word	.LC6
 2071              		.cfi_endproc
 2072              	.LFE63:
 2074              		.align	2
 2075              		.global	armwave_fill_pixbuf_scaled
 2076              		.syntax unified
 2077              		.arm
 2078              		.fpu vfp
 2080              	armwave_fill_pixbuf_scaled:
 2081              	.LVL138:
 2082              	.LFB64:
 264:armwave.c     **** 
 265:armwave.c     **** /*
 266:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 267:armwave.c     ****  * Rows are repeated as necessary.
 268:armwave.c     ****  */
 269:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 270:armwave.c     **** {
 2083              		.loc 1 270 1 is_stmt 1 view -0
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 8
 2086              		@ frame_needed = 0, uses_anonymous_args = 0
 271:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2087              		.loc 1 271 5 view .LVU608
 272:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2088              		.loc 1 272 5 view .LVU609
 273:armwave.c     ****     uint8_t r, g, b, value, row;
 2089              		.loc 1 273 5 view .LVU610
 274:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2090              		.loc 1 274 5 view .LVU611
 2091              	@ armwave.c:270: {
 270:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2092              		.loc 1 270 1 is_stmt 0 view .LVU612
 2093 097c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2094              		.cfi_def_cfa_offset 36
 2095              		.cfi_offset 4, -36
 2096              		.cfi_offset 5, -32
 2097              		.cfi_offset 6, -28
 2098              		.cfi_offset 7, -24
 2099              		.cfi_offset 8, -20
 2100              		.cfi_offset 9, -16
 2101              		.cfi_offset 10, -12
 2102              		.cfi_offset 11, -8
 2103              		.cfi_offset 14, -4
 2104              	@ armwave.c:278:     assert(out_buffer != NULL);
 275:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 276:armwave.c     ****     uint32_t offset;
 277:armwave.c     **** 
 278:armwave.c     ****     assert(out_buffer != NULL);
 2105              		.loc 1 278 5 view .LVU613
 2106 0980 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 2107              	@ armwave.c:274:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 274:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2108              		.loc 1 274 15 view .LVU614
 2109 0984 4C419FE5 		ldr	r4, .L147	@ tmp209,
 2110              	@ armwave.c:270: {
 270:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2111              		.loc 1 270 1 view .LVU615
 2112 0988 0CD04DE2 		sub	sp, sp, #12	@,,
 2113              		.cfi_def_cfa_offset 48
 2114              	@ armwave.c:274:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 274:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2115              		.loc 1 274 15 view .LVU616
 2116 098c 045094E5 		ldr	r5, [r4, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2117              	.LVL139:
 275:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2118              		.loc 1 275 5 is_stmt 1 view .LVU617
 276:armwave.c     **** 
 2119              		.loc 1 276 5 view .LVU618
 2120              		.loc 1 278 5 view .LVU619
 2121 0990 4B00000A 		beq	.L144		@,
 279:armwave.c     **** 
 280:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 281:armwave.c     **** 
 282:armwave.c     ****     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2122              		.loc 1 282 5 view .LVU620
 2123              	@ armwave.c:282:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2124              		.loc 1 282 27 is_stmt 0 view .LVU621
 2125 0994 3C6094E5 		ldr	r6, [r4, #60]	@ _1, g_armwave_state.target_width
 2126              	@ armwave.c:283:     vscale = g_armwave_state.target_height / 256;
 283:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2127              		.loc 1 283 44 view .LVU622
 2128 0998 403094E5 		ldr	r3, [r4, #64]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2129              	@ armwave.c:285:     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 284:armwave.c     **** 
 285:armwave.c     ****     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 2130              		.loc 1 285 5 view .LVU623
 2131 099c 0620A0E1 		mov	r2, r6	@, _1
 2132              	@ armwave.c:282:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 282:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2133              		.loc 1 282 41 view .LVU624
 2134 09a0 0664A0E1 		lsl	r6, r6, #8	@ npix, _1,
 2135              	.LVL140:
 283:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2136              		.loc 1 283 5 is_stmt 1 view .LVU625
 2137              		.loc 1 285 5 view .LVU626
 2138 09a4 0610A0E1 		mov	r1, r6	@, npix
 2139 09a8 2334A0E1 		lsr	r3, r3, #8	@, g_armwave_state.target_height,
 2140              	.LVL141:
 2141              		.loc 1 285 5 is_stmt 0 view .LVU627
 2142 09ac 28019FE5 		ldr	r0, .L147+4	@,
 2143              	.LVL142:
 2144              		.loc 1 285 5 view .LVU628
 2145 09b0 FEFFFFEB 		bl	printf		@
 2146              	.LVL143:
 286:armwave.c     **** 
 287:armwave.c     ****     /*
 288:armwave.c     ****     for(n = 0; n < npix; n += 1) {
 289:armwave.c     ****         for(i = 0; i < 4; i++) {
 290:armwave.c     ****             yy = ((n & 0xff) * 4) + i;
 291:armwave.c     ****             xx = n >> 8;
 292:armwave.c     **** 
 293:armwave.c     ****             //offset = (yy + (xx * g_armwave_state.target_width));
 294:armwave.c     ****             //*(out_buffer_base + offset) = 0xff000000 | (yy << 8) | xx;
 295:armwave.c     **** 
 296:armwave.c     ****             offset = (xx + (yy * g_armwave_state.target_width));
 297:armwave.c     ****             *(out_buffer_base + offset) = 0xff000000 | ((i * 64) << 16); // | (yy << 8) | xx;
 298:armwave.c     ****         }
 299:armwave.c     ****     }
 300:armwave.c     ****     */
 301:armwave.c     **** 
 302:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 2147              		.loc 1 302 5 is_stmt 1 view .LVU629
 2148              		.loc 1 302 5 is_stmt 0 view .LVU630
 2149 09b4 000056E3 		cmp	r6, #0	@ npix,
 2150 09b8 0B0000DA 		ble	.L122		@,
 2151              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 303:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 304:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 305:armwave.c     ****         // most normal waveforms.
 306:armwave.c     ****         wave_word = *base_32ptr++;
 307:armwave.c     **** 
 308:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 309:armwave.c     ****             for(w = 0; w < 4; w++) {
 310:armwave.c     ****                 value = wave_word & 0xff;
 311:armwave.c     ****                 wave_word >>= 8;
 312:armwave.c     **** 
 313:armwave.c     ****                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2152              		.loc 1 315 52 view .LVU631
 2153 09bc F235D4E1 		ldrsh	r3, [r4, #82]	@ _13, g_armwave_state.ch1_color.g
 2154              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2155              		.loc 1 314 52 view .LVU632
 2156 09c0 F0B5D4E1 		ldrsh	fp, [r4, #80]	@ _9, g_armwave_state.ch1_color.r
 2157              	@ armwave.c:302:     for(n = 0; n < npix; n += 4) {
 302:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2158              		.loc 1 302 11 view .LVU633
 2159 09c4 0020A0E3 		mov	r2, #0	@ n,
 2160              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2161              		.loc 1 315 52 view .LVU634
 2162 09c8 00308DE5 		str	r3, [sp]	@ _13, %sfp
 2163              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2164              		.loc 1 316 52 view .LVU635
 2165 09cc F435D4E1 		ldrsh	r3, [r4, #84]	@ _16, g_armwave_state.ch1_color.b
 2166 09d0 04308DE5 		str	r3, [sp, #4]	@ _16, %sfp
 2167              	.LVL144:
 2168              	.L129:
 306:armwave.c     **** 
 2169              		.loc 1 306 9 is_stmt 1 view .LVU636
 2170              	@ armwave.c:306:         wave_word = *base_32ptr++;
 306:armwave.c     **** 
 2171              		.loc 1 306 19 is_stmt 0 view .LVU637
 2172 09d4 04C095E4 		ldr	ip, [r5], #4	@ wave_word, MEM[base: base_32ptr_57, offset: 4294967292B]
 2173              	.LVL145:
 308:armwave.c     ****             for(w = 0; w < 4; w++) {
 2174              		.loc 1 308 9 is_stmt 1 view .LVU638
 2175              	@ armwave.c:308:         if(COND_UNLIKELY(wave_word != 0)) {
 308:armwave.c     ****             for(w = 0; w < 4; w++) {
 2176              		.loc 1 308 11 is_stmt 0 view .LVU639
 2177 09d8 00005CE3 		cmp	ip, #0	@ wave_word,
 2178 09dc 0400001A 		bne	.L145		@,
 2179              	.L125:
 2180              	@ armwave.c:302:     for(n = 0; n < npix; n += 4) {
 302:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2181              		.loc 1 302 28 view .LVU640
 2182 09e0 042082E2 		add	r2, r2, #4	@ n, n,
 2183              	.LVL146:
 2184              	@ armwave.c:302:     for(n = 0; n < npix; n += 4) {
 302:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2185              		.loc 1 302 5 view .LVU641
 2186 09e4 020056E1 		cmp	r6, r2	@ npix, n
 2187 09e8 F9FFFFCA 		bgt	.L129		@,
 2188              	.LVL147:
 2189              	.L122:
 2190              	@ armwave.c:342: }
 317:armwave.c     **** 
 318:armwave.c     ****                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 320:armwave.c     ****                     b = MIN(bb, 255);
 321:armwave.c     **** 
 322:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 323:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 325:armwave.c     ****                     // Do line scaling as necessary.
 326:armwave.c     ****                     nsub = n + w;
 327:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 328:armwave.c     ****                     xx = (nsub >> 8);
 329:armwave.c     **** 
 330:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 331:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 332:armwave.c     ****                         *(out_buffer_base + offset) = word;
 333:armwave.c     ****                     }
 334:armwave.c     ****                 }
 335:armwave.c     ****             }
 336:armwave.c     ****         }
 337:armwave.c     **** 
 338:armwave.c     ****         //printf("0x%08x, %d\n", out_buffer_base, n);
 339:armwave.c     **** 
 340:armwave.c     ****         //*out_buffer_base++ = 0xff000000 | n;
 341:armwave.c     ****     }
 342:armwave.c     **** }
 2191              		.loc 1 342 1 view .LVU642
 2192 09ec 0CD08DE2 		add	sp, sp, #12	@,,
 2193              		.cfi_remember_state
 2194              		.cfi_def_cfa_offset 36
 2195              		@ sp needed	@
 2196 09f0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2197              	.LVL148:
 2198              	.L145:
 2199              		.cfi_restore_state
 2200              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2201              		.loc 1 313 19 view .LVU643
 2202 09f4 FF301CE2 		ands	r3, ip, #255	@ _10, wave_word,
 2203              	@ armwave.c:309:             for(w = 0; w < 4; w++) {
 309:armwave.c     ****                 value = wave_word & 0xff;
 2204              		.loc 1 309 19 view .LVU644
 2205 09f8 0090A0E3 		mov	r9, #0	@ w,
 2206              	.LVL149:
 310:armwave.c     ****                 wave_word >>= 8;
 2207              		.loc 1 310 17 is_stmt 1 view .LVU645
 311:armwave.c     **** 
 2208              		.loc 1 311 17 view .LVU646
 2209              	@ armwave.c:311:                 wave_word >>= 8;
 311:armwave.c     **** 
 2210              		.loc 1 311 27 is_stmt 0 view .LVU647
 2211 09fc 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 2212              	.LVL150:
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2213              		.loc 1 313 17 is_stmt 1 view .LVU648
 2214              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2215              		.loc 1 313 19 is_stmt 0 view .LVU649
 2216 0a00 0500001A 		bne	.L146		@,
 2217              	.L126:
 2218              	@ armwave.c:309:             for(w = 0; w < 4; w++) {
 309:armwave.c     ****                 value = wave_word & 0xff;
 2219              		.loc 1 309 32 view .LVU650
 2220 0a04 019089E2 		add	r9, r9, #1	@ w, w,
 2221              	.LVL151:
 2222              	@ armwave.c:309:             for(w = 0; w < 4; w++) {
 309:armwave.c     ****                 value = wave_word & 0xff;
 2223              		.loc 1 309 13 view .LVU651
 2224 0a08 040059E3 		cmp	r9, #4	@ w,
 2225 0a0c F3FFFF0A 		beq	.L125		@,
 310:armwave.c     ****                 wave_word >>= 8;
 2226              		.loc 1 310 17 is_stmt 1 view .LVU652
 2227              	.LVL152:
 311:armwave.c     **** 
 2228              		.loc 1 311 17 view .LVU653
 2229              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2230              		.loc 1 313 19 is_stmt 0 view .LVU654
 2231 0a10 FF301CE2 		ands	r3, ip, #255	@ _10, wave_word,
 2232              	@ armwave.c:311:                 wave_word >>= 8;
 311:armwave.c     **** 
 2233              		.loc 1 311 27 view .LVU655
 2234 0a14 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 2235              	.LVL153:
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2236              		.loc 1 313 17 is_stmt 1 view .LVU656
 2237              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2238              		.loc 1 313 19 is_stmt 0 view .LVU657
 2239 0a18 F9FFFF0A 		beq	.L126		@,
 2240              	.L146:
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2241              		.loc 1 314 21 is_stmt 1 view .LVU658
 2242              	.LVL154:
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2243              		.loc 1 315 21 view .LVU659
 316:armwave.c     **** 
 2244              		.loc 1 316 21 view .LVU660
 318:armwave.c     ****                     g = MIN(gg, 255);
 2245              		.loc 1 318 21 view .LVU661
 319:armwave.c     ****                     b = MIN(bb, 255);
 2246              		.loc 1 319 21 view .LVU662
 320:armwave.c     **** 
 2247              		.loc 1 320 21 view .LVU663
 323:armwave.c     **** 
 2248              		.loc 1 323 21 view .LVU664
 2249              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2250              		.loc 1 316 55 is_stmt 0 view .LVU665
 2251 0a1c 04109DE5 		ldr	r1, [sp, #4]	@ _16, %sfp
 2252              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2253              		.loc 1 315 55 view .LVU666
 2254 0a20 00009DE5 		ldr	r0, [sp]	@ _13, %sfp
 2255 0a24 098082E0 		add	r8, r2, r9	@ _117, n, w
 2256              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2257              		.loc 1 316 55 view .LVU667
 2258 0a28 910301E0 		mul	r1, r1, r3	@ tmp186, _16, _10
 2259              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2260              		.loc 1 315 55 view .LVU668
 2261 0a2c 900300E0 		mul	r0, r0, r3	@ tmp190, _13, _10
 2262              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2263              		.loc 1 316 24 view .LVU669
 2264 0a30 4114A0E1 		asr	r1, r1, #8	@ bb, tmp186,
 2265              	.LVL155:
 2266              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2267              		.loc 1 314 55 view .LVU670
 2268 0a34 930B03E0 		mul	r3, r3, fp	@ tmp196, _10, _9
 2269              	.LVL156:
 2270              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2271              		.loc 1 315 24 view .LVU671
 2272 0a38 4004A0E1 		asr	r0, r0, #8	@ gg, tmp190,
 2273              	.LVL157:
 2274              	@ armwave.c:320:                     b = MIN(bb, 255);
 320:armwave.c     **** 
 2275              		.loc 1 320 25 view .LVU672
 2276 0a3c FF0051E3 		cmp	r1, #255	@ bb,
 2277 0a40 FF10A0A3 		movge	r1, #255	@ bb,
 2278              	.LVL158:
 2279              	@ armwave.c:319:                     g = MIN(gg, 255);
 319:armwave.c     ****                     b = MIN(bb, 255);
 2280              		.loc 1 319 25 view .LVU673
 2281 0a44 FF0050E3 		cmp	r0, #255	@ gg,
 2282 0a48 FF00A0A3 		movge	r0, #255	@ gg,
 2283              	.LVL159:
 2284              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2285              		.loc 1 314 24 view .LVU674
 2286 0a4c 4334A0E1 		asr	r3, r3, #8	@ rr, tmp196,
 2287              	.LVL160:
 2288              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2289              		.loc 1 318 25 view .LVU675
 2290 0a50 FF0053E3 		cmp	r3, #255	@ rr,
 2291              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2292              		.loc 1 323 56 view .LVU676
 2293 0a54 0004A0E1 		lsl	r0, r0, #8	@ tmp191, gg,
 2294              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2295              		.loc 1 318 25 view .LVU677
 2296 0a58 FF30A0A3 		movge	r3, #255	@ rr,
 2297              	.LVL161:
 2298              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2299              		.loc 1 323 44 view .LVU678
 2300 0a5c 01E8A0E1 		lsl	lr, r1, #16	@ tmp187, bb,
 2301              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2302              		.loc 1 323 56 view .LVU679
 2303 0a60 7000FFE6 		uxth	r0, r0	@ tmp192, tmp191
 2304              	@ armwave.c:327:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 327:armwave.c     ****                     xx = (nsub >> 8);
 2305              		.loc 1 327 57 view .LVU680
 2306 0a64 1CA094E5 		ldr	r10, [r4, #28]	@ _30, g_armwave_state.vscale
 2307              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2308              		.loc 1 323 44 view .LVU681
 2309 0a68 FFE80EE2 		and	lr, lr, #16711680	@ tmp188, tmp187,
 2310              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2311              		.loc 1 323 51 view .LVU682
 2312 0a6c 00E08EE1 		orr	lr, lr, r0	@ tmp194, tmp188, tmp192
 2313              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2314              		.loc 1 323 62 view .LVU683
 2315 0a70 7330EFE6 		uxtb	r3, r3	@ rr, rr
 2316              	@ armwave.c:327:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 327:armwave.c     ****                     xx = (nsub >> 8);
 2317              		.loc 1 327 32 view .LVU684
 2318 0a74 7800EFE6 		uxtb	r0, r8	@ _117, _117
 2319              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2320              		.loc 1 323 62 view .LVU685
 2321 0a78 03E08EE1 		orr	lr, lr, r3	@ tmp198, tmp194, rr
 2322              	@ armwave.c:330:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2323              		.loc 1 330 21 view .LVU686
 2324 0a7c 00005AE3 		cmp	r10, #0	@ _30,
 2325              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2326              		.loc 1 323 26 view .LVU687
 2327 0a80 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp198,
 2328              	.LVL162:
 326:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 2329              		.loc 1 326 21 is_stmt 1 view .LVU688
 327:armwave.c     ****                     xx = (nsub >> 8);
 2330              		.loc 1 327 21 view .LVU689
 2331              	@ armwave.c:328:                     xx = (nsub >> 8);
 328:armwave.c     **** 
 2332              		.loc 1 328 32 is_stmt 0 view .LVU690
 2333 0a84 4884A0E1 		asr	r8, r8, #8	@ xx, _117,
 2334              	.LVL163:
 2335              	@ armwave.c:327:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 327:armwave.c     ****                     xx = (nsub >> 8);
 2336              		.loc 1 327 24 view .LVU691
 2337 0a88 9A000AE0 		mul	r10, r10, r0	@ yy, _30, _117
 2338              	.LVL164:
 328:armwave.c     **** 
 2339              		.loc 1 328 21 is_stmt 1 view .LVU692
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2340              		.loc 1 330 21 view .LVU693
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2341              		.loc 1 330 21 is_stmt 0 view .LVU694
 2342 0a8c DCFFFF0A 		beq	.L126		@,
 2343              	@ armwave.c:330:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2344              		.loc 1 330 29 view .LVU695
 2345 0a90 0030A0E3 		mov	r3, #0	@ row,
 2346              	@ armwave.c:330:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2347              		.loc 1 330 38 view .LVU696
 2348 0a94 0310A0E1 		mov	r1, r3	@ _37, row
 2349              	.LVL165:
 2350              	.L127:
 331:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2351              		.loc 1 331 25 is_stmt 1 discriminator 3 view .LVU697
 332:armwave.c     ****                     }
 2352              		.loc 1 332 25 discriminator 3 view .LVU698
 2353              	@ armwave.c:331:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 331:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2354              		.loc 1 331 52 is_stmt 0 discriminator 3 view .LVU699
 2355 0a98 3C0094E5 		ldr	r0, [r4, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2356              	@ armwave.c:331:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 331:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2357              		.loc 1 331 45 discriminator 3 view .LVU700
 2358 0a9c 0A1081E0 		add	r1, r1, r10	@ tmp201, _37, yy
 2359              	.LVL166:
 2360              	@ armwave.c:330:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2361              		.loc 1 330 67 discriminator 3 view .LVU701
 2362 0aa0 013083E2 		add	r3, r3, #1	@ tmp206, row,
 2363              	.LVL167:
 2364              	@ armwave.c:332:                         *(out_buffer_base + offset) = word;
 332:armwave.c     ****                     }
 2365              		.loc 1 332 43 discriminator 3 view .LVU702
 2366 0aa4 908120E0 		mla	r0, r0, r1, r8	@ tmp205, g_armwave_state.target_width, tmp201, xx
 2367              	.LVL168:
 2368              	@ armwave.c:330:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2369              		.loc 1 330 67 discriminator 3 view .LVU703
 2370 0aa8 7330EFE6 		uxtb	r3, r3	@ row, tmp206
 2371              	.LVL169:
 2372              	@ armwave.c:330:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2373              		.loc 1 330 38 discriminator 3 view .LVU704
 2374 0aac 0310A0E1 		mov	r1, r3	@ _37, row
 2375              	@ armwave.c:332:                         *(out_buffer_base + offset) = word;
 332:armwave.c     ****                     }
 2376              		.loc 1 332 53 discriminator 3 view .LVU705
 2377 0ab0 00E187E7 		str	lr, [r7, r0, lsl #2]	@ word, *_36
 2378              	@ armwave.c:330:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2379              		.loc 1 330 21 discriminator 3 view .LVU706
 2380 0ab4 1C0094E5 		ldr	r0, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2381              	.LVL170:
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2382              		.loc 1 330 21 discriminator 3 view .LVU707
 2383 0ab8 000053E1 		cmp	r3, r0	@ row, g_armwave_state.vscale
 2384 0abc F5FFFF3A 		bcc	.L127		@,
 330:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2385              		.loc 1 330 21 discriminator 3 view .LVU708
 2386 0ac0 CFFFFFEA 		b	.L126		@
 2387              	.LVL171:
 2388              	.L144:
 278:armwave.c     **** 
 2389              		.loc 1 278 5 is_stmt 1 discriminator 1 view .LVU709
 2390 0ac4 14309FE5 		ldr	r3, .L147+8	@,
 2391 0ac8 14209FE5 		ldr	r2, .L147+12	@,
 2392 0acc 14109FE5 		ldr	r1, .L147+16	@,
 2393 0ad0 14009FE5 		ldr	r0, .L147+20	@,
 2394              	.LVL172:
 278:armwave.c     **** 
 2395              		.loc 1 278 5 is_stmt 0 discriminator 1 view .LVU710
 2396 0ad4 FEFFFFEB 		bl	__assert_fail		@
 2397              	.LVL173:
 2398              	.L148:
 2399              		.align	2
 2400              	.L147:
 2401 0ad8 00000000 		.word	g_armwave_state
 2402 0adc FC000000 		.word	.LC7
 2403 0ae0 30000000 		.word	.LANCHOR0+48
 2404 0ae4 16010000 		.word	278
 2405 0ae8 00000000 		.word	.LC0
 2406 0aec E8000000 		.word	.LC6
 2407              		.cfi_endproc
 2408              	.LFE64:
 2410              		.align	2
 2411              		.global	armwave_dump_ppm_debug
 2412              		.syntax unified
 2413              		.arm
 2414              		.fpu vfp
 2416              	armwave_dump_ppm_debug:
 2417              	.LVL174:
 2418              	.LFB65:
 343:armwave.c     **** 
 344:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 345:armwave.c     **** {
 2419              		.loc 1 345 1 is_stmt 1 view -0
 2420              		.cfi_startproc
 2421              		@ args = 0, pretend = 0, frame = 0
 2422              		@ frame_needed = 0, uses_anonymous_args = 0
 346:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2423              		.loc 1 346 5 view .LVU712
 2424              	@ armwave.c:345: {
 345:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2425              		.loc 1 345 1 is_stmt 0 view .LVU713
 2426 0af0 0130A0E1 		mov	r3, r1	@ fn, fn
 2427 0af4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2428              		.cfi_def_cfa_offset 28
 2429              		.cfi_offset 4, -28
 2430              		.cfi_offset 5, -24
 2431              		.cfi_offset 6, -20
 2432              		.cfi_offset 7, -16
 2433              		.cfi_offset 8, -12
 2434              		.cfi_offset 9, -8
 2435              		.cfi_offset 14, -4
 2436 0af8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2437 0afc 0CD04DE2 		sub	sp, sp, #12	@,,
 2438              		.cfi_def_cfa_offset 40
 2439              	@ armwave.c:346:     FILE *fp = fopen(fn, "wb");
 2440              		.loc 1 346 16 view .LVU714
 2441 0b00 D8109FE5 		ldr	r1, .L161	@,
 2442              	.LVL175:
 2443              		.loc 1 346 16 view .LVU715
 2444 0b04 0300A0E1 		mov	r0, r3	@, fn
 2445              	.LVL176:
 2446              		.loc 1 346 16 view .LVU716
 2447 0b08 FEFFFFEB 		bl	fopen64		@
 2448              	.LVL177:
 2449              	@ armwave.c:353:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 347:armwave.c     ****     uint32_t data;
 348:armwave.c     ****     int xx, yy;
 349:armwave.c     **** 
 350:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 351:armwave.c     **** 
 352:armwave.c     ****     fputs("P3\n", fp);
 353:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2450              		.loc 1 353 5 view .LVU717
 2451 0b0c D0609FE5 		ldr	r6, .L161+4	@ tmp154,
 2452              	@ armwave.c:352:     fputs("P3\n", fp);
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2453              		.loc 1 352 5 view .LVU718
 2454 0b10 0320A0E3 		mov	r2, #3	@,
 2455 0b14 0110A0E3 		mov	r1, #1	@,
 2456              	@ armwave.c:346:     FILE *fp = fopen(fn, "wb");
 346:armwave.c     ****     uint32_t data;
 2457              		.loc 1 346 16 view .LVU719
 2458 0b18 0070A0E1 		mov	r7, r0	@ fp,
 2459              	.LVL178:
 347:armwave.c     ****     uint32_t data;
 2460              		.loc 1 347 5 is_stmt 1 view .LVU720
 348:armwave.c     **** 
 2461              		.loc 1 348 5 view .LVU721
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2462              		.loc 1 352 5 view .LVU722
 2463 0b1c 0030A0E1 		mov	r3, r0	@, fp
 2464 0b20 C0009FE5 		ldr	r0, .L161+8	@,
 2465              	.LVL179:
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2466              		.loc 1 352 5 is_stmt 0 view .LVU723
 2467 0b24 FEFFFFEB 		bl	fwrite		@
 2468              	.LVL180:
 2469              		.loc 1 353 5 is_stmt 1 view .LVU724
 2470 0b28 3C3096E5 		ldr	r3, [r6, #60]	@, g_armwave_state.target_width
 2471 0b2c 402096E5 		ldr	r2, [r6, #64]	@, g_armwave_state.target_height
 2472 0b30 B4109FE5 		ldr	r1, .L161+12	@,
 2473 0b34 0700A0E1 		mov	r0, r7	@, fp
 2474 0b38 FEFFFFEB 		bl	fprintf		@
 2475              	.LVL181:
 354:armwave.c     ****     fputs("255\n", fp);
 2476              		.loc 1 354 5 view .LVU725
 2477 0b3c 0420A0E3 		mov	r2, #4	@,
 2478 0b40 0730A0E1 		mov	r3, r7	@, fp
 2479 0b44 0110A0E3 		mov	r1, #1	@,
 2480 0b48 A0009FE5 		ldr	r0, .L161+16	@,
 2481 0b4c FEFFFFEB 		bl	fwrite		@
 2482              	.LVL182:
 355:armwave.c     **** 
 356:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2483              		.loc 1 356 5 view .LVU726
 2484              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2485              		.loc 1 356 37 is_stmt 0 view .LVU727
 2486 0b50 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2487              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2488              		.loc 1 356 5 view .LVU728
 2489 0b54 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2490 0b58 1800000A 		beq	.L150		@,
 2491 0b5c 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2492              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 358:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 359:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 360:armwave.c     **** 
 361:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2493              		.loc 1 361 13 view .LVU729
 2494 0b60 8C909FE5 		ldr	r9, .L161+20	@ tmp156,
 2495              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2496              		.loc 1 356 12 view .LVU730
 2497 0b64 0050A0E3 		mov	r5, #0	@ yy,
 2498              	.LVL183:
 2499              	.L151:
 2500              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2501              		.loc 1 357 9 view .LVU731
 2502 0b68 000053E3 		cmp	r3, #0	@ _12,
 2503              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2504              		.loc 1 357 16 view .LVU732
 2505 0b6c 0040A013 		movne	r4, #0	@ xx,
 2506              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2507              		.loc 1 357 9 view .LVU733
 2508 0b70 1600000A 		beq	.L160		@,
 2509              	.LVL184:
 2510              	.L152:
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2511              		.loc 1 358 13 is_stmt 1 discriminator 3 view .LVU734
 2512              	@ armwave.c:358:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2513              		.loc 1 358 29 is_stmt 0 discriminator 3 view .LVU735
 2514 0b74 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2515              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2516              		.loc 1 361 13 discriminator 3 view .LVU736
 2517 0b78 0910A0E1 		mov	r1, r9	@, tmp156
 2518 0b7c 0700A0E1 		mov	r0, r7	@, fp
 2519              	@ armwave.c:358:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2520              		.loc 1 358 18 discriminator 3 view .LVU737
 2521 0b80 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2522              	.LVL185:
 2523              		.loc 1 361 13 is_stmt 1 discriminator 3 view .LVU738
 2524              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2525              		.loc 1 357 58 is_stmt 0 discriminator 3 view .LVU739
 2526 0b84 014084E2 		add	r4, r4, #1	@ xx, xx,
 2527              	.LVL186:
 2528              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2529              		.loc 1 361 81 discriminator 3 view .LVU740
 2530 0b88 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2531              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2532              		.loc 1 361 61 discriminator 3 view .LVU741
 2533 0b8c 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2534              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2535              		.loc 1 361 13 discriminator 3 view .LVU742
 2536 0b90 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2537 0b94 7330EFE6 		uxtb	r3, r3	@, tmp146
 2538 0b98 00C08DE5 		str	ip, [sp]	@ tmp151,
 2539 0b9c 7220EFE6 		uxtb	r2, r2	@, data
 2540              	.LVL187:
 2541              		.loc 1 361 13 discriminator 3 view .LVU743
 2542 0ba0 FEFFFFEB 		bl	fprintf		@
 2543              	.LVL188:
 2544              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2545              		.loc 1 357 41 discriminator 3 view .LVU744
 2546 0ba4 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2547              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2548              		.loc 1 357 9 discriminator 3 view .LVU745
 2549 0ba8 040053E1 		cmp	r3, r4	@ _12, xx
 2550 0bac F0FFFF8A 		bhi	.L152		@,
 2551 0bb0 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2552              	.LVL189:
 2553              	.L153:
 2554              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2555              		.loc 1 356 55 discriminator 2 view .LVU746
 2556 0bb4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2557              	.LVL190:
 2558              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2559              		.loc 1 356 5 discriminator 2 view .LVU747
 2560 0bb8 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2561 0bbc E9FFFF3A 		bcc	.L151		@,
 2562              	.LVL191:
 2563              	.L150:
 362:armwave.c     ****         }
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     fclose(fp);
 2564              		.loc 1 365 5 is_stmt 1 view .LVU748
 2565 0bc0 0700A0E1 		mov	r0, r7	@, fp
 2566              	@ armwave.c:366: }
 366:armwave.c     **** }
 2567              		.loc 1 366 1 is_stmt 0 view .LVU749
 2568 0bc4 0CD08DE2 		add	sp, sp, #12	@,,
 2569              		.cfi_remember_state
 2570              		.cfi_def_cfa_offset 28
 2571              		@ sp needed	@
 2572 0bc8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2573              		.cfi_restore 14
 2574              		.cfi_restore 9
 2575              		.cfi_restore 8
 2576              		.cfi_restore 7
 2577              		.cfi_restore 6
 2578              		.cfi_restore 5
 2579              		.cfi_restore 4
 2580              		.cfi_def_cfa_offset 0
 2581              	.LVL192:
 2582              	@ armwave.c:365:     fclose(fp);
 365:armwave.c     **** }
 2583              		.loc 1 365 5 view .LVU750
 2584 0bcc FEFFFFEA 		b	fclose		@
 2585              	.LVL193:
 2586              	.L160:
 2587              		.cfi_restore_state
 2588              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2589              		.loc 1 356 55 view .LVU751
 2590 0bd0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2591              	.LVL194:
 2592              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2593              		.loc 1 356 5 view .LVU752
 2594 0bd4 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2595 0bd8 F5FFFF8A 		bhi	.L153		@,
 2596 0bdc F7FFFFEA 		b	.L150		@
 2597              	.L162:
 2598              		.align	2
 2599              	.L161:
 2600 0be0 10010000 		.word	.LC8
 2601 0be4 00000000 		.word	g_armwave_state
 2602 0be8 14010000 		.word	.LC9
 2603 0bec 18010000 		.word	.LC10
 2604 0bf0 20010000 		.word	.LC11
 2605 0bf4 28010000 		.word	.LC12
 2606              		.cfi_endproc
 2607              	.LFE65:
 2609              		.align	2
 2610              		.global	armwave_test_init
 2611              		.syntax unified
 2612              		.arm
 2613              		.fpu vfp
 2615              	armwave_test_init:
 2616              	.LVL195:
 2617              	.LFB66:
 367:armwave.c     **** 
 368:armwave.c     **** void armwave_test_init(float mod, int render_width, int render_height)
 369:armwave.c     **** {
 2618              		.loc 1 369 1 is_stmt 1 view -0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 0
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 370:armwave.c     ****     mod_depth = mod;
 2622              		.loc 1 370 5 view .LVU754
 2623              	@ armwave.c:370:     mod_depth = mod;
 2624              		.loc 1 370 15 is_stmt 0 view .LVU755
 2625 0bf8 9C309FE5 		ldr	r3, .L167+20	@ tmp128,
 2626              	@ armwave.c:369: {
 369:armwave.c     ****     mod_depth = mod;
 2627              		.loc 1 369 1 view .LVU756
 2628 0bfc F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2629              		.cfi_def_cfa_offset 24
 2630              		.cfi_offset 4, -24
 2631              		.cfi_offset 5, -20
 2632              		.cfi_offset 6, -16
 2633              		.cfi_offset 7, -12
 2634              		.cfi_offset 8, -8
 2635              		.cfi_offset 14, -4
 2636 0c00 068B2DED 		vpush.64	{d8, d9, d10}	@
 2637              		.cfi_def_cfa_offset 48
 2638              		.cfi_offset 80, -48
 2639              		.cfi_offset 81, -44
 2640              		.cfi_offset 82, -40
 2641              		.cfi_offset 83, -36
 2642              		.cfi_offset 84, -32
 2643              		.cfi_offset 85, -28
 2644 0c04 94409FE5 		ldr	r4, .L167+24	@ ivtmp.113,
 2645              	.LBB6:
 2646              	.LBB7:
 2647              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2648              		.loc 1 87 32 view .LVU757
 2649 0c08 22AA9FED 		vldr.32	s20, .L167+16	@ tmp134,
 2650              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2651              		.loc 1 87 26 view .LVU758
 2652 0c0c 1D9B9FED 		vldr.64	d9, .L167	@ tmp143,
 2653              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2654              		.loc 1 87 49 view .LVU759
 2655 0c10 1E8B9FED 		vldr.64	d8, .L167+8	@ tmp137,
 2656              	.LBE7:
 2657              	.LBE6:
 2658              	@ armwave.c:370:     mod_depth = mod;
 2659              		.loc 1 370 15 view .LVU760
 2660 0c14 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 371:armwave.c     **** 
 372:armwave.c     ****     test_create_waveform();
 2661              		.loc 1 372 5 is_stmt 1 view .LVU761
 2662              	@ armwave.c:369: {
 369:armwave.c     ****     mod_depth = mod;
 2663              		.loc 1 369 1 is_stmt 0 view .LVU762
 2664 0c18 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2665 0c1c 0170A0E1 		mov	r7, r1	@ render_height, render_height
 2666              	@ armwave.c:372:     test_create_waveform();
 2667              		.loc 1 372 5 view .LVU763
 2668 0c20 FEFFFFEB 		bl	test_create_waveform		@
 2669              	.LVL196:
 373:armwave.c     ****     test_create_gamma();
 2670              		.loc 1 373 5 is_stmt 1 view .LVU764
 2671              	.LBB9:
 2672              	.LBI6:
  81:armwave.c     **** {
 2673              		.loc 1 81 6 view .LVU765
  81:armwave.c     **** {
 2674              		.loc 1 81 6 is_stmt 0 view .LVU766
 2675 0c24 013084E2 		add	r3, r4, #1	@ _34, ivtmp.113,
 2676 0c28 018C84E2 		add	r8, r4, #256	@ _35, ivtmp.113,
 2677 0c2c 015063E2 		rsb	r5, r3, #1	@ tmp142, _34,
 2678              	.LVL197:
 2679              	.L164:
 2680              	.LBB8:
  87:armwave.c     ****     }
 2681              		.loc 1 87 9 is_stmt 1 view .LVU767
 2682              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2683              		.loc 1 87 32 is_stmt 0 view .LVU768
 2684 0c30 043085E0 		add	r3, r5, r4	@ tmp131, tmp142, ivtmp.113
 2685              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2686              		.loc 1 87 26 view .LVU769
 2687 0c34 491BB0EE 		vmov.f64	d1, d9	@, tmp143
 2688              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2689              		.loc 1 87 32 view .LVU770
 2690 0c38 903A07EE 		vmov	s15, r3	@ int	@ tmp131, tmp131
 2691 0c3c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp132, tmp131
 2692 0c40 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp133, tmp132, tmp134
 2693              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2694              		.loc 1 87 26 view .LVU771
 2695 0c44 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp133
 2696 0c48 FEFFFFEB 		bl	pow		@
 2697              	.LVL198:
 2698              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2699              		.loc 1 87 49 view .LVU772
 2700 0c4c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp136,, tmp137
 2701              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2702              		.loc 1 87 24 view .LVU773
 2703 0c50 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp138, tmp136
 2704 0c54 903A17EE 		vmov	r3, s15	@ int	@ tmp138, tmp138
 2705 0c58 0130E4E5 		strb	r3, [r4, #1]!	@ tmp138, MEM[base: _33, offset: 0B]
 2706              	.LVL199:
 2707              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2708              		.loc 1 86 5 view .LVU774
 2709 0c5c 080054E1 		cmp	r4, r8	@ ivtmp.113, _35
 2710 0c60 F2FFFF1A 		bne	.L164		@,
 2711              	.LVL200:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2712              		.loc 1 86 5 view .LVU775
 2713              	.LBE8:
 2714              	.LBE9:
 374:armwave.c     **** 
 375:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_
 2715              		.loc 1 375 5 is_stmt 1 view .LVU776
 2716 0c64 0710A0E1 		mov	r1, r7	@, render_height
 2717 0c68 0600A0E1 		mov	r0, r6	@, render_width
 2718 0c6c E3FCFFEB 		bl	armwave_setup_render.constprop.0		@
 2719              	.LVL201:
 376:armwave.c     **** 
 377:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2720              		.loc 1 377 5 view .LVU777
 2721              	@ armwave.c:378: }
 378:armwave.c     **** }
 2722              		.loc 1 378 1 is_stmt 0 view .LVU778
 2723 0c70 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2724              		.cfi_restore 84
 2725              		.cfi_restore 85
 2726              		.cfi_restore 82
 2727              		.cfi_restore 83
 2728              		.cfi_restore 80
 2729              		.cfi_restore 81
 2730              		.cfi_def_cfa_offset 24
 2731              	@ armwave.c:377:     printf("armwave version: %s\n", ARMWAVE_VER);
 377:armwave.c     **** }
 2732              		.loc 1 377 5 view .LVU779
 2733 0c74 28109FE5 		ldr	r1, .L167+28	@,
 2734 0c78 28009FE5 		ldr	r0, .L167+32	@,
 2735              	@ armwave.c:378: }
 2736              		.loc 1 378 1 view .LVU780
 2737 0c7c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2738              		.cfi_restore 14
 2739              		.cfi_restore 8
 2740              		.cfi_restore 7
 2741              		.cfi_restore 6
 2742              		.cfi_restore 5
 2743              		.cfi_restore 4
 2744              		.cfi_def_cfa_offset 0
 2745              	.LVL202:
 2746              	@ armwave.c:377:     printf("armwave version: %s\n", ARMWAVE_VER);
 377:armwave.c     **** }
 2747              		.loc 1 377 5 view .LVU781
 2748 0c80 FEFFFFEA 		b	printf		@
 2749              	.LVL203:
 2750              	.L168:
 2751 0c84 0000A0E1 		.align	3
 2752              	.L167:
 2753 0c88 000000C0 		.word	-1073741824
 2754 0c8c CCCCEC3F 		.word	1072483532
 2755 0c90 00000000 		.word	0
 2756 0c94 00E06F40 		.word	1081073664
 2757 0c98 00007F43 		.word	1132396544
 2758 0c9c 00000000 		.word	.LANCHOR1
 2759 0ca0 FFFFFFFF 		.word	gamma_table-1
 2760 0ca4 38010000 		.word	.LC13
 2761 0ca8 40010000 		.word	.LC14
 2762              		.cfi_endproc
 2763              	.LFE66:
 2765              		.global	__aeabi_uidiv
 2766              		.align	2
 2767              		.global	armwave_test_generate
 2768              		.syntax unified
 2769              		.arm
 2770              		.fpu vfp
 2772              	armwave_test_generate:
 2773              	.LFB67:
 379:armwave.c     **** 
 380:armwave.c     **** void armwave_test_generate()
 381:armwave.c     **** {
 2774              		.loc 1 381 1 is_stmt 1 view -0
 2775              		.cfi_startproc
 2776              		@ args = 0, pretend = 0, frame = 0
 2777              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     uint32_t yy;
 2778              		.loc 1 382 5 view .LVU783
 383:armwave.c     **** 
 384:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2779              		.loc 1 384 5 view .LVU784
 2780              	@ armwave.c:381: {
 381:armwave.c     ****     uint32_t yy;
 2781              		.loc 1 381 1 is_stmt 0 view .LVU785
 2782 0cac F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2783              		.cfi_def_cfa_offset 40
 2784              		.cfi_offset 3, -40
 2785              		.cfi_offset 4, -36
 2786              		.cfi_offset 5, -32
 2787              		.cfi_offset 6, -28
 2788              		.cfi_offset 7, -24
 2789              		.cfi_offset 8, -20
 2790              		.cfi_offset 9, -16
 2791              		.cfi_offset 10, -12
 2792              		.cfi_offset 11, -8
 2793              		.cfi_offset 14, -4
 2794              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2795              		.loc 1 384 5 view .LVU786
 2796 0cb0 0010A0E3 		mov	r1, #0	@,
 2797 0cb4 14419FE5 		ldr	r4, .L187	@ tmp255,
 2798 0cb8 342094E5 		ldr	r2, [r4, #52]	@, g_armwave_state.ch_buff_size
 2799 0cbc 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2800 0cc0 FEFFFFEB 		bl	memset		@
 2801              	.LVL204:
 385:armwave.c     **** 
 386:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2802              		.loc 1 386 5 is_stmt 1 view .LVU787
 2803              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2804              		.loc 1 386 45 is_stmt 0 view .LVU788
 2805 0cc4 2C9094E5 		ldr	r9, [r4, #44]	@ _92, g_armwave_state.slice_height
 2806              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2807              		.loc 1 386 5 view .LVU789
 2808 0cc8 020B59E3 		cmp	r9, #2048	@ _92,
 2809 0ccc F88FBD88 		pophi	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2810 0cd0 248094E5 		ldr	r8, [r4, #36]	@ prephitmp_177, g_armwave_state.waves
 2811              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2812              		.loc 1 386 12 view .LVU790
 2813 0cd4 0050A0E3 		mov	r5, #0	@ yy,
 2814              	.LVL205:
 2815              	.L175:
 387:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2816              		.loc 1 387 9 is_stmt 1 discriminator 3 view .LVU791
 2817 0cd8 990506E0 		mul	r6, r9, r5	@ _3, _92, yy
 2818              	.LBB12:
 2819              	.LBB13:
 2820              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 2821              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU792
 2822 0cdc 280094E5 		ldr	r0, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2823              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2824              		.loc 1 110 5 discriminator 3 view .LVU793
 2825 0ce0 000058E3 		cmp	r8, #0	@ prephitmp_177,
 2826              	.LBE13:
 2827              	.LBE12:
 2828              	@ armwave.c:387:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2829              		.loc 1 387 9 discriminator 3 view .LVU794
 2830 0ce4 307094E5 		ldr	r7, [r4, #48]	@ _4, g_armwave_state.slice_record_height
 2831              	.LVL206:
 2832              	.LBB15:
 2833              	.LBI12:
  99:armwave.c     **** {
 2834              		.loc 1 99 6 is_stmt 1 discriminator 3 view .LVU795
 2835              	.LBB14:
 101:armwave.c     ****     uint32_t value, word;
 2836              		.loc 1 101 5 discriminator 3 view .LVU796
 102:armwave.c     ****     uint8_t *wave_base;
 2837              		.loc 1 102 5 discriminator 3 view .LVU797
 103:armwave.c     ****     uint8_t *write_buffer_base;
 2838              		.loc 1 103 5 discriminator 3 view .LVU798
 104:armwave.c     ****     uint8_t *write_buffer;
 2839              		.loc 1 104 5 discriminator 3 view .LVU799
 105:armwave.c     ****     
 2840              		.loc 1 105 5 discriminator 3 view .LVU800
 107:armwave.c     **** 
 2841              		.loc 1 107 5 discriminator 3 view .LVU801
 2842              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 2843              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU802
 2844 0ce8 900600E0 		mul	r0, r0, r6	@ _15, g_armwave_state.bitdepth_height, _3
 2845              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 2846              		.loc 1 107 40 discriminator 3 view .LVU803
 2847 0cec 043094E5 		ldr	r3, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2848              	.LVL207:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2849              		.loc 1 110 5 is_stmt 1 discriminator 3 view .LVU804
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2850              		.loc 1 110 5 is_stmt 0 discriminator 3 view .LVU805
 2851 0cf0 2F00000A 		beq	.L171		@,
 2852 0cf4 046046E2 		sub	r6, r6, #4	@ _76, _3,
 2853              	.LVL208:
 2854              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2855              		.loc 1 110 11 view .LVU806
 2856 0cf8 00E0A0E3 		mov	lr, #0	@ w,
 2857              	.LVL209:
 2858              	.L174:
 111:armwave.c     **** 
 2859              		.loc 1 111 9 is_stmt 1 view .LVU807
 2860              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 2861              		.loc 1 111 64 is_stmt 0 view .LVU808
 2862 0cfc 202094E5 		ldr	r2, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2863              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2864              		.loc 1 115 9 view .LVU809
 2865 0d00 000057E3 		cmp	r7, #0	@ _4,
 2866              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 2867              		.loc 1 111 36 view .LVU810
 2868 0d04 14C094E5 		ldr	ip, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2869              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 2870              		.loc 1 111 64 view .LVU811
 2871 0d08 920E02E0 		mul	r2, r2, lr	@ _19, g_armwave_state.wave_stride, w
 2872              	.LVL210:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2873              		.loc 1 115 9 is_stmt 1 view .LVU812
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2874              		.loc 1 115 9 is_stmt 0 view .LVU813
 2875 0d0c 2400000A 		beq	.L172		@,
 2876 0d10 062082E0 		add	r2, r2, r6	@ tmp203, _19, _76
 2877              	.LVL211:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2878              		.loc 1 115 9 view .LVU814
 2879 0d14 02C08CE0 		add	ip, ip, r2	@ ivtmp.119, _16, tmp203
 2880              	.LVL212:
 2881              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2882              		.loc 1 115 16 view .LVU815
 2883 0d18 0020A0E3 		mov	r2, #0	@ yy,
 2884              	.LVL213:
 2885              	.L173:
 116:armwave.c     **** 
 2886              		.loc 1 116 13 is_stmt 1 view .LVU816
 2887              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 2888              		.loc 1 116 18 is_stmt 0 view .LVU817
 2889 0d1c 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _189, offset: 0B]
 2890              	.LVL214:
 118:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2891              		.loc 1 118 13 is_stmt 1 view .LVU818
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2892              		.loc 1 120 17 view .LVU819
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2893              		.loc 1 121 17 view .LVU820
 122:armwave.c     ****                 word >>= 8;
 2894              		.loc 1 122 17 view .LVU821
 2895              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2896              		.loc 1 121 63 is_stmt 0 view .LVU822
 2897 0d20 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2898 0d24 01B082E2 		add	fp, r2, #1	@ tmp215, yy,
 2899              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 2900              		.loc 1 122 47 view .LVU823
 2901 0d28 7180E0E6 		uxtab	r8, r0, r1	@ tmp208, _15, word
 2902 0d2c 998229E0 		mla	r9, r9, r2, r8	@ tmp209, g_armwave_state.bitdepth_height, yy, tmp208
 2903              	@ armwave.c:123:                 word >>= 8;
 123:armwave.c     ****             }
 2904              		.loc 1 123 22 view .LVU824
 2905 0d30 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2906              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 2907              		.loc 1 122 47 view .LVU825
 2908 0d34 0980D3E7 		ldrb	r8, [r3, r9]	@ zero_extendqisi2	@ *_63, *_63
 2909 0d38 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp220, _15, word
 2910 0d3c 018088E2 		add	r8, r8, #1	@ tmp212, *_63,
 2911 0d40 0980C3E7 		strb	r8, [r3, r9]	@ tmp212, *_63
 2912              	.LVL215:
 123:armwave.c     ****             }
 2913              		.loc 1 123 17 is_stmt 1 view .LVU826
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2914              		.loc 1 120 17 view .LVU827
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2915              		.loc 1 121 17 view .LVU828
 122:armwave.c     ****                 word >>= 8;
 2916              		.loc 1 122 17 view .LVU829
 2917              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2918              		.loc 1 121 63 is_stmt 0 view .LVU830
 2919 0d44 288094E5 		ldr	r8, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2920              	@ armwave.c:123:                 word >>= 8;
 123:armwave.c     ****             }
 2921              		.loc 1 123 22 view .LVU831
 2922 0d48 2198A0E1 		lsr	r9, r1, #16	@ word, word,
 2923              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 2924              		.loc 1 122 47 view .LVU832
 2925 0d4c 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp243, _15, word,
 2926              	.LVL216:
 122:armwave.c     ****                 word >>= 8;
 2927              		.loc 1 122 47 view .LVU833
 2928 0d50 98AB28E0 		mla	r8, r8, fp, r10	@ tmp221, g_armwave_state.bitdepth_height, tmp215, tmp220
 2929 0d54 79A0E0E6 		uxtab	r10, r0, r9	@ tmp228, _15, word
 2930 0d58 08B0D3E7 		ldrb	fp, [r3, r8]	@ zero_extendqisi2	@ *_83, *_83
 2931              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2932              		.loc 1 121 63 view .LVU834
 2933 0d5c 029082E2 		add	r9, r2, #2	@ tmp230, yy,
 2934              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 2935              		.loc 1 122 47 view .LVU835
 2936 0d60 01B08BE2 		add	fp, fp, #1	@ tmp224, *_83,
 2937 0d64 08B0C3E7 		strb	fp, [r3, r8]	@ tmp224, *_83
 2938              	.LVL217:
 123:armwave.c     ****             }
 2939              		.loc 1 123 17 is_stmt 1 view .LVU836
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2940              		.loc 1 120 17 view .LVU837
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2941              		.loc 1 121 17 view .LVU838
 122:armwave.c     ****                 word >>= 8;
 2942              		.loc 1 122 17 view .LVU839
 2943              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2944              		.loc 1 121 63 is_stmt 0 view .LVU840
 2945 0d68 28B094E5 		ldr	fp, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2946 0d6c 038082E2 		add	r8, r2, #3	@ tmp239, yy,
 2947              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2948              		.loc 1 115 37 view .LVU841
 2949 0d70 042082E2 		add	r2, r2, #4	@ yy, yy,
 2950              	.LVL218:
 2951              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 2952              		.loc 1 122 47 view .LVU842
 2953 0d74 9BA929E0 		mla	r9, fp, r9, r10	@ tmp233, g_armwave_state.bitdepth_height, tmp230, tmp228
 2954              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2955              		.loc 1 115 9 view .LVU843
 2956 0d78 020057E1 		cmp	r7, r2	@ _4, yy
 2957              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 2958              		.loc 1 122 47 view .LVU844
 2959 0d7c 09A0D3E7 		ldrb	r10, [r3, r9]	@ zero_extendqisi2	@ *_103, *_103
 2960 0d80 01A08AE2 		add	r10, r10, #1	@ tmp236, *_103,
 2961 0d84 09A0C3E7 		strb	r10, [r3, r9]	@ tmp236, *_103
 2962              	.LVL219:
 123:armwave.c     ****             }
 2963              		.loc 1 123 17 is_stmt 1 view .LVU845
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2964              		.loc 1 120 17 view .LVU846
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2965              		.loc 1 121 17 view .LVU847
 122:armwave.c     ****                 word >>= 8;
 2966              		.loc 1 122 17 view .LVU848
 2967              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2968              		.loc 1 121 63 is_stmt 0 view .LVU849
 2969 0d88 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2970              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 2971              		.loc 1 122 47 view .LVU850
 2972 0d8c 991821E0 		mla	r1, r9, r8, r1	@ tmp244, g_armwave_state.bitdepth_height, tmp239, tmp243
 2973 0d90 0180D3E7 		ldrb	r8, [r3, r1]	@ zero_extendqisi2	@ *_123, *_123
 2974 0d94 018088E2 		add	r8, r8, #1	@ tmp247, *_123,
 2975 0d98 0180C3E7 		strb	r8, [r3, r1]	@ tmp247, *_123
 123:armwave.c     ****             }
 2976              		.loc 1 123 17 is_stmt 1 view .LVU851
 2977              	.LVL220:
 2978              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2979              		.loc 1 115 9 is_stmt 0 view .LVU852
 2980 0d9c DEFFFF8A 		bhi	.L173		@,
 2981 0da0 248094E5 		ldr	r8, [r4, #36]	@ prephitmp_177, g_armwave_state.waves
 2982              	.LVL221:
 2983              	.L172:
 2984              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2985              		.loc 1 110 44 view .LVU853
 2986 0da4 01E08EE2 		add	lr, lr, #1	@ w, w,
 2987              	.LVL222:
 2988              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2989              		.loc 1 110 5 view .LVU854
 2990 0da8 08005EE1 		cmp	lr, r8	@ w, prephitmp_177
 2991 0dac D2FFFF3A 		bcc	.L174		@,
 2992 0db0 2C9094E5 		ldr	r9, [r4, #44]	@ _92, g_armwave_state.slice_height
 2993              	.LVL223:
 2994              	.L171:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2995              		.loc 1 110 5 view .LVU855
 2996              	.LBE14:
 2997              	.LBE15:
 2998              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2999              		.loc 1 386 28 discriminator 3 view .LVU856
 3000 0db4 0910A0E1 		mov	r1, r9	@, _92
 3001 0db8 020BA0E3 		mov	r0, #2048	@,
 3002              	.LVL224:
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3003              		.loc 1 386 28 discriminator 3 view .LVU857
 3004 0dbc FEFFFFEB 		bl	__aeabi_uidiv		@
 3005              	.LVL225:
 3006              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3007              		.loc 1 386 63 discriminator 3 view .LVU858
 3008 0dc0 015085E2 		add	r5, r5, #1	@ yy, yy,
 3009              	.LVL226:
 3010              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3011              		.loc 1 386 5 discriminator 3 view .LVU859
 3012 0dc4 050050E1 		cmp	r0, r5	@, yy
 3013 0dc8 C2FFFF8A 		bhi	.L175		@,
 3014 0dcc F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3015              	.L188:
 3016              		.align	2
 3017              	.L187:
 3018 0dd0 00000000 		.word	g_armwave_state
 3019              		.cfi_endproc
 3020              	.LFE67:
 3022              		.align	2
 3023              		.global	armwave_test_get_buffer
 3024              		.syntax unified
 3025              		.arm
 3026              		.fpu vfp
 3028              	armwave_test_get_buffer:
 3029              	.LFB68:
 388:armwave.c     ****     }
 389:armwave.c     **** }
 390:armwave.c     **** 
 391:armwave.c     **** PyObject *armwave_test_get_buffer()
 392:armwave.c     **** {
 3030              		.loc 1 392 1 is_stmt 1 view -0
 3031              		.cfi_startproc
 3032              		@ args = 0, pretend = 0, frame = 0
 3033              		@ frame_needed = 0, uses_anonymous_args = 0
 393:armwave.c     ****     PyObject *mv;
 3034              		.loc 1 393 5 view .LVU861
 394:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3035              		.loc 1 394 5 view .LVU862
 3036              	@ armwave.c:392: {
 392:armwave.c     ****     PyObject *mv;
 3037              		.loc 1 392 1 is_stmt 0 view .LVU863
 3038 0dd4 30402DE9 		push	{r4, r5, lr}	@
 3039              		.cfi_def_cfa_offset 12
 3040              		.cfi_offset 4, -12
 3041              		.cfi_offset 5, -8
 3042              		.cfi_offset 14, -4
 3043              	@ armwave.c:394:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3044              		.loc 1 394 22 view .LVU864
 3045 0dd8 2C00A0E3 		mov	r0, #44	@,
 3046              	@ armwave.c:392: {
 392:armwave.c     ****     PyObject *mv;
 3047              		.loc 1 392 1 view .LVU865
 3048 0ddc 0CD04DE2 		sub	sp, sp, #12	@,,
 3049              		.cfi_def_cfa_offset 24
 3050              	@ armwave.c:394:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3051              		.loc 1 394 22 view .LVU866
 3052 0de0 FEFFFFEB 		bl	malloc		@
 3053              	.LVL227:
 3054              	@ armwave.c:396:  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 395:armwave.c     ****     
 396:armwave.c     ****  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 3055              		.loc 1 396 3 view .LVU867
 3056 0de4 3C409FE5 		ldr	r4, .L191	@ tmp118,
 3057              	@ armwave.c:394:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 394:armwave.c     ****     
 3058              		.loc 1 394 22 view .LVU868
 3059 0de8 0050A0E1 		mov	r5, r0	@ tmp117,
 3060              	.LVL228:
 3061              		.loc 1 396 3 is_stmt 1 view .LVU869
 3062 0dec 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3063              	.LVL229:
 3064              		.loc 1 396 3 is_stmt 0 view .LVU870
 3065 0df0 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3066              	.LVL230:
 397:armwave.c     **** 
 398:armwave.c     ****     /*
 399:armwave.c     ****     if(g_armwave_state.target_height == 256) {
 400:armwave.c     ****         armwave_fill_pixbuf_256(g_armwave_state.out_pixbuf);
 401:armwave.c     ****     } else {
 402:armwave.c     ****         armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 403:armwave.c     ****     }
 404:armwave.c     ****     */
 405:armwave.c     **** 
 406:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 3067              		.loc 1 406 5 is_stmt 1 view .LVU871
 3068              	@ armwave.c:406:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3069              		.loc 1 406 79 is_stmt 0 view .LVU872
 3070 0df4 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 3071              	@ armwave.c:406:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3072              		.loc 1 406 5 view .LVU873
 3073 0df8 08C0A0E3 		mov	ip, #8	@ tmp125,
 3074 0dfc 0110A0E3 		mov	r1, #1	@ tmp126,
 3075 0e00 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 3076 0e04 02108DE8 		stm	sp, {r1, ip}	@,,
 3077 0e08 4C2094E5 		ldr	r2, [r4, #76]	@, g_armwave_state.out_pixbuf
 3078 0e0c 0500A0E1 		mov	r0, r5	@, tmp117
 3079 0e10 0010A0E3 		mov	r1, #0	@,
 3080 0e14 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 3081              	.LVL231:
 407:armwave.c     **** 
 408:armwave.c     ****     mv = PyMemoryView_FromBuffer(buf);
 3082              		.loc 1 408 5 is_stmt 1 view .LVU874
 3083              	@ armwave.c:408:     mv = PyMemoryView_FromBuffer(buf);
 3084              		.loc 1 408 10 is_stmt 0 view .LVU875
 3085 0e18 0500A0E1 		mov	r0, r5	@, tmp117
 3086              	@ armwave.c:409: }
 409:armwave.c     **** }
 3087              		.loc 1 409 1 view .LVU876
 3088 0e1c 0CD08DE2 		add	sp, sp, #12	@,,
 3089              		.cfi_def_cfa_offset 12
 3090              		@ sp needed	@
 3091 0e20 3040BDE8 		pop	{r4, r5, lr}	@
 3092              		.cfi_restore 14
 3093              		.cfi_restore 5
 3094              		.cfi_restore 4
 3095              		.cfi_def_cfa_offset 0
 3096              	.LVL232:
 3097              	@ armwave.c:408:     mv = PyMemoryView_FromBuffer(buf);
 408:armwave.c     **** }
 3098              		.loc 1 408 10 view .LVU877
 3099 0e24 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 3100              	.LVL233:
 3101              	.L192:
 408:armwave.c     **** }
 3102              		.loc 1 408 10 view .LVU878
 3103              		.align	2
 3104              	.L191:
 3105 0e28 00000000 		.word	g_armwave_state
 3106              		.cfi_endproc
 3107              	.LFE68:
 3109              		.align	2
 3110              		.global	armwave_test_dump_buffer_to_ppm
 3111              		.syntax unified
 3112              		.arm
 3113              		.fpu vfp
 3115              	armwave_test_dump_buffer_to_ppm:
 3116              	.LVL234:
 3117              	.LFB69:
 410:armwave.c     **** 
 411:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 412:armwave.c     **** {
 3118              		.loc 1 412 1 is_stmt 1 view -0
 3119              		.cfi_startproc
 3120              		@ args = 0, pretend = 0, frame = 0
 3121              		@ frame_needed = 0, uses_anonymous_args = 0
 3122              		@ link register save eliminated.
 413:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3123              		.loc 1 413 5 view .LVU880
 3124 0e2c 08309FE5 		ldr	r3, .L194	@ tmp112,
 3125 0e30 0010A0E1 		mov	r1, r0	@, fn
 3126 0e34 4C0093E5 		ldr	r0, [r3, #76]	@, g_armwave_state.out_pixbuf
 3127              	.LVL235:
 3128              		.loc 1 413 5 is_stmt 0 view .LVU881
 3129 0e38 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3130              	.LVL236:
 3131              	.L195:
 3132              		.loc 1 413 5 view .LVU882
 3133              		.align	2
 3134              	.L194:
 3135 0e3c 00000000 		.word	g_armwave_state
 3136              		.cfi_endproc
 3137              	.LFE69:
 3139              		.align	2
 3140              		.global	armwave_cleanup
 3141              		.syntax unified
 3142              		.arm
 3143              		.fpu vfp
 3145              	armwave_cleanup:
 3146              	.LFB70:
 414:armwave.c     **** }
 415:armwave.c     **** 
 416:armwave.c     **** void armwave_cleanup()
 417:armwave.c     **** {
 3147              		.loc 1 417 1 is_stmt 1 view -0
 3148              		.cfi_startproc
 3149              		@ args = 0, pretend = 0, frame = 0
 3150              		@ frame_needed = 0, uses_anonymous_args = 0
 418:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3151              		.loc 1 418 5 view .LVU884
 3152              	@ armwave.c:417: {
 417:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3153              		.loc 1 417 1 is_stmt 0 view .LVU885
 3154 0e40 10402DE9 		push	{r4, lr}	@
 3155              		.cfi_def_cfa_offset 8
 3156              		.cfi_offset 4, -8
 3157              		.cfi_offset 14, -4
 3158              	@ armwave.c:418:     free(g_armwave_state.out_pixbuf);
 3159              		.loc 1 418 25 view .LVU886
 3160 0e44 28409FE5 		ldr	r4, .L198	@ tmp113,
 3161              	@ armwave.c:418:     free(g_armwave_state.out_pixbuf);
 3162              		.loc 1 418 5 view .LVU887
 3163 0e48 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3164 0e4c FEFFFFEB 		bl	free		@
 3165              	.LVL237:
 419:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3166              		.loc 1 419 5 is_stmt 1 view .LVU888
 3167 0e50 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3168 0e54 FEFFFFEB 		bl	free		@
 3169              	.LVL238:
 420:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3170              		.loc 1 420 5 view .LVU889
 3171 0e58 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.xcoord_to_xpixel
 3172 0e5c FEFFFFEB 		bl	free		@
 3173              	.LVL239:
 421:armwave.c     **** 
 422:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3174              		.loc 1 422 5 view .LVU890
 3175              	@ armwave.c:422:     g_armwave_state.out_pixbuf = NULL;
 3176              		.loc 1 422 32 is_stmt 0 view .LVU891
 3177 0e60 0030A0E3 		mov	r3, #0	@ tmp120,
 3178 0e64 4C3084E5 		str	r3, [r4, #76]	@ tmp120, g_armwave_state.out_pixbuf
 423:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3179              		.loc 1 423 5 is_stmt 1 view .LVU892
 3180              	@ armwave.c:423:     g_armwave_state.ch1_buffer = NULL;
 3181              		.loc 1 423 32 is_stmt 0 view .LVU893
 3182 0e68 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 424:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3183              		.loc 1 424 5 is_stmt 1 view .LVU894
 3184              	@ armwave.c:424:     g_armwave_state.xcoord_to_xpixel = NULL;
 3185              		.loc 1 424 38 is_stmt 0 view .LVU895
 3186 0e6c 683084E5 		str	r3, [r4, #104]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3187              	@ armwave.c:425: }
 425:armwave.c     **** }
 3188              		.loc 1 425 1 view .LVU896
 3189 0e70 1080BDE8 		pop	{r4, pc}	@
 3190              	.L199:
 3191              		.align	2
 3192              	.L198:
 3193 0e74 00000000 		.word	g_armwave_state
 3194              		.cfi_endproc
 3195              	.LFE70:
 3197              		.section	.text.startup,"ax",%progbits
 3198              		.align	2
 3199              		.global	main
 3200              		.syntax unified
 3201              		.arm
 3202              		.fpu vfp
 3204              	main:
 3205              	.LVL240:
 3206              	.LFB71:
 426:armwave.c     **** 
 427:armwave.c     **** int main(int argc, char *argv[])
 428:armwave.c     **** {
 3207              		.loc 1 428 1 is_stmt 1 view -0
 3208              		.cfi_startproc
 3209              		@ args = 0, pretend = 0, frame = 8
 3210              		@ frame_needed = 0, uses_anonymous_args = 0
 429:armwave.c     ****     uint32_t *out_buffer;
 3211              		.loc 1 429 5 view .LVU898
 430:armwave.c     ****     uint32_t xx, yy, n;
 3212              		.loc 1 430 5 view .LVU899
 431:armwave.c     **** 
 432:armwave.c     ****     //printf("Starting armwave...\n");
 433:armwave.c     ****     armwave_init();
 3213              		.loc 1 433 5 view .LVU900
 3214              	.LBB20:
 3215              	.LBI20:
 129:armwave.c     **** {
 3216              		.loc 1 129 6 view .LVU901
 3217              	.LBB21:
 131:armwave.c     **** }
 3218              		.loc 1 131 5 view .LVU902
 3219              	.LBE21:
 3220              	.LBE20:
 3221              	@ armwave.c:428: {
 428:armwave.c     ****     uint32_t *out_buffer;
 3222              		.loc 1 428 1 is_stmt 0 view .LVU903
 3223 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3224              		.cfi_def_cfa_offset 36
 3225              		.cfi_offset 4, -36
 3226              		.cfi_offset 5, -32
 3227              		.cfi_offset 6, -28
 3228              		.cfi_offset 7, -24
 3229              		.cfi_offset 8, -20
 3230              		.cfi_offset 9, -16
 3231              		.cfi_offset 10, -12
 3232              		.cfi_offset 11, -8
 3233              		.cfi_offset 14, -4
 3234 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 3235              		.cfi_def_cfa_offset 48
 3236              	.LBB25:
 3237              	.LBB22:
 3238              	@ armwave.c:131:     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 3239              		.loc 1 131 27 view .LVU904
 3240 0008 44419FE5 		ldr	r4, .L220	@ tmp253,
 3241              	.LBE22:
 3242              	.LBE25:
 3243              	@ armwave.c:442:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 434:armwave.c     **** 
 435:armwave.c     ****     //printf("Creating test waveform...\n");
 436:armwave.c     ****     test_create_waveform();
 437:armwave.c     **** 
 438:armwave.c     ****     //printf("Creating gamma LUT...\n");
 439:armwave.c     ****     test_create_gamma();
 440:armwave.c     **** 
 441:armwave.c     ****     //printf("Setting up render...\n");
 442:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 3244              		.loc 1 442 5 view .LVU905
 3245 000c 44219FE5 		ldr	r2, .L220+4	@ ivtmp_197,
 3246              	.LBB26:
 3247              	.LBB23:
 3248              	@ armwave.c:131:     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 3249              		.loc 1 131 27 view .LVU906
 3250 0010 0030A0E3 		mov	r3, #0	@ tmp190,
 3251              	.LBE23:
 3252              	.LBE26:
 3253              	@ armwave.c:442:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 3254              		.loc 1 442 5 view .LVU907
 3255 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_197, %sfp
 3256              	.LBB27:
 3257              	.LBB24:
 3258              	@ armwave.c:131:     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 3259              		.loc 1 131 27 view .LVU908
 3260 0018 003084E5 		str	r3, [r4]	@ tmp190, g_armwave_state.flags
 3261              	.LBE24:
 3262              	.LBE27:
 436:armwave.c     **** 
 3263              		.loc 1 436 5 is_stmt 1 view .LVU909
 3264 001c FEFFFFEB 		bl	test_create_waveform		@
 3265              	.LVL241:
 439:armwave.c     **** 
 3266              		.loc 1 439 5 view .LVU910
 3267 0020 FEFFFFEB 		bl	test_create_gamma		@
 3268              	.LVL242:
 3269              		.loc 1 442 5 view .LVU911
 3270 0024 011CA0E3 		mov	r1, #256	@,
 3271 0028 020BA0E3 		mov	r0, #2048	@,
 3272 002c FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 3273              	.LVL243:
 443:armwave.c     **** 
 444:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 445:armwave.c     **** 
 446:armwave.c     ****     for(n = 0; n < 5000; n++) {
 3274              		.loc 1 446 5 view .LVU912
 3275              		.loc 1 446 5 is_stmt 0 view .LVU913
 3276 0030 2C6094E5 		ldr	r6, [r4, #44]	@ _119, g_armwave_state.slice_height
 3277              	.LVL244:
 3278              	.L201:
 3279              	@ armwave.c:447:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 447:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3280              		.loc 1 447 9 view .LVU914
 3281 0034 020B56E3 		cmp	r6, #2048	@ _119,
 3282              	@ armwave.c:447:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3283              		.loc 1 447 16 view .LVU915
 3284 0038 0050A093 		movls	r5, #0	@ yy,
 3285 003c 24A09495 		ldrls	r10, [r4, #36]	@ prephitmp_184, g_armwave_state.waves
 3286              	@ armwave.c:447:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3287              		.loc 1 447 9 view .LVU916
 3288 0040 3C00008A 		bhi	.L209		@,
 3289              	.LVL245:
 3290              	.L206:
 448:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 449:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 3291              		.loc 1 449 13 is_stmt 1 discriminator 3 view .LVU917
 3292 0044 960502E0 		mul	r2, r6, r5	@ _1, _119, yy
 3293              	.LBB28:
 3294              	.LBB29:
 3295              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3296              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU918
 3297 0048 280094E5 		ldr	r0, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3298              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3299              		.loc 1 110 5 discriminator 3 view .LVU919
 3300 004c 00005AE3 		cmp	r10, #0	@ prephitmp_184,
 3301              	.LBE29:
 3302              	.LBE28:
 3303              	@ armwave.c:449:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 3304              		.loc 1 449 13 discriminator 3 view .LVU920
 3305 0050 307094E5 		ldr	r7, [r4, #48]	@ _2, g_armwave_state.slice_record_height
 3306              	.LVL246:
 3307              	.LBB31:
 3308              	.LBI28:
  99:armwave.c     **** {
 3309              		.loc 1 99 6 is_stmt 1 discriminator 3 view .LVU921
 3310              	.LBB30:
 101:armwave.c     ****     uint32_t value, word;
 3311              		.loc 1 101 5 discriminator 3 view .LVU922
 102:armwave.c     ****     uint8_t *wave_base;
 3312              		.loc 1 102 5 discriminator 3 view .LVU923
 103:armwave.c     ****     uint8_t *write_buffer_base;
 3313              		.loc 1 103 5 discriminator 3 view .LVU924
 104:armwave.c     ****     uint8_t *write_buffer;
 3314              		.loc 1 104 5 discriminator 3 view .LVU925
 105:armwave.c     ****     
 3315              		.loc 1 105 5 discriminator 3 view .LVU926
 107:armwave.c     **** 
 3316              		.loc 1 107 5 discriminator 3 view .LVU927
 3317              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3318              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU928
 3319 0054 900200E0 		mul	r0, r0, r2	@ _19, g_armwave_state.bitdepth_height, _1
 3320              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3321              		.loc 1 107 40 discriminator 3 view .LVU929
 3322 0058 043094E5 		ldr	r3, [r4, #4]	@ _17, g_armwave_state.ch1_buffer
 3323              	.LVL247:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3324              		.loc 1 110 5 is_stmt 1 discriminator 3 view .LVU930
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3325              		.loc 1 110 5 is_stmt 0 discriminator 3 view .LVU931
 3326 005c 2F00000A 		beq	.L202		@,
 3327 0060 046042E2 		sub	r6, r2, #4	@ _80, _1,
 3328              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3329              		.loc 1 110 11 view .LVU932
 3330 0064 00E0A0E3 		mov	lr, #0	@ w,
 3331              	.LVL248:
 3332              	.L205:
 111:armwave.c     **** 
 3333              		.loc 1 111 9 is_stmt 1 view .LVU933
 3334              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3335              		.loc 1 111 64 is_stmt 0 view .LVU934
 3336 0068 202094E5 		ldr	r2, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3337              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3338              		.loc 1 115 9 view .LVU935
 3339 006c 000057E3 		cmp	r7, #0	@ _2,
 3340              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3341              		.loc 1 111 36 view .LVU936
 3342 0070 14C094E5 		ldr	ip, [r4, #20]	@ _20, g_armwave_state.wave_buffer
 3343              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3344              		.loc 1 111 64 view .LVU937
 3345 0074 920E02E0 		mul	r2, r2, lr	@ _23, g_armwave_state.wave_stride, w
 3346              	.LVL249:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3347              		.loc 1 115 9 is_stmt 1 view .LVU938
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3348              		.loc 1 115 9 is_stmt 0 view .LVU939
 3349 0078 2400000A 		beq	.L203		@,
 3350 007c 062082E0 		add	r2, r2, r6	@ tmp200, _23, _80
 3351              	.LVL250:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3352              		.loc 1 115 9 view .LVU940
 3353 0080 02C08CE0 		add	ip, ip, r2	@ ivtmp.132, _20, tmp200
 3354              	.LVL251:
 3355              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3356              		.loc 1 115 16 view .LVU941
 3357 0084 0020A0E3 		mov	r2, #0	@ yy,
 3358              	.LVL252:
 3359              	.L204:
 116:armwave.c     **** 
 3360              		.loc 1 116 13 is_stmt 1 view .LVU942
 3361              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 3362              		.loc 1 116 18 is_stmt 0 view .LVU943
 3363 0088 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _183, offset: 0B]
 3364              	.LVL253:
 118:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 3365              		.loc 1 118 13 is_stmt 1 view .LVU944
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3366              		.loc 1 120 17 view .LVU945
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3367              		.loc 1 121 17 view .LVU946
 122:armwave.c     ****                 word >>= 8;
 3368              		.loc 1 122 17 view .LVU947
 3369              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3370              		.loc 1 121 63 is_stmt 0 view .LVU948
 3371 008c 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3372 0090 01B082E2 		add	fp, r2, #1	@ tmp212, yy,
 3373              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 3374              		.loc 1 122 47 view .LVU949
 3375 0094 7180E0E6 		uxtab	r8, r0, r1	@ tmp205, _19, word
 3376 0098 998229E0 		mla	r9, r9, r2, r8	@ tmp206, g_armwave_state.bitdepth_height, yy, tmp205
 3377              	@ armwave.c:123:                 word >>= 8;
 123:armwave.c     ****             }
 3378              		.loc 1 123 22 view .LVU950
 3379 009c 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 3380              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 3381              		.loc 1 122 47 view .LVU951
 3382 00a0 0980D3E7 		ldrb	r8, [r3, r9]	@ zero_extendqisi2	@ *_67, *_67
 3383 00a4 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp217, _19, word
 3384 00a8 018088E2 		add	r8, r8, #1	@ tmp209, *_67,
 3385 00ac 0980C3E7 		strb	r8, [r3, r9]	@ tmp209, *_67
 3386              	.LVL254:
 123:armwave.c     ****             }
 3387              		.loc 1 123 17 is_stmt 1 view .LVU952
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3388              		.loc 1 120 17 view .LVU953
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3389              		.loc 1 121 17 view .LVU954
 122:armwave.c     ****                 word >>= 8;
 3390              		.loc 1 122 17 view .LVU955
 3391              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3392              		.loc 1 121 63 is_stmt 0 view .LVU956
 3393 00b0 288094E5 		ldr	r8, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3394              	@ armwave.c:123:                 word >>= 8;
 123:armwave.c     ****             }
 3395              		.loc 1 123 22 view .LVU957
 3396 00b4 2198A0E1 		lsr	r9, r1, #16	@ word, word,
 3397              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 3398              		.loc 1 122 47 view .LVU958
 3399 00b8 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp240, _19, word,
 3400              	.LVL255:
 122:armwave.c     ****                 word >>= 8;
 3401              		.loc 1 122 47 view .LVU959
 3402 00bc 98AB28E0 		mla	r8, r8, fp, r10	@ tmp218, g_armwave_state.bitdepth_height, tmp212, tmp217
 3403 00c0 79A0E0E6 		uxtab	r10, r0, r9	@ tmp225, _19, word
 3404 00c4 08B0D3E7 		ldrb	fp, [r3, r8]	@ zero_extendqisi2	@ *_87, *_87
 3405              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3406              		.loc 1 121 63 view .LVU960
 3407 00c8 029082E2 		add	r9, r2, #2	@ tmp227, yy,
 3408              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 3409              		.loc 1 122 47 view .LVU961
 3410 00cc 01B08BE2 		add	fp, fp, #1	@ tmp221, *_87,
 3411 00d0 08B0C3E7 		strb	fp, [r3, r8]	@ tmp221, *_87
 3412              	.LVL256:
 123:armwave.c     ****             }
 3413              		.loc 1 123 17 is_stmt 1 view .LVU962
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3414              		.loc 1 120 17 view .LVU963
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3415              		.loc 1 121 17 view .LVU964
 122:armwave.c     ****                 word >>= 8;
 3416              		.loc 1 122 17 view .LVU965
 3417              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3418              		.loc 1 121 63 is_stmt 0 view .LVU966
 3419 00d4 28B094E5 		ldr	fp, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3420 00d8 038082E2 		add	r8, r2, #3	@ tmp236, yy,
 3421              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3422              		.loc 1 115 37 view .LVU967
 3423 00dc 042082E2 		add	r2, r2, #4	@ yy, yy,
 3424              	.LVL257:
 3425              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 3426              		.loc 1 122 47 view .LVU968
 3427 00e0 9BA929E0 		mla	r9, fp, r9, r10	@ tmp230, g_armwave_state.bitdepth_height, tmp227, tmp225
 3428              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3429              		.loc 1 115 9 view .LVU969
 3430 00e4 020057E1 		cmp	r7, r2	@ _2, yy
 3431              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 3432              		.loc 1 122 47 view .LVU970
 3433 00e8 09A0D3E7 		ldrb	r10, [r3, r9]	@ zero_extendqisi2	@ *_107, *_107
 3434 00ec 01A08AE2 		add	r10, r10, #1	@ tmp233, *_107,
 3435 00f0 09A0C3E7 		strb	r10, [r3, r9]	@ tmp233, *_107
 3436              	.LVL258:
 123:armwave.c     ****             }
 3437              		.loc 1 123 17 is_stmt 1 view .LVU971
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3438              		.loc 1 120 17 view .LVU972
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3439              		.loc 1 121 17 view .LVU973
 122:armwave.c     ****                 word >>= 8;
 3440              		.loc 1 122 17 view .LVU974
 3441              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3442              		.loc 1 121 63 is_stmt 0 view .LVU975
 3443 00f4 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3444              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 3445              		.loc 1 122 47 view .LVU976
 3446 00f8 991821E0 		mla	r1, r9, r8, r1	@ tmp241, g_armwave_state.bitdepth_height, tmp236, tmp240
 3447 00fc 0180D3E7 		ldrb	r8, [r3, r1]	@ zero_extendqisi2	@ *_127, *_127
 3448 0100 018088E2 		add	r8, r8, #1	@ tmp244, *_127,
 3449 0104 0180C3E7 		strb	r8, [r3, r1]	@ tmp244, *_127
 123:armwave.c     ****             }
 3450              		.loc 1 123 17 is_stmt 1 view .LVU977
 3451              	.LVL259:
 3452              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3453              		.loc 1 115 9 is_stmt 0 view .LVU978
 3454 0108 DEFFFF8A 		bhi	.L204		@,
 3455 010c 24A094E5 		ldr	r10, [r4, #36]	@ prephitmp_184, g_armwave_state.waves
 3456              	.LVL260:
 3457              	.L203:
 3458              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3459              		.loc 1 110 44 view .LVU979
 3460 0110 01E08EE2 		add	lr, lr, #1	@ w, w,
 3461              	.LVL261:
 3462              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3463              		.loc 1 110 5 view .LVU980
 3464 0114 0A005EE1 		cmp	lr, r10	@ w, prephitmp_184
 3465 0118 D2FFFF3A 		bcc	.L205		@,
 3466 011c 2C6094E5 		ldr	r6, [r4, #44]	@ _119, g_armwave_state.slice_height
 3467              	.LVL262:
 3468              	.L202:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3469              		.loc 1 110 5 view .LVU981
 3470              	.LBE30:
 3471              	.LBE31:
 3472              	@ armwave.c:447:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 447:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3473              		.loc 1 447 32 discriminator 3 view .LVU982
 3474 0120 0610A0E1 		mov	r1, r6	@, _119
 3475 0124 020BA0E3 		mov	r0, #2048	@,
 3476              	.LVL263:
 447:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3477              		.loc 1 447 32 discriminator 3 view .LVU983
 3478 0128 FEFFFFEB 		bl	__aeabi_uidiv		@
 3479              	.LVL264:
 3480              	@ armwave.c:447:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 447:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3481              		.loc 1 447 67 discriminator 3 view .LVU984
 3482 012c 015085E2 		add	r5, r5, #1	@ yy, yy,
 3483              	.LVL265:
 3484              	@ armwave.c:447:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 447:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3485              		.loc 1 447 9 discriminator 3 view .LVU985
 3486 0130 050050E1 		cmp	r0, r5	@, yy
 3487 0134 C2FFFF8A 		bhi	.L206		@,
 3488              	.LVL266:
 3489              	.L209:
 3490              	@ armwave.c:446:     for(n = 0; n < 5000; n++) {
 446:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3491              		.loc 1 446 5 discriminator 2 view .LVU986
 3492 0138 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_197, %sfp
 3493 013c 013053E2 		subs	r3, r3, #1	@ ivtmp_197, ivtmp_197,
 3494 0140 04308DE5 		str	r3, [sp, #4]	@ ivtmp_197, %sfp
 3495 0144 BAFFFF1A 		bne	.L201		@,
 3496 0148 0300A0E1 		mov	r0, r3	@, ivtmp_197
 450:armwave.c     ****         }
 451:armwave.c     ****     }
 452:armwave.c     **** 
 453:armwave.c     ****     /*
 454:armwave.c     ****     printf("Creating pixbuf\n");
 455:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 456:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 457:armwave.c     **** 
 458:armwave.c     ****     printf("Dumping pixbuf\n");
 459:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 460:armwave.c     ****     */
 461:armwave.c     **** 
 462:armwave.c     ****     return 0;
 3497              		.loc 1 462 5 is_stmt 1 view .LVU987
 3498              	@ armwave.c:463: }
 463:armwave.c     **** }...
 3499              		.loc 1 463 1 is_stmt 0 view .LVU988
 3500 014c 0CD08DE2 		add	sp, sp, #12	@,,
 3501              		.cfi_def_cfa_offset 36
 3502              		@ sp needed	@
 3503 0150 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3504              	.L221:
 3505              		.align	2
 3506              	.L220:
 3507 0154 00000000 		.word	g_armwave_state
 3508 0158 88130000 		.word	5000
 3509              		.cfi_endproc
 3510              	.LFE71:
 3512              		.global	mod_depth
 3513              		.global	overall_scale
 3514              		.comm	gamma_table,256,4
 3515              		.comm	test_wave_buffer,131072,4
 3516              		.comm	g_armwave_state,108,4
 3517              		.section	.rodata
 3518              		.align	2
 3519              		.set	.LANCHOR0,. + 0
 3522              	__PRETTY_FUNCTION__.17003:
 3523 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3523      6176655F 
 3523      73657475 
 3523      705F7265 
 3523      6E646572 
 3524 0015 000000   		.space	3
 3527              	__PRETTY_FUNCTION__.17031:
 3528 0018 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3528      6176655F 
 3528      66696C6C 
 3528      5F706978 
 3528      6275665F 
 3531              	__PRETTY_FUNCTION__.17062:
 3532 0030 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3532      6176655F 
 3532      66696C6C 
 3532      5F706978 
 3532      6275665F 
 3533 004b 00       		.space	1
 3536              	overall_scale:
 3537 004c 00002041 		.word	1092616192
 3538              		.bss
 3539              		.align	2
 3540              		.set	.LANCHOR1,. + 0
 3543              	mod_depth:
 3544 0000 00000000 		.space	4
 3545              		.section	.rodata.str1.4,"aMS",%progbits,1
 3546              		.align	2
 3547              	.LC0:
 3548 0000 61726D77 		.ascii	"armwave.c\000"
 3548      6176652E 
 3548      6300
 3549 000a 0000     		.space	2
 3550              	.LC1:
 3551 000c 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3551      65745F68 
 3551      65696768 
 3551      74203D3D 
 3551      20323536 
 3552 003f 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3552      68656967 
 3552      6874203D 
 3552      3D203130 
 3552      3234207C 
 3553 006b 00       		.space	1
 3554              	.LC2:
 3555 006c 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 3555      7566665F 
 3555      73697A65 
 3555      3D25640A 
 3555      00
 3556 007d 000000   		.space	3
 3557              	.LC3:
 3558 0080 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3558      6D776176 
 3558      655F7374 
 3558      6174652E 
 3558      6368315F 
 3559 00a3 00       		.space	1
 3560              	.LC4:
 3561 00a4 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3561      6D776176 
 3561      655F7374 
 3561      6174652E 
 3561      78636F6F 
 3562 00cd 000000   		.space	3
 3563              	.LC5:
 3564 00d0 73746172 		.ascii	"start_point < end_point\000"
 3564      745F706F 
 3564      696E7420 
 3564      3C20656E 
 3564      645F706F 
 3565              	.LC6:
 3566 00e8 6F75745F 		.ascii	"out_buffer != NULL\000"
 3566      62756666 
 3566      65722021 
 3566      3D204E55 
 3566      4C4C00
 3567 00fb 00       		.space	1
 3568              	.LC7:
 3569 00fc 6E703D25 		.ascii	"np=%d w=%d v=%d\012\000"
 3569      6420773D 
 3569      25642076 
 3569      3D25640A 
 3569      00
 3570 010d 000000   		.space	3
 3571              	.LC8:
 3572 0110 776200   		.ascii	"wb\000"
 3573 0113 00       		.space	1
 3574              	.LC9:
 3575 0114 50330A00 		.ascii	"P3\012\000"
 3576              	.LC10:
 3577 0118 25642025 		.ascii	"%d %d\012\000"
 3577      640A00
 3578 011f 00       		.space	1
 3579              	.LC11:
 3580 0120 3235350A 		.ascii	"255\012\000"
 3580      00
 3581 0125 000000   		.space	3
 3582              	.LC12:
 3583 0128 25336420 		.ascii	"%3d %3d %3d\012\000"
 3583      25336420 
 3583      2533640A 
 3583      00
 3584 0135 000000   		.space	3
 3585              	.LC13:
 3586 0138 76302E30 		.ascii	"v0.0.1\000"
 3586      2E3100
 3587 013f 00       		.space	1
 3588              	.LC14:
 3589 0140 61726D77 		.ascii	"armwave version: %s\012\000"
 3589      61766520 
 3589      76657273 
 3589      696F6E3A 
 3589      2025730A 
 3590              		.text
 3591              	.Letext0:
 3592              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3593              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3594              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3595              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3596              		.file 6 "/usr/include/stdio.h"
 3597              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3598              		.file 8 "/usr/include/errno.h"
 3599              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3600              		.file 10 "/usr/include/unistd.h"
 3601              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3602              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3603              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3604              		.file 14 "/usr/include/math.h"
 3605              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3606              		.file 16 "/usr/include/time.h"
 3607              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3608              		.file 18 "/usr/local/include/python3.8/object.h"
 3609              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3610              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3611              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3612              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3613              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3614              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3615              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3616              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3617              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3618              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3619              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3620              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3621              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3622              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3623              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3624              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3625              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3626              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3627              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3628              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3629              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3630              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3631              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3632              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3633              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3634              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3635              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3636              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3637              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3638              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3639              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3640              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3641              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3642              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3643              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3644              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3645              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3646              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3647              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3648              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3649              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3650              		.file 60 "/usr/local/include/python3.8/context.h"
 3651              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3652              		.file 62 "/usr/local/include/python3.8/code.h"
 3653              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3654              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3655              		.file 65 "/usr/local/include/python3.8/import.h"
 3656              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3657              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3658              		.file 68 "armwave.h"
 3659              		.file 69 "/usr/include/stdlib.h"
 3660              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 3661              		.file 71 "<built-in>"
 3662              		.file 72 "/usr/include/assert.h"
 3663              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
