   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.34,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.34,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.34,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.34
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.34, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0150A0E1 		mov	r5, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 54619FE5 		ldr	r6, .L21	@ tmp191,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241096E5 		ldr	r1, [r6, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403096E5 		ldr	r3, [r6, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044096E5 		ldr	r4, [r6, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp194, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 21008DE9 		stmib	sp, {r0, r5}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp195, tmp194,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp196, _5, tmp195
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 24019FE5 		ldr	r0, .L21+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp196,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp201, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp201,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141096E5 		ldr	r1, [r6, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383096E5 		ldr	r3, [r6, #56]	@ _91, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _91,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _91, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3B0000DA 		ble	.L11		@,
 317              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 318              		.loc 1 80 81 view .LVU52
 319 0108 343096E5 		ldr	r3, [r6, #52]	@ _15, g_armwave_state.wave_stride
 320 010c 000055E3 		cmp	r5, #0	@ height,
 321              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 322              		.loc 1 80 36 view .LVU53
 323 0110 14B096E5 		ldr	fp, [r6, #20]	@ _14, g_armwave_state.wave_buffer
 324              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 325              		.loc 1 103 51 view .LVU54
 326 0114 24E096E5 		ldr	lr, [r6, #36]	@ _64, g_armwave_state.cmp_x_bitdepth_scale
 327              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 328              		.loc 1 80 81 view .LVU55
 329 0118 24308DE5 		str	r3, [sp, #36]	@ _15, %sfp
 330              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 331              		.loc 1 103 116 view .LVU56
 332 011c 406096E5 		ldr	r6, [r6, #64]	@ _68, g_armwave_state.bitdepth_height
 333 0120 3400000A 		beq	.L11		@,
 334 0124 07B08BE0 		add	fp, fp, r7	@ ivtmp.49, _14, slice_y
 335 0128 00A06BE2 		rsb	r10, fp, #0	@ ivtmp.50, ivtmp.49
 336              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 337              		.loc 1 79 11 view .LVU57
 338 012c 0030A0E3 		mov	r3, #0	@ w,
 339 0130 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 340              	.LVL11:
 341              	.L14:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 342              		.loc 1 80 9 is_stmt 1 view .LVU58
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 343              		.loc 1 84 9 view .LVU59
 344              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 345              		.loc 1 79 11 is_stmt 0 view .LVU60
 346 0134 0B80A0E1 		mov	r8, fp	@ ivtmp.42, ivtmp.49
 347 0138 0030A0E3 		mov	r3, #0	@ ivtmp.43,
 348              	.LVL12:
 349              	.L13:
  87:armwave.c     **** 
 350              		.loc 1 87 13 is_stmt 1 view .LVU61
 351              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 352              		.loc 1 87 18 is_stmt 0 view .LVU62
 353 013c 041098E4 		ldr	r1, [r8], #4	@ word, MEM[base: _260, offset: 0B]
 354              	.LVL13:
  89:armwave.c     ****                 scale_value = word & 0xff;
 355              		.loc 1 89 13 is_stmt 1 view .LVU63
  90:armwave.c     ****                 
 356              		.loc 1 90 17 view .LVU64
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 357              		.loc 1 102 17 view .LVU65
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 107 17 view .LVU66
 359              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 360              		.loc 1 103 74 is_stmt 0 view .LVU67
 361 0140 23C8A0E1 		lsr	ip, r3, #16	@ tmp207, ivtmp.43,
 362              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 363              		.loc 1 103 34 view .LVU68
 364 0144 03308EE0 		add	r3, lr, r3	@ _89, _64, ivtmp.43
 365              	.LVL14:
 366              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 367              		.loc 1 90 29 view .LVU69
 368 0148 7120EFE6 		uxtb	r2, r1	@ scale_value, word
 369              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 107 47 view .LVU70
 371 014c 962C2CE0 		mla	ip, r6, ip, r2	@ tmp210, _68, tmp207, scale_value
 372              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 373              		.loc 1 108 22 view .LVU71
 374 0150 2124A0E1 		lsr	r2, r1, #8	@ word, word,
 375              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 376              		.loc 1 103 74 view .LVU72
 377 0154 2308A0E1 		lsr	r0, r3, #16	@ tmp215, _89,
 378              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 379              		.loc 1 90 29 view .LVU73
 380 0158 7220EFE6 		uxtb	r2, r2	@ scale_value, word
 381              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 382              		.loc 1 107 47 view .LVU74
 383 015c 8CC0A0E1 		lsl	ip, ip, #1	@ tmp211, tmp210,
 384 0160 962020E0 		mla	r0, r6, r0, r2	@ tmp219, _68, tmp215, scale_value
 385              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 386              		.loc 1 103 34 view .LVU75
 387 0164 03308EE0 		add	r3, lr, r3	@ _113, _64, _89
 388              	@ armwave.c:108:                 word >>= 8;
 389              		.loc 1 108 22 view .LVU76
 390 0168 2128A0E1 		lsr	r2, r1, #16	@ word, word,
 391              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 392              		.loc 1 107 47 view .LVU77
 393 016c BC7094E1 		ldrh	r7, [r4, ip]	@ *_73, *_73
 394              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 395              		.loc 1 103 74 view .LVU78
 396 0170 2398A0E1 		lsr	r9, r3, #16	@ tmp224, _113,
 397              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 398              		.loc 1 90 29 view .LVU79
 399 0174 7220EFE6 		uxtb	r2, r2	@ scale_value, word
 400              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 401              		.loc 1 107 47 view .LVU80
 402 0178 8000A0E1 		lsl	r0, r0, #1	@ tmp220, tmp219,
 403              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 404              		.loc 1 103 34 view .LVU81
 405 017c 03308EE0 		add	r3, lr, r3	@ _137, _64, _113
 406              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 407              		.loc 1 107 47 view .LVU82
 408 0180 962922E0 		mla	r2, r6, r9, r2	@ tmp228, _68, tmp224, scale_value
 409 0184 017087E2 		add	r7, r7, #1	@ tmp214, *_73,
 410 0188 BC7084E1 		strh	r7, [r4, ip]	@ movhi	@ tmp214, *_73
 411              		.loc 1 108 17 is_stmt 1 view .LVU83
 412              	.LVL15:
  90:armwave.c     ****                 
 413              		.loc 1 90 17 view .LVU84
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 414              		.loc 1 102 17 view .LVU85
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 17 view .LVU86
 416              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 417              		.loc 1 103 74 is_stmt 0 view .LVU87
 418 018c 2378A0E1 		lsr	r7, r3, #16	@ tmp233, _137,
 419              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 420              		.loc 1 107 47 view .LVU88
 421 0190 B0C094E1 		ldrh	ip, [r4, r0]	@ *_97, *_97
 422              	@ armwave.c:108:                 word >>= 8;
 423              		.loc 1 108 22 view .LVU89
 424 0194 211CA0E1 		lsr	r1, r1, #24	@ word, word,
 425              	.LVL16:
 426              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 427              		.loc 1 107 47 view .LVU90
 428 0198 8220A0E1 		lsl	r2, r2, #1	@ tmp229, tmp228,
 429 019c 961721E0 		mla	r1, r6, r7, r1	@ tmp236, _68, tmp233, word
 430 01a0 01C08CE2 		add	ip, ip, #1	@ tmp223, *_97,
 431 01a4 B0C084E1 		strh	ip, [r4, r0]	@ movhi	@ tmp223, *_97
 432              		.loc 1 108 17 is_stmt 1 view .LVU91
 433              	.LVL17:
  90:armwave.c     ****                 
 434              		.loc 1 90 17 view .LVU92
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 435              		.loc 1 102 17 view .LVU93
 107:armwave.c     ****                 word >>= 8;
 436              		.loc 1 107 17 view .LVU94
 437              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 438              		.loc 1 107 47 is_stmt 0 view .LVU95
 439 01a8 B20094E1 		ldrh	r0, [r4, r2]	@ *_121, *_121
 440 01ac 8110A0E1 		lsl	r1, r1, #1	@ tmp237, tmp236,
 441 01b0 03308EE0 		add	r3, lr, r3	@ ivtmp.43, _64, _137
 442 01b4 010080E2 		add	r0, r0, #1	@ tmp232, *_121,
 443 01b8 B20084E1 		strh	r0, [r4, r2]	@ movhi	@ tmp232, *_121
 444              		.loc 1 108 17 is_stmt 1 view .LVU96
 445              	.LVL18:
  90:armwave.c     ****                 
 446              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 447              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 448              		.loc 1 107 17 view .LVU99
 449              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 450              		.loc 1 107 47 is_stmt 0 view .LVU100
 451 01bc B12094E1 		ldrh	r2, [r4, r1]	@ *_145, *_145
 452              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 453              		.loc 1 84 9 view .LVU101
 454 01c0 08008AE0 		add	r0, r10, r8	@ tmp241, ivtmp.50, ivtmp.42
 455 01c4 000055E1 		cmp	r5, r0	@ height, tmp241
 456              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 457              		.loc 1 107 47 view .LVU102
 458 01c8 012082E2 		add	r2, r2, #1	@ tmp240, *_145,
 459 01cc B12084E1 		strh	r2, [r4, r1]	@ movhi	@ tmp240, *_145
 460              		.loc 1 108 17 is_stmt 1 view .LVU103
 461              	.LVL19:
 462              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 463              		.loc 1 84 9 is_stmt 0 view .LVU104
 464 01d0 D9FFFF8A 		bhi	.L13		@,
 465              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 466              		.loc 1 79 44 view .LVU105
 467 01d4 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 468              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 469              		.loc 1 79 5 view .LVU106
 470 01d8 20209DE5 		ldr	r2, [sp, #32]	@ _91, %sfp
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 view .LVU107
 473 01dc 013083E2 		add	r3, r3, #1	@ w, w,
 474 01e0 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 475              	.LVL20:
 476              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 477              		.loc 1 79 5 view .LVU108
 478 01e4 020053E1 		cmp	r3, r2	@ w, _91
 479 01e8 24309DE5 		ldr	r3, [sp, #36]	@ _15, %sfp
 480              	.LVL21:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 481              		.loc 1 79 5 view .LVU109
 482 01ec 03B08BE0 		add	fp, fp, r3	@ ivtmp.49, ivtmp.49, _15
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 view .LVU110
 484 01f0 03A04AE0 		sub	r10, r10, r3	@ ivtmp.50, ivtmp.50, _15
 485 01f4 CEFFFF1A 		bne	.L14		@,
 486              	.LVL22:
 487              	.L11:
 488              	@ armwave.c:112: }
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** }
 489              		.loc 1 112 1 view .LVU111
 490 01f8 2CD08DE2 		add	sp, sp, #44	@,,
 491              		.cfi_def_cfa_offset 36
 492              		@ sp needed	@
 493 01fc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 494              	.LVL23:
 495              	.L22:
 496              		.loc 1 112 1 view .LVU112
 497              		.align	2
 498              	.L21:
 499 0200 00000000 		.word	g_armwave_state
 500 0204 20000000 		.word	.LC2
 501              		.cfi_endproc
 502              	.LFE59:
 504              		.align	2
 505              		.global	armwave_fill_pixbuf_scaled
 506              		.syntax unified
 507              		.arm
 508              		.fpu vfp
 510              	armwave_fill_pixbuf_scaled:
 511              	.LVL24:
 512              	.LFB60:
 113:armwave.c     **** 
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 116:armwave.c     ****  * Rows are repeated as necessary.
 117:armwave.c     ****  */
 118:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 119:armwave.c     **** {
 513              		.loc 1 119 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 16
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 517              		.loc 1 120 5 view .LVU114
 121:armwave.c     ****     // uint32_t ysub;
 122:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 518              		.loc 1 122 5 view .LVU115
 123:armwave.c     ****     uint8_t r, g, b;
 519              		.loc 1 123 5 view .LVU116
 124:armwave.c     ****     int value; 
 520              		.loc 1 124 5 view .LVU117
 125:armwave.c     ****     // uint8_t row;
 126:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 521              		.loc 1 126 5 view .LVU118
 522              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 523              		.loc 1 119 1 is_stmt 0 view .LVU119
 524 0208 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 525              		.cfi_def_cfa_offset 36
 526              		.cfi_offset 4, -36
 527              		.cfi_offset 5, -32
 528              		.cfi_offset 6, -28
 529              		.cfi_offset 7, -24
 530              		.cfi_offset 8, -20
 531              		.cfi_offset 9, -16
 532              		.cfi_offset 10, -12
 533              		.cfi_offset 11, -8
 534              		.cfi_offset 14, -4
 535              	@ armwave.c:130:     printf("output buffer: 0x%08x\n", out_buffer);
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 128:armwave.c     ****     uint32_t offset;
 129:armwave.c     **** 
 130:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 536              		.loc 1 130 5 view .LVU120
 537 020c 0010A0E1 		mov	r1, r0	@, out_buffer
 538              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 539              		.loc 1 126 15 view .LVU121
 540 0210 C4519FE5 		ldr	r5, .L43	@ tmp235,
 541              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 542              		.loc 1 119 1 view .LVU122
 543 0214 0070A0E1 		mov	r7, r0	@ out_buffer, out_buffer
 544 0218 14D04DE2 		sub	sp, sp, #20	@,,
 545              		.cfi_def_cfa_offset 56
 546              	@ armwave.c:130:     printf("output buffer: 0x%08x\n", out_buffer);
 547              		.loc 1 130 5 view .LVU123
 548 021c BC019FE5 		ldr	r0, .L43+4	@,
 549              	.LVL25:
 550              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 551              		.loc 1 126 15 view .LVU124
 552 0220 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 553              	.LVL26:
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 554              		.loc 1 127 5 is_stmt 1 view .LVU125
 128:armwave.c     **** 
 555              		.loc 1 128 5 view .LVU126
 556              		.loc 1 130 5 view .LVU127
 557 0224 FEFFFFEB 		bl	printf		@
 558              	.LVL27:
 131:armwave.c     **** 
 132:armwave.c     ****     if(out_buffer == NULL)
 559              		.loc 1 132 5 view .LVU128
 560              	@ armwave.c:132:     if(out_buffer == NULL)
 561              		.loc 1 132 7 is_stmt 0 view .LVU129
 562 0228 000057E3 		cmp	r7, #0	@ out_buffer,
 563 022c 6600000A 		beq	.L23		@,
 133:armwave.c     ****         return;
 134:armwave.c     **** 
 135:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 564              		.loc 1 135 5 is_stmt 1 view .LVU130
 565              	@ armwave.c:135:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 566              		.loc 1 135 27 is_stmt 0 view .LVU131
 567 0230 582095E5 		ldr	r2, [r5, #88]	@ _1, g_armwave_state.target_width
 568              	@ armwave.c:137:     printf("memset %d bytes, npix %d, base32_ptr 0x%08x\n", g_armwave_state.target
 136:armwave.c     ****     
 137:armwave.c     ****     printf("memset %d bytes, npix %d, base32_ptr 0x%08x\n", g_armwave_state.target_width * g_armwav
 569              		.loc 1 137 90 view .LVU132
 570 0234 5C1095E5 		ldr	r1, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 571              	@ armwave.c:135:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 135:armwave.c     ****     
 572              		.loc 1 135 10 view .LVU133
 573 0238 406095E5 		ldr	r6, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 574              	@ armwave.c:137:     printf("memset %d bytes, npix %d, base32_ptr 0x%08x\n", g_armwave_state.target
 575              		.loc 1 137 5 view .LVU134
 576 023c 0430A0E1 		mov	r3, r4	@, base_32ptr
 577              	@ armwave.c:137:     printf("memset %d bytes, npix %d, base32_ptr 0x%08x\n", g_armwave_state.target
 578              		.loc 1 137 90 view .LVU135
 579 0240 910201E0 		mul	r1, r1, r2	@ tmp186, g_armwave_state.target_height, _1
 580              	@ armwave.c:135:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 135:armwave.c     ****     
 581              		.loc 1 135 10 view .LVU136
 582 0244 960206E0 		mul	r6, r6, r2	@ npix, g_armwave_state.bitdepth_height, _1
 583              	.LVL28:
 584              		.loc 1 137 5 is_stmt 1 view .LVU137
 585 0248 0111A0E1 		lsl	r1, r1, #2	@, tmp186,
 586 024c 0620A0E1 		mov	r2, r6	@, npix
 587 0250 8C019FE5 		ldr	r0, .L43+8	@,
 588 0254 FEFFFFEB 		bl	printf		@
 589              	.LVL29:
 138:armwave.c     **** 
 139:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 140:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 590              		.loc 1 140 5 view .LVU138
 591              	@ armwave.c:140:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 592              		.loc 1 140 59 is_stmt 0 view .LVU139
 593 0258 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 594 025c 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 595              	@ armwave.c:140:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 596              		.loc 1 140 5 view .LVU140
 597 0260 0010A0E3 		mov	r1, #0	@,
 598 0264 0700A0E1 		mov	r0, r7	@, out_buffer
 599              	@ armwave.c:140:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 600              		.loc 1 140 59 view .LVU141
 601 0268 920302E0 		mul	r2, r2, r3	@ tmp192, g_armwave_state.target_height, g_armwave_state.target_width
 602              	@ armwave.c:140:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 603              		.loc 1 140 5 view .LVU142
 604 026c 0221A0E1 		lsl	r2, r2, #2	@, tmp192,
 605 0270 FEFFFFEB 		bl	memset		@
 606              	.LVL30:
 141:armwave.c     **** 
 142:armwave.c     ****     printf("iter...\n");
 607              		.loc 1 142 5 is_stmt 1 view .LVU143
 608 0274 6C019FE5 		ldr	r0, .L43+12	@,
 609 0278 FEFFFFEB 		bl	puts		@
 610              	.LVL31:
 143:armwave.c     **** 
 144:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 611              		.loc 1 144 5 view .LVU144
 612              		.loc 1 144 5 is_stmt 0 view .LVU145
 613 027c 000056E3 		cmp	r6, #0	@ npix,
 614 0280 530000DA 		ble	.L31		@,
 615              	@ armwave.c:154:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 146:armwave.c     ****         wave_word = *base_32ptr++;
 147:armwave.c     **** 
 148:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 149:armwave.c     ****             for(w = 0; w < 2; w++) {
 150:armwave.c     ****                 value = wave_word & 0xffff;
 151:armwave.c     ****                 wave_word >>= 16;
 152:armwave.c     **** 
 153:armwave.c     ****                 if(value != 0) {
 154:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 616              		.loc 1 154 52 view .LVU146
 617 0284 FC36D5E1 		ldrsh	r3, [r5, #108]	@ _17, g_armwave_state.ch1_color.r
 618              	@ armwave.c:156:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 155:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 156:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 619              		.loc 1 156 52 view .LVU147
 620 0288 F0A7D5E1 		ldrsh	r10, [r5, #112]	@ _23, g_armwave_state.ch1_color.b
 621              	@ armwave.c:167:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 157:armwave.c     **** 
 158:armwave.c     ****                     r = MIN(rr, 255);
 159:armwave.c     ****                     g = MIN(gg, 255);
 160:armwave.c     ****                     b = MIN(bb, 255);
 161:armwave.c     **** 
 162:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 163:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 164:armwave.c     **** 
 165:armwave.c     ****                     // Plot the pixels
 166:armwave.c     ****                     nsub = n + w;
 167:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 622              		.loc 1 167 57 view .LVU148
 623 028c 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _37, g_armwave_state.vscale_frac
 624              	@ armwave.c:154:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 154:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 625              		.loc 1 154 52 view .LVU149
 626 0290 04308DE5 		str	r3, [sp, #4]	@ _17, %sfp
 627              	@ armwave.c:155:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 155:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 628              		.loc 1 155 52 view .LVU150
 629 0294 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _20, g_armwave_state.ch1_color.g
 630              	@ armwave.c:120:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 120:armwave.c     ****     // uint32_t ysub;
 631              		.loc 1 120 46 view .LVU151
 632 0298 0AB0A0E1 		mov	fp, r10	@ _23, _23
 633              	@ armwave.c:155:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 155:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 634              		.loc 1 155 52 view .LVU152
 635 029c 08308DE5 		str	r3, [sp, #8]	@ _20, %sfp
 636              	@ armwave.c:144:     for(n = 0; n < npix; n += 2) {
 144:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 637              		.loc 1 144 11 view .LVU153
 638 02a0 0030A0E3 		mov	r3, #0	@ n,
 639              	@ armwave.c:120:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 120:armwave.c     ****     // uint32_t ysub;
 640              		.loc 1 120 46 view .LVU154
 641 02a4 0310A0E1 		mov	r1, r3	@ painted, n
 642              	.LVL32:
 643              	.L30:
 146:armwave.c     **** 
 644              		.loc 1 146 9 is_stmt 1 view .LVU155
 645              	@ armwave.c:146:         wave_word = *base_32ptr++;
 146:armwave.c     **** 
 646              		.loc 1 146 19 is_stmt 0 view .LVU156
 647 02a8 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_74, offset: 4294967292B]
 648              	.LVL33:
 148:armwave.c     ****             for(w = 0; w < 2; w++) {
 649              		.loc 1 148 9 is_stmt 1 view .LVU157
 650              	@ armwave.c:148:         if(COND_UNLIKELY(wave_word != 0)) {
 148:armwave.c     ****             for(w = 0; w < 2; w++) {
 651              		.loc 1 148 11 is_stmt 0 view .LVU158
 652 02ac 000052E3 		cmp	r2, #0	@ wave_word,
 653              	@ armwave.c:149:             for(w = 0; w < 2; w++) {
 149:armwave.c     ****                 value = wave_word & 0xffff;
 654              		.loc 1 149 19 view .LVU159
 655 02b0 00A0A013 		movne	r10, #0	@ w,
 656              	@ armwave.c:148:         if(COND_UNLIKELY(wave_word != 0)) {
 148:armwave.c     ****             for(w = 0; w < 2; w++) {
 657              		.loc 1 148 11 view .LVU160
 658 02b4 0600001A 		bne	.L29		@,
 659              	.L26:
 660              	@ armwave.c:144:     for(n = 0; n < npix; n += 2) {
 144:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 661              		.loc 1 144 28 discriminator 2 view .LVU161
 662 02b8 023083E2 		add	r3, r3, #2	@ n, n,
 663              	.LVL34:
 664              	@ armwave.c:144:     for(n = 0; n < npix; n += 2) {
 144:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 665              		.loc 1 144 5 discriminator 2 view .LVU162
 666 02bc 030056E1 		cmp	r6, r3	@ npix, n
 667 02c0 F8FFFFCA 		bgt	.L30		@,
 668              	.LVL35:
 669              	.L25:
 168:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 169:armwave.c     ****                     xx = (nsub >> 8) / 2;
 170:armwave.c     **** 
 171:armwave.c     ****                     for(y = yy; y < ye; y++) {
 172:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 173:armwave.c     ****                         *(out_buffer_base + offset) = word;
 174:armwave.c     ****                         painted++;
 175:armwave.c     ****                     }
 176:armwave.c     ****                 }
 177:armwave.c     ****             }
 178:armwave.c     ****         }
 179:armwave.c     ****     }
 180:armwave.c     **** 
 181:armwave.c     ****     printf("done paint %d pixels...\n", painted);
 670              		.loc 1 181 5 is_stmt 1 view .LVU163
 671 02c4 20019FE5 		ldr	r0, .L43+16	@,
 672              	@ armwave.c:182: }
 182:armwave.c     **** }
 673              		.loc 1 182 1 is_stmt 0 view .LVU164
 674 02c8 14D08DE2 		add	sp, sp, #20	@,,
 675              		.cfi_remember_state
 676              		.cfi_def_cfa_offset 36
 677              		@ sp needed	@
 678 02cc F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 679              		.cfi_restore 14
 680              		.cfi_restore 11
 681              		.cfi_restore 10
 682              		.cfi_restore 9
 683              		.cfi_restore 8
 684              		.cfi_restore 7
 685              		.cfi_restore 6
 686              		.cfi_restore 5
 687              		.cfi_restore 4
 688              		.cfi_def_cfa_offset 0
 689              	.LVL36:
 690              	@ armwave.c:181:     printf("done paint %d pixels...\n", painted);
 181:armwave.c     **** }
 691              		.loc 1 181 5 view .LVU165
 692 02d0 FEFFFFEA 		b	printf		@
 693              	.LVL37:
 694              	.L29:
 695              		.cfi_restore_state
 150:armwave.c     ****                 wave_word >>= 16;
 696              		.loc 1 150 17 is_stmt 1 view .LVU166
 697              	@ armwave.c:150:                 value = wave_word & 0xffff;
 150:armwave.c     ****                 wave_word >>= 16;
 698              		.loc 1 150 23 is_stmt 0 view .LVU167
 699 02d4 7200FFE6 		uxth	r0, r2	@ value, wave_word
 700              	.LVL38:
 151:armwave.c     **** 
 701              		.loc 1 151 17 is_stmt 1 view .LVU168
 702              	@ armwave.c:153:                 if(value != 0) {
 153:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 703              		.loc 1 153 19 is_stmt 0 view .LVU169
 704 02d8 000050E3 		cmp	r0, #0	@ value,
 705              	@ armwave.c:151:                 wave_word >>= 16;
 151:armwave.c     **** 
 706              		.loc 1 151 27 view .LVU170
 707 02dc 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 708              	.LVL39:
 153:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 709              		.loc 1 153 17 is_stmt 1 view .LVU171
 710              	@ armwave.c:153:                 if(value != 0) {
 153:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 711              		.loc 1 153 19 is_stmt 0 view .LVU172
 712 02e0 0600001A 		bne	.L42		@,
 713              	.LVL40:
 714              	.L27:
 715              	@ armwave.c:149:             for(w = 0; w < 2; w++) {
 149:armwave.c     ****                 value = wave_word & 0xffff;
 716              		.loc 1 149 13 discriminator 2 view .LVU173
 717 02e4 01005AE3 		cmp	r10, #1	@ w,
 718 02e8 F2FFFF0A 		beq	.L26		@,
 719              	@ armwave.c:150:                 value = wave_word & 0xffff;
 150:armwave.c     ****                 wave_word >>= 16;
 720              		.loc 1 150 23 view .LVU174
 721 02ec 7200FFE6 		uxth	r0, r2	@ value, wave_word
 722              	@ armwave.c:153:                 if(value != 0) {
 153:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 723              		.loc 1 153 19 view .LVU175
 724 02f0 000050E3 		cmp	r0, #0	@ value,
 725 02f4 01A0A0E3 		mov	r10, #1	@ w,
 726              	.LVL41:
 150:armwave.c     ****                 wave_word >>= 16;
 727              		.loc 1 150 17 is_stmt 1 view .LVU176
 151:armwave.c     **** 
 728              		.loc 1 151 17 view .LVU177
 729              	@ armwave.c:151:                 wave_word >>= 16;
 151:armwave.c     **** 
 730              		.loc 1 151 27 is_stmt 0 view .LVU178
 731 02f8 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 732              	.LVL42:
 153:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 733              		.loc 1 153 17 is_stmt 1 view .LVU179
 734              	@ armwave.c:153:                 if(value != 0) {
 153:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 735              		.loc 1 153 19 is_stmt 0 view .LVU180
 736 02fc F8FFFF0A 		beq	.L27		@,
 737              	.L42:
 154:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 738              		.loc 1 154 21 is_stmt 1 view .LVU181
 739              	.LVL43:
 155:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 740              		.loc 1 155 21 view .LVU182
 156:armwave.c     **** 
 741              		.loc 1 156 21 view .LVU183
 158:armwave.c     ****                     g = MIN(gg, 255);
 742              		.loc 1 158 21 view .LVU184
 159:armwave.c     ****                     b = MIN(bb, 255);
 743              		.loc 1 159 21 view .LVU185
 160:armwave.c     **** 
 744              		.loc 1 160 21 view .LVU186
 163:armwave.c     **** 
 745              		.loc 1 163 21 view .LVU187
 746 0300 0A8083E0 		add	r8, r3, r10	@ _142, n, w
 747              	@ armwave.c:156:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 156:armwave.c     **** 
 748              		.loc 1 156 55 is_stmt 0 view .LVU188
 749 0304 900B0CE0 		mul	ip, r0, fp	@ tmp207, value, _23
 750              	@ armwave.c:167:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 167:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 751              		.loc 1 167 32 view .LVU189
 752 0308 78E0EFE6 		uxtb	lr, r8	@ _35, _142
 753              	@ armwave.c:168:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 168:armwave.c     ****                     xx = (nsub >> 8) / 2;
 754              		.loc 1 168 41 view .LVU190
 755 030c 01908EE2 		add	r9, lr, #1	@ tmp222, _35,
 756              	@ armwave.c:167:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 167:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 757              		.loc 1 167 40 view .LVU191
 758 0310 90EA07EE 		vmov	s15, lr	@ int	@ _35, _35
 759              	@ armwave.c:168:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 168:armwave.c     ****                     xx = (nsub >> 8) / 2;
 760              		.loc 1 168 41 view .LVU192
 761 0314 109A07EE 		vmov	s14, r9	@ int	@ tmp222, tmp222
 762              	@ armwave.c:155:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 155:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 763              		.loc 1 155 55 view .LVU193
 764 0318 08E09DE5 		ldr	lr, [sp, #8]	@ _20, %sfp
 765              	@ armwave.c:154:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 154:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 766              		.loc 1 154 55 view .LVU194
 767 031c 04909DE5 		ldr	r9, [sp, #4]	@ _17, %sfp
 768              	@ armwave.c:167:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 167:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 769              		.loc 1 167 40 view .LVU195
 770 0320 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, _35
 771              	@ armwave.c:168:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 168:armwave.c     ****                     xx = (nsub >> 8) / 2;
 772              		.loc 1 168 46 view .LVU196
 773 0324 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp223, tmp222
 774              	@ armwave.c:155:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 155:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 775              		.loc 1 155 55 view .LVU197
 776 0328 900E0EE0 		mul	lr, r0, lr	@ tmp211, value, _20
 777              	@ armwave.c:156:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 156:armwave.c     **** 
 778              		.loc 1 156 24 view .LVU198
 779 032c 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp207,
 780              	.LVL44:
 781              	@ armwave.c:154:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 154:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 782              		.loc 1 154 55 view .LVU199
 783 0330 900900E0 		mul	r0, r0, r9	@ tmp217, value, _17
 784              	.LVL45:
 785              	@ armwave.c:160:                     b = MIN(bb, 255);
 160:armwave.c     **** 
 786              		.loc 1 160 25 view .LVU200
 787 0334 FF005CE3 		cmp	ip, #255	@ bb,
 788              	@ armwave.c:167:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 167:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 789              		.loc 1 167 40 view .LVU201
 790 0338 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp221, tmp220, _37
 791              	@ armwave.c:168:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 168:armwave.c     ****                     xx = (nsub >> 8) / 2;
 792              		.loc 1 168 46 view .LVU202
 793 033c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp224, tmp223, _37
 794              	@ armwave.c:155:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 155:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 795              		.loc 1 155 24 view .LVU203
 796 0340 4EE4A0E1 		asr	lr, lr, #8	@ gg, tmp211,
 797              	.LVL46:
 798              	@ armwave.c:160:                     b = MIN(bb, 255);
 160:armwave.c     **** 
 799              		.loc 1 160 25 view .LVU204
 800 0344 FFC0A0A3 		movge	ip, #255	@ bb,
 801              	.LVL47:
 802              	@ armwave.c:159:                     g = MIN(gg, 255);
 159:armwave.c     ****                     b = MIN(bb, 255);
 803              		.loc 1 159 25 view .LVU205
 804 0348 FF005EE3 		cmp	lr, #255	@ gg,
 805 034c FFE0A0A3 		movge	lr, #255	@ gg,
 806              	.LVL48:
 807              	@ armwave.c:154:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 154:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 808              		.loc 1 154 24 view .LVU206
 809 0350 4004A0E1 		asr	r0, r0, #8	@ rr, tmp217,
 810              	.LVL49:
 811              	@ armwave.c:158:                     r = MIN(rr, 255);
 158:armwave.c     ****                     g = MIN(gg, 255);
 812              		.loc 1 158 25 view .LVU207
 813 0354 FF0050E3 		cmp	r0, #255	@ rr,
 814              	@ armwave.c:167:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 167:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 815              		.loc 1 167 24 view .LVU208
 816 0358 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp221
 817              	@ armwave.c:163:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 163:armwave.c     **** 
 818              		.loc 1 163 56 view .LVU209
 819 035c 0EE4A0E1 		lsl	lr, lr, #8	@ tmp212, gg,
 820              	@ armwave.c:158:                     r = MIN(rr, 255);
 158:armwave.c     ****                     g = MIN(gg, 255);
 821              		.loc 1 158 25 view .LVU210
 822 0360 FF00A0A3 		movge	r0, #255	@ rr,
 823              	.LVL50:
 824              	@ armwave.c:163:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 163:armwave.c     **** 
 825              		.loc 1 163 44 view .LVU211
 826 0364 0CC8A0E1 		lsl	ip, ip, #16	@ tmp208, bb,
 827 0368 FFC80CE2 		and	ip, ip, #16711680	@ tmp209, tmp208,
 828              	@ armwave.c:163:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 163:armwave.c     **** 
 829              		.loc 1 163 56 view .LVU212
 830 036c 7EE0FFE6 		uxth	lr, lr	@ tmp213, tmp212
 831              	@ armwave.c:163:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 163:armwave.c     **** 
 832              		.loc 1 163 62 view .LVU213
 833 0370 7000EFE6 		uxtb	r0, r0	@ rr, rr
 834              	@ armwave.c:169:                     xx = (nsub >> 8) / 2;
 169:armwave.c     **** 
 835              		.loc 1 169 32 view .LVU214
 836 0374 4884A0E1 		asr	r8, r8, #8	@ tmp225, _142,
 837              	@ armwave.c:167:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 167:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 838              		.loc 1 167 24 view .LVU215
 839 0378 037ACDED 		vstr.32	s15, [sp, #12]	@ int	@ yy, %sfp
 840              	@ armwave.c:168:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 168:armwave.c     ****                     xx = (nsub >> 8) / 2;
 841              		.loc 1 168 24 view .LVU216
 842 037c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp224
 843              	@ armwave.c:163:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 163:armwave.c     **** 
 844              		.loc 1 163 51 view .LVU217
 845 0380 0EE08CE1 		orr	lr, ip, lr	@ tmp215, tmp209, tmp213
 846              	@ armwave.c:163:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 163:armwave.c     **** 
 847              		.loc 1 163 62 view .LVU218
 848 0384 00E08EE1 		orr	lr, lr, r0	@ tmp219, tmp215, rr
 849              	@ armwave.c:171:                     for(y = yy; y < ye; y++) {
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 850              		.loc 1 171 21 view .LVU219
 851 0388 0C009DE5 		ldr	r0, [sp, #12]	@ yy, %sfp
 852              	@ armwave.c:169:                     xx = (nsub >> 8) / 2;
 169:armwave.c     **** 
 853              		.loc 1 169 38 view .LVU220
 854 038c A88F88E0 		add	r8, r8, r8, lsr #31	@ tmp227, tmp225, tmp225,
 855              	@ armwave.c:163:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 163:armwave.c     **** 
 856              		.loc 1 163 26 view .LVU221
 857 0390 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp219,
 858              	.LVL51:
 166:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 859              		.loc 1 166 21 is_stmt 1 view .LVU222
 167:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 860              		.loc 1 167 21 view .LVU223
 168:armwave.c     ****                     xx = (nsub >> 8) / 2;
 861              		.loc 1 168 21 view .LVU224
 862              	@ armwave.c:169:                     xx = (nsub >> 8) / 2;
 169:armwave.c     **** 
 863              		.loc 1 169 38 is_stmt 0 view .LVU225
 864 0394 C880A0E1 		asr	r8, r8, #1	@ xx, tmp227,
 865              	@ armwave.c:168:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 168:armwave.c     ****                     xx = (nsub >> 8) / 2;
 866              		.loc 1 168 24 view .LVU226
 867 0398 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 868              	.LVL52:
 169:armwave.c     **** 
 869              		.loc 1 169 21 is_stmt 1 view .LVU227
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 870              		.loc 1 171 21 view .LVU228
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 171 21 is_stmt 0 view .LVU229
 872 039c 090050E1 		cmp	r0, r9	@ yy, ye
 873 03a0 CFFFFF2A 		bcs	.L27		@,
 874              	.LVL53:
 875              	.L28:
 172:armwave.c     ****                         *(out_buffer_base + offset) = word;
 876              		.loc 1 172 25 is_stmt 1 discriminator 3 view .LVU230
 173:armwave.c     ****                         painted++;
 877              		.loc 1 173 25 discriminator 3 view .LVU231
 878              	@ armwave.c:172:                         offset = (xx + (y * g_armwave_state.target_width)); 
 172:armwave.c     ****                         *(out_buffer_base + offset) = word;
 879              		.loc 1 172 43 is_stmt 0 discriminator 3 view .LVU232
 880 03a4 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 881              	@ armwave.c:173:                         *(out_buffer_base + offset) = word;
 173:armwave.c     ****                         painted++;
 882              		.loc 1 173 43 discriminator 3 view .LVU233
 883 03a8 9C802CE0 		mla	ip, ip, r0, r8	@ tmp232, g_armwave_state.target_width, y, xx
 884              	.LVL54:
 885              	@ armwave.c:171:                     for(y = yy; y < ye; y++) {
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 886              		.loc 1 171 42 discriminator 3 view .LVU234
 887 03ac 010080E2 		add	r0, r0, #1	@ y, y,
 888              	.LVL55:
 889              	@ armwave.c:171:                     for(y = yy; y < ye; y++) {
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 890              		.loc 1 171 21 discriminator 3 view .LVU235
 891 03b0 000059E1 		cmp	r9, r0	@ ye, y
 892              	@ armwave.c:173:                         *(out_buffer_base + offset) = word;
 173:armwave.c     ****                         painted++;
 893              		.loc 1 173 53 discriminator 3 view .LVU236
 894 03b4 0CE187E7 		str	lr, [r7, ip, lsl #2]	@ word, *_48
 174:armwave.c     ****                     }
 895              		.loc 1 174 25 is_stmt 1 discriminator 3 view .LVU237
 896              	.LVL56:
 897              	@ armwave.c:171:                     for(y = yy; y < ye; y++) {
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 898              		.loc 1 171 21 is_stmt 0 discriminator 3 view .LVU238
 899 03b8 F9FFFF1A 		bne	.L28		@,
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 900              		.loc 1 171 21 discriminator 3 view .LVU239
 901 03bc 0C009DE5 		ldr	r0, [sp, #12]	@ yy, %sfp
 902              	.LVL57:
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 903              		.loc 1 171 21 discriminator 3 view .LVU240
 904 03c0 009049E0 		sub	r9, r9, r0	@ tmp233, ye, yy
 905              	.LVL58:
 171:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 906              		.loc 1 171 21 discriminator 3 view .LVU241
 907 03c4 091081E0 		add	r1, r1, r9	@ painted, painted, tmp233
 908 03c8 C5FFFFEA 		b	.L27		@
 909              	.LVL59:
 910              	.L23:
 911              	@ armwave.c:182: }
 912              		.loc 1 182 1 view .LVU242
 913 03cc 14D08DE2 		add	sp, sp, #20	@,,
 914              		.cfi_remember_state
 915              		.cfi_def_cfa_offset 36
 916              		@ sp needed	@
 917 03d0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 918              	.LVL60:
 919              	.L31:
 920              		.cfi_restore_state
 921              	@ armwave.c:120:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 120:armwave.c     ****     // uint32_t ysub;
 922              		.loc 1 120 46 view .LVU243
 923 03d4 0010A0E3 		mov	r1, #0	@ painted,
 924 03d8 B9FFFFEA 		b	.L25		@
 925              	.L44:
 926              		.align	2
 927              	.L43:
 928 03dc 00000000 		.word	g_armwave_state
 929 03e0 78000000 		.word	.LC3
 930 03e4 90000000 		.word	.LC4
 931 03e8 C0000000 		.word	.LC5
 932 03ec C8000000 		.word	.LC6
 933              		.cfi_endproc
 934              	.LFE60:
 936              		.global	__aeabi_idiv
 937              		.align	2
 938              		.global	armwave_generate
 939              		.syntax unified
 940              		.arm
 941              		.fpu vfp
 943              	armwave_generate:
 944              	.LFB61:
 183:armwave.c     **** 
 184:armwave.c     **** /*
 185:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 186:armwave.c     ****  */
 187:armwave.c     **** void armwave_generate()
 188:armwave.c     **** {
 945              		.loc 1 188 1 is_stmt 1 view -0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 189:armwave.c     ****     uint32_t yy;
 949              		.loc 1 189 5 view .LVU245
 190:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 950              		.loc 1 190 5 view .LVU246
 951              	.LVL61:
 191:armwave.c     **** 
 192:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 952              		.loc 1 192 5 view .LVU247
 953              	@ armwave.c:188: {
 188:armwave.c     ****     uint32_t yy;
 954              		.loc 1 188 1 is_stmt 0 view .LVU248
 955 03f0 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 956              		.cfi_def_cfa_offset 20
 957              		.cfi_offset 4, -20
 958              		.cfi_offset 5, -16
 959              		.cfi_offset 6, -12
 960              		.cfi_offset 7, -8
 961              		.cfi_offset 14, -4
 962              	@ armwave.c:192:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 963              		.loc 1 192 5 view .LVU249
 964 03f4 0010A0E3 		mov	r1, #0	@,
 965              	@ armwave.c:192:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 966              		.loc 1 192 58 view .LVU250
 967 03f8 84509FE5 		ldr	r5, .L53	@ tmp154,
 968              	@ armwave.c:188: {
 188:armwave.c     ****     uint32_t yy;
 969              		.loc 1 188 1 view .LVU251
 970 03fc 0CD04DE2 		sub	sp, sp, #12	@,,
 971              		.cfi_def_cfa_offset 32
 972              	@ armwave.c:192:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 973              		.loc 1 192 5 view .LVU252
 974 0400 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 975 0404 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 976 0408 FEFFFFEB 		bl	memset		@
 977              	.LVL62:
 193:armwave.c     **** 
 194:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 978              		.loc 1 194 5 is_stmt 1 view .LVU253
 979              	@ armwave.c:194:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 980              		.loc 1 194 68 is_stmt 0 view .LVU254
 981 040c 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 982              	@ armwave.c:194:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 983              		.loc 1 194 51 view .LVU255
 984 0410 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 985 0414 0610A0E1 		mov	r1, r6	@, _13
 986 0418 FEFFFFEB 		bl	__aeabi_idiv		@
 987              	.LVL63:
 988              	@ armwave.c:194:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 989              		.loc 1 194 5 view .LVU256
 990 041c 000050E3 		cmp	r0, #0	@,
 991 0420 1500000A 		beq	.L45		@,
 992              	@ armwave.c:196:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 195:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 196:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 993              		.loc 1 196 9 view .LVU257
 994 0424 5C709FE5 		ldr	r7, .L53+4	@ tmp155,
 995              	@ armwave.c:194:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 194:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 996              		.loc 1 194 12 view .LVU258
 997 0428 0040A0E3 		mov	r4, #0	@ yy,
 998              	.LVL64:
 999              	.L47:
 1000              		.loc 1 196 9 is_stmt 1 discriminator 3 view .LVU259
 1001 042c 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 1002              	@ armwave.c:198:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 197:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 198:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1003              		.loc 1 198 48 is_stmt 0 discriminator 3 view .LVU260
 1004 0430 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1005              	@ armwave.c:196:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 196:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1006              		.loc 1 196 9 discriminator 3 view .LVU261
 1007 0434 0630A0E1 		mov	r3, r6	@, _13
 1008 0438 0120A0E1 		mov	r2, r1	@, _5
 1009              	@ armwave.c:198:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1010              		.loc 1 198 48 discriminator 3 view .LVU262
 1011 043c 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 1012              	@ armwave.c:196:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 196:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1013              		.loc 1 196 9 discriminator 3 view .LVU263
 1014 0440 0700A0E1 		mov	r0, r7	@, tmp155
 1015 0444 0410A0E1 		mov	r1, r4	@, yy
 1016 0448 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 1017 044c 00C08DE5 		str	ip, [sp]	@ tmp145,
 1018 0450 FEFFFFEB 		bl	printf		@
 1019              	.LVL65:
 199:armwave.c     **** 
 200:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1020              		.loc 1 200 9 is_stmt 1 discriminator 3 view .LVU264
 1021              	@ armwave.c:200:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1022              		.loc 1 200 62 is_stmt 0 discriminator 3 view .LVU265
 1023 0454 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 1024              	@ armwave.c:200:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1025              		.loc 1 200 9 discriminator 3 view .LVU266
 1026 0458 940100E0 		mul	r0, r4, r1	@, yy,
 1027 045c FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1028              	.LVL66:
 201:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1029              		.loc 1 201 9 is_stmt 1 discriminator 3 view .LVU267
 202:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1030              		.loc 1 202 9 discriminator 3 view .LVU268
 1031              	@ armwave.c:194:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 194:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1032              		.loc 1 194 68 is_stmt 0 discriminator 3 view .LVU269
 1033 0460 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1034              	@ armwave.c:194:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 194:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1035              		.loc 1 194 51 discriminator 3 view .LVU270
 1036 0464 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1037 0468 0610A0E1 		mov	r1, r6	@, _13
 1038 046c FEFFFFEB 		bl	__aeabi_idiv		@
 1039              	.LVL67:
 1040              	@ armwave.c:194:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 194:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1041              		.loc 1 194 86 discriminator 3 view .LVU271
 1042 0470 014084E2 		add	r4, r4, #1	@ yy, yy,
 1043              	.LVL68:
 1044              	@ armwave.c:194:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 194:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1045              		.loc 1 194 5 discriminator 3 view .LVU272
 1046 0474 040050E1 		cmp	r0, r4	@, yy
 1047 0478 EBFFFF8A 		bhi	.L47		@,
 1048              	.LVL69:
 1049              	.L45:
 1050              	@ armwave.c:211: }
 203:armwave.c     ****     }
 204:armwave.c     **** 
 205:armwave.c     ****     /*
 206:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 207:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 208:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 209:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 210:armwave.c     ****     */
 211:armwave.c     **** }
 1051              		.loc 1 211 1 view .LVU273
 1052 047c 0CD08DE2 		add	sp, sp, #12	@,,
 1053              		.cfi_def_cfa_offset 20
 1054              		@ sp needed	@
 1055 0480 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1056              	.L54:
 1057              		.align	2
 1058              	.L53:
 1059 0484 00000000 		.word	g_armwave_state
 1060 0488 E4000000 		.word	.LC7
 1061              		.cfi_endproc
 1062              	.LFE61:
 1064              		.align	2
 1065              		.global	armwave_setup_render
 1066              		.syntax unified
 1067              		.arm
 1068              		.fpu vfp
 1070              	armwave_setup_render:
 1071              	.LVL70:
 1072              	.LFB62:
 212:armwave.c     **** 
 213:armwave.c     **** /*
 214:armwave.c     ****  * Setup the renderer with passed parameters.
 215:armwave.c     ****  */
 216:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 217:armwave.c     **** {
 1073              		.loc 1 217 1 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ args = 12, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 218:armwave.c     ****     uint32_t length, xx;
 1077              		.loc 1 218 5 view .LVU275
 219:armwave.c     ****     float points_per_pixel;
 1078              		.loc 1 219 5 view .LVU276
 220:armwave.c     **** 
 221:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1079              		.loc 1 221 5 view .LVU277
 1080              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1081              		.loc 1 217 1 is_stmt 0 view .LVU278
 1082 048c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1083              		.cfi_def_cfa_offset 28
 1084              		.cfi_offset 4, -28
 1085              		.cfi_offset 5, -24
 1086              		.cfi_offset 6, -20
 1087              		.cfi_offset 7, -16
 1088              		.cfi_offset 8, -12
 1089              		.cfi_offset 9, -8
 1090              		.cfi_offset 14, -4
 1091 0490 14D04DE2 		sub	sp, sp, #20	@,,
 1092              		.cfi_def_cfa_offset 48
 1093              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1094              		.loc 1 217 1 view .LVU279
 1095 0494 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1096 0498 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1097 049c 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1098 04a0 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1099              	@ armwave.c:221:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1100              		.loc 1 221 5 view .LVU280
 1101 04a4 00308DE5 		str	r3, [sp]	@ wave_stride,
 1102              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1103              		.loc 1 217 1 view .LVU281
 1104 04a8 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1105 04ac 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1106              	@ armwave.c:221:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1107              		.loc 1 221 5 view .LVU282
 1108 04b0 F460CDE1 		strd	r6, [sp, #4]	@,,
 1109 04b4 0230A0E1 		mov	r3, r2	@, waves_max
 1110              	.LVL71:
 1111              		.loc 1 221 5 view .LVU283
 1112 04b8 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1113 04bc 0120A0E1 		mov	r2, r1	@, end_point
 1114              	.LVL72:
 1115              		.loc 1 221 5 view .LVU284
 1116 04c0 0010A0E1 		mov	r1, r0	@, start_point
 1117              	.LVL73:
 1118              		.loc 1 221 5 view .LVU285
 1119 04c4 8C019FE5 		ldr	r0, .L65+12	@,
 1120              	.LVL74:
 1121              		.loc 1 221 5 view .LVU286
 1122 04c8 FEFFFFEB 		bl	printf		@
 1123              	.LVL75:
 222:armwave.c     **** 
 223:armwave.c     ****     // TODO these asserts should instead raise PyExc
 224:armwave.c     ****     assert(start_point < end_point);
 1124              		.loc 1 224 5 is_stmt 1 view .LVU287
 1125 04cc 050054E1 		cmp	r4, r5	@ start_point, end_point
 1126 04d0 5100002A 		bcs	.L63		@,
 225:armwave.c     **** 
 226:armwave.c     ****     /*
 227:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 228:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 229:armwave.c     ****     if(target_height == 256) {
 230:armwave.c     ****         g_armwave_state.row_shift = 8;
 231:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 232:armwave.c     ****     } else if(target_height == 512) {
 233:armwave.c     ****         g_armwave_state.row_shift = 9;
 234:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 235:armwave.c     ****     } else if(target_height == 1024) {
 236:armwave.c     ****         g_armwave_state.row_shift = 10;
 237:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 238:armwave.c     ****     } else if(target_height == 2048) {
 239:armwave.c     ****         g_armwave_state.row_shift = 11;
 240:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 241:armwave.c     ****     }
 242:armwave.c     ****     */
 243:armwave.c     **** 
 244:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 245:armwave.c     ****     g_armwave_state.xstride = target_height;
 1127              		.loc 1 245 5 view .LVU288
 1128              	@ armwave.c:256:     g_armwave_state.wave_length = end_point - start_point;
 246:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 247:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 248:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 249:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 250:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 251:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 252:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 253:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 254:armwave.c     ****     g_armwave_state.target_width = target_width;
 255:armwave.c     ****     g_armwave_state.target_height = target_height;
 256:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1129              		.loc 1 256 45 is_stmt 0 view .LVU289
 1130 04d4 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1131              	.LVL76:
 1132              	@ armwave.c:260:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 257:armwave.c     **** 
 258:armwave.c     ****     // Calculate compound scaler
 259:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 260:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1133              		.loc 1 260 48 view .LVU290
 1134 04d8 5B5A9FED 		vldr.32	s10, .L65	@ tmp187,
 1135 04dc 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1136              	@ armwave.c:246:     g_armwave_state.vscale_frac = target_height / 255.0f;
 246:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1137              		.loc 1 246 49 view .LVU291
 1138 04e0 5A7A9FED 		vldr.32	s14, .L65+4	@ tmp165,
 1139              	@ armwave.c:260:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1140              		.loc 1 260 81 view .LVU292
 1141 04e4 5A6A9FED 		vldr.32	s12, .L65+8	@ tmp191,
 1142              	@ armwave.c:253:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 253:armwave.c     ****     g_armwave_state.target_width = target_width;
 1143              		.loc 1 253 90 view .LVU293
 1144 04e8 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1145              	@ armwave.c:260:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1146              		.loc 1 260 48 view .LVU294
 1147 04ec E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1148              	@ armwave.c:246:     g_armwave_state.vscale_frac = target_height / 255.0f;
 246:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1149              		.loc 1 246 49 view .LVU295
 1150 04f0 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1151              	@ armwave.c:245:     g_armwave_state.xstride = target_height;
 245:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1152              		.loc 1 245 29 view .LVU296
 1153 04f4 60419FE5 		ldr	r4, .L65+16	@ tmp222,
 1154              	.LVL77:
 1155              	@ armwave.c:251:     g_armwave_state.size = target_height * target_width;
 251:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1156              		.loc 1 251 42 view .LVU297
 1157 04f8 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1158              	@ armwave.c:246:     g_armwave_state.vscale_frac = target_height / 255.0f;
 246:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1159              		.loc 1 246 49 view .LVU298
 1160 04fc 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1161              	@ armwave.c:253:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 253:armwave.c     ****     g_armwave_state.target_width = target_width;
 1162              		.loc 1 253 95 view .LVU299
 1163 0500 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1164              	@ armwave.c:262:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 261:armwave.c     **** 
 262:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1165              		.loc 1 262 5 view .LVU300
 1166 0504 0128A0E3 		mov	r2, #65536	@ tmp194,
 1167              	@ armwave.c:260:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 260:armwave.c     **** 
 1168              		.loc 1 260 48 view .LVU301
 1169 0508 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1170              	@ armwave.c:262:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1171              		.loc 1 262 5 view .LVU302
 1172 050c 04508DE5 		str	r5, [sp, #4]	@ _13,
 1173 0510 00608DE5 		str	r6, [sp]	@ target_width,
 1174              	@ armwave.c:253:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 253:armwave.c     ****     g_armwave_state.target_width = target_width;
 1175              		.loc 1 253 95 view .LVU303
 1176 0514 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1177              	@ armwave.c:245:     g_armwave_state.xstride = target_height;
 245:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1178              		.loc 1 245 29 view .LVU304
 1179 0518 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 246:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1180              		.loc 1 246 5 is_stmt 1 view .LVU305
 1181              	@ armwave.c:248:     g_armwave_state.wave_stride = wave_stride;
 248:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1182              		.loc 1 248 33 is_stmt 0 view .LVU306
 1183 051c 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1184              	@ armwave.c:249:     g_armwave_state.waves_max = waves_max;
 249:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1185              		.loc 1 249 31 view .LVU307
 1186 0520 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1187              	@ armwave.c:250:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 250:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1188              		.loc 1 250 27 view .LVU308
 1189 0524 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1190              	@ armwave.c:255:     g_armwave_state.target_height = target_height;
 255:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1191              		.loc 1 255 35 view .LVU309
 1192 0528 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1193              	@ armwave.c:262:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1194              		.loc 1 262 5 view .LVU310
 1195 052c 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1196              	@ armwave.c:252:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 252:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1197              		.loc 1 252 37 view .LVU311
 1198 0530 022CA0E3 		mov	r2, #512	@ tmp175,
 1199              	@ armwave.c:251:     g_armwave_state.size = target_height * target_width;
 251:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1200              		.loc 1 251 26 view .LVU312
 1201 0534 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1202              	@ armwave.c:252:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 252:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1203              		.loc 1 252 37 view .LVU313
 1204 0538 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1205              	@ armwave.c:262:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1206              		.loc 1 262 5 view .LVU314
 1207 053c 0310A0E1 		mov	r1, r3	@, tmp180
 1208              	@ armwave.c:253:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 253:armwave.c     ****     g_armwave_state.target_width = target_width;
 1209              		.loc 1 253 34 view .LVU315
 1210 0540 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1211              	@ armwave.c:246:     g_armwave_state.vscale_frac = target_height / 255.0f;
 246:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1212              		.loc 1 246 49 view .LVU316
 1213 0544 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1214              	@ armwave.c:260:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 260:armwave.c     **** 
 1215              		.loc 1 260 40 view .LVU317
 1216 0548 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1217              	@ armwave.c:256:     g_armwave_state.wave_length = end_point - start_point;
 256:armwave.c     **** 
 1218              		.loc 1 256 33 view .LVU318
 1219 054c 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1220              	@ armwave.c:262:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1221              		.loc 1 262 5 view .LVU319
 1222 0550 08019FE5 		ldr	r0, .L65+20	@,
 1223              	@ armwave.c:260:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 260:armwave.c     **** 
 1224              		.loc 1 260 40 view .LVU320
 1225 0554 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1226 0558 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1227              	@ armwave.c:247:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 247:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1228              		.loc 1 247 30 view .LVU321
 1229 055c E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1230              	@ armwave.c:246:     g_armwave_state.vscale_frac = target_height / 255.0f;
 246:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1231              		.loc 1 246 33 view .LVU322
 1232 0560 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 247:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1233              		.loc 1 247 5 is_stmt 1 view .LVU323
 1234              	@ armwave.c:260:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 260:armwave.c     **** 
 1235              		.loc 1 260 81 is_stmt 0 view .LVU324
 1236 0564 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1237              	@ armwave.c:247:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 247:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1238              		.loc 1 247 30 view .LVU325
 1239 0568 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 248:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1240              		.loc 1 248 5 is_stmt 1 view .LVU326
 249:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1241              		.loc 1 249 5 view .LVU327
 250:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1242              		.loc 1 250 5 view .LVU328
 251:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1243              		.loc 1 251 5 view .LVU329
 252:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1244              		.loc 1 252 5 view .LVU330
 253:armwave.c     ****     g_armwave_state.target_width = target_width;
 1245              		.loc 1 253 5 view .LVU331
 254:armwave.c     ****     g_armwave_state.target_height = target_height;
 1246              		.loc 1 254 5 view .LVU332
 255:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1247              		.loc 1 255 5 view .LVU333
 256:armwave.c     **** 
 1248              		.loc 1 256 5 view .LVU334
 259:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1249              		.loc 1 259 5 view .LVU335
 1250              	@ armwave.c:259:     g_armwave_state.cmp_x_bitdepth_scale = \
 259:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1251              		.loc 1 259 42 is_stmt 0 view .LVU336
 1252 056c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1253 0570 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1254              	@ armwave.c:262:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1255              		.loc 1 262 5 view .LVU337
 1256 0574 903A17EE 		vmov	r3, s15	@ int	@, _20
 1257              	@ armwave.c:259:     g_armwave_state.cmp_x_bitdepth_scale = \
 259:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1258              		.loc 1 259 42 view .LVU338
 1259 0578 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1260              		.loc 1 262 5 is_stmt 1 view .LVU339
 1261 057c 0C20A0E1 		mov	r2, ip	@, tmp3
 1262 0580 FEFFFFEB 		bl	printf		@
 1263              	.LVL78:
 263:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 264:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 265:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 266:armwave.c     **** 
 267:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 268:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 269:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 270:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1264              		.loc 1 270 5 view .LVU340
 1265              	@ armwave.c:272:     if(g_armwave_state.ch1_buffer != NULL)
 271:armwave.c     **** 
 272:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1266              		.loc 1 272 23 is_stmt 0 view .LVU341
 1267 0584 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1268              	@ armwave.c:270:     g_armwave_state.slice_height = 64; // 64;  
 270:armwave.c     **** 
 1269              		.loc 1 270 34 view .LVU342
 1270 0588 4030A0E3 		mov	r3, #64	@ tmp196,
 1271              	@ armwave.c:272:     if(g_armwave_state.ch1_buffer != NULL)
 1272              		.loc 1 272 7 view .LVU343
 1273 058c 000050E3 		cmp	r0, #0	@ _21,
 1274              	@ armwave.c:270:     g_armwave_state.slice_height = 64; // 64;  
 270:armwave.c     **** 
 1275              		.loc 1 270 34 view .LVU344
 1276 0590 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1277              		.loc 1 272 5 is_stmt 1 view .LVU345
 1278              	@ armwave.c:272:     if(g_armwave_state.ch1_buffer != NULL)
 1279              		.loc 1 272 7 is_stmt 0 view .LVU346
 1280 0594 0000000A 		beq	.L57		@,
 273:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1281              		.loc 1 273 9 is_stmt 1 view .LVU347
 1282 0598 FEFFFFEB 		bl	free		@
 1283              	.LVL79:
 1284              	.L57:
 274:armwave.c     **** 
 275:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1285              		.loc 1 275 5 view .LVU348
 1286              	@ armwave.c:275:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1287              		.loc 1 275 56 is_stmt 0 view .LVU349
 1288 059c 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1289              	.LVL80:
 1290              	@ armwave.c:275:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1291              		.loc 1 275 34 view .LVU350
 1292 05a0 0110A0E3 		mov	r1, #1	@,
 1293 05a4 0800A0E1 		mov	r0, r8	@, _22
 1294 05a8 FEFFFFEB 		bl	calloc		@
 1295              	.LVL81:
 1296              	@ armwave.c:277:     if(g_armwave_state.ch1_buffer == NULL) {
 276:armwave.c     **** 
 277:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1297              		.loc 1 277 7 view .LVU351
 1298 05ac 000050E3 		cmp	r0, #0	@ tmp199,
 1299              	@ armwave.c:275:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 275:armwave.c     **** 
 1300              		.loc 1 275 34 view .LVU352
 1301 05b0 0070A0E1 		mov	r7, r0	@ tmp199,
 1302              	@ armwave.c:275:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 275:armwave.c     **** 
 1303              		.loc 1 275 32 view .LVU353
 1304 05b4 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1305              		.loc 1 277 5 is_stmt 1 view .LVU354
 1306              	@ armwave.c:277:     if(g_armwave_state.ch1_buffer == NULL) {
 1307              		.loc 1 277 7 is_stmt 0 view .LVU355
 1308 05b8 1C00000A 		beq	.L64		@,
 278:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 279:armwave.c     ****         exit(-1);
 280:armwave.c     ****     }
 281:armwave.c     **** 
 282:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 283:armwave.c     ****     length = end_point - start_point;
 1309              		.loc 1 283 5 is_stmt 1 view .LVU356
 1310              	.LVL82:
 284:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1311              		.loc 1 284 5 view .LVU357
 285:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1312              		.loc 1 285 5 view .LVU358
 1313              	@ armwave.c:284:     points_per_pixel = length / ((float)(target_width));
 284:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1314              		.loc 1 284 31 is_stmt 0 view .LVU359
 1315 05bc 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1316              	@ armwave.c:284:     points_per_pixel = length / ((float)(target_width));
 284:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1317              		.loc 1 284 34 view .LVU360
 1318 05c0 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1319              	@ armwave.c:285:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1320              		.loc 1 285 60 view .LVU361
 1321 05c4 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1322              	@ armwave.c:299:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 286:armwave.c     **** 
 287:armwave.c     ****     /*
 288:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 289:armwave.c     **** 
 290:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 291:armwave.c     **** 
 292:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 293:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 294:armwave.c     **** 
 295:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 296:armwave.c     ****     }
 297:armwave.c     ****     */
 298:armwave.c     **** 
 299:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1323              		.loc 1 299 34 view .LVU362
 1324 05c8 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1325              	@ armwave.c:284:     points_per_pixel = length / ((float)(target_width));
 284:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1326              		.loc 1 284 31 view .LVU363
 1327 05cc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1328              	@ armwave.c:284:     points_per_pixel = length / ((float)(target_width));
 284:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1329              		.loc 1 284 34 view .LVU364
 1330 05d0 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1331              	@ armwave.c:285:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 285:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1332              		.loc 1 285 60 view .LVU365
 1333 05d4 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1334              	@ armwave.c:299:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1335              		.loc 1 299 34 view .LVU366
 1336 05d8 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1337              	@ armwave.c:284:     points_per_pixel = length / ((float)(target_width));
 284:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1338              		.loc 1 284 22 view .LVU367
 1339 05dc 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1340              	.LVL83:
 1341              	@ armwave.c:285:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 285:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1342              		.loc 1 285 60 view .LVU368
 1343 05e0 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1344              	@ armwave.c:285:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 285:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1345              		.loc 1 285 41 view .LVU369
 1346 05e4 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1347 05e8 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1348              		.loc 1 299 5 is_stmt 1 view .LVU370
 1349              	@ armwave.c:299:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1350              		.loc 1 299 34 is_stmt 0 view .LVU371
 1351 05ec FEFFFFEB 		bl	malloc		@
 1352              	.LVL84:
 1353              	@ armwave.c:301:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 300:armwave.c     **** 
 301:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1354              		.loc 1 301 5 view .LVU372
 1355 05f0 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1356 05f4 0710A0E1 		mov	r1, r7	@, tmp199
 1357 05f8 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1358 05fc 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1359              	@ armwave.c:299:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 299:armwave.c     **** 
 1360              		.loc 1 299 34 view .LVU373
 1361 0600 00C0A0E1 		mov	ip, r0	@ tmp215,
 1362              	@ armwave.c:301:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1363              		.loc 1 301 5 view .LVU374
 1364 0604 0030A0E1 		mov	r3, r0	@, tmp215
 1365              	@ armwave.c:299:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 299:armwave.c     **** 
 1366              		.loc 1 299 32 view .LVU375
 1367 0608 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1368              		.loc 1 301 5 is_stmt 1 view .LVU376
 1369 060c 50009FE5 		ldr	r0, .L65+24	@,
 1370              	@ armwave.c:308: }
 302:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 303:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 304:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 305:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 306:armwave.c     **** 
 307:armwave.c     ****      //malloc_stats();
 308:armwave.c     **** }
 1371              		.loc 1 308 1 is_stmt 0 view .LVU377
 1372 0610 14D08DE2 		add	sp, sp, #20	@,,
 1373              		.cfi_remember_state
 1374              		.cfi_def_cfa_offset 28
 1375              		@ sp needed	@
 1376 0614 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1377              		.cfi_restore 14
 1378              		.cfi_restore 9
 1379              		.cfi_restore 8
 1380              		.cfi_restore 7
 1381              		.cfi_restore 6
 1382              		.cfi_restore 5
 1383              		.cfi_restore 4
 1384              		.cfi_def_cfa_offset 0
 1385              	.LVL85:
 1386              	@ armwave.c:301:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 301:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1387              		.loc 1 301 5 view .LVU378
 1388 0618 FEFFFFEA 		b	printf		@
 1389              	.LVL86:
 1390              	.L63:
 1391              		.cfi_restore_state
 224:armwave.c     **** 
 1392              		.loc 1 224 5 is_stmt 1 discriminator 1 view .LVU379
 1393 061c 44309FE5 		ldr	r3, .L65+28	@,
 1394 0620 E020A0E3 		mov	r2, #224	@,
 1395 0624 40109FE5 		ldr	r1, .L65+32	@,
 1396 0628 40009FE5 		ldr	r0, .L65+36	@,
 1397 062c FEFFFFEB 		bl	__assert_fail		@
 1398              	.LVL87:
 1399              	.L64:
 278:armwave.c     ****         exit(-1);
 1400              		.loc 1 278 9 view .LVU380
 1401 0630 3C309FE5 		ldr	r3, .L65+40	@ tmp202,
 1402 0634 0820A0E1 		mov	r2, r8	@, _22
 1403 0638 38109FE5 		ldr	r1, .L65+44	@,
 1404 063c 000093E5 		ldr	r0, [r3]	@, stderr
 1405 0640 FEFFFFEB 		bl	fprintf		@
 1406              	.LVL88:
 279:armwave.c     ****     }
 1407              		.loc 1 279 9 view .LVU381
 1408 0644 0000E0E3 		mvn	r0, #0	@,
 1409 0648 FEFFFFEB 		bl	exit		@
 1410              	.LVL89:
 1411              	.L66:
 1412              		.align	2
 1413              	.L65:
 1414 064c 0000803F 		.word	1065353216
 1415 0650 00007F43 		.word	1132396544
 1416 0654 00008047 		.word	1199570944
 1417 0658 18010000 		.word	.LC8
 1418 065c 00000000 		.word	g_armwave_state
 1419 0660 68010000 		.word	.LC11
 1420 0664 0C020000 		.word	.LC13
 1421 0668 00000000 		.word	.LANCHOR0
 1422 066c 44010000 		.word	.LC9
 1423 0670 50010000 		.word	.LC10
 1424 0674 00000000 		.word	stderr
 1425 0678 C8010000 		.word	.LC12
 1426              		.cfi_endproc
 1427              	.LFE62:
 1429              		.align	2
 1430              		.global	armwave_set_wave_pointer
 1431              		.syntax unified
 1432              		.arm
 1433              		.fpu vfp
 1435              	armwave_set_wave_pointer:
 1436              	.LVL90:
 1437              	.LFB63:
 309:armwave.c     **** 
 310:armwave.c     **** /*
 311:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 312:armwave.c     ****  * in the future.
 313:armwave.c     ****  */
 314:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 315:armwave.c     **** {
 1438              		.loc 1 315 1 view -0
 1439              		.cfi_startproc
 1440              		@ args = 0, pretend = 0, frame = 0
 1441              		@ frame_needed = 0, uses_anonymous_args = 0
 316:armwave.c     ****     assert(wave_buffer != NULL);
 1442              		.loc 1 316 5 view .LVU383
 1443 067c 000050E3 		cmp	r0, #0	@ wave_buffer
 1444              		.loc 1 316 5 is_stmt 0 view .LVU384
 1445 0680 0200000A 		beq	.L72		@,
 317:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1446              		.loc 1 317 5 is_stmt 1 view .LVU385
 1447              	@ armwave.c:317:     g_armwave_state.wave_buffer = wave_buffer;
 1448              		.loc 1 317 33 is_stmt 0 view .LVU386
 1449 0684 1C309FE5 		ldr	r3, .L73	@ tmp115,
 1450 0688 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1451 068c 1EFF2FE1 		bx	lr	@
 1452              	.L72:
 316:armwave.c     ****     assert(wave_buffer != NULL);
 1453              		.loc 1 316 5 is_stmt 1 discriminator 1 view .LVU387
 1454              	@ armwave.c:315: {
 315:armwave.c     ****     assert(wave_buffer != NULL);
 1455              		.loc 1 315 1 is_stmt 0 discriminator 1 view .LVU388
 1456 0690 10402DE9 		push	{r4, lr}	@
 1457              		.cfi_def_cfa_offset 8
 1458              		.cfi_offset 4, -8
 1459              		.cfi_offset 14, -4
 1460              	@ armwave.c:316:     assert(wave_buffer != NULL);
 316:armwave.c     ****     assert(wave_buffer != NULL);
 1461              		.loc 1 316 5 discriminator 1 view .LVU389
 1462 0694 4F2FA0E3 		mov	r2, #316	@,
 1463 0698 0C309FE5 		ldr	r3, .L73+4	@,
 1464 069c 0C109FE5 		ldr	r1, .L73+8	@,
 1465 06a0 0C009FE5 		ldr	r0, .L73+12	@,
 1466              	.LVL91:
 316:armwave.c     ****     assert(wave_buffer != NULL);
 1467              		.loc 1 316 5 discriminator 1 view .LVU390
 1468 06a4 FEFFFFEB 		bl	__assert_fail		@
 1469              	.LVL92:
 1470              	.L74:
 1471              		.align	2
 1472              	.L73:
 1473 06a8 00000000 		.word	g_armwave_state
 1474 06ac 18000000 		.word	.LANCHOR0+24
 1475 06b0 44010000 		.word	.LC9
 1476 06b4 30020000 		.word	.LC14
 1477              		.cfi_endproc
 1478              	.LFE63:
 1480              		.align	2
 1481              		.global	armwave_set_wave_pointer_as_testbuf
 1482              		.syntax unified
 1483              		.arm
 1484              		.fpu vfp
 1486              	armwave_set_wave_pointer_as_testbuf:
 1487              	.LVL93:
 1488              	.LFB64:
 318:armwave.c     **** }
 319:armwave.c     **** 
 320:armwave.c     **** /*
 321:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 322:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 323:armwave.c     ****  */
 324:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 325:armwave.c     **** {
 1489              		.loc 1 325 1 is_stmt 1 view -0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 0
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
 1493              		@ link register save eliminated.
 326:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1494              		.loc 1 326 5 view .LVU392
 1495              	@ armwave.c:326:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1496              		.loc 1 326 29 is_stmt 0 view .LVU393
 1497 06b8 24309FE5 		ldr	r3, .L78	@ tmp117,
 1498              	@ armwave.c:326:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1499              		.loc 1 326 7 view .LVU394
 1500 06bc 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1501 06c0 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1502 06c4 0400003A 		bcc	.L77		@,
 327:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 328:armwave.c     ****         return;
 329:armwave.c     ****     }
 330:armwave.c     **** 
 331:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1503              		.loc 1 331 5 is_stmt 1 view .LVU395
 1504              	@ armwave.c:331:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1505              		.loc 1 331 111 is_stmt 0 view .LVU396
 1506 06c8 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1507              	@ armwave.c:331:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1508              		.loc 1 331 68 view .LVU397
 1509 06cc 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1510 06d0 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1511              	.LVL94:
 1512              	@ armwave.c:331:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1513              		.loc 1 331 33 view .LVU398
 1514 06d4 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1515              	@ armwave.c:332: }
 332:armwave.c     **** }
 1516              		.loc 1 332 1 view .LVU399
 1517 06d8 1EFF2FE1 		bx	lr	@
 1518              	.LVL95:
 1519              	.L77:
 327:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1520              		.loc 1 327 9 is_stmt 1 view .LVU400
 1521 06dc 04009FE5 		ldr	r0, .L78+4	@,
 1522              	.LVL96:
 327:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1523              		.loc 1 327 9 is_stmt 0 view .LVU401
 1524 06e0 FEFFFFEA 		b	puts		@
 1525              	.LVL97:
 1526              	.L79:
 1527              		.align	2
 1528              	.L78:
 1529 06e4 00000000 		.word	g_armwave_state
 1530 06e8 44020000 		.word	.LC15
 1531              		.cfi_endproc
 1532              	.LFE64:
 1534              		.align	2
 1535              		.global	armwave_set_wave_pointer_u32
 1536              		.syntax unified
 1537              		.arm
 1538              		.fpu vfp
 1540              	armwave_set_wave_pointer_u32:
 1541              	.LVL98:
 1542              	.LFB65:
 333:armwave.c     **** 
 334:armwave.c     **** /*
 335:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 336:armwave.c     ****  * disjointed buffers in the future.
 337:armwave.c     ****  */
 338:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 339:armwave.c     **** {
 1543              		.loc 1 339 1 is_stmt 1 view -0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 340:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1547              		.loc 1 340 5 view .LVU403
 1548 06ec 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1549              		.loc 1 340 5 is_stmt 0 view .LVU404
 1550 06f0 0200000A 		beq	.L85		@,
 341:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1551              		.loc 1 341 5 is_stmt 1 view .LVU405
 1552              	@ armwave.c:341:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1553              		.loc 1 341 33 is_stmt 0 view .LVU406
 1554 06f4 1C309FE5 		ldr	r3, .L86	@ tmp116,
 1555 06f8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1556 06fc 1EFF2FE1 		bx	lr	@
 1557              	.L85:
 340:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1558              		.loc 1 340 5 is_stmt 1 discriminator 1 view .LVU407
 1559              	@ armwave.c:339: {
 339:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1560              		.loc 1 339 1 is_stmt 0 discriminator 1 view .LVU408
 1561 0700 10402DE9 		push	{r4, lr}	@
 1562              		.cfi_def_cfa_offset 8
 1563              		.cfi_offset 4, -8
 1564              		.cfi_offset 14, -4
 1565              	@ armwave.c:340:     assert(wave_buffer_ptr != 0);
 340:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1566              		.loc 1 340 5 discriminator 1 view .LVU409
 1567 0704 552FA0E3 		mov	r2, #340	@,
 1568 0708 0C309FE5 		ldr	r3, .L86+4	@,
 1569 070c 0C109FE5 		ldr	r1, .L86+8	@,
 1570 0710 0C009FE5 		ldr	r0, .L86+12	@,
 1571              	.LVL99:
 340:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1572              		.loc 1 340 5 discriminator 1 view .LVU410
 1573 0714 FEFFFFEB 		bl	__assert_fail		@
 1574              	.LVL100:
 1575              	.L87:
 1576              		.align	2
 1577              	.L86:
 1578 0718 00000000 		.word	g_armwave_state
 1579 071c 34000000 		.word	.LANCHOR0+52
 1580 0720 44010000 		.word	.LC9
 1581 0724 80020000 		.word	.LC16
 1582              		.cfi_endproc
 1583              	.LFE65:
 1585              		.align	2
 1586              		.global	armwave_clear_buffer
 1587              		.syntax unified
 1588              		.arm
 1589              		.fpu vfp
 1591              	armwave_clear_buffer:
 1592              	.LVL101:
 1593              	.LFB66:
 342:armwave.c     **** }
 343:armwave.c     **** 
 344:armwave.c     **** /*
 345:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 346:armwave.c     ****  */
 347:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 348:armwave.c     **** {
 1594              		.loc 1 348 1 is_stmt 1 view -0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 0
 1597              		@ frame_needed = 0, uses_anonymous_args = 0
 1598              		@ link register save eliminated.
 349:armwave.c     ****     // Flags ignored, only one buffer cleared
 350:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1599              		.loc 1 350 5 view .LVU412
 1600              	@ armwave.c:350:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1601              		.loc 1 350 58 is_stmt 0 view .LVU413
 1602 0728 0C309FE5 		ldr	r3, .L89	@ tmp114,
 1603              	@ armwave.c:350:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1604              		.loc 1 350 5 view .LVU414
 1605 072c 0010A0E3 		mov	r1, #0	@,
 1606 0730 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1607 0734 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1608              	.LVL102:
 1609              		.loc 1 350 5 view .LVU415
 1610 0738 FEFFFFEA 		b	memset		@
 1611              	.LVL103:
 1612              	.L90:
 1613              		.align	2
 1614              	.L89:
 1615 073c 00000000 		.word	g_armwave_state
 1616              		.cfi_endproc
 1617              	.LFE66:
 1619              		.align	2
 1620              		.global	armwave_set_channel_colour
 1621              		.syntax unified
 1622              		.arm
 1623              		.fpu vfp
 1625              	armwave_set_channel_colour:
 1626              	.LVL104:
 1627              	.LFB67:
 351:armwave.c     **** }
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 357:armwave.c     **** {
 1628              		.loc 1 357 1 is_stmt 1 view -0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              		@ link register save eliminated.
 358:armwave.c     ****     // Only 1ch supported for now
 359:armwave.c     ****     switch(ch) {
 1633              		.loc 1 359 5 view .LVU417
 1634 0740 010050E3 		cmp	r0, #1	@ ch,
 360:armwave.c     ****         case 1:
 361:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1635              		.loc 1 361 13 view .LVU418
 1636              	@ armwave.c:361:             g_armwave_state.ch1_color.r = r;
 1637              		.loc 1 361 41 is_stmt 0 view .LVU419
 1638 0744 0C009F05 		ldreq	r0, .L93	@ tmp117,
 1639              	.LVL105:
 1640              		.loc 1 361 41 view .LVU420
 1641 0748 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 362:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1642              		.loc 1 362 13 is_stmt 1 view .LVU421
 1643              	@ armwave.c:362:             g_armwave_state.ch1_color.g = g;
 1644              		.loc 1 362 41 is_stmt 0 view .LVU422
 1645 074c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 363:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1646              		.loc 1 363 13 is_stmt 1 view .LVU423
 1647              	@ armwave.c:363:             g_armwave_state.ch1_color.b = b;
 1648              		.loc 1 363 41 is_stmt 0 view .LVU424
 1649 0750 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 364:armwave.c     ****             break;
 1650              		.loc 1 364 13 is_stmt 1 view .LVU425
 1651              	@ armwave.c:366: }
 365:armwave.c     ****     }
 366:armwave.c     **** }
 1652              		.loc 1 366 1 is_stmt 0 view .LVU426
 1653 0754 1EFF2FE1 		bx	lr	@
 1654              	.L94:
 1655              		.align	2
 1656              	.L93:
 1657 0758 00000000 		.word	g_armwave_state
 1658              		.cfi_endproc
 1659              	.LFE67:
 1661              		.align	2
 1662              		.global	armwave_dump_ppm_debug
 1663              		.syntax unified
 1664              		.arm
 1665              		.fpu vfp
 1667              	armwave_dump_ppm_debug:
 1668              	.LVL106:
 1669              	.LFB68:
 367:armwave.c     **** 
 368:armwave.c     **** /*
 369:armwave.c     ****  * Dump a ppm of a buffer to a file.
 370:armwave.c     ****  */
 371:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 372:armwave.c     **** {
 1670              		.loc 1 372 1 is_stmt 1 view -0
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 0
 1673              		@ frame_needed = 0, uses_anonymous_args = 0
 373:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1674              		.loc 1 373 5 view .LVU428
 1675              	@ armwave.c:372: {
 372:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1676              		.loc 1 372 1 is_stmt 0 view .LVU429
 1677 075c 0130A0E1 		mov	r3, r1	@ fn, fn
 1678 0760 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1679              		.cfi_def_cfa_offset 28
 1680              		.cfi_offset 4, -28
 1681              		.cfi_offset 5, -24
 1682              		.cfi_offset 6, -20
 1683              		.cfi_offset 7, -16
 1684              		.cfi_offset 8, -12
 1685              		.cfi_offset 9, -8
 1686              		.cfi_offset 14, -4
 1687 0764 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1688 0768 0CD04DE2 		sub	sp, sp, #12	@,,
 1689              		.cfi_def_cfa_offset 40
 1690              	@ armwave.c:373:     FILE *fp = fopen(fn, "wb");
 1691              		.loc 1 373 16 view .LVU430
 1692 076c C4109FE5 		ldr	r1, .L103	@,
 1693              	.LVL107:
 1694              		.loc 1 373 16 view .LVU431
 1695 0770 0300A0E1 		mov	r0, r3	@, fn
 1696              	.LVL108:
 1697              		.loc 1 373 16 view .LVU432
 1698 0774 FEFFFFEB 		bl	fopen64		@
 1699              	.LVL109:
 1700              	@ armwave.c:380:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 374:armwave.c     ****     uint32_t data;
 375:armwave.c     ****     int xx, yy;
 376:armwave.c     **** 
 377:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 378:armwave.c     **** 
 379:armwave.c     ****     fputs("P3\n", fp);
 380:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1701              		.loc 1 380 5 view .LVU433
 1702 0778 BC609FE5 		ldr	r6, .L103+4	@ tmp150,
 1703              	@ armwave.c:379:     fputs("P3\n", fp);
 379:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1704              		.loc 1 379 5 view .LVU434
 1705 077c 0320A0E3 		mov	r2, #3	@,
 1706 0780 0110A0E3 		mov	r1, #1	@,
 1707              	@ armwave.c:373:     FILE *fp = fopen(fn, "wb");
 373:armwave.c     ****     uint32_t data;
 1708              		.loc 1 373 16 view .LVU435
 1709 0784 0070A0E1 		mov	r7, r0	@ fp,
 1710              	.LVL110:
 374:armwave.c     ****     uint32_t data;
 1711              		.loc 1 374 5 is_stmt 1 view .LVU436
 375:armwave.c     **** 
 1712              		.loc 1 375 5 view .LVU437
 379:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1713              		.loc 1 379 5 view .LVU438
 1714 0788 0030A0E1 		mov	r3, r0	@, fp
 1715 078c AC009FE5 		ldr	r0, .L103+8	@,
 1716              	.LVL111:
 379:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1717              		.loc 1 379 5 is_stmt 0 view .LVU439
 1718 0790 FEFFFFEB 		bl	fwrite		@
 1719              	.LVL112:
 1720              		.loc 1 380 5 is_stmt 1 view .LVU440
 1721 0794 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1722 0798 A4109FE5 		ldr	r1, .L103+12	@,
 1723 079c 0700A0E1 		mov	r0, r7	@, fp
 1724 07a0 FEFFFFEB 		bl	fprintf		@
 1725              	.LVL113:
 381:armwave.c     ****     fputs("255\n", fp);
 1726              		.loc 1 381 5 view .LVU441
 1727 07a4 0420A0E3 		mov	r2, #4	@,
 1728 07a8 0730A0E1 		mov	r3, r7	@, fp
 1729 07ac 0110A0E3 		mov	r1, #1	@,
 1730 07b0 90009FE5 		ldr	r0, .L103+16	@,
 1731 07b4 FEFFFFEB 		bl	fwrite		@
 1732              	.LVL114:
 382:armwave.c     **** 
 383:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1733              		.loc 1 383 5 view .LVU442
 1734              	@ armwave.c:383:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1735              		.loc 1 383 37 is_stmt 0 view .LVU443
 1736 07b8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1737              	@ armwave.c:383:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1738              		.loc 1 383 5 view .LVU444
 1739 07bc 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1740 07c0 180000DA 		ble	.L96		@,
 1741 07c4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1742              	@ armwave.c:388:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 385:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 386:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 387:armwave.c     **** 
 388:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1743              		.loc 1 388 13 view .LVU445
 1744 07c8 7C909FE5 		ldr	r9, .L103+20	@ tmp152,
 1745              	@ armwave.c:383:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 383:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1746              		.loc 1 383 12 view .LVU446
 1747 07cc 0050A0E3 		mov	r5, #0	@ yy,
 1748              	.LVL115:
 1749              	.L97:
 1750              	@ armwave.c:384:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1751              		.loc 1 384 9 view .LVU447
 1752 07d0 000053E3 		cmp	r3, #0	@ _13,
 1753              	@ armwave.c:384:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1754              		.loc 1 384 16 view .LVU448
 1755 07d4 0040A0C3 		movgt	r4, #0	@ xx,
 1756              	@ armwave.c:384:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1757              		.loc 1 384 9 view .LVU449
 1758 07d8 0F0000DA 		ble	.L99		@,
 1759              	.LVL116:
 1760              	.L98:
 385:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1761              		.loc 1 385 13 is_stmt 1 discriminator 3 view .LVU450
 1762              	@ armwave.c:385:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 385:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1763              		.loc 1 385 29 is_stmt 0 discriminator 3 view .LVU451
 1764 07dc 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1765              	@ armwave.c:388:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1766              		.loc 1 388 13 discriminator 3 view .LVU452
 1767 07e0 0910A0E1 		mov	r1, r9	@, tmp152
 1768 07e4 0700A0E1 		mov	r0, r7	@, fp
 1769              	@ armwave.c:385:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 385:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1770              		.loc 1 385 18 discriminator 3 view .LVU453
 1771 07e8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1772              	.LVL117:
 1773              		.loc 1 388 13 is_stmt 1 discriminator 3 view .LVU454
 1774              	@ armwave.c:384:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1775              		.loc 1 384 58 is_stmt 0 discriminator 3 view .LVU455
 1776 07ec 014084E2 		add	r4, r4, #1	@ xx, xx,
 1777              	.LVL118:
 1778              	@ armwave.c:388:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1779              		.loc 1 388 81 discriminator 3 view .LVU456
 1780 07f0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1781              	@ armwave.c:388:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1782              		.loc 1 388 61 discriminator 3 view .LVU457
 1783 07f4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1784              	@ armwave.c:388:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1785              		.loc 1 388 13 discriminator 3 view .LVU458
 1786 07f8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1787 07fc 7330EFE6 		uxtb	r3, r3	@, tmp142
 1788 0800 00C08DE5 		str	ip, [sp]	@ tmp147,
 1789 0804 7220EFE6 		uxtb	r2, r2	@, data
 1790              	.LVL119:
 1791              		.loc 1 388 13 discriminator 3 view .LVU459
 1792 0808 FEFFFFEB 		bl	fprintf		@
 1793              	.LVL120:
 1794              	@ armwave.c:384:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1795              		.loc 1 384 41 discriminator 3 view .LVU460
 1796 080c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1797              	@ armwave.c:384:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1798              		.loc 1 384 9 discriminator 3 view .LVU461
 1799 0810 040053E1 		cmp	r3, r4	@ _13, xx
 1800 0814 F0FFFFCA 		bgt	.L98		@,
 1801 0818 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1802              	.LVL121:
 1803              	.L99:
 1804              	@ armwave.c:383:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 383:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1805              		.loc 1 383 55 discriminator 2 view .LVU462
 1806 081c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1807              	.LVL122:
 1808              	@ armwave.c:383:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 383:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1809              		.loc 1 383 5 discriminator 2 view .LVU463
 1810 0820 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1811 0824 E9FFFFBA 		blt	.L97		@,
 1812              	.LVL123:
 1813              	.L96:
 389:armwave.c     ****         }
 390:armwave.c     ****     }
 391:armwave.c     **** 
 392:armwave.c     ****     fclose(fp);
 1814              		.loc 1 392 5 is_stmt 1 view .LVU464
 1815 0828 0700A0E1 		mov	r0, r7	@, fp
 1816              	@ armwave.c:393: }
 393:armwave.c     **** }
 1817              		.loc 1 393 1 is_stmt 0 view .LVU465
 1818 082c 0CD08DE2 		add	sp, sp, #12	@,,
 1819              		.cfi_def_cfa_offset 28
 1820              		@ sp needed	@
 1821 0830 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1822              		.cfi_restore 14
 1823              		.cfi_restore 9
 1824              		.cfi_restore 8
 1825              		.cfi_restore 7
 1826              		.cfi_restore 6
 1827              		.cfi_restore 5
 1828              		.cfi_restore 4
 1829              		.cfi_def_cfa_offset 0
 1830              	.LVL124:
 1831              	@ armwave.c:392:     fclose(fp);
 392:armwave.c     **** }
 1832              		.loc 1 392 5 view .LVU466
 1833 0834 FEFFFFEA 		b	fclose		@
 1834              	.LVL125:
 1835              	.L104:
 392:armwave.c     **** }
 1836              		.loc 1 392 5 view .LVU467
 1837              		.align	2
 1838              	.L103:
 1839 0838 98020000 		.word	.LC17
 1840 083c 00000000 		.word	g_armwave_state
 1841 0840 9C020000 		.word	.LC18
 1842 0844 A0020000 		.word	.LC19
 1843 0848 A8020000 		.word	.LC20
 1844 084c B0020000 		.word	.LC21
 1845              		.cfi_endproc
 1846              	.LFE68:
 1848              		.align	2
 1849              		.global	armwave_test_init
 1850              		.syntax unified
 1851              		.arm
 1852              		.fpu vfp
 1854              	armwave_test_init:
 1855              	.LVL126:
 1856              	.LFB69:
 394:armwave.c     **** 
 395:armwave.c     **** /*
 396:armwave.c     ****  * Initialise some test functionry.
 397:armwave.c     ****  */
 398:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 399:armwave.c     **** {
 1857              		.loc 1 399 1 is_stmt 1 view -0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 0
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 400:armwave.c     ****     test_create_gamma();
 1861              		.loc 1 400 5 view .LVU469
 1862              	.LBB12:
 1863              	.LBI12:
  34:armwave.c     **** {
 1864              		.loc 1 34 6 view .LVU470
  34:armwave.c     **** {
 1865              		.loc 1 34 6 is_stmt 0 view .LVU471
 1866              	.LBE12:
 1867              	@ armwave.c:399: {
 399:armwave.c     ****     test_create_gamma();
 1868              		.loc 1 399 1 view .LVU472
 1869 0850 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1870              		.cfi_def_cfa_offset 32
 1871              		.cfi_offset 4, -32
 1872              		.cfi_offset 5, -28
 1873              		.cfi_offset 6, -24
 1874              		.cfi_offset 7, -20
 1875              		.cfi_offset 8, -16
 1876              		.cfi_offset 9, -12
 1877              		.cfi_offset 10, -8
 1878              		.cfi_offset 14, -4
 1879 0854 068B2DED 		vpush.64	{d8, d9, d10}	@
 1880              		.cfi_def_cfa_offset 56
 1881              		.cfi_offset 80, -56
 1882              		.cfi_offset 81, -52
 1883              		.cfi_offset 82, -48
 1884              		.cfi_offset 83, -44
 1885              		.cfi_offset 84, -40
 1886              		.cfi_offset 85, -36
 1887 0858 BC409FE5 		ldr	r4, .L109+20	@ ivtmp.82,
 1888              	.LBB15:
 1889              	.LBB13:
 1890              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1891              		.loc 1 40 32 view .LVU473
 1892 085c 2DAA9FED 		vldr.32	s20, .L109+16	@ tmp136,
 1893              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1894              		.loc 1 40 26 view .LVU474
 1895 0860 289B9FED 		vldr.64	d9, .L109	@ tmp151,
 1896              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1897              		.loc 1 40 49 view .LVU475
 1898 0864 298B9FED 		vldr.64	d8, .L109+8	@ tmp139,
 1899 0868 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 1900              	.LBE13:
 1901              	.LBE15:
 1902              	@ armwave.c:399: {
 399:armwave.c     ****     test_create_gamma();
 1903              		.loc 1 399 1 view .LVU476
 1904 086c 10D04DE2 		sub	sp, sp, #16	@,,
 1905              		.cfi_def_cfa_offset 72
 1906              	@ armwave.c:399: {
 399:armwave.c     ****     test_create_gamma();
 1907              		.loc 1 399 1 view .LVU477
 1908 0870 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1909 0874 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1910 0878 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1911 087c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1912 0880 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 1913 0884 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1914              	.LVL127:
 1915              	.L106:
 1916              	.LBB16:
 1917              	.LBB14:
  40:armwave.c     ****     }
 1918              		.loc 1 40 9 is_stmt 1 view .LVU478
 1919              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1920              		.loc 1 40 32 is_stmt 0 view .LVU479
 1921 0888 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 1922              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1923              		.loc 1 40 26 view .LVU480
 1924 088c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1925              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1926              		.loc 1 40 32 view .LVU481
 1927 0890 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1928 0894 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1929 0898 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1930              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1931              		.loc 1 40 26 view .LVU482
 1932 089c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1933 08a0 FEFFFFEB 		bl	pow		@
 1934              	.LVL128:
 1935              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1936              		.loc 1 40 49 view .LVU483
 1937 08a4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1938              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1939              		.loc 1 40 24 view .LVU484
 1940 08a8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1941 08ac 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1942 08b0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1943              	.LVL129:
 1944              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1945              		.loc 1 39 5 view .LVU485
 1946 08b4 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 1947 08b8 F2FFFF1A 		bne	.L106		@,
 1948              	.LVL130:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1949              		.loc 1 39 5 view .LVU486
 1950              	.LBE14:
 1951              	.LBE16:
 401:armwave.c     **** 
 402:armwave.c     ****     // make ch1 yellowish by default
 403:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1952              		.loc 1 403 5 is_stmt 1 view .LVU487
 1953              	.LBB17:
 1954              	.LBI17:
 356:armwave.c     **** {
 1955              		.loc 1 356 6 view .LVU488
 1956              	.LBB18:
 359:armwave.c     ****         case 1:
 1957              		.loc 1 359 5 view .LVU489
 361:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1958              		.loc 1 361 13 view .LVU490
 362:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1959              		.loc 1 362 13 view .LVU491
 1960              	@ armwave.c:361:             g_armwave_state.ch1_color.r = r;
 361:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1961              		.loc 1 361 41 is_stmt 0 view .LVU492
 1962 08bc 5CC09FE5 		ldr	ip, .L109+24	@ tmp142,
 1963 08c0 5C409FE5 		ldr	r4, .L109+28	@ tmp143,
 1964              	.LBE18:
 1965              	.LBE17:
 1966              	@ armwave.c:405:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 404:armwave.c     **** 
 405:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1967              		.loc 1 405 5 view .LVU493
 1968 08c4 0000A0E3 		mov	r0, #0	@ tmp147,
 1969              	.LBB22:
 1970              	.LBB19:
 1971              	@ armwave.c:363:             g_armwave_state.ch1_color.b = b;
 363:armwave.c     ****             break;
 1972              		.loc 1 363 41 view .LVU494
 1973 08c8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1974              	.LBE19:
 1975              	.LBE22:
 1976              	@ armwave.c:405:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1977              		.loc 1 405 5 view .LVU495
 1978 08cc 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1979 08d0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1980 08d4 00808DE5 		str	r8, [sp]	@ render_width,
 1981 08d8 0610A0E1 		mov	r1, r6	@, tmp3
 1982 08dc 0720A0E1 		mov	r2, r7	@, nwaves
 1983              	.LBB23:
 1984              	.LBB20:
 1985              	@ armwave.c:361:             g_armwave_state.ch1_color.r = r;
 361:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1986              		.loc 1 361 41 view .LVU496
 1987 08e0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 363:armwave.c     ****             break;
 1988              		.loc 1 363 13 is_stmt 1 view .LVU497
 1989              	.LBE20:
 1990              	.LBE23:
 1991              	@ armwave.c:405:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1992              		.loc 1 405 5 is_stmt 0 view .LVU498
 1993 08e4 0630A0E1 		mov	r3, r6	@, wave_size
 1994              	.LBB24:
 1995              	.LBB21:
 1996              	@ armwave.c:363:             g_armwave_state.ch1_color.b = b;
 363:armwave.c     ****             break;
 1997              		.loc 1 363 41 view .LVU499
 1998 08e8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 364:armwave.c     ****     }
 1999              		.loc 1 364 13 is_stmt 1 view .LVU500
 2000              	.LVL131:
 364:armwave.c     ****     }
 2001              		.loc 1 364 13 is_stmt 0 view .LVU501
 2002              	.LBE21:
 2003              	.LBE24:
 2004              		.loc 1 405 5 is_stmt 1 view .LVU502
 2005 08ec FEFFFFEB 		bl	armwave_setup_render		@
 2006              	.LVL132:
 406:armwave.c     **** 
 407:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2007              		.loc 1 407 5 view .LVU503
 2008 08f0 30109FE5 		ldr	r1, .L109+32	@,
 2009 08f4 30009FE5 		ldr	r0, .L109+36	@,
 2010              	@ armwave.c:408: }
 408:armwave.c     **** }
 2011              		.loc 1 408 1 is_stmt 0 view .LVU504
 2012 08f8 10D08DE2 		add	sp, sp, #16	@,,
 2013              		.cfi_def_cfa_offset 56
 2014              		@ sp needed	@
 2015 08fc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2016              		.cfi_restore 84
 2017              		.cfi_restore 85
 2018              		.cfi_restore 82
 2019              		.cfi_restore 83
 2020              		.cfi_restore 80
 2021              		.cfi_restore 81
 2022              		.cfi_def_cfa_offset 32
 2023 0900 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2024              		.cfi_restore 14
 2025              		.cfi_restore 10
 2026              		.cfi_restore 9
 2027              		.cfi_restore 8
 2028              		.cfi_restore 7
 2029              		.cfi_restore 6
 2030              		.cfi_restore 5
 2031              		.cfi_restore 4
 2032              		.cfi_def_cfa_offset 0
 2033              	.LVL133:
 2034              	@ armwave.c:407:     printf("armwave version: %s\n", ARMWAVE_VER);
 407:armwave.c     **** }
 2035              		.loc 1 407 5 view .LVU505
 2036 0904 FEFFFFEA 		b	printf		@
 2037              	.LVL134:
 2038              	.L110:
 2039              		.align	3
 2040              	.L109:
 2041 0908 000000C0 		.word	-1073741824
 2042 090c CCCCEC3F 		.word	1072483532
 2043 0910 00000000 		.word	0
 2044 0914 00E06F40 		.word	1081073664
 2045 0918 00007F43 		.word	1132396544
 2046 091c FFFFFFFF 		.word	gamma_table-1
 2047 0920 00000000 		.word	g_armwave_state
 2048 0924 F609F406 		.word	116656630
 2049 0928 00000000 		.word	.LC0
 2050 092c 08000000 		.word	.LC1
 2051              		.cfi_endproc
 2052              	.LFE69:
 2054              		.align	2
 2055              		.global	armwave_test_fill_outbuf
 2056              		.syntax unified
 2057              		.arm
 2058              		.fpu vfp
 2060              	armwave_test_fill_outbuf:
 2061              	.LFB70:
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Render image to the local allocated buffer.
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_test_fill_outbuf()
 414:armwave.c     **** {
 2062              		.loc 1 414 1 is_stmt 1 view -0
 2063              		.cfi_startproc
 2064              		@ args = 0, pretend = 0, frame = 0
 2065              		@ frame_needed = 0, uses_anonymous_args = 0
 2066              		@ link register save eliminated.
 415:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2067              		.loc 1 415 5 view .LVU507
 2068 0930 04309FE5 		ldr	r3, .L112	@ tmp111,
 2069 0934 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2070 0938 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2071              	.LVL135:
 2072              	.L113:
 2073              		.align	2
 2074              	.L112:
 2075 093c 00000000 		.word	g_armwave_state
 2076              		.cfi_endproc
 2077              	.LFE70:
 2079              		.align	2
 2080              		.global	armwave_test_dump_buffer_to_ppm
 2081              		.syntax unified
 2082              		.arm
 2083              		.fpu vfp
 2085              	armwave_test_dump_buffer_to_ppm:
 2086              	.LVL136:
 2087              	.LFB71:
 416:armwave.c     **** }
 417:armwave.c     **** 
 418:armwave.c     **** /*
 419:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 420:armwave.c     ****  */
 421:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 422:armwave.c     **** {
 2088              		.loc 1 422 1 view -0
 2089              		.cfi_startproc
 2090              		@ args = 0, pretend = 0, frame = 0
 2091              		@ frame_needed = 0, uses_anonymous_args = 0
 2092              		@ link register save eliminated.
 423:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2093              		.loc 1 423 5 view .LVU509
 2094 0940 08309FE5 		ldr	r3, .L115	@ tmp112,
 2095 0944 0010A0E1 		mov	r1, r0	@, fn
 2096 0948 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2097              	.LVL137:
 2098              		.loc 1 423 5 is_stmt 0 view .LVU510
 2099 094c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2100              	.LVL138:
 2101              	.L116:
 2102              		.loc 1 423 5 view .LVU511
 2103              		.align	2
 2104              	.L115:
 2105 0950 00000000 		.word	g_armwave_state
 2106              		.cfi_endproc
 2107              	.LFE71:
 2109              		.align	2
 2110              		.global	armwave_test_fill_gdkbuf
 2111              		.syntax unified
 2112              		.arm
 2113              		.fpu vfp
 2115              	armwave_test_fill_gdkbuf:
 2116              	.LVL139:
 2117              	.LFB72:
 424:armwave.c     **** }
 425:armwave.c     **** 
 426:armwave.c     **** /*
 427:armwave.c     ****  * Render GDK buffer with test funtionry.
 428:armwave.c     ****  */
 429:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 430:armwave.c     **** {
 2118              		.loc 1 430 1 is_stmt 1 view -0
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 0
 2121              		@ frame_needed = 0, uses_anonymous_args = 0
 2122              		@ link register save eliminated.
 431:armwave.c     ****     //PyObject *mv;
 432:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 433:armwave.c     **** 
 434:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 435:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2123              		.loc 1 435 5 view .LVU513
 436:armwave.c     ****     
 437:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 438:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2124              		.loc 1 438 5 view .LVU514
 2125              	@ armwave.c:435:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 435:armwave.c     ****     
 2126              		.loc 1 435 11 is_stmt 0 view .LVU515
 2127 0954 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2128              	@ armwave.c:438:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2129              		.loc 1 438 5 view .LVU516
 2130 0958 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2131              	.LVL140:
 2132              		.loc 1 438 5 view .LVU517
 2133 095c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2134              	.LVL141:
 2135              		.loc 1 438 5 view .LVU518
 2136              		.cfi_endproc
 2137              	.LFE72:
 2139              		.align	2
 2140              		.global	armwave_test_buffer_alloc
 2141              		.syntax unified
 2142              		.arm
 2143              		.fpu vfp
 2145              	armwave_test_buffer_alloc:
 2146              	.LVL142:
 2147              	.LFB73:
 439:armwave.c     **** }
 440:armwave.c     **** 
 441:armwave.c     **** /*
 442:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 443:armwave.c     ****  */
 444:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 445:armwave.c     **** {
 2148              		.loc 1 445 1 is_stmt 1 view -0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 0
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 446:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2152              		.loc 1 446 5 view .LVU520
 2153              	@ armwave.c:445: {
 445:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2154              		.loc 1 445 1 is_stmt 0 view .LVU521
 2155 0960 70402DE9 		push	{r4, r5, r6, lr}	@
 2156              		.cfi_def_cfa_offset 16
 2157              		.cfi_offset 4, -16
 2158              		.cfi_offset 5, -12
 2159              		.cfi_offset 6, -8
 2160              		.cfi_offset 14, -4
 2161              	@ armwave.c:445: {
 445:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2162              		.loc 1 445 1 view .LVU522
 2163 0964 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2164              	@ armwave.c:446:     if(g_armwave_state.test_wave_buffer != NULL) {
 2165              		.loc 1 446 23 view .LVU523
 2166 0968 44409FE5 		ldr	r4, .L125	@ tmp128,
 2167 096c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2168              	.LVL143:
 2169              	@ armwave.c:446:     if(g_armwave_state.test_wave_buffer != NULL) {
 2170              		.loc 1 446 7 view .LVU524
 2171 0970 000050E3 		cmp	r0, #0	@ _1,
 2172 0974 0000000A 		beq	.L119		@,
 447:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2173              		.loc 1 447 9 is_stmt 1 view .LVU525
 2174 0978 FEFFFFEB 		bl	free		@
 2175              	.LVL144:
 2176              	.L119:
 448:armwave.c     ****     }
 449:armwave.c     **** 
 450:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 451:armwave.c     **** 
 452:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2177              		.loc 1 452 5 view .LVU526
 2178              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2179              		.loc 1 452 75 is_stmt 0 view .LVU527
 2180 097c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2181 0980 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2182              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2183              		.loc 1 452 40 view .LVU528
 2184 0984 0610A0E1 		mov	r1, r6	@, nsets
 2185              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2186              		.loc 1 452 75 view .LVU529
 2187 0988 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2188              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2189              		.loc 1 452 40 view .LVU530
 2190 098c 0500A0E1 		mov	r0, r5	@, _4
 2191 0990 FEFFFFEB 		bl	calloc		@
 2192              	.LVL145:
 2193              	@ armwave.c:454:     if(g_armwave_state.test_wave_buffer == NULL) {
 453:armwave.c     **** 
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2194              		.loc 1 454 7 view .LVU531
 2195 0994 000050E3 		cmp	r0, #0	@ tmp124,
 2196              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 452:armwave.c     **** 
 2197              		.loc 1 452 38 view .LVU532
 2198 0998 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2199              		.loc 1 454 5 is_stmt 1 view .LVU533
 2200              	@ armwave.c:454:     if(g_armwave_state.test_wave_buffer == NULL) {
 2201              		.loc 1 454 7 is_stmt 0 view .LVU534
 2202 099c 7080BD18 		popne	{r4, r5, r6, pc}	@
 455:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2203              		.loc 1 455 9 is_stmt 1 view .LVU535
 2204 09a0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2205 09a4 0620A0E1 		mov	r2, r6	@, nsets
 2206 09a8 08009FE5 		ldr	r0, .L125+4	@,
 2207              	@ armwave.c:459: }
 456:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 457:armwave.c     ****         return;
 458:armwave.c     ****     }
 459:armwave.c     **** }
 2208              		.loc 1 459 1 is_stmt 0 view .LVU536
 2209 09ac 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2210              		.cfi_restore 14
 2211              		.cfi_restore 6
 2212              		.cfi_restore 5
 2213              		.cfi_restore 4
 2214              		.cfi_def_cfa_offset 0
 2215              	.LVL146:
 2216              	@ armwave.c:455:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 455:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2217              		.loc 1 455 9 view .LVU537
 2218 09b0 FEFFFFEA 		b	printf		@
 2219              	.LVL147:
 2220              	.L126:
 455:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2221              		.loc 1 455 9 view .LVU538
 2222              		.align	2
 2223              	.L125:
 2224 09b4 00000000 		.word	g_armwave_state
 2225 09b8 C0020000 		.word	.LC22
 2226              		.cfi_endproc
 2227              	.LFE73:
 2229              		.align	2
 2230              		.global	armwave_fill_pixbuf_into_pybuffer
 2231              		.syntax unified
 2232              		.arm
 2233              		.fpu vfp
 2235              	armwave_fill_pixbuf_into_pybuffer:
 2236              	.LVL148:
 2237              	.LFB74:
 460:armwave.c     **** 
 461:armwave.c     **** /*
 462:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 463:armwave.c     ****  */
 464:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 465:armwave.c     **** {
 2238              		.loc 1 465 1 is_stmt 1 view -0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 48
 2241              		@ frame_needed = 0, uses_anonymous_args = 0
 466:armwave.c     ****     Py_buffer buffer;
 2242              		.loc 1 466 5 view .LVU540
 467:armwave.c     ****     int ret;
 2243              		.loc 1 467 5 view .LVU541
 468:armwave.c     **** 
 469:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 470:armwave.c     **** 
 471:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2244              		.loc 1 471 5 view .LVU542
 2245              	@ armwave.c:465: {
 465:armwave.c     ****     Py_buffer buffer;
 2246              		.loc 1 465 1 is_stmt 0 view .LVU543
 2247 09bc 04E02DE5 		str	lr, [sp, #-4]!	@,
 2248              		.cfi_def_cfa_offset 4
 2249              		.cfi_offset 14, -4
 2250 09c0 34D04DE2 		sub	sp, sp, #52	@,,
 2251              		.cfi_def_cfa_offset 56
 2252              	@ armwave.c:471:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2253              		.loc 1 471 11 view .LVU544
 2254 09c4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2255 09c8 0120A0E3 		mov	r2, #1	@,
 2256 09cc FEFFFFEB 		bl	PyObject_GetBuffer		@
 2257              	.LVL149:
 472:armwave.c     **** 
 473:armwave.c     ****     if(ret != 0) {
 2258              		.loc 1 473 5 is_stmt 1 view .LVU545
 2259              	@ armwave.c:473:     if(ret != 0) {
 2260              		.loc 1 473 7 is_stmt 0 view .LVU546
 2261 09d0 000050E3 		cmp	r0, #0	@,
 2262 09d4 0A00001A 		bne	.L131		@,
 474:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 475:armwave.c     ****         Py_RETURN_FALSE;
 476:armwave.c     ****     }
 477:armwave.c     **** 
 478:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 479:armwave.c     **** 
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2263              		.loc 1 480 5 is_stmt 1 view .LVU547
 2264 09d8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2265              	.LVL150:
 2266              		.loc 1 480 5 is_stmt 0 view .LVU548
 2267 09dc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2268              	.LVL151:
 481:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 482:armwave.c     **** 
 483:armwave.c     ****     PyBuffer_Release(&buffer);
 2269              		.loc 1 483 5 is_stmt 1 view .LVU549
 2270 09e0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2271 09e4 FEFFFFEB 		bl	PyBuffer_Release		@
 2272              	.LVL152:
 484:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 485:armwave.c     **** 
 486:armwave.c     ****     Py_RETURN_TRUE;
 2273              		.loc 1 486 5 view .LVU550
 2274              	.LBB25:
 2275              	.LBI25:
 2276              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2277              		.loc 2 456 20 view .LVU551
 2278              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2279              		.loc 2 458 21 view .LVU552
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2280              		.loc 2 459 5 view .LVU553
 2281              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2282              		.loc 2 459 18 is_stmt 0 view .LVU554
 2283 09e8 38309FE5 		ldr	r3, .L132	@ tmp126,
 2284              	.LBE26:
 2285              	.LBE25:
 2286              	@ armwave.c:486:     Py_RETURN_TRUE;
 2287              		.loc 1 486 5 view .LVU555
 2288 09ec 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2289              	.LBB28:
 2290              	.LBB27:
 2291              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2292              		.loc 2 459 18 view .LVU556
 2293 09f0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2294 09f4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2295 09f8 002083E5 		str	r2, [r3]	@ tmp128,
 2296              	.LBE27:
 2297              	.LBE28:
 2298              	@ armwave.c:487: }
 487:armwave.c     **** }
 2299              		.loc 1 487 1 view .LVU557
 2300 09fc 34D08DE2 		add	sp, sp, #52	@,,
 2301              		.cfi_remember_state
 2302              		.cfi_def_cfa_offset 4
 2303              		@ sp needed	@
 2304 0a00 04F09DE4 		ldr	pc, [sp], #4	@
 2305              	.LVL153:
 2306              	.L131:
 2307              		.cfi_restore_state
 474:armwave.c     ****         Py_RETURN_FALSE;
 2308              		.loc 1 474 9 is_stmt 1 view .LVU558
 2309 0a04 20009FE5 		ldr	r0, .L132+4	@,
 2310              	.LVL154:
 474:armwave.c     ****         Py_RETURN_FALSE;
 2311              		.loc 1 474 9 is_stmt 0 view .LVU559
 2312 0a08 FEFFFFEB 		bl	puts		@
 2313              	.LVL155:
 475:armwave.c     ****     }
 2314              		.loc 1 475 9 is_stmt 1 view .LVU560
 2315              	.LBB29:
 2316              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2317              		.loc 2 456 20 view .LVU561
 2318              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2319              		.loc 2 458 21 view .LVU562
 2320              		.loc 2 459 5 view .LVU563
 2321              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2322              		.loc 2 459 18 is_stmt 0 view .LVU564
 2323 0a0c 1C309FE5 		ldr	r3, .L132+8	@ tmp120,
 2324              	.LBE30:
 2325              	.LBE29:
 2326              	@ armwave.c:475:         Py_RETURN_FALSE;
 475:armwave.c     ****     }
 2327              		.loc 1 475 9 view .LVU565
 2328 0a10 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2329              	.LBB32:
 2330              	.LBB31:
 2331              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2332              		.loc 2 459 18 view .LVU566
 2333 0a14 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2334 0a18 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2335 0a1c 002083E5 		str	r2, [r3]	@ tmp122,
 2336              	.LBE31:
 2337              	.LBE32:
 2338              	@ armwave.c:487: }
 2339              		.loc 1 487 1 view .LVU567
 2340 0a20 34D08DE2 		add	sp, sp, #52	@,,
 2341              		.cfi_def_cfa_offset 4
 2342              		@ sp needed	@
 2343 0a24 04F09DE4 		ldr	pc, [sp], #4	@
 2344              	.L133:
 2345              		.align	2
 2346              	.L132:
 2347 0a28 00000000 		.word	_Py_TrueStruct
 2348 0a2c 14030000 		.word	.LC23
 2349 0a30 00000000 		.word	_Py_FalseStruct
 2350              		.cfi_endproc
 2351              	.LFE74:
 2353              		.align	2
 2354              		.global	armwave_test_create_am_sine
 2355              		.syntax unified
 2356              		.arm
 2357              		.fpu vfp
 2359              	armwave_test_create_am_sine:
 2360              	.LVL156:
 2361              	.LFB75:
 488:armwave.c     **** 
 489:armwave.c     **** /*
 490:armwave.c     ****  * Make a test AM waveform for render tests.
 491:armwave.c     ****  *
 492:armwave.c     ****  * @param   mod                     modulation depth
 493:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 494:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 495:armwave.c     ****  */
 496:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 497:armwave.c     **** {
 2362              		.loc 1 497 1 is_stmt 1 view -0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 8
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 498:armwave.c     ****     float v, noise, xnoise, mod_val;
 2366              		.loc 1 498 5 view .LVU569
 499:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2367              		.loc 1 499 5 view .LVU570
 2368              	@ armwave.c:497: {
 497:armwave.c     ****     float v, noise, xnoise, mod_val;
 2369              		.loc 1 497 1 is_stmt 0 view .LVU571
 2370 0a34 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2371              		.cfi_def_cfa_offset 32
 2372              		.cfi_offset 4, -32
 2373              		.cfi_offset 5, -28
 2374              		.cfi_offset 6, -24
 2375              		.cfi_offset 7, -20
 2376              		.cfi_offset 8, -16
 2377              		.cfi_offset 9, -12
 2378              		.cfi_offset 10, -8
 2379              		.cfi_offset 14, -4
 2380              	@ armwave.c:499:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2381              		.loc 1 499 38 view .LVU572
 2382 0a38 7A7A9FED 		vldr.32	s14, .L165	@ tmp180,
 2383              	@ armwave.c:499:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2384              		.loc 1 499 55 view .LVU573
 2385 0a3c 00529FE5 		ldr	r5, .L165+28	@ tmp250,
 2386              	@ armwave.c:497: {
 497:armwave.c     ****     float v, noise, xnoise, mod_val;
 2387              		.loc 1 497 1 view .LVU574
 2388 0a40 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2389              		.cfi_def_cfa_offset 80
 2390              		.cfi_offset 80, -80
 2391              		.cfi_offset 81, -76
 2392              		.cfi_offset 82, -72
 2393              		.cfi_offset 83, -68
 2394              		.cfi_offset 84, -64
 2395              		.cfi_offset 85, -60
 2396              		.cfi_offset 86, -56
 2397              		.cfi_offset 87, -52
 2398              		.cfi_offset 88, -48
 2399              		.cfi_offset 89, -44
 2400              		.cfi_offset 90, -40
 2401              		.cfi_offset 91, -36
 2402 0a44 0090A0E1 		mov	r9, r0	@ sets, sets
 2403              	@ armwave.c:499:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2404              		.loc 1 499 38 view .LVU575
 2405 0a48 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2406              	@ armwave.c:503:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 500:armwave.c     ****     int s, set_offset = 0;
 501:armwave.c     ****     int w, x;
 502:armwave.c     **** 
 503:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2407              		.loc 1 503 70 view .LVU576
 2408 0a4c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2409 0a50 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2410              	.LBB35:
 2411              	.LBB36:
 2412              	@ armwave.c:446:     if(g_armwave_state.test_wave_buffer != NULL) {
 446:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2413              		.loc 1 446 23 view .LVU577
 2414 0a54 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2415              	.LVL157:
 446:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2416              		.loc 1 446 23 view .LVU578
 2417              	.LBE36:
 2418              	.LBE35:
 2419              	@ armwave.c:499:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 499:armwave.c     ****     int s, set_offset = 0;
 2420              		.loc 1 499 38 view .LVU579
 2421 0a58 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2422              	@ armwave.c:503:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2423              		.loc 1 503 70 view .LVU580
 2424 0a5c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2425              	@ armwave.c:497: {
 497:armwave.c     ****     float v, noise, xnoise, mod_val;
 2426              		.loc 1 497 1 view .LVU581
 2427 0a60 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2428              	.LBB40:
 2429              	.LBB37:
 2430              	@ armwave.c:446:     if(g_armwave_state.test_wave_buffer != NULL) {
 446:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2431              		.loc 1 446 7 view .LVU582
 2432 0a64 000050E3 		cmp	r0, #0	@ _82,
 2433              	.LBE37:
 2434              	.LBE40:
 2435              	@ armwave.c:497: {
 497:armwave.c     ****     float v, noise, xnoise, mod_val;
 2436              		.loc 1 497 1 view .LVU583
 2437 0a68 08D04DE2 		sub	sp, sp, #8	@,,
 2438              		.cfi_def_cfa_offset 88
 2439              	@ armwave.c:504:     g_armwave_state.test_wave_buffer_nsets = sets;
 504:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2440              		.loc 1 504 44 view .LVU584
 2441 0a6c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2442              	@ armwave.c:503:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 503:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2443              		.loc 1 503 45 view .LVU585
 2444 0a70 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2445              	@ armwave.c:499:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 499:armwave.c     ****     int s, set_offset = 0;
 2446              		.loc 1 499 38 view .LVU586
 2447 0a74 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2448              	@ armwave.c:499:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 499:armwave.c     ****     int s, set_offset = 0;
 2449              		.loc 1 499 11 view .LVU587
 2450 0a78 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2451              	.LVL158:
 500:armwave.c     ****     int w, x;
 2452              		.loc 1 500 5 is_stmt 1 view .LVU588
 501:armwave.c     **** 
 2453              		.loc 1 501 5 view .LVU589
 503:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2454              		.loc 1 503 5 view .LVU590
 2455              		.loc 1 504 5 view .LVU591
 505:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2456              		.loc 1 505 5 view .LVU592
 2457              	.LBB41:
 2458              	.LBI35:
 444:armwave.c     **** {
 2459              		.loc 1 444 6 view .LVU593
 2460              	.LBB38:
 446:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2461              		.loc 1 446 5 view .LVU594
 2462              	@ armwave.c:446:     if(g_armwave_state.test_wave_buffer != NULL) {
 446:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2463              		.loc 1 446 7 is_stmt 0 view .LVU595
 2464 0a7c 0000000A 		beq	.L135		@,
 447:armwave.c     ****     }
 2465              		.loc 1 447 9 is_stmt 1 view .LVU596
 2466 0a80 FEFFFFEB 		bl	free		@
 2467              	.LVL159:
 2468              	.L135:
 452:armwave.c     **** 
 2469              		.loc 1 452 5 view .LVU597
 2470              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 452:armwave.c     **** 
 2471              		.loc 1 452 75 is_stmt 0 view .LVU598
 2472 0a84 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2473 0a88 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2474              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 452:armwave.c     **** 
 2475              		.loc 1 452 40 view .LVU599
 2476 0a8c 0910A0E1 		mov	r1, r9	@, sets
 2477              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 452:armwave.c     **** 
 2478              		.loc 1 452 75 view .LVU600
 2479 0a90 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2480              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 452:armwave.c     **** 
 2481              		.loc 1 452 40 view .LVU601
 2482 0a94 0400A0E1 		mov	r0, r4	@, _85
 2483 0a98 FEFFFFEB 		bl	calloc		@
 2484              	.LVL160:
 2485              	@ armwave.c:454:     if(g_armwave_state.test_wave_buffer == NULL) {
 454:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2486              		.loc 1 454 7 view .LVU602
 2487 0a9c 000050E3 		cmp	r0, #0	@ tmp191,
 2488              	@ armwave.c:452:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 452:armwave.c     **** 
 2489              		.loc 1 452 38 view .LVU603
 2490 0aa0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 454:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2491              		.loc 1 454 5 is_stmt 1 view .LVU604
 2492              	@ armwave.c:454:     if(g_armwave_state.test_wave_buffer == NULL) {
 454:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2493              		.loc 1 454 7 is_stmt 0 view .LVU605
 2494 0aa4 5A00000A 		beq	.L164		@,
 2495              	.L136:
 2496              	.LVL161:
 454:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2497              		.loc 1 454 7 view .LVU606
 2498              	.LBE38:
 2499              	.LBE41:
 2500              	@ armwave.c:507:     for(s = 0; s < sets; s++) {
 506:armwave.c     **** 
 507:armwave.c     ****     for(s = 0; s < sets; s++) {
 2501              		.loc 1 507 5 discriminator 1 view .LVU607
 2502 0aa8 000059E3 		cmp	r9, #0	@ sets,
 2503 0aac 550000DA 		ble	.L134		@,
 2504              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 508:armwave.c     ****         printf("Calculating test set %d\n", s);
 509:armwave.c     ****     
 510:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 511:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 512:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 513:armwave.c     **** 
 514:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 515:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 516:armwave.c     ****                 noise *= noise;
 517:armwave.c     ****                 noise *= noise;
 518:armwave.c     ****                 noise *= noise;
 519:armwave.c     **** 
 520:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 521:armwave.c     ****                     noise = -noise;
 522:armwave.c     **** 
 523:armwave.c     ****                 noise += 1.0f;
 524:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 525:armwave.c     **** 
 526:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2505              		.loc 1 526 45 view .LVU608
 2506 0ab0 5C8A9FED 		vldr.32	s16, .L165	@ tmp258,
 2507              	@ armwave.c:529:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 527:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 528:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 529:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2508              		.loc 1 529 104 view .LVU609
 2509 0ab4 5CCA9FED 		vldr.32	s24, .L165+4	@ tmp259,
 2510              	@ armwave.c:507:     for(s = 0; s < sets; s++) {
 507:armwave.c     ****         printf("Calculating test set %d\n", s);
 2511              		.loc 1 507 5 view .LVU610
 2512 0ab8 0070A0E3 		mov	r7, #0	@ set_offset,
 2513              	@ armwave.c:508:         printf("Calculating test set %d\n", s);
 508:armwave.c     ****         printf("Calculating test set %d\n", s);
 2514              		.loc 1 508 9 view .LVU611
 2515 0abc 84A19FE5 		ldr	r10, .L165+32	@ tmp257,
 2516              	@ armwave.c:507:     for(s = 0; s < sets; s++) {
 507:armwave.c     ****         printf("Calculating test set %d\n", s);
 2517              		.loc 1 507 5 view .LVU612
 2518 0ac0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2519              	.LVL162:
 2520              	.L137:
 508:armwave.c     ****         printf("Calculating test set %d\n", s);
 2521              		.loc 1 508 9 is_stmt 1 view .LVU613
 2522 0ac4 0810A0E1 		mov	r1, r8	@, s
 2523 0ac8 0A00A0E1 		mov	r0, r10	@, tmp257
 2524 0acc FEFFFFEB 		bl	printf		@
 2525              	.LVL163:
 510:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2526              		.loc 1 510 9 view .LVU614
 2527              	@ armwave.c:510:         for(w = 0; w < g_armwave_state.waves; w++) {
 510:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2528              		.loc 1 510 39 is_stmt 0 view .LVU615
 2529 0ad0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2530              	@ armwave.c:510:         for(w = 0; w < g_armwave_state.waves; w++) {
 510:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2531              		.loc 1 510 9 view .LVU616
 2532 0ad4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2533 0ad8 450000DA 		ble	.L138		@,
 2534              	@ armwave.c:512:             mod_val = 0.5f + (_1_waves_mod * w);
 512:armwave.c     **** 
 2535              		.loc 1 512 21 view .LVU617
 2536 0adc 53CADFED 		vldr.32	s25, .L165+8	@ tmp200,
 2537              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2538              		.loc 1 526 33 view .LVU618
 2539 0ae0 53BA9FED 		vldr.32	s22, .L165+12	@ tmp253,
 2540              	@ armwave.c:524:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 524:armwave.c     **** 
 2541              		.loc 1 524 24 view .LVU619
 2542 0ae4 53AADFED 		vldr.32	s21, .L165+16	@ tmp254,
 2543 0ae8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2544              	@ armwave.c:510:         for(w = 0; w < g_armwave_state.waves; w++) {
 510:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2545              		.loc 1 510 15 view .LVU620
 2546 0aec 0060A0E3 		mov	r6, #0	@ w,
 2547              	.LVL164:
 2548              	.L145:
 512:armwave.c     **** 
 2549              		.loc 1 512 13 is_stmt 1 view .LVU621
 2550              	@ armwave.c:512:             mod_val = 0.5f + (_1_waves_mod * w);
 512:armwave.c     **** 
 2551              		.loc 1 512 21 is_stmt 0 view .LVU622
 2552 0af0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2553 0af4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2554              	@ armwave.c:514:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 514:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2555              		.loc 1 514 13 view .LVU623
 2556 0af8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2557              	@ armwave.c:512:             mod_val = 0.5f + (_1_waves_mod * w);
 512:armwave.c     **** 
 2558              		.loc 1 512 21 view .LVU624
 2559 0afc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2560 0b00 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2561              	.LVL165:
 514:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2562              		.loc 1 514 13 is_stmt 1 view .LVU625
 514:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2563              		.loc 1 514 13 is_stmt 0 view .LVU626
 2564 0b04 370000DA 		ble	.L139		@,
 2565 0b08 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2566              	@ armwave.c:529:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2567              		.loc 1 529 113 view .LVU627
 2568 0b0c 4AAA9FED 		vldr.32	s20, .L165+20	@ tmp229,
 2569 0b10 4A8ADFED 		vldr.32	s17, .L165+24	@ tmp230,
 2570              	@ armwave.c:514:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 514:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2571              		.loc 1 514 19 view .LVU628
 2572 0b14 0040A0E3 		mov	r4, #0	@ x,
 2573              	.LVL166:
 2574              	.L144:
 515:armwave.c     ****                 noise *= noise;
 2575              		.loc 1 515 17 is_stmt 1 view .LVU629
 2576              	@ armwave.c:515:                 noise  = ((rand() & 0xffff) * noise_fraction);
 515:armwave.c     ****                 noise *= noise;
 2577              		.loc 1 515 28 is_stmt 0 view .LVU630
 2578 0b18 FEFFFFEB 		bl	rand		@
 2579              	.LVL167:
 2580              	@ armwave.c:515:                 noise  = ((rand() & 0xffff) * noise_fraction);
 515:armwave.c     ****                 noise *= noise;
 2581              		.loc 1 515 35 view .LVU631
 2582 0b1c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2583              	@ armwave.c:515:                 noise  = ((rand() & 0xffff) * noise_fraction);
 515:armwave.c     ****                 noise *= noise;
 2584              		.loc 1 515 45 view .LVU632
 2585 0b20 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2586 0b24 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2587              	@ armwave.c:515:                 noise  = ((rand() & 0xffff) * noise_fraction);
 515:armwave.c     ****                 noise *= noise;
 2588              		.loc 1 515 24 view .LVU633
 2589 0b28 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2590              	.LVL168:
 516:armwave.c     ****                 noise *= noise;
 2591              		.loc 1 516 17 is_stmt 1 view .LVU634
 2592              	@ armwave.c:516:                 noise *= noise;
 516:armwave.c     ****                 noise *= noise;
 2593              		.loc 1 516 23 is_stmt 0 view .LVU635
 2594 0b2c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2595              	.LVL169:
 517:armwave.c     ****                 noise *= noise;
 2596              		.loc 1 517 17 is_stmt 1 view .LVU636
 2597              	@ armwave.c:517:                 noise *= noise;
 517:armwave.c     ****                 noise *= noise;
 2598              		.loc 1 517 23 is_stmt 0 view .LVU637
 2599 0b30 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2600              	.LVL170:
 518:armwave.c     **** 
 2601              		.loc 1 518 17 is_stmt 1 view .LVU638
 2602              	@ armwave.c:518:                 noise *= noise;
 518:armwave.c     **** 
 2603              		.loc 1 518 23 is_stmt 0 view .LVU639
 2604 0b34 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2605              	.LVL171:
 520:armwave.c     ****                     noise = -noise;
 2606              		.loc 1 520 17 is_stmt 1 view .LVU640
 2607              	@ armwave.c:520:                 if((rand() & 0xffff) > 0x7fff)
 520:armwave.c     ****                     noise = -noise;
 2608              		.loc 1 520 21 is_stmt 0 view .LVU641
 2609 0b38 FEFFFFEB 		bl	rand		@
 2610              	.LVL172:
 521:armwave.c     **** 
 2611              		.loc 1 521 21 is_stmt 1 view .LVU642
 2612              	@ armwave.c:520:                 if((rand() & 0xffff) > 0x7fff)
 520:armwave.c     ****                     noise = -noise;
 2613              		.loc 1 520 19 is_stmt 0 view .LVU643
 2614 0b3c 020910E3 		tst	r0, #32768	@,
 2615              	@ armwave.c:521:                     noise = -noise;
 521:armwave.c     **** 
 2616              		.loc 1 521 27 view .LVU644
 2617 0b40 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2618              	.LVL173:
 523:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2619              		.loc 1 523 17 is_stmt 1 view .LVU645
 524:armwave.c     **** 
 2620              		.loc 1 524 17 view .LVU646
 2621              	@ armwave.c:524:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 524:armwave.c     **** 
 2622              		.loc 1 524 27 is_stmt 0 view .LVU647
 2623 0b44 FEFFFFEB 		bl	rand		@
 2624              	.LVL174:
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2625              		.loc 1 526 17 is_stmt 1 view .LVU648
 2626              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2627              		.loc 1 526 45 is_stmt 0 view .LVU649
 2628 0b48 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2629              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2630              		.loc 1 526 33 view .LVU650
 2631 0b4c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2632              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2633              		.loc 1 526 45 view .LVU651
 2634 0b50 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2635              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2636              		.loc 1 526 33 view .LVU652
 2637 0b54 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2638              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2639              		.loc 1 526 45 view .LVU653
 2640 0b58 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2641              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2642              		.loc 1 526 33 view .LVU654
 2643 0b5c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2644              	@ armwave.c:524:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 524:armwave.c     **** 
 2645              		.loc 1 524 34 view .LVU655
 2646 0b60 7000FFE6 		uxth	r0, r0	@ tmp214,
 2647              	.LVL175:
 2648              	@ armwave.c:524:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 524:armwave.c     **** 
 2649              		.loc 1 524 44 view .LVU656
 2650 0b64 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2651 0b68 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2652              	@ armwave.c:524:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 524:armwave.c     **** 
 2653              		.loc 1 524 24 view .LVU657
 2654 0b6c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2655              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2656              		.loc 1 526 77 view .LVU658
 2657 0b70 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2658              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2659              		.loc 1 526 22 view .LVU659
 2660 0b74 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2661 0b78 FEFFFFEB 		bl	sin		@
 2662              	.LVL176:
 2663              		.loc 1 529 17 is_stmt 1 view .LVU660
 2664              	@ armwave.c:523:                 noise += 1.0f;
 523:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2665              		.loc 1 523 23 is_stmt 0 view .LVU661
 2666 0b7c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2667              	@ armwave.c:529:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2668              		.loc 1 529 104 view .LVU662
 2669 0b80 0010A0E3 		mov	r1, #0	@ iftmp.24_50,
 2670              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2671              		.loc 1 526 98 view .LVU663
 2672 0b84 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2673              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2674              		.loc 1 526 87 view .LVU664
 2675 0b88 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2676              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2677              		.loc 1 526 98 view .LVU665
 2678 0b8c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2679              	@ armwave.c:526:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 526:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2680              		.loc 1 526 19 view .LVU666
 2681 0b90 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2682              	@ armwave.c:529:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2683              		.loc 1 529 113 view .LVU667
 2684 0b94 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2685 0b98 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2686 0b9c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2687 0ba0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2688 0ba4 050000DA 		ble	.L141		@,
 2689              	@ armwave.c:529:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2690              		.loc 1 529 104 discriminator 1 view .LVU668
 2691 0ba8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2692 0bac FF10A0E3 		mov	r1, #255	@ iftmp.24_50,
 2693 0bb0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2694 0bb4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2695 0bb8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2696 0bbc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_50, %sfp
 2697              	.L141:
 2698              	@ armwave.c:529:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2699              		.loc 1 529 57 discriminator 12 view .LVU669
 2700 0bc0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2701              	@ armwave.c:529:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2702              		.loc 1 529 102 discriminator 12 view .LVU670
 2703 0bc4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2704 0bc8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2705 0bcc 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2706              	@ armwave.c:514:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 514:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2707              		.loc 1 514 58 discriminator 12 view .LVU671
 2708 0bd0 014084E2 		add	r4, r4, #1	@ x, x,
 2709              	.LVL177:
 2710              	@ armwave.c:529:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2711              		.loc 1 529 102 discriminator 12 view .LVU672
 2712 0bd4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.24_50, *_40
 2713              	@ armwave.c:514:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 514:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2714              		.loc 1 514 43 discriminator 12 view .LVU673
 2715 0bd8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2716              	@ armwave.c:514:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 514:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2717              		.loc 1 514 13 discriminator 12 view .LVU674
 2718 0bdc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2719 0be0 CCFFFFCA 		bgt	.L144		@,
 2720 0be4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2721              	.LVL178:
 2722              	.L139:
 2723              	@ armwave.c:510:         for(w = 0; w < g_armwave_state.waves; w++) {
 510:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2724              		.loc 1 510 48 discriminator 2 view .LVU675
 2725 0be8 016086E2 		add	r6, r6, #1	@ w, w,
 2726              	.LVL179:
 2727              	@ armwave.c:510:         for(w = 0; w < g_armwave_state.waves; w++) {
 510:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2728              		.loc 1 510 9 discriminator 2 view .LVU676
 2729 0bec 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2730 0bf0 BEFFFFBA 		blt	.L145		@,
 2731              	.LVL180:
 2732              	.L138:
 530:armwave.c     ****             }
 531:armwave.c     ****         }
 532:armwave.c     **** 
 533:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2733              		.loc 1 533 9 is_stmt 1 discriminator 2 view .LVU677
 2734              	@ armwave.c:533:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2735              		.loc 1 533 46 is_stmt 0 discriminator 2 view .LVU678
 2736 0bf4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2737              	@ armwave.c:507:     for(s = 0; s < sets; s++) {
 507:armwave.c     ****         printf("Calculating test set %d\n", s);
 2738              		.loc 1 507 27 discriminator 2 view .LVU679
 2739 0bf8 018088E2 		add	r8, r8, #1	@ s, s,
 2740              	.LVL181:
 2741              	@ armwave.c:507:     for(s = 0; s < sets; s++) {
 507:armwave.c     ****         printf("Calculating test set %d\n", s);
 2742              		.loc 1 507 5 discriminator 2 view .LVU680
 2743 0bfc 080059E1 		cmp	r9, r8	@ sets, s
 2744              	@ armwave.c:533:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2745              		.loc 1 533 20 discriminator 2 view .LVU681
 2746 0c00 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2747              	.LVL182:
 2748              	@ armwave.c:507:     for(s = 0; s < sets; s++) {
 507:armwave.c     ****         printf("Calculating test set %d\n", s);
 2749              		.loc 1 507 5 discriminator 2 view .LVU682
 2750 0c04 AEFFFF1A 		bne	.L137		@,
 2751              	.LVL183:
 2752              	.L134:
 2753              	@ armwave.c:535: }
 534:armwave.c     ****     }
 535:armwave.c     **** }
 2754              		.loc 1 535 1 view .LVU683
 2755 0c08 08D08DE2 		add	sp, sp, #8	@,,
 2756              		.cfi_remember_state
 2757              		.cfi_def_cfa_offset 80
 2758              		@ sp needed	@
 2759 0c0c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2760              		.cfi_restore 90
 2761              		.cfi_restore 91
 2762              		.cfi_restore 88
 2763              		.cfi_restore 89
 2764              		.cfi_restore 86
 2765              		.cfi_restore 87
 2766              		.cfi_restore 84
 2767              		.cfi_restore 85
 2768              		.cfi_restore 82
 2769              		.cfi_restore 83
 2770              		.cfi_restore 80
 2771              		.cfi_restore 81
 2772              		.cfi_def_cfa_offset 32
 2773              	.LVL184:
 2774              		.loc 1 535 1 view .LVU684
 2775 0c10 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2776              	.LVL185:
 2777              	.L164:
 2778              		.cfi_restore_state
 2779              	.LBB42:
 2780              	.LBB39:
 455:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2781              		.loc 1 455 9 is_stmt 1 view .LVU685
 2782 0c14 940901E0 		mul	r1, r4, r9	@, _85, sets
 2783 0c18 0920A0E1 		mov	r2, r9	@, sets
 2784 0c1c 28009FE5 		ldr	r0, .L165+36	@,
 2785 0c20 FEFFFFEB 		bl	printf		@
 2786              	.LVL186:
 457:armwave.c     ****     }
 2787              		.loc 1 457 9 view .LVU686
 2788 0c24 9FFFFFEA 		b	.L136		@
 2789              	.L166:
 2790              		.align	2
 2791              	.L165:
 2792 0c28 0000803F 		.word	1065353216
 2793 0c2c 00007F43 		.word	1132396544
 2794 0c30 0000003F 		.word	1056964608
 2795 0c34 C3F5C840 		.word	1086911939
 2796 0c38 38FFC74A 		.word	1254620984
 2797 0c3c 0000FE42 		.word	1123942400
 2798 0c40 00000043 		.word	1124073472
 2799 0c44 00000000 		.word	g_armwave_state
 2800 0c48 68030000 		.word	.LC24
 2801 0c4c C0020000 		.word	.LC22
 2802              	.LBE39:
 2803              	.LBE42:
 2804              		.cfi_endproc
 2805              	.LFE75:
 2807              		.align	2
 2808              		.global	armwave_cleanup
 2809              		.syntax unified
 2810              		.arm
 2811              		.fpu vfp
 2813              	armwave_cleanup:
 2814              	.LFB76:
 536:armwave.c     **** 
 537:armwave.c     **** /*
 538:armwave.c     ****  * Make a test square waveform.
 539:armwave.c     ****  *
 540:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 541:armwave.c     ****  */
 542:armwave.c     **** #if 0
 543:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 544:armwave.c     **** {
 545:armwave.c     ****     uint8_t v;
 546:armwave.c     ****     float noise, xnoise;
 547:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 548:armwave.c     ****     int w, x;
 549:armwave.c     **** 
 550:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 551:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 552:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 553:armwave.c     ****             noise *= noise;
 554:armwave.c     ****             noise *= noise;
 555:armwave.c     ****             noise *= noise;
 556:armwave.c     **** 
 557:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 558:armwave.c     ****                 noise = -noise;
 559:armwave.c     **** 
 560:armwave.c     ****             //noise += 1.0f;
 561:armwave.c     **** 
 562:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 563:armwave.c     ****                 new_level = 0.2f;
 564:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 565:armwave.c     ****                 new_level = 0.8f;
 566:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 567:armwave.c     ****                 new_level = 0.2f;
 568:armwave.c     ****             } else {
 569:armwave.c     ****                 new_level = 0.8f;
 570:armwave.c     ****             }
 571:armwave.c     **** 
 572:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 573:armwave.c     **** 
 574:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 575:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 576:armwave.c     ****         }
 577:armwave.c     ****     }
 578:armwave.c     **** }
 579:armwave.c     **** #endif
 580:armwave.c     **** 
 581:armwave.c     **** /*
 582:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 583:armwave.c     ****  */
 584:armwave.c     **** void armwave_cleanup()
 585:armwave.c     **** {
 2815              		.loc 1 585 1 view -0
 2816              		.cfi_startproc
 2817              		@ args = 0, pretend = 0, frame = 0
 2818              		@ frame_needed = 0, uses_anonymous_args = 0
 586:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2819              		.loc 1 586 5 view .LVU688
 2820              	@ armwave.c:585: {
 585:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2821              		.loc 1 585 1 is_stmt 0 view .LVU689
 2822 0c50 10402DE9 		push	{r4, lr}	@
 2823              		.cfi_def_cfa_offset 8
 2824              		.cfi_offset 4, -8
 2825              		.cfi_offset 14, -4
 2826              	@ armwave.c:586:     free(g_armwave_state.out_pixbuf);
 2827              		.loc 1 586 25 view .LVU690
 2828 0c54 34409FE5 		ldr	r4, .L169	@ tmp114,
 2829              	@ armwave.c:586:     free(g_armwave_state.out_pixbuf);
 2830              		.loc 1 586 5 view .LVU691
 2831 0c58 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2832 0c5c FEFFFFEB 		bl	free		@
 2833              	.LVL187:
 587:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2834              		.loc 1 587 5 is_stmt 1 view .LVU692
 2835 0c60 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2836 0c64 FEFFFFEB 		bl	free		@
 2837              	.LVL188:
 588:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2838              		.loc 1 588 5 view .LVU693
 2839 0c68 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2840 0c6c FEFFFFEB 		bl	free		@
 2841              	.LVL189:
 589:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2842              		.loc 1 589 5 view .LVU694
 2843 0c70 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2844 0c74 FEFFFFEB 		bl	free		@
 2845              	.LVL190:
 590:armwave.c     **** 
 591:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2846              		.loc 1 591 5 view .LVU695
 2847              	@ armwave.c:591:     g_armwave_state.out_pixbuf = NULL;
 2848              		.loc 1 591 32 is_stmt 0 view .LVU696
 2849 0c78 0030A0E3 		mov	r3, #0	@ tmp123,
 2850 0c7c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 592:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2851              		.loc 1 592 5 is_stmt 1 view .LVU697
 2852              	@ armwave.c:592:     g_armwave_state.ch1_buffer = NULL;
 2853              		.loc 1 592 32 is_stmt 0 view .LVU698
 2854 0c80 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 593:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2855              		.loc 1 593 5 is_stmt 1 view .LVU699
 2856              	@ armwave.c:593:     g_armwave_state.xcoord_to_xpixel = NULL;
 2857              		.loc 1 593 38 is_stmt 0 view .LVU700
 2858 0c84 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 594:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2859              		.loc 1 594 5 is_stmt 1 view .LVU701
 2860              	@ armwave.c:594:     g_armwave_state.test_wave_buffer = NULL;
 2861              		.loc 1 594 38 is_stmt 0 view .LVU702
 2862 0c88 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2863              	@ armwave.c:595: }
 595:armwave.c     **** }
 2864              		.loc 1 595 1 view .LVU703
 2865 0c8c 1080BDE8 		pop	{r4, pc}	@
 2866              	.L170:
 2867              		.align	2
 2868              	.L169:
 2869 0c90 00000000 		.word	g_armwave_state
 2870              		.cfi_endproc
 2871              	.LFE76:
 2873              		.comm	gamma_table,256,4
 2874              		.comm	g_armwave_state,136,4
 2875              		.section	.rodata
 2876              		.align	2
 2877              		.set	.LANCHOR0,. + 0
 2880              	__PRETTY_FUNCTION__.17125:
 2881 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2881      6176655F 
 2881      73657475 
 2881      705F7265 
 2881      6E646572 
 2882 0015 000000   		.space	3
 2885              	__PRETTY_FUNCTION__.17129:
 2886 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2886      6176655F 
 2886      7365745F 
 2886      77617665 
 2886      5F706F69 
 2887 0031 000000   		.space	3
 2890              	__PRETTY_FUNCTION__.17136:
 2891 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2891      6176655F 
 2891      7365745F 
 2891      77617665 
 2891      5F706F69 
 2892              		.section	.rodata.str1.4,"aMS",%progbits,1
 2893              		.align	2
 2894              	.LC0:
 2895 0000 76302E30 		.ascii	"v0.0.1\000"
 2895      2E3100
 2896 0007 00       		.space	1
 2897              	.LC1:
 2898 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2898      61766520 
 2898      76657273 
 2898      696F6E3A 
 2898      2025730A 
 2899 001d 000000   		.space	3
 2900              	.LC2:
 2901 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2901      78253038 
 2901      7820623D 
 2901      30782530 
 2901      38782063 
 2902 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2902      25642073 
 2902      63616C65 
 2902      3D256420 
 2902      62697464 
 2903 0077 00       		.space	1
 2904              	.LC3:
 2905 0078 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 2905      75742062 
 2905      75666665 
 2905      723A2030 
 2905      78253038 
 2906 008f 00       		.space	1
 2907              	.LC4:
 2908 0090 6D656D73 		.ascii	"memset %d bytes, npix %d, base32_ptr 0x%08x\012\000"
 2908      65742025 
 2908      64206279 
 2908      7465732C 
 2908      206E7069 
 2909 00bd 000000   		.space	3
 2910              	.LC5:
 2911 00c0 69746572 		.ascii	"iter...\000"
 2911      2E2E2E00 
 2912              	.LC6:
 2913 00c8 646F6E65 		.ascii	"done paint %d pixels...\012\000"
 2913      20706169 
 2913      6E742025 
 2913      64207069 
 2913      78656C73 
 2914 00e1 000000   		.space	3
 2915              	.LC7:
 2916 00e4 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2916      6176655F 
 2916      67656E65 
 2916      72617465 
 2916      3A20736C 
 2917 0115 00       		.ascii	"\000"
 2918 0116 0000     		.space	2
 2919              	.LC8:
 2920 0118 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2920      20653D25 
 2920      6420773D 
 2920      25642077 
 2920      733D2564 
 2921              	.LC9:
 2922 0144 61726D77 		.ascii	"armwave.c\000"
 2922      6176652E 
 2922      6300
 2923 014e 0000     		.space	2
 2924              	.LC10:
 2925 0150 73746172 		.ascii	"start_point < end_point\000"
 2925      745F706F 
 2925      696E7420 
 2925      3C20656E 
 2925      645F706F 
 2926              	.LC11:
 2927 0168 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2927      7566665F 
 2927      73697A65 
 2927      3D25642C 
 2927      20636D70 
 2928 019b 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2928      5F776964 
 2928      74683D25 
 2928      642C2077 
 2928      6176655F 
 2929 01c5 000000   		.space	3
 2930              	.LC12:
 2931 01c8 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2931      6F632066 
 2931      61696C75 
 2931      72652061 
 2931      6C6C6F63 
 2932 01fb 2E636831 		.ascii	".ch1_buffer)\012\000"
 2932      5F627566 
 2932      66657229 
 2932      0A00
 2933 0209 000000   		.space	3
 2934              	.LC13:
 2935 020c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2935      3A203078 
 2935      25303878 
 2935      20307825 
 2935      30387820 
 2936              	.LC14:
 2937 0230 77617665 		.ascii	"wave_buffer != NULL\000"
 2937      5F627566 
 2937      66657220 
 2937      213D204E 
 2937      554C4C00 
 2938              	.LC15:
 2939 0244 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2939      6176655F 
 2939      7365745F 
 2939      77617665 
 2939      5F706F69 
 2940 0277 78636565 		.ascii	"xceeded\000"
 2940      64656400 
 2941 027f 00       		.space	1
 2942              	.LC16:
 2943 0280 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2943      5F627566 
 2943      6665725F 
 2943      70747220 
 2943      213D2030 
 2944 0295 000000   		.space	3
 2945              	.LC17:
 2946 0298 776200   		.ascii	"wb\000"
 2947 029b 00       		.space	1
 2948              	.LC18:
 2949 029c 50330A00 		.ascii	"P3\012\000"
 2950              	.LC19:
 2951 02a0 25642025 		.ascii	"%d %d\012\000"
 2951      640A00
 2952 02a7 00       		.space	1
 2953              	.LC20:
 2954 02a8 3235350A 		.ascii	"255\012\000"
 2954      00
 2955 02ad 000000   		.space	3
 2956              	.LC21:
 2957 02b0 25336420 		.ascii	"%3d %3d %3d\012\000"
 2957      25336420 
 2957      2533640A 
 2957      00
 2958 02bd 000000   		.space	3
 2959              	.LC22:
 2960 02c0 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2960      6176655F 
 2960      74657374 
 2960      5F627566 
 2960      6665725F 
 2961 02f3 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2961      20627566 
 2961      66657220 
 2961      28256420 
 2961      62797465 
 2962              	.LC23:
 2963 0314 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2963      6176655F 
 2963      66696C6C 
 2963      5F706978 
 2963      6275665F 
 2964 0347 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2964      20666169 
 2964      6C65642C 
 2964      20726574 
 2964      75726E69 
 2965 0366 0000     		.space	2
 2966              	.LC24:
 2967 0368 43616C63 		.ascii	"Calculating test set %d\012\000"
 2967      756C6174 
 2967      696E6720 
 2967      74657374 
 2967      20736574 
 2968              		.text
 2969              	.Letext0:
 2970              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2971              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2972              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2973              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2974              		.file 7 "/usr/include/stdio.h"
 2975              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2976              		.file 9 "/usr/include/errno.h"
 2977              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2978              		.file 11 "/usr/include/unistd.h"
 2979              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2980              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2981              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2982              		.file 15 "/usr/include/math.h"
 2983              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2984              		.file 17 "/usr/include/time.h"
 2985              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2986              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2987              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2988              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2989              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2990              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2991              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2992              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2993              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2994              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2995              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2996              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2997              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2998              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2999              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3000              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3001              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3002              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3003              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3004              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3005              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3006              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3007              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3008              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3009              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3010              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3011              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3012              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3013              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3014              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3015              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3016              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3017              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3018              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3019              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3020              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3021              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3022              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3023              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3024              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3025              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3026              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3027              		.file 60 "/usr/local/include/python3.8/context.h"
 3028              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3029              		.file 62 "/usr/local/include/python3.8/code.h"
 3030              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3031              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3032              		.file 65 "/usr/local/include/python3.8/import.h"
 3033              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3034              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3035              		.file 68 "/usr/include/malloc.h"
 3036              		.file 69 "armwave.h"
 3037              		.file 70 "/usr/include/stdlib.h"
 3038              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3039              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3040              		.file 73 "<built-in>"
 3041              		.file 74 "/usr/include/assert.h"
