   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C4C19FE5 		ldr	ip, .L27	@ tmp320,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 52 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp217, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp219, tmp217,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 52 view .LVU41
 279 00c8 950303E0 		mul	r3, r5, r3	@ tmp221, g_armwave_state.bitdepth_height, tmp219
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 620000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 6000000A 		beq	.L11		@,
 289 00dc 8350A0E1 		lsl	r5, r3, #1	@ _8, tmp221,
 290              	.LVL8:
 291              		.loc 1 79 5 view .LVU45
 292 00e0 043040E2 		sub	r3, r0, #4	@ tmp319, slice_y,
 293 00e4 0C308DE5 		str	r3, [sp, #12]	@ tmp319, %sfp
 294              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 295              		.loc 1 79 11 view .LVU46
 296 00e8 0030A0E3 		mov	r3, #0	@ w,
 297 00ec 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 298              	.LVL9:
 299              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 301              		.loc 1 84 9 view .LVU48
 302              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 80 64 is_stmt 0 view .LVU49
 304 00f0 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 305 00f4 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 306 00f8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp319, %sfp
 307 00fc 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 308 0100 93E223E0 		mla	r3, r3, r2, lr	@ tmp230, g_armwave_state.wave_stride, w, tmp319
 309              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 84 16 view .LVU50
 311 0104 0000A0E3 		mov	r0, #0	@ yy,
 312 0108 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 313 010c 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 314              	.LVL10:
 315              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 316              		.loc 1 87 13 is_stmt 1 view .LVU51
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 317              		.loc 1 101 17 view .LVU52
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 106 17 view .LVU53
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 319              		.loc 1 101 17 view .LVU54
 320              		.loc 1 106 17 view .LVU55
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 101 17 view .LVU56
 322              		.loc 1 106 17 view .LVU57
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 101 17 view .LVU58
 324              		.loc 1 106 17 view .LVU59
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 is_stmt 0 view .LVU60
 327 0110 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 328              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 102 34 view .LVU61
 330 0114 019080E2 		add	r9, r0, #1	@ tmp261, yy,
 331 0118 028080E2 		add	r8, r0, #2	@ tmp283, yy,
 332              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 333              		.loc 1 87 18 view .LVU62
 334 011c 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _187, offset: 0B]
 335              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 336              		.loc 1 102 34 view .LVU63
 337 0120 037080E2 		add	r7, r0, #3	@ tmp303, yy,
 338              	.LVL11:
 339              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 340              		.loc 1 94 20 view .LVU64
 341 0124 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 342              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 343              		.loc 1 87 18 view .LVU65
 344 0128 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 345              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 346              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 347              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 17 view .LVU68
 349              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 350              		.loc 1 94 20 is_stmt 0 view .LVU69
 351 012c 0120A003 		moveq	r2, #1	@ tmp233,
 352 0130 0020A013 		movne	r2, #0	@ tmp233,
 353              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 354              		.loc 1 94 19 view .LVU70
 355 0134 FF005AE3 		cmp	r10, #255	@ scale_value,
 356 0138 01208203 		orreq	r2, r2, #1	@,, tmp238, tmp233
 357 013c 000052E3 		cmp	r2, #0	@ tmp238,
 358              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 106 47 view .LVU71
 360 0140 05B08AE0 		add	fp, r10, r5	@ tmp246, scale_value, _8
 361              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 362              		.loc 1 107 22 view .LVU72
 363 0144 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 364 0148 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 365              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 366              		.loc 1 94 19 view .LVU73
 367 014c 3900001A 		bne	.L20		@,
 368              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 369              		.loc 1 102 34 view .LVU74
 370 0150 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 372              		.loc 1 106 47 view .LVU75
 373 0154 40609CE5 		ldr	r6, [ip, #64]	@ tmp332, g_armwave_state.bitdepth_height
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 20 view .LVU76
 376 0158 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 377              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 378              		.loc 1 102 34 view .LVU77
 379 015c 920002E0 		mul	r2, r2, r0	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 380              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 381              		.loc 1 106 47 view .LVU78
 382 0160 05A084E0 		add	r10, r4, r5	@ tmp268, scale_value, _8
 383              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 384              		.loc 1 102 74 view .LVU79
 385 0164 2228A0E1 		lsr	r2, r2, #16	@ tmp242, tmp240,
 386              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 47 view .LVU80
 388 0168 96B222E0 		mla	r2, r6, r2, fp	@ tmp247, tmp332, tmp242, tmp246
 389              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 390              		.loc 1 94 20 view .LVU81
 391 016c 01B0A003 		moveq	fp, #1	@ tmp254,
 392 0170 00B0A013 		movne	fp, #0	@ tmp254,
 393              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 394              		.loc 1 94 19 view .LVU82
 395 0174 FF0054E3 		cmp	r4, #255	@ scale_value,
 396 0178 0B40A011 		movne	r4, fp	@, tmp259, tmp254
 397 017c 01408B03 		orreq	r4, fp, #1	@,, tmp259, tmp254
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU83
 400 0180 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_80, *_80
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU84
 403 0184 000054E3 		cmp	r4, #0	@ tmp259,
 404              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 405              		.loc 1 106 47 view .LVU85
 406 0188 01B08BE2 		add	fp, fp, #1	@ tmp250, *_80,
 407 018c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp250, *_80
 408              	.LVL13:
 409              		.loc 1 107 17 is_stmt 1 view .LVU86
  91:armwave.c     ****                 
 410              		.loc 1 91 17 view .LVU87
  94:armwave.c     ****                     continue;
 411              		.loc 1 94 17 view .LVU88
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 19 is_stmt 0 view .LVU89
 414 0190 2800001A 		bne	.L20		@,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU90
 417 0194 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 418              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 419              		.loc 1 102 99 view .LVU91
 420 0198 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 421              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 422              		.loc 1 94 20 view .LVU92
 423 019c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 424              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 425              		.loc 1 102 34 view .LVU93
 426 01a0 920909E0 		mul	r9, r2, r9	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 view .LVU94
 429 01a4 0120A003 		moveq	r2, #1	@ tmp276,
 430 01a8 0020A013 		movne	r2, #0	@ tmp276,
 431              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 432              		.loc 1 102 74 view .LVU95
 433 01ac 2998A0E1 		lsr	r9, r9, #16	@ tmp264, tmp262,
 434              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 435              		.loc 1 106 47 view .LVU96
 436 01b0 05408EE0 		add	r4, lr, r5	@ tmp290, scale_value, _8
 437 01b4 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp269, g_armwave_state.bitdepth_height, tmp264, tmp268
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU97
 440 01b8 FF005EE3 		cmp	lr, #255	@ scale_value,
 441 01bc 02E0A011 		movne	lr, r2	@, tmp281, tmp276
 442 01c0 01E08203 		orreq	lr, r2, #1	@,, tmp281, tmp276
 443 01c4 00005EE3 		cmp	lr, #0	@ tmp281,
 444              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 445              		.loc 1 106 47 view .LVU98
 446 01c8 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_111, *_111
 447 01cc 012082E2 		add	r2, r2, #1	@ tmp272, *_111,
 448 01d0 0A20C1E7 		strb	r2, [r1, r10]	@ tmp272, *_111
 449              		.loc 1 107 17 is_stmt 1 view .LVU99
 450              	.LVL14:
  91:armwave.c     ****                 
 451              		.loc 1 91 17 view .LVU100
  94:armwave.c     ****                     continue;
 452              		.loc 1 94 17 view .LVU101
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 is_stmt 0 view .LVU102
 455 01d4 1700001A 		bne	.L20		@,
 456              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 457              		.loc 1 102 34 view .LVU103
 458 01d8 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 459              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 460              		.loc 1 94 20 view .LVU104
 461 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 462              	.LVL15:
 463              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 464              		.loc 1 106 47 view .LVU105
 465 01e0 032085E0 		add	r2, r5, r3	@ tmp311, _8, word
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 34 view .LVU106
 468 01e4 9E0808E0 		mul	r8, lr, r8	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 99 view .LVU107
 471 01e8 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 472              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 473              		.loc 1 102 74 view .LVU108
 474 01ec 2888A0E1 		lsr	r8, r8, #16	@ tmp286, tmp284,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU109
 477 01f0 9E4828E0 		mla	r8, lr, r8, r4	@ tmp291, g_armwave_state.bitdepth_height, tmp286, tmp290
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU110
 480 01f4 01E0A003 		moveq	lr, #1	@ tmp297,
 481 01f8 00E0A013 		movne	lr, #0	@ tmp297,
 482              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 483              		.loc 1 94 19 view .LVU111
 484 01fc FF0053E3 		cmp	r3, #255	@ word,
 485 0200 01E08E03 		orreq	lr, lr, #1	@,, tmp302, tmp297
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU112
 488 0204 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_142, *_142
 489              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 490              		.loc 1 94 19 view .LVU113
 491 0208 00005EE3 		cmp	lr, #0	@ tmp302,
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU114
 494 020c 013083E2 		add	r3, r3, #1	@ tmp294, *_142,
 495 0210 0830C1E7 		strb	r3, [r1, r8]	@ tmp294, *_142
 496              		.loc 1 107 17 is_stmt 1 view .LVU115
 497              	.LVL16:
  91:armwave.c     ****                 
 498              		.loc 1 91 17 view .LVU116
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU117
 500              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 501              		.loc 1 94 19 is_stmt 0 view .LVU118
 502 0214 0700001A 		bne	.L20		@,
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 34 view .LVU119
 505 0218 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 99 view .LVU120
 508 021c 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 34 view .LVU121
 511 0220 930707E0 		mul	r7, r3, r7	@ tmp305, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 512              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 513              		.loc 1 102 74 view .LVU122
 514 0224 2778A0E1 		lsr	r7, r7, #16	@ tmp307, tmp305,
 515              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 516              		.loc 1 106 47 view .LVU123
 517 0228 9E2727E0 		mla	r7, lr, r7, r2	@ tmp312, g_armwave_state.bitdepth_height, tmp307, tmp311
 518 022c 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_173, *_173
 519 0230 013083E2 		add	r3, r3, #1	@ tmp315, *_173,
 520 0234 0730C1E7 		strb	r3, [r1, r7]	@ tmp315, *_173
 521              		.loc 1 107 17 is_stmt 1 view .LVU124
 522              	.LVL17:
 523              	.L20:
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 9 is_stmt 0 view .LVU125
 526 0238 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 527              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 528              		.loc 1 84 37 view .LVU126
 529 023c 040080E2 		add	r0, r0, #4	@ yy, yy,
 530              	.LVL18:
 531              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 532              		.loc 1 84 9 view .LVU127
 533 0240 000053E1 		cmp	r3, r0	@ height, yy
 534 0244 B1FFFF8A 		bhi	.L17		@,
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU128
 537 0248 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 5 view .LVU129
 540 024c 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 view .LVU130
 543 0250 012082E2 		add	r2, r2, #1	@ w, w,
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 5 view .LVU131
 546 0254 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 547              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 79 44 view .LVU132
 549 0258 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 550              	.LVL19:
 551              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 552              		.loc 1 79 5 view .LVU133
 553 025c A3FFFFBA 		blt	.L18		@,
 554              	.LVL20:
 555              	.L11:
 556              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 557              		.loc 1 111 1 view .LVU134
 558 0260 14D08DE2 		add	sp, sp, #20	@,,
 559              		.cfi_def_cfa_offset 36
 560              		@ sp needed	@
 561 0264 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 562              	.L28:
 563              		.align	2
 564              	.L27:
 565 0268 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL21:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 179 5 view .LVU139
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 180 5 view .LVU140
 181:armwave.c     ****     uint32_t offset;
 587              		.loc 1 181 5 view .LVU141
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 588              		.loc 1 183 5 view .LVU142
 589              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 590              		.loc 1 173 1 is_stmt 0 view .LVU143
 591 026c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 592              		.cfi_def_cfa_offset 32
 593              		.cfi_offset 4, -32
 594              		.cfi_offset 5, -28
 595              		.cfi_offset 6, -24
 596              		.cfi_offset 7, -20
 597              		.cfi_offset 8, -16
 598              		.cfi_offset 9, -12
 599              		.cfi_offset 10, -8
 600              		.cfi_offset 14, -4
 601              	@ armwave.c:183:     assert(out_buffer != NULL);
 602              		.loc 1 183 5 view .LVU144
 603 0270 005050E2 		subs	r5, r0, #0	@ out_buffer, out_buffer
 604 0274 3A00000A 		beq	.L39		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 605              		.loc 1 186 5 is_stmt 1 view .LVU145
 606              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 607              		.loc 1 186 45 is_stmt 0 view .LVU146
 608 0278 F8409FE5 		ldr	r4, .L40	@ tmp221,
 609              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 186 5 view .LVU147
 611 027c 0010A0E3 		mov	r1, #0	@,
 612              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 186 59 view .LVU148
 614 0280 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 615 0284 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 616 0288 920302E0 		mul	r2, r2, r3	@ tmp174, g_armwave_state.target_height, g_armwave_state.target_width
 617              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 618              		.loc 1 186 5 view .LVU149
 619 028c 0221A0E1 		lsl	r2, r2, #2	@, tmp174,
 620 0290 FEFFFFEB 		bl	memset		@
 621              	.LVL22:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 622              		.loc 1 188 5 is_stmt 1 view .LVU150
 623              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 624              		.loc 1 188 10 is_stmt 0 view .LVU151
 625 0294 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 626 0298 40E094E5 		ldr	lr, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 627 029c 9E030EE0 		mul	lr, lr, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 628              	.LVL23:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     **** #if 0
 192:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 195:armwave.c     ****         // most normal waveforms.
 196:armwave.c     ****         wave_word = *base_32ptr++;
 197:armwave.c     **** 
 198:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 199:armwave.c     ****             for(w = 0; w < 2; w++) {
 200:armwave.c     ****                 value = wave_word & 0xffff;
 201:armwave.c     ****                 wave_word >>= 16;
 202:armwave.c     **** 
 203:armwave.c     ****                 if(value != 0) {
 204:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 205:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 206:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 207:armwave.c     **** 
 208:armwave.c     ****                     r = MIN(rr, 255);
 209:armwave.c     ****                     g = MIN(gg, 255);
 210:armwave.c     ****                     b = MIN(bb, 255);
 211:armwave.c     **** 
 212:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 213:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 214:armwave.c     **** 
 215:armwave.c     ****                     // Plot the pixels
 216:armwave.c     ****                     nsub = n + (w * 2);
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 220:armwave.c     **** 
 221:armwave.c     ****                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 225:armwave.c     ****                 }
 226:armwave.c     ****             }
 227:armwave.c     ****         }
 228:armwave.c     ****     }
 229:armwave.c     **** #endif
 230:armwave.c     **** 
 231:armwave.c     ****     for(n = 0; n < (npix / 2); n += 1) {
 629              		.loc 1 231 5 is_stmt 1 view .LVU152
 630              		.loc 1 231 5 is_stmt 0 view .LVU153
 631 02a0 01005EE3 		cmp	lr, #1	@ npix,
 632              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 633              		.loc 1 231 26 view .LVU154
 634 02a4 AEEF8EE0 		add	lr, lr, lr, lsr #31	@ tmp187, npix, npix,
 635              	.LVL24:
 636              		.loc 1 231 26 view .LVU155
 637 02a8 CEE0A0E1 		asr	lr, lr, #1	@ _67, tmp187,
 638              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 639              		.loc 1 231 5 view .LVU156
 640 02ac F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 641 02b0 04C094E5 		ldr	ip, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 642              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 232:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 233:armwave.c     ****         value = wave_word & 0xffff;
 234:armwave.c     **** 
 235:armwave.c     ****         if(value != 0) {
 236:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 643              		.loc 1 236 44 view .LVU157
 644 02b4 FC86D4E1 		ldrsh	r8, [r4, #108]	@ _13, g_armwave_state.ch1_color.r
 645              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 646              		.loc 1 237 44 view .LVU158
 647 02b8 FE76D4E1 		ldrsh	r7, [r4, #110]	@ _17, g_armwave_state.ch1_color.g
 648              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 649              		.loc 1 238 44 view .LVU159
 650 02bc F067D4E1 		ldrsh	r6, [r4, #112]	@ _20, g_armwave_state.ch1_color.b
 651              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 239:armwave.c     **** 
 240:armwave.c     ****             r = MIN(rr, 255);
 241:armwave.c     ****             g = MIN(gg, 255);
 242:armwave.c     ****             b = MIN(bb, 255);
 243:armwave.c     **** 
 244:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 245:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 246:armwave.c     **** 
 247:armwave.c     ****             // Plot the pixels
 248:armwave.c     ****             nsub = n * 2;
 249:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 652              		.loc 1 249 49 view .LVU160
 653 02c0 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _35, g_armwave_state.vscale_frac
 654 02c4 02C04CE2 		sub	ip, ip, #2	@ ivtmp.49, g_armwave_state.ch1_buffer,
 655              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 656              		.loc 1 231 11 view .LVU161
 657 02c8 0000A0E3 		mov	r0, #0	@ n,
 658              	.LVL25:
 659              	.L33:
 232:armwave.c     ****         value = wave_word & 0xffff;
 660              		.loc 1 232 9 is_stmt 1 view .LVU162
 233:armwave.c     **** 
 661              		.loc 1 233 9 view .LVU163
 662              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 663              		.loc 1 233 15 is_stmt 0 view .LVU164
 664 02cc B230FCE1 		ldrh	r3, [ip, #2]!	@ MEM[base: _102, offset: 0B], MEM[base: _102, offset: 0B]
 665              	.LVL26:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 666              		.loc 1 235 9 is_stmt 1 view .LVU165
 667              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 668              		.loc 1 235 11 is_stmt 0 view .LVU166
 669 02d0 FF3013E2 		ands	r3, r3, #255	@ value, MEM[base: _102, offset: 0B],
 670              	.LVL27:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 671              		.loc 1 235 11 view .LVU167
 672 02d4 1E00000A 		beq	.L32		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 673              		.loc 1 236 13 is_stmt 1 view .LVU168
 674              	.LVL28:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 675              		.loc 1 237 13 view .LVU169
 238:armwave.c     **** 
 676              		.loc 1 238 13 view .LVU170
 240:armwave.c     ****             g = MIN(gg, 255);
 677              		.loc 1 240 13 view .LVU171
 241:armwave.c     ****             b = MIN(bb, 255);
 678              		.loc 1 241 13 view .LVU172
 242:armwave.c     **** 
 679              		.loc 1 242 13 view .LVU173
 245:armwave.c     **** 
 680              		.loc 1 245 13 view .LVU174
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 681              		.loc 1 248 13 view .LVU175
 682              	@ armwave.c:248:             nsub = n * 2;
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 683              		.loc 1 248 18 is_stmt 0 view .LVU176
 684 02d8 8010A0E1 		lsl	r1, r0, #1	@ nsub, n,
 685              		.loc 1 249 13 is_stmt 1 view .LVU177
 250:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 686              		.loc 1 250 13 view .LVU178
 687              	.LVL29:
 251:armwave.c     ****             xx = (nsub >> 8);
 688              		.loc 1 251 13 view .LVU179
 252:armwave.c     **** 
 253:armwave.c     ****             //for(y = yy; y < ye; y++) {
 254:armwave.c     ****             y = yy;
 689              		.loc 1 254 13 view .LVU180
 255:armwave.c     ****             {
 256:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 690              		.loc 1 256 17 view .LVU181
 257:armwave.c     ****                 *(out_buffer_base + offset) = word;
 691              		.loc 1 257 17 view .LVU182
 692              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 693              		.loc 1 238 47 is_stmt 0 view .LVU183
 694 02dc 83066AE1 		smulbb	r10, r3, r6	@ tmp207, value, _20
 695              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 696              		.loc 1 249 24 view .LVU184
 697 02e0 7120EFE6 		uxtb	r2, r1	@ nsub, nsub
 698              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 699              		.loc 1 256 35 view .LVU185
 700 02e4 589094E5 		ldr	r9, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 701              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 702              		.loc 1 249 24 view .LVU186
 703 02e8 902A07EE 		vmov	s15, r2	@ int	@ nsub, nsub
 704              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 705              		.loc 1 237 47 view .LVU187
 706 02ec 830762E1 		smulbb	r2, r3, r7	@ tmp211, value, _17
 707              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 708              		.loc 1 238 16 view .LVU188
 709 02f0 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp207,
 710              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 711              		.loc 1 242 17 view .LVU189
 712 02f4 FF005AE3 		cmp	r10, #255	@ bb,
 713              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 714              		.loc 1 249 32 view .LVU190
 715 02f8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, nsub
 716              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 717              		.loc 1 237 16 view .LVU191
 718 02fc 4224A0E1 		asr	r2, r2, #8	@ gg, tmp211,
 719              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 720              		.loc 1 236 47 view .LVU192
 721 0300 830863E1 		smulbb	r3, r3, r8	@ tmp217, value, _13
 722              	.LVL30:
 723              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 724              		.loc 1 242 17 view .LVU193
 725 0304 FFA0A0A3 		movge	r10, #255	@ bb,
 726              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 727              		.loc 1 241 17 view .LVU194
 728 0308 FF0052E3 		cmp	r2, #255	@ gg,
 729 030c FF20A0A3 		movge	r2, #255	@ gg,
 730              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 731              		.loc 1 236 16 view .LVU195
 732 0310 4334A0E1 		asr	r3, r3, #8	@ rr, tmp217,
 733              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 734              		.loc 1 240 17 view .LVU196
 735 0314 FF0053E3 		cmp	r3, #255	@ rr,
 736              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 737              		.loc 1 249 32 view .LVU197
 738 0318 877A67EE 		vmul.f32	s15, s15, s14	@ tmp199, tmp198, _35
 739              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 740              		.loc 1 245 48 view .LVU198
 741 031c 0224A0E1 		lsl	r2, r2, #8	@ tmp212, gg,
 742              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 743              		.loc 1 245 36 view .LVU199
 744 0320 0AA8A0E1 		lsl	r10, r10, #16	@ tmp208, bb,
 745              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 746              		.loc 1 240 17 view .LVU200
 747 0324 FF30A0A3 		movge	r3, #255	@ rr,
 748              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 749              		.loc 1 245 36 view .LVU201
 750 0328 FFA80AE2 		and	r10, r10, #16711680	@ tmp209, tmp208,
 751              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 752              		.loc 1 245 48 view .LVU202
 753 032c 7220FFE6 		uxth	r2, r2	@ tmp213, tmp212
 754              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 755              		.loc 1 245 43 view .LVU203
 756 0330 02208AE1 		orr	r2, r10, r2	@ tmp215, tmp209, tmp213
 757              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 758              		.loc 1 245 54 view .LVU204
 759 0334 7330EFE6 		uxtb	r3, r3	@ rr, rr
 760              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 761              		.loc 1 249 16 view .LVU205
 762 0338 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp199
 763              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 764              		.loc 1 245 54 view .LVU206
 765 033c 033082E1 		orr	r3, r2, r3	@ tmp219, tmp215, rr
 766              	@ armwave.c:251:             xx = (nsub >> 8);
 251:armwave.c     **** 
 767              		.loc 1 251 24 view .LVU207
 768 0340 4114A0E1 		asr	r1, r1, #8	@ xx, nsub,
 769              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 770              		.loc 1 245 18 view .LVU208
 771 0344 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp219,
 772              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 773              		.loc 1 257 35 view .LVU209
 774 0348 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 775 034c 991221E0 		mla	r1, r9, r2, r1	@ tmp205, g_armwave_state.target_width, yy, xx
 776              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 777              		.loc 1 257 45 view .LVU210
 778 0350 013185E7 		str	r3, [r5, r1, lsl #2]	@ word, *_42
 779              	.LVL31:
 780              	.L32:
 781              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 782              		.loc 1 231 34 discriminator 2 view .LVU211
 783 0354 010080E2 		add	r0, r0, #1	@ n, n,
 784              	.LVL32:
 785              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 786              		.loc 1 231 5 discriminator 2 view .LVU212
 787 0358 0E0050E1 		cmp	r0, lr	@ n, _67
 788 035c DAFFFFBA 		blt	.L33		@,
 789 0360 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 790              	.LVL33:
 791              	.L39:
 183:armwave.c     **** 
 792              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU213
 793 0364 10309FE5 		ldr	r3, .L40+4	@,
 794 0368 B720A0E3 		mov	r2, #183	@,
 795 036c 0C109FE5 		ldr	r1, .L40+8	@,
 796 0370 0C009FE5 		ldr	r0, .L40+12	@,
 797              	.LVL34:
 183:armwave.c     **** 
 798              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU214
 799 0374 FEFFFFEB 		bl	__assert_fail		@
 800              	.LVL35:
 801              	.L41:
 183:armwave.c     **** 
 802              		.loc 1 183 5 discriminator 1 view .LVU215
 803              		.align	2
 804              	.L40:
 805 0378 00000000 		.word	g_armwave_state
 806 037c 00000000 		.word	.LANCHOR0
 807 0380 20000000 		.word	.LC2
 808 0384 2C000000 		.word	.LC3
 809              		.cfi_endproc
 810              	.LFE60:
 812              		.global	__aeabi_idiv
 813              		.align	2
 814              		.global	armwave_generate
 815              		.syntax unified
 816              		.arm
 817              		.fpu vfp
 819              	armwave_generate:
 820              	.LFB61:
 258:armwave.c     ****             }
 259:armwave.c     ****         }
 260:armwave.c     ****     }
 261:armwave.c     **** }
 262:armwave.c     **** 
 263:armwave.c     **** /*
 264:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 265:armwave.c     ****  */
 266:armwave.c     **** void armwave_generate()
 267:armwave.c     **** {
 821              		.loc 1 267 1 is_stmt 1 view -0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 16
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 268:armwave.c     ****     uint32_t yy;
 825              		.loc 1 268 5 view .LVU217
 269:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 826              		.loc 1 269 5 view .LVU218
 827              	.LVL36:
 270:armwave.c     **** 
 271:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 828              		.loc 1 271 5 view .LVU219
 829              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t yy;
 830              		.loc 1 267 1 is_stmt 0 view .LVU220
 831 0388 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 832              		.cfi_def_cfa_offset 36
 833              		.cfi_offset 4, -36
 834              		.cfi_offset 5, -32
 835              		.cfi_offset 6, -28
 836              		.cfi_offset 7, -24
 837              		.cfi_offset 8, -20
 838              		.cfi_offset 9, -16
 839              		.cfi_offset 10, -12
 840              		.cfi_offset 11, -8
 841              		.cfi_offset 14, -4
 842              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 843              		.loc 1 271 5 view .LVU221
 844 038c 0010A0E3 		mov	r1, #0	@,
 845              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 846              		.loc 1 271 58 view .LVU222
 847 0390 14829FE5 		ldr	r8, .L61	@ tmp342,
 848              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t yy;
 849              		.loc 1 267 1 view .LVU223
 850 0394 14D04DE2 		sub	sp, sp, #20	@,,
 851              		.cfi_def_cfa_offset 56
 852              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 853              		.loc 1 271 5 view .LVU224
 854 0398 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 855 039c 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 856 03a0 FEFFFFEB 		bl	memset		@
 857              	.LVL37:
 272:armwave.c     **** 
 273:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 858              		.loc 1 273 5 is_stmt 1 view .LVU225
 859              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 860              		.loc 1 273 68 is_stmt 0 view .LVU226
 861 03a4 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 862              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 863              		.loc 1 273 38 view .LVU227
 864 03a8 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 865              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 866              		.loc 1 273 51 view .LVU228
 867 03ac 0310A0E1 		mov	r1, r3	@, _35
 868 03b0 0500A0E1 		mov	r0, r5	@, prephitmp_229
 869              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 870              		.loc 1 273 68 view .LVU229
 871 03b4 00308DE5 		str	r3, [sp]	@ _35, %sfp
 872              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 873              		.loc 1 273 51 view .LVU230
 874 03b8 FEFFFFEB 		bl	__aeabi_idiv		@
 875              	.LVL38:
 876              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 877              		.loc 1 273 5 view .LVU231
 878 03bc 000050E3 		cmp	r0, #0	@,
 879 03c0 7700000A 		beq	.L42		@,
 880 03c4 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 881              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 882              		.loc 1 273 12 view .LVU232
 883 03c8 0030A0E3 		mov	r3, #0	@ yy,
 884 03cc 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 885              	.LVL39:
 886              	.L51:
 274:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 275:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 276:armwave.c     **** 
 277:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 887              		.loc 1 277 9 is_stmt 1 discriminator 3 view .LVU233
 888 03d0 D020CDE1 		ldrd	r2, [sp]	@, %sfp
 889              	.LBB10:
 890              	.LBB11:
 891              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 892              		.loc 1 71 52 is_stmt 0 discriminator 3 view .LVU234
 893 03d4 400098E5 		ldr	r0, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 894              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 895              		.loc 1 79 5 discriminator 3 view .LVU235
 896 03d8 000054E3 		cmp	r4, #0	@ prephitmp_239,
 897              	.LBE11:
 898              	.LBE10:
 899              	@ armwave.c:277:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 900              		.loc 1 277 9 discriminator 3 view .LVU236
 901 03dc 930202E0 		mul	r2, r3, r2	@ _5, yy, _35
 902              	.LVL40:
 903              	.LBB13:
 904              	.LBI10:
  62:armwave.c     **** {
 905              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU237
 906              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 907              		.loc 1 64 5 discriminator 3 view .LVU238
  65:armwave.c     ****     uint8_t *wave_base;
 908              		.loc 1 65 5 discriminator 3 view .LVU239
  66:armwave.c     ****     uint8_t *write_buffer_base;
 909              		.loc 1 66 5 discriminator 3 view .LVU240
  67:armwave.c     ****     uint8_t *write_buffer;
 910              		.loc 1 67 5 discriminator 3 view .LVU241
  68:armwave.c     **** 
 911              		.loc 1 68 5 discriminator 3 view .LVU242
  71:armwave.c     **** 
 912              		.loc 1 71 5 discriminator 3 view .LVU243
 913              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 914              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU244
 915 03e0 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 916              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 917              		.loc 1 71 40 discriminator 3 view .LVU245
 918 03e4 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 919              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 920              		.loc 1 71 65 discriminator 3 view .LVU246
 921 03e8 930203E0 		mul	r3, r3, r2	@ tmp239, g_armwave_state.cmp_x_bitdepth_scale, _5
 922              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 923              		.loc 1 71 105 discriminator 3 view .LVU247
 924 03ec 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp239,
 925              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 926              		.loc 1 71 52 discriminator 3 view .LVU248
 927 03f0 900300E0 		mul	r0, r0, r3	@ tmp243, g_armwave_state.bitdepth_height, tmp241
 928 03f4 8000A0E1 		lsl	r0, r0, #1	@ _23, tmp243,
 929              	.LVL41:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 930              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU249
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 931              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU250
 932 03f8 610000DA 		ble	.L44		@,
 933              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 934              		.loc 1 79 11 view .LVU251
 935 03fc 0070A0E3 		mov	r7, #0	@ w,
 936 0400 043042E2 		sub	r3, r2, #4	@ _32, _5,
 937 0404 08308DE5 		str	r3, [sp, #8]	@ _32, %sfp
 938              	.LVL42:
 939              	.L50:
  80:armwave.c     **** 
 940              		.loc 1 80 9 is_stmt 1 view .LVU252
 941              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 942              		.loc 1 84 9 is_stmt 0 view .LVU253
 943 0408 00209DE5 		ldr	r2, [sp]	@ _35, %sfp
 944              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 945              		.loc 1 80 64 view .LVU254
 946 040c 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 947              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 948              		.loc 1 84 9 view .LVU255
 949 0410 000052E3 		cmp	r2, #0	@ _35,
 950              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 951              		.loc 1 80 36 view .LVU256
 952 0414 142098E5 		ldr	r2, [r8, #20]	@ _24, g_armwave_state.wave_buffer
 953              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 954              		.loc 1 80 64 view .LVU257
 955 0418 930703E0 		mul	r3, r3, r7	@ _28, g_armwave_state.wave_stride, w
 956              	.LVL43:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 957              		.loc 1 84 9 is_stmt 1 view .LVU258
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 958              		.loc 1 84 9 is_stmt 0 view .LVU259
 959 041c 5200000A 		beq	.L45		@,
 960 0420 08C09DE5 		ldr	ip, [sp, #8]	@ _32, %sfp
 961 0424 0C3083E0 		add	r3, r3, ip	@ tmp248, _28, _32
 962              	.LVL44:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 963              		.loc 1 84 9 view .LVU260
 964 0428 036082E0 		add	r6, r2, r3	@ ivtmp.56, _24, tmp248
 965              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 966              		.loc 1 84 16 view .LVU261
 967 042c 00C0A0E3 		mov	ip, #0	@ yy,
 968              	.LVL45:
 969              	.L49:
  87:armwave.c     **** 
 970              		.loc 1 87 13 is_stmt 1 view .LVU262
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 971              		.loc 1 101 17 view .LVU263
 106:armwave.c     ****                 word >>= 8;
 972              		.loc 1 106 17 view .LVU264
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 973              		.loc 1 101 17 view .LVU265
 106:armwave.c     ****                 word >>= 8;
 974              		.loc 1 106 17 view .LVU266
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 975              		.loc 1 101 17 view .LVU267
 106:armwave.c     ****                 word >>= 8;
 976              		.loc 1 106 17 view .LVU268
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 977              		.loc 1 101 17 view .LVU269
 106:armwave.c     ****                 word >>= 8;
 978              		.loc 1 106 17 view .LVU270
 979              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 980              		.loc 1 87 18 is_stmt 0 view .LVU271
 981 0430 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _272, offset: 0B]
 982              	.LVL46:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 983              		.loc 1 89 13 is_stmt 1 view .LVU272
  91:armwave.c     ****                 
 984              		.loc 1 91 17 view .LVU273
  94:armwave.c     ****                     continue;
 985              		.loc 1 94 17 view .LVU274
 986              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 987              		.loc 1 102 34 is_stmt 0 view .LVU275
 988 0434 01A08CE2 		add	r10, ip, #1	@ tmp278, yy,
 989              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 990              		.loc 1 94 20 view .LVU276
 991 0438 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 992 043c 0120A003 		moveq	r2, #1	@ tmp250,
 993 0440 0020A013 		movne	r2, #0	@ tmp250,
 994              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 995              		.loc 1 94 19 view .LVU277
 996 0444 FF0059E3 		cmp	r9, #255	@ scale_value,
 997 0448 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 998              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 999              		.loc 1 107 22 view .LVU278
 1000 044c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1001              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1002              		.loc 1 94 19 view .LVU279
 1003 0450 000052E3 		cmp	r2, #0	@ tmp255,
 1004              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1005              		.loc 1 102 34 view .LVU280
 1006 0454 02508CE2 		add	r5, ip, #2	@ tmp300, yy,
 1007              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1008              		.loc 1 106 47 view .LVU281
 1009 0458 00B089E0 		add	fp, r9, r0	@ tmp263, scale_value, _23
 1010              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1011              		.loc 1 107 22 view .LVU282
 1012 045c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1013 0460 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1014              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1015              		.loc 1 94 19 view .LVU283
 1016 0464 3B00001A 		bne	.L53		@,
 1017              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1018              		.loc 1 102 34 view .LVU284
 1019 0468 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1020              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1021              		.loc 1 106 47 view .LVU285
 1022 046c 40E098E5 		ldr	lr, [r8, #64]	@ tmp362, g_armwave_state.bitdepth_height
 1023              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1024              		.loc 1 94 20 view .LVU286
 1025 0470 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1026              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1027              		.loc 1 102 34 view .LVU287
 1028 0474 920C02E0 		mul	r2, r2, ip	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1029              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1030              		.loc 1 106 47 view .LVU288
 1031 0478 009084E0 		add	r9, r4, r0	@ tmp285, scale_value, _23
 1032              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1033              		.loc 1 102 74 view .LVU289
 1034 047c 2228A0E1 		lsr	r2, r2, #16	@ tmp259, tmp257,
 1035              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1036              		.loc 1 106 47 view .LVU290
 1037 0480 9EB222E0 		mla	r2, lr, r2, fp	@ tmp264, tmp362, tmp259, tmp263
 1038              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1039              		.loc 1 94 20 view .LVU291
 1040 0484 01B0A003 		moveq	fp, #1	@ tmp271,
 1041 0488 00B0A013 		movne	fp, #0	@ tmp271,
 1042              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1043              		.loc 1 94 19 view .LVU292
 1044 048c FF0054E3 		cmp	r4, #255	@ scale_value,
 1045 0490 0B40A011 		movne	r4, fp	@, tmp276, tmp271
 1046 0494 01408B03 		orreq	r4, fp, #1	@,, tmp276, tmp271
 1047              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1048              		.loc 1 106 47 view .LVU293
 1049 0498 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_91, *_91
 1050              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1051              		.loc 1 94 19 view .LVU294
 1052 049c 000054E3 		cmp	r4, #0	@ tmp276,
 1053              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1054              		.loc 1 106 47 view .LVU295
 1055 04a0 01B08BE2 		add	fp, fp, #1	@ tmp267, *_91,
 1056 04a4 02B0C1E7 		strb	fp, [r1, r2]	@ tmp267, *_91
 1057              	.LVL47:
 107:armwave.c     ****             }
 1058              		.loc 1 107 17 is_stmt 1 view .LVU296
  91:armwave.c     ****                 
 1059              		.loc 1 91 17 view .LVU297
  94:armwave.c     ****                     continue;
 1060              		.loc 1 94 17 view .LVU298
 1061              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1062              		.loc 1 94 19 is_stmt 0 view .LVU299
 1063 04a8 2A00001A 		bne	.L53		@,
 1064              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1065              		.loc 1 102 34 view .LVU300
 1066 04ac 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1067              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1068              		.loc 1 102 99 view .LVU301
 1069 04b0 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1070              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1071              		.loc 1 94 20 view .LVU302
 1072 04b4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1073              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1074              		.loc 1 102 34 view .LVU303
 1075 04b8 920A0AE0 		mul	r10, r2, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1076              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1077              		.loc 1 94 20 view .LVU304
 1078 04bc FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1079 04c0 0120A003 		moveq	r2, #1	@ tmp293,
 1080              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1081              		.loc 1 102 74 view .LVU305
 1082 04c4 2AA8A0E1 		lsr	r10, r10, #16	@ tmp281, tmp279,
 1083              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1084              		.loc 1 94 20 view .LVU306
 1085 04c8 0020A013 		movne	r2, #0	@ tmp293,
 1086              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1087              		.loc 1 106 47 view .LVU307
 1088 04cc 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp286, g_armwave_state.bitdepth_height, tmp281, tmp285
 1089 04d0 00408EE0 		add	r4, lr, r0	@ tmp307, scale_value, _23
 1090              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1091              		.loc 1 94 19 view .LVU308
 1092 04d4 FF005EE3 		cmp	lr, #255	@ scale_value,
 1093 04d8 02E0A011 		movne	lr, r2	@, tmp298, tmp293
 1094 04dc 01E08203 		orreq	lr, r2, #1	@,, tmp298, tmp293
 1095              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1096              		.loc 1 106 47 view .LVU309
 1097 04e0 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_122, *_122
 1098              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1099              		.loc 1 94 19 view .LVU310
 1100 04e4 00005EE3 		cmp	lr, #0	@ tmp298,
 1101              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1102              		.loc 1 106 47 view .LVU311
 1103 04e8 012082E2 		add	r2, r2, #1	@ tmp289, *_122,
 1104 04ec 0920C1E7 		strb	r2, [r1, r9]	@ tmp289, *_122
 107:armwave.c     ****             }
 1105              		.loc 1 107 17 is_stmt 1 view .LVU312
 1106              	.LVL48:
  91:armwave.c     ****                 
 1107              		.loc 1 91 17 view .LVU313
  94:armwave.c     ****                     continue;
 1108              		.loc 1 94 17 view .LVU314
 1109              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1110              		.loc 1 94 19 is_stmt 0 view .LVU315
 1111 04f0 1800001A 		bne	.L53		@,
 1112              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1113              		.loc 1 102 34 view .LVU316
 1114 04f4 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1115              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1116              		.loc 1 94 20 view .LVU317
 1117 04f8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1118              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1119              		.loc 1 106 47 view .LVU318
 1120 04fc 032080E0 		add	r2, r0, r3	@ tmp328, _23, word
 1121              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1122              		.loc 1 102 34 view .LVU319
 1123 0500 9E0505E0 		mul	r5, lr, r5	@ tmp301, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 1124              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1125              		.loc 1 102 99 view .LVU320
 1126 0504 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1127              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1128              		.loc 1 102 74 view .LVU321
 1129 0508 2558A0E1 		lsr	r5, r5, #16	@ tmp303, tmp301,
 1130              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1131              		.loc 1 106 47 view .LVU322
 1132 050c 9E4525E0 		mla	r5, lr, r5, r4	@ tmp308, g_armwave_state.bitdepth_height, tmp303, tmp307
 1133              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1134              		.loc 1 94 20 view .LVU323
 1135 0510 01E0A003 		moveq	lr, #1	@ tmp314,
 1136 0514 00E0A013 		movne	lr, #0	@ tmp314,
 1137              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1138              		.loc 1 94 19 view .LVU324
 1139 0518 FF0053E3 		cmp	r3, #255	@ word,
 1140 051c 01E08E03 		orreq	lr, lr, #1	@,, tmp319, tmp314
 1141              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1142              		.loc 1 106 47 view .LVU325
 1143 0520 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_153, *_153
 1144              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1145              		.loc 1 94 19 view .LVU326
 1146 0524 00005EE3 		cmp	lr, #0	@ tmp319,
 1147              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1148              		.loc 1 106 47 view .LVU327
 1149 0528 013083E2 		add	r3, r3, #1	@ tmp311, *_153,
 1150 052c 0530C1E7 		strb	r3, [r1, r5]	@ tmp311, *_153
 107:armwave.c     ****             }
 1151              		.loc 1 107 17 is_stmt 1 view .LVU328
 1152              	.LVL49:
  91:armwave.c     ****                 
 1153              		.loc 1 91 17 view .LVU329
  94:armwave.c     ****                     continue;
 1154              		.loc 1 94 17 view .LVU330
 1155              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1156              		.loc 1 94 19 is_stmt 0 view .LVU331
 1157 0530 0800001A 		bne	.L53		@,
 1158              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1159              		.loc 1 102 34 view .LVU332
 1160 0534 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1161 0538 03408CE2 		add	r4, ip, #3	@ tmp321, yy,
 1162              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1163              		.loc 1 102 99 view .LVU333
 1164 053c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1165              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1166              		.loc 1 102 34 view .LVU334
 1167 0540 930403E0 		mul	r3, r3, r4	@ tmp322, g_armwave_state.cmp_x_bitdepth_scale, tmp321
 1168              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1169              		.loc 1 102 74 view .LVU335
 1170 0544 2338A0E1 		lsr	r3, r3, #16	@ tmp324, tmp322,
 1171              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1172              		.loc 1 106 47 view .LVU336
 1173 0548 9E2323E0 		mla	r3, lr, r3, r2	@ tmp329, g_armwave_state.bitdepth_height, tmp324, tmp328
 1174 054c 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_184, *_184
 1175 0550 012082E2 		add	r2, r2, #1	@ tmp332, *_184,
 1176 0554 0320C1E7 		strb	r2, [r1, r3]	@ tmp332, *_184
 107:armwave.c     ****             }
 1177              		.loc 1 107 17 is_stmt 1 view .LVU337
 1178              	.LVL50:
 1179              	.L53:
 1180              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1181              		.loc 1 84 9 is_stmt 0 view .LVU338
 1182 0558 00309DE5 		ldr	r3, [sp]	@ _35, %sfp
 1183              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1184              		.loc 1 84 37 view .LVU339
 1185 055c 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 1186              	.LVL51:
 1187              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1188              		.loc 1 84 9 view .LVU340
 1189 0560 0C0053E1 		cmp	r3, ip	@ _35, yy
 1190 0564 B1FFFF8A 		bhi	.L49		@,
 1191 0568 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 1192              	.LVL52:
 1193              	.L45:
 1194              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1195              		.loc 1 79 44 view .LVU341
 1196 056c 017087E2 		add	r7, r7, #1	@ w, w,
 1197              	.LVL53:
 1198              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1199              		.loc 1 79 5 view .LVU342
 1200 0570 040057E1 		cmp	r7, r4	@ w, prephitmp_239
 1201 0574 A3FFFFBA 		blt	.L50		@,
 1202 0578 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 1203 057c 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 1204 0580 00308DE5 		str	r3, [sp]	@ _35, %sfp
 1205              	.LVL54:
 1206              	.L44:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1207              		.loc 1 79 5 view .LVU343
 1208              	.LBE12:
 1209              	.LBE13:
 278:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1210              		.loc 1 278 9 is_stmt 1 discriminator 3 view .LVU344
 279:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1211              		.loc 1 279 9 discriminator 3 view .LVU345
 1212              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1213              		.loc 1 273 51 is_stmt 0 discriminator 3 view .LVU346
 1214 0584 00109DE5 		ldr	r1, [sp]	@, %sfp
 1215              	.LVL55:
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1216              		.loc 1 273 51 discriminator 3 view .LVU347
 1217 0588 0500A0E1 		mov	r0, r5	@, prephitmp_229
 1218 058c FEFFFFEB 		bl	__aeabi_idiv		@
 1219              	.LVL56:
 1220              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1221              		.loc 1 273 86 discriminator 3 view .LVU348
 1222 0590 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1223 0594 013083E2 		add	r3, r3, #1	@ yy, yy,
 1224 0598 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1225              	.LVL57:
 1226              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1227              		.loc 1 273 5 discriminator 3 view .LVU349
 1228 059c 030050E1 		cmp	r0, r3	@, yy
 1229 05a0 8AFFFF8A 		bhi	.L51		@,
 1230              	.LVL58:
 1231              	.L42:
 1232              	@ armwave.c:283: }
 280:armwave.c     ****     }
 281:armwave.c     **** 
 282:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 283:armwave.c     **** }
 1233              		.loc 1 283 1 view .LVU350
 1234 05a4 14D08DE2 		add	sp, sp, #20	@,,
 1235              		.cfi_def_cfa_offset 36
 1236              		@ sp needed	@
 1237 05a8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1238              	.L62:
 1239              		.align	2
 1240              	.L61:
 1241 05ac 00000000 		.word	g_armwave_state
 1242              		.cfi_endproc
 1243              	.LFE61:
 1245              		.align	2
 1246              		.global	armwave_setup_render
 1247              		.syntax unified
 1248              		.arm
 1249              		.fpu vfp
 1251              	armwave_setup_render:
 1252              	.LVL59:
 1253              	.LFB62:
 284:armwave.c     **** 
 285:armwave.c     **** /*
 286:armwave.c     ****  * Setup the renderer with passed parameters.
 287:armwave.c     ****  */
 288:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 289:armwave.c     **** {
 1254              		.loc 1 289 1 is_stmt 1 view -0
 1255              		.cfi_startproc
 1256              		@ args = 12, pretend = 0, frame = 0
 1257              		@ frame_needed = 0, uses_anonymous_args = 0
 290:armwave.c     ****     uint32_t length, xx;
 1258              		.loc 1 290 5 view .LVU352
 291:armwave.c     ****     float points_per_pixel;
 1259              		.loc 1 291 5 view .LVU353
 292:armwave.c     **** 
 293:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1260              		.loc 1 293 5 view .LVU354
 1261              	@ armwave.c:289: {
 289:armwave.c     ****     uint32_t length, xx;
 1262              		.loc 1 289 1 is_stmt 0 view .LVU355
 1263 05b0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1264              		.cfi_def_cfa_offset 28
 1265              		.cfi_offset 4, -28
 1266              		.cfi_offset 5, -24
 1267              		.cfi_offset 6, -20
 1268              		.cfi_offset 7, -16
 1269              		.cfi_offset 8, -12
 1270              		.cfi_offset 9, -8
 1271              		.cfi_offset 14, -4
 1272 05b4 028B2DED 		vpush.64	{d8}	@
 1273              		.cfi_def_cfa_offset 36
 1274              		.cfi_offset 80, -36
 1275              		.cfi_offset 81, -32
 1276 05b8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1277 05bc 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1278 05c0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1279 05c4 14D04DE2 		sub	sp, sp, #20	@,,
 1280              		.cfi_def_cfa_offset 56
 1281              	@ armwave.c:289: {
 289:armwave.c     ****     uint32_t length, xx;
 1282              		.loc 1 289 1 view .LVU356
 1283 05c8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1284 05cc D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1285 05d0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1286              	@ armwave.c:293:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1287              		.loc 1 293 5 view .LVU357
 1288 05d4 00308DE5 		str	r3, [sp]	@ wave_stride,
 1289 05d8 F460CDE1 		strd	r6, [sp, #4]	@,,
 1290 05dc 0230A0E1 		mov	r3, r2	@, waves_max
 1291              	.LVL60:
 1292              		.loc 1 293 5 view .LVU358
 1293 05e0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1294 05e4 0120A0E1 		mov	r2, r1	@, end_point
 1295              	.LVL61:
 1296              		.loc 1 293 5 view .LVU359
 1297 05e8 0010A0E1 		mov	r1, r0	@, start_point
 1298              	.LVL62:
 1299              		.loc 1 293 5 view .LVU360
 1300 05ec E0019FE5 		ldr	r0, .L77+12	@,
 1301              	.LVL63:
 1302              		.loc 1 293 5 view .LVU361
 1303 05f0 FEFFFFEB 		bl	printf		@
 1304              	.LVL64:
 294:armwave.c     **** 
 295:armwave.c     ****     // TODO these asserts should instead raise PyExc
 296:armwave.c     ****     assert(start_point < end_point);
 1305              		.loc 1 296 5 is_stmt 1 view .LVU362
 1306 05f4 050054E1 		cmp	r4, r5	@ start_point, end_point
 1307 05f8 6300002A 		bcs	.L74		@,
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 300:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 301:armwave.c     ****     if(target_height == 256) {
 302:armwave.c     ****         g_armwave_state.row_shift = 8;
 303:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 304:armwave.c     ****     } else if(target_height == 512) {
 305:armwave.c     ****         g_armwave_state.row_shift = 9;
 306:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 307:armwave.c     ****     } else if(target_height == 1024) {
 308:armwave.c     ****         g_armwave_state.row_shift = 10;
 309:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 310:armwave.c     ****     } else if(target_height == 2048) {
 311:armwave.c     ****         g_armwave_state.row_shift = 11;
 312:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 313:armwave.c     ****     }
 314:armwave.c     ****     */
 315:armwave.c     **** 
 316:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 317:armwave.c     ****     g_armwave_state.xstride = target_height;
 1308              		.loc 1 317 5 view .LVU363
 1309              	@ armwave.c:328:     g_armwave_state.wave_length = end_point - start_point;
 318:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 319:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 320:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 321:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 322:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 323:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 324:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 325:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 326:armwave.c     ****     g_armwave_state.target_width = target_width;
 327:armwave.c     ****     g_armwave_state.target_height = target_height;
 328:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1310              		.loc 1 328 45 is_stmt 0 view .LVU364
 1311 05fc 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1312              	.LVL65:
 1313              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1314              		.loc 1 318 49 view .LVU365
 1315 0600 706A9FED 		vldr.32	s12, .L77	@ tmp174,
 1316              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 329:armwave.c     **** 
 330:armwave.c     ****     // Calculate compound scaler
 331:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 332:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1317              		.loc 1 332 48 view .LVU366
 1318 0604 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1319              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1320              		.loc 1 332 79 view .LVU367
 1321 0608 6F6ADFED 		vldr.32	s13, .L77+4	@ tmp198,
 1322              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1323              		.loc 1 325 90 view .LVU368
 1324 060c 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 1325              	@ armwave.c:317:     g_armwave_state.xstride = target_height;
 317:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1326              		.loc 1 317 29 view .LVU369
 1327 0610 C0419FE5 		ldr	r4, .L77+16	@ tmp242,
 1328              	.LVL66:
 1329              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1330              		.loc 1 332 48 view .LVU370
 1331 0614 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 1332              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1333              		.loc 1 318 49 view .LVU371
 1334 0618 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1335              	@ armwave.c:323:     g_armwave_state.size = target_height * target_width;
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1336              		.loc 1 323 42 view .LVU372
 1337 061c 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 1338              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1339              		.loc 1 325 95 view .LVU373
 1340 0620 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 1341              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1342              		.loc 1 318 49 view .LVU374
 1343 0624 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 1344              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1345              		.loc 1 332 48 view .LVU375
 1346 0628 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1347              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 333:armwave.c     **** 
 334:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1348              		.loc 1 334 5 view .LVU376
 1349 062c 0128A0E3 		mov	r2, #65536	@ tmp201,
 1350 0630 04508DE5 		str	r5, [sp, #4]	@ _13,
 1351 0634 00608DE5 		str	r6, [sp]	@ target_width,
 1352              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1353              		.loc 1 332 48 view .LVU377
 1354 0638 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1355              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1356              		.loc 1 325 95 view .LVU378
 1357 063c 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 1358              	@ armwave.c:317:     g_armwave_state.xstride = target_height;
 317:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1359              		.loc 1 317 29 view .LVU379
 1360 0640 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1361              		.loc 1 318 5 is_stmt 1 view .LVU380
 1362              	@ armwave.c:320:     g_armwave_state.wave_stride = wave_stride;
 320:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1363              		.loc 1 320 33 is_stmt 0 view .LVU381
 1364 0644 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1365              	@ armwave.c:321:     g_armwave_state.waves_max = waves_max;
 321:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1366              		.loc 1 321 31 view .LVU382
 1367 0648 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1368              	@ armwave.c:322:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 322:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1369              		.loc 1 322 27 view .LVU383
 1370 064c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1371              	@ armwave.c:327:     g_armwave_state.target_height = target_height;
 327:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1372              		.loc 1 327 35 view .LVU384
 1373 0650 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1374              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1375              		.loc 1 334 5 view .LVU385
 1376 0654 08208DE5 		str	r2, [sp, #8]	@ tmp201,
 1377              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1378              		.loc 1 332 48 view .LVU386
 1379 0658 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1380              	@ armwave.c:324:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1381              		.loc 1 324 37 view .LVU387
 1382 065c 022CA0E3 		mov	r2, #512	@ tmp184,
 1383              	@ armwave.c:323:     g_armwave_state.size = target_height * target_width;
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1384              		.loc 1 323 26 view .LVU388
 1385 0660 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1386              	@ armwave.c:324:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1387              		.loc 1 324 37 view .LVU389
 1388 0664 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1389              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1390              		.loc 1 334 5 view .LVU390
 1391 0668 0310A0E1 		mov	r1, r3	@, tmp189
 1392              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1393              		.loc 1 325 34 view .LVU391
 1394 066c 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1395              	@ armwave.c:328:     g_armwave_state.wave_length = end_point - start_point;
 328:armwave.c     **** 
 1396              		.loc 1 328 33 view .LVU392
 1397 0670 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1398              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1399              		.loc 1 334 5 view .LVU393
 1400 0674 60019FE5 		ldr	r0, .L77+20	@,
 1401              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1402              		.loc 1 318 49 view .LVU394
 1403 0678 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1404              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1405              		.loc 1 332 79 view .LVU395
 1406 067c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1407              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1408              		.loc 1 331 42 view .LVU396
 1409 0680 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1410              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1411              		.loc 1 318 33 view .LVU397
 1412 0684 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1413              		.loc 1 319 5 is_stmt 1 view .LVU398
 1414              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1415              		.loc 1 331 42 is_stmt 0 view .LVU399
 1416 0688 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1417              	@ armwave.c:319:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1418              		.loc 1 319 30 view .LVU400
 1419 068c C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1420              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1421              		.loc 1 334 5 view .LVU401
 1422 0690 0C30A0E1 		mov	r3, ip	@, _19
 1423 0694 0C20A0E1 		mov	r2, ip	@, tmp3
 1424              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1425              		.loc 1 331 42 view .LVU402
 1426 0698 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1427              	@ armwave.c:319:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1428              		.loc 1 319 30 view .LVU403
 1429 069c 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 320:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1430              		.loc 1 320 5 is_stmt 1 view .LVU404
 321:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1431              		.loc 1 321 5 view .LVU405
 322:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1432              		.loc 1 322 5 view .LVU406
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1433              		.loc 1 323 5 view .LVU407
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1434              		.loc 1 324 5 view .LVU408
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1435              		.loc 1 325 5 view .LVU409
 326:armwave.c     ****     g_armwave_state.target_height = target_height;
 1436              		.loc 1 326 5 view .LVU410
 327:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1437              		.loc 1 327 5 view .LVU411
 328:armwave.c     **** 
 1438              		.loc 1 328 5 view .LVU412
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1439              		.loc 1 331 5 view .LVU413
 1440              		.loc 1 334 5 view .LVU414
 1441 06a0 FEFFFFEB 		bl	printf		@
 1442              	.LVL67:
 335:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 336:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 337:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 338:armwave.c     **** 
 339:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 340:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 341:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 342:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1443              		.loc 1 342 5 view .LVU415
 1444              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 343:armwave.c     **** 
 344:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1445              		.loc 1 344 23 is_stmt 0 view .LVU416
 1446 06a4 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1447              	@ armwave.c:342:     g_armwave_state.slice_height = 256; // 64;  
 342:armwave.c     **** 
 1448              		.loc 1 342 34 view .LVU417
 1449 06a8 013CA0E3 		mov	r3, #256	@ tmp203,
 1450              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 1451              		.loc 1 344 7 view .LVU418
 1452 06ac 000050E3 		cmp	r0, #0	@ _20,
 1453              	@ armwave.c:342:     g_armwave_state.slice_height = 256; // 64;  
 342:armwave.c     **** 
 1454              		.loc 1 342 34 view .LVU419
 1455 06b0 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1456              		.loc 1 344 5 is_stmt 1 view .LVU420
 1457              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 1458              		.loc 1 344 7 is_stmt 0 view .LVU421
 1459 06b4 0000000A 		beq	.L65		@,
 345:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1460              		.loc 1 345 9 is_stmt 1 view .LVU422
 1461 06b8 FEFFFFEB 		bl	free		@
 1462              	.LVL68:
 1463              	.L65:
 346:armwave.c     **** 
 347:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1464              		.loc 1 347 5 view .LVU423
 1465              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1466              		.loc 1 347 34 is_stmt 0 view .LVU424
 1467 06bc 0110A0E3 		mov	r1, #1	@,
 1468 06c0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1469 06c4 FEFFFFEB 		bl	calloc		@
 1470              	.LVL69:
 1471              	@ armwave.c:349:     assert(g_armwave_state.ch1_buffer != NULL);
 348:armwave.c     **** 
 349:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1472              		.loc 1 349 5 view .LVU425
 1473 06c8 000050E3 		cmp	r0, #0	@ _23,
 1474              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 347:armwave.c     **** 
 1475              		.loc 1 347 34 view .LVU426
 1476 06cc 0070A0E1 		mov	r7, r0	@ _23,
 1477              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 347:armwave.c     **** 
 1478              		.loc 1 347 32 view .LVU427
 1479 06d0 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1480              		.loc 1 349 5 is_stmt 1 view .LVU428
 1481 06d4 3600000A 		beq	.L75		@,
 350:armwave.c     **** 
 351:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 352:armwave.c     ****     length = end_point - start_point;
 1482              		.loc 1 352 5 view .LVU429
 1483              	.LVL70:
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1484              		.loc 1 353 5 view .LVU430
 1485              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 1486              		.loc 1 353 34 is_stmt 0 view .LVU431
 1487 06d8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1488              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 1489              		.loc 1 353 22 view .LVU432
 1490 06dc 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1491              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1492              		.loc 1 354 60 view .LVU433
 1493 06e0 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp253, g_armwave_state.slice_height
 1494              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1495              		.loc 1 355 40 view .LVU434
 1496 06e4 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1497              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1498              		.loc 1 353 34 view .LVU435
 1499 06e8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1500              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1501              		.loc 1 353 22 view .LVU436
 1502 06ec 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1503              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1504              		.loc 1 354 60 view .LVU437
 1505 06f0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp253
 1506              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1507              		.loc 1 353 22 view .LVU438
 1508 06f4 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1509              	.LVL71:
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1510              		.loc 1 354 5 is_stmt 1 view .LVU439
 1511              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1512              		.loc 1 354 60 is_stmt 0 view .LVU440
 1513 06f8 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1514              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1515              		.loc 1 354 41 view .LVU441
 1516 06fc E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1517 0700 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1518              		.loc 1 355 5 is_stmt 1 view .LVU442
 1519              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1520              		.loc 1 355 40 is_stmt 0 view .LVU443
 1521 0704 FEFFFFEB 		bl	malloc		@
 1522              	.LVL72:
 1523              	@ armwave.c:357:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 356:armwave.c     **** 
 357:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1524              		.loc 1 357 5 view .LVU444
 1525 0708 000050E3 		cmp	r0, #0	@ _31,
 1526              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1527              		.loc 1 355 40 view .LVU445
 1528 070c 0060A0E1 		mov	r6, r0	@ _31,
 1529              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1530              		.loc 1 355 38 view .LVU446
 1531 0710 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1532              		.loc 1 357 5 is_stmt 1 view .LVU447
 1533 0714 2100000A 		beq	.L76		@,
 1534              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 358:armwave.c     **** 
 359:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 360:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1535              		.loc 1 360 54 is_stmt 0 view .LVU448
 1536 0718 2C7ADFED 		vldr.32	s15, .L77+8	@ tmp230,
 1537 071c 020040E2 		sub	r0, r0, #2	@ ivtmp.68, _31,
 1538              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1539              		.loc 1 359 12 view .LVU449
 1540 0720 0030A0E3 		mov	r3, #0	@ xx,
 1541              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1542              		.loc 1 360 54 view .LVU450
 1543 0724 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1544              	.L68:
 1545              	.LVL73:
 1546              		.loc 1 360 9 is_stmt 1 discriminator 3 view .LVU451
 1547              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1548              		.loc 1 360 74 is_stmt 0 discriminator 3 view .LVU452
 1549 0728 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1550              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1551              		.loc 1 359 32 discriminator 3 view .LVU453
 1552 072c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1553              	.LVL74:
 1554              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1555              		.loc 1 359 5 discriminator 3 view .LVU454
 1556 0730 030055E1 		cmp	r5, r3	@ _13, xx
 1557              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1558              		.loc 1 360 74 discriminator 3 view .LVU455
 1559 0734 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1560 0738 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1561              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1562              		.loc 1 360 46 discriminator 3 view .LVU456
 1563 073c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1564 0740 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1565 0744 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1566              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1567              		.loc 1 359 5 discriminator 3 view .LVU457
 1568 0748 F6FFFF1A 		bne	.L68		@,
 361:armwave.c     **** 
 362:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1569              		.loc 1 365 5 is_stmt 1 view .LVU458
 1570              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1571              		.loc 1 365 34 is_stmt 0 view .LVU459
 1572 074c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1573 0750 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1574 0754 FEFFFFEB 		bl	malloc		@
 1575              	.LVL75:
 1576              	@ armwave.c:367:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 366:armwave.c     **** 
 367:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1577              		.loc 1 367 5 view .LVU460
 1578 0758 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1579 075c 0620A0E1 		mov	r2, r6	@, _31
 1580 0760 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1581 0764 0710A0E1 		mov	r1, r7	@, _23
 1582              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 365:armwave.c     **** 
 1583              		.loc 1 365 34 view .LVU461
 1584 0768 00C0A0E1 		mov	ip, r0	@ tmp237,
 1585              	@ armwave.c:367:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1586              		.loc 1 367 5 view .LVU462
 1587 076c 0030A0E1 		mov	r3, r0	@, tmp237
 1588              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 365:armwave.c     **** 
 1589              		.loc 1 365 32 view .LVU463
 1590 0770 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1591              		.loc 1 367 5 is_stmt 1 view .LVU464
 1592 0774 64009FE5 		ldr	r0, .L77+24	@,
 1593 0778 FEFFFFEB 		bl	printf		@
 1594              	.LVL76:
 368:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 369:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 370:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 371:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 372:armwave.c     **** 
 373:armwave.c     ****     malloc_stats();
 1595              		.loc 1 373 5 view .LVU465
 1596              	@ armwave.c:374: }
 374:armwave.c     **** }
 1597              		.loc 1 374 1 is_stmt 0 view .LVU466
 1598 077c 14D08DE2 		add	sp, sp, #20	@,,
 1599              		.cfi_remember_state
 1600              		.cfi_def_cfa_offset 36
 1601              		@ sp needed	@
 1602 0780 028BBDEC 		vldm	sp!, {d8}	@
 1603              		.cfi_restore 80
 1604              		.cfi_restore 81
 1605              		.cfi_def_cfa_offset 28
 1606              	.LVL77:
 1607              		.loc 1 374 1 view .LVU467
 1608 0784 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1609              		.cfi_restore 14
 1610              		.cfi_restore 9
 1611              		.cfi_restore 8
 1612              		.cfi_restore 7
 1613              		.cfi_restore 6
 1614              		.cfi_restore 5
 1615              		.cfi_restore 4
 1616              		.cfi_def_cfa_offset 0
 1617              	.LVL78:
 1618              	@ armwave.c:373:     malloc_stats();
 373:armwave.c     **** }
 1619              		.loc 1 373 5 view .LVU468
 1620 0788 FEFFFFEA 		b	malloc_stats		@
 1621              	.LVL79:
 1622              	.L74:
 1623              		.cfi_restore_state
 296:armwave.c     **** 
 1624              		.loc 1 296 5 is_stmt 1 discriminator 1 view .LVU469
 1625 078c 50309FE5 		ldr	r3, .L77+28	@,
 1626 0790 4A2FA0E3 		mov	r2, #296	@,
 1627 0794 4C109FE5 		ldr	r1, .L77+32	@,
 1628 0798 4C009FE5 		ldr	r0, .L77+36	@,
 1629 079c FEFFFFEB 		bl	__assert_fail		@
 1630              	.LVL80:
 1631              	.L76:
 357:armwave.c     **** 
 1632              		.loc 1 357 5 discriminator 1 view .LVU470
 1633 07a0 3C309FE5 		ldr	r3, .L77+28	@,
 1634 07a4 44209FE5 		ldr	r2, .L77+40	@,
 1635 07a8 38109FE5 		ldr	r1, .L77+32	@,
 1636 07ac 40009FE5 		ldr	r0, .L77+44	@,
 1637 07b0 FEFFFFEB 		bl	__assert_fail		@
 1638              	.LVL81:
 1639              	.L75:
 349:armwave.c     **** 
 1640              		.loc 1 349 5 discriminator 1 view .LVU471
 1641 07b4 28309FE5 		ldr	r3, .L77+28	@,
 1642 07b8 38209FE5 		ldr	r2, .L77+48	@,
 1643 07bc 24109FE5 		ldr	r1, .L77+32	@,
 1644 07c0 34009FE5 		ldr	r0, .L77+52	@,
 1645 07c4 FEFFFFEB 		bl	__assert_fail		@
 1646              	.LVL82:
 1647              	.L78:
 1648              		.align	2
 1649              	.L77:
 1650 07c8 00007F43 		.word	1132396544
 1651 07cc 00008047 		.word	1199570944
 1652 07d0 0000803F 		.word	1065353216
 1653 07d4 40000000 		.word	.LC4
 1654 07d8 00000000 		.word	g_armwave_state
 1655 07dc 84000000 		.word	.LC6
 1656 07e0 34010000 		.word	.LC9
 1657 07e4 1C000000 		.word	.LANCHOR0+28
 1658 07e8 20000000 		.word	.LC2
 1659 07ec 6C000000 		.word	.LC5
 1660 07f0 65010000 		.word	357
 1661 07f4 08010000 		.word	.LC8
 1662 07f8 5D010000 		.word	349
 1663 07fc E4000000 		.word	.LC7
 1664              		.cfi_endproc
 1665              	.LFE62:
 1667              		.align	2
 1668              		.global	armwave_set_wave_pointer
 1669              		.syntax unified
 1670              		.arm
 1671              		.fpu vfp
 1673              	armwave_set_wave_pointer:
 1674              	.LVL83:
 1675              	.LFB63:
 375:armwave.c     **** 
 376:armwave.c     **** /*
 377:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 378:armwave.c     ****  * in the future.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 381:armwave.c     **** {
 1676              		.loc 1 381 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1680              		.loc 1 382 5 view .LVU473
 1681 0800 000050E3 		cmp	r0, #0	@ wave_buffer
 1682              		.loc 1 382 5 is_stmt 0 view .LVU474
 1683 0804 0200000A 		beq	.L84		@,
 383:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1684              		.loc 1 383 5 is_stmt 1 view .LVU475
 1685              	@ armwave.c:383:     g_armwave_state.wave_buffer = wave_buffer;
 1686              		.loc 1 383 33 is_stmt 0 view .LVU476
 1687 0808 1C309FE5 		ldr	r3, .L85	@ tmp116,
 1688 080c 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1689 0810 1EFF2FE1 		bx	lr	@
 1690              	.L84:
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1691              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU477
 1692              	@ armwave.c:381: {
 381:armwave.c     ****     assert(wave_buffer != NULL);
 1693              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU478
 1694 0814 10402DE9 		push	{r4, lr}	@
 1695              		.cfi_def_cfa_offset 8
 1696              		.cfi_offset 4, -8
 1697              		.cfi_offset 14, -4
 1698              	@ armwave.c:382:     assert(wave_buffer != NULL);
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1699              		.loc 1 382 5 discriminator 1 view .LVU479
 1700 0818 10309FE5 		ldr	r3, .L85+4	@,
 1701 081c 10209FE5 		ldr	r2, .L85+8	@,
 1702 0820 10109FE5 		ldr	r1, .L85+12	@,
 1703 0824 10009FE5 		ldr	r0, .L85+16	@,
 1704              	.LVL84:
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1705              		.loc 1 382 5 discriminator 1 view .LVU480
 1706 0828 FEFFFFEB 		bl	__assert_fail		@
 1707              	.LVL85:
 1708              	.L86:
 1709              		.align	2
 1710              	.L85:
 1711 082c 00000000 		.word	g_armwave_state
 1712 0830 34000000 		.word	.LANCHOR0+52
 1713 0834 7E010000 		.word	382
 1714 0838 20000000 		.word	.LC2
 1715 083c 58010000 		.word	.LC10
 1716              		.cfi_endproc
 1717              	.LFE63:
 1719              		.align	2
 1720              		.global	armwave_set_wave_pointer_as_testbuf
 1721              		.syntax unified
 1722              		.arm
 1723              		.fpu vfp
 1725              	armwave_set_wave_pointer_as_testbuf:
 1726              	.LVL86:
 1727              	.LFB64:
 384:armwave.c     **** }
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 388:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 391:armwave.c     **** {
 1728              		.loc 1 391 1 is_stmt 1 view -0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 0
 1731              		@ frame_needed = 0, uses_anonymous_args = 0
 1732              		@ link register save eliminated.
 392:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1733              		.loc 1 392 5 view .LVU482
 1734              	@ armwave.c:392:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1735              		.loc 1 392 29 is_stmt 0 view .LVU483
 1736 0840 24309FE5 		ldr	r3, .L90	@ tmp117,
 1737              	@ armwave.c:392:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1738              		.loc 1 392 7 view .LVU484
 1739 0844 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1740 0848 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1741 084c 0400003A 		bcc	.L89		@,
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 394:armwave.c     ****         return;
 395:armwave.c     ****     }
 396:armwave.c     **** 
 397:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1742              		.loc 1 397 5 is_stmt 1 view .LVU485
 1743              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1744              		.loc 1 397 111 is_stmt 0 view .LVU486
 1745 0850 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1746              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1747              		.loc 1 397 68 view .LVU487
 1748 0854 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1749 0858 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1750              	.LVL87:
 1751              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1752              		.loc 1 397 33 view .LVU488
 1753 085c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1754              	@ armwave.c:398: }
 398:armwave.c     **** }
 1755              		.loc 1 398 1 view .LVU489
 1756 0860 1EFF2FE1 		bx	lr	@
 1757              	.LVL88:
 1758              	.L89:
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1759              		.loc 1 393 9 is_stmt 1 view .LVU490
 1760 0864 04009FE5 		ldr	r0, .L90+4	@,
 1761              	.LVL89:
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1762              		.loc 1 393 9 is_stmt 0 view .LVU491
 1763 0868 FEFFFFEA 		b	puts		@
 1764              	.LVL90:
 1765              	.L91:
 1766              		.align	2
 1767              	.L90:
 1768 086c 00000000 		.word	g_armwave_state
 1769 0870 6C010000 		.word	.LC11
 1770              		.cfi_endproc
 1771              	.LFE64:
 1773              		.align	2
 1774              		.global	armwave_set_wave_pointer_u32
 1775              		.syntax unified
 1776              		.arm
 1777              		.fpu vfp
 1779              	armwave_set_wave_pointer_u32:
 1780              	.LVL91:
 1781              	.LFB65:
 399:armwave.c     **** 
 400:armwave.c     **** /*
 401:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 402:armwave.c     ****  * disjointed buffers in the future.
 403:armwave.c     ****  */
 404:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 405:armwave.c     **** {
 1782              		.loc 1 405 1 is_stmt 1 view -0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 0
 1785              		@ frame_needed = 0, uses_anonymous_args = 0
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1786              		.loc 1 406 5 view .LVU493
 1787 0874 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1788              		.loc 1 406 5 is_stmt 0 view .LVU494
 1789 0878 0200000A 		beq	.L97		@,
 407:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1790              		.loc 1 407 5 is_stmt 1 view .LVU495
 1791              	@ armwave.c:407:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1792              		.loc 1 407 33 is_stmt 0 view .LVU496
 1793 087c 1C309FE5 		ldr	r3, .L98	@ tmp117,
 1794 0880 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1795 0884 1EFF2FE1 		bx	lr	@
 1796              	.L97:
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1797              		.loc 1 406 5 is_stmt 1 discriminator 1 view .LVU497
 1798              	@ armwave.c:405: {
 405:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1799              		.loc 1 405 1 is_stmt 0 discriminator 1 view .LVU498
 1800 0888 10402DE9 		push	{r4, lr}	@
 1801              		.cfi_def_cfa_offset 8
 1802              		.cfi_offset 4, -8
 1803              		.cfi_offset 14, -4
 1804              	@ armwave.c:406:     assert(wave_buffer_ptr != 0);
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1805              		.loc 1 406 5 discriminator 1 view .LVU499
 1806 088c 10309FE5 		ldr	r3, .L98+4	@,
 1807 0890 10209FE5 		ldr	r2, .L98+8	@,
 1808 0894 10109FE5 		ldr	r1, .L98+12	@,
 1809 0898 10009FE5 		ldr	r0, .L98+16	@,
 1810              	.LVL92:
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1811              		.loc 1 406 5 discriminator 1 view .LVU500
 1812 089c FEFFFFEB 		bl	__assert_fail		@
 1813              	.LVL93:
 1814              	.L99:
 1815              		.align	2
 1816              	.L98:
 1817 08a0 00000000 		.word	g_armwave_state
 1818 08a4 50000000 		.word	.LANCHOR0+80
 1819 08a8 96010000 		.word	406
 1820 08ac 20000000 		.word	.LC2
 1821 08b0 A8010000 		.word	.LC12
 1822              		.cfi_endproc
 1823              	.LFE65:
 1825              		.align	2
 1826              		.global	armwave_clear_buffer
 1827              		.syntax unified
 1828              		.arm
 1829              		.fpu vfp
 1831              	armwave_clear_buffer:
 1832              	.LVL94:
 1833              	.LFB66:
 408:armwave.c     **** }
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 414:armwave.c     **** {
 1834              		.loc 1 414 1 is_stmt 1 view -0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838              		@ link register save eliminated.
 415:armwave.c     ****     // Flags ignored, only one buffer cleared
 416:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1839              		.loc 1 416 5 view .LVU502
 1840              	@ armwave.c:416:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1841              		.loc 1 416 58 is_stmt 0 view .LVU503
 1842 08b4 0C309FE5 		ldr	r3, .L101	@ tmp114,
 1843              	@ armwave.c:416:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1844              		.loc 1 416 5 view .LVU504
 1845 08b8 0010A0E3 		mov	r1, #0	@,
 1846 08bc 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1847 08c0 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1848              	.LVL95:
 1849              		.loc 1 416 5 view .LVU505
 1850 08c4 FEFFFFEA 		b	memset		@
 1851              	.LVL96:
 1852              	.L102:
 1853              		.align	2
 1854              	.L101:
 1855 08c8 00000000 		.word	g_armwave_state
 1856              		.cfi_endproc
 1857              	.LFE66:
 1859              		.align	2
 1860              		.global	armwave_set_channel_colour
 1861              		.syntax unified
 1862              		.arm
 1863              		.fpu vfp
 1865              	armwave_set_channel_colour:
 1866              	.LVL97:
 1867              	.LFB67:
 417:armwave.c     **** }
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 423:armwave.c     **** {
 1868              		.loc 1 423 1 is_stmt 1 view -0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 0
 1871              		@ frame_needed = 0, uses_anonymous_args = 0
 1872              		@ link register save eliminated.
 424:armwave.c     ****     // Only 1ch supported for now
 425:armwave.c     ****     switch(ch) {
 1873              		.loc 1 425 5 view .LVU507
 1874 08cc 010050E3 		cmp	r0, #1	@ ch,
 426:armwave.c     ****         case 1:
 427:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1875              		.loc 1 427 13 view .LVU508
 1876              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 1877              		.loc 1 427 41 is_stmt 0 view .LVU509
 1878 08d0 0C009F05 		ldreq	r0, .L105	@ tmp117,
 1879              	.LVL98:
 1880              		.loc 1 427 41 view .LVU510
 1881 08d4 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 428:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1882              		.loc 1 428 13 is_stmt 1 view .LVU511
 1883              	@ armwave.c:428:             g_armwave_state.ch1_color.g = g;
 1884              		.loc 1 428 41 is_stmt 0 view .LVU512
 1885 08d8 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 429:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1886              		.loc 1 429 13 is_stmt 1 view .LVU513
 1887              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 1888              		.loc 1 429 41 is_stmt 0 view .LVU514
 1889 08dc B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 430:armwave.c     ****             break;
 1890              		.loc 1 430 13 is_stmt 1 view .LVU515
 1891              	@ armwave.c:432: }
 431:armwave.c     ****     }
 432:armwave.c     **** }
 1892              		.loc 1 432 1 is_stmt 0 view .LVU516
 1893 08e0 1EFF2FE1 		bx	lr	@
 1894              	.L106:
 1895              		.align	2
 1896              	.L105:
 1897 08e4 00000000 		.word	g_armwave_state
 1898              		.cfi_endproc
 1899              	.LFE67:
 1901              		.align	2
 1902              		.global	armwave_dump_ppm_debug
 1903              		.syntax unified
 1904              		.arm
 1905              		.fpu vfp
 1907              	armwave_dump_ppm_debug:
 1908              	.LVL99:
 1909              	.LFB68:
 433:armwave.c     **** 
 434:armwave.c     **** /*
 435:armwave.c     ****  * Dump a ppm of a buffer to a file.
 436:armwave.c     ****  */
 437:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 438:armwave.c     **** {
 1910              		.loc 1 438 1 is_stmt 1 view -0
 1911              		.cfi_startproc
 1912              		@ args = 0, pretend = 0, frame = 0
 1913              		@ frame_needed = 0, uses_anonymous_args = 0
 439:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1914              		.loc 1 439 5 view .LVU518
 1915              	@ armwave.c:438: {
 438:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1916              		.loc 1 438 1 is_stmt 0 view .LVU519
 1917 08e8 0130A0E1 		mov	r3, r1	@ fn, fn
 1918 08ec F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1919              		.cfi_def_cfa_offset 28
 1920              		.cfi_offset 4, -28
 1921              		.cfi_offset 5, -24
 1922              		.cfi_offset 6, -20
 1923              		.cfi_offset 7, -16
 1924              		.cfi_offset 8, -12
 1925              		.cfi_offset 9, -8
 1926              		.cfi_offset 14, -4
 1927 08f0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1928 08f4 0CD04DE2 		sub	sp, sp, #12	@,,
 1929              		.cfi_def_cfa_offset 40
 1930              	@ armwave.c:439:     FILE *fp = fopen(fn, "wb");
 1931              		.loc 1 439 16 view .LVU520
 1932 08f8 C4109FE5 		ldr	r1, .L115	@,
 1933              	.LVL100:
 1934              		.loc 1 439 16 view .LVU521
 1935 08fc 0300A0E1 		mov	r0, r3	@, fn
 1936              	.LVL101:
 1937              		.loc 1 439 16 view .LVU522
 1938 0900 FEFFFFEB 		bl	fopen64		@
 1939              	.LVL102:
 1940              	@ armwave.c:446:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 440:armwave.c     ****     uint32_t data;
 441:armwave.c     ****     int xx, yy;
 442:armwave.c     **** 
 443:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 444:armwave.c     **** 
 445:armwave.c     ****     fputs("P3\n", fp);
 446:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1941              		.loc 1 446 5 view .LVU523
 1942 0904 BC609FE5 		ldr	r6, .L115+4	@ tmp150,
 1943              	@ armwave.c:445:     fputs("P3\n", fp);
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1944              		.loc 1 445 5 view .LVU524
 1945 0908 0320A0E3 		mov	r2, #3	@,
 1946 090c 0110A0E3 		mov	r1, #1	@,
 1947              	@ armwave.c:439:     FILE *fp = fopen(fn, "wb");
 439:armwave.c     ****     uint32_t data;
 1948              		.loc 1 439 16 view .LVU525
 1949 0910 0070A0E1 		mov	r7, r0	@ fp,
 1950              	.LVL103:
 440:armwave.c     ****     uint32_t data;
 1951              		.loc 1 440 5 is_stmt 1 view .LVU526
 441:armwave.c     **** 
 1952              		.loc 1 441 5 view .LVU527
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1953              		.loc 1 445 5 view .LVU528
 1954 0914 0030A0E1 		mov	r3, r0	@, fp
 1955 0918 AC009FE5 		ldr	r0, .L115+8	@,
 1956              	.LVL104:
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1957              		.loc 1 445 5 is_stmt 0 view .LVU529
 1958 091c FEFFFFEB 		bl	fwrite		@
 1959              	.LVL105:
 1960              		.loc 1 446 5 is_stmt 1 view .LVU530
 1961 0920 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1962 0924 A4109FE5 		ldr	r1, .L115+12	@,
 1963 0928 0700A0E1 		mov	r0, r7	@, fp
 1964 092c FEFFFFEB 		bl	fprintf		@
 1965              	.LVL106:
 447:armwave.c     ****     fputs("255\n", fp);
 1966              		.loc 1 447 5 view .LVU531
 1967 0930 0420A0E3 		mov	r2, #4	@,
 1968 0934 0730A0E1 		mov	r3, r7	@, fp
 1969 0938 0110A0E3 		mov	r1, #1	@,
 1970 093c 90009FE5 		ldr	r0, .L115+16	@,
 1971 0940 FEFFFFEB 		bl	fwrite		@
 1972              	.LVL107:
 448:armwave.c     **** 
 449:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1973              		.loc 1 449 5 view .LVU532
 1974              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1975              		.loc 1 449 37 is_stmt 0 view .LVU533
 1976 0944 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1977              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1978              		.loc 1 449 5 view .LVU534
 1979 0948 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1980 094c 180000DA 		ble	.L108		@,
 1981 0950 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1982              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 451:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 452:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 453:armwave.c     **** 
 454:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1983              		.loc 1 454 13 view .LVU535
 1984 0954 7C909FE5 		ldr	r9, .L115+20	@ tmp152,
 1985              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1986              		.loc 1 449 12 view .LVU536
 1987 0958 0050A0E3 		mov	r5, #0	@ yy,
 1988              	.LVL108:
 1989              	.L109:
 1990              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1991              		.loc 1 450 9 view .LVU537
 1992 095c 000053E3 		cmp	r3, #0	@ _13,
 1993              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1994              		.loc 1 450 16 view .LVU538
 1995 0960 0040A0C3 		movgt	r4, #0	@ xx,
 1996              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1997              		.loc 1 450 9 view .LVU539
 1998 0964 0F0000DA 		ble	.L111		@,
 1999              	.LVL109:
 2000              	.L110:
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2001              		.loc 1 451 13 is_stmt 1 discriminator 3 view .LVU540
 2002              	@ armwave.c:451:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2003              		.loc 1 451 29 is_stmt 0 discriminator 3 view .LVU541
 2004 0968 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2005              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2006              		.loc 1 454 13 discriminator 3 view .LVU542
 2007 096c 0910A0E1 		mov	r1, r9	@, tmp152
 2008 0970 0700A0E1 		mov	r0, r7	@, fp
 2009              	@ armwave.c:451:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2010              		.loc 1 451 18 discriminator 3 view .LVU543
 2011 0974 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2012              	.LVL110:
 2013              		.loc 1 454 13 is_stmt 1 discriminator 3 view .LVU544
 2014              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2015              		.loc 1 450 58 is_stmt 0 discriminator 3 view .LVU545
 2016 0978 014084E2 		add	r4, r4, #1	@ xx, xx,
 2017              	.LVL111:
 2018              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2019              		.loc 1 454 81 discriminator 3 view .LVU546
 2020 097c 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2021              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2022              		.loc 1 454 61 discriminator 3 view .LVU547
 2023 0980 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2024              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2025              		.loc 1 454 13 discriminator 3 view .LVU548
 2026 0984 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2027 0988 7330EFE6 		uxtb	r3, r3	@, tmp142
 2028 098c 00C08DE5 		str	ip, [sp]	@ tmp147,
 2029 0990 7220EFE6 		uxtb	r2, r2	@, data
 2030              	.LVL112:
 2031              		.loc 1 454 13 discriminator 3 view .LVU549
 2032 0994 FEFFFFEB 		bl	fprintf		@
 2033              	.LVL113:
 2034              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2035              		.loc 1 450 41 discriminator 3 view .LVU550
 2036 0998 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2037              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2038              		.loc 1 450 9 discriminator 3 view .LVU551
 2039 099c 040053E1 		cmp	r3, r4	@ _13, xx
 2040 09a0 F0FFFFCA 		bgt	.L110		@,
 2041 09a4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2042              	.LVL114:
 2043              	.L111:
 2044              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2045              		.loc 1 449 55 discriminator 2 view .LVU552
 2046 09a8 015085E2 		add	r5, r5, #1	@ yy, yy,
 2047              	.LVL115:
 2048              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2049              		.loc 1 449 5 discriminator 2 view .LVU553
 2050 09ac 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2051 09b0 E9FFFFBA 		blt	.L109		@,
 2052              	.LVL116:
 2053              	.L108:
 455:armwave.c     ****         }
 456:armwave.c     ****     }
 457:armwave.c     **** 
 458:armwave.c     ****     fclose(fp);
 2054              		.loc 1 458 5 is_stmt 1 view .LVU554
 2055 09b4 0700A0E1 		mov	r0, r7	@, fp
 2056              	@ armwave.c:459: }
 459:armwave.c     **** }
 2057              		.loc 1 459 1 is_stmt 0 view .LVU555
 2058 09b8 0CD08DE2 		add	sp, sp, #12	@,,
 2059              		.cfi_def_cfa_offset 28
 2060              		@ sp needed	@
 2061 09bc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2062              		.cfi_restore 14
 2063              		.cfi_restore 9
 2064              		.cfi_restore 8
 2065              		.cfi_restore 7
 2066              		.cfi_restore 6
 2067              		.cfi_restore 5
 2068              		.cfi_restore 4
 2069              		.cfi_def_cfa_offset 0
 2070              	.LVL117:
 2071              	@ armwave.c:458:     fclose(fp);
 458:armwave.c     **** }
 2072              		.loc 1 458 5 view .LVU556
 2073 09c0 FEFFFFEA 		b	fclose		@
 2074              	.LVL118:
 2075              	.L116:
 458:armwave.c     **** }
 2076              		.loc 1 458 5 view .LVU557
 2077              		.align	2
 2078              	.L115:
 2079 09c4 C0010000 		.word	.LC13
 2080 09c8 00000000 		.word	g_armwave_state
 2081 09cc C4010000 		.word	.LC14
 2082 09d0 C8010000 		.word	.LC15
 2083 09d4 D0010000 		.word	.LC16
 2084 09d8 D8010000 		.word	.LC17
 2085              		.cfi_endproc
 2086              	.LFE68:
 2088              		.align	2
 2089              		.global	armwave_test_init
 2090              		.syntax unified
 2091              		.arm
 2092              		.fpu vfp
 2094              	armwave_test_init:
 2095              	.LVL119:
 2096              	.LFB69:
 460:armwave.c     **** 
 461:armwave.c     **** /*
 462:armwave.c     ****  * Initialise some test functionry.
 463:armwave.c     ****  */
 464:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 465:armwave.c     **** {
 2097              		.loc 1 465 1 is_stmt 1 view -0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 0
 2100              		@ frame_needed = 0, uses_anonymous_args = 0
 466:armwave.c     ****     test_create_gamma();
 2101              		.loc 1 466 5 view .LVU559
 2102              	.LBB18:
 2103              	.LBI18:
  34:armwave.c     **** {
 2104              		.loc 1 34 6 view .LVU560
  34:armwave.c     **** {
 2105              		.loc 1 34 6 is_stmt 0 view .LVU561
 2106              	.LBE18:
 2107              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2108              		.loc 1 465 1 view .LVU562
 2109 09dc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2110              		.cfi_def_cfa_offset 32
 2111              		.cfi_offset 4, -32
 2112              		.cfi_offset 5, -28
 2113              		.cfi_offset 6, -24
 2114              		.cfi_offset 7, -20
 2115              		.cfi_offset 8, -16
 2116              		.cfi_offset 9, -12
 2117              		.cfi_offset 10, -8
 2118              		.cfi_offset 14, -4
 2119 09e0 068B2DED 		vpush.64	{d8, d9, d10}	@
 2120              		.cfi_def_cfa_offset 56
 2121              		.cfi_offset 80, -56
 2122              		.cfi_offset 81, -52
 2123              		.cfi_offset 82, -48
 2124              		.cfi_offset 83, -44
 2125              		.cfi_offset 84, -40
 2126              		.cfi_offset 85, -36
 2127 09e4 C0409FE5 		ldr	r4, .L121+20	@ ivtmp.82,
 2128              	.LBB21:
 2129              	.LBB19:
 2130              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2131              		.loc 1 40 32 view .LVU563
 2132 09e8 2EAA9FED 		vldr.32	s20, .L121+16	@ tmp136,
 2133              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2134              		.loc 1 40 26 view .LVU564
 2135 09ec 299B9FED 		vldr.64	d9, .L121	@ tmp151,
 2136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2137              		.loc 1 40 49 view .LVU565
 2138 09f0 2A8B9FED 		vldr.64	d8, .L121+8	@ tmp139,
 2139 09f4 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 2140              	.LBE19:
 2141              	.LBE21:
 2142              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2143              		.loc 1 465 1 view .LVU566
 2144 09f8 10D04DE2 		sub	sp, sp, #16	@,,
 2145              		.cfi_def_cfa_offset 72
 2146              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2147              		.loc 1 465 1 view .LVU567
 2148 09fc 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2149 0a00 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2150 0a04 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2151 0a08 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2152 0a0c 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 2153 0a10 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2154              	.LVL120:
 2155              	.L118:
 2156              	.LBB22:
 2157              	.LBB20:
  40:armwave.c     ****     }
 2158              		.loc 1 40 9 is_stmt 1 view .LVU568
 2159              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2160              		.loc 1 40 32 is_stmt 0 view .LVU569
 2161 0a14 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 2162              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2163              		.loc 1 40 26 view .LVU570
 2164 0a18 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2165              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2166              		.loc 1 40 32 view .LVU571
 2167 0a1c 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2168 0a20 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2169 0a24 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2170              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2171              		.loc 1 40 26 view .LVU572
 2172 0a28 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2173 0a2c FEFFFFEB 		bl	pow		@
 2174              	.LVL121:
 2175              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2176              		.loc 1 40 49 view .LVU573
 2177 0a30 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2178              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2179              		.loc 1 40 24 view .LVU574
 2180 0a34 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2181 0a38 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2182 0a3c 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2183              	.LVL122:
 2184              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2185              		.loc 1 39 5 view .LVU575
 2186 0a40 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 2187 0a44 F2FFFF1A 		bne	.L118		@,
 2188              	.LVL123:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2189              		.loc 1 39 5 view .LVU576
 2190              	.LBE20:
 2191              	.LBE22:
 467:armwave.c     **** 
 468:armwave.c     ****     // make ch1 yellowish by default
 469:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2192              		.loc 1 469 5 is_stmt 1 view .LVU577
 2193              	.LBB23:
 2194              	.LBI23:
 422:armwave.c     **** {
 2195              		.loc 1 422 6 view .LVU578
 2196              	.LBB24:
 425:armwave.c     ****         case 1:
 2197              		.loc 1 425 5 view .LVU579
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2198              		.loc 1 427 13 view .LVU580
 428:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2199              		.loc 1 428 13 view .LVU581
 2200              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2201              		.loc 1 427 41 is_stmt 0 view .LVU582
 2202 0a48 60C09FE5 		ldr	ip, .L121+24	@ tmp142,
 2203 0a4c 60409FE5 		ldr	r4, .L121+28	@ tmp143,
 2204              	.LBE24:
 2205              	.LBE23:
 2206              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 470:armwave.c     **** 
 471:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2207              		.loc 1 471 5 view .LVU583
 2208 0a50 0000A0E3 		mov	r0, #0	@ tmp147,
 2209              	.LBB28:
 2210              	.LBB25:
 2211              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 429:armwave.c     ****             break;
 2212              		.loc 1 429 41 view .LVU584
 2213 0a54 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2214              	.LBE25:
 2215              	.LBE28:
 2216              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2217              		.loc 1 471 5 view .LVU585
 2218 0a58 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2219 0a5c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2220 0a60 00808DE5 		str	r8, [sp]	@ render_width,
 2221 0a64 0610A0E1 		mov	r1, r6	@, tmp3
 2222 0a68 0720A0E1 		mov	r2, r7	@, nwaves
 2223              	.LBB29:
 2224              	.LBB26:
 2225              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2226              		.loc 1 427 41 view .LVU586
 2227 0a6c 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 429:armwave.c     ****             break;
 2228              		.loc 1 429 13 is_stmt 1 view .LVU587
 2229              	.LBE26:
 2230              	.LBE29:
 2231              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2232              		.loc 1 471 5 is_stmt 0 view .LVU588
 2233 0a70 0630A0E1 		mov	r3, r6	@, wave_size
 2234              	.LBB30:
 2235              	.LBB27:
 2236              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 429:armwave.c     ****             break;
 2237              		.loc 1 429 41 view .LVU589
 2238 0a74 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 430:armwave.c     ****     }
 2239              		.loc 1 430 13 is_stmt 1 view .LVU590
 2240              	.LVL124:
 430:armwave.c     ****     }
 2241              		.loc 1 430 13 is_stmt 0 view .LVU591
 2242              	.LBE27:
 2243              	.LBE30:
 2244              		.loc 1 471 5 is_stmt 1 view .LVU592
 2245 0a78 FEFFFFEB 		bl	armwave_setup_render		@
 2246              	.LVL125:
 472:armwave.c     **** 
 473:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2247              		.loc 1 473 5 view .LVU593
 2248 0a7c 34109FE5 		ldr	r1, .L121+32	@,
 2249 0a80 34009FE5 		ldr	r0, .L121+36	@,
 2250              	@ armwave.c:474: }
 474:armwave.c     **** }
 2251              		.loc 1 474 1 is_stmt 0 view .LVU594
 2252 0a84 10D08DE2 		add	sp, sp, #16	@,,
 2253              		.cfi_def_cfa_offset 56
 2254              		@ sp needed	@
 2255 0a88 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2256              		.cfi_restore 84
 2257              		.cfi_restore 85
 2258              		.cfi_restore 82
 2259              		.cfi_restore 83
 2260              		.cfi_restore 80
 2261              		.cfi_restore 81
 2262              		.cfi_def_cfa_offset 32
 2263 0a8c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2264              		.cfi_restore 14
 2265              		.cfi_restore 10
 2266              		.cfi_restore 9
 2267              		.cfi_restore 8
 2268              		.cfi_restore 7
 2269              		.cfi_restore 6
 2270              		.cfi_restore 5
 2271              		.cfi_restore 4
 2272              		.cfi_def_cfa_offset 0
 2273              	.LVL126:
 2274              	@ armwave.c:473:     printf("armwave version: %s\n", ARMWAVE_VER);
 473:armwave.c     **** }
 2275              		.loc 1 473 5 view .LVU595
 2276 0a90 FEFFFFEA 		b	printf		@
 2277              	.LVL127:
 2278              	.L122:
 2279 0a94 0000A0E1 		.align	3
 2280              	.L121:
 2281 0a98 000000C0 		.word	-1073741824
 2282 0a9c CCCCEC3F 		.word	1072483532
 2283 0aa0 00000000 		.word	0
 2284 0aa4 00E06F40 		.word	1081073664
 2285 0aa8 00007F43 		.word	1132396544
 2286 0aac FFFFFFFF 		.word	gamma_table-1
 2287 0ab0 00000000 		.word	g_armwave_state
 2288 0ab4 F609F406 		.word	116656630
 2289 0ab8 00000000 		.word	.LC0
 2290 0abc 08000000 		.word	.LC1
 2291              		.cfi_endproc
 2292              	.LFE69:
 2294              		.align	2
 2295              		.global	armwave_test_fill_outbuf
 2296              		.syntax unified
 2297              		.arm
 2298              		.fpu vfp
 2300              	armwave_test_fill_outbuf:
 2301              	.LFB70:
 475:armwave.c     **** 
 476:armwave.c     **** /*
 477:armwave.c     ****  * Render image to the local allocated buffer.
 478:armwave.c     ****  */
 479:armwave.c     **** void armwave_test_fill_outbuf()
 480:armwave.c     **** {
 2302              		.loc 1 480 1 is_stmt 1 view -0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 0
 2305              		@ frame_needed = 0, uses_anonymous_args = 0
 481:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2306              		.loc 1 481 5 view .LVU597
 2307              	@ armwave.c:480: {
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2308              		.loc 1 480 1 is_stmt 0 view .LVU598
 2309 0ac0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2310              		.cfi_def_cfa_offset 32
 2311              		.cfi_offset 4, -32
 2312              		.cfi_offset 5, -28
 2313              		.cfi_offset 6, -24
 2314              		.cfi_offset 7, -20
 2315              		.cfi_offset 8, -16
 2316              		.cfi_offset 9, -12
 2317              		.cfi_offset 10, -8
 2318              		.cfi_offset 14, -4
 2319              	@ armwave.c:481:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2320              		.loc 1 481 5 view .LVU599
 2321 0ac4 08419FE5 		ldr	r4, .L134	@ tmp222,
 2322 0ac8 685094E5 		ldr	r5, [r4, #104]	@ _1, g_armwave_state.out_pixbuf
 2323              	.LVL128:
 2324              	.LBB33:
 2325              	.LBI33:
 172:armwave.c     **** {
 2326              		.loc 1 172 6 is_stmt 1 view .LVU600
 2327              	.LBB34:
 174:armwave.c     ****     // uint32_t ysub;
 2328              		.loc 1 174 5 view .LVU601
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2329              		.loc 1 176 5 view .LVU602
 177:armwave.c     ****     // uint8_t row;
 2330              		.loc 1 177 5 view .LVU603
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2331              		.loc 1 179 5 view .LVU604
 180:armwave.c     ****     uint32_t offset;
 2332              		.loc 1 180 5 view .LVU605
 181:armwave.c     **** 
 2333              		.loc 1 181 5 view .LVU606
 183:armwave.c     **** 
 2334              		.loc 1 183 5 view .LVU607
 2335 0acc 000055E3 		cmp	r5, #0	@ _1,
 2336 0ad0 3A00000A 		beq	.L133		@,
 186:armwave.c     **** 
 2337              		.loc 1 186 5 view .LVU608
 2338              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2339              		.loc 1 186 59 is_stmt 0 view .LVU609
 2340 0ad4 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2341 0ad8 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2342              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2343              		.loc 1 186 5 view .LVU610
 2344 0adc 0010A0E3 		mov	r1, #0	@,
 2345 0ae0 0500A0E1 		mov	r0, r5	@, _1
 2346              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2347              		.loc 1 186 59 view .LVU611
 2348 0ae4 920302E0 		mul	r2, r2, r3	@ tmp175, g_armwave_state.target_height, g_armwave_state.target_width
 2349              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2350              		.loc 1 186 5 view .LVU612
 2351 0ae8 0221A0E1 		lsl	r2, r2, #2	@, tmp175,
 2352 0aec FEFFFFEB 		bl	memset		@
 2353              	.LVL129:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2354              		.loc 1 188 5 is_stmt 1 view .LVU613
 2355              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2356              		.loc 1 188 10 is_stmt 0 view .LVU614
 2357 0af0 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2358 0af4 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2359 0af8 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2360              	.LVL130:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2361              		.loc 1 231 5 is_stmt 1 view .LVU615
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2362              		.loc 1 231 5 is_stmt 0 view .LVU616
 2363 0afc 010050E3 		cmp	r0, #1	@ npix,
 2364              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2365              		.loc 1 231 26 view .LVU617
 2366 0b00 A00F80E0 		add	r0, r0, r0, lsr #31	@ tmp188, npix, npix,
 2367              	.LVL131:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2368              		.loc 1 231 26 view .LVU618
 2369 0b04 C000A0E1 		asr	r0, r0, #1	@ _3, tmp188,
 2370              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2371              		.loc 1 231 5 view .LVU619
 2372 0b08 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2373 0b0c 04E094E5 		ldr	lr, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 2374              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2375              		.loc 1 236 44 view .LVU620
 2376 0b10 FC86D4E1 		ldrsh	r8, [r4, #108]	@ _19, g_armwave_state.ch1_color.r
 2377              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2378              		.loc 1 237 44 view .LVU621
 2379 0b14 FE76D4E1 		ldrsh	r7, [r4, #110]	@ _24, g_armwave_state.ch1_color.g
 2380              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2381              		.loc 1 238 44 view .LVU622
 2382 0b18 F067D4E1 		ldrsh	r6, [r4, #112]	@ _28, g_armwave_state.ch1_color.b
 2383              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2384              		.loc 1 249 49 view .LVU623
 2385 0b1c 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _49, g_armwave_state.vscale_frac
 2386 0b20 02E04EE2 		sub	lr, lr, #2	@ ivtmp.87, g_armwave_state.ch1_buffer,
 2387              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2388              		.loc 1 231 11 view .LVU624
 2389 0b24 00C0A0E3 		mov	ip, #0	@ n,
 2390              	.LVL132:
 2391              	.L127:
 232:armwave.c     ****         value = wave_word & 0xffff;
 2392              		.loc 1 232 9 is_stmt 1 view .LVU625
 233:armwave.c     **** 
 2393              		.loc 1 233 9 view .LVU626
 2394              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 2395              		.loc 1 233 15 is_stmt 0 view .LVU627
 2396 0b28 B220FEE1 		ldrh	r2, [lr, #2]!	@ MEM[base: _102, offset: 0B], MEM[base: _102, offset: 0B]
 2397              	.LVL133:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2398              		.loc 1 235 9 is_stmt 1 view .LVU628
 2399              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2400              		.loc 1 235 11 is_stmt 0 view .LVU629
 2401 0b2c FF2012E2 		ands	r2, r2, #255	@ value, MEM[base: _102, offset: 0B],
 2402              	.LVL134:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2403              		.loc 1 235 11 view .LVU630
 2404 0b30 1E00000A 		beq	.L126		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2405              		.loc 1 236 13 is_stmt 1 view .LVU631
 2406              	.LVL135:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2407              		.loc 1 237 13 view .LVU632
 238:armwave.c     **** 
 2408              		.loc 1 238 13 view .LVU633
 240:armwave.c     ****             g = MIN(gg, 255);
 2409              		.loc 1 240 13 view .LVU634
 241:armwave.c     ****             b = MIN(bb, 255);
 2410              		.loc 1 241 13 view .LVU635
 242:armwave.c     **** 
 2411              		.loc 1 242 13 view .LVU636
 245:armwave.c     **** 
 2412              		.loc 1 245 13 view .LVU637
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2413              		.loc 1 248 13 view .LVU638
 2414              	@ armwave.c:248:             nsub = n * 2;
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2415              		.loc 1 248 18 is_stmt 0 view .LVU639
 2416 0b34 8C10A0E1 		lsl	r1, ip, #1	@ nsub, n,
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2417              		.loc 1 249 13 is_stmt 1 view .LVU640
 250:armwave.c     ****             xx = (nsub >> 8);
 2418              		.loc 1 250 13 view .LVU641
 2419              	.LVL136:
 251:armwave.c     **** 
 2420              		.loc 1 251 13 view .LVU642
 254:armwave.c     ****             {
 2421              		.loc 1 254 13 view .LVU643
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2422              		.loc 1 256 17 view .LVU644
 257:armwave.c     ****             }
 2423              		.loc 1 257 17 view .LVU645
 2424              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2425              		.loc 1 238 47 is_stmt 0 view .LVU646
 2426 0b38 820663E1 		smulbb	r3, r2, r6	@ tmp208, value, _28
 2427              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2428              		.loc 1 249 24 view .LVU647
 2429 0b3c 7190EFE6 		uxtb	r9, r1	@ nsub, nsub
 2430              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2431              		.loc 1 256 35 view .LVU648
 2432 0b40 58A094E5 		ldr	r10, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2433              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2434              		.loc 1 249 24 view .LVU649
 2435 0b44 909A07EE 		vmov	s15, r9	@ int	@ nsub, nsub
 2436              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2437              		.loc 1 237 47 view .LVU650
 2438 0b48 820769E1 		smulbb	r9, r2, r7	@ tmp212, value, _24
 2439              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2440              		.loc 1 238 16 view .LVU651
 2441 0b4c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp208,
 2442              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2443              		.loc 1 242 17 view .LVU652
 2444 0b50 FF0053E3 		cmp	r3, #255	@ bb,
 2445              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2446              		.loc 1 249 32 view .LVU653
 2447 0b54 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp199, nsub
 2448              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2449              		.loc 1 237 16 view .LVU654
 2450 0b58 4994A0E1 		asr	r9, r9, #8	@ gg, tmp212,
 2451              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2452              		.loc 1 236 47 view .LVU655
 2453 0b5c 820862E1 		smulbb	r2, r2, r8	@ tmp218, value, _19
 2454              	.LVL137:
 2455              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2456              		.loc 1 242 17 view .LVU656
 2457 0b60 FF30A0A3 		movge	r3, #255	@ bb,
 2458              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 2459              		.loc 1 241 17 view .LVU657
 2460 0b64 FF0059E3 		cmp	r9, #255	@ gg,
 2461 0b68 FF90A0A3 		movge	r9, #255	@ gg,
 2462              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2463              		.loc 1 236 16 view .LVU658
 2464 0b6c 4224A0E1 		asr	r2, r2, #8	@ rr, tmp218,
 2465              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2466              		.loc 1 240 17 view .LVU659
 2467 0b70 FF0052E3 		cmp	r2, #255	@ rr,
 2468              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2469              		.loc 1 249 32 view .LVU660
 2470 0b74 877A67EE 		vmul.f32	s15, s15, s14	@ tmp200, tmp199, _49
 2471              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2472              		.loc 1 245 48 view .LVU661
 2473 0b78 0994A0E1 		lsl	r9, r9, #8	@ tmp213, gg,
 2474              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2475              		.loc 1 245 36 view .LVU662
 2476 0b7c 0338A0E1 		lsl	r3, r3, #16	@ tmp209, bb,
 2477              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2478              		.loc 1 240 17 view .LVU663
 2479 0b80 FF20A0A3 		movge	r2, #255	@ rr,
 2480              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2481              		.loc 1 245 36 view .LVU664
 2482 0b84 FF3803E2 		and	r3, r3, #16711680	@ tmp210, tmp209,
 2483              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2484              		.loc 1 245 48 view .LVU665
 2485 0b88 7990FFE6 		uxth	r9, r9	@ tmp214, tmp213
 2486              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2487              		.loc 1 245 43 view .LVU666
 2488 0b8c 093083E1 		orr	r3, r3, r9	@ tmp216, tmp210, tmp214
 2489              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2490              		.loc 1 245 54 view .LVU667
 2491 0b90 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2492              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2493              		.loc 1 249 16 view .LVU668
 2494 0b94 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp200
 2495              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2496              		.loc 1 245 54 view .LVU669
 2497 0b98 022083E1 		orr	r2, r3, r2	@ tmp220, tmp216, rr
 2498              	@ armwave.c:251:             xx = (nsub >> 8);
 251:armwave.c     **** 
 2499              		.loc 1 251 24 view .LVU670
 2500 0b9c 4114A0E1 		asr	r1, r1, #8	@ xx, nsub,
 2501              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2502              		.loc 1 245 18 view .LVU671
 2503 0ba0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp220,
 2504              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2505              		.loc 1 257 35 view .LVU672
 2506 0ba4 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 2507 0ba8 9A1321E0 		mla	r1, r10, r3, r1	@ tmp206, g_armwave_state.target_width, yy, xx
 2508              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2509              		.loc 1 257 45 view .LVU673
 2510 0bac 012185E7 		str	r2, [r5, r1, lsl #2]	@ word, *_59
 2511              	.LVL138:
 2512              	.L126:
 2513              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2514              		.loc 1 231 34 view .LVU674
 2515 0bb0 01C08CE2 		add	ip, ip, #1	@ n, n,
 2516              	.LVL139:
 2517              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2518              		.loc 1 231 5 view .LVU675
 2519 0bb4 0C0050E1 		cmp	r0, ip	@ _3, n
 2520 0bb8 DAFFFFCA 		bgt	.L127		@,
 2521 0bbc F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2522              	.LVL140:
 2523              	.L133:
 183:armwave.c     **** 
 2524              		.loc 1 183 5 is_stmt 1 view .LVU676
 2525 0bc0 10309FE5 		ldr	r3, .L134+4	@,
 2526 0bc4 B720A0E3 		mov	r2, #183	@,
 2527 0bc8 0C109FE5 		ldr	r1, .L134+8	@,
 2528 0bcc 0C009FE5 		ldr	r0, .L134+12	@,
 2529 0bd0 FEFFFFEB 		bl	__assert_fail		@
 2530              	.LVL141:
 2531              	.L135:
 183:armwave.c     **** 
 2532              		.loc 1 183 5 is_stmt 0 view .LVU677
 2533              		.align	2
 2534              	.L134:
 2535 0bd4 00000000 		.word	g_armwave_state
 2536 0bd8 00000000 		.word	.LANCHOR0
 2537 0bdc 20000000 		.word	.LC2
 2538 0be0 2C000000 		.word	.LC3
 2539              	.LBE34:
 2540              	.LBE33:
 2541              		.cfi_endproc
 2542              	.LFE70:
 2544              		.align	2
 2545              		.global	armwave_test_dump_buffer_to_ppm
 2546              		.syntax unified
 2547              		.arm
 2548              		.fpu vfp
 2550              	armwave_test_dump_buffer_to_ppm:
 2551              	.LVL142:
 2552              	.LFB71:
 482:armwave.c     **** }
 483:armwave.c     **** 
 484:armwave.c     **** /*
 485:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 486:armwave.c     ****  */
 487:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 488:armwave.c     **** {
 2553              		.loc 1 488 1 is_stmt 1 view -0
 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 0
 2556              		@ frame_needed = 0, uses_anonymous_args = 0
 2557              		@ link register save eliminated.
 489:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2558              		.loc 1 489 5 view .LVU679
 2559 0be4 08309FE5 		ldr	r3, .L137	@ tmp112,
 2560 0be8 0010A0E1 		mov	r1, r0	@, fn
 2561 0bec 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2562              	.LVL143:
 2563              		.loc 1 489 5 is_stmt 0 view .LVU680
 2564 0bf0 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2565              	.LVL144:
 2566              	.L138:
 2567              		.loc 1 489 5 view .LVU681
 2568              		.align	2
 2569              	.L137:
 2570 0bf4 00000000 		.word	g_armwave_state
 2571              		.cfi_endproc
 2572              	.LFE71:
 2574              		.align	2
 2575              		.global	armwave_test_fill_gdkbuf
 2576              		.syntax unified
 2577              		.arm
 2578              		.fpu vfp
 2580              	armwave_test_fill_gdkbuf:
 2581              	.LVL145:
 2582              	.LFB72:
 490:armwave.c     **** }
 491:armwave.c     **** 
 492:armwave.c     **** /*
 493:armwave.c     ****  * Render GDK buffer with test funtionry.
 494:armwave.c     ****  */
 495:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 496:armwave.c     **** {
 2583              		.loc 1 496 1 is_stmt 1 view -0
 2584              		.cfi_startproc
 2585              		@ args = 0, pretend = 0, frame = 0
 2586              		@ frame_needed = 0, uses_anonymous_args = 0
 497:armwave.c     ****     //PyObject *mv;
 498:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 499:armwave.c     **** 
 500:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 501:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2587              		.loc 1 501 5 view .LVU683
 2588              	@ armwave.c:501:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2589              		.loc 1 501 11 is_stmt 0 view .LVU684
 2590 0bf8 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2591              	@ armwave.c:496: {
 496:armwave.c     ****     //PyObject *mv;
 2592              		.loc 1 496 1 view .LVU685
 2593 0bfc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2594              		.cfi_def_cfa_offset 32
 2595              		.cfi_offset 4, -32
 2596              		.cfi_offset 5, -28
 2597              		.cfi_offset 6, -24
 2598              		.cfi_offset 7, -20
 2599              		.cfi_offset 8, -16
 2600              		.cfi_offset 9, -12
 2601              		.cfi_offset 10, -8
 2602              		.cfi_offset 14, -4
 2603              	@ armwave.c:501:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2604              		.loc 1 501 11 view .LVU686
 2605 0c00 285093E5 		ldr	r5, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2606              	.LVL146:
 502:armwave.c     ****     
 503:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 504:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2607              		.loc 1 504 5 is_stmt 1 view .LVU687
 2608              	.LBB37:
 2609              	.LBI37:
 172:armwave.c     **** {
 2610              		.loc 1 172 6 view .LVU688
 2611              	.LBB38:
 174:armwave.c     ****     // uint32_t ysub;
 2612              		.loc 1 174 5 view .LVU689
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2613              		.loc 1 176 5 view .LVU690
 177:armwave.c     ****     // uint8_t row;
 2614              		.loc 1 177 5 view .LVU691
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2615              		.loc 1 179 5 view .LVU692
 180:armwave.c     ****     uint32_t offset;
 2616              		.loc 1 180 5 view .LVU693
 181:armwave.c     **** 
 2617              		.loc 1 181 5 view .LVU694
 183:armwave.c     **** 
 2618              		.loc 1 183 5 view .LVU695
 2619 0c04 000055E3 		cmp	r5, #0	@ out_pixbuf,
 2620 0c08 3B00000A 		beq	.L149		@,
 186:armwave.c     **** 
 2621              		.loc 1 186 5 view .LVU696
 2622              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2623              		.loc 1 186 45 is_stmt 0 view .LVU697
 2624 0c0c FC409FE5 		ldr	r4, .L150	@ tmp224,
 2625              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2626              		.loc 1 186 5 view .LVU698
 2627 0c10 0010A0E3 		mov	r1, #0	@,
 2628 0c14 0500A0E1 		mov	r0, r5	@, out_pixbuf
 2629              	.LVL147:
 2630              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2631              		.loc 1 186 59 view .LVU699
 2632 0c18 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2633 0c1c 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2634 0c20 920302E0 		mul	r2, r2, r3	@ tmp177, g_armwave_state.target_height, g_armwave_state.target_width
 2635              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2636              		.loc 1 186 5 view .LVU700
 2637 0c24 0221A0E1 		lsl	r2, r2, #2	@, tmp177,
 2638 0c28 FEFFFFEB 		bl	memset		@
 2639              	.LVL148:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2640              		.loc 1 188 5 is_stmt 1 view .LVU701
 2641              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2642              		.loc 1 188 10 is_stmt 0 view .LVU702
 2643 0c2c 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2644 0c30 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2645 0c34 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2646              	.LVL149:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2647              		.loc 1 231 5 is_stmt 1 view .LVU703
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2648              		.loc 1 231 5 is_stmt 0 view .LVU704
 2649 0c38 010050E3 		cmp	r0, #1	@ npix,
 2650              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2651              		.loc 1 231 26 view .LVU705
 2652 0c3c A00F80E0 		add	r0, r0, r0, lsr #31	@ tmp190, npix, npix,
 2653              	.LVL150:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2654              		.loc 1 231 26 view .LVU706
 2655 0c40 C000A0E1 		asr	r0, r0, #1	@ _5, tmp190,
 2656              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2657              		.loc 1 231 5 view .LVU707
 2658 0c44 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2659 0c48 04E094E5 		ldr	lr, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 2660              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2661              		.loc 1 236 44 view .LVU708
 2662 0c4c FC86D4E1 		ldrsh	r8, [r4, #108]	@ _21, g_armwave_state.ch1_color.r
 2663              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2664              		.loc 1 237 44 view .LVU709
 2665 0c50 FE76D4E1 		ldrsh	r7, [r4, #110]	@ _26, g_armwave_state.ch1_color.g
 2666              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2667              		.loc 1 238 44 view .LVU710
 2668 0c54 F067D4E1 		ldrsh	r6, [r4, #112]	@ _30, g_armwave_state.ch1_color.b
 2669              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2670              		.loc 1 249 49 view .LVU711
 2671 0c58 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _51, g_armwave_state.vscale_frac
 2672 0c5c 02E04EE2 		sub	lr, lr, #2	@ ivtmp.93, g_armwave_state.ch1_buffer,
 2673              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2674              		.loc 1 231 11 view .LVU712
 2675 0c60 00C0A0E3 		mov	ip, #0	@ n,
 2676              	.LVL151:
 2677              	.L143:
 232:armwave.c     ****         value = wave_word & 0xffff;
 2678              		.loc 1 232 9 is_stmt 1 view .LVU713
 233:armwave.c     **** 
 2679              		.loc 1 233 9 view .LVU714
 2680              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 2681              		.loc 1 233 15 is_stmt 0 view .LVU715
 2682 0c64 B220FEE1 		ldrh	r2, [lr, #2]!	@ MEM[base: _104, offset: 0B], MEM[base: _104, offset: 0B]
 2683              	.LVL152:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2684              		.loc 1 235 9 is_stmt 1 view .LVU716
 2685              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2686              		.loc 1 235 11 is_stmt 0 view .LVU717
 2687 0c68 FF2012E2 		ands	r2, r2, #255	@ value, MEM[base: _104, offset: 0B],
 2688              	.LVL153:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2689              		.loc 1 235 11 view .LVU718
 2690 0c6c 1E00000A 		beq	.L142		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2691              		.loc 1 236 13 is_stmt 1 view .LVU719
 2692              	.LVL154:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2693              		.loc 1 237 13 view .LVU720
 238:armwave.c     **** 
 2694              		.loc 1 238 13 view .LVU721
 240:armwave.c     ****             g = MIN(gg, 255);
 2695              		.loc 1 240 13 view .LVU722
 241:armwave.c     ****             b = MIN(bb, 255);
 2696              		.loc 1 241 13 view .LVU723
 242:armwave.c     **** 
 2697              		.loc 1 242 13 view .LVU724
 245:armwave.c     **** 
 2698              		.loc 1 245 13 view .LVU725
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2699              		.loc 1 248 13 view .LVU726
 2700              	@ armwave.c:248:             nsub = n * 2;
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2701              		.loc 1 248 18 is_stmt 0 view .LVU727
 2702 0c70 8C10A0E1 		lsl	r1, ip, #1	@ nsub, n,
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2703              		.loc 1 249 13 is_stmt 1 view .LVU728
 250:armwave.c     ****             xx = (nsub >> 8);
 2704              		.loc 1 250 13 view .LVU729
 2705              	.LVL155:
 251:armwave.c     **** 
 2706              		.loc 1 251 13 view .LVU730
 254:armwave.c     ****             {
 2707              		.loc 1 254 13 view .LVU731
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2708              		.loc 1 256 17 view .LVU732
 257:armwave.c     ****             }
 2709              		.loc 1 257 17 view .LVU733
 2710              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2711              		.loc 1 238 47 is_stmt 0 view .LVU734
 2712 0c74 820663E1 		smulbb	r3, r2, r6	@ tmp210, value, _30
 2713              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2714              		.loc 1 249 24 view .LVU735
 2715 0c78 7190EFE6 		uxtb	r9, r1	@ nsub, nsub
 2716              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2717              		.loc 1 256 35 view .LVU736
 2718 0c7c 58A094E5 		ldr	r10, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2719              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2720              		.loc 1 249 24 view .LVU737
 2721 0c80 909A07EE 		vmov	s15, r9	@ int	@ nsub, nsub
 2722              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2723              		.loc 1 237 47 view .LVU738
 2724 0c84 820769E1 		smulbb	r9, r2, r7	@ tmp214, value, _26
 2725              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2726              		.loc 1 238 16 view .LVU739
 2727 0c88 4334A0E1 		asr	r3, r3, #8	@ bb, tmp210,
 2728              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2729              		.loc 1 242 17 view .LVU740
 2730 0c8c FF0053E3 		cmp	r3, #255	@ bb,
 2731              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2732              		.loc 1 249 32 view .LVU741
 2733 0c90 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp201, nsub
 2734              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2735              		.loc 1 237 16 view .LVU742
 2736 0c94 4994A0E1 		asr	r9, r9, #8	@ gg, tmp214,
 2737              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2738              		.loc 1 236 47 view .LVU743
 2739 0c98 820862E1 		smulbb	r2, r2, r8	@ tmp220, value, _21
 2740              	.LVL156:
 2741              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2742              		.loc 1 242 17 view .LVU744
 2743 0c9c FF30A0A3 		movge	r3, #255	@ bb,
 2744              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 2745              		.loc 1 241 17 view .LVU745
 2746 0ca0 FF0059E3 		cmp	r9, #255	@ gg,
 2747 0ca4 FF90A0A3 		movge	r9, #255	@ gg,
 2748              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2749              		.loc 1 236 16 view .LVU746
 2750 0ca8 4224A0E1 		asr	r2, r2, #8	@ rr, tmp220,
 2751              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2752              		.loc 1 240 17 view .LVU747
 2753 0cac FF0052E3 		cmp	r2, #255	@ rr,
 2754              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2755              		.loc 1 249 32 view .LVU748
 2756 0cb0 877A67EE 		vmul.f32	s15, s15, s14	@ tmp202, tmp201, _51
 2757              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2758              		.loc 1 245 48 view .LVU749
 2759 0cb4 0994A0E1 		lsl	r9, r9, #8	@ tmp215, gg,
 2760              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2761              		.loc 1 245 36 view .LVU750
 2762 0cb8 0338A0E1 		lsl	r3, r3, #16	@ tmp211, bb,
 2763              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2764              		.loc 1 240 17 view .LVU751
 2765 0cbc FF20A0A3 		movge	r2, #255	@ rr,
 2766              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2767              		.loc 1 245 36 view .LVU752
 2768 0cc0 FF3803E2 		and	r3, r3, #16711680	@ tmp212, tmp211,
 2769              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2770              		.loc 1 245 48 view .LVU753
 2771 0cc4 7990FFE6 		uxth	r9, r9	@ tmp216, tmp215
 2772              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2773              		.loc 1 245 43 view .LVU754
 2774 0cc8 093083E1 		orr	r3, r3, r9	@ tmp218, tmp212, tmp216
 2775              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2776              		.loc 1 245 54 view .LVU755
 2777 0ccc 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2778              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2779              		.loc 1 249 16 view .LVU756
 2780 0cd0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp202
 2781              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2782              		.loc 1 245 54 view .LVU757
 2783 0cd4 022083E1 		orr	r2, r3, r2	@ tmp222, tmp218, rr
 2784              	@ armwave.c:251:             xx = (nsub >> 8);
 251:armwave.c     **** 
 2785              		.loc 1 251 24 view .LVU758
 2786 0cd8 4114A0E1 		asr	r1, r1, #8	@ xx, nsub,
 2787              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2788              		.loc 1 245 18 view .LVU759
 2789 0cdc FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp222,
 2790              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2791              		.loc 1 257 35 view .LVU760
 2792 0ce0 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 2793 0ce4 9A1321E0 		mla	r1, r10, r3, r1	@ tmp208, g_armwave_state.target_width, yy, xx
 2794              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2795              		.loc 1 257 45 view .LVU761
 2796 0ce8 012185E7 		str	r2, [r5, r1, lsl #2]	@ word, *_61
 2797              	.LVL157:
 2798              	.L142:
 2799              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2800              		.loc 1 231 34 view .LVU762
 2801 0cec 01C08CE2 		add	ip, ip, #1	@ n, n,
 2802              	.LVL158:
 2803              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2804              		.loc 1 231 5 view .LVU763
 2805 0cf0 0C0050E1 		cmp	r0, ip	@ _5, n
 2806 0cf4 DAFFFFCA 		bgt	.L143		@,
 2807 0cf8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2808              	.LVL159:
 2809              	.L149:
 183:armwave.c     **** 
 2810              		.loc 1 183 5 is_stmt 1 view .LVU764
 2811 0cfc 10309FE5 		ldr	r3, .L150+4	@,
 2812 0d00 B720A0E3 		mov	r2, #183	@,
 2813 0d04 0C109FE5 		ldr	r1, .L150+8	@,
 2814 0d08 0C009FE5 		ldr	r0, .L150+12	@,
 2815              	.LVL160:
 183:armwave.c     **** 
 2816              		.loc 1 183 5 is_stmt 0 view .LVU765
 2817 0d0c FEFFFFEB 		bl	__assert_fail		@
 2818              	.LVL161:
 2819              	.L151:
 183:armwave.c     **** 
 2820              		.loc 1 183 5 view .LVU766
 2821              		.align	2
 2822              	.L150:
 2823 0d10 00000000 		.word	g_armwave_state
 2824 0d14 00000000 		.word	.LANCHOR0
 2825 0d18 20000000 		.word	.LC2
 2826 0d1c 2C000000 		.word	.LC3
 2827              	.LBE38:
 2828              	.LBE37:
 2829              		.cfi_endproc
 2830              	.LFE72:
 2832              		.align	2
 2833              		.global	armwave_test_buffer_alloc
 2834              		.syntax unified
 2835              		.arm
 2836              		.fpu vfp
 2838              	armwave_test_buffer_alloc:
 2839              	.LVL162:
 2840              	.LFB73:
 505:armwave.c     **** }
 506:armwave.c     **** 
 507:armwave.c     **** /*
 508:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 509:armwave.c     ****  */
 510:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 511:armwave.c     **** {
 2841              		.loc 1 511 1 is_stmt 1 view -0
 2842              		.cfi_startproc
 2843              		@ args = 0, pretend = 0, frame = 0
 2844              		@ frame_needed = 0, uses_anonymous_args = 0
 512:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2845              		.loc 1 512 5 view .LVU768
 2846              	@ armwave.c:511: {
 511:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2847              		.loc 1 511 1 is_stmt 0 view .LVU769
 2848 0d20 70402DE9 		push	{r4, r5, r6, lr}	@
 2849              		.cfi_def_cfa_offset 16
 2850              		.cfi_offset 4, -16
 2851              		.cfi_offset 5, -12
 2852              		.cfi_offset 6, -8
 2853              		.cfi_offset 14, -4
 2854              	@ armwave.c:511: {
 511:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2855              		.loc 1 511 1 view .LVU770
 2856 0d24 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2857              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 2858              		.loc 1 512 23 view .LVU771
 2859 0d28 44409FE5 		ldr	r4, .L159	@ tmp128,
 2860 0d2c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2861              	.LVL163:
 2862              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 2863              		.loc 1 512 7 view .LVU772
 2864 0d30 000050E3 		cmp	r0, #0	@ _1,
 2865 0d34 0000000A 		beq	.L153		@,
 513:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2866              		.loc 1 513 9 is_stmt 1 view .LVU773
 2867 0d38 FEFFFFEB 		bl	free		@
 2868              	.LVL164:
 2869              	.L153:
 514:armwave.c     ****     }
 515:armwave.c     **** 
 516:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 517:armwave.c     **** 
 518:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2870              		.loc 1 518 5 view .LVU774
 2871              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2872              		.loc 1 518 75 is_stmt 0 view .LVU775
 2873 0d3c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2874 0d40 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2875              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2876              		.loc 1 518 40 view .LVU776
 2877 0d44 0610A0E1 		mov	r1, r6	@, nsets
 2878              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2879              		.loc 1 518 75 view .LVU777
 2880 0d48 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2881              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2882              		.loc 1 518 40 view .LVU778
 2883 0d4c 0500A0E1 		mov	r0, r5	@, _4
 2884 0d50 FEFFFFEB 		bl	calloc		@
 2885              	.LVL165:
 2886              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 519:armwave.c     **** 
 520:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2887              		.loc 1 520 7 view .LVU779
 2888 0d54 000050E3 		cmp	r0, #0	@ tmp124,
 2889              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 2890              		.loc 1 518 38 view .LVU780
 2891 0d58 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2892              		.loc 1 520 5 is_stmt 1 view .LVU781
 2893              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 2894              		.loc 1 520 7 is_stmt 0 view .LVU782
 2895 0d5c 7080BD18 		popne	{r4, r5, r6, pc}	@
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2896              		.loc 1 521 9 is_stmt 1 view .LVU783
 2897 0d60 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2898 0d64 0620A0E1 		mov	r2, r6	@, nsets
 2899 0d68 08009FE5 		ldr	r0, .L159+4	@,
 2900              	@ armwave.c:525: }
 522:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 523:armwave.c     ****         return;
 524:armwave.c     ****     }
 525:armwave.c     **** }
 2901              		.loc 1 525 1 is_stmt 0 view .LVU784
 2902 0d6c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2903              		.cfi_restore 14
 2904              		.cfi_restore 6
 2905              		.cfi_restore 5
 2906              		.cfi_restore 4
 2907              		.cfi_def_cfa_offset 0
 2908              	.LVL166:
 2909              	@ armwave.c:521:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2910              		.loc 1 521 9 view .LVU785
 2911 0d70 FEFFFFEA 		b	printf		@
 2912              	.LVL167:
 2913              	.L160:
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2914              		.loc 1 521 9 view .LVU786
 2915              		.align	2
 2916              	.L159:
 2917 0d74 00000000 		.word	g_armwave_state
 2918 0d78 E8010000 		.word	.LC18
 2919              		.cfi_endproc
 2920              	.LFE73:
 2922              		.align	2
 2923              		.global	armwave_fill_pixbuf_into_pybuffer
 2924              		.syntax unified
 2925              		.arm
 2926              		.fpu vfp
 2928              	armwave_fill_pixbuf_into_pybuffer:
 2929              	.LVL168:
 2930              	.LFB74:
 526:armwave.c     **** 
 527:armwave.c     **** /*
 528:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 529:armwave.c     ****  */
 530:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 531:armwave.c     **** {
 2931              		.loc 1 531 1 is_stmt 1 view -0
 2932              		.cfi_startproc
 2933              		@ args = 0, pretend = 0, frame = 48
 2934              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     Py_buffer buffer;
 2935              		.loc 1 532 5 view .LVU788
 533:armwave.c     ****     int ret;
 2936              		.loc 1 533 5 view .LVU789
 534:armwave.c     **** 
 535:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 536:armwave.c     **** 
 537:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2937              		.loc 1 537 5 view .LVU790
 2938              	@ armwave.c:531: {
 531:armwave.c     ****     Py_buffer buffer;
 2939              		.loc 1 531 1 is_stmt 0 view .LVU791
 2940 0d7c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2941              		.cfi_def_cfa_offset 4
 2942              		.cfi_offset 14, -4
 2943 0d80 34D04DE2 		sub	sp, sp, #52	@,,
 2944              		.cfi_def_cfa_offset 56
 2945              	@ armwave.c:537:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2946              		.loc 1 537 11 view .LVU792
 2947 0d84 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2948 0d88 0120A0E3 		mov	r2, #1	@,
 2949 0d8c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2950              	.LVL169:
 538:armwave.c     **** 
 539:armwave.c     ****     if(ret != 0) {
 2951              		.loc 1 539 5 is_stmt 1 view .LVU793
 2952              	@ armwave.c:539:     if(ret != 0) {
 2953              		.loc 1 539 7 is_stmt 0 view .LVU794
 2954 0d90 000050E3 		cmp	r0, #0	@,
 2955 0d94 0A00001A 		bne	.L165		@,
 540:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 541:armwave.c     ****         Py_RETURN_FALSE;
 542:armwave.c     ****     }
 543:armwave.c     **** 
 544:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 545:armwave.c     **** 
 546:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2956              		.loc 1 546 5 is_stmt 1 view .LVU795
 2957 0d98 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2958              	.LVL170:
 2959              		.loc 1 546 5 is_stmt 0 view .LVU796
 2960 0d9c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2961              	.LVL171:
 547:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 548:armwave.c     **** 
 549:armwave.c     ****     PyBuffer_Release(&buffer);
 2962              		.loc 1 549 5 is_stmt 1 view .LVU797
 2963 0da0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2964 0da4 FEFFFFEB 		bl	PyBuffer_Release		@
 2965              	.LVL172:
 550:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 551:armwave.c     **** 
 552:armwave.c     ****     Py_RETURN_TRUE;
 2966              		.loc 1 552 5 view .LVU798
 2967              	.LBB39:
 2968              	.LBI39:
 2969              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2970              		.loc 2 456 20 view .LVU799
 2971              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2972              		.loc 2 458 21 view .LVU800
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2973              		.loc 2 459 5 view .LVU801
 2974              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2975              		.loc 2 459 18 is_stmt 0 view .LVU802
 2976 0da8 38309FE5 		ldr	r3, .L166	@ tmp126,
 2977              	.LBE40:
 2978              	.LBE39:
 2979              	@ armwave.c:552:     Py_RETURN_TRUE;
 2980              		.loc 1 552 5 view .LVU803
 2981 0dac 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2982              	.LBB42:
 2983              	.LBB41:
 2984              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2985              		.loc 2 459 18 view .LVU804
 2986 0db0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2987 0db4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2988 0db8 002083E5 		str	r2, [r3]	@ tmp128,
 2989              	.LBE41:
 2990              	.LBE42:
 2991              	@ armwave.c:553: }
 553:armwave.c     **** }
 2992              		.loc 1 553 1 view .LVU805
 2993 0dbc 34D08DE2 		add	sp, sp, #52	@,,
 2994              		.cfi_remember_state
 2995              		.cfi_def_cfa_offset 4
 2996              		@ sp needed	@
 2997 0dc0 04F09DE4 		ldr	pc, [sp], #4	@
 2998              	.LVL173:
 2999              	.L165:
 3000              		.cfi_restore_state
 540:armwave.c     ****         Py_RETURN_FALSE;
 3001              		.loc 1 540 9 is_stmt 1 view .LVU806
 3002 0dc4 20009FE5 		ldr	r0, .L166+4	@,
 3003              	.LVL174:
 540:armwave.c     ****         Py_RETURN_FALSE;
 3004              		.loc 1 540 9 is_stmt 0 view .LVU807
 3005 0dc8 FEFFFFEB 		bl	puts		@
 3006              	.LVL175:
 541:armwave.c     ****     }
 3007              		.loc 1 541 9 is_stmt 1 view .LVU808
 3008              	.LBB43:
 3009              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 3010              		.loc 2 456 20 view .LVU809
 3011              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3012              		.loc 2 458 21 view .LVU810
 3013              		.loc 2 459 5 view .LVU811
 3014              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3015              		.loc 2 459 18 is_stmt 0 view .LVU812
 3016 0dcc 1C309FE5 		ldr	r3, .L166+8	@ tmp120,
 3017              	.LBE44:
 3018              	.LBE43:
 3019              	@ armwave.c:541:         Py_RETURN_FALSE;
 541:armwave.c     ****     }
 3020              		.loc 1 541 9 view .LVU813
 3021 0dd0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3022              	.LBB46:
 3023              	.LBB45:
 3024              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3025              		.loc 2 459 18 view .LVU814
 3026 0dd4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3027 0dd8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3028 0ddc 002083E5 		str	r2, [r3]	@ tmp122,
 3029              	.LBE45:
 3030              	.LBE46:
 3031              	@ armwave.c:553: }
 3032              		.loc 1 553 1 view .LVU815
 3033 0de0 34D08DE2 		add	sp, sp, #52	@,,
 3034              		.cfi_def_cfa_offset 4
 3035              		@ sp needed	@
 3036 0de4 04F09DE4 		ldr	pc, [sp], #4	@
 3037              	.L167:
 3038              		.align	2
 3039              	.L166:
 3040 0de8 00000000 		.word	_Py_TrueStruct
 3041 0dec 3C020000 		.word	.LC19
 3042 0df0 00000000 		.word	_Py_FalseStruct
 3043              		.cfi_endproc
 3044              	.LFE74:
 3046              		.align	2
 3047              		.global	armwave_test_create_am_sine
 3048              		.syntax unified
 3049              		.arm
 3050              		.fpu vfp
 3052              	armwave_test_create_am_sine:
 3053              	.LVL176:
 3054              	.LFB75:
 554:armwave.c     **** 
 555:armwave.c     **** /*
 556:armwave.c     ****  * Make a test AM waveform for render tests.
 557:armwave.c     ****  *
 558:armwave.c     ****  * @param   mod                     modulation depth
 559:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 560:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 561:armwave.c     ****  */
 562:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 563:armwave.c     **** {
 3055              		.loc 1 563 1 is_stmt 1 view -0
 3056              		.cfi_startproc
 3057              		@ args = 0, pretend = 0, frame = 8
 3058              		@ frame_needed = 0, uses_anonymous_args = 0
 564:armwave.c     ****     float v, noise, xnoise, mod_val;
 3059              		.loc 1 564 5 view .LVU817
 565:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3060              		.loc 1 565 5 view .LVU818
 3061              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3062              		.loc 1 563 1 is_stmt 0 view .LVU819
 3063 0df4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3064              		.cfi_def_cfa_offset 32
 3065              		.cfi_offset 4, -32
 3066              		.cfi_offset 5, -28
 3067              		.cfi_offset 6, -24
 3068              		.cfi_offset 7, -20
 3069              		.cfi_offset 8, -16
 3070              		.cfi_offset 9, -12
 3071              		.cfi_offset 10, -8
 3072              		.cfi_offset 14, -4
 3073              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3074              		.loc 1 565 38 view .LVU820
 3075 0df8 7A7A9FED 		vldr.32	s14, .L199	@ tmp180,
 3076              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3077              		.loc 1 565 55 view .LVU821
 3078 0dfc 00529FE5 		ldr	r5, .L199+28	@ tmp250,
 3079              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3080              		.loc 1 563 1 view .LVU822
 3081 0e00 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3082              		.cfi_def_cfa_offset 80
 3083              		.cfi_offset 80, -80
 3084              		.cfi_offset 81, -76
 3085              		.cfi_offset 82, -72
 3086              		.cfi_offset 83, -68
 3087              		.cfi_offset 84, -64
 3088              		.cfi_offset 85, -60
 3089              		.cfi_offset 86, -56
 3090              		.cfi_offset 87, -52
 3091              		.cfi_offset 88, -48
 3092              		.cfi_offset 89, -44
 3093              		.cfi_offset 90, -40
 3094              		.cfi_offset 91, -36
 3095 0e04 0090A0E1 		mov	r9, r0	@ sets, sets
 3096              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3097              		.loc 1 565 38 view .LVU823
 3098 0e08 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3099              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 566:armwave.c     ****     int s, set_offset = 0;
 567:armwave.c     ****     int w, x;
 568:armwave.c     **** 
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3100              		.loc 1 569 70 view .LVU824
 3101 0e0c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3102 0e10 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3103              	.LBB49:
 3104              	.LBB50:
 3105              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3106              		.loc 1 512 23 view .LVU825
 3107 0e14 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3108              	.LVL177:
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3109              		.loc 1 512 23 view .LVU826
 3110              	.LBE50:
 3111              	.LBE49:
 3112              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3113              		.loc 1 565 38 view .LVU827
 3114 0e18 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3115              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3116              		.loc 1 569 70 view .LVU828
 3117 0e1c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3118              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3119              		.loc 1 563 1 view .LVU829
 3120 0e20 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3121              	.LBB54:
 3122              	.LBB51:
 3123              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3124              		.loc 1 512 7 view .LVU830
 3125 0e24 000050E3 		cmp	r0, #0	@ _82,
 3126              	.LBE51:
 3127              	.LBE54:
 3128              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3129              		.loc 1 563 1 view .LVU831
 3130 0e28 08D04DE2 		sub	sp, sp, #8	@,,
 3131              		.cfi_def_cfa_offset 88
 3132              	@ armwave.c:570:     g_armwave_state.test_wave_buffer_nsets = sets;
 570:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3133              		.loc 1 570 44 view .LVU832
 3134 0e2c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3135              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3136              		.loc 1 569 45 view .LVU833
 3137 0e30 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3138              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3139              		.loc 1 565 38 view .LVU834
 3140 0e34 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3141              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3142              		.loc 1 565 11 view .LVU835
 3143 0e38 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3144              	.LVL178:
 566:armwave.c     ****     int w, x;
 3145              		.loc 1 566 5 is_stmt 1 view .LVU836
 567:armwave.c     **** 
 3146              		.loc 1 567 5 view .LVU837
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3147              		.loc 1 569 5 view .LVU838
 3148              		.loc 1 570 5 view .LVU839
 571:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3149              		.loc 1 571 5 view .LVU840
 3150              	.LBB55:
 3151              	.LBI49:
 510:armwave.c     **** {
 3152              		.loc 1 510 6 view .LVU841
 3153              	.LBB52:
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3154              		.loc 1 512 5 view .LVU842
 3155              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3156              		.loc 1 512 7 is_stmt 0 view .LVU843
 3157 0e3c 0000000A 		beq	.L169		@,
 513:armwave.c     ****     }
 3158              		.loc 1 513 9 is_stmt 1 view .LVU844
 3159 0e40 FEFFFFEB 		bl	free		@
 3160              	.LVL179:
 3161              	.L169:
 518:armwave.c     **** 
 3162              		.loc 1 518 5 view .LVU845
 3163              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3164              		.loc 1 518 75 is_stmt 0 view .LVU846
 3165 0e44 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3166 0e48 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3167              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3168              		.loc 1 518 40 view .LVU847
 3169 0e4c 0910A0E1 		mov	r1, r9	@, sets
 3170              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3171              		.loc 1 518 75 view .LVU848
 3172 0e50 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3173              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3174              		.loc 1 518 40 view .LVU849
 3175 0e54 0400A0E1 		mov	r0, r4	@, _85
 3176 0e58 FEFFFFEB 		bl	calloc		@
 3177              	.LVL180:
 3178              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3179              		.loc 1 520 7 view .LVU850
 3180 0e5c 000050E3 		cmp	r0, #0	@ tmp191,
 3181              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3182              		.loc 1 518 38 view .LVU851
 3183 0e60 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3184              		.loc 1 520 5 is_stmt 1 view .LVU852
 3185              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3186              		.loc 1 520 7 is_stmt 0 view .LVU853
 3187 0e64 5A00000A 		beq	.L198		@,
 3188              	.L170:
 3189              	.LVL181:
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3190              		.loc 1 520 7 view .LVU854
 3191              	.LBE52:
 3192              	.LBE55:
 3193              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 572:armwave.c     **** 
 573:armwave.c     ****     for(s = 0; s < sets; s++) {
 3194              		.loc 1 573 5 discriminator 1 view .LVU855
 3195 0e68 000059E3 		cmp	r9, #0	@ sets,
 3196 0e6c 550000DA 		ble	.L168		@,
 3197              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 575:armwave.c     ****     
 576:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 577:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 578:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 579:armwave.c     **** 
 580:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 581:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 582:armwave.c     ****                 noise *= noise;
 583:armwave.c     ****                 noise *= noise;
 584:armwave.c     ****                 noise *= noise;
 585:armwave.c     **** 
 586:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 587:armwave.c     ****                     noise = -noise;
 588:armwave.c     **** 
 589:armwave.c     ****                 noise += 1.0f;
 590:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 591:armwave.c     **** 
 592:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3198              		.loc 1 592 45 view .LVU856
 3199 0e70 5C8A9FED 		vldr.32	s16, .L199	@ tmp258,
 3200              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 593:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 594:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 595:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3201              		.loc 1 595 104 view .LVU857
 3202 0e74 5CCA9FED 		vldr.32	s24, .L199+4	@ tmp259,
 3203              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3204              		.loc 1 573 5 view .LVU858
 3205 0e78 0070A0E3 		mov	r7, #0	@ set_offset,
 3206              	@ armwave.c:574:         printf("Calculating test set %d\n", s);
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 3207              		.loc 1 574 9 view .LVU859
 3208 0e7c 84A19FE5 		ldr	r10, .L199+32	@ tmp257,
 3209              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3210              		.loc 1 573 5 view .LVU860
 3211 0e80 0780A0E1 		mov	r8, r7	@ s, set_offset
 3212              	.LVL182:
 3213              	.L171:
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 3214              		.loc 1 574 9 is_stmt 1 view .LVU861
 3215 0e84 0810A0E1 		mov	r1, r8	@, s
 3216 0e88 0A00A0E1 		mov	r0, r10	@, tmp257
 3217 0e8c FEFFFFEB 		bl	printf		@
 3218              	.LVL183:
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3219              		.loc 1 576 9 view .LVU862
 3220              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3221              		.loc 1 576 39 is_stmt 0 view .LVU863
 3222 0e90 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3223              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3224              		.loc 1 576 9 view .LVU864
 3225 0e94 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3226 0e98 450000DA 		ble	.L172		@,
 3227              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3228              		.loc 1 578 21 view .LVU865
 3229 0e9c 53CADFED 		vldr.32	s25, .L199+8	@ tmp200,
 3230              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3231              		.loc 1 592 33 view .LVU866
 3232 0ea0 53BA9FED 		vldr.32	s22, .L199+12	@ tmp253,
 3233              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3234              		.loc 1 590 24 view .LVU867
 3235 0ea4 53AADFED 		vldr.32	s21, .L199+16	@ tmp254,
 3236 0ea8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3237              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3238              		.loc 1 576 15 view .LVU868
 3239 0eac 0060A0E3 		mov	r6, #0	@ w,
 3240              	.LVL184:
 3241              	.L179:
 578:armwave.c     **** 
 3242              		.loc 1 578 13 is_stmt 1 view .LVU869
 3243              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3244              		.loc 1 578 21 is_stmt 0 view .LVU870
 3245 0eb0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3246 0eb4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3247              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3248              		.loc 1 580 13 view .LVU871
 3249 0eb8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3250              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3251              		.loc 1 578 21 view .LVU872
 3252 0ebc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3253 0ec0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3254              	.LVL185:
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3255              		.loc 1 580 13 is_stmt 1 view .LVU873
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3256              		.loc 1 580 13 is_stmt 0 view .LVU874
 3257 0ec4 370000DA 		ble	.L173		@,
 3258 0ec8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3259              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3260              		.loc 1 595 113 view .LVU875
 3261 0ecc 4AAA9FED 		vldr.32	s20, .L199+20	@ tmp229,
 3262 0ed0 4A8ADFED 		vldr.32	s17, .L199+24	@ tmp230,
 3263              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3264              		.loc 1 580 19 view .LVU876
 3265 0ed4 0040A0E3 		mov	r4, #0	@ x,
 3266              	.LVL186:
 3267              	.L178:
 581:armwave.c     ****                 noise *= noise;
 3268              		.loc 1 581 17 is_stmt 1 view .LVU877
 3269              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3270              		.loc 1 581 28 is_stmt 0 view .LVU878
 3271 0ed8 FEFFFFEB 		bl	rand		@
 3272              	.LVL187:
 3273              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3274              		.loc 1 581 35 view .LVU879
 3275 0edc 7000FFE6 		uxth	r0, r0	@ tmp201,
 3276              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3277              		.loc 1 581 45 view .LVU880
 3278 0ee0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3279 0ee4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3280              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3281              		.loc 1 581 24 view .LVU881
 3282 0ee8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3283              	.LVL188:
 582:armwave.c     ****                 noise *= noise;
 3284              		.loc 1 582 17 is_stmt 1 view .LVU882
 3285              	@ armwave.c:582:                 noise *= noise;
 582:armwave.c     ****                 noise *= noise;
 3286              		.loc 1 582 23 is_stmt 0 view .LVU883
 3287 0eec A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3288              	.LVL189:
 583:armwave.c     ****                 noise *= noise;
 3289              		.loc 1 583 17 is_stmt 1 view .LVU884
 3290              	@ armwave.c:583:                 noise *= noise;
 583:armwave.c     ****                 noise *= noise;
 3291              		.loc 1 583 23 is_stmt 0 view .LVU885
 3292 0ef0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3293              	.LVL190:
 584:armwave.c     **** 
 3294              		.loc 1 584 17 is_stmt 1 view .LVU886
 3295              	@ armwave.c:584:                 noise *= noise;
 584:armwave.c     **** 
 3296              		.loc 1 584 23 is_stmt 0 view .LVU887
 3297 0ef4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3298              	.LVL191:
 586:armwave.c     ****                     noise = -noise;
 3299              		.loc 1 586 17 is_stmt 1 view .LVU888
 3300              	@ armwave.c:586:                 if((rand() & 0xffff) > 0x7fff)
 586:armwave.c     ****                     noise = -noise;
 3301              		.loc 1 586 21 is_stmt 0 view .LVU889
 3302 0ef8 FEFFFFEB 		bl	rand		@
 3303              	.LVL192:
 587:armwave.c     **** 
 3304              		.loc 1 587 21 is_stmt 1 view .LVU890
 3305              	@ armwave.c:586:                 if((rand() & 0xffff) > 0x7fff)
 586:armwave.c     ****                     noise = -noise;
 3306              		.loc 1 586 19 is_stmt 0 view .LVU891
 3307 0efc 020910E3 		tst	r0, #32768	@,
 3308              	@ armwave.c:587:                     noise = -noise;
 587:armwave.c     **** 
 3309              		.loc 1 587 27 view .LVU892
 3310 0f00 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3311              	.LVL193:
 589:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3312              		.loc 1 589 17 is_stmt 1 view .LVU893
 590:armwave.c     **** 
 3313              		.loc 1 590 17 view .LVU894
 3314              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3315              		.loc 1 590 27 is_stmt 0 view .LVU895
 3316 0f04 FEFFFFEB 		bl	rand		@
 3317              	.LVL194:
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3318              		.loc 1 592 17 is_stmt 1 view .LVU896
 3319              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3320              		.loc 1 592 45 is_stmt 0 view .LVU897
 3321 0f08 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3322              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3323              		.loc 1 592 33 view .LVU898
 3324 0f0c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3325              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3326              		.loc 1 592 45 view .LVU899
 3327 0f10 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3328              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3329              		.loc 1 592 33 view .LVU900
 3330 0f14 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3331              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3332              		.loc 1 592 45 view .LVU901
 3333 0f18 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3334              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3335              		.loc 1 592 33 view .LVU902
 3336 0f1c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3337              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3338              		.loc 1 590 34 view .LVU903
 3339 0f20 7000FFE6 		uxth	r0, r0	@ tmp214,
 3340              	.LVL195:
 3341              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3342              		.loc 1 590 44 view .LVU904
 3343 0f24 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3344 0f28 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3345              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3346              		.loc 1 590 24 view .LVU905
 3347 0f2c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3348              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3349              		.loc 1 592 77 view .LVU906
 3350 0f30 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3351              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3352              		.loc 1 592 22 view .LVU907
 3353 0f34 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3354 0f38 FEFFFFEB 		bl	sin		@
 3355              	.LVL196:
 3356              		.loc 1 595 17 is_stmt 1 view .LVU908
 3357              	@ armwave.c:589:                 noise += 1.0f;
 589:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3358              		.loc 1 589 23 is_stmt 0 view .LVU909
 3359 0f3c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3360              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3361              		.loc 1 595 104 view .LVU910
 3362 0f40 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3363              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3364              		.loc 1 592 98 view .LVU911
 3365 0f44 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3366              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3367              		.loc 1 592 87 view .LVU912
 3368 0f48 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3369              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3370              		.loc 1 592 98 view .LVU913
 3371 0f4c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3372              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3373              		.loc 1 592 19 view .LVU914
 3374 0f50 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3375              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3376              		.loc 1 595 113 view .LVU915
 3377 0f54 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3378 0f58 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3379 0f5c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3380 0f60 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3381 0f64 050000DA 		ble	.L175		@,
 3382              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3383              		.loc 1 595 104 discriminator 1 view .LVU916
 3384 0f68 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3385 0f6c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3386 0f70 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3387 0f74 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3388 0f78 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3389 0f7c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3390              	.L175:
 3391              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3392              		.loc 1 595 57 discriminator 12 view .LVU917
 3393 0f80 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3394              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3395              		.loc 1 595 102 discriminator 12 view .LVU918
 3396 0f84 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3397 0f88 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3398 0f8c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3399              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3400              		.loc 1 580 58 discriminator 12 view .LVU919
 3401 0f90 014084E2 		add	r4, r4, #1	@ x, x,
 3402              	.LVL197:
 3403              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3404              		.loc 1 595 102 discriminator 12 view .LVU920
 3405 0f94 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3406              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3407              		.loc 1 580 43 discriminator 12 view .LVU921
 3408 0f98 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3409              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3410              		.loc 1 580 13 discriminator 12 view .LVU922
 3411 0f9c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3412 0fa0 CCFFFFCA 		bgt	.L178		@,
 3413 0fa4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3414              	.LVL198:
 3415              	.L173:
 3416              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3417              		.loc 1 576 48 discriminator 2 view .LVU923
 3418 0fa8 016086E2 		add	r6, r6, #1	@ w, w,
 3419              	.LVL199:
 3420              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3421              		.loc 1 576 9 discriminator 2 view .LVU924
 3422 0fac 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3423 0fb0 BEFFFFBA 		blt	.L179		@,
 3424              	.LVL200:
 3425              	.L172:
 596:armwave.c     ****             }
 597:armwave.c     ****         }
 598:armwave.c     **** 
 599:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3426              		.loc 1 599 9 is_stmt 1 discriminator 2 view .LVU925
 3427              	@ armwave.c:599:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3428              		.loc 1 599 46 is_stmt 0 discriminator 2 view .LVU926
 3429 0fb4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3430              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3431              		.loc 1 573 27 discriminator 2 view .LVU927
 3432 0fb8 018088E2 		add	r8, r8, #1	@ s, s,
 3433              	.LVL201:
 3434              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3435              		.loc 1 573 5 discriminator 2 view .LVU928
 3436 0fbc 080059E1 		cmp	r9, r8	@ sets, s
 3437              	@ armwave.c:599:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3438              		.loc 1 599 20 discriminator 2 view .LVU929
 3439 0fc0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3440              	.LVL202:
 3441              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3442              		.loc 1 573 5 discriminator 2 view .LVU930
 3443 0fc4 AEFFFF1A 		bne	.L171		@,
 3444              	.LVL203:
 3445              	.L168:
 3446              	@ armwave.c:601: }
 600:armwave.c     ****     }
 601:armwave.c     **** }
 3447              		.loc 1 601 1 view .LVU931
 3448 0fc8 08D08DE2 		add	sp, sp, #8	@,,
 3449              		.cfi_remember_state
 3450              		.cfi_def_cfa_offset 80
 3451              		@ sp needed	@
 3452 0fcc 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3453              		.cfi_restore 90
 3454              		.cfi_restore 91
 3455              		.cfi_restore 88
 3456              		.cfi_restore 89
 3457              		.cfi_restore 86
 3458              		.cfi_restore 87
 3459              		.cfi_restore 84
 3460              		.cfi_restore 85
 3461              		.cfi_restore 82
 3462              		.cfi_restore 83
 3463              		.cfi_restore 80
 3464              		.cfi_restore 81
 3465              		.cfi_def_cfa_offset 32
 3466              	.LVL204:
 3467              		.loc 1 601 1 view .LVU932
 3468 0fd0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3469              	.LVL205:
 3470              	.L198:
 3471              		.cfi_restore_state
 3472              	.LBB56:
 3473              	.LBB53:
 521:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3474              		.loc 1 521 9 is_stmt 1 view .LVU933
 3475 0fd4 940901E0 		mul	r1, r4, r9	@, _85, sets
 3476 0fd8 0920A0E1 		mov	r2, r9	@, sets
 3477 0fdc 28009FE5 		ldr	r0, .L199+36	@,
 3478 0fe0 FEFFFFEB 		bl	printf		@
 3479              	.LVL206:
 523:armwave.c     ****     }
 3480              		.loc 1 523 9 view .LVU934
 3481 0fe4 9FFFFFEA 		b	.L170		@
 3482              	.L200:
 3483              		.align	2
 3484              	.L199:
 3485 0fe8 0000803F 		.word	1065353216
 3486 0fec 00007F43 		.word	1132396544
 3487 0ff0 0000003F 		.word	1056964608
 3488 0ff4 C3F5C840 		.word	1086911939
 3489 0ff8 38FFC74A 		.word	1254620984
 3490 0ffc 0000FE42 		.word	1123942400
 3491 1000 00000043 		.word	1124073472
 3492 1004 00000000 		.word	g_armwave_state
 3493 1008 90020000 		.word	.LC20
 3494 100c E8010000 		.word	.LC18
 3495              	.LBE53:
 3496              	.LBE56:
 3497              		.cfi_endproc
 3498              	.LFE75:
 3500              		.align	2
 3501              		.global	armwave_cleanup
 3502              		.syntax unified
 3503              		.arm
 3504              		.fpu vfp
 3506              	armwave_cleanup:
 3507              	.LFB76:
 602:armwave.c     **** 
 603:armwave.c     **** /*
 604:armwave.c     ****  * Make a test square waveform.
 605:armwave.c     ****  *
 606:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 607:armwave.c     ****  */
 608:armwave.c     **** #if 0
 609:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 610:armwave.c     **** {
 611:armwave.c     ****     uint8_t v;
 612:armwave.c     ****     float noise, xnoise;
 613:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 614:armwave.c     ****     int w, x;
 615:armwave.c     **** 
 616:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 617:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 618:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 619:armwave.c     ****             noise *= noise;
 620:armwave.c     ****             noise *= noise;
 621:armwave.c     ****             noise *= noise;
 622:armwave.c     **** 
 623:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 624:armwave.c     ****                 noise = -noise;
 625:armwave.c     **** 
 626:armwave.c     ****             //noise += 1.0f;
 627:armwave.c     **** 
 628:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 629:armwave.c     ****                 new_level = 0.2f;
 630:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 631:armwave.c     ****                 new_level = 0.8f;
 632:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 633:armwave.c     ****                 new_level = 0.2f;
 634:armwave.c     ****             } else {
 635:armwave.c     ****                 new_level = 0.8f;
 636:armwave.c     ****             }
 637:armwave.c     **** 
 638:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 639:armwave.c     **** 
 640:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 641:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 642:armwave.c     ****         }
 643:armwave.c     ****     }
 644:armwave.c     **** }
 645:armwave.c     **** #endif
 646:armwave.c     **** 
 647:armwave.c     **** /*
 648:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 649:armwave.c     ****  */
 650:armwave.c     **** void armwave_cleanup()
 651:armwave.c     **** {
 3508              		.loc 1 651 1 view -0
 3509              		.cfi_startproc
 3510              		@ args = 0, pretend = 0, frame = 0
 3511              		@ frame_needed = 0, uses_anonymous_args = 0
 652:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3512              		.loc 1 652 5 view .LVU936
 3513              	@ armwave.c:651: {
 651:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3514              		.loc 1 651 1 is_stmt 0 view .LVU937
 3515 1010 10402DE9 		push	{r4, lr}	@
 3516              		.cfi_def_cfa_offset 8
 3517              		.cfi_offset 4, -8
 3518              		.cfi_offset 14, -4
 3519              	@ armwave.c:652:     free(g_armwave_state.out_pixbuf);
 3520              		.loc 1 652 25 view .LVU938
 3521 1014 34409FE5 		ldr	r4, .L203	@ tmp114,
 3522              	@ armwave.c:652:     free(g_armwave_state.out_pixbuf);
 3523              		.loc 1 652 5 view .LVU939
 3524 1018 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3525 101c FEFFFFEB 		bl	free		@
 3526              	.LVL207:
 653:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3527              		.loc 1 653 5 is_stmt 1 view .LVU940
 3528 1020 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3529 1024 FEFFFFEB 		bl	free		@
 3530              	.LVL208:
 654:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3531              		.loc 1 654 5 view .LVU941
 3532 1028 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3533 102c FEFFFFEB 		bl	free		@
 3534              	.LVL209:
 655:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3535              		.loc 1 655 5 view .LVU942
 3536 1030 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3537 1034 FEFFFFEB 		bl	free		@
 3538              	.LVL210:
 656:armwave.c     **** 
 657:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3539              		.loc 1 657 5 view .LVU943
 3540              	@ armwave.c:657:     g_armwave_state.out_pixbuf = NULL;
 3541              		.loc 1 657 32 is_stmt 0 view .LVU944
 3542 1038 0030A0E3 		mov	r3, #0	@ tmp123,
 3543 103c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 658:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3544              		.loc 1 658 5 is_stmt 1 view .LVU945
 3545              	@ armwave.c:658:     g_armwave_state.ch1_buffer = NULL;
 3546              		.loc 1 658 32 is_stmt 0 view .LVU946
 3547 1040 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 659:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3548              		.loc 1 659 5 is_stmt 1 view .LVU947
 3549              	@ armwave.c:659:     g_armwave_state.xcoord_to_xpixel = NULL;
 3550              		.loc 1 659 38 is_stmt 0 view .LVU948
 3551 1044 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 660:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3552              		.loc 1 660 5 is_stmt 1 view .LVU949
 3553              	@ armwave.c:660:     g_armwave_state.test_wave_buffer = NULL;
 3554              		.loc 1 660 38 is_stmt 0 view .LVU950
 3555 1048 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3556              	@ armwave.c:661: }
 661:armwave.c     **** }
 3557              		.loc 1 661 1 view .LVU951
 3558 104c 1080BDE8 		pop	{r4, pc}	@
 3559              	.L204:
 3560              		.align	2
 3561              	.L203:
 3562 1050 00000000 		.word	g_armwave_state
 3563              		.cfi_endproc
 3564              	.LFE76:
 3566              		.comm	gamma_table,256,4
 3567              		.comm	g_armwave_state,136,4
 3568              		.section	.rodata
 3569              		.align	2
 3570              		.set	.LANCHOR0,. + 0
 3573              	__PRETTY_FUNCTION__.17096:
 3574 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3574      6176655F 
 3574      66696C6C 
 3574      5F706978 
 3574      6275665F 
 3575 001b 00       		.space	1
 3578              	__PRETTY_FUNCTION__.17120:
 3579 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3579      6176655F 
 3579      73657475 
 3579      705F7265 
 3579      6E646572 
 3580 0031 000000   		.space	3
 3583              	__PRETTY_FUNCTION__.17127:
 3584 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3584      6176655F 
 3584      7365745F 
 3584      77617665 
 3584      5F706F69 
 3585 004d 000000   		.space	3
 3588              	__PRETTY_FUNCTION__.17134:
 3589 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3589      6176655F 
 3589      7365745F 
 3589      77617665 
 3589      5F706F69 
 3590              		.section	.rodata.str1.4,"aMS",%progbits,1
 3591              		.align	2
 3592              	.LC0:
 3593 0000 76302E30 		.ascii	"v0.0.1\000"
 3593      2E3100
 3594 0007 00       		.space	1
 3595              	.LC1:
 3596 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3596      61766520 
 3596      76657273 
 3596      696F6E3A 
 3596      2025730A 
 3597 001d 000000   		.space	3
 3598              	.LC2:
 3599 0020 61726D77 		.ascii	"armwave.c\000"
 3599      6176652E 
 3599      6300
 3600 002a 0000     		.space	2
 3601              	.LC3:
 3602 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3602      62756666 
 3602      65722021 
 3602      3D204E55 
 3602      4C4C00
 3603 003f 00       		.space	1
 3604              	.LC4:
 3605 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3605      20653D25 
 3605      6420773D 
 3605      25642077 
 3605      733D2564 
 3606              	.LC5:
 3607 006c 73746172 		.ascii	"start_point < end_point\000"
 3607      745F706F 
 3607      696E7420 
 3607      3C20656E 
 3607      645F706F 
 3608              	.LC6:
 3609 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3609      7566665F 
 3609      73697A65 
 3609      3D25642C 
 3609      20636D70 
 3610 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3610      5F776964 
 3610      74683D25 
 3610      642C2077 
 3610      6176655F 
 3611 00e1 000000   		.space	3
 3612              	.LC7:
 3613 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3613      6D776176 
 3613      655F7374 
 3613      6174652E 
 3613      6368315F 
 3614 0107 00       		.space	1
 3615              	.LC8:
 3616 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3616      6D776176 
 3616      655F7374 
 3616      6174652E 
 3616      78636F6F 
 3617 0131 000000   		.space	3
 3618              	.LC9:
 3619 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3619      3A203078 
 3619      25303878 
 3619      20307825 
 3619      30387820 
 3620              	.LC10:
 3621 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3621      5F627566 
 3621      66657220 
 3621      213D204E 
 3621      554C4C00 
 3622              	.LC11:
 3623 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3623      6176655F 
 3623      7365745F 
 3623      77617665 
 3623      5F706F69 
 3624 019f 78636565 		.ascii	"xceeded\000"
 3624      64656400 
 3625 01a7 00       		.space	1
 3626              	.LC12:
 3627 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3627      5F627566 
 3627      6665725F 
 3627      70747220 
 3627      213D2030 
 3628 01bd 000000   		.space	3
 3629              	.LC13:
 3630 01c0 776200   		.ascii	"wb\000"
 3631 01c3 00       		.space	1
 3632              	.LC14:
 3633 01c4 50330A00 		.ascii	"P3\012\000"
 3634              	.LC15:
 3635 01c8 25642025 		.ascii	"%d %d\012\000"
 3635      640A00
 3636 01cf 00       		.space	1
 3637              	.LC16:
 3638 01d0 3235350A 		.ascii	"255\012\000"
 3638      00
 3639 01d5 000000   		.space	3
 3640              	.LC17:
 3641 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3641      25336420 
 3641      2533640A 
 3641      00
 3642 01e5 000000   		.space	3
 3643              	.LC18:
 3644 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3644      6176655F 
 3644      74657374 
 3644      5F627566 
 3644      6665725F 
 3645 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3645      20627566 
 3645      66657220 
 3645      28256420 
 3645      62797465 
 3646              	.LC19:
 3647 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3647      6176655F 
 3647      66696C6C 
 3647      5F706978 
 3647      6275665F 
 3648 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3648      20666169 
 3648      6C65642C 
 3648      20726574 
 3648      75726E69 
 3649 028e 0000     		.space	2
 3650              	.LC20:
 3651 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3651      756C6174 
 3651      696E6720 
 3651      74657374 
 3651      20736574 
 3652              		.text
 3653              	.Letext0:
 3654              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3655              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3656              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3657              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3658              		.file 7 "/usr/include/stdio.h"
 3659              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3660              		.file 9 "/usr/include/errno.h"
 3661              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3662              		.file 11 "/usr/include/unistd.h"
 3663              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3664              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3665              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3666              		.file 15 "/usr/include/math.h"
 3667              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3668              		.file 17 "/usr/include/time.h"
 3669              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3670              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3671              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3672              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3673              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3674              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3675              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3676              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3677              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3678              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3679              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3680              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3681              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3682              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3683              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3684              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3685              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3686              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3687              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3688              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3689              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3690              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3691              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3692              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3693              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3694              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3695              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3696              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3697              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3698              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3699              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3700              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3701              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3702              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3703              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3704              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3705              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3706              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3707              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3708              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3709              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3710              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3711              		.file 60 "/usr/local/include/python3.8/context.h"
 3712              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3713              		.file 62 "/usr/local/include/python3.8/code.h"
 3714              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3715              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3716              		.file 65 "/usr/local/include/python3.8/import.h"
 3717              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3718              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3719              		.file 68 "/usr/include/malloc.h"
 3720              		.file 69 "armwave.h"
 3721              		.file 70 "/usr/include/stdlib.h"
 3722              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3723              		.file 72 "<built-in>"
 3724              		.file 73 "/usr/include/assert.h"
 3725              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
