   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.34,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.34,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.34,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.34
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.34, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 82 is_stmt 0 view .LVU31
 237 009c 08329FE5 		ldr	r3, .L25	@ tmp202,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 259 00b0 40E093E5 		ldr	lr, [r3, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp206, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 384093E5 		ldr	r4, [r3, #56]	@ _77, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 23 view .LVU37
 269 00bc 04C093E5 		ldr	ip, [r3, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 270 00c0 8E90A0E1 		lsl	r9, lr, #1	@ _69, g_armwave_state.bitdepth_height,
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU38
 273 00c4 2118A0E1 		lsr	r1, r1, #16	@ tmp207, tmp206,
 274              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 275              		.loc 1 79 5 view .LVU39
 276 00c8 000054E3 		cmp	r4, #0	@ _77,
 277              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 278              		.loc 1 79 35 view .LVU40
 279 00cc 20408DE5 		str	r4, [sp, #32]	@ _77, %sfp
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 23 view .LVU41
 282 00d0 99C12AE0 		mla	r10, r9, r1, ip	@ write_buffer_base, _69, tmp207, g_armwave_state.ch1_buffer
 283              	.LVL8:
 284              		.loc 1 79 5 is_stmt 1 view .LVU42
 285              		.loc 1 79 5 is_stmt 0 view .LVU43
 286 00d4 6E0000DA 		ble	.L12		@,
 287              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 288              		.loc 1 80 36 view .LVU44
 289 00d8 141093E5 		ldr	r1, [r3, #20]	@ _9, g_armwave_state.wave_buffer
 290 00dc 343093E5 		ldr	r3, [r3, #52]	@ _227, g_armwave_state.wave_stride
 291 00e0 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 292 00e4 24308DE5 		str	r3, [sp, #36]	@ _227, %sfp
 293 00e8 8230A0E1 		lsl	r3, r2, #1	@ tmp215, _2,
 294 00ec 2C308DE5 		str	r3, [sp, #44]	@ tmp215, %sfp
 295 00f0 023083E0 		add	r3, r3, r2	@ ivtmp.43, tmp215, _2
 296 00f4 001081E0 		add	r1, r1, r0	@ tmp213, _9, slice_y
 297 00f8 28308DE5 		str	r3, [sp, #40]	@ ivtmp.43, %sfp
 298              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 299              		.loc 1 79 11 view .LVU45
 300 00fc 0980A0E1 		mov	r8, r9	@ _69, _69
 301 0100 0231A0E1 		lsl	r3, r2, #2	@ _208, _2,
 302 0104 000061E2 		rsb	r0, r1, #0	@ ivtmp.49, tmp213
 303              	.LVL9:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 304              		.loc 1 79 11 view .LVU46
 305 0108 18108DE5 		str	r1, [sp, #24]	@ tmp213, %sfp
 306 010c 00308DE5 		str	r3, [sp]	@ _208, %sfp
 307 0110 8C10A0E1 		lsl	r1, ip, #1	@ tmp220, tmp219,
 308 0114 0030A0E3 		mov	r3, #0	@ w,
 309 0118 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.49, %sfp
 310 011c 14108DE5 		str	r1, [sp, #20]	@ tmp220, %sfp
 311 0120 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 312              	.LVL10:
 313              	.L18:
 314              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 315              		.loc 1 84 9 view .LVU48
 316              		.loc 1 84 9 is_stmt 0 view .LVU49
 317 0124 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 318 0128 000053E3 		cmp	r3, #0	@ height,
 319 012c 4B00000A 		beq	.L13		@,
 320 0130 2C009DE5 		ldr	r0, [sp, #44]	@ ivtmp.44, %sfp
 321 0134 28709DE5 		ldr	r7, [sp, #40]	@ ivtmp.43, %sfp
 322 0138 18909DE5 		ldr	r9, [sp, #24]	@ ivtmp.42, %sfp
 323              	.LVL11:
 324              	.L17:
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 325              		.loc 1 85 13 is_stmt 1 view .LVU50
  86:armwave.c     **** 
  87:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d word=0x%08x\n", w, g_armwave_sta
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 // BUG:  waves 3/4/5 seem to be all zeroes; this kinda ignores them but obviously n
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 326              		.loc 1 101 17 view .LVU51
 327              		.loc 1 101 17 view .LVU52
 328              		.loc 1 101 17 view .LVU53
 329              		.loc 1 101 17 view .LVU54
 330              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 102 34 is_stmt 0 view .LVU55
 332 013c 14309DE5 		ldr	r3, [sp, #20]	@ tmp220, %sfp
 333 0140 00209DE5 		ldr	r2, [sp]	@ _208, %sfp
 334 0144 03C087E0 		add	ip, r7, r3	@ tmp243, ivtmp.43, tmp220
 335 0148 03E080E0 		add	lr, r0, r3	@ tmp228, ivtmp.44, tmp220
 336              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 337              		.loc 1 85 18 view .LVU56
 338 014c 043099E4 		ldr	r3, [r9], #4	@ word, MEM[base: _214, offset: 0B]
 339              	.LVL12:
  89:armwave.c     ****                 scale_value = word & 0xff;
 340              		.loc 1 89 13 is_stmt 1 view .LVU57
  90:armwave.c     ****                 
 341              		.loc 1 90 17 view .LVU58
  94:armwave.c     ****                     continue;
 342              		.loc 1 94 17 view .LVU59
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 344              		.loc 1 102 74 is_stmt 0 view .LVU60
 345 0150 2718A0E1 		lsr	r1, r7, #16	@ tmp271, ivtmp.43,
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 view .LVU61
 348 0154 FF6013E2 		ands	r6, r3, #255	@ scale_value, word,
 349 0158 0140A003 		moveq	r4, #1	@ tmp222,
 350 015c 0040A013 		movne	r4, #0	@ tmp222,
 351              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 352              		.loc 1 94 19 view .LVU62
 353 0160 FF0056E3 		cmp	r6, #255	@ scale_value,
 354 0164 01408403 		orreq	r4, r4, #1	@,, tmp227, tmp222
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU63
 357 0168 8650A0E1 		lsl	r5, r6, #1	@ tmp231, scale_value,
 358              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 359              		.loc 1 84 9 view .LVU64
 360 016c 0C609DE5 		ldr	r6, [sp, #12]	@ ivtmp.49, %sfp
 361              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 362              		.loc 1 94 19 view .LVU65
 363 0170 000054E3 		cmp	r4, #0	@ tmp227,
 364              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 365              		.loc 1 84 9 view .LVU66
 366 0174 066089E0 		add	r6, r9, r6	@ tmp277, ivtmp.42, ivtmp.49
 367              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 368              		.loc 1 102 74 view .LVU67
 369 0178 08108DE5 		str	r1, [sp, #8]	@ tmp271, %sfp
 370 017c 027087E0 		add	r7, r7, r2	@ ivtmp.43, ivtmp.43, _208
 371 0180 2EE8A0E1 		lsr	lr, lr, #16	@ tmp229, tmp228,
 372 0184 2CC8A0E1 		lsr	ip, ip, #16	@ tmp244, tmp243,
 373              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 374              		.loc 1 107 22 view .LVU68
 375 0188 2314A0E1 		lsr	r1, r3, #8	@ word, word,
 376 018c 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 377              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 378              		.loc 1 84 9 view .LVU69
 379 0190 04608DE5 		str	r6, [sp, #4]	@ tmp277, %sfp
 380              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 381              		.loc 1 94 19 view .LVU70
 382 0194 2B00001A 		bne	.L16		@,
 383              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 384              		.loc 1 101 30 view .LVU71
 385 0198 98AE2BE0 		mla	fp, r8, lr, r10	@ write_buffer, _69, tmp229, write_buffer_base
 386              	.LVL13:
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 17 is_stmt 1 view .LVU72
 388              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 389              		.loc 1 94 20 is_stmt 0 view .LVU73
 390 019c FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 391 01a0 0140A003 		moveq	r4, #1	@ tmp237,
 392              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 393              		.loc 1 106 47 view .LVU74
 394 01a4 B5E09BE1 		ldrh	lr, [fp, r5]	@ *_88, *_88
 395              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 396              		.loc 1 94 20 view .LVU75
 397 01a8 0040A013 		movne	r4, #0	@ tmp237,
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU76
 400 01ac 8160A0E1 		lsl	r6, r1, #1	@ tmp246, scale_value,
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU77
 403 01b0 FF0051E3 		cmp	r1, #255	@ scale_value,
 404 01b4 0410A011 		movne	r1, r4	@, tmp242, tmp237
 405 01b8 01108403 		orreq	r1, r4, #1	@,, tmp242, tmp237
 406              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 407              		.loc 1 106 47 view .LVU78
 408 01bc 01E08EE2 		add	lr, lr, #1	@ tmp234, *_88,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 view .LVU79
 411 01c0 000051E3 		cmp	r1, #0	@ tmp242,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU80
 414 01c4 B5E08BE1 		strh	lr, [fp, r5]	@ movhi	@ tmp234, *_88
 415              		.loc 1 107 17 is_stmt 1 view .LVU81
 416              	.LVL14:
  90:armwave.c     ****                 
 417              		.loc 1 90 17 view .LVU82
  94:armwave.c     ****                     continue;
 418              		.loc 1 94 17 view .LVU83
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 19 is_stmt 0 view .LVU84
 421 01c8 1E00001A 		bne	.L16		@,
 422              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 423              		.loc 1 101 30 view .LVU85
 424 01cc 98AC2BE0 		mla	fp, r8, ip, r10	@ write_buffer, _69, tmp244, write_buffer_base
 425              	.LVL15:
 106:armwave.c     ****                 word >>= 8;
 426              		.loc 1 106 17 is_stmt 1 view .LVU86
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 is_stmt 0 view .LVU87
 429 01d0 FF2012E2 		ands	r2, r2, #255	@ scale_value, word,
 430 01d4 01C0A003 		moveq	ip, #1	@ tmp252,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU88
 433 01d8 B6109BE1 		ldrh	r1, [fp, r6]	@ *_119, *_119
 434              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 435              		.loc 1 94 20 view .LVU89
 436 01dc 00C0A013 		movne	ip, #0	@ tmp252,
 437              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 438              		.loc 1 106 47 view .LVU90
 439 01e0 82E0A0E1 		lsl	lr, r2, #1	@ tmp260, scale_value,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 19 view .LVU91
 442 01e4 FF0052E3 		cmp	r2, #255	@ scale_value,
 443 01e8 0C20A011 		movne	r2, ip	@, tmp257, tmp252
 444 01ec 01208C03 		orreq	r2, ip, #1	@,, tmp257, tmp252
 445              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 446              		.loc 1 106 47 view .LVU92
 447 01f0 011081E2 		add	r1, r1, #1	@ tmp249, *_119,
 448              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 19 view .LVU93
 450 01f4 000052E3 		cmp	r2, #0	@ tmp257,
 451              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 452              		.loc 1 106 47 view .LVU94
 453 01f8 B6108BE1 		strh	r1, [fp, r6]	@ movhi	@ tmp249, *_119
 454              		.loc 1 107 17 is_stmt 1 view .LVU95
 455              	.LVL16:
  90:armwave.c     ****                 
 456              		.loc 1 90 17 view .LVU96
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 17 view .LVU97
 458              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 459              		.loc 1 94 19 is_stmt 0 view .LVU98
 460 01fc 1100001A 		bne	.L16		@,
 461              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 462              		.loc 1 101 30 view .LVU99
 463 0200 2028A0E1 		lsr	r2, r0, #16	@ tmp258, ivtmp.44,
 464              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 465              		.loc 1 94 20 view .LVU100
 466 0204 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 467              	.LVL17:
 468              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 469              		.loc 1 101 30 view .LVU101
 470 0208 98A22BE0 		mla	fp, r8, r2, r10	@ write_buffer, _69, tmp258, write_buffer_base
 471              	.LVL18:
 106:armwave.c     ****                 word >>= 8;
 472              		.loc 1 106 17 is_stmt 1 view .LVU102
 473              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 474              		.loc 1 94 20 is_stmt 0 view .LVU103
 475 020c 0110A003 		moveq	r1, #1	@ tmp265,
 476 0210 0010A013 		movne	r1, #0	@ tmp265,
 477              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 478              		.loc 1 106 47 view .LVU104
 479 0214 83C0A0E1 		lsl	ip, r3, #1	@ tmp273, word,
 480              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 481              		.loc 1 94 19 view .LVU105
 482 0218 FF0053E3 		cmp	r3, #255	@ word,
 483 021c 0130A011 		movne	r3, r1	@, tmp270, tmp265
 484 0220 01308103 		orreq	r3, r1, #1	@,, tmp270, tmp265
 485 0224 000053E3 		cmp	r3, #0	@ tmp270,
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU106
 488 0228 BE209BE1 		ldrh	r2, [fp, lr]	@ *_150, *_150
 489              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 490              		.loc 1 101 30 view .LVU107
 491 022c 08109D05 		ldreq	r1, [sp, #8]	@ tmp271, %sfp
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU108
 494 0230 012082E2 		add	r2, r2, #1	@ tmp263, *_150,
 495 0234 BE208BE1 		strh	r2, [fp, lr]	@ movhi	@ tmp263, *_150
 496              		.loc 1 107 17 is_stmt 1 view .LVU109
 497              	.LVL19:
  90:armwave.c     ****                 
 498              		.loc 1 90 17 view .LVU110
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU111
 500              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 501              		.loc 1 101 30 is_stmt 0 view .LVU112
 502 0238 98A12B00 		mlaeq	fp, r8, r1, r10	@ write_buffer, _69, tmp271, write_buffer_base
 503              	.LVL20:
 106:armwave.c     ****                 word >>= 8;
 504              		.loc 1 106 17 is_stmt 1 view .LVU113
 505              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 506              		.loc 1 106 47 is_stmt 0 view .LVU114
 507 023c BC309B01 		ldrheq	r3, [fp, ip]	@ *_181, *_181
 508 0240 01308302 		addeq	r3, r3, #1	@ tmp276, *_181,
 509 0244 BC308B01 		strheq	r3, [fp, ip]	@ movhi	@ tmp276, *_181
 510              		.loc 1 107 17 is_stmt 1 view .LVU115
 511              	.LVL21:
 512              	.L16:
 513              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 514              		.loc 1 84 9 is_stmt 0 view .LVU116
 515 0248 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 516 024c 04209DE5 		ldr	r2, [sp, #4]	@ tmp277, %sfp
 517 0250 020053E1 		cmp	r3, r2	@ height, tmp277
 518 0254 00309DE5 		ldr	r3, [sp]	@ _208, %sfp
 519 0258 030080E0 		add	r0, r0, r3	@ ivtmp.44, ivtmp.44, _208
 520 025c B6FFFF8A 		bhi	.L17		@,
 521              	.L13:
 522              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 523              		.loc 1 79 44 discriminator 2 view .LVU117
 524 0260 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 525              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 526              		.loc 1 79 5 discriminator 2 view .LVU118
 527 0264 20209DE5 		ldr	r2, [sp, #32]	@ _77, %sfp
 528              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 529              		.loc 1 79 44 discriminator 2 view .LVU119
 530 0268 013083E2 		add	r3, r3, #1	@ w, w,
 531              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 79 5 discriminator 2 view .LVU120
 533 026c 020053E1 		cmp	r3, r2	@ w, _77
 534              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 535              		.loc 1 79 44 discriminator 2 view .LVU121
 536 0270 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 537              	.LVL22:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 538              		.loc 1 79 44 discriminator 2 view .LVU122
 539 0274 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.49, %sfp
 540 0278 24309DE5 		ldr	r3, [sp, #36]	@ _227, %sfp
 541              	.LVL23:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 discriminator 2 view .LVU123
 543 027c 032042E0 		sub	r2, r2, r3	@ ivtmp.49, ivtmp.49, _227
 544 0280 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.49, %sfp
 545 0284 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.50, %sfp
 546 0288 033082E0 		add	r3, r2, r3	@ ivtmp.50, ivtmp.50, _227
 547 028c 18308DE5 		str	r3, [sp, #24]	@ ivtmp.50, %sfp
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 discriminator 2 view .LVU124
 550 0290 A3FFFF1A 		bne	.L18		@,
 551              	.LVL24:
 552              	.L12:
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** 
 112:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 553              		.loc 1 112 5 is_stmt 1 view .LVU125
 554              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 555              		.loc 1 112 40 is_stmt 0 view .LVU126
 556 0294 0A104BE0 		sub	r1, fp, r10	@ tmp278, write_buffer, write_buffer_base
 557              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 558              		.loc 1 112 5 view .LVU127
 559 0298 10009FE5 		ldr	r0, .L25+4	@,
 560 029c C110A0E1 		asr	r1, r1, #1	@, tmp278,
 561              	@ armwave.c:113: }
 113:armwave.c     **** }
 562              		.loc 1 113 1 view .LVU128
 563 02a0 34D08DE2 		add	sp, sp, #52	@,,
 564              		.cfi_def_cfa_offset 36
 565              		@ sp needed	@
 566 02a4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 567              		.cfi_restore 14
 568              		.cfi_restore 11
 569              		.cfi_restore 10
 570              		.cfi_restore 9
 571              		.cfi_restore 8
 572              		.cfi_restore 7
 573              		.cfi_restore 6
 574              		.cfi_restore 5
 575              		.cfi_restore 4
 576              		.cfi_def_cfa_offset 0
 577              	.LVL25:
 578              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 579              		.loc 1 112 5 view .LVU129
 580 02a8 FEFFFFEA 		b	printf		@
 581              	.LVL26:
 582              	.L26:
 583              		.align	2
 584              	.L25:
 585 02ac 00000000 		.word	g_armwave_state
 586 02b0 20000000 		.word	.LC2
 587              		.cfi_endproc
 588              	.LFE59:
 590              		.align	2
 591              		.global	armwave_fill_pixbuf_scaled
 592              		.syntax unified
 593              		.arm
 594              		.fpu vfp
 596              	armwave_fill_pixbuf_scaled:
 597              	.LVL27:
 598              	.LFB60:
 114:armwave.c     **** 
 115:armwave.c     **** /*
 116:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 117:armwave.c     ****  * Rows are repeated as necessary.
 118:armwave.c     ****  */
 119:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 120:armwave.c     **** {
 599              		.loc 1 120 1 is_stmt 1 view -0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 8
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 603              		.loc 1 121 5 view .LVU131
 122:armwave.c     ****     // uint32_t ysub;
 123:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 604              		.loc 1 123 5 view .LVU132
 124:armwave.c     ****     uint8_t r, g, b;
 605              		.loc 1 124 5 view .LVU133
 125:armwave.c     ****     int value; 
 606              		.loc 1 125 5 view .LVU134
 126:armwave.c     ****     // uint8_t row;
 127:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 607              		.loc 1 127 5 view .LVU135
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 608              		.loc 1 128 5 view .LVU136
 129:armwave.c     ****     uint32_t offset;
 609              		.loc 1 129 5 view .LVU137
 130:armwave.c     **** 
 131:armwave.c     ****     //printf("output buffer: 0x%08x\n", out_buffer);
 132:armwave.c     **** 
 133:armwave.c     ****     if(out_buffer == NULL)
 610              		.loc 1 133 5 view .LVU138
 611              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 612              		.loc 1 120 1 is_stmt 0 view .LVU139
 613 02b4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 614              		.cfi_def_cfa_offset 36
 615              		.cfi_offset 4, -36
 616              		.cfi_offset 5, -32
 617              		.cfi_offset 6, -28
 618              		.cfi_offset 7, -24
 619              		.cfi_offset 8, -20
 620              		.cfi_offset 9, -16
 621              		.cfi_offset 10, -12
 622              		.cfi_offset 11, -8
 623              		.cfi_offset 14, -4
 624              	@ armwave.c:133:     if(out_buffer == NULL)
 625              		.loc 1 133 7 view .LVU140
 626 02b8 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 627              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 628              		.loc 1 120 1 view .LVU141
 629 02bc 0CD04DE2 		sub	sp, sp, #12	@,,
 630              		.cfi_def_cfa_offset 48
 631              	@ armwave.c:133:     if(out_buffer == NULL)
 632              		.loc 1 133 7 view .LVU142
 633 02c0 1900000A 		beq	.L27		@,
 634              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 635              		.loc 1 127 15 view .LVU143
 636 02c4 50619FE5 		ldr	r6, .L48	@ tmp217,
 637              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 134:armwave.c     ****         return;
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 138:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 140:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 141:armwave.c     **** 
 142:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 143:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 638              		.loc 1 143 5 view .LVU144
 639 02c8 0010A0E3 		mov	r1, #0	@,
 640              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 641              		.loc 1 136 27 view .LVU145
 642 02cc 583096E5 		ldr	r3, [r6, #88]	@ _1, g_armwave_state.target_width
 643              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 644              		.loc 1 143 59 view .LVU146
 645 02d0 5C2096E5 		ldr	r2, [r6, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 646              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 647              		.loc 1 136 10 view .LVU147
 648 02d4 405096E5 		ldr	r5, [r6, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 649              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 650              		.loc 1 127 15 view .LVU148
 651 02d8 044096E5 		ldr	r4, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 136:armwave.c     ****     
 652              		.loc 1 136 5 is_stmt 1 view .LVU149
 653              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 654              		.loc 1 143 59 is_stmt 0 view .LVU150
 655 02dc 920302E0 		mul	r2, r2, r3	@ tmp178, g_armwave_state.target_height, _1
 656              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 657              		.loc 1 136 10 view .LVU151
 658 02e0 950305E0 		mul	r5, r5, r3	@ npix, g_armwave_state.bitdepth_height, _1
 659              	.LVL28:
 660              		.loc 1 143 5 is_stmt 1 view .LVU152
 661 02e4 0221A0E1 		lsl	r2, r2, #2	@, tmp178,
 662 02e8 FEFFFFEB 		bl	memset		@
 663              	.LVL29:
 144:armwave.c     **** 
 145:armwave.c     ****     //printf("iter...\n");
 146:armwave.c     **** 
 147:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 664              		.loc 1 147 5 view .LVU153
 665              		.loc 1 147 5 is_stmt 0 view .LVU154
 666 02ec 000055E3 		cmp	r5, #0	@ npix,
 667 02f0 0D0000DA 		ble	.L27		@,
 668              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 149:armwave.c     ****         //wave_word = 0x12345678;
 150:armwave.c     ****         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 152:armwave.c     ****         /*
 153:armwave.c     ****         if(n % 200 == 0) {
 154:armwave.c     ****            printf("%d\n", n);
 155:armwave.c     ****         }
 156:armwave.c     ****         */
 157:armwave.c     **** 
 158:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 162:armwave.c     **** 
 163:armwave.c     ****                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 669              		.loc 1 165 52 view .LVU155
 670 02f4 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _15, g_armwave_state.ch1_color.g
 671              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 672              		.loc 1 164 52 view .LVU156
 673 02f8 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _12, g_armwave_state.ch1_color.r
 674              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 168:armwave.c     ****                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 171:armwave.c     **** 
 172:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 173:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 175:armwave.c     ****                     // Plot the pixels
 176:armwave.c     ****                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 675              		.loc 1 177 57 view .LVU157
 676 02fc 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _32, g_armwave_state.vscale_frac
 677              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 678              		.loc 1 165 52 view .LVU158
 679 0300 00308DE5 		str	r3, [sp]	@ _15, %sfp
 680              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 681              		.loc 1 166 52 view .LVU159
 682 0304 F037D6E1 		ldrsh	r3, [r6, #112]	@ _18, g_armwave_state.ch1_color.b
 683 0308 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 684              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 685              		.loc 1 147 11 view .LVU160
 686 030c 0030A0E3 		mov	r3, #0	@ n,
 687              	.LVL30:
 688              	.L33:
 150:armwave.c     **** 
 689              		.loc 1 150 9 is_stmt 1 view .LVU161
 690              	@ armwave.c:150:         wave_word = *base_32ptr++;
 150:armwave.c     **** 
 691              		.loc 1 150 19 is_stmt 0 view .LVU162
 692 0310 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_61, offset: 4294967292B]
 693              	.LVL31:
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 694              		.loc 1 158 9 is_stmt 1 view .LVU163
 695              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 696              		.loc 1 158 11 is_stmt 0 view .LVU164
 697 0314 000052E3 		cmp	r2, #0	@ wave_word,
 698              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 699              		.loc 1 159 19 view .LVU165
 700 0318 0080A013 		movne	r8, #0	@ w,
 701              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 702              		.loc 1 158 11 view .LVU166
 703 031c 0400001A 		bne	.L32		@,
 704              	.L29:
 705              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 706              		.loc 1 147 28 view .LVU167
 707 0320 023083E2 		add	r3, r3, #2	@ n, n,
 708              	.LVL32:
 709              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 710              		.loc 1 147 5 view .LVU168
 711 0324 030055E1 		cmp	r5, r3	@ npix, n
 712 0328 F8FFFFCA 		bgt	.L33		@,
 713              	.LVL33:
 714              	.L27:
 715              	@ armwave.c:193: }
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 181:armwave.c     ****                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 186:armwave.c     ****                     }
 187:armwave.c     ****                 }
 188:armwave.c     ****             }
 189:armwave.c     ****         }
 190:armwave.c     ****     }
 191:armwave.c     **** 
 192:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 193:armwave.c     **** }
 716              		.loc 1 193 1 view .LVU169
 717 032c 0CD08DE2 		add	sp, sp, #12	@,,
 718              		.cfi_remember_state
 719              		.cfi_def_cfa_offset 36
 720              		@ sp needed	@
 721 0330 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 722              	.LVL34:
 723              	.L32:
 724              		.cfi_restore_state
 160:armwave.c     ****                 wave_word >>= 16;
 725              		.loc 1 160 17 is_stmt 1 view .LVU170
 726              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 727              		.loc 1 160 23 is_stmt 0 view .LVU171
 728 0334 7290FFE6 		uxth	r9, r2	@ value, wave_word
 729              	.LVL35:
 161:armwave.c     **** 
 730              		.loc 1 161 17 is_stmt 1 view .LVU172
 731              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 732              		.loc 1 163 19 is_stmt 0 view .LVU173
 733 0338 000059E3 		cmp	r9, #0	@ value,
 734              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 735              		.loc 1 161 27 view .LVU174
 736 033c 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 737              	.LVL36:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 738              		.loc 1 163 17 is_stmt 1 view .LVU175
 739              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 740              		.loc 1 163 19 is_stmt 0 view .LVU176
 741 0340 0600001A 		bne	.L47		@,
 742              	.LVL37:
 743              	.L30:
 744              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 745              		.loc 1 159 13 view .LVU177
 746 0344 010058E3 		cmp	r8, #1	@ w,
 747 0348 F4FFFF0A 		beq	.L29		@,
 748              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 749              		.loc 1 160 23 view .LVU178
 750 034c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 751              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 752              		.loc 1 163 19 view .LVU179
 753 0350 000059E3 		cmp	r9, #0	@ value,
 754 0354 0180A0E3 		mov	r8, #1	@ w,
 755              	.LVL38:
 160:armwave.c     ****                 wave_word >>= 16;
 756              		.loc 1 160 17 is_stmt 1 view .LVU180
 161:armwave.c     **** 
 757              		.loc 1 161 17 view .LVU181
 758              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 759              		.loc 1 161 27 is_stmt 0 view .LVU182
 760 0358 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 761              	.LVL39:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 762              		.loc 1 163 17 is_stmt 1 view .LVU183
 763              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 764              		.loc 1 163 19 is_stmt 0 view .LVU184
 765 035c F8FFFF0A 		beq	.L30		@,
 766              	.L47:
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 767              		.loc 1 164 21 is_stmt 1 view .LVU185
 768              	.LVL40:
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 769              		.loc 1 165 21 view .LVU186
 166:armwave.c     **** 
 770              		.loc 1 166 21 view .LVU187
 168:armwave.c     ****                     g = MIN(gg, 255);
 771              		.loc 1 168 21 view .LVU188
 169:armwave.c     ****                     b = MIN(bb, 255);
 772              		.loc 1 169 21 view .LVU189
 170:armwave.c     **** 
 773              		.loc 1 170 21 view .LVU190
 173:armwave.c     **** 
 774              		.loc 1 173 21 view .LVU191
 775              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 776              		.loc 1 166 55 is_stmt 0 view .LVU192
 777 0360 04109DE5 		ldr	r1, [sp, #4]	@ _18, %sfp
 778 0364 08C083E0 		add	ip, r3, r8	@ _130, n, w
 779 0368 990100E0 		mul	r0, r9, r1	@ tmp191, value, _18
 780              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 781              		.loc 1 177 32 view .LVU193
 782 036c 7C10EFE6 		uxtb	r1, ip	@ _30, _130
 783              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 784              		.loc 1 178 41 view .LVU194
 785 0370 01E081E2 		add	lr, r1, #1	@ tmp206, _30,
 786              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 787              		.loc 1 177 40 view .LVU195
 788 0374 901A07EE 		vmov	s15, r1	@ int	@ _30, _30
 789              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 790              		.loc 1 178 41 view .LVU196
 791 0378 10EA07EE 		vmov	s14, lr	@ int	@ tmp206, tmp206
 792              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 793              		.loc 1 165 55 view .LVU197
 794 037c 00109DE5 		ldr	r1, [sp]	@ _15, %sfp
 795              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 796              		.loc 1 166 24 view .LVU198
 797 0380 4004A0E1 		asr	r0, r0, #8	@ bb, tmp191,
 798              	.LVL41:
 799              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 800              		.loc 1 177 40 view .LVU199
 801 0384 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp204, _30
 802              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 803              		.loc 1 178 46 view .LVU200
 804 0388 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp207, tmp206
 805              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 806              		.loc 1 165 55 view .LVU201
 807 038c 99010AE0 		mul	r10, r9, r1	@ tmp195, value, _15
 808              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 809              		.loc 1 164 55 view .LVU202
 810 0390 990B09E0 		mul	r9, r9, fp	@ tmp201, value, _12
 811              	.LVL42:
 812              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 813              		.loc 1 170 25 view .LVU203
 814 0394 FF0050E3 		cmp	r0, #255	@ bb,
 815              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 816              		.loc 1 165 24 view .LVU204
 817 0398 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp195,
 818              	.LVL43:
 819              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 820              		.loc 1 177 40 view .LVU205
 821 039c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp205, tmp204, _32
 822              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 823              		.loc 1 178 46 view .LVU206
 824 03a0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp208, tmp207, _32
 825              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 826              		.loc 1 170 25 view .LVU207
 827 03a4 FF00A0A3 		movge	r0, #255	@ bb,
 828              	.LVL44:
 829              	@ armwave.c:169:                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 830              		.loc 1 169 25 view .LVU208
 831 03a8 FF005AE3 		cmp	r10, #255	@ gg,
 832 03ac FFA0A0A3 		movge	r10, #255	@ gg,
 833              	.LVL45:
 834              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 835              		.loc 1 164 24 view .LVU209
 836 03b0 4994A0E1 		asr	r9, r9, #8	@ rr, tmp201,
 837              	.LVL46:
 838              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 839              		.loc 1 168 25 view .LVU210
 840 03b4 FF0059E3 		cmp	r9, #255	@ rr,
 841              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 842              		.loc 1 173 56 view .LVU211
 843 03b8 0AA4A0E1 		lsl	r10, r10, #8	@ tmp196, gg,
 844              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 845              		.loc 1 177 24 view .LVU212
 846 03bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp205
 847              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 848              		.loc 1 168 25 view .LVU213
 849 03c0 FF90A0A3 		movge	r9, #255	@ rr,
 850              	.LVL47:
 851              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 852              		.loc 1 179 32 view .LVU214
 853 03c4 4CC4A0E1 		asr	ip, ip, #8	@ tmp209, _130,
 854              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 855              		.loc 1 173 44 view .LVU215
 856 03c8 0008A0E1 		lsl	r0, r0, #16	@ tmp192, bb,
 857              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 858              		.loc 1 173 56 view .LVU216
 859 03cc 7AA0FFE6 		uxth	r10, r10	@ tmp197, tmp196
 860              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 861              		.loc 1 173 44 view .LVU217
 862 03d0 FF0800E2 		and	r0, r0, #16711680	@ tmp193, tmp192,
 863              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 864              		.loc 1 173 51 view .LVU218
 865 03d4 0A0080E1 		orr	r0, r0, r10	@ tmp199, tmp193, tmp197
 866              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 867              		.loc 1 173 62 view .LVU219
 868 03d8 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 869              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 870              		.loc 1 177 24 view .LVU220
 871 03dc 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 872              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 873              		.loc 1 178 24 view .LVU221
 874 03e0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp208
 875              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 876              		.loc 1 179 38 view .LVU222
 877 03e4 AC9F8CE0 		add	r9, ip, ip, lsr #31	@ tmp211, tmp209, tmp209,
 878              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 879              		.loc 1 173 62 view .LVU223
 880 03e8 0A0080E1 		orr	r0, r0, r10	@ tmp203, tmp199, rr
 881              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 882              		.loc 1 173 26 view .LVU224
 883 03ec FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp203,
 884              	.LVL48:
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 885              		.loc 1 176 21 is_stmt 1 view .LVU225
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 886              		.loc 1 177 21 view .LVU226
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 887              		.loc 1 178 21 view .LVU227
 888              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 889              		.loc 1 179 38 is_stmt 0 view .LVU228
 890 03f0 C990A0E1 		asr	r9, r9, #1	@ xx, tmp211,
 891              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 892              		.loc 1 178 24 view .LVU229
 893 03f4 90EA17EE 		vmov	lr, s15	@ int	@ ye, ye
 894              	.LVL49:
 179:armwave.c     **** 
 895              		.loc 1 179 21 is_stmt 1 view .LVU230
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 896              		.loc 1 181 21 view .LVU231
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 897              		.loc 1 181 21 is_stmt 0 view .LVU232
 898 03f8 0E0051E1 		cmp	r1, lr	@ yy, ye
 899 03fc D0FFFF2A 		bcs	.L30		@,
 900              	.LVL50:
 901              	.L31:
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 902              		.loc 1 182 25 is_stmt 1 discriminator 3 view .LVU233
 184:armwave.c     ****                         painted++;
 903              		.loc 1 184 25 discriminator 3 view .LVU234
 904              	@ armwave.c:182:                         offset = (xx + (y * g_armwave_state.target_width)); 
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 905              		.loc 1 182 43 is_stmt 0 discriminator 3 view .LVU235
 906 0400 580096E5 		ldr	r0, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 907              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 908              		.loc 1 184 43 discriminator 3 view .LVU236
 909 0404 909120E0 		mla	r0, r0, r1, r9	@ tmp216, g_armwave_state.target_width, yy, xx
 910              	.LVL51:
 911              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 912              		.loc 1 181 42 discriminator 3 view .LVU237
 913 0408 011081E2 		add	r1, r1, #1	@ yy, yy,
 914              	.LVL52:
 915              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 916              		.loc 1 181 21 discriminator 3 view .LVU238
 917 040c 01005EE1 		cmp	lr, r1	@ ye, yy
 918              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 919              		.loc 1 184 53 discriminator 3 view .LVU239
 920 0410 00C187E7 		str	ip, [r7, r0, lsl #2]	@ word, *_43
 185:armwave.c     ****                     }
 921              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU240
 922              	.LVL53:
 923              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 924              		.loc 1 181 21 is_stmt 0 discriminator 3 view .LVU241
 925 0414 F9FFFF1A 		bne	.L31		@,
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 926              		.loc 1 181 21 discriminator 3 view .LVU242
 927 0418 C9FFFFEA 		b	.L30		@
 928              	.L49:
 929              		.align	2
 930              	.L48:
 931 041c 00000000 		.word	g_armwave_state
 932              		.cfi_endproc
 933              	.LFE60:
 935              		.global	__aeabi_idiv
 936              		.align	2
 937              		.global	armwave_generate
 938              		.syntax unified
 939              		.arm
 940              		.fpu vfp
 942              	armwave_generate:
 943              	.LFB61:
 194:armwave.c     **** 
 195:armwave.c     **** /*
 196:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_generate()
 199:armwave.c     **** {
 944              		.loc 1 199 1 is_stmt 1 view -0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 56
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     uint32_t yy;
 948              		.loc 1 200 5 view .LVU244
 201:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 949              		.loc 1 201 5 view .LVU245
 950              	.LVL54:
 202:armwave.c     **** 
 203:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 951              		.loc 1 203 5 view .LVU246
 952              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 953              		.loc 1 199 1 is_stmt 0 view .LVU247
 954 0420 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 955              		.cfi_def_cfa_offset 36
 956              		.cfi_offset 4, -36
 957              		.cfi_offset 5, -32
 958              		.cfi_offset 6, -28
 959              		.cfi_offset 7, -24
 960              		.cfi_offset 8, -20
 961              		.cfi_offset 9, -16
 962              		.cfi_offset 10, -12
 963              		.cfi_offset 11, -8
 964              		.cfi_offset 14, -4
 965              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 966              		.loc 1 203 5 view .LVU248
 967 0424 0010A0E3 		mov	r1, #0	@,
 968              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 969              		.loc 1 203 58 view .LVU249
 970 0428 68829FE5 		ldr	r8, .L68	@ tmp311,
 971              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 972              		.loc 1 199 1 view .LVU250
 973 042c 3CD04DE2 		sub	sp, sp, #60	@,,
 974              		.cfi_def_cfa_offset 96
 975              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 976              		.loc 1 203 5 view .LVU251
 977 0430 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 978 0434 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 979 0438 FEFFFFEB 		bl	memset		@
 980              	.LVL55:
 204:armwave.c     **** 
 205:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 981              		.loc 1 205 5 is_stmt 1 view .LVU252
 982              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 983              		.loc 1 205 68 is_stmt 0 view .LVU253
 984 043c 44A098E5 		ldr	r10, [r8, #68]	@ _7, g_armwave_state.slice_height
 985              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 986              		.loc 1 205 51 view .LVU254
 987 0440 4C0098E5 		ldr	r0, [r8, #76]	@, g_armwave_state.wave_length
 988 0444 0A10A0E1 		mov	r1, r10	@, _7
 989 0448 FEFFFFEB 		bl	__aeabi_idiv		@
 990              	.LVL56:
 991              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 992              		.loc 1 205 5 view .LVU255
 993 044c 000050E3 		cmp	r0, #0	@,
 994 0450 8E00000A 		beq	.L50		@,
 995              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 996              		.loc 1 205 12 view .LVU256
 997 0454 0790A0E1 		mov	r9, r7	@ write_buffer, write_buffer
 998 0458 0030A0E3 		mov	r3, #0	@ yy,
 999 045c 18308DE5 		str	r3, [sp, #24]	@ yy, %sfp
 1000              	.LVL57:
 1001              	.L51:
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 207:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, \
 209:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 210:armwave.c     **** 
 211:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1002              		.loc 1 211 9 is_stmt 1 discriminator 3 view .LVU257
 1003 0460 18309DE5 		ldr	r3, [sp, #24]	@ yy, %sfp
 1004 0464 402098E5 		ldr	r2, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1005              	.LBB10:
 1006              	.LBB11:
 1007              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1008              		.loc 1 79 35 is_stmt 0 discriminator 3 view .LVU258
 1009 0468 38C098E5 		ldr	ip, [r8, #56]	@ _36, g_armwave_state.waves
 1010              	.LBE11:
 1011              	.LBE10:
 1012              	@ armwave.c:211:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1013              		.loc 1 211 9 discriminator 3 view .LVU259
 1014 046c 930A00E0 		mul	r0, r3, r10	@ _5, yy, _7
 1015              	.LVL58:
 1016              	.LBB13:
 1017              	.LBI10:
  62:armwave.c     **** {
 1018              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU260
 1019              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1020              		.loc 1 64 5 discriminator 3 view .LVU261
  65:armwave.c     ****     uint8_t *wave_base;
 1021              		.loc 1 65 5 discriminator 3 view .LVU262
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 1022              		.loc 1 66 5 discriminator 3 view .LVU263
  67:armwave.c     ****     bufftyp_t *write_buffer;
 1023              		.loc 1 67 5 discriminator 3 view .LVU264
  68:armwave.c     **** 
 1024              		.loc 1 68 5 discriminator 3 view .LVU265
  71:armwave.c     **** 
 1025              		.loc 1 71 5 discriminator 3 view .LVU266
 1026              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1027              		.loc 1 71 82 is_stmt 0 discriminator 3 view .LVU267
 1028 0470 243098E5 		ldr	r3, [r8, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 1029 0474 82E0A0E1 		lsl	lr, r2, #1	@ _174, g_armwave_state.bitdepth_height,
 1030              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1031              		.loc 1 71 23 discriminator 3 view .LVU268
 1032 0478 042098E5 		ldr	r2, [r8, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 1033              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1034              		.loc 1 71 65 discriminator 3 view .LVU269
 1035 047c 930001E0 		mul	r1, r3, r0	@ tmp229, _17, _5
 1036              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1037              		.loc 1 79 5 discriminator 3 view .LVU270
 1038 0480 00005CE3 		cmp	ip, #0	@ _36,
 1039              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1040              		.loc 1 79 35 discriminator 3 view .LVU271
 1041 0484 24C08DE5 		str	ip, [sp, #36]	@ _36, %sfp
 1042              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1043              		.loc 1 71 105 discriminator 3 view .LVU272
 1044 0488 2118A0E1 		lsr	r1, r1, #16	@ tmp230, tmp229,
 1045              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1046              		.loc 1 71 23 discriminator 3 view .LVU273
 1047 048c 9E212BE0 		mla	fp, lr, r1, r2	@ write_buffer_base, _174, tmp230, g_armwave_state.ch1_buffer
 1048              	.LVL59:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1049              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU274
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1050              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU275
 1051 0490 710000DA 		ble	.L52		@,
 1052              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1053              		.loc 1 80 36 view .LVU276
 1054 0494 142098E5 		ldr	r2, [r8, #20]	@ _25, g_armwave_state.wave_buffer
 1055 0498 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp242, _17, _17,
 1056 049c 34C098E5 		ldr	ip, [r8, #52]	@ _176, g_armwave_state.wave_stride
 1057 04a0 002082E0 		add	r2, r2, r0	@ tmp236, _25, _5
 1058 04a4 28C08DE5 		str	ip, [sp, #40]	@ _176, %sfp
 1059 04a8 8300A0E1 		lsl	r0, r3, #1	@ tmp238, _17,
 1060              	.LVL60:
  80:armwave.c     **** 
 1061              		.loc 1 80 36 view .LVU277
 1062 04ac 00C062E2 		rsb	ip, r2, #0	@ ivtmp.80, tmp236
 1063 04b0 08208DE5 		str	r2, [sp, #8]	@ tmp236, %sfp
 1064 04b4 8120A0E1 		lsl	r2, r1, #1	@ tmp243, tmp242,
 1065 04b8 34208DE5 		str	r2, [sp, #52]	@ tmp243, %sfp
 1066              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1067              		.loc 1 79 11 view .LVU278
 1068 04bc 0E70A0E1 		mov	r7, lr	@ _174, _174
 1069 04c0 032080E0 		add	r2, r0, r3	@ ivtmp.74, tmp238, _17
 1070 04c4 0331A0E1 		lsl	r3, r3, #2	@ _246, _17,
 1071 04c8 10308DE5 		str	r3, [sp, #16]	@ _246, %sfp
 1072 04cc 0030A0E3 		mov	r3, #0	@ w,
 1073 04d0 30008DE5 		str	r0, [sp, #48]	@ tmp238, %sfp
 1074 04d4 04C08DE5 		str	ip, [sp, #4]	@ ivtmp.80, %sfp
 1075 04d8 2C208DE5 		str	r2, [sp, #44]	@ ivtmp.74, %sfp
 1076 04dc 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1077 04e0 14A08DE5 		str	r10, [sp, #20]	@ _7, %sfp
 1078              	.LVL61:
 1079              	.L58:
  80:armwave.c     **** 
 1080              		.loc 1 80 9 is_stmt 1 view .LVU279
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1081              		.loc 1 84 9 view .LVU280
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1082              		.loc 1 84 9 is_stmt 0 view .LVU281
 1083 04e4 14309DE5 		ldr	r3, [sp, #20]	@ _7, %sfp
 1084 04e8 000053E3 		cmp	r3, #0	@ _7,
 1085 04ec 4D00000A 		beq	.L53		@,
 1086 04f0 08A09DE5 		ldr	r10, [sp, #8]	@ ivtmp.73, %sfp
 1087 04f4 30509DE5 		ldr	r5, [sp, #48]	@ ivtmp.75, %sfp
 1088 04f8 2C609DE5 		ldr	r6, [sp, #44]	@ ivtmp.74, %sfp
 1089 04fc 0AE0A0E1 		mov	lr, r10	@ ivtmp.73, ivtmp.73
 1090              	.LVL62:
 1091              	.L57:
  85:armwave.c     **** 
 1092              		.loc 1 85 13 is_stmt 1 view .LVU282
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1093              		.loc 1 101 17 view .LVU283
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1094              		.loc 1 101 17 view .LVU284
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1095              		.loc 1 101 17 view .LVU285
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1096              		.loc 1 101 17 view .LVU286
 1097              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1098              		.loc 1 102 34 is_stmt 0 view .LVU287
 1099 0500 34309DE5 		ldr	r3, [sp, #52]	@ tmp243, %sfp
 1100 0504 10409DE5 		ldr	r4, [sp, #16]	@ _246, %sfp
 1101 0508 03C086E0 		add	ip, r6, r3	@ tmp266, ivtmp.74, tmp243
 1102 050c 030085E0 		add	r0, r5, r3	@ tmp251, ivtmp.75, tmp243
 1103              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1104              		.loc 1 85 18 view .LVU288
 1105 0510 04309EE4 		ldr	r3, [lr], #4	@ word, MEM[base: _252, offset: 0B]
 1106              	.LVL63:
  89:armwave.c     ****                 scale_value = word & 0xff;
 1107              		.loc 1 89 13 is_stmt 1 view .LVU289
  90:armwave.c     ****                 
 1108              		.loc 1 90 17 view .LVU290
  94:armwave.c     ****                     continue;
 1109              		.loc 1 94 17 view .LVU291
 1110              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1111              		.loc 1 102 74 is_stmt 0 view .LVU292
 1112 0514 2618A0E1 		lsr	r1, r6, #16	@ tmp294, ivtmp.74,
 1113              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1114              		.loc 1 94 20 view .LVU293
 1115 0518 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 1116 051c 046086E0 		add	r6, r6, r4	@ ivtmp.74, ivtmp.74, _246
 1117              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1118              		.loc 1 107 22 view .LVU294
 1119 0520 2348A0E1 		lsr	r4, r3, #16	@ word, word,
 1120              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1121              		.loc 1 94 20 view .LVU295
 1122 0524 0140A003 		moveq	r4, #1	@ tmp245,
 1123 0528 0040A013 		movne	r4, #0	@ tmp245,
 1124              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1125              		.loc 1 94 19 view .LVU296
 1126 052c FF005AE3 		cmp	r10, #255	@ scale_value,
 1127 0530 01408403 		orreq	r4, r4, #1	@,, tmp250, tmp245
 1128              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1129              		.loc 1 106 47 view .LVU297
 1130 0534 8A20A0E1 		lsl	r2, r10, #1	@ tmp254, scale_value,
 1131              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1132              		.loc 1 84 9 view .LVU298
 1133 0538 04A09DE5 		ldr	r10, [sp, #4]	@ ivtmp.80, %sfp
 1134              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1135              		.loc 1 94 19 view .LVU299
 1136 053c 000054E3 		cmp	r4, #0	@ tmp250,
 1137              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1138              		.loc 1 84 9 view .LVU300
 1139 0540 0AA08EE0 		add	r10, lr, r10	@ tmp300, ivtmp.73, ivtmp.80
 1140              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1141              		.loc 1 102 74 view .LVU301
 1142 0544 1C108DE5 		str	r1, [sp, #28]	@ tmp294, %sfp
 1143 0548 2008A0E1 		lsr	r0, r0, #16	@ tmp252, tmp251,
 1144 054c 2CC8A0E1 		lsr	ip, ip, #16	@ tmp267, tmp266,
 1145              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1146              		.loc 1 107 22 view .LVU302
 1147 0550 2314A0E1 		lsr	r1, r3, #8	@ word, word,
 1148              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1149              		.loc 1 84 9 view .LVU303
 1150 0554 20A08DE5 		str	r10, [sp, #32]	@ tmp300, %sfp
 1151              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1152              		.loc 1 94 19 view .LVU304
 1153 0558 2C00001A 		bne	.L56		@,
 1154              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1155              		.loc 1 101 30 view .LVU305
 1156 055c 97B029E0 		mla	r9, r7, r0, fp	@ write_buffer, _174, tmp252, write_buffer_base
 1157              	.LVL64:
 106:armwave.c     ****                 word >>= 8;
 1158              		.loc 1 106 17 is_stmt 1 view .LVU306
 1159              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1160              		.loc 1 94 20 is_stmt 0 view .LVU307
 1161 0560 FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 1162 0564 0140A003 		moveq	r4, #1	@ tmp260,
 1163              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1164              		.loc 1 106 47 view .LVU308
 1165 0568 B20099E1 		ldrh	r0, [r9, r2]	@ *_99, *_99
 1166              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1167              		.loc 1 94 20 view .LVU309
 1168 056c 0040A013 		movne	r4, #0	@ tmp260,
 1169              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1170              		.loc 1 106 47 view .LVU310
 1171 0570 81A0A0E1 		lsl	r10, r1, #1	@ tmp269, scale_value,
 1172              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1173              		.loc 1 94 19 view .LVU311
 1174 0574 FF0051E3 		cmp	r1, #255	@ scale_value,
 1175 0578 0410A011 		movne	r1, r4	@, tmp265, tmp260
 1176 057c 01108403 		orreq	r1, r4, #1	@,, tmp265, tmp260
 1177              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1178              		.loc 1 106 47 view .LVU312
 1179 0580 010080E2 		add	r0, r0, #1	@ tmp257, *_99,
 1180              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1181              		.loc 1 94 19 view .LVU313
 1182 0584 000051E3 		cmp	r1, #0	@ tmp265,
 1183              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1184              		.loc 1 106 47 view .LVU314
 1185 0588 B20089E1 		strh	r0, [r9, r2]	@ movhi	@ tmp257, *_99
 107:armwave.c     ****             }
 1186              		.loc 1 107 17 is_stmt 1 view .LVU315
 1187              	.LVL65:
  90:armwave.c     ****                 
 1188              		.loc 1 90 17 view .LVU316
  94:armwave.c     ****                     continue;
 1189              		.loc 1 94 17 view .LVU317
 1190              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1191              		.loc 1 94 19 is_stmt 0 view .LVU318
 1192 058c 1F00001A 		bne	.L56		@,
 1193              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1194              		.loc 1 101 30 view .LVU319
 1195 0590 97BC29E0 		mla	r9, r7, ip, fp	@ write_buffer, _174, tmp267, write_buffer_base
 1196              	.LVL66:
 106:armwave.c     ****                 word >>= 8;
 1197              		.loc 1 106 17 is_stmt 1 view .LVU320
 1198              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1199              		.loc 1 94 20 is_stmt 0 view .LVU321
 1200 0594 2348A0E1 		lsr	r4, r3, #16	@ word, word,
 1201 0598 FF2014E2 		ands	r2, r4, #255	@ scale_value, word,
 1202              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1203              		.loc 1 106 47 view .LVU322
 1204 059c BA1099E1 		ldrh	r1, [r9, r10]	@ *_130, *_130
 1205              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1206              		.loc 1 94 20 view .LVU323
 1207 05a0 0100A003 		moveq	r0, #1	@ tmp275,
 1208 05a4 0000A013 		movne	r0, #0	@ tmp275,
 1209              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1210              		.loc 1 106 47 view .LVU324
 1211 05a8 82C0A0E1 		lsl	ip, r2, #1	@ tmp283, scale_value,
 1212              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1213              		.loc 1 94 19 view .LVU325
 1214 05ac FF0052E3 		cmp	r2, #255	@ scale_value,
 1215 05b0 0020A011 		movne	r2, r0	@, tmp280, tmp275
 1216 05b4 01208003 		orreq	r2, r0, #1	@,, tmp280, tmp275
 1217              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1218              		.loc 1 106 47 view .LVU326
 1219 05b8 011081E2 		add	r1, r1, #1	@ tmp272, *_130,
 1220              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1221              		.loc 1 94 19 view .LVU327
 1222 05bc 000052E3 		cmp	r2, #0	@ tmp280,
 1223              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1224              		.loc 1 106 47 view .LVU328
 1225 05c0 BA1089E1 		strh	r1, [r9, r10]	@ movhi	@ tmp272, *_130
 107:armwave.c     ****             }
 1226              		.loc 1 107 17 is_stmt 1 view .LVU329
 1227              	.LVL67:
  90:armwave.c     ****                 
 1228              		.loc 1 90 17 view .LVU330
  94:armwave.c     ****                     continue;
 1229              		.loc 1 94 17 view .LVU331
 1230              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1231              		.loc 1 94 19 is_stmt 0 view .LVU332
 1232 05c4 1100001A 		bne	.L56		@,
 1233              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1234              		.loc 1 101 30 view .LVU333
 1235 05c8 2528A0E1 		lsr	r2, r5, #16	@ tmp281, ivtmp.75,
 1236              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1237              		.loc 1 94 20 view .LVU334
 1238 05cc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1239              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1240              		.loc 1 101 30 view .LVU335
 1241 05d0 97B229E0 		mla	r9, r7, r2, fp	@ write_buffer, _174, tmp281, write_buffer_base
 1242              	.LVL68:
 106:armwave.c     ****                 word >>= 8;
 1243              		.loc 1 106 17 is_stmt 1 view .LVU336
 1244              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1245              		.loc 1 94 20 is_stmt 0 view .LVU337
 1246 05d4 0110A003 		moveq	r1, #1	@ tmp288,
 1247 05d8 0010A013 		movne	r1, #0	@ tmp288,
 1248              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1249              		.loc 1 106 47 view .LVU338
 1250 05dc 8300A0E1 		lsl	r0, r3, #1	@ tmp296, word,
 1251              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1252              		.loc 1 94 19 view .LVU339
 1253 05e0 FF0053E3 		cmp	r3, #255	@ word,
 1254 05e4 0130A011 		movne	r3, r1	@, tmp293, tmp288
 1255 05e8 01308103 		orreq	r3, r1, #1	@,, tmp293, tmp288
 1256 05ec 000053E3 		cmp	r3, #0	@ tmp293,
 1257              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1258              		.loc 1 106 47 view .LVU340
 1259 05f0 BC2099E1 		ldrh	r2, [r9, ip]	@ *_161, *_161
 1260              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1261              		.loc 1 101 30 view .LVU341
 1262 05f4 1C109D05 		ldreq	r1, [sp, #28]	@ tmp294, %sfp
 1263              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1264              		.loc 1 106 47 view .LVU342
 1265 05f8 012082E2 		add	r2, r2, #1	@ tmp286, *_161,
 1266 05fc BC2089E1 		strh	r2, [r9, ip]	@ movhi	@ tmp286, *_161
 107:armwave.c     ****             }
 1267              		.loc 1 107 17 is_stmt 1 view .LVU343
 1268              	.LVL69:
  90:armwave.c     ****                 
 1269              		.loc 1 90 17 view .LVU344
  94:armwave.c     ****                     continue;
 1270              		.loc 1 94 17 view .LVU345
 1271              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1272              		.loc 1 101 30 is_stmt 0 view .LVU346
 1273 0600 97B12900 		mlaeq	r9, r7, r1, fp	@ write_buffer, _174, tmp294, write_buffer_base
 1274              	.LVL70:
 106:armwave.c     ****                 word >>= 8;
 1275              		.loc 1 106 17 is_stmt 1 view .LVU347
 1276              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1277              		.loc 1 106 47 is_stmt 0 view .LVU348
 1278 0604 B0309901 		ldrheq	r3, [r9, r0]	@ *_192, *_192
 1279 0608 01308302 		addeq	r3, r3, #1	@ tmp299, *_192,
 1280 060c B0308901 		strheq	r3, [r9, r0]	@ movhi	@ tmp299, *_192
 107:armwave.c     ****             }
 1281              		.loc 1 107 17 is_stmt 1 view .LVU349
 1282              	.LVL71:
 1283              	.L56:
 1284              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1285              		.loc 1 84 9 is_stmt 0 view .LVU350
 1286 0610 14309DE5 		ldr	r3, [sp, #20]	@ _7, %sfp
 1287 0614 20209DE5 		ldr	r2, [sp, #32]	@ tmp300, %sfp
 1288 0618 020053E1 		cmp	r3, r2	@ _7, tmp300
 1289 061c 10309DE5 		ldr	r3, [sp, #16]	@ _246, %sfp
 1290 0620 035085E0 		add	r5, r5, r3	@ ivtmp.75, ivtmp.75, _246
 1291 0624 B5FFFF8A 		bhi	.L57		@,
 1292              	.L53:
 1293              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1294              		.loc 1 79 44 view .LVU351
 1295 0628 0C309DE5 		ldr	r3, [sp, #12]	@ w, %sfp
 1296              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1297              		.loc 1 79 5 view .LVU352
 1298 062c 24209DE5 		ldr	r2, [sp, #36]	@ _36, %sfp
 1299              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1300              		.loc 1 79 44 view .LVU353
 1301 0630 013083E2 		add	r3, r3, #1	@ w, w,
 1302              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1303              		.loc 1 79 5 view .LVU354
 1304 0634 030052E1 		cmp	r2, r3	@ _36, w
 1305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1306              		.loc 1 79 44 view .LVU355
 1307 0638 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1308              	.LVL72:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1309              		.loc 1 79 44 view .LVU356
 1310 063c 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.80, %sfp
 1311 0640 28309DE5 		ldr	r3, [sp, #40]	@ _176, %sfp
 1312              	.LVL73:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1313              		.loc 1 79 44 view .LVU357
 1314 0644 032042E0 		sub	r2, r2, r3	@ ivtmp.80, ivtmp.80, _176
 1315 0648 04208DE5 		str	r2, [sp, #4]	@ ivtmp.80, %sfp
 1316 064c 08209DE5 		ldr	r2, [sp, #8]	@ ivtmp.81, %sfp
 1317 0650 033082E0 		add	r3, r2, r3	@ ivtmp.81, ivtmp.81, _176
 1318 0654 08308DE5 		str	r3, [sp, #8]	@ ivtmp.81, %sfp
 1319              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1320              		.loc 1 79 5 view .LVU358
 1321 0658 A1FFFF1A 		bne	.L58		@,
 1322              	.LVL74:
 1323              	.L52:
 112:armwave.c     **** }
 1324              		.loc 1 112 5 is_stmt 1 view .LVU359
 1325              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 1326              		.loc 1 112 40 is_stmt 0 view .LVU360
 1327 065c 0B1049E0 		sub	r1, r9, fp	@ tmp301, write_buffer, write_buffer_base
 1328              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 1329              		.loc 1 112 5 view .LVU361
 1330 0660 34009FE5 		ldr	r0, .L68+4	@,
 1331 0664 C110A0E1 		asr	r1, r1, #1	@, tmp301,
 1332 0668 FEFFFFEB 		bl	printf		@
 1333              	.LVL75:
 112:armwave.c     **** }
 1334              		.loc 1 112 5 view .LVU362
 1335              	.LBE12:
 1336              	.LBE13:
 212:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1337              		.loc 1 212 9 is_stmt 1 view .LVU363
 213:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1338              		.loc 1 213 9 view .LVU364
 1339              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1340              		.loc 1 205 68 is_stmt 0 view .LVU365
 1341 066c 44A098E5 		ldr	r10, [r8, #68]	@ _7, g_armwave_state.slice_height
 1342              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1343              		.loc 1 205 51 view .LVU366
 1344 0670 4C0098E5 		ldr	r0, [r8, #76]	@, g_armwave_state.wave_length
 1345 0674 0A10A0E1 		mov	r1, r10	@, _7
 1346 0678 FEFFFFEB 		bl	__aeabi_idiv		@
 1347              	.LVL76:
 1348              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1349              		.loc 1 205 86 view .LVU367
 1350 067c 18309DE5 		ldr	r3, [sp, #24]	@ yy, %sfp
 1351 0680 013083E2 		add	r3, r3, #1	@ yy, yy,
 1352 0684 18308DE5 		str	r3, [sp, #24]	@ yy, %sfp
 1353              	.LVL77:
 1354              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1355              		.loc 1 205 5 view .LVU368
 1356 0688 030050E1 		cmp	r0, r3	@, yy
 1357 068c 73FFFF8A 		bhi	.L51		@,
 1358              	.LVL78:
 1359              	.L50:
 1360              	@ armwave.c:222: }
 214:armwave.c     ****     }
 215:armwave.c     **** 
 216:armwave.c     ****     /*
 217:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 218:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 219:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 220:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 221:armwave.c     ****     */
 222:armwave.c     **** }
 1361              		.loc 1 222 1 view .LVU369
 1362 0690 3CD08DE2 		add	sp, sp, #60	@,,
 1363              		.cfi_def_cfa_offset 36
 1364              		@ sp needed	@
 1365 0694 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1366              	.L69:
 1367              		.align	2
 1368              	.L68:
 1369 0698 00000000 		.word	g_armwave_state
 1370 069c 20000000 		.word	.LC2
 1371              		.cfi_endproc
 1372              	.LFE61:
 1374              		.align	2
 1375              		.global	armwave_setup_render
 1376              		.syntax unified
 1377              		.arm
 1378              		.fpu vfp
 1380              	armwave_setup_render:
 1381              	.LVL79:
 1382              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** /*
 225:armwave.c     ****  * Setup the renderer with passed parameters.
 226:armwave.c     ****  */
 227:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 228:armwave.c     **** {
 1383              		.loc 1 228 1 is_stmt 1 view -0
 1384              		.cfi_startproc
 1385              		@ args = 12, pretend = 0, frame = 0
 1386              		@ frame_needed = 0, uses_anonymous_args = 0
 229:armwave.c     ****     uint32_t length, xx;
 1387              		.loc 1 229 5 view .LVU371
 230:armwave.c     ****     float points_per_pixel;
 1388              		.loc 1 230 5 view .LVU372
 231:armwave.c     **** 
 232:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1389              		.loc 1 232 5 view .LVU373
 1390              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1391              		.loc 1 228 1 is_stmt 0 view .LVU374
 1392 06a0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1393              		.cfi_def_cfa_offset 28
 1394              		.cfi_offset 4, -28
 1395              		.cfi_offset 5, -24
 1396              		.cfi_offset 6, -20
 1397              		.cfi_offset 7, -16
 1398              		.cfi_offset 8, -12
 1399              		.cfi_offset 9, -8
 1400              		.cfi_offset 14, -4
 1401 06a4 14D04DE2 		sub	sp, sp, #20	@,,
 1402              		.cfi_def_cfa_offset 48
 1403              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1404              		.loc 1 228 1 view .LVU375
 1405 06a8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1406 06ac D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1407 06b0 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1408 06b4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1409              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1410              		.loc 1 232 5 view .LVU376
 1411 06b8 00308DE5 		str	r3, [sp]	@ wave_stride,
 1412              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1413              		.loc 1 228 1 view .LVU377
 1414 06bc 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1415 06c0 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1416              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1417              		.loc 1 232 5 view .LVU378
 1418 06c4 F460CDE1 		strd	r6, [sp, #4]	@,,
 1419 06c8 0230A0E1 		mov	r3, r2	@, waves_max
 1420              	.LVL80:
 1421              		.loc 1 232 5 view .LVU379
 1422 06cc 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1423 06d0 0120A0E1 		mov	r2, r1	@, end_point
 1424              	.LVL81:
 1425              		.loc 1 232 5 view .LVU380
 1426 06d4 0010A0E1 		mov	r1, r0	@, start_point
 1427              	.LVL82:
 1428              		.loc 1 232 5 view .LVU381
 1429 06d8 8C019FE5 		ldr	r0, .L80+12	@,
 1430              	.LVL83:
 1431              		.loc 1 232 5 view .LVU382
 1432 06dc FEFFFFEB 		bl	printf		@
 1433              	.LVL84:
 233:armwave.c     **** 
 234:armwave.c     ****     // TODO these asserts should instead raise PyExc
 235:armwave.c     ****     assert(start_point < end_point);
 1434              		.loc 1 235 5 is_stmt 1 view .LVU383
 1435 06e0 050054E1 		cmp	r4, r5	@ start_point, end_point
 1436 06e4 5100002A 		bcs	.L78		@,
 236:armwave.c     **** 
 237:armwave.c     ****     /*
 238:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 239:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 1437              		.loc 1 256 5 view .LVU384
 1438              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1439              		.loc 1 267 45 is_stmt 0 view .LVU385
 1440 06e8 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1441              	.LVL85:
 1442              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1443              		.loc 1 271 48 view .LVU386
 1444 06ec 5B5A9FED 		vldr.32	s10, .L80	@ tmp187,
 1445 06f0 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1446              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1447              		.loc 1 257 49 view .LVU387
 1448 06f4 5A7A9FED 		vldr.32	s14, .L80+4	@ tmp165,
 1449              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1450              		.loc 1 271 81 view .LVU388
 1451 06f8 5A6A9FED 		vldr.32	s12, .L80+8	@ tmp191,
 1452              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1453              		.loc 1 264 90 view .LVU389
 1454 06fc 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1455              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1456              		.loc 1 271 48 view .LVU390
 1457 0700 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1458              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1459              		.loc 1 257 49 view .LVU391
 1460 0704 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1461              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1462              		.loc 1 256 29 view .LVU392
 1463 0708 60419FE5 		ldr	r4, .L80+16	@ tmp222,
 1464              	.LVL86:
 1465              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1466              		.loc 1 262 42 view .LVU393
 1467 070c 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1468              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1469              		.loc 1 257 49 view .LVU394
 1470 0710 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1471              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1472              		.loc 1 264 95 view .LVU395
 1473 0714 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1474              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 272:armwave.c     **** 
 273:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1475              		.loc 1 273 5 view .LVU396
 1476 0718 0128A0E3 		mov	r2, #65536	@ tmp194,
 1477              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1478              		.loc 1 271 48 view .LVU397
 1479 071c 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1480              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1481              		.loc 1 273 5 view .LVU398
 1482 0720 04508DE5 		str	r5, [sp, #4]	@ _13,
 1483 0724 00608DE5 		str	r6, [sp]	@ target_width,
 1484              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1485              		.loc 1 264 95 view .LVU399
 1486 0728 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1487              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1488              		.loc 1 256 29 view .LVU400
 1489 072c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1490              		.loc 1 257 5 is_stmt 1 view .LVU401
 1491              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1492              		.loc 1 259 33 is_stmt 0 view .LVU402
 1493 0730 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1494              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1495              		.loc 1 260 31 view .LVU403
 1496 0734 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1497              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1498              		.loc 1 261 27 view .LVU404
 1499 0738 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1500              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1501              		.loc 1 266 35 view .LVU405
 1502 073c F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1503              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1504              		.loc 1 273 5 view .LVU406
 1505 0740 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1506              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1507              		.loc 1 263 37 view .LVU407
 1508 0744 022CA0E3 		mov	r2, #512	@ tmp175,
 1509              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1510              		.loc 1 262 26 view .LVU408
 1511 0748 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1512              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1513              		.loc 1 263 37 view .LVU409
 1514 074c 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1515              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1516              		.loc 1 273 5 view .LVU410
 1517 0750 0310A0E1 		mov	r1, r3	@, tmp180
 1518              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1519              		.loc 1 264 34 view .LVU411
 1520 0754 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1521              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1522              		.loc 1 257 49 view .LVU412
 1523 0758 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1524              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1525              		.loc 1 271 40 view .LVU413
 1526 075c 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1527              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 1528              		.loc 1 267 33 view .LVU414
 1529 0760 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1530              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1531              		.loc 1 273 5 view .LVU415
 1532 0764 08019FE5 		ldr	r0, .L80+20	@,
 1533              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1534              		.loc 1 271 40 view .LVU416
 1535 0768 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1536 076c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1537              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1538              		.loc 1 258 30 view .LVU417
 1539 0770 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1540              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1541              		.loc 1 257 33 view .LVU418
 1542 0774 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1543              		.loc 1 258 5 is_stmt 1 view .LVU419
 1544              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1545              		.loc 1 271 81 is_stmt 0 view .LVU420
 1546 0778 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1547              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1548              		.loc 1 258 30 view .LVU421
 1549 077c 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1550              		.loc 1 259 5 is_stmt 1 view .LVU422
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1551              		.loc 1 260 5 view .LVU423
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1552              		.loc 1 261 5 view .LVU424
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1553              		.loc 1 262 5 view .LVU425
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1554              		.loc 1 263 5 view .LVU426
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1555              		.loc 1 264 5 view .LVU427
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 1556              		.loc 1 265 5 view .LVU428
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1557              		.loc 1 266 5 view .LVU429
 267:armwave.c     **** 
 1558              		.loc 1 267 5 view .LVU430
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1559              		.loc 1 270 5 view .LVU431
 1560              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1561              		.loc 1 270 42 is_stmt 0 view .LVU432
 1562 0780 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1563 0784 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1564              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1565              		.loc 1 273 5 view .LVU433
 1566 0788 903A17EE 		vmov	r3, s15	@ int	@, _20
 1567              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1568              		.loc 1 270 42 view .LVU434
 1569 078c 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1570              		.loc 1 273 5 is_stmt 1 view .LVU435
 1571 0790 0C20A0E1 		mov	r2, ip	@, tmp3
 1572 0794 FEFFFFEB 		bl	printf		@
 1573              	.LVL87:
 274:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 275:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 276:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 277:armwave.c     **** 
 278:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 279:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 280:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1574              		.loc 1 281 5 view .LVU436
 1575              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 282:armwave.c     **** 
 283:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1576              		.loc 1 283 23 is_stmt 0 view .LVU437
 1577 0798 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1578              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1579              		.loc 1 281 34 view .LVU438
 1580 079c 4030A0E3 		mov	r3, #64	@ tmp196,
 1581              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1582              		.loc 1 283 7 view .LVU439
 1583 07a0 000050E3 		cmp	r0, #0	@ _21,
 1584              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1585              		.loc 1 281 34 view .LVU440
 1586 07a4 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1587              		.loc 1 283 5 is_stmt 1 view .LVU441
 1588              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1589              		.loc 1 283 7 is_stmt 0 view .LVU442
 1590 07a8 0000000A 		beq	.L72		@,
 284:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1591              		.loc 1 284 9 is_stmt 1 view .LVU443
 1592 07ac FEFFFFEB 		bl	free		@
 1593              	.LVL88:
 1594              	.L72:
 285:armwave.c     **** 
 286:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1595              		.loc 1 286 5 view .LVU444
 1596              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1597              		.loc 1 286 56 is_stmt 0 view .LVU445
 1598 07b0 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1599              	.LVL89:
 1600              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1601              		.loc 1 286 34 view .LVU446
 1602 07b4 0110A0E3 		mov	r1, #1	@,
 1603 07b8 0800A0E1 		mov	r0, r8	@, _22
 1604 07bc FEFFFFEB 		bl	calloc		@
 1605              	.LVL90:
 1606              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 287:armwave.c     **** 
 288:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1607              		.loc 1 288 7 view .LVU447
 1608 07c0 000050E3 		cmp	r0, #0	@ tmp199,
 1609              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1610              		.loc 1 286 34 view .LVU448
 1611 07c4 0070A0E1 		mov	r7, r0	@ tmp199,
 1612              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1613              		.loc 1 286 32 view .LVU449
 1614 07c8 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1615              		.loc 1 288 5 is_stmt 1 view .LVU450
 1616              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 1617              		.loc 1 288 7 is_stmt 0 view .LVU451
 1618 07cc 1C00000A 		beq	.L79		@,
 289:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 290:armwave.c     ****         exit(-1);
 291:armwave.c     ****     }
 292:armwave.c     **** 
 293:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 294:armwave.c     ****     length = end_point - start_point;
 1619              		.loc 1 294 5 is_stmt 1 view .LVU452
 1620              	.LVL91:
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1621              		.loc 1 295 5 view .LVU453
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1622              		.loc 1 296 5 view .LVU454
 1623              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1624              		.loc 1 295 31 is_stmt 0 view .LVU455
 1625 07d0 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1626              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1627              		.loc 1 295 34 view .LVU456
 1628 07d4 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1629              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1630              		.loc 1 296 60 view .LVU457
 1631 07d8 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1632              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     **** 
 301:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305:armwave.c     **** 
 306:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 307:armwave.c     ****     }
 308:armwave.c     ****     */
 309:armwave.c     **** 
 310:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1633              		.loc 1 310 34 view .LVU458
 1634 07dc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1635              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1636              		.loc 1 295 31 view .LVU459
 1637 07e0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1638              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1639              		.loc 1 295 34 view .LVU460
 1640 07e4 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1641              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1642              		.loc 1 296 60 view .LVU461
 1643 07e8 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1644              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1645              		.loc 1 310 34 view .LVU462
 1646 07ec 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1647              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1648              		.loc 1 295 22 view .LVU463
 1649 07f0 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1650              	.LVL92:
 1651              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1652              		.loc 1 296 60 view .LVU464
 1653 07f4 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1654              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1655              		.loc 1 296 41 view .LVU465
 1656 07f8 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1657 07fc 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1658              		.loc 1 310 5 is_stmt 1 view .LVU466
 1659              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1660              		.loc 1 310 34 is_stmt 0 view .LVU467
 1661 0800 FEFFFFEB 		bl	malloc		@
 1662              	.LVL93:
 1663              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1664              		.loc 1 312 5 view .LVU468
 1665 0804 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1666 0808 0710A0E1 		mov	r1, r7	@, tmp199
 1667 080c 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1668 0810 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1669              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1670              		.loc 1 310 34 view .LVU469
 1671 0814 00C0A0E1 		mov	ip, r0	@ tmp215,
 1672              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1673              		.loc 1 312 5 view .LVU470
 1674 0818 0030A0E1 		mov	r3, r0	@, tmp215
 1675              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1676              		.loc 1 310 32 view .LVU471
 1677 081c 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1678              		.loc 1 312 5 is_stmt 1 view .LVU472
 1679 0820 50009FE5 		ldr	r0, .L80+24	@,
 1680              	@ armwave.c:319: }
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 317:armwave.c     **** 
 318:armwave.c     ****      //malloc_stats();
 319:armwave.c     **** }
 1681              		.loc 1 319 1 is_stmt 0 view .LVU473
 1682 0824 14D08DE2 		add	sp, sp, #20	@,,
 1683              		.cfi_remember_state
 1684              		.cfi_def_cfa_offset 28
 1685              		@ sp needed	@
 1686 0828 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1687              		.cfi_restore 14
 1688              		.cfi_restore 9
 1689              		.cfi_restore 8
 1690              		.cfi_restore 7
 1691              		.cfi_restore 6
 1692              		.cfi_restore 5
 1693              		.cfi_restore 4
 1694              		.cfi_def_cfa_offset 0
 1695              	.LVL94:
 1696              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1697              		.loc 1 312 5 view .LVU474
 1698 082c FEFFFFEA 		b	printf		@
 1699              	.LVL95:
 1700              	.L78:
 1701              		.cfi_restore_state
 235:armwave.c     **** 
 1702              		.loc 1 235 5 is_stmt 1 discriminator 1 view .LVU475
 1703 0830 44309FE5 		ldr	r3, .L80+28	@,
 1704 0834 EB20A0E3 		mov	r2, #235	@,
 1705 0838 40109FE5 		ldr	r1, .L80+32	@,
 1706 083c 40009FE5 		ldr	r0, .L80+36	@,
 1707 0840 FEFFFFEB 		bl	__assert_fail		@
 1708              	.LVL96:
 1709              	.L79:
 289:armwave.c     ****         exit(-1);
 1710              		.loc 1 289 9 view .LVU476
 1711 0844 3C309FE5 		ldr	r3, .L80+40	@ tmp202,
 1712 0848 0820A0E1 		mov	r2, r8	@, _22
 1713 084c 38109FE5 		ldr	r1, .L80+44	@,
 1714 0850 000093E5 		ldr	r0, [r3]	@, stderr
 1715 0854 FEFFFFEB 		bl	fprintf		@
 1716              	.LVL97:
 290:armwave.c     ****     }
 1717              		.loc 1 290 9 view .LVU477
 1718 0858 0000E0E3 		mvn	r0, #0	@,
 1719 085c FEFFFFEB 		bl	exit		@
 1720              	.LVL98:
 1721              	.L81:
 1722              		.align	2
 1723              	.L80:
 1724 0860 0000803F 		.word	1065353216
 1725 0864 00007F43 		.word	1132396544
 1726 0868 00008047 		.word	1199570944
 1727 086c 2C000000 		.word	.LC3
 1728 0870 00000000 		.word	g_armwave_state
 1729 0874 7C000000 		.word	.LC6
 1730 0878 20010000 		.word	.LC8
 1731 087c 00000000 		.word	.LANCHOR0
 1732 0880 58000000 		.word	.LC4
 1733 0884 64000000 		.word	.LC5
 1734 0888 00000000 		.word	stderr
 1735 088c DC000000 		.word	.LC7
 1736              		.cfi_endproc
 1737              	.LFE62:
 1739              		.align	2
 1740              		.global	armwave_set_wave_pointer
 1741              		.syntax unified
 1742              		.arm
 1743              		.fpu vfp
 1745              	armwave_set_wave_pointer:
 1746              	.LVL99:
 1747              	.LFB63:
 320:armwave.c     **** 
 321:armwave.c     **** /*
 322:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 323:armwave.c     ****  * in the future.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 326:armwave.c     **** {
 1748              		.loc 1 326 1 view -0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 0
 1751              		@ frame_needed = 0, uses_anonymous_args = 0
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1752              		.loc 1 327 5 view .LVU479
 1753 0890 000050E3 		cmp	r0, #0	@ wave_buffer
 1754              		.loc 1 327 5 is_stmt 0 view .LVU480
 1755 0894 0200000A 		beq	.L87		@,
 328:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1756              		.loc 1 328 5 is_stmt 1 view .LVU481
 1757              	@ armwave.c:328:     g_armwave_state.wave_buffer = wave_buffer;
 1758              		.loc 1 328 33 is_stmt 0 view .LVU482
 1759 0898 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1760 089c 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1761 08a0 1EFF2FE1 		bx	lr	@
 1762              	.L87:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1763              		.loc 1 327 5 is_stmt 1 discriminator 1 view .LVU483
 1764              	@ armwave.c:326: {
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1765              		.loc 1 326 1 is_stmt 0 discriminator 1 view .LVU484
 1766 08a4 10402DE9 		push	{r4, lr}	@
 1767              		.cfi_def_cfa_offset 8
 1768              		.cfi_offset 4, -8
 1769              		.cfi_offset 14, -4
 1770              	@ armwave.c:327:     assert(wave_buffer != NULL);
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1771              		.loc 1 327 5 discriminator 1 view .LVU485
 1772 08a8 10309FE5 		ldr	r3, .L88+4	@,
 1773 08ac 10209FE5 		ldr	r2, .L88+8	@,
 1774 08b0 10109FE5 		ldr	r1, .L88+12	@,
 1775 08b4 10009FE5 		ldr	r0, .L88+16	@,
 1776              	.LVL100:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1777              		.loc 1 327 5 discriminator 1 view .LVU486
 1778 08b8 FEFFFFEB 		bl	__assert_fail		@
 1779              	.LVL101:
 1780              	.L89:
 1781              		.align	2
 1782              	.L88:
 1783 08bc 00000000 		.word	g_armwave_state
 1784 08c0 18000000 		.word	.LANCHOR0+24
 1785 08c4 47010000 		.word	327
 1786 08c8 58000000 		.word	.LC4
 1787 08cc 44010000 		.word	.LC9
 1788              		.cfi_endproc
 1789              	.LFE63:
 1791              		.align	2
 1792              		.global	armwave_set_wave_pointer_as_testbuf
 1793              		.syntax unified
 1794              		.arm
 1795              		.fpu vfp
 1797              	armwave_set_wave_pointer_as_testbuf:
 1798              	.LVL102:
 1799              	.LFB64:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 333:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 334:armwave.c     ****  */
 335:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 336:armwave.c     **** {
 1800              		.loc 1 336 1 is_stmt 1 view -0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 1804              		@ link register save eliminated.
 337:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1805              		.loc 1 337 5 view .LVU488
 1806              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1807              		.loc 1 337 29 is_stmt 0 view .LVU489
 1808 08d0 24309FE5 		ldr	r3, .L93	@ tmp117,
 1809              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1810              		.loc 1 337 7 view .LVU490
 1811 08d4 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1812 08d8 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1813 08dc 0400003A 		bcc	.L92		@,
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 339:armwave.c     ****         return;
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1814              		.loc 1 342 5 is_stmt 1 view .LVU491
 1815              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1816              		.loc 1 342 111 is_stmt 0 view .LVU492
 1817 08e0 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1818              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1819              		.loc 1 342 68 view .LVU493
 1820 08e4 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1821 08e8 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1822              	.LVL103:
 1823              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1824              		.loc 1 342 33 view .LVU494
 1825 08ec 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1826              	@ armwave.c:343: }
 343:armwave.c     **** }
 1827              		.loc 1 343 1 view .LVU495
 1828 08f0 1EFF2FE1 		bx	lr	@
 1829              	.LVL104:
 1830              	.L92:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1831              		.loc 1 338 9 is_stmt 1 view .LVU496
 1832 08f4 04009FE5 		ldr	r0, .L93+4	@,
 1833              	.LVL105:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1834              		.loc 1 338 9 is_stmt 0 view .LVU497
 1835 08f8 FEFFFFEA 		b	puts		@
 1836              	.LVL106:
 1837              	.L94:
 1838              		.align	2
 1839              	.L93:
 1840 08fc 00000000 		.word	g_armwave_state
 1841 0900 58010000 		.word	.LC10
 1842              		.cfi_endproc
 1843              	.LFE64:
 1845              		.align	2
 1846              		.global	armwave_set_wave_pointer_u32
 1847              		.syntax unified
 1848              		.arm
 1849              		.fpu vfp
 1851              	armwave_set_wave_pointer_u32:
 1852              	.LVL107:
 1853              	.LFB65:
 344:armwave.c     **** 
 345:armwave.c     **** /*
 346:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 347:armwave.c     ****  * disjointed buffers in the future.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 350:armwave.c     **** {
 1854              		.loc 1 350 1 is_stmt 1 view -0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 0
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1858              		.loc 1 351 5 view .LVU499
 1859 0904 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1860              		.loc 1 351 5 is_stmt 0 view .LVU500
 1861 0908 0200000A 		beq	.L100		@,
 352:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1862              		.loc 1 352 5 is_stmt 1 view .LVU501
 1863              	@ armwave.c:352:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1864              		.loc 1 352 33 is_stmt 0 view .LVU502
 1865 090c 1C309FE5 		ldr	r3, .L101	@ tmp117,
 1866 0910 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1867 0914 1EFF2FE1 		bx	lr	@
 1868              	.L100:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1869              		.loc 1 351 5 is_stmt 1 discriminator 1 view .LVU503
 1870              	@ armwave.c:350: {
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1871              		.loc 1 350 1 is_stmt 0 discriminator 1 view .LVU504
 1872 0918 10402DE9 		push	{r4, lr}	@
 1873              		.cfi_def_cfa_offset 8
 1874              		.cfi_offset 4, -8
 1875              		.cfi_offset 14, -4
 1876              	@ armwave.c:351:     assert(wave_buffer_ptr != 0);
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1877              		.loc 1 351 5 discriminator 1 view .LVU505
 1878 091c 10309FE5 		ldr	r3, .L101+4	@,
 1879 0920 10209FE5 		ldr	r2, .L101+8	@,
 1880 0924 10109FE5 		ldr	r1, .L101+12	@,
 1881 0928 10009FE5 		ldr	r0, .L101+16	@,
 1882              	.LVL108:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1883              		.loc 1 351 5 discriminator 1 view .LVU506
 1884 092c FEFFFFEB 		bl	__assert_fail		@
 1885              	.LVL109:
 1886              	.L102:
 1887              		.align	2
 1888              	.L101:
 1889 0930 00000000 		.word	g_armwave_state
 1890 0934 34000000 		.word	.LANCHOR0+52
 1891 0938 5F010000 		.word	351
 1892 093c 58000000 		.word	.LC4
 1893 0940 94010000 		.word	.LC11
 1894              		.cfi_endproc
 1895              	.LFE65:
 1897              		.align	2
 1898              		.global	armwave_clear_buffer
 1899              		.syntax unified
 1900              		.arm
 1901              		.fpu vfp
 1903              	armwave_clear_buffer:
 1904              	.LVL110:
 1905              	.LFB66:
 353:armwave.c     **** }
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 359:armwave.c     **** {
 1906              		.loc 1 359 1 is_stmt 1 view -0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 1910              		@ link register save eliminated.
 360:armwave.c     ****     // Flags ignored, only one buffer cleared
 361:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1911              		.loc 1 361 5 view .LVU508
 1912              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1913              		.loc 1 361 58 is_stmt 0 view .LVU509
 1914 0944 0C309FE5 		ldr	r3, .L104	@ tmp114,
 1915              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1916              		.loc 1 361 5 view .LVU510
 1917 0948 0010A0E3 		mov	r1, #0	@,
 1918 094c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1919 0950 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1920              	.LVL111:
 1921              		.loc 1 361 5 view .LVU511
 1922 0954 FEFFFFEA 		b	memset		@
 1923              	.LVL112:
 1924              	.L105:
 1925              		.align	2
 1926              	.L104:
 1927 0958 00000000 		.word	g_armwave_state
 1928              		.cfi_endproc
 1929              	.LFE66:
 1931              		.align	2
 1932              		.global	armwave_set_channel_colour
 1933              		.syntax unified
 1934              		.arm
 1935              		.fpu vfp
 1937              	armwave_set_channel_colour:
 1938              	.LVL113:
 1939              	.LFB67:
 362:armwave.c     **** }
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 368:armwave.c     **** {
 1940              		.loc 1 368 1 is_stmt 1 view -0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 0
 1943              		@ frame_needed = 0, uses_anonymous_args = 0
 1944              		@ link register save eliminated.
 369:armwave.c     ****     // Only 1ch supported for now
 370:armwave.c     ****     switch(ch) {
 1945              		.loc 1 370 5 view .LVU513
 1946 095c 010050E3 		cmp	r0, #1	@ ch,
 371:armwave.c     ****         case 1:
 372:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1947              		.loc 1 372 13 view .LVU514
 1948              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 1949              		.loc 1 372 41 is_stmt 0 view .LVU515
 1950 0960 0C009F05 		ldreq	r0, .L108	@ tmp117,
 1951              	.LVL114:
 1952              		.loc 1 372 41 view .LVU516
 1953 0964 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1954              		.loc 1 373 13 is_stmt 1 view .LVU517
 1955              	@ armwave.c:373:             g_armwave_state.ch1_color.g = g;
 1956              		.loc 1 373 41 is_stmt 0 view .LVU518
 1957 0968 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1958              		.loc 1 374 13 is_stmt 1 view .LVU519
 1959              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 1960              		.loc 1 374 41 is_stmt 0 view .LVU520
 1961 096c B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 375:armwave.c     ****             break;
 1962              		.loc 1 375 13 is_stmt 1 view .LVU521
 1963              	@ armwave.c:377: }
 376:armwave.c     ****     }
 377:armwave.c     **** }
 1964              		.loc 1 377 1 is_stmt 0 view .LVU522
 1965 0970 1EFF2FE1 		bx	lr	@
 1966              	.L109:
 1967              		.align	2
 1968              	.L108:
 1969 0974 00000000 		.word	g_armwave_state
 1970              		.cfi_endproc
 1971              	.LFE67:
 1973              		.align	2
 1974              		.global	armwave_dump_ppm_debug
 1975              		.syntax unified
 1976              		.arm
 1977              		.fpu vfp
 1979              	armwave_dump_ppm_debug:
 1980              	.LVL115:
 1981              	.LFB68:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Dump a ppm of a buffer to a file.
 381:armwave.c     ****  */
 382:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 383:armwave.c     **** {
 1982              		.loc 1 383 1 is_stmt 1 view -0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1986              		.loc 1 384 5 view .LVU524
 1987              	@ armwave.c:383: {
 383:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1988              		.loc 1 383 1 is_stmt 0 view .LVU525
 1989 0978 0130A0E1 		mov	r3, r1	@ fn, fn
 1990 097c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1991              		.cfi_def_cfa_offset 28
 1992              		.cfi_offset 4, -28
 1993              		.cfi_offset 5, -24
 1994              		.cfi_offset 6, -20
 1995              		.cfi_offset 7, -16
 1996              		.cfi_offset 8, -12
 1997              		.cfi_offset 9, -8
 1998              		.cfi_offset 14, -4
 1999 0980 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2000 0984 0CD04DE2 		sub	sp, sp, #12	@,,
 2001              		.cfi_def_cfa_offset 40
 2002              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 2003              		.loc 1 384 16 view .LVU526
 2004 0988 C4109FE5 		ldr	r1, .L118	@,
 2005              	.LVL116:
 2006              		.loc 1 384 16 view .LVU527
 2007 098c 0300A0E1 		mov	r0, r3	@, fn
 2008              	.LVL117:
 2009              		.loc 1 384 16 view .LVU528
 2010 0990 FEFFFFEB 		bl	fopen64		@
 2011              	.LVL118:
 2012              	@ armwave.c:391:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 385:armwave.c     ****     uint32_t data;
 386:armwave.c     ****     int xx, yy;
 387:armwave.c     **** 
 388:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 389:armwave.c     **** 
 390:armwave.c     ****     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2013              		.loc 1 391 5 view .LVU529
 2014 0994 BC609FE5 		ldr	r6, .L118+4	@ tmp150,
 2015              	@ armwave.c:390:     fputs("P3\n", fp);
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2016              		.loc 1 390 5 view .LVU530
 2017 0998 0320A0E3 		mov	r2, #3	@,
 2018 099c 0110A0E3 		mov	r1, #1	@,
 2019              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 384:armwave.c     ****     uint32_t data;
 2020              		.loc 1 384 16 view .LVU531
 2021 09a0 0070A0E1 		mov	r7, r0	@ fp,
 2022              	.LVL119:
 385:armwave.c     ****     uint32_t data;
 2023              		.loc 1 385 5 is_stmt 1 view .LVU532
 386:armwave.c     **** 
 2024              		.loc 1 386 5 view .LVU533
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2025              		.loc 1 390 5 view .LVU534
 2026 09a4 0030A0E1 		mov	r3, r0	@, fp
 2027 09a8 AC009FE5 		ldr	r0, .L118+8	@,
 2028              	.LVL120:
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2029              		.loc 1 390 5 is_stmt 0 view .LVU535
 2030 09ac FEFFFFEB 		bl	fwrite		@
 2031              	.LVL121:
 2032              		.loc 1 391 5 is_stmt 1 view .LVU536
 2033 09b0 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2034 09b4 A4109FE5 		ldr	r1, .L118+12	@,
 2035 09b8 0700A0E1 		mov	r0, r7	@, fp
 2036 09bc FEFFFFEB 		bl	fprintf		@
 2037              	.LVL122:
 392:armwave.c     ****     fputs("255\n", fp);
 2038              		.loc 1 392 5 view .LVU537
 2039 09c0 0420A0E3 		mov	r2, #4	@,
 2040 09c4 0730A0E1 		mov	r3, r7	@, fp
 2041 09c8 0110A0E3 		mov	r1, #1	@,
 2042 09cc 90009FE5 		ldr	r0, .L118+16	@,
 2043 09d0 FEFFFFEB 		bl	fwrite		@
 2044              	.LVL123:
 393:armwave.c     **** 
 394:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2045              		.loc 1 394 5 view .LVU538
 2046              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2047              		.loc 1 394 37 is_stmt 0 view .LVU539
 2048 09d4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2049              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2050              		.loc 1 394 5 view .LVU540
 2051 09d8 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2052 09dc 180000DA 		ble	.L111		@,
 2053 09e0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2054              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 398:armwave.c     **** 
 399:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2055              		.loc 1 399 13 view .LVU541
 2056 09e4 7C909FE5 		ldr	r9, .L118+20	@ tmp152,
 2057              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2058              		.loc 1 394 12 view .LVU542
 2059 09e8 0050A0E3 		mov	r5, #0	@ yy,
 2060              	.LVL124:
 2061              	.L112:
 2062              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2063              		.loc 1 395 9 view .LVU543
 2064 09ec 000053E3 		cmp	r3, #0	@ _13,
 2065              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2066              		.loc 1 395 16 view .LVU544
 2067 09f0 0040A0C3 		movgt	r4, #0	@ xx,
 2068              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2069              		.loc 1 395 9 view .LVU545
 2070 09f4 0F0000DA 		ble	.L114		@,
 2071              	.LVL125:
 2072              	.L113:
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2073              		.loc 1 396 13 is_stmt 1 discriminator 3 view .LVU546
 2074              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2075              		.loc 1 396 29 is_stmt 0 discriminator 3 view .LVU547
 2076 09f8 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2077              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2078              		.loc 1 399 13 discriminator 3 view .LVU548
 2079 09fc 0910A0E1 		mov	r1, r9	@, tmp152
 2080 0a00 0700A0E1 		mov	r0, r7	@, fp
 2081              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2082              		.loc 1 396 18 discriminator 3 view .LVU549
 2083 0a04 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2084              	.LVL126:
 2085              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU550
 2086              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2087              		.loc 1 395 58 is_stmt 0 discriminator 3 view .LVU551
 2088 0a08 014084E2 		add	r4, r4, #1	@ xx, xx,
 2089              	.LVL127:
 2090              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2091              		.loc 1 399 81 discriminator 3 view .LVU552
 2092 0a0c 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2093              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2094              		.loc 1 399 61 discriminator 3 view .LVU553
 2095 0a10 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2096              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2097              		.loc 1 399 13 discriminator 3 view .LVU554
 2098 0a14 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2099 0a18 7330EFE6 		uxtb	r3, r3	@, tmp142
 2100 0a1c 00C08DE5 		str	ip, [sp]	@ tmp147,
 2101 0a20 7220EFE6 		uxtb	r2, r2	@, data
 2102              	.LVL128:
 2103              		.loc 1 399 13 discriminator 3 view .LVU555
 2104 0a24 FEFFFFEB 		bl	fprintf		@
 2105              	.LVL129:
 2106              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2107              		.loc 1 395 41 discriminator 3 view .LVU556
 2108 0a28 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2109              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2110              		.loc 1 395 9 discriminator 3 view .LVU557
 2111 0a2c 040053E1 		cmp	r3, r4	@ _13, xx
 2112 0a30 F0FFFFCA 		bgt	.L113		@,
 2113 0a34 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2114              	.LVL130:
 2115              	.L114:
 2116              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2117              		.loc 1 394 55 discriminator 2 view .LVU558
 2118 0a38 015085E2 		add	r5, r5, #1	@ yy, yy,
 2119              	.LVL131:
 2120              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2121              		.loc 1 394 5 discriminator 2 view .LVU559
 2122 0a3c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2123 0a40 E9FFFFBA 		blt	.L112		@,
 2124              	.LVL132:
 2125              	.L111:
 400:armwave.c     ****         }
 401:armwave.c     ****     }
 402:armwave.c     **** 
 403:armwave.c     ****     fclose(fp);
 2126              		.loc 1 403 5 is_stmt 1 view .LVU560
 2127 0a44 0700A0E1 		mov	r0, r7	@, fp
 2128              	@ armwave.c:404: }
 404:armwave.c     **** }
 2129              		.loc 1 404 1 is_stmt 0 view .LVU561
 2130 0a48 0CD08DE2 		add	sp, sp, #12	@,,
 2131              		.cfi_def_cfa_offset 28
 2132              		@ sp needed	@
 2133 0a4c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2134              		.cfi_restore 14
 2135              		.cfi_restore 9
 2136              		.cfi_restore 8
 2137              		.cfi_restore 7
 2138              		.cfi_restore 6
 2139              		.cfi_restore 5
 2140              		.cfi_restore 4
 2141              		.cfi_def_cfa_offset 0
 2142              	.LVL133:
 2143              	@ armwave.c:403:     fclose(fp);
 403:armwave.c     **** }
 2144              		.loc 1 403 5 view .LVU562
 2145 0a50 FEFFFFEA 		b	fclose		@
 2146              	.LVL134:
 2147              	.L119:
 403:armwave.c     **** }
 2148              		.loc 1 403 5 view .LVU563
 2149              		.align	2
 2150              	.L118:
 2151 0a54 AC010000 		.word	.LC12
 2152 0a58 00000000 		.word	g_armwave_state
 2153 0a5c B0010000 		.word	.LC13
 2154 0a60 B4010000 		.word	.LC14
 2155 0a64 BC010000 		.word	.LC15
 2156 0a68 C4010000 		.word	.LC16
 2157              		.cfi_endproc
 2158              	.LFE68:
 2160              		.align	2
 2161              		.global	armwave_test_init
 2162              		.syntax unified
 2163              		.arm
 2164              		.fpu vfp
 2166              	armwave_test_init:
 2167              	.LVL135:
 2168              	.LFB69:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Initialise some test functionry.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 410:armwave.c     **** {
 2169              		.loc 1 410 1 is_stmt 1 view -0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 0
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 411:armwave.c     ****     test_create_gamma();
 2173              		.loc 1 411 5 view .LVU565
 2174              	.LBB18:
 2175              	.LBI18:
  34:armwave.c     **** {
 2176              		.loc 1 34 6 view .LVU566
  34:armwave.c     **** {
 2177              		.loc 1 34 6 is_stmt 0 view .LVU567
 2178              	.LBE18:
 2179              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2180              		.loc 1 410 1 view .LVU568
 2181 0a6c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2182              		.cfi_def_cfa_offset 32
 2183              		.cfi_offset 4, -32
 2184              		.cfi_offset 5, -28
 2185              		.cfi_offset 6, -24
 2186              		.cfi_offset 7, -20
 2187              		.cfi_offset 8, -16
 2188              		.cfi_offset 9, -12
 2189              		.cfi_offset 10, -8
 2190              		.cfi_offset 14, -4
 2191 0a70 068B2DED 		vpush.64	{d8, d9, d10}	@
 2192              		.cfi_def_cfa_offset 56
 2193              		.cfi_offset 80, -56
 2194              		.cfi_offset 81, -52
 2195              		.cfi_offset 82, -48
 2196              		.cfi_offset 83, -44
 2197              		.cfi_offset 84, -40
 2198              		.cfi_offset 85, -36
 2199 0a74 C0409FE5 		ldr	r4, .L124+20	@ ivtmp.96,
 2200              	.LBB21:
 2201              	.LBB19:
 2202              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2203              		.loc 1 40 32 view .LVU569
 2204 0a78 2EAA9FED 		vldr.32	s20, .L124+16	@ tmp136,
 2205              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2206              		.loc 1 40 26 view .LVU570
 2207 0a7c 299B9FED 		vldr.64	d9, .L124	@ tmp151,
 2208              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2209              		.loc 1 40 49 view .LVU571
 2210 0a80 2A8B9FED 		vldr.64	d8, .L124+8	@ tmp139,
 2211 0a84 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.96,
 2212              	.LBE19:
 2213              	.LBE21:
 2214              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2215              		.loc 1 410 1 view .LVU572
 2216 0a88 10D04DE2 		sub	sp, sp, #16	@,,
 2217              		.cfi_def_cfa_offset 72
 2218              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2219              		.loc 1 410 1 view .LVU573
 2220 0a8c 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2221 0a90 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2222 0a94 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2223 0a98 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2224 0a9c 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.96,
 2225 0aa0 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2226              	.LVL136:
 2227              	.L121:
 2228              	.LBB22:
 2229              	.LBB20:
  40:armwave.c     ****     }
 2230              		.loc 1 40 9 is_stmt 1 view .LVU574
 2231              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2232              		.loc 1 40 32 is_stmt 0 view .LVU575
 2233 0aa4 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.96
 2234              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2235              		.loc 1 40 26 view .LVU576
 2236 0aa8 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2237              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2238              		.loc 1 40 32 view .LVU577
 2239 0aac 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2240 0ab0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2241 0ab4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2242              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2243              		.loc 1 40 26 view .LVU578
 2244 0ab8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2245 0abc FEFFFFEB 		bl	pow		@
 2246              	.LVL137:
 2247              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2248              		.loc 1 40 49 view .LVU579
 2249 0ac0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2250              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2251              		.loc 1 40 24 view .LVU580
 2252 0ac4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2253 0ac8 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2254 0acc 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2255              	.LVL138:
 2256              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2257              		.loc 1 39 5 view .LVU581
 2258 0ad0 0A0054E1 		cmp	r4, r10	@ ivtmp.96, _39
 2259 0ad4 F2FFFF1A 		bne	.L121		@,
 2260              	.LVL139:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2261              		.loc 1 39 5 view .LVU582
 2262              	.LBE20:
 2263              	.LBE22:
 412:armwave.c     **** 
 413:armwave.c     ****     // make ch1 yellowish by default
 414:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2264              		.loc 1 414 5 is_stmt 1 view .LVU583
 2265              	.LBB23:
 2266              	.LBI23:
 367:armwave.c     **** {
 2267              		.loc 1 367 6 view .LVU584
 2268              	.LBB24:
 370:armwave.c     ****         case 1:
 2269              		.loc 1 370 5 view .LVU585
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2270              		.loc 1 372 13 view .LVU586
 373:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2271              		.loc 1 373 13 view .LVU587
 2272              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2273              		.loc 1 372 41 is_stmt 0 view .LVU588
 2274 0ad8 60C09FE5 		ldr	ip, .L124+24	@ tmp142,
 2275 0adc 60409FE5 		ldr	r4, .L124+28	@ tmp143,
 2276              	.LBE24:
 2277              	.LBE23:
 2278              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 415:armwave.c     **** 
 416:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2279              		.loc 1 416 5 view .LVU589
 2280 0ae0 0000A0E3 		mov	r0, #0	@ tmp147,
 2281              	.LBB28:
 2282              	.LBB25:
 2283              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2284              		.loc 1 374 41 view .LVU590
 2285 0ae4 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2286              	.LBE25:
 2287              	.LBE28:
 2288              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2289              		.loc 1 416 5 view .LVU591
 2290 0ae8 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2291 0aec 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2292 0af0 00808DE5 		str	r8, [sp]	@ render_width,
 2293 0af4 0610A0E1 		mov	r1, r6	@, tmp3
 2294 0af8 0720A0E1 		mov	r2, r7	@, nwaves
 2295              	.LBB29:
 2296              	.LBB26:
 2297              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2298              		.loc 1 372 41 view .LVU592
 2299 0afc 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 374:armwave.c     ****             break;
 2300              		.loc 1 374 13 is_stmt 1 view .LVU593
 2301              	.LBE26:
 2302              	.LBE29:
 2303              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2304              		.loc 1 416 5 is_stmt 0 view .LVU594
 2305 0b00 0630A0E1 		mov	r3, r6	@, wave_size
 2306              	.LBB30:
 2307              	.LBB27:
 2308              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2309              		.loc 1 374 41 view .LVU595
 2310 0b04 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 375:armwave.c     ****     }
 2311              		.loc 1 375 13 is_stmt 1 view .LVU596
 2312              	.LVL140:
 375:armwave.c     ****     }
 2313              		.loc 1 375 13 is_stmt 0 view .LVU597
 2314              	.LBE27:
 2315              	.LBE30:
 2316              		.loc 1 416 5 is_stmt 1 view .LVU598
 2317 0b08 FEFFFFEB 		bl	armwave_setup_render		@
 2318              	.LVL141:
 417:armwave.c     **** 
 418:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2319              		.loc 1 418 5 view .LVU599
 2320 0b0c 34109FE5 		ldr	r1, .L124+32	@,
 2321 0b10 34009FE5 		ldr	r0, .L124+36	@,
 2322              	@ armwave.c:419: }
 419:armwave.c     **** }
 2323              		.loc 1 419 1 is_stmt 0 view .LVU600
 2324 0b14 10D08DE2 		add	sp, sp, #16	@,,
 2325              		.cfi_def_cfa_offset 56
 2326              		@ sp needed	@
 2327 0b18 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2328              		.cfi_restore 84
 2329              		.cfi_restore 85
 2330              		.cfi_restore 82
 2331              		.cfi_restore 83
 2332              		.cfi_restore 80
 2333              		.cfi_restore 81
 2334              		.cfi_def_cfa_offset 32
 2335 0b1c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2336              		.cfi_restore 14
 2337              		.cfi_restore 10
 2338              		.cfi_restore 9
 2339              		.cfi_restore 8
 2340              		.cfi_restore 7
 2341              		.cfi_restore 6
 2342              		.cfi_restore 5
 2343              		.cfi_restore 4
 2344              		.cfi_def_cfa_offset 0
 2345              	.LVL142:
 2346              	@ armwave.c:418:     printf("armwave version: %s\n", ARMWAVE_VER);
 418:armwave.c     **** }
 2347              		.loc 1 418 5 view .LVU601
 2348 0b20 FEFFFFEA 		b	printf		@
 2349              	.LVL143:
 2350              	.L125:
 2351 0b24 0000A0E1 		.align	3
 2352              	.L124:
 2353 0b28 000000C0 		.word	-1073741824
 2354 0b2c CCCCEC3F 		.word	1072483532
 2355 0b30 00000000 		.word	0
 2356 0b34 00E06F40 		.word	1081073664
 2357 0b38 00007F43 		.word	1132396544
 2358 0b3c FFFFFFFF 		.word	gamma_table-1
 2359 0b40 00000000 		.word	g_armwave_state
 2360 0b44 F609F406 		.word	116656630
 2361 0b48 00000000 		.word	.LC0
 2362 0b4c 08000000 		.word	.LC1
 2363              		.cfi_endproc
 2364              	.LFE69:
 2366              		.align	2
 2367              		.global	armwave_test_fill_outbuf
 2368              		.syntax unified
 2369              		.arm
 2370              		.fpu vfp
 2372              	armwave_test_fill_outbuf:
 2373              	.LFB70:
 420:armwave.c     **** 
 421:armwave.c     **** /*
 422:armwave.c     ****  * Render image to the local allocated buffer.
 423:armwave.c     ****  */
 424:armwave.c     **** void armwave_test_fill_outbuf()
 425:armwave.c     **** {
 2374              		.loc 1 425 1 is_stmt 1 view -0
 2375              		.cfi_startproc
 2376              		@ args = 0, pretend = 0, frame = 0
 2377              		@ frame_needed = 0, uses_anonymous_args = 0
 2378              		@ link register save eliminated.
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2379              		.loc 1 426 5 view .LVU603
 2380 0b50 04309FE5 		ldr	r3, .L127	@ tmp111,
 2381 0b54 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2382 0b58 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2383              	.LVL144:
 2384              	.L128:
 2385              		.align	2
 2386              	.L127:
 2387 0b5c 00000000 		.word	g_armwave_state
 2388              		.cfi_endproc
 2389              	.LFE70:
 2391              		.align	2
 2392              		.global	armwave_test_dump_buffer_to_ppm
 2393              		.syntax unified
 2394              		.arm
 2395              		.fpu vfp
 2397              	armwave_test_dump_buffer_to_ppm:
 2398              	.LVL145:
 2399              	.LFB71:
 427:armwave.c     **** }
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 433:armwave.c     **** {
 2400              		.loc 1 433 1 view -0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 0
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 2404              		@ link register save eliminated.
 434:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2405              		.loc 1 434 5 view .LVU605
 2406 0b60 08309FE5 		ldr	r3, .L130	@ tmp112,
 2407 0b64 0010A0E1 		mov	r1, r0	@, fn
 2408 0b68 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2409              	.LVL146:
 2410              		.loc 1 434 5 is_stmt 0 view .LVU606
 2411 0b6c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2412              	.LVL147:
 2413              	.L131:
 2414              		.loc 1 434 5 view .LVU607
 2415              		.align	2
 2416              	.L130:
 2417 0b70 00000000 		.word	g_armwave_state
 2418              		.cfi_endproc
 2419              	.LFE71:
 2421              		.align	2
 2422              		.global	armwave_test_fill_gdkbuf
 2423              		.syntax unified
 2424              		.arm
 2425              		.fpu vfp
 2427              	armwave_test_fill_gdkbuf:
 2428              	.LVL148:
 2429              	.LFB72:
 435:armwave.c     **** }
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Render GDK buffer with test funtionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 441:armwave.c     **** {
 2430              		.loc 1 441 1 is_stmt 1 view -0
 2431              		.cfi_startproc
 2432              		@ args = 0, pretend = 0, frame = 0
 2433              		@ frame_needed = 0, uses_anonymous_args = 0
 2434              		@ link register save eliminated.
 442:armwave.c     ****     //PyObject *mv;
 443:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 444:armwave.c     **** 
 445:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 446:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2435              		.loc 1 446 5 view .LVU609
 447:armwave.c     ****     
 448:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2436              		.loc 1 449 5 view .LVU610
 2437              	@ armwave.c:446:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 446:armwave.c     ****     
 2438              		.loc 1 446 11 is_stmt 0 view .LVU611
 2439 0b74 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2440              	@ armwave.c:449:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2441              		.loc 1 449 5 view .LVU612
 2442 0b78 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2443              	.LVL149:
 2444              		.loc 1 449 5 view .LVU613
 2445 0b7c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2446              	.LVL150:
 2447              		.loc 1 449 5 view .LVU614
 2448              		.cfi_endproc
 2449              	.LFE72:
 2451              		.align	2
 2452              		.global	armwave_test_buffer_alloc
 2453              		.syntax unified
 2454              		.arm
 2455              		.fpu vfp
 2457              	armwave_test_buffer_alloc:
 2458              	.LVL151:
 2459              	.LFB73:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 456:armwave.c     **** {
 2460              		.loc 1 456 1 is_stmt 1 view -0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
 2463              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2464              		.loc 1 457 5 view .LVU616
 2465              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2466              		.loc 1 456 1 is_stmt 0 view .LVU617
 2467 0b80 70402DE9 		push	{r4, r5, r6, lr}	@
 2468              		.cfi_def_cfa_offset 16
 2469              		.cfi_offset 4, -16
 2470              		.cfi_offset 5, -12
 2471              		.cfi_offset 6, -8
 2472              		.cfi_offset 14, -4
 2473              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2474              		.loc 1 456 1 view .LVU618
 2475 0b84 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2476              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2477              		.loc 1 457 23 view .LVU619
 2478 0b88 44409FE5 		ldr	r4, .L140	@ tmp128,
 2479 0b8c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2480              	.LVL152:
 2481              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2482              		.loc 1 457 7 view .LVU620
 2483 0b90 000050E3 		cmp	r0, #0	@ _1,
 2484 0b94 0000000A 		beq	.L134		@,
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2485              		.loc 1 458 9 is_stmt 1 view .LVU621
 2486 0b98 FEFFFFEB 		bl	free		@
 2487              	.LVL153:
 2488              	.L134:
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 462:armwave.c     **** 
 463:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2489              		.loc 1 463 5 view .LVU622
 2490              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2491              		.loc 1 463 75 is_stmt 0 view .LVU623
 2492 0b9c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2493 0ba0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2494              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2495              		.loc 1 463 40 view .LVU624
 2496 0ba4 0610A0E1 		mov	r1, r6	@, nsets
 2497              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2498              		.loc 1 463 75 view .LVU625
 2499 0ba8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2500              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2501              		.loc 1 463 40 view .LVU626
 2502 0bac 0500A0E1 		mov	r0, r5	@, _4
 2503 0bb0 FEFFFFEB 		bl	calloc		@
 2504              	.LVL154:
 2505              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     **** 
 465:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2506              		.loc 1 465 7 view .LVU627
 2507 0bb4 000050E3 		cmp	r0, #0	@ tmp124,
 2508              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2509              		.loc 1 463 38 view .LVU628
 2510 0bb8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2511              		.loc 1 465 5 is_stmt 1 view .LVU629
 2512              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 2513              		.loc 1 465 7 is_stmt 0 view .LVU630
 2514 0bbc 7080BD18 		popne	{r4, r5, r6, pc}	@
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2515              		.loc 1 466 9 is_stmt 1 view .LVU631
 2516 0bc0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2517 0bc4 0620A0E1 		mov	r2, r6	@, nsets
 2518 0bc8 08009FE5 		ldr	r0, .L140+4	@,
 2519              	@ armwave.c:470: }
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 468:armwave.c     ****         return;
 469:armwave.c     ****     }
 470:armwave.c     **** }
 2520              		.loc 1 470 1 is_stmt 0 view .LVU632
 2521 0bcc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2522              		.cfi_restore 14
 2523              		.cfi_restore 6
 2524              		.cfi_restore 5
 2525              		.cfi_restore 4
 2526              		.cfi_def_cfa_offset 0
 2527              	.LVL155:
 2528              	@ armwave.c:466:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2529              		.loc 1 466 9 view .LVU633
 2530 0bd0 FEFFFFEA 		b	printf		@
 2531              	.LVL156:
 2532              	.L141:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2533              		.loc 1 466 9 view .LVU634
 2534              		.align	2
 2535              	.L140:
 2536 0bd4 00000000 		.word	g_armwave_state
 2537 0bd8 D4010000 		.word	.LC17
 2538              		.cfi_endproc
 2539              	.LFE73:
 2541              		.align	2
 2542              		.global	armwave_fill_pixbuf_into_pybuffer
 2543              		.syntax unified
 2544              		.arm
 2545              		.fpu vfp
 2547              	armwave_fill_pixbuf_into_pybuffer:
 2548              	.LVL157:
 2549              	.LFB74:
 471:armwave.c     **** 
 472:armwave.c     **** /*
 473:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 474:armwave.c     ****  */
 475:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 476:armwave.c     **** {
 2550              		.loc 1 476 1 is_stmt 1 view -0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 48
 2553              		@ frame_needed = 0, uses_anonymous_args = 0
 477:armwave.c     ****     Py_buffer buffer;
 2554              		.loc 1 477 5 view .LVU636
 478:armwave.c     ****     int ret;
 2555              		.loc 1 478 5 view .LVU637
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 481:armwave.c     **** 
 482:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2556              		.loc 1 482 5 view .LVU638
 2557              	@ armwave.c:476: {
 476:armwave.c     ****     Py_buffer buffer;
 2558              		.loc 1 476 1 is_stmt 0 view .LVU639
 2559 0bdc 04E02DE5 		str	lr, [sp, #-4]!	@,
 2560              		.cfi_def_cfa_offset 4
 2561              		.cfi_offset 14, -4
 2562 0be0 34D04DE2 		sub	sp, sp, #52	@,,
 2563              		.cfi_def_cfa_offset 56
 2564              	@ armwave.c:482:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2565              		.loc 1 482 11 view .LVU640
 2566 0be4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2567 0be8 0120A0E3 		mov	r2, #1	@,
 2568 0bec FEFFFFEB 		bl	PyObject_GetBuffer		@
 2569              	.LVL158:
 483:armwave.c     **** 
 484:armwave.c     ****     if(ret != 0) {
 2570              		.loc 1 484 5 is_stmt 1 view .LVU641
 2571              	@ armwave.c:484:     if(ret != 0) {
 2572              		.loc 1 484 7 is_stmt 0 view .LVU642
 2573 0bf0 000050E3 		cmp	r0, #0	@,
 2574 0bf4 0A00001A 		bne	.L146		@,
 485:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 486:armwave.c     ****         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 490:armwave.c     **** 
 491:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2575              		.loc 1 491 5 is_stmt 1 view .LVU643
 2576 0bf8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2577              	.LVL159:
 2578              		.loc 1 491 5 is_stmt 0 view .LVU644
 2579 0bfc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2580              	.LVL160:
 492:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 493:armwave.c     **** 
 494:armwave.c     ****     PyBuffer_Release(&buffer);
 2581              		.loc 1 494 5 is_stmt 1 view .LVU645
 2582 0c00 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2583 0c04 FEFFFFEB 		bl	PyBuffer_Release		@
 2584              	.LVL161:
 495:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 496:armwave.c     **** 
 497:armwave.c     ****     Py_RETURN_TRUE;
 2585              		.loc 1 497 5 view .LVU646
 2586              	.LBB31:
 2587              	.LBI31:
 2588              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2589              		.loc 2 456 20 view .LVU647
 2590              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2591              		.loc 2 458 21 view .LVU648
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2592              		.loc 2 459 5 view .LVU649
 2593              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2594              		.loc 2 459 18 is_stmt 0 view .LVU650
 2595 0c08 38309FE5 		ldr	r3, .L147	@ tmp126,
 2596              	.LBE32:
 2597              	.LBE31:
 2598              	@ armwave.c:497:     Py_RETURN_TRUE;
 2599              		.loc 1 497 5 view .LVU651
 2600 0c0c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2601              	.LBB34:
 2602              	.LBB33:
 2603              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2604              		.loc 2 459 18 view .LVU652
 2605 0c10 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2606 0c14 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2607 0c18 002083E5 		str	r2, [r3]	@ tmp128,
 2608              	.LBE33:
 2609              	.LBE34:
 2610              	@ armwave.c:498: }
 498:armwave.c     **** }
 2611              		.loc 1 498 1 view .LVU653
 2612 0c1c 34D08DE2 		add	sp, sp, #52	@,,
 2613              		.cfi_remember_state
 2614              		.cfi_def_cfa_offset 4
 2615              		@ sp needed	@
 2616 0c20 04F09DE4 		ldr	pc, [sp], #4	@
 2617              	.LVL162:
 2618              	.L146:
 2619              		.cfi_restore_state
 485:armwave.c     ****         Py_RETURN_FALSE;
 2620              		.loc 1 485 9 is_stmt 1 view .LVU654
 2621 0c24 20009FE5 		ldr	r0, .L147+4	@,
 2622              	.LVL163:
 485:armwave.c     ****         Py_RETURN_FALSE;
 2623              		.loc 1 485 9 is_stmt 0 view .LVU655
 2624 0c28 FEFFFFEB 		bl	puts		@
 2625              	.LVL164:
 486:armwave.c     ****     }
 2626              		.loc 1 486 9 is_stmt 1 view .LVU656
 2627              	.LBB35:
 2628              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2629              		.loc 2 456 20 view .LVU657
 2630              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2631              		.loc 2 458 21 view .LVU658
 2632              		.loc 2 459 5 view .LVU659
 2633              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2634              		.loc 2 459 18 is_stmt 0 view .LVU660
 2635 0c2c 1C309FE5 		ldr	r3, .L147+8	@ tmp120,
 2636              	.LBE36:
 2637              	.LBE35:
 2638              	@ armwave.c:486:         Py_RETURN_FALSE;
 486:armwave.c     ****     }
 2639              		.loc 1 486 9 view .LVU661
 2640 0c30 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2641              	.LBB38:
 2642              	.LBB37:
 2643              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2644              		.loc 2 459 18 view .LVU662
 2645 0c34 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2646 0c38 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2647 0c3c 002083E5 		str	r2, [r3]	@ tmp122,
 2648              	.LBE37:
 2649              	.LBE38:
 2650              	@ armwave.c:498: }
 2651              		.loc 1 498 1 view .LVU663
 2652 0c40 34D08DE2 		add	sp, sp, #52	@,,
 2653              		.cfi_def_cfa_offset 4
 2654              		@ sp needed	@
 2655 0c44 04F09DE4 		ldr	pc, [sp], #4	@
 2656              	.L148:
 2657              		.align	2
 2658              	.L147:
 2659 0c48 00000000 		.word	_Py_TrueStruct
 2660 0c4c 28020000 		.word	.LC18
 2661 0c50 00000000 		.word	_Py_FalseStruct
 2662              		.cfi_endproc
 2663              	.LFE74:
 2665              		.align	2
 2666              		.global	armwave_test_create_am_sine
 2667              		.syntax unified
 2668              		.arm
 2669              		.fpu vfp
 2671              	armwave_test_create_am_sine:
 2672              	.LVL165:
 2673              	.LFB75:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Make a test AM waveform for render tests.
 502:armwave.c     ****  *
 503:armwave.c     ****  * @param   mod                     modulation depth
 504:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 505:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 508:armwave.c     **** {
 2674              		.loc 1 508 1 is_stmt 1 view -0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 8
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2678              		.loc 1 509 5 view .LVU665
 510:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2679              		.loc 1 510 5 view .LVU666
 2680              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2681              		.loc 1 508 1 is_stmt 0 view .LVU667
 2682 0c54 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2683              		.cfi_def_cfa_offset 32
 2684              		.cfi_offset 4, -32
 2685              		.cfi_offset 5, -28
 2686              		.cfi_offset 6, -24
 2687              		.cfi_offset 7, -20
 2688              		.cfi_offset 8, -16
 2689              		.cfi_offset 9, -12
 2690              		.cfi_offset 10, -8
 2691              		.cfi_offset 14, -4
 2692              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2693              		.loc 1 510 38 view .LVU668
 2694 0c58 7A7A9FED 		vldr.32	s14, .L180	@ tmp180,
 2695              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2696              		.loc 1 510 55 view .LVU669
 2697 0c5c 00529FE5 		ldr	r5, .L180+28	@ tmp250,
 2698              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2699              		.loc 1 508 1 view .LVU670
 2700 0c60 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2701              		.cfi_def_cfa_offset 80
 2702              		.cfi_offset 80, -80
 2703              		.cfi_offset 81, -76
 2704              		.cfi_offset 82, -72
 2705              		.cfi_offset 83, -68
 2706              		.cfi_offset 84, -64
 2707              		.cfi_offset 85, -60
 2708              		.cfi_offset 86, -56
 2709              		.cfi_offset 87, -52
 2710              		.cfi_offset 88, -48
 2711              		.cfi_offset 89, -44
 2712              		.cfi_offset 90, -40
 2713              		.cfi_offset 91, -36
 2714 0c64 0090A0E1 		mov	r9, r0	@ sets, sets
 2715              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2716              		.loc 1 510 38 view .LVU671
 2717 0c68 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2718              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 511:armwave.c     ****     int s, set_offset = 0;
 512:armwave.c     ****     int w, x;
 513:armwave.c     **** 
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2719              		.loc 1 514 70 view .LVU672
 2720 0c6c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2721 0c70 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2722              	.LBB41:
 2723              	.LBB42:
 2724              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2725              		.loc 1 457 23 view .LVU673
 2726 0c74 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2727              	.LVL166:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2728              		.loc 1 457 23 view .LVU674
 2729              	.LBE42:
 2730              	.LBE41:
 2731              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2732              		.loc 1 510 38 view .LVU675
 2733 0c78 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2734              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2735              		.loc 1 514 70 view .LVU676
 2736 0c7c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2737              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2738              		.loc 1 508 1 view .LVU677
 2739 0c80 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2740              	.LBB46:
 2741              	.LBB43:
 2742              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2743              		.loc 1 457 7 view .LVU678
 2744 0c84 000050E3 		cmp	r0, #0	@ _82,
 2745              	.LBE43:
 2746              	.LBE46:
 2747              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2748              		.loc 1 508 1 view .LVU679
 2749 0c88 08D04DE2 		sub	sp, sp, #8	@,,
 2750              		.cfi_def_cfa_offset 88
 2751              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_nsets = sets;
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2752              		.loc 1 515 44 view .LVU680
 2753 0c8c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2754              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2755              		.loc 1 514 45 view .LVU681
 2756 0c90 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2757              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2758              		.loc 1 510 38 view .LVU682
 2759 0c94 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2760              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2761              		.loc 1 510 11 view .LVU683
 2762 0c98 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2763              	.LVL167:
 511:armwave.c     ****     int w, x;
 2764              		.loc 1 511 5 is_stmt 1 view .LVU684
 512:armwave.c     **** 
 2765              		.loc 1 512 5 view .LVU685
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2766              		.loc 1 514 5 view .LVU686
 2767              		.loc 1 515 5 view .LVU687
 516:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2768              		.loc 1 516 5 view .LVU688
 2769              	.LBB47:
 2770              	.LBI41:
 455:armwave.c     **** {
 2771              		.loc 1 455 6 view .LVU689
 2772              	.LBB44:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2773              		.loc 1 457 5 view .LVU690
 2774              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2775              		.loc 1 457 7 is_stmt 0 view .LVU691
 2776 0c9c 0000000A 		beq	.L150		@,
 458:armwave.c     ****     }
 2777              		.loc 1 458 9 is_stmt 1 view .LVU692
 2778 0ca0 FEFFFFEB 		bl	free		@
 2779              	.LVL168:
 2780              	.L150:
 463:armwave.c     **** 
 2781              		.loc 1 463 5 view .LVU693
 2782              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2783              		.loc 1 463 75 is_stmt 0 view .LVU694
 2784 0ca4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2785 0ca8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2786              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2787              		.loc 1 463 40 view .LVU695
 2788 0cac 0910A0E1 		mov	r1, r9	@, sets
 2789              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2790              		.loc 1 463 75 view .LVU696
 2791 0cb0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2792              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2793              		.loc 1 463 40 view .LVU697
 2794 0cb4 0400A0E1 		mov	r0, r4	@, _85
 2795 0cb8 FEFFFFEB 		bl	calloc		@
 2796              	.LVL169:
 2797              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2798              		.loc 1 465 7 view .LVU698
 2799 0cbc 000050E3 		cmp	r0, #0	@ tmp191,
 2800              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2801              		.loc 1 463 38 view .LVU699
 2802 0cc0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2803              		.loc 1 465 5 is_stmt 1 view .LVU700
 2804              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2805              		.loc 1 465 7 is_stmt 0 view .LVU701
 2806 0cc4 5A00000A 		beq	.L179		@,
 2807              	.L151:
 2808              	.LVL170:
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2809              		.loc 1 465 7 view .LVU702
 2810              	.LBE44:
 2811              	.LBE47:
 2812              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 517:armwave.c     **** 
 518:armwave.c     ****     for(s = 0; s < sets; s++) {
 2813              		.loc 1 518 5 discriminator 1 view .LVU703
 2814 0cc8 000059E3 		cmp	r9, #0	@ sets,
 2815 0ccc 550000DA 		ble	.L149		@,
 2816              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 520:armwave.c     ****     
 521:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 523:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 525:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     **** 
 531:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 533:armwave.c     **** 
 534:armwave.c     ****                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 537:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2817              		.loc 1 537 45 view .LVU704
 2818 0cd0 5C8A9FED 		vldr.32	s16, .L180	@ tmp258,
 2819              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 539:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 540:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2820              		.loc 1 540 104 view .LVU705
 2821 0cd4 5CCA9FED 		vldr.32	s24, .L180+4	@ tmp259,
 2822              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2823              		.loc 1 518 5 view .LVU706
 2824 0cd8 0070A0E3 		mov	r7, #0	@ set_offset,
 2825              	@ armwave.c:519:         printf("Calculating test set %d\n", s);
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2826              		.loc 1 519 9 view .LVU707
 2827 0cdc 84A19FE5 		ldr	r10, .L180+32	@ tmp257,
 2828              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2829              		.loc 1 518 5 view .LVU708
 2830 0ce0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2831              	.LVL171:
 2832              	.L152:
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2833              		.loc 1 519 9 is_stmt 1 view .LVU709
 2834 0ce4 0810A0E1 		mov	r1, r8	@, s
 2835 0ce8 0A00A0E1 		mov	r0, r10	@, tmp257
 2836 0cec FEFFFFEB 		bl	printf		@
 2837              	.LVL172:
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2838              		.loc 1 521 9 view .LVU710
 2839              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2840              		.loc 1 521 39 is_stmt 0 view .LVU711
 2841 0cf0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2842              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2843              		.loc 1 521 9 view .LVU712
 2844 0cf4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2845 0cf8 450000DA 		ble	.L153		@,
 2846              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2847              		.loc 1 523 21 view .LVU713
 2848 0cfc 53CADFED 		vldr.32	s25, .L180+8	@ tmp200,
 2849              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2850              		.loc 1 537 33 view .LVU714
 2851 0d00 53BA9FED 		vldr.32	s22, .L180+12	@ tmp253,
 2852              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2853              		.loc 1 535 24 view .LVU715
 2854 0d04 53AADFED 		vldr.32	s21, .L180+16	@ tmp254,
 2855 0d08 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2856              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2857              		.loc 1 521 15 view .LVU716
 2858 0d0c 0060A0E3 		mov	r6, #0	@ w,
 2859              	.LVL173:
 2860              	.L160:
 523:armwave.c     **** 
 2861              		.loc 1 523 13 is_stmt 1 view .LVU717
 2862              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2863              		.loc 1 523 21 is_stmt 0 view .LVU718
 2864 0d10 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2865 0d14 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2866              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2867              		.loc 1 525 13 view .LVU719
 2868 0d18 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2869              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2870              		.loc 1 523 21 view .LVU720
 2871 0d1c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2872 0d20 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2873              	.LVL174:
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2874              		.loc 1 525 13 is_stmt 1 view .LVU721
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2875              		.loc 1 525 13 is_stmt 0 view .LVU722
 2876 0d24 370000DA 		ble	.L154		@,
 2877 0d28 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2878              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2879              		.loc 1 540 113 view .LVU723
 2880 0d2c 4AAA9FED 		vldr.32	s20, .L180+20	@ tmp229,
 2881 0d30 4A8ADFED 		vldr.32	s17, .L180+24	@ tmp230,
 2882              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2883              		.loc 1 525 19 view .LVU724
 2884 0d34 0040A0E3 		mov	r4, #0	@ x,
 2885              	.LVL175:
 2886              	.L159:
 526:armwave.c     ****                 noise *= noise;
 2887              		.loc 1 526 17 is_stmt 1 view .LVU725
 2888              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2889              		.loc 1 526 28 is_stmt 0 view .LVU726
 2890 0d38 FEFFFFEB 		bl	rand		@
 2891              	.LVL176:
 2892              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2893              		.loc 1 526 35 view .LVU727
 2894 0d3c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2895              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2896              		.loc 1 526 45 view .LVU728
 2897 0d40 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2898 0d44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2899              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2900              		.loc 1 526 24 view .LVU729
 2901 0d48 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2902              	.LVL177:
 527:armwave.c     ****                 noise *= noise;
 2903              		.loc 1 527 17 is_stmt 1 view .LVU730
 2904              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 2905              		.loc 1 527 23 is_stmt 0 view .LVU731
 2906 0d4c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2907              	.LVL178:
 528:armwave.c     ****                 noise *= noise;
 2908              		.loc 1 528 17 is_stmt 1 view .LVU732
 2909              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2910              		.loc 1 528 23 is_stmt 0 view .LVU733
 2911 0d50 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2912              	.LVL179:
 529:armwave.c     **** 
 2913              		.loc 1 529 17 is_stmt 1 view .LVU734
 2914              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     **** 
 2915              		.loc 1 529 23 is_stmt 0 view .LVU735
 2916 0d54 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2917              	.LVL180:
 531:armwave.c     ****                     noise = -noise;
 2918              		.loc 1 531 17 is_stmt 1 view .LVU736
 2919              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2920              		.loc 1 531 21 is_stmt 0 view .LVU737
 2921 0d58 FEFFFFEB 		bl	rand		@
 2922              	.LVL181:
 532:armwave.c     **** 
 2923              		.loc 1 532 21 is_stmt 1 view .LVU738
 2924              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2925              		.loc 1 531 19 is_stmt 0 view .LVU739
 2926 0d5c 020910E3 		tst	r0, #32768	@,
 2927              	@ armwave.c:532:                     noise = -noise;
 532:armwave.c     **** 
 2928              		.loc 1 532 27 view .LVU740
 2929 0d60 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2930              	.LVL182:
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2931              		.loc 1 534 17 is_stmt 1 view .LVU741
 535:armwave.c     **** 
 2932              		.loc 1 535 17 view .LVU742
 2933              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2934              		.loc 1 535 27 is_stmt 0 view .LVU743
 2935 0d64 FEFFFFEB 		bl	rand		@
 2936              	.LVL183:
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2937              		.loc 1 537 17 is_stmt 1 view .LVU744
 2938              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2939              		.loc 1 537 45 is_stmt 0 view .LVU745
 2940 0d68 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2941              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2942              		.loc 1 537 33 view .LVU746
 2943 0d6c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2944              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2945              		.loc 1 537 45 view .LVU747
 2946 0d70 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2947              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2948              		.loc 1 537 33 view .LVU748
 2949 0d74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2950              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2951              		.loc 1 537 45 view .LVU749
 2952 0d78 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2953              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2954              		.loc 1 537 33 view .LVU750
 2955 0d7c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2956              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2957              		.loc 1 535 34 view .LVU751
 2958 0d80 7000FFE6 		uxth	r0, r0	@ tmp214,
 2959              	.LVL184:
 2960              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2961              		.loc 1 535 44 view .LVU752
 2962 0d84 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2963 0d88 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2964              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2965              		.loc 1 535 24 view .LVU753
 2966 0d8c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2967              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2968              		.loc 1 537 77 view .LVU754
 2969 0d90 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2970              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2971              		.loc 1 537 22 view .LVU755
 2972 0d94 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2973 0d98 FEFFFFEB 		bl	sin		@
 2974              	.LVL185:
 2975              		.loc 1 540 17 is_stmt 1 view .LVU756
 2976              	@ armwave.c:534:                 noise += 1.0f;
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2977              		.loc 1 534 23 is_stmt 0 view .LVU757
 2978 0d9c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2979              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2980              		.loc 1 540 104 view .LVU758
 2981 0da0 0010A0E3 		mov	r1, #0	@ iftmp.24_50,
 2982              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2983              		.loc 1 537 98 view .LVU759
 2984 0da4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2985              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2986              		.loc 1 537 87 view .LVU760
 2987 0da8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2988              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2989              		.loc 1 537 98 view .LVU761
 2990 0dac 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2991              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2992              		.loc 1 537 19 view .LVU762
 2993 0db0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2994              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2995              		.loc 1 540 113 view .LVU763
 2996 0db4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2997 0db8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2998 0dbc C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2999 0dc0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3000 0dc4 050000DA 		ble	.L156		@,
 3001              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3002              		.loc 1 540 104 discriminator 1 view .LVU764
 3003 0dc8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3004 0dcc FF10A0E3 		mov	r1, #255	@ iftmp.24_50,
 3005 0dd0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3006 0dd4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3007 0dd8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3008 0ddc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_50, %sfp
 3009              	.L156:
 3010              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3011              		.loc 1 540 57 discriminator 12 view .LVU765
 3012 0de0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3013              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3014              		.loc 1 540 102 discriminator 12 view .LVU766
 3015 0de4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3016 0de8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3017 0dec 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3018              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3019              		.loc 1 525 58 discriminator 12 view .LVU767
 3020 0df0 014084E2 		add	r4, r4, #1	@ x, x,
 3021              	.LVL186:
 3022              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3023              		.loc 1 540 102 discriminator 12 view .LVU768
 3024 0df4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.24_50, *_40
 3025              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3026              		.loc 1 525 43 discriminator 12 view .LVU769
 3027 0df8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3028              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3029              		.loc 1 525 13 discriminator 12 view .LVU770
 3030 0dfc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3031 0e00 CCFFFFCA 		bgt	.L159		@,
 3032 0e04 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3033              	.LVL187:
 3034              	.L154:
 3035              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3036              		.loc 1 521 48 discriminator 2 view .LVU771
 3037 0e08 016086E2 		add	r6, r6, #1	@ w, w,
 3038              	.LVL188:
 3039              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3040              		.loc 1 521 9 discriminator 2 view .LVU772
 3041 0e0c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3042 0e10 BEFFFFBA 		blt	.L160		@,
 3043              	.LVL189:
 3044              	.L153:
 541:armwave.c     ****             }
 542:armwave.c     ****         }
 543:armwave.c     **** 
 544:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3045              		.loc 1 544 9 is_stmt 1 discriminator 2 view .LVU773
 3046              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3047              		.loc 1 544 46 is_stmt 0 discriminator 2 view .LVU774
 3048 0e14 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3049              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3050              		.loc 1 518 27 discriminator 2 view .LVU775
 3051 0e18 018088E2 		add	r8, r8, #1	@ s, s,
 3052              	.LVL190:
 3053              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3054              		.loc 1 518 5 discriminator 2 view .LVU776
 3055 0e1c 080059E1 		cmp	r9, r8	@ sets, s
 3056              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3057              		.loc 1 544 20 discriminator 2 view .LVU777
 3058 0e20 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3059              	.LVL191:
 3060              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3061              		.loc 1 518 5 discriminator 2 view .LVU778
 3062 0e24 AEFFFF1A 		bne	.L152		@,
 3063              	.LVL192:
 3064              	.L149:
 3065              	@ armwave.c:546: }
 545:armwave.c     ****     }
 546:armwave.c     **** }
 3066              		.loc 1 546 1 view .LVU779
 3067 0e28 08D08DE2 		add	sp, sp, #8	@,,
 3068              		.cfi_remember_state
 3069              		.cfi_def_cfa_offset 80
 3070              		@ sp needed	@
 3071 0e2c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3072              		.cfi_restore 90
 3073              		.cfi_restore 91
 3074              		.cfi_restore 88
 3075              		.cfi_restore 89
 3076              		.cfi_restore 86
 3077              		.cfi_restore 87
 3078              		.cfi_restore 84
 3079              		.cfi_restore 85
 3080              		.cfi_restore 82
 3081              		.cfi_restore 83
 3082              		.cfi_restore 80
 3083              		.cfi_restore 81
 3084              		.cfi_def_cfa_offset 32
 3085              	.LVL193:
 3086              		.loc 1 546 1 view .LVU780
 3087 0e30 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3088              	.LVL194:
 3089              	.L179:
 3090              		.cfi_restore_state
 3091              	.LBB48:
 3092              	.LBB45:
 466:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3093              		.loc 1 466 9 is_stmt 1 view .LVU781
 3094 0e34 940901E0 		mul	r1, r4, r9	@, _85, sets
 3095 0e38 0920A0E1 		mov	r2, r9	@, sets
 3096 0e3c 28009FE5 		ldr	r0, .L180+36	@,
 3097 0e40 FEFFFFEB 		bl	printf		@
 3098              	.LVL195:
 468:armwave.c     ****     }
 3099              		.loc 1 468 9 view .LVU782
 3100 0e44 9FFFFFEA 		b	.L151		@
 3101              	.L181:
 3102              		.align	2
 3103              	.L180:
 3104 0e48 0000803F 		.word	1065353216
 3105 0e4c 00007F43 		.word	1132396544
 3106 0e50 0000003F 		.word	1056964608
 3107 0e54 C3F5C840 		.word	1086911939
 3108 0e58 38FFC74A 		.word	1254620984
 3109 0e5c 0000FE42 		.word	1123942400
 3110 0e60 00000043 		.word	1124073472
 3111 0e64 00000000 		.word	g_armwave_state
 3112 0e68 7C020000 		.word	.LC19
 3113 0e6c D4010000 		.word	.LC17
 3114              	.LBE45:
 3115              	.LBE48:
 3116              		.cfi_endproc
 3117              	.LFE75:
 3119              		.align	2
 3120              		.global	armwave_cleanup
 3121              		.syntax unified
 3122              		.arm
 3123              		.fpu vfp
 3125              	armwave_cleanup:
 3126              	.LFB76:
 547:armwave.c     **** 
 548:armwave.c     **** /*
 549:armwave.c     ****  * Make a test square waveform.
 550:armwave.c     ****  *
 551:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 552:armwave.c     ****  */
 553:armwave.c     **** #if 0
 554:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 555:armwave.c     **** {
 556:armwave.c     ****     uint8_t v;
 557:armwave.c     ****     float noise, xnoise;
 558:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 559:armwave.c     ****     int w, x;
 560:armwave.c     **** 
 561:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 562:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 563:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     **** 
 568:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 569:armwave.c     ****                 noise = -noise;
 570:armwave.c     **** 
 571:armwave.c     ****             //noise += 1.0f;
 572:armwave.c     **** 
 573:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 574:armwave.c     ****                 new_level = 0.2f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 576:armwave.c     ****                 new_level = 0.8f;
 577:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 578:armwave.c     ****                 new_level = 0.2f;
 579:armwave.c     ****             } else {
 580:armwave.c     ****                 new_level = 0.8f;
 581:armwave.c     ****             }
 582:armwave.c     **** 
 583:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 584:armwave.c     **** 
 585:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 586:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 587:armwave.c     ****         }
 588:armwave.c     ****     }
 589:armwave.c     **** }
 590:armwave.c     **** #endif
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_cleanup()
 596:armwave.c     **** {
 3127              		.loc 1 596 1 view -0
 3128              		.cfi_startproc
 3129              		@ args = 0, pretend = 0, frame = 0
 3130              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3131              		.loc 1 597 5 view .LVU784
 3132              	@ armwave.c:596: {
 596:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3133              		.loc 1 596 1 is_stmt 0 view .LVU785
 3134 0e70 10402DE9 		push	{r4, lr}	@
 3135              		.cfi_def_cfa_offset 8
 3136              		.cfi_offset 4, -8
 3137              		.cfi_offset 14, -4
 3138              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3139              		.loc 1 597 25 view .LVU786
 3140 0e74 34409FE5 		ldr	r4, .L184	@ tmp114,
 3141              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3142              		.loc 1 597 5 view .LVU787
 3143 0e78 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3144 0e7c FEFFFFEB 		bl	free		@
 3145              	.LVL196:
 598:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3146              		.loc 1 598 5 is_stmt 1 view .LVU788
 3147 0e80 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3148 0e84 FEFFFFEB 		bl	free		@
 3149              	.LVL197:
 599:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3150              		.loc 1 599 5 view .LVU789
 3151 0e88 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3152 0e8c FEFFFFEB 		bl	free		@
 3153              	.LVL198:
 600:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3154              		.loc 1 600 5 view .LVU790
 3155 0e90 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3156 0e94 FEFFFFEB 		bl	free		@
 3157              	.LVL199:
 601:armwave.c     **** 
 602:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3158              		.loc 1 602 5 view .LVU791
 3159              	@ armwave.c:602:     g_armwave_state.out_pixbuf = NULL;
 3160              		.loc 1 602 32 is_stmt 0 view .LVU792
 3161 0e98 0030A0E3 		mov	r3, #0	@ tmp123,
 3162 0e9c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 603:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3163              		.loc 1 603 5 is_stmt 1 view .LVU793
 3164              	@ armwave.c:603:     g_armwave_state.ch1_buffer = NULL;
 3165              		.loc 1 603 32 is_stmt 0 view .LVU794
 3166 0ea0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 604:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3167              		.loc 1 604 5 is_stmt 1 view .LVU795
 3168              	@ armwave.c:604:     g_armwave_state.xcoord_to_xpixel = NULL;
 3169              		.loc 1 604 38 is_stmt 0 view .LVU796
 3170 0ea4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 605:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3171              		.loc 1 605 5 is_stmt 1 view .LVU797
 3172              	@ armwave.c:605:     g_armwave_state.test_wave_buffer = NULL;
 3173              		.loc 1 605 38 is_stmt 0 view .LVU798
 3174 0ea8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3175              	@ armwave.c:606: }
 606:armwave.c     **** }
 3176              		.loc 1 606 1 view .LVU799
 3177 0eac 1080BDE8 		pop	{r4, pc}	@
 3178              	.L185:
 3179              		.align	2
 3180              	.L184:
 3181 0eb0 00000000 		.word	g_armwave_state
 3182              		.cfi_endproc
 3183              	.LFE76:
 3185              		.comm	gamma_table,256,4
 3186              		.comm	g_armwave_state,136,4
 3187              		.section	.rodata
 3188              		.align	2
 3189              		.set	.LANCHOR0,. + 0
 3192              	__PRETTY_FUNCTION__.17126:
 3193 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3193      6176655F 
 3193      73657475 
 3193      705F7265 
 3193      6E646572 
 3194 0015 000000   		.space	3
 3197              	__PRETTY_FUNCTION__.17130:
 3198 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3198      6176655F 
 3198      7365745F 
 3198      77617665 
 3198      5F706F69 
 3199 0031 000000   		.space	3
 3202              	__PRETTY_FUNCTION__.17137:
 3203 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3203      6176655F 
 3203      7365745F 
 3203      77617665 
 3203      5F706F69 
 3204              		.section	.rodata.str1.4,"aMS",%progbits,1
 3205              		.align	2
 3206              	.LC0:
 3207 0000 76302E30 		.ascii	"v0.0.1\000"
 3207      2E3100
 3208 0007 00       		.space	1
 3209              	.LC1:
 3210 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3210      61766520 
 3210      76657273 
 3210      696F6E3A 
 3210      2025730A 
 3211 001d 000000   		.space	3
 3212              	.LC2:
 3213 0020 77625F65 		.ascii	"wb_end=%d\012\000"
 3213      6E643D25 
 3213      640A00
 3214 002b 00       		.space	1
 3215              	.LC3:
 3216 002c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3216      20653D25 
 3216      6420773D 
 3216      25642077 
 3216      733D2564 
 3217              	.LC4:
 3218 0058 61726D77 		.ascii	"armwave.c\000"
 3218      6176652E 
 3218      6300
 3219 0062 0000     		.space	2
 3220              	.LC5:
 3221 0064 73746172 		.ascii	"start_point < end_point\000"
 3221      745F706F 
 3221      696E7420 
 3221      3C20656E 
 3221      645F706F 
 3222              	.LC6:
 3223 007c 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3223      7566665F 
 3223      73697A65 
 3223      3D25642C 
 3223      20636D70 
 3224 00af 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3224      5F776964 
 3224      74683D25 
 3224      642C2077 
 3224      6176655F 
 3225 00d9 000000   		.space	3
 3226              	.LC7:
 3227 00dc 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 3227      6F632066 
 3227      61696C75 
 3227      72652061 
 3227      6C6C6F63 
 3228 010f 2E636831 		.ascii	".ch1_buffer)\012\000"
 3228      5F627566 
 3228      66657229 
 3228      0A00
 3229 011d 000000   		.space	3
 3230              	.LC8:
 3231 0120 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3231      3A203078 
 3231      25303878 
 3231      20307825 
 3231      30387820 
 3232              	.LC9:
 3233 0144 77617665 		.ascii	"wave_buffer != NULL\000"
 3233      5F627566 
 3233      66657220 
 3233      213D204E 
 3233      554C4C00 
 3234              	.LC10:
 3235 0158 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3235      6176655F 
 3235      7365745F 
 3235      77617665 
 3235      5F706F69 
 3236 018b 78636565 		.ascii	"xceeded\000"
 3236      64656400 
 3237 0193 00       		.space	1
 3238              	.LC11:
 3239 0194 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3239      5F627566 
 3239      6665725F 
 3239      70747220 
 3239      213D2030 
 3240 01a9 000000   		.space	3
 3241              	.LC12:
 3242 01ac 776200   		.ascii	"wb\000"
 3243 01af 00       		.space	1
 3244              	.LC13:
 3245 01b0 50330A00 		.ascii	"P3\012\000"
 3246              	.LC14:
 3247 01b4 25642025 		.ascii	"%d %d\012\000"
 3247      640A00
 3248 01bb 00       		.space	1
 3249              	.LC15:
 3250 01bc 3235350A 		.ascii	"255\012\000"
 3250      00
 3251 01c1 000000   		.space	3
 3252              	.LC16:
 3253 01c4 25336420 		.ascii	"%3d %3d %3d\012\000"
 3253      25336420 
 3253      2533640A 
 3253      00
 3254 01d1 000000   		.space	3
 3255              	.LC17:
 3256 01d4 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3256      6176655F 
 3256      74657374 
 3256      5F627566 
 3256      6665725F 
 3257 0207 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3257      20627566 
 3257      66657220 
 3257      28256420 
 3257      62797465 
 3258              	.LC18:
 3259 0228 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3259      6176655F 
 3259      66696C6C 
 3259      5F706978 
 3259      6275665F 
 3260 025b 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3260      20666169 
 3260      6C65642C 
 3260      20726574 
 3260      75726E69 
 3261 027a 0000     		.space	2
 3262              	.LC19:
 3263 027c 43616C63 		.ascii	"Calculating test set %d\012\000"
 3263      756C6174 
 3263      696E6720 
 3263      74657374 
 3263      20736574 
 3264              		.text
 3265              	.Letext0:
 3266              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3267              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3268              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3269              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3270              		.file 7 "/usr/include/stdio.h"
 3271              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3272              		.file 9 "/usr/include/errno.h"
 3273              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3274              		.file 11 "/usr/include/unistd.h"
 3275              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3276              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3277              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3278              		.file 15 "/usr/include/math.h"
 3279              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3280              		.file 17 "/usr/include/time.h"
 3281              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3282              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3283              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3284              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3285              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3286              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3287              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3288              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3289              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3290              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3291              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3292              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3293              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3294              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3295              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3296              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3297              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3298              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3299              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3300              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3301              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3302              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3303              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3304              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3305              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3306              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3307              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3308              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3309              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3310              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3311              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3312              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3313              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3314              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3315              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3316              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3317              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3318              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3319              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3320              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3321              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3322              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3323              		.file 60 "/usr/local/include/python3.8/context.h"
 3324              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3325              		.file 62 "/usr/local/include/python3.8/code.h"
 3326              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3327              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3328              		.file 65 "/usr/local/include/python3.8/import.h"
 3329              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3330              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3331              		.file 68 "/usr/include/malloc.h"
 3332              		.file 69 "armwave.h"
 3333              		.file 70 "/usr/include/stdlib.h"
 3334              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3335              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3336              		.file 73 "<built-in>"
 3337              		.file 74 "/usr/include/assert.h"
