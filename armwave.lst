   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_sca
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 14D04DE2 		sub	sp, sp, #20	@,,
 249              		.cfi_def_cfa_offset 56
 250              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
 251              		.loc 1 71 40 view .LVU32
 252 00a4 8C519FE5 		ldr	r5, .L27	@ tmp283,
 253              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 254              		.loc 1 73 5 view .LVU33
 255 00a8 00008DE5 		str	r0, [sp]	@ slice_y,
 256 00ac 04108DE5 		str	r1, [sp, #4]	@ height,
 257              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 258              		.loc 1 71 64 view .LVU34
 259 00b0 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 261              		.loc 1 71 40 view .LVU35
 262 00b4 044095E5 		ldr	r4, [r5, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 264              		.loc 1 63 1 view .LVU36
 265 00b8 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 267              		.loc 1 71 64 view .LVU37
 268 00bc 930003E0 		mul	r3, r3, r0	@ tmp199, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 269              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 270              		.loc 1 73 5 view .LVU38
 271 00c0 0420A0E1 		mov	r2, r4	@, _1
 272              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 273              		.loc 1 63 1 view .LVU39
 274 00c4 0160A0E1 		mov	r6, r1	@ height, height
 275              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 276              		.loc 1 71 104 view .LVU40
 277 00c8 2334A0E1 		lsr	r3, r3, #8	@ _4, tmp199,
 278              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 279              		.loc 1 71 23 view .LVU41
 280 00cc 034084E0 		add	r4, r4, r3	@ write_buffer_base, _1, _4
 281              	.LVL7:
 282              		.loc 1 73 5 is_stmt 1 view .LVU42
 283 00d0 0410A0E1 		mov	r1, r4	@, write_buffer_base
 284              	.LVL8:
 285              		.loc 1 73 5 is_stmt 0 view .LVU43
 286 00d4 60019FE5 		ldr	r0, .L27+4	@,
 287              	.LVL9:
 288              		.loc 1 73 5 view .LVU44
 289 00d8 FEFFFFEB 		bl	printf		@
 290              	.LVL10:
  74:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
  75:armwave.c     ****         slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 291              		.loc 1 78 5 is_stmt 1 view .LVU45
 292              		.loc 1 78 5 is_stmt 0 view .LVU46
 293 00dc 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 294 00e0 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 295 00e4 510000DA 		ble	.L11		@,
 296 00e8 000056E3 		cmp	r6, #0	@ height,
 297 00ec 4F00000A 		beq	.L11		@,
 298 00f0 043047E2 		sub	r3, r7, #4	@ tmp282, slice_y,
 299 00f4 0C308DE5 		str	r3, [sp, #12]	@ tmp282, %sfp
 300              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 301              		.loc 1 78 11 view .LVU47
 302 00f8 0030A0E3 		mov	r3, #0	@ w,
 303 00fc 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 304              	.LVL11:
 305              	.L18:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 306              		.loc 1 79 9 is_stmt 1 view .LVU48
  80:armwave.c     **** 
  81:armwave.c     ****         // roll through y and render the slice into the out buffer
  82:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  83:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 83 9 view .LVU49
 308              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 309              		.loc 1 79 64 is_stmt 0 view .LVU50
 310 0100 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 311 0104 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 312 0108 0C109DE5 		ldr	r1, [sp, #12]	@ tmp282, %sfp
 313 010c 148095E5 		ldr	r8, [r5, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 314 0110 931223E0 		mla	r3, r3, r2, r1	@ tmp209, g_armwave_state.wave_stride, w, tmp282
 315              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
 316              		.loc 1 83 16 view .LVU51
 317 0114 0000A0E3 		mov	r0, #0	@ yy,
 318 0118 038088E0 		add	r8, r8, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp209
 319              	.LVL12:
 320              	.L17:
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 321              		.loc 1 84 13 is_stmt 1 view .LVU52
  85:armwave.c     **** 
  86:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  87:armwave.c     ****                 scale_value = word & 0xff;
  88:armwave.c     ****                 
  89:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  90:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
  92:armwave.c     **** 
  93:armwave.c     ****                 // Keep math in integer where possible using the compound X multiplier and a shift 
  94:armwave.c     ****                 // of X to 1/256 but this should not be an ultimate issue.
  95:armwave.c     ****                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cmp_x_bitdepth_sca
 322              		.loc 1 95 17 view .LVU53
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 323              		.loc 1 96 17 view .LVU54
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 95 17 view .LVU55
 325              		.loc 1 96 17 view .LVU56
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 326              		.loc 1 95 17 view .LVU57
 327              		.loc 1 96 17 view .LVU58
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 328              		.loc 1 95 17 view .LVU59
 329              		.loc 1 96 17 view .LVU60
 330              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 331              		.loc 1 84 18 is_stmt 0 view .LVU61
 332 011c 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _162, offset: 0B]
 333              	.LVL13:
  86:armwave.c     ****                 scale_value = word & 0xff;
 334              		.loc 1 86 13 is_stmt 1 view .LVU62
  87:armwave.c     ****                 
 335              		.loc 1 87 17 view .LVU63
  90:armwave.c     ****                     continue;
 336              		.loc 1 90 17 view .LVU64
 337              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 338              		.loc 1 95 64 is_stmt 0 view .LVU65
 339 0120 019080E2 		add	r9, r0, #1	@ tmp236, yy,
 340              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 341              		.loc 1 90 20 view .LVU66
 342 0124 FF1013E2 		ands	r1, r3, #255	@ scale_value, word,
 343 0128 01A0A003 		moveq	r10, #1	@ tmp212,
 344 012c 00A0A013 		movne	r10, #0	@ tmp212,
 345              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 346              		.loc 1 90 19 view .LVU67
 347 0130 FF0051E3 		cmp	r1, #255	@ scale_value,
 348 0134 01A08A03 		orreq	r10, r10, #1	@,, tmp217, tmp212
 349 0138 00005AE3 		cmp	r10, #0	@ tmp217,
 350              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 351              		.loc 1 95 64 view .LVU68
 352 013c 027080E2 		add	r7, r0, #2	@ tmp254, yy,
 353 0140 03E080E2 		add	lr, r0, #3	@ tmp270, yy,
 354              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****                 word >>= 8;
 355              		.loc 1 97 22 view .LVU69
 356 0144 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 357 0148 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 358              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 359              		.loc 1 90 19 view .LVU70
 360 014c 2E00001A 		bne	.L20		@,
 361              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 362              		.loc 1 95 64 view .LVU71
 363 0150 24A095E5 		ldr	r10, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 364              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 365              		.loc 1 90 20 view .LVU72
 366 0154 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 367 0158 01B0A003 		moveq	fp, #1	@ tmp229,
 368              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 369              		.loc 1 95 64 view .LVU73
 370 015c 9A000AE0 		mul	r10, r10, r0	@ tmp219, g_armwave_state.cmp_x_bitdepth_scale, yy
 371              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 372              		.loc 1 90 20 view .LVU74
 373 0160 00B0A013 		movne	fp, #0	@ tmp229,
 374              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 375              		.loc 1 90 19 view .LVU75
 376 0164 FF005CE3 		cmp	ip, #255	@ scale_value,
 377 0168 01B08B03 		orreq	fp, fp, #1	@,, tmp234, tmp229
 378              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 379              		.loc 1 96 47 view .LVU76
 380 016c 2A1481E0 		add	r1, r1, r10, lsr #8	@ tmp222, scale_value, tmp219,
 381              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 382              		.loc 1 90 19 view .LVU77
 383 0170 00005BE3 		cmp	fp, #0	@ tmp234,
 384              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 385              		.loc 1 96 47 view .LVU78
 386 0174 01A0D4E7 		ldrb	r10, [r4, r1]	@ zero_extendqisi2	@ *_71, *_71
 387 0178 01A08AE2 		add	r10, r10, #1	@ tmp225, *_71,
 388 017c 01A0C4E7 		strb	r10, [r4, r1]	@ tmp225, *_71
 389              	.LVL14:
 390              		.loc 1 97 17 is_stmt 1 view .LVU79
  87:armwave.c     ****                 
 391              		.loc 1 87 17 view .LVU80
  90:armwave.c     ****                     continue;
 392              		.loc 1 90 17 view .LVU81
 393              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 394              		.loc 1 90 19 is_stmt 0 view .LVU82
 395 0180 2100001A 		bne	.L20		@,
 396              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 397              		.loc 1 95 64 view .LVU83
 398 0184 241095E5 		ldr	r1, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 399              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 400              		.loc 1 90 20 view .LVU84
 401 0188 FF2012E2 		ands	r2, r2, #255	@ scale_value, word,
 402 018c 01A0A003 		moveq	r10, #1	@ tmp247,
 403              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 404              		.loc 1 95 64 view .LVU85
 405 0190 910901E0 		mul	r1, r1, r9	@ tmp237, g_armwave_state.cmp_x_bitdepth_scale, tmp236
 406              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 407              		.loc 1 90 20 view .LVU86
 408 0194 00A0A013 		movne	r10, #0	@ tmp247,
 409              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 410              		.loc 1 90 19 view .LVU87
 411 0198 FF0052E3 		cmp	r2, #255	@ scale_value,
 412 019c 0A90A011 		movne	r9, r10	@, tmp252, tmp247
 413 01a0 01908A03 		orreq	r9, r10, #1	@,, tmp252, tmp247
 414              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 415              		.loc 1 96 47 view .LVU88
 416 01a4 21148CE0 		add	r1, ip, r1, lsr #8	@ tmp240, scale_value, tmp237,
 417              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 418              		.loc 1 90 19 view .LVU89
 419 01a8 000059E3 		cmp	r9, #0	@ tmp252,
 420              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 421              		.loc 1 96 47 view .LVU90
 422 01ac 01C0D4E7 		ldrb	ip, [r4, r1]	@ zero_extendqisi2	@ *_98, *_98
 423 01b0 01C08CE2 		add	ip, ip, #1	@ tmp243, *_98,
 424 01b4 01C0C4E7 		strb	ip, [r4, r1]	@ tmp243, *_98
 425              		.loc 1 97 17 is_stmt 1 view .LVU91
 426              	.LVL15:
  87:armwave.c     ****                 
 427              		.loc 1 87 17 view .LVU92
  90:armwave.c     ****                     continue;
 428              		.loc 1 90 17 view .LVU93
 429              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 430              		.loc 1 90 19 is_stmt 0 view .LVU94
 431 01b8 1300001A 		bne	.L20		@,
 432              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 433              		.loc 1 95 64 view .LVU95
 434 01bc 241095E5 		ldr	r1, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 435              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 436              		.loc 1 90 20 view .LVU96
 437 01c0 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 438              	.LVL16:
  90:armwave.c     ****                     continue;
 439              		.loc 1 90 20 view .LVU97
 440 01c4 01C0A003 		moveq	ip, #1	@ tmp264,
 441              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 442              		.loc 1 95 64 view .LVU98
 443 01c8 910707E0 		mul	r7, r1, r7	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, tmp254
 444              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 445              		.loc 1 90 20 view .LVU99
 446 01cc 00C0A013 		movne	ip, #0	@ tmp264,
 447              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 448              		.loc 1 90 19 view .LVU100
 449 01d0 FF0053E3 		cmp	r3, #255	@ word,
 450 01d4 0C10A011 		movne	r1, ip	@, tmp269, tmp264
 451 01d8 01108C03 		orreq	r1, ip, #1	@,, tmp269, tmp264
 452              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 453              		.loc 1 96 47 view .LVU101
 454 01dc 272482E0 		add	r2, r2, r7, lsr #8	@ tmp258, scale_value, tmp255,
 455              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 456              		.loc 1 90 19 view .LVU102
 457 01e0 000051E3 		cmp	r1, #0	@ tmp269,
 458              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 459              		.loc 1 96 47 view .LVU103
 460 01e4 0210D4E7 		ldrb	r1, [r4, r2]	@ zero_extendqisi2	@ *_125, *_125
 461 01e8 011081E2 		add	r1, r1, #1	@ tmp261, *_125,
 462 01ec 0210C4E7 		strb	r1, [r4, r2]	@ tmp261, *_125
 463              		.loc 1 97 17 is_stmt 1 view .LVU104
 464              	.LVL17:
  87:armwave.c     ****                 
 465              		.loc 1 87 17 view .LVU105
  90:armwave.c     ****                     continue;
 466              		.loc 1 90 17 view .LVU106
 467              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 468              		.loc 1 90 19 is_stmt 0 view .LVU107
 469 01f0 0500001A 		bne	.L20		@,
 470              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 471              		.loc 1 95 64 view .LVU108
 472 01f4 242095E5 		ldr	r2, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 473 01f8 920E0EE0 		mul	lr, r2, lr	@ tmp272, g_armwave_state.cmp_x_bitdepth_scale, tmp270
 474              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 475              		.loc 1 96 47 view .LVU109
 476 01fc 2E3483E0 		add	r3, r3, lr, lsr #8	@ tmp275, word, tmp272,
 477 0200 0320D4E7 		ldrb	r2, [r4, r3]	@ zero_extendqisi2	@ *_152, *_152
 478 0204 012082E2 		add	r2, r2, #1	@ tmp278, *_152,
 479 0208 0320C4E7 		strb	r2, [r4, r3]	@ tmp278, *_152
 480              		.loc 1 97 17 is_stmt 1 view .LVU110
 481              	.LVL18:
 482              	.L20:
 483              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 484              		.loc 1 83 37 is_stmt 0 view .LVU111
 485 020c 040080E2 		add	r0, r0, #4	@ yy, yy,
 486              	.LVL19:
 487              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 488              		.loc 1 83 9 view .LVU112
 489 0210 000056E1 		cmp	r6, r0	@ height, yy
 490 0214 C0FFFF8A 		bhi	.L17		@,
 491              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 492              		.loc 1 78 44 view .LVU113
 493 0218 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 494              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 495              		.loc 1 78 5 view .LVU114
 496 021c 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 497              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 498              		.loc 1 78 44 view .LVU115
 499 0220 012082E2 		add	r2, r2, #1	@ w, w,
 500              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 501              		.loc 1 78 5 view .LVU116
 502 0224 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 503              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 504              		.loc 1 78 44 view .LVU117
 505 0228 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 506              	.LVL20:
 507              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 508              		.loc 1 78 5 view .LVU118
 509 022c B3FFFFBA 		blt	.L18		@,
 510              	.LVL21:
 511              	.L11:
 512              	@ armwave.c:101: }
  98:armwave.c     ****             }
  99:armwave.c     ****         }
 100:armwave.c     ****     }
 101:armwave.c     **** }
 513              		.loc 1 101 1 view .LVU119
 514 0230 14D08DE2 		add	sp, sp, #20	@,,
 515              		.cfi_def_cfa_offset 36
 516              		@ sp needed	@
 517 0234 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 518              	.LVL22:
 519              	.L28:
 520              		.loc 1 101 1 view .LVU120
 521              		.align	2
 522              	.L27:
 523 0238 00000000 		.word	g_armwave_state
 524 023c 20000000 		.word	.LC2
 525              		.cfi_endproc
 526              	.LFE59:
 528              		.align	2
 529              		.global	armwave_fill_pixbuf_scaled
 530              		.syntax unified
 531              		.arm
 532              		.fpu vfp
 534              	armwave_fill_pixbuf_scaled:
 535              	.LVL23:
 536              	.LFB60:
 102:armwave.c     **** 
 103:armwave.c     **** #if 0
 104:armwave.c     **** /*
 105:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 106:armwave.c     ****  */
 107:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 108:armwave.c     **** {
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 110:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 111:armwave.c     ****     uint8_t r, g, b, value;
 112:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 114:armwave.c     ****     uint32_t offset;
 115:armwave.c     **** 
 116:armwave.c     ****     assert(out_buffer != NULL);
 117:armwave.c     **** 
 118:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 119:armwave.c     **** 
 120:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 121:armwave.c     **** 
 122:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 124:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 125:armwave.c     ****         // most normal waveforms.
 126:armwave.c     ****         wave_word = *base_32ptr++;
 127:armwave.c     **** 
 128:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 130:armwave.c     ****                 value = wave_word & 0xff;
 131:armwave.c     ****                 wave_word >>= 8;
 132:armwave.c     **** 
 133:armwave.c     ****                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 138:armwave.c     ****                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 141:armwave.c     **** 
 142:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 143:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 145:armwave.c     ****                     // Is there a better way?
 146:armwave.c     ****                     nsub = n + i;
 147:armwave.c     ****                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 152:armwave.c     ****             }
 153:armwave.c     ****         } 
 154:armwave.c     ****     }
 155:armwave.c     **** }
 156:armwave.c     **** #endif
 157:armwave.c     **** 
 158:armwave.c     **** /*
 159:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 160:armwave.c     ****  * Rows are repeated as necessary.
 161:armwave.c     ****  */
 162:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 163:armwave.c     **** {
 537              		.loc 1 163 1 is_stmt 1 view -0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 8
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 164:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 541              		.loc 1 164 5 view .LVU122
 165:armwave.c     ****     // uint32_t ysub;
 166:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 542              		.loc 1 166 5 view .LVU123
 167:armwave.c     ****     uint8_t r, g, b, value; 
 543              		.loc 1 167 5 view .LVU124
 168:armwave.c     ****     // uint8_t row;
 169:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 544              		.loc 1 169 5 view .LVU125
 545              	@ armwave.c:163: {
 163:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 546              		.loc 1 163 1 is_stmt 0 view .LVU126
 547 0240 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 548              		.cfi_def_cfa_offset 36
 549              		.cfi_offset 4, -36
 550              		.cfi_offset 5, -32
 551              		.cfi_offset 6, -28
 552              		.cfi_offset 7, -24
 553              		.cfi_offset 8, -20
 554              		.cfi_offset 9, -16
 555              		.cfi_offset 10, -12
 556              		.cfi_offset 11, -8
 557              		.cfi_offset 14, -4
 558              	@ armwave.c:173:     assert(out_buffer != NULL);
 170:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 171:armwave.c     ****     uint32_t offset;
 172:armwave.c     **** 
 173:armwave.c     ****     assert(out_buffer != NULL);
 559              		.loc 1 173 5 view .LVU127
 560 0244 000050E3 		cmp	r0, #0	@ out_buffer
 561              	@ armwave.c:169:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 169:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 562              		.loc 1 169 15 view .LVU128
 563 0248 44619FE5 		ldr	r6, .L51	@ tmp203,
 564              	@ armwave.c:163: {
 163:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 565              		.loc 1 163 1 view .LVU129
 566 024c 0CD04DE2 		sub	sp, sp, #12	@,,
 567              		.cfi_def_cfa_offset 48
 568              	@ armwave.c:169:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 169:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 569              		.loc 1 169 15 view .LVU130
 570 0250 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 571              	.LVL24:
 170:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 572              		.loc 1 170 5 is_stmt 1 view .LVU131
 171:armwave.c     **** 
 573              		.loc 1 171 5 view .LVU132
 574              		.loc 1 173 5 view .LVU133
 575 0254 4900000A 		beq	.L48		@,
 174:armwave.c     **** 
 175:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 576              		.loc 1 175 5 view .LVU134
 577              	@ armwave.c:175:     npix = g_armwave_state.target_width * 256; 
 578              		.loc 1 175 10 is_stmt 0 view .LVU135
 579 0258 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 580 025c 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 581              	.LVL25:
 176:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 177:armwave.c     **** 
 178:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 582              		.loc 1 178 5 is_stmt 1 view .LVU136
 583              		.loc 1 178 5 is_stmt 0 view .LVU137
 584 0260 000058E3 		cmp	r8, #0	@ npix,
 585 0264 0C0000DA 		ble	.L29		@,
 586              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 179:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 180:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 181:armwave.c     ****         // most normal waveforms.
 182:armwave.c     ****         wave_word = *base_32ptr++;
 183:armwave.c     **** 
 184:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 185:armwave.c     ****             for(w = 0; w < 4; w++) {
 186:armwave.c     ****                 value = wave_word & 0xff;
 187:armwave.c     ****                 wave_word >>= 8;
 188:armwave.c     **** 
 189:armwave.c     ****                 if(value != 0) {
 190:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 191:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 587              		.loc 1 191 52 view .LVU138
 588 0268 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 589              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 590              		.loc 1 190 52 view .LVU139
 591 026c FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 592              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 192:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 193:armwave.c     **** 
 194:armwave.c     ****                     r = MIN(rr, 255);
 195:armwave.c     ****                     g = MIN(gg, 255);
 196:armwave.c     ****                     b = MIN(bb, 255);
 197:armwave.c     **** 
 198:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 199:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 200:armwave.c     **** 
 201:armwave.c     ****                     // Do line scaling as necessary.
 202:armwave.c     ****                     /*
 203:armwave.c     ****                     nsub = n + w;
 204:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 205:armwave.c     ****                     xx = (nsub >> 8);
 206:armwave.c     **** 
 207:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 208:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 209:armwave.c     ****                         *(out_buffer_base + offset) = word;
 210:armwave.c     ****                     }
 211:armwave.c     ****                     */
 212:armwave.c     **** 
 213:armwave.c     ****                     nsub = n + w;
 214:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 593              		.loc 1 214 57 view .LVU140
 594 0270 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 595              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 596              		.loc 1 191 52 view .LVU141
 597 0274 00308DE5 		str	r3, [sp]	@ _10, %sfp
 598              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 599              		.loc 1 192 52 view .LVU142
 600 0278 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 601              	@ armwave.c:178:     for(n = 0; n < npix; n += 4) {
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 602              		.loc 1 178 11 view .LVU143
 603 027c 0010A0E3 		mov	r1, #0	@ n,
 604              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 605              		.loc 1 192 52 view .LVU144
 606 0280 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 607              	.LVL26:
 608              	.L36:
 182:armwave.c     **** 
 609              		.loc 1 182 9 is_stmt 1 view .LVU145
 610              	@ armwave.c:182:         wave_word = *base_32ptr++;
 182:armwave.c     **** 
 611              		.loc 1 182 19 is_stmt 0 view .LVU146
 612 0284 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 613              	.LVL27:
 184:armwave.c     ****             for(w = 0; w < 4; w++) {
 614              		.loc 1 184 9 is_stmt 1 view .LVU147
 615              	@ armwave.c:184:         if(COND_UNLIKELY(wave_word != 0)) {
 184:armwave.c     ****             for(w = 0; w < 4; w++) {
 616              		.loc 1 184 11 is_stmt 0 view .LVU148
 617 0288 000053E3 		cmp	r3, #0	@ wave_word,
 618 028c 0400001A 		bne	.L49		@,
 619              	.L32:
 620              	@ armwave.c:178:     for(n = 0; n < npix; n += 4) {
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 621              		.loc 1 178 28 view .LVU149
 622 0290 041081E2 		add	r1, r1, #4	@ n, n,
 623              	.LVL28:
 624              	@ armwave.c:178:     for(n = 0; n < npix; n += 4) {
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 625              		.loc 1 178 5 view .LVU150
 626 0294 010058E1 		cmp	r8, r1	@ npix, n
 627 0298 F9FFFFCA 		bgt	.L36		@,
 628              	.LVL29:
 629              	.L29:
 630              	@ armwave.c:226: }
 215:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     xx = (nsub >> 8);
 217:armwave.c     **** 
 218:armwave.c     ****                     for(y = yy; y < ye; y++) {
 219:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 220:armwave.c     ****                         *(out_buffer_base + offset) = word;
 221:armwave.c     ****                     }
 222:armwave.c     ****                 }
 223:armwave.c     ****             }
 224:armwave.c     ****         }
 225:armwave.c     ****     }
 226:armwave.c     **** }
 631              		.loc 1 226 1 view .LVU151
 632 029c 0CD08DE2 		add	sp, sp, #12	@,,
 633              		.cfi_remember_state
 634              		.cfi_def_cfa_offset 36
 635              		@ sp needed	@
 636 02a0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 637              	.LVL30:
 638              	.L49:
 639              		.cfi_restore_state
 640              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 641              		.loc 1 189 19 view .LVU152
 642 02a4 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 643              	@ armwave.c:185:             for(w = 0; w < 4; w++) {
 185:armwave.c     ****                 value = wave_word & 0xff;
 644              		.loc 1 185 19 view .LVU153
 645 02a8 0070A0E3 		mov	r7, #0	@ w,
 646              	.LVL31:
 186:armwave.c     ****                 wave_word >>= 8;
 647              		.loc 1 186 17 is_stmt 1 view .LVU154
 187:armwave.c     **** 
 648              		.loc 1 187 17 view .LVU155
 649              	@ armwave.c:187:                 wave_word >>= 8;
 187:armwave.c     **** 
 650              		.loc 1 187 27 is_stmt 0 view .LVU156
 651 02ac 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 652              	.LVL32:
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 653              		.loc 1 189 17 is_stmt 1 view .LVU157
 654              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 655              		.loc 1 189 19 is_stmt 0 view .LVU158
 656 02b0 0500001A 		bne	.L50		@,
 657              	.L33:
 658              	@ armwave.c:185:             for(w = 0; w < 4; w++) {
 185:armwave.c     ****                 value = wave_word & 0xff;
 659              		.loc 1 185 32 view .LVU159
 660 02b4 017087E2 		add	r7, r7, #1	@ w, w,
 661              	.LVL33:
 662              	@ armwave.c:185:             for(w = 0; w < 4; w++) {
 185:armwave.c     ****                 value = wave_word & 0xff;
 663              		.loc 1 185 13 view .LVU160
 664 02b8 040057E3 		cmp	r7, #4	@ w,
 665 02bc F3FFFF0A 		beq	.L32		@,
 186:armwave.c     ****                 wave_word >>= 8;
 666              		.loc 1 186 17 is_stmt 1 view .LVU161
 667              	.LVL34:
 187:armwave.c     **** 
 668              		.loc 1 187 17 view .LVU162
 669              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 670              		.loc 1 189 19 is_stmt 0 view .LVU163
 671 02c0 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 672              	@ armwave.c:187:                 wave_word >>= 8;
 187:armwave.c     **** 
 673              		.loc 1 187 27 view .LVU164
 674 02c4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 675              	.LVL35:
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 676              		.loc 1 189 17 is_stmt 1 view .LVU165
 677              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 678              		.loc 1 189 19 is_stmt 0 view .LVU166
 679 02c8 F9FFFF0A 		beq	.L33		@,
 680              	.L50:
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 681              		.loc 1 190 21 is_stmt 1 view .LVU167
 682              	.LVL36:
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 683              		.loc 1 191 21 view .LVU168
 192:armwave.c     **** 
 684              		.loc 1 192 21 view .LVU169
 194:armwave.c     ****                     g = MIN(gg, 255);
 685              		.loc 1 194 21 view .LVU170
 195:armwave.c     ****                     b = MIN(bb, 255);
 686              		.loc 1 195 21 view .LVU171
 196:armwave.c     **** 
 687              		.loc 1 196 21 view .LVU172
 199:armwave.c     **** 
 688              		.loc 1 199 21 view .LVU173
 689              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     **** 
 690              		.loc 1 192 55 is_stmt 0 view .LVU174
 691 02cc 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 692 02d0 075081E0 		add	r5, r1, r7	@ _120, n, w
 693 02d4 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 694              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 695              		.loc 1 214 32 view .LVU175
 696 02d8 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 697              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 698              		.loc 1 215 41 view .LVU176
 699 02dc 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 700              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 701              		.loc 1 214 40 view .LVU177
 702 02e0 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 703              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 704              		.loc 1 215 41 view .LVU178
 705 02e4 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 706              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 707              		.loc 1 191 55 view .LVU179
 708 02e8 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 709              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     **** 
 710              		.loc 1 192 24 view .LVU180
 711 02ec 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 712              	.LVL37:
 713              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 714              		.loc 1 214 40 view .LVU181
 715 02f0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 716              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 717              		.loc 1 215 46 view .LVU182
 718 02f4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 719              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 720              		.loc 1 191 55 view .LVU183
 721 02f8 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 722              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 723              		.loc 1 190 55 view .LVU184
 724 02fc 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 725              	.LVL38:
 726              	@ armwave.c:196:                     b = MIN(bb, 255);
 196:armwave.c     **** 
 727              		.loc 1 196 25 view .LVU185
 728 0300 FF005AE3 		cmp	r10, #255	@ bb,
 729              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 730              		.loc 1 191 24 view .LVU186
 731 0304 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 732              	.LVL39:
 733              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 734              		.loc 1 214 40 view .LVU187
 735 0308 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 736              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 737              		.loc 1 215 46 view .LVU188
 738 030c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 739              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 740              		.loc 1 190 24 view .LVU189
 741 0310 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 742              	.LVL40:
 743              	@ armwave.c:196:                     b = MIN(bb, 255);
 196:armwave.c     **** 
 744              		.loc 1 196 25 view .LVU190
 745 0314 FFA0A0A3 		movge	r10, #255	@ bb,
 746              	.LVL41:
 747              	@ armwave.c:195:                     g = MIN(gg, 255);
 195:armwave.c     ****                     b = MIN(bb, 255);
 748              		.loc 1 195 25 view .LVU191
 749 0318 FF0054E3 		cmp	r4, #255	@ gg,
 750 031c FF40A0A3 		movge	r4, #255	@ gg,
 751              	.LVL42:
 752              	@ armwave.c:194:                     r = MIN(rr, 255);
 194:armwave.c     ****                     g = MIN(gg, 255);
 753              		.loc 1 194 25 view .LVU192
 754 0320 FF005CE3 		cmp	ip, #255	@ rr,
 755              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 756              		.loc 1 199 56 view .LVU193
 757 0324 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 758              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 759              		.loc 1 214 24 view .LVU194
 760 0328 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 761              	@ armwave.c:194:                     r = MIN(rr, 255);
 194:armwave.c     ****                     g = MIN(gg, 255);
 762              		.loc 1 194 25 view .LVU195
 763 032c FFC0A0A3 		movge	ip, #255	@ rr,
 764              	.LVL43:
 765              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 766              		.loc 1 199 44 view .LVU196
 767 0330 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 768 0334 FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 769              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 770              		.loc 1 199 56 view .LVU197
 771 0338 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 772              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 773              		.loc 1 199 51 view .LVU198
 774 033c 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 775              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 776              		.loc 1 199 62 view .LVU199
 777 0340 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 778 0344 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 779              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 780              		.loc 1 214 24 view .LVU200
 781 0348 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 782              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 783              		.loc 1 215 24 view .LVU201
 784 034c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 785              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 786              		.loc 1 199 26 view .LVU202
 787 0350 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 788              	.LVL44:
 213:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 789              		.loc 1 213 21 is_stmt 1 view .LVU203
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 790              		.loc 1 214 21 view .LVU204
 215:armwave.c     ****                     xx = (nsub >> 8);
 791              		.loc 1 215 21 view .LVU205
 792              	@ armwave.c:216:                     xx = (nsub >> 8);
 216:armwave.c     **** 
 793              		.loc 1 216 32 is_stmt 0 view .LVU206
 794 0354 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 795              	.LVL45:
 796              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 797              		.loc 1 215 24 view .LVU207
 798 0358 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 799              	.LVL46:
 216:armwave.c     **** 
 800              		.loc 1 216 21 is_stmt 1 view .LVU208
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 801              		.loc 1 218 21 view .LVU209
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 802              		.loc 1 218 21 is_stmt 0 view .LVU210
 803 035c 090052E1 		cmp	r2, r9	@ yy, ye
 804 0360 D3FFFF2A 		bcs	.L33		@,
 805              	.LVL47:
 806              	.L34:
 219:armwave.c     ****                         *(out_buffer_base + offset) = word;
 807              		.loc 1 219 25 is_stmt 1 discriminator 3 view .LVU211
 220:armwave.c     ****                     }
 808              		.loc 1 220 25 discriminator 3 view .LVU212
 809              	@ armwave.c:219:                         offset = (xx + (y * g_armwave_state.target_width)); 
 219:armwave.c     ****                         *(out_buffer_base + offset) = word;
 810              		.loc 1 219 43 is_stmt 0 discriminator 3 view .LVU213
 811 0364 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 812              	@ armwave.c:220:                         *(out_buffer_base + offset) = word;
 220:armwave.c     ****                     }
 813              		.loc 1 220 43 discriminator 3 view .LVU214
 814 0368 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 815              	.LVL48:
 816              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 817              		.loc 1 218 42 discriminator 3 view .LVU215
 818 036c 012082E2 		add	r2, r2, #1	@ yy, yy,
 819              	.LVL49:
 820              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 821              		.loc 1 218 21 discriminator 3 view .LVU216
 822 0370 020059E1 		cmp	r9, r2	@ ye, yy
 823              	@ armwave.c:220:                         *(out_buffer_base + offset) = word;
 220:armwave.c     ****                     }
 824              		.loc 1 220 53 discriminator 3 view .LVU217
 825 0374 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 826              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 827              		.loc 1 218 21 discriminator 3 view .LVU218
 828 0378 F9FFFF1A 		bne	.L34		@,
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 829              		.loc 1 218 21 discriminator 3 view .LVU219
 830 037c CCFFFFEA 		b	.L33		@
 831              	.LVL50:
 832              	.L48:
 173:armwave.c     **** 
 833              		.loc 1 173 5 is_stmt 1 discriminator 1 view .LVU220
 834 0380 10309FE5 		ldr	r3, .L51+4	@,
 835 0384 AD20A0E3 		mov	r2, #173	@,
 836 0388 0C109FE5 		ldr	r1, .L51+8	@,
 837 038c 0C009FE5 		ldr	r0, .L51+12	@,
 838              	.LVL51:
 173:armwave.c     **** 
 839              		.loc 1 173 5 is_stmt 0 discriminator 1 view .LVU221
 840 0390 FEFFFFEB 		bl	__assert_fail		@
 841              	.LVL52:
 842              	.L52:
 173:armwave.c     **** 
 843              		.loc 1 173 5 discriminator 1 view .LVU222
 844              		.align	2
 845              	.L51:
 846 0394 00000000 		.word	g_armwave_state
 847 0398 00000000 		.word	.LANCHOR0
 848 039c 54000000 		.word	.LC3
 849 03a0 60000000 		.word	.LC4
 850              		.cfi_endproc
 851              	.LFE60:
 853              		.align	2
 854              		.global	armwave_setup_render
 855              		.syntax unified
 856              		.arm
 857              		.fpu vfp
 859              	armwave_setup_render:
 860              	.LVL53:
 861              	.LFB61:
 227:armwave.c     **** 
 228:armwave.c     **** /*
 229:armwave.c     ****  * Setup the renderer with passed parameters.
 230:armwave.c     ****  */
 231:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 232:armwave.c     **** {
 862              		.loc 1 232 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 12, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 233:armwave.c     ****     uint32_t length, xx;
 866              		.loc 1 233 5 view .LVU224
 234:armwave.c     ****     float points_per_pixel;
 867              		.loc 1 234 5 view .LVU225
 235:armwave.c     **** 
 236:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 868              		.loc 1 236 5 view .LVU226
 869              	@ armwave.c:232: {
 232:armwave.c     ****     uint32_t length, xx;
 870              		.loc 1 232 1 is_stmt 0 view .LVU227
 871 03a4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 872              		.cfi_def_cfa_offset 28
 873              		.cfi_offset 4, -28
 874              		.cfi_offset 5, -24
 875              		.cfi_offset 6, -20
 876              		.cfi_offset 7, -16
 877              		.cfi_offset 8, -12
 878              		.cfi_offset 9, -8
 879              		.cfi_offset 14, -4
 880 03a8 028B2DED 		vpush.64	{d8}	@
 881              		.cfi_def_cfa_offset 36
 882              		.cfi_offset 80, -36
 883              		.cfi_offset 81, -32
 884 03ac 0040A0E1 		mov	r4, r0	@ start_point, start_point
 885 03b0 0150A0E1 		mov	r5, r1	@ end_point, end_point
 886 03b4 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 887 03b8 14D04DE2 		sub	sp, sp, #20	@,,
 888              		.cfi_def_cfa_offset 56
 889              	@ armwave.c:232: {
 232:armwave.c     ****     uint32_t length, xx;
 890              		.loc 1 232 1 view .LVU228
 891 03bc 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 892 03c0 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 893 03c4 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 894              	@ armwave.c:236:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 895              		.loc 1 236 5 view .LVU229
 896 03c8 00308DE5 		str	r3, [sp]	@ wave_stride,
 897 03cc F460CDE1 		strd	r6, [sp, #4]	@,,
 898 03d0 0230A0E1 		mov	r3, r2	@, waves_max
 899              	.LVL54:
 900              		.loc 1 236 5 view .LVU230
 901 03d4 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 902 03d8 0120A0E1 		mov	r2, r1	@, end_point
 903              	.LVL55:
 904              		.loc 1 236 5 view .LVU231
 905 03dc 0010A0E1 		mov	r1, r0	@, start_point
 906              	.LVL56:
 907              		.loc 1 236 5 view .LVU232
 908 03e0 CC019FE5 		ldr	r0, .L67+12	@,
 909              	.LVL57:
 910              		.loc 1 236 5 view .LVU233
 911 03e4 FEFFFFEB 		bl	printf		@
 912              	.LVL58:
 237:armwave.c     **** 
 238:armwave.c     ****     // TODO these asserts should instead raise PyExc
 239:armwave.c     ****     assert(start_point < end_point);
 913              		.loc 1 239 5 is_stmt 1 view .LVU234
 914 03e8 050054E1 		cmp	r4, r5	@ start_point, end_point
 915 03ec 5E00002A 		bcs	.L64		@,
 240:armwave.c     **** 
 241:armwave.c     ****     /*
 242:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 243:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 244:armwave.c     **** 
 245:armwave.c     ****     if(target_height == 256) {
 246:armwave.c     ****         g_armwave_state.row_shift = 8;
 247:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 248:armwave.c     ****     } else if(target_height == 512) {
 249:armwave.c     ****         g_armwave_state.row_shift = 9;
 250:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 251:armwave.c     ****     } else if(target_height == 1024) {
 252:armwave.c     ****         g_armwave_state.row_shift = 10;
 253:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 254:armwave.c     ****     } else if(target_height == 2048) {
 255:armwave.c     ****         g_armwave_state.row_shift = 11;
 256:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 257:armwave.c     ****     }
 258:armwave.c     ****     */
 259:armwave.c     **** 
 260:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 261:armwave.c     ****     g_armwave_state.xstride = target_height;
 916              		.loc 1 261 5 view .LVU235
 917              	@ armwave.c:272:     g_armwave_state.wave_length = end_point - start_point;
 262:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 263:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 264:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 265:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 266:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 267:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 268:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 269:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 270:armwave.c     ****     g_armwave_state.target_width = target_width;
 271:armwave.c     ****     g_armwave_state.target_height = target_height;
 272:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 918              		.loc 1 272 45 is_stmt 0 view .LVU236
 919 03f0 045045E0 		sub	r5, r5, r4	@ _12, end_point, start_point
 920              	.LVL59:
 921              	@ armwave.c:277:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 273:armwave.c     **** 
 274:armwave.c     ****     // Calculate compound scaler
 275:armwave.c     ****     //g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 << AM_XCOORD_MULT
 276:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 277:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 922              		.loc 1 277 46 view .LVU237
 923 03f4 6B6ADFED 		vldr.32	s13, .L67	@ tmp193,
 924              	@ armwave.c:277:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 925              		.loc 1 277 87 view .LVU238
 926 03f8 905A07EE 		vmov	s15, r5	@ int	@ _12, _12
 927              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 928              		.loc 1 262 49 view .LVU239
 929 03fc 6A6A9FED 		vldr.32	s12, .L67+4	@ tmp174,
 930              	@ armwave.c:261:     g_armwave_state.xstride = target_height;
 261:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 931              		.loc 1 261 29 view .LVU240
 932 0400 B0419FE5 		ldr	r4, .L67+16	@ tmp236,
 933              	.LVL60:
 934              	@ armwave.c:267:     g_armwave_state.size = target_height * target_width;
 267:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 935              		.loc 1 267 42 view .LVU241
 936 0404 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 937              	@ armwave.c:277:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 938              		.loc 1 277 87 view .LVU242
 939 0408 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp190, _12
 940              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 941              		.loc 1 262 49 view .LVU243
 942 040c 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 943              	@ armwave.c:269:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 944              		.loc 1 269 68 view .LVU244
 945 0410 0634A0E1 		lsl	r3, r6, #8	@ _10, target_width,
 946              	@ armwave.c:268:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 268:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 947              		.loc 1 268 37 view .LVU245
 948 0414 012CA0E3 		mov	r2, #256	@ tmp184,
 949              	@ armwave.c:267:     g_armwave_state.size = target_height * target_width;
 267:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 950              		.loc 1 267 26 view .LVU246
 951 0418 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 952              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 953              		.loc 1 262 49 view .LVU247
 954 041c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 955              	@ armwave.c:277:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 956              		.loc 1 277 87 view .LVU248
 957 0420 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 958              	@ armwave.c:279:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 278:armwave.c     **** 
 279:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 959              		.loc 1 279 5 view .LVU249
 960 0424 0310A0E1 		mov	r1, r3	@, _10
 961              	@ armwave.c:268:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 268:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 962              		.loc 1 268 37 view .LVU250
 963 0428 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 964              	@ armwave.c:269:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 965              		.loc 1 269 34 view .LVU251
 966 042c 503084E5 		str	r3, [r4, #80]	@ _10, g_armwave_state.ch_buff_size
 967              	@ armwave.c:277:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 277:armwave.c     **** 
 968              		.loc 1 277 87 view .LVU252
 969 0430 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp189, target_width
 970              	@ armwave.c:279:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 971              		.loc 1 279 5 view .LVU253
 972 0434 80019FE5 		ldr	r0, .L67+20	@,
 973              	@ armwave.c:261:     g_armwave_state.xstride = target_height;
 261:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 974              		.loc 1 261 29 view .LVU254
 975 0438 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 976              		.loc 1 262 5 is_stmt 1 view .LVU255
 977              	@ armwave.c:264:     g_armwave_state.wave_stride = wave_stride;
 264:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 978              		.loc 1 264 33 is_stmt 0 view .LVU256
 979 043c 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 980              	@ armwave.c:265:     g_armwave_state.waves_max = waves_max;
 265:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 981              		.loc 1 265 31 view .LVU257
 982 0440 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 983              	@ armwave.c:266:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 266:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 984              		.loc 1 266 27 view .LVU258
 985 0444 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 986              	@ armwave.c:271:     g_armwave_state.target_height = target_height;
 271:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 987              		.loc 1 271 35 view .LVU259
 988 0448 F865C4E1 		strd	r6, [r4, #88]	@, tmp236,
 989              	@ armwave.c:272:     g_armwave_state.wave_length = end_point - start_point;
 272:armwave.c     **** 
 990              		.loc 1 272 33 view .LVU260
 991 044c 4C5084E5 		str	r5, [r4, #76]	@ _12, g_armwave_state.wave_length
 992              	@ armwave.c:277:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 277:armwave.c     **** 
 993              		.loc 1 277 87 view .LVU261
 994 0450 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp191, tmp189, tmp190
 995              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 996              		.loc 1 262 49 view .LVU262
 997 0454 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 998              	@ armwave.c:277:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 277:armwave.c     **** 
 999              		.loc 1 277 46 view .LVU263
 1000 0458 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp192, tmp191, tmp193
 1001              	@ armwave.c:277:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 277:armwave.c     **** 
 1002              		.loc 1 277 118 view .LVU264
 1003 045c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp194, tmp192, tmp193
 1004              	@ armwave.c:263:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 263:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1005              		.loc 1 263 30 view .LVU265
 1006 0460 C76AFDEE 		vcvt.s32.f32	s13, s14	@ tmp177, _3
 1007              	@ armwave.c:276:     g_armwave_state.cmp_x_bitdepth_scale = \
 276:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1008              		.loc 1 276 42 view .LVU266
 1009 0464 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp194
 1010              	@ armwave.c:262:     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1011              		.loc 1 262 33 view .LVU267
 1012 0468 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 263:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1013              		.loc 1 263 5 is_stmt 1 view .LVU268
 1014              	@ armwave.c:263:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 263:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1015              		.loc 1 263 30 is_stmt 0 view .LVU269
 1016 046c 0C6AC4ED 		vstr.32	s13, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 264:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1017              		.loc 1 264 5 is_stmt 1 view .LVU270
 265:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1018              		.loc 1 265 5 view .LVU271
 266:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1019              		.loc 1 266 5 view .LVU272
 267:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1020              		.loc 1 267 5 view .LVU273
 268:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1021              		.loc 1 268 5 view .LVU274
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 1022              		.loc 1 269 5 view .LVU275
 270:armwave.c     ****     g_armwave_state.target_height = target_height;
 1023              		.loc 1 270 5 view .LVU276
 271:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1024              		.loc 1 271 5 view .LVU277
 272:armwave.c     **** 
 1025              		.loc 1 272 5 view .LVU278
 276:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1026              		.loc 1 276 5 view .LVU279
 1027              	@ armwave.c:276:     g_armwave_state.cmp_x_bitdepth_scale = \
 276:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1028              		.loc 1 276 42 is_stmt 0 view .LVU280
 1029 0470 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1030              	@ armwave.c:279:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1031              		.loc 1 279 5 view .LVU281
 1032 0474 903A17EE 		vmov	r3, s15	@ int	@, _19
 1033              	@ armwave.c:276:     g_armwave_state.cmp_x_bitdepth_scale = \
 276:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1034              		.loc 1 276 42 view .LVU282
 1035 0478 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1036              		.loc 1 279 5 is_stmt 1 view .LVU283
 1037 047c 0C20A0E1 		mov	r2, ip	@, tmp3
 1038 0480 FEFFFFEB 		bl	printf		@
 1039              	.LVL61:
 280:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 281:armwave.c     **** 
 282:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 283:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 284:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 285:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1040              		.loc 1 285 5 view .LVU284
 1041              	@ armwave.c:287:     if(g_armwave_state.ch1_buffer != NULL)
 286:armwave.c     **** 
 287:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1042              		.loc 1 287 23 is_stmt 0 view .LVU285
 1043 0484 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1044              	@ armwave.c:285:     g_armwave_state.slice_height = 64;  
 285:armwave.c     **** 
 1045              		.loc 1 285 34 view .LVU286
 1046 0488 4030A0E3 		mov	r3, #64	@ tmp199,
 1047              	@ armwave.c:287:     if(g_armwave_state.ch1_buffer != NULL)
 1048              		.loc 1 287 7 view .LVU287
 1049 048c 000050E3 		cmp	r0, #0	@ _20,
 1050              	@ armwave.c:285:     g_armwave_state.slice_height = 64;  
 285:armwave.c     **** 
 1051              		.loc 1 285 34 view .LVU288
 1052 0490 443084E5 		str	r3, [r4, #68]	@ tmp199, g_armwave_state.slice_height
 1053              		.loc 1 287 5 is_stmt 1 view .LVU289
 1054              	@ armwave.c:287:     if(g_armwave_state.ch1_buffer != NULL)
 1055              		.loc 1 287 7 is_stmt 0 view .LVU290
 1056 0494 0000000A 		beq	.L55		@,
 288:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1057              		.loc 1 288 9 is_stmt 1 view .LVU291
 1058 0498 FEFFFFEB 		bl	free		@
 1059              	.LVL62:
 1060              	.L55:
 289:armwave.c     **** 
 290:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1061              		.loc 1 290 5 view .LVU292
 1062              	@ armwave.c:290:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1063              		.loc 1 290 34 is_stmt 0 view .LVU293
 1064 049c 0110A0E3 		mov	r1, #1	@,
 1065 04a0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1066 04a4 FEFFFFEB 		bl	calloc		@
 1067              	.LVL63:
 1068              	@ armwave.c:292:     assert(g_armwave_state.ch1_buffer != NULL);
 291:armwave.c     **** 
 292:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1069              		.loc 1 292 5 view .LVU294
 1070 04a8 000050E3 		cmp	r0, #0	@ _23,
 1071              	@ armwave.c:290:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 290:armwave.c     **** 
 1072              		.loc 1 290 34 view .LVU295
 1073 04ac 0070A0E1 		mov	r7, r0	@ _23,
 1074              	@ armwave.c:290:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 290:armwave.c     **** 
 1075              		.loc 1 290 32 view .LVU296
 1076 04b0 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1077              		.loc 1 292 5 is_stmt 1 view .LVU297
 1078 04b4 3600000A 		beq	.L65		@,
 293:armwave.c     **** 
 294:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 295:armwave.c     ****     length = end_point - start_point;
 1079              		.loc 1 295 5 view .LVU298
 1080              	.LVL64:
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1081              		.loc 1 296 5 view .LVU299
 1082              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 1083              		.loc 1 296 34 is_stmt 0 view .LVU300
 1084 04b8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1085              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 1086              		.loc 1 296 22 view .LVU301
 1087 04bc 905A06EE 		vmov	s13, r5	@ int	@ _12, _12
 1088              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1089              		.loc 1 297 60 view .LVU302
 1090 04c0 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp246, g_armwave_state.slice_height
 1091              	@ armwave.c:298:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1092              		.loc 1 298 40 view .LVU303
 1093 04c4 8500A0E1 		lsl	r0, r5, #1	@, _12,
 1094              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1095              		.loc 1 296 34 view .LVU304
 1096 04c8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp210, target_width
 1097              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1098              		.loc 1 296 22 view .LVU305
 1099 04cc 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp209, _12
 1100              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1101              		.loc 1 297 60 view .LVU306
 1102 04d0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp213, tmp246
 1103              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1104              		.loc 1 296 22 view .LVU307
 1105 04d4 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp209, tmp210
 1106              	.LVL65:
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1107              		.loc 1 297 5 is_stmt 1 view .LVU308
 1108              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1109              		.loc 1 297 60 is_stmt 0 view .LVU309
 1110 04d8 087A67EE 		vmul.f32	s15, s14, s16	@ tmp215, tmp213, points_per_pixel
 1111              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1112              		.loc 1 297 41 view .LVU310
 1113 04dc E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp216, tmp215
 1114 04e0 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp216, g_armwave_state.slice_record_height
 1115              		.loc 1 298 5 is_stmt 1 view .LVU311
 1116              	@ armwave.c:298:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1117              		.loc 1 298 40 is_stmt 0 view .LVU312
 1118 04e4 FEFFFFEB 		bl	malloc		@
 1119              	.LVL66:
 1120              	@ armwave.c:300:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 299:armwave.c     **** 
 300:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1121              		.loc 1 300 5 view .LVU313
 1122 04e8 000050E3 		cmp	r0, #0	@ _31,
 1123              	@ armwave.c:298:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1124              		.loc 1 298 40 view .LVU314
 1125 04ec 0060A0E1 		mov	r6, r0	@ _31,
 1126              	@ armwave.c:298:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1127              		.loc 1 298 38 view .LVU315
 1128 04f0 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1129              		.loc 1 300 5 is_stmt 1 view .LVU316
 1130 04f4 2100000A 		beq	.L66		@,
 1131              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 301:armwave.c     **** 
 302:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 303:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1132              		.loc 1 303 54 is_stmt 0 view .LVU317
 1133 04f8 2C7ADFED 		vldr.32	s15, .L67+8	@ tmp224,
 1134 04fc 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _31,
 1135              	@ armwave.c:302:     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1136              		.loc 1 302 12 view .LVU318
 1137 0500 0030A0E3 		mov	r3, #0	@ xx,
 1138              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1139              		.loc 1 303 54 view .LVU319
 1140 0504 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp224, points_per_pixel
 1141              	.L58:
 1142              	.LVL67:
 1143              		.loc 1 303 9 is_stmt 1 discriminator 3 view .LVU320
 1144              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1145              		.loc 1 303 74 is_stmt 0 discriminator 3 view .LVU321
 1146 0508 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1147              	@ armwave.c:302:     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1148              		.loc 1 302 32 discriminator 3 view .LVU322
 1149 050c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1150              	.LVL68:
 1151              	@ armwave.c:302:     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1152              		.loc 1 302 5 discriminator 3 view .LVU323
 1153 0510 030055E1 		cmp	r5, r3	@ _12, xx
 1154              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1155              		.loc 1 303 74 discriminator 3 view .LVU324
 1156 0514 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, xx
 1157 0518 877A67EE 		vmul.f32	s15, s15, s14	@ tmp226, tmp225, _32
 1158              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1159              		.loc 1 303 46 discriminator 3 view .LVU325
 1160 051c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp227, tmp226
 1161 0520 902A17EE 		vmov	r2, s15	@ int	@ tmp227, tmp227
 1162 0524 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp227, MEM[base: _101, offset: 0B]
 1163              	@ armwave.c:302:     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1164              		.loc 1 302 5 discriminator 3 view .LVU326
 1165 0528 F6FFFF1A 		bne	.L58		@,
 304:armwave.c     **** 
 305:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 306:armwave.c     ****     }
 307:armwave.c     **** 
 308:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1166              		.loc 1 308 5 is_stmt 1 view .LVU327
 1167              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1168              		.loc 1 308 34 is_stmt 0 view .LVU328
 1169 052c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1170 0530 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1171 0534 FEFFFFEB 		bl	malloc		@
 1172              	.LVL69:
 1173              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 309:armwave.c     **** 
 310:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1174              		.loc 1 310 5 view .LVU329
 1175 0538 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1176 053c 0620A0E1 		mov	r2, r6	@, _31
 1177 0540 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1178 0544 0710A0E1 		mov	r1, r7	@, _23
 1179              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1180              		.loc 1 308 34 view .LVU330
 1181 0548 00C0A0E1 		mov	ip, r0	@ tmp231,
 1182              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1183              		.loc 1 310 5 view .LVU331
 1184 054c 0030A0E1 		mov	r3, r0	@, tmp231
 1185              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1186              		.loc 1 308 32 view .LVU332
 1187 0550 68C084E5 		str	ip, [r4, #104]	@ tmp231, g_armwave_state.out_pixbuf
 1188              		.loc 1 310 5 is_stmt 1 view .LVU333
 1189 0554 64009FE5 		ldr	r0, .L67+24	@,
 1190 0558 FEFFFFEB 		bl	printf		@
 1191              	.LVL70:
 311:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 312:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 313:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 315:armwave.c     **** 
 316:armwave.c     ****     malloc_stats();
 1192              		.loc 1 316 5 view .LVU334
 1193              	@ armwave.c:317: }
 317:armwave.c     **** }
 1194              		.loc 1 317 1 is_stmt 0 view .LVU335
 1195 055c 14D08DE2 		add	sp, sp, #20	@,,
 1196              		.cfi_remember_state
 1197              		.cfi_def_cfa_offset 36
 1198              		@ sp needed	@
 1199 0560 028BBDEC 		vldm	sp!, {d8}	@
 1200              		.cfi_restore 80
 1201              		.cfi_restore 81
 1202              		.cfi_def_cfa_offset 28
 1203              	.LVL71:
 1204              		.loc 1 317 1 view .LVU336
 1205 0564 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1206              		.cfi_restore 14
 1207              		.cfi_restore 9
 1208              		.cfi_restore 8
 1209              		.cfi_restore 7
 1210              		.cfi_restore 6
 1211              		.cfi_restore 5
 1212              		.cfi_restore 4
 1213              		.cfi_def_cfa_offset 0
 1214              	.LVL72:
 1215              	@ armwave.c:316:     malloc_stats();
 316:armwave.c     **** }
 1216              		.loc 1 316 5 view .LVU337
 1217 0568 FEFFFFEA 		b	malloc_stats		@
 1218              	.LVL73:
 1219              	.L64:
 1220              		.cfi_restore_state
 239:armwave.c     **** 
 1221              		.loc 1 239 5 is_stmt 1 discriminator 1 view .LVU338
 1222 056c 50309FE5 		ldr	r3, .L67+28	@,
 1223 0570 EF20A0E3 		mov	r2, #239	@,
 1224 0574 4C109FE5 		ldr	r1, .L67+32	@,
 1225 0578 4C009FE5 		ldr	r0, .L67+36	@,
 1226 057c FEFFFFEB 		bl	__assert_fail		@
 1227              	.LVL74:
 1228              	.L66:
 300:armwave.c     **** 
 1229              		.loc 1 300 5 discriminator 1 view .LVU339
 1230 0580 3C309FE5 		ldr	r3, .L67+28	@,
 1231 0584 4B2FA0E3 		mov	r2, #300	@,
 1232 0588 38109FE5 		ldr	r1, .L67+32	@,
 1233 058c 3C009FE5 		ldr	r0, .L67+40	@,
 1234 0590 FEFFFFEB 		bl	__assert_fail		@
 1235              	.LVL75:
 1236              	.L65:
 292:armwave.c     **** 
 1237              		.loc 1 292 5 discriminator 1 view .LVU340
 1238 0594 28309FE5 		ldr	r3, .L67+28	@,
 1239 0598 492FA0E3 		mov	r2, #292	@,
 1240 059c 24109FE5 		ldr	r1, .L67+32	@,
 1241 05a0 2C009FE5 		ldr	r0, .L67+44	@,
 1242 05a4 FEFFFFEB 		bl	__assert_fail		@
 1243              	.LVL76:
 1244              	.L68:
 1245              		.align	2
 1246              	.L67:
 1247 05a8 00008043 		.word	1132462080
 1248 05ac 00007F43 		.word	1132396544
 1249 05b0 0000803F 		.word	1065353216
 1250 05b4 74000000 		.word	.LC5
 1251 05b8 00000000 		.word	g_armwave_state
 1252 05bc B8000000 		.word	.LC7
 1253 05c0 3C010000 		.word	.LC10
 1254 05c4 1C000000 		.word	.LANCHOR0+28
 1255 05c8 54000000 		.word	.LC3
 1256 05cc A0000000 		.word	.LC6
 1257 05d0 10010000 		.word	.LC9
 1258 05d4 EC000000 		.word	.LC8
 1259              		.cfi_endproc
 1260              	.LFE61:
 1262              		.align	2
 1263              		.global	armwave_set_wave_pointer
 1264              		.syntax unified
 1265              		.arm
 1266              		.fpu vfp
 1268              	armwave_set_wave_pointer:
 1269              	.LVL77:
 1270              	.LFB62:
 318:armwave.c     **** 
 319:armwave.c     **** /*
 320:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 321:armwave.c     ****  * in the future.
 322:armwave.c     ****  */
 323:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 324:armwave.c     **** {
 1271              		.loc 1 324 1 view -0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 0
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1275              		.loc 1 325 5 view .LVU342
 1276 05d8 000050E3 		cmp	r0, #0	@ wave_buffer
 1277              		.loc 1 325 5 is_stmt 0 view .LVU343
 1278 05dc 0200000A 		beq	.L74		@,
 326:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1279              		.loc 1 326 5 is_stmt 1 view .LVU344
 1280              	@ armwave.c:326:     g_armwave_state.wave_buffer = wave_buffer;
 1281              		.loc 1 326 33 is_stmt 0 view .LVU345
 1282 05e0 1C309FE5 		ldr	r3, .L75	@ tmp116,
 1283 05e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1284 05e8 1EFF2FE1 		bx	lr	@
 1285              	.L74:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1286              		.loc 1 325 5 is_stmt 1 discriminator 1 view .LVU346
 1287              	@ armwave.c:324: {
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1288              		.loc 1 324 1 is_stmt 0 discriminator 1 view .LVU347
 1289 05ec 10402DE9 		push	{r4, lr}	@
 1290              		.cfi_def_cfa_offset 8
 1291              		.cfi_offset 4, -8
 1292              		.cfi_offset 14, -4
 1293              	@ armwave.c:325:     assert(wave_buffer != NULL);
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1294              		.loc 1 325 5 discriminator 1 view .LVU348
 1295 05f0 10309FE5 		ldr	r3, .L75+4	@,
 1296 05f4 10209FE5 		ldr	r2, .L75+8	@,
 1297 05f8 10109FE5 		ldr	r1, .L75+12	@,
 1298 05fc 10009FE5 		ldr	r0, .L75+16	@,
 1299              	.LVL78:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1300              		.loc 1 325 5 discriminator 1 view .LVU349
 1301 0600 FEFFFFEB 		bl	__assert_fail		@
 1302              	.LVL79:
 1303              	.L76:
 1304              		.align	2
 1305              	.L75:
 1306 0604 00000000 		.word	g_armwave_state
 1307 0608 34000000 		.word	.LANCHOR0+52
 1308 060c 45010000 		.word	325
 1309 0610 54000000 		.word	.LC3
 1310 0614 60010000 		.word	.LC11
 1311              		.cfi_endproc
 1312              	.LFE62:
 1314              		.align	2
 1315              		.global	armwave_set_wave_pointer_as_testbuf
 1316              		.syntax unified
 1317              		.arm
 1318              		.fpu vfp
 1320              	armwave_set_wave_pointer_as_testbuf:
 1321              	.LVL80:
 1322              	.LFB63:
 327:armwave.c     **** }
 328:armwave.c     **** 
 329:armwave.c     **** /*
 330:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 331:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 332:armwave.c     ****  */
 333:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 334:armwave.c     **** {
 1323              		.loc 1 334 1 is_stmt 1 view -0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 0
 1326              		@ frame_needed = 0, uses_anonymous_args = 0
 1327              		@ link register save eliminated.
 335:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1328              		.loc 1 335 5 view .LVU351
 1329              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1330              		.loc 1 335 29 is_stmt 0 view .LVU352
 1331 0618 24309FE5 		ldr	r3, .L80	@ tmp117,
 1332              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1333              		.loc 1 335 7 view .LVU353
 1334 061c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1335 0620 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1336 0624 0400003A 		bcc	.L79		@,
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 337:armwave.c     ****         return;
 338:armwave.c     ****     }
 339:armwave.c     **** 
 340:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1337              		.loc 1 340 5 is_stmt 1 view .LVU354
 1338              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1339              		.loc 1 340 111 is_stmt 0 view .LVU355
 1340 0628 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1341              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1342              		.loc 1 340 68 view .LVU356
 1343 062c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1344 0630 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1345              	.LVL81:
 1346              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1347              		.loc 1 340 33 view .LVU357
 1348 0634 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1349              	@ armwave.c:341: }
 341:armwave.c     **** }
 1350              		.loc 1 341 1 view .LVU358
 1351 0638 1EFF2FE1 		bx	lr	@
 1352              	.LVL82:
 1353              	.L79:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1354              		.loc 1 336 9 is_stmt 1 view .LVU359
 1355 063c 04009FE5 		ldr	r0, .L80+4	@,
 1356              	.LVL83:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1357              		.loc 1 336 9 is_stmt 0 view .LVU360
 1358 0640 FEFFFFEA 		b	puts		@
 1359              	.LVL84:
 1360              	.L81:
 1361              		.align	2
 1362              	.L80:
 1363 0644 00000000 		.word	g_armwave_state
 1364 0648 74010000 		.word	.LC12
 1365              		.cfi_endproc
 1366              	.LFE63:
 1368              		.align	2
 1369              		.global	armwave_set_wave_pointer_u32
 1370              		.syntax unified
 1371              		.arm
 1372              		.fpu vfp
 1374              	armwave_set_wave_pointer_u32:
 1375              	.LVL85:
 1376              	.LFB64:
 342:armwave.c     **** 
 343:armwave.c     **** /*
 344:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 345:armwave.c     ****  * disjointed buffers in the future.
 346:armwave.c     ****  */
 347:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 348:armwave.c     **** {
 1377              		.loc 1 348 1 is_stmt 1 view -0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1381              		.loc 1 349 5 view .LVU362
 1382 064c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1383              		.loc 1 349 5 is_stmt 0 view .LVU363
 1384 0650 0200000A 		beq	.L87		@,
 350:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1385              		.loc 1 350 5 is_stmt 1 view .LVU364
 1386              	@ armwave.c:350:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1387              		.loc 1 350 33 is_stmt 0 view .LVU365
 1388 0654 1C309FE5 		ldr	r3, .L88	@ tmp117,
 1389 0658 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1390 065c 1EFF2FE1 		bx	lr	@
 1391              	.L87:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1392              		.loc 1 349 5 is_stmt 1 discriminator 1 view .LVU366
 1393              	@ armwave.c:348: {
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1394              		.loc 1 348 1 is_stmt 0 discriminator 1 view .LVU367
 1395 0660 10402DE9 		push	{r4, lr}	@
 1396              		.cfi_def_cfa_offset 8
 1397              		.cfi_offset 4, -8
 1398              		.cfi_offset 14, -4
 1399              	@ armwave.c:349:     assert(wave_buffer_ptr != 0);
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1400              		.loc 1 349 5 discriminator 1 view .LVU368
 1401 0664 10309FE5 		ldr	r3, .L88+4	@,
 1402 0668 10209FE5 		ldr	r2, .L88+8	@,
 1403 066c 10109FE5 		ldr	r1, .L88+12	@,
 1404 0670 10009FE5 		ldr	r0, .L88+16	@,
 1405              	.LVL86:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1406              		.loc 1 349 5 discriminator 1 view .LVU369
 1407 0674 FEFFFFEB 		bl	__assert_fail		@
 1408              	.LVL87:
 1409              	.L89:
 1410              		.align	2
 1411              	.L88:
 1412 0678 00000000 		.word	g_armwave_state
 1413 067c 50000000 		.word	.LANCHOR0+80
 1414 0680 5D010000 		.word	349
 1415 0684 54000000 		.word	.LC3
 1416 0688 B0010000 		.word	.LC13
 1417              		.cfi_endproc
 1418              	.LFE64:
 1420              		.align	2
 1421              		.global	armwave_clear_buffer
 1422              		.syntax unified
 1423              		.arm
 1424              		.fpu vfp
 1426              	armwave_clear_buffer:
 1427              	.LVL88:
 1428              	.LFB65:
 351:armwave.c     **** }
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 357:armwave.c     **** {
 1429              		.loc 1 357 1 is_stmt 1 view -0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 0
 1432              		@ frame_needed = 0, uses_anonymous_args = 0
 1433              		@ link register save eliminated.
 358:armwave.c     ****     // Flags ignored, only one buffer cleared
 359:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1434              		.loc 1 359 5 view .LVU371
 1435              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1436              		.loc 1 359 58 is_stmt 0 view .LVU372
 1437 068c 0C309FE5 		ldr	r3, .L91	@ tmp114,
 1438              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1439              		.loc 1 359 5 view .LVU373
 1440 0690 0010A0E3 		mov	r1, #0	@,
 1441 0694 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1442 0698 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1443              	.LVL89:
 1444              		.loc 1 359 5 view .LVU374
 1445 069c FEFFFFEA 		b	memset		@
 1446              	.LVL90:
 1447              	.L92:
 1448              		.align	2
 1449              	.L91:
 1450 06a0 00000000 		.word	g_armwave_state
 1451              		.cfi_endproc
 1452              	.LFE65:
 1454              		.align	2
 1455              		.global	armwave_set_channel_colour
 1456              		.syntax unified
 1457              		.arm
 1458              		.fpu vfp
 1460              	armwave_set_channel_colour:
 1461              	.LVL91:
 1462              	.LFB66:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 364:armwave.c     ****  */
 365:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 366:armwave.c     **** {
 1463              		.loc 1 366 1 is_stmt 1 view -0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              		@ link register save eliminated.
 367:armwave.c     ****     // Only 1ch supported for now
 368:armwave.c     ****     switch(ch) {
 1468              		.loc 1 368 5 view .LVU376
 1469 06a4 010050E3 		cmp	r0, #1	@ ch,
 369:armwave.c     ****         case 1:
 370:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1470              		.loc 1 370 13 view .LVU377
 1471              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 1472              		.loc 1 370 41 is_stmt 0 view .LVU378
 1473 06a8 0C009F05 		ldreq	r0, .L95	@ tmp117,
 1474              	.LVL92:
 1475              		.loc 1 370 41 view .LVU379
 1476 06ac BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 371:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1477              		.loc 1 371 13 is_stmt 1 view .LVU380
 1478              	@ armwave.c:371:             g_armwave_state.ch1_color.g = g;
 1479              		.loc 1 371 41 is_stmt 0 view .LVU381
 1480 06b0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 372:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1481              		.loc 1 372 13 is_stmt 1 view .LVU382
 1482              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 1483              		.loc 1 372 41 is_stmt 0 view .LVU383
 1484 06b4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 373:armwave.c     ****             break;
 1485              		.loc 1 373 13 is_stmt 1 view .LVU384
 1486              	@ armwave.c:375: }
 374:armwave.c     ****     }
 375:armwave.c     **** }
 1487              		.loc 1 375 1 is_stmt 0 view .LVU385
 1488 06b8 1EFF2FE1 		bx	lr	@
 1489              	.L96:
 1490              		.align	2
 1491              	.L95:
 1492 06bc 00000000 		.word	g_armwave_state
 1493              		.cfi_endproc
 1494              	.LFE66:
 1496              		.align	2
 1497              		.global	armwave_dump_ppm_debug
 1498              		.syntax unified
 1499              		.arm
 1500              		.fpu vfp
 1502              	armwave_dump_ppm_debug:
 1503              	.LVL93:
 1504              	.LFB67:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Dump a ppm of a buffer to a file.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 381:armwave.c     **** {
 1505              		.loc 1 381 1 is_stmt 1 view -0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1509              		.loc 1 382 5 view .LVU387
 1510              	@ armwave.c:381: {
 381:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1511              		.loc 1 381 1 is_stmt 0 view .LVU388
 1512 06c0 0130A0E1 		mov	r3, r1	@ fn, fn
 1513 06c4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1514              		.cfi_def_cfa_offset 28
 1515              		.cfi_offset 4, -28
 1516              		.cfi_offset 5, -24
 1517              		.cfi_offset 6, -20
 1518              		.cfi_offset 7, -16
 1519              		.cfi_offset 8, -12
 1520              		.cfi_offset 9, -8
 1521              		.cfi_offset 14, -4
 1522 06c8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1523 06cc 0CD04DE2 		sub	sp, sp, #12	@,,
 1524              		.cfi_def_cfa_offset 40
 1525              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 1526              		.loc 1 382 16 view .LVU389
 1527 06d0 C4109FE5 		ldr	r1, .L105	@,
 1528              	.LVL94:
 1529              		.loc 1 382 16 view .LVU390
 1530 06d4 0300A0E1 		mov	r0, r3	@, fn
 1531              	.LVL95:
 1532              		.loc 1 382 16 view .LVU391
 1533 06d8 FEFFFFEB 		bl	fopen64		@
 1534              	.LVL96:
 1535              	@ armwave.c:389:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 383:armwave.c     ****     uint32_t data;
 384:armwave.c     ****     int xx, yy;
 385:armwave.c     **** 
 386:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 387:armwave.c     **** 
 388:armwave.c     ****     fputs("P3\n", fp);
 389:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1536              		.loc 1 389 5 view .LVU392
 1537 06dc BC609FE5 		ldr	r6, .L105+4	@ tmp150,
 1538              	@ armwave.c:388:     fputs("P3\n", fp);
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1539              		.loc 1 388 5 view .LVU393
 1540 06e0 0320A0E3 		mov	r2, #3	@,
 1541 06e4 0110A0E3 		mov	r1, #1	@,
 1542              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 382:armwave.c     ****     uint32_t data;
 1543              		.loc 1 382 16 view .LVU394
 1544 06e8 0070A0E1 		mov	r7, r0	@ fp,
 1545              	.LVL97:
 383:armwave.c     ****     uint32_t data;
 1546              		.loc 1 383 5 is_stmt 1 view .LVU395
 384:armwave.c     **** 
 1547              		.loc 1 384 5 view .LVU396
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1548              		.loc 1 388 5 view .LVU397
 1549 06ec 0030A0E1 		mov	r3, r0	@, fp
 1550 06f0 AC009FE5 		ldr	r0, .L105+8	@,
 1551              	.LVL98:
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1552              		.loc 1 388 5 is_stmt 0 view .LVU398
 1553 06f4 FEFFFFEB 		bl	fwrite		@
 1554              	.LVL99:
 1555              		.loc 1 389 5 is_stmt 1 view .LVU399
 1556 06f8 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1557 06fc A4109FE5 		ldr	r1, .L105+12	@,
 1558 0700 0700A0E1 		mov	r0, r7	@, fp
 1559 0704 FEFFFFEB 		bl	fprintf		@
 1560              	.LVL100:
 390:armwave.c     ****     fputs("255\n", fp);
 1561              		.loc 1 390 5 view .LVU400
 1562 0708 0420A0E3 		mov	r2, #4	@,
 1563 070c 0730A0E1 		mov	r3, r7	@, fp
 1564 0710 0110A0E3 		mov	r1, #1	@,
 1565 0714 90009FE5 		ldr	r0, .L105+16	@,
 1566 0718 FEFFFFEB 		bl	fwrite		@
 1567              	.LVL101:
 391:armwave.c     **** 
 392:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1568              		.loc 1 392 5 view .LVU401
 1569              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1570              		.loc 1 392 37 is_stmt 0 view .LVU402
 1571 071c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1572              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1573              		.loc 1 392 5 view .LVU403
 1574 0720 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1575 0724 180000DA 		ble	.L98		@,
 1576 0728 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1577              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 395:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 396:armwave.c     **** 
 397:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1578              		.loc 1 397 13 view .LVU404
 1579 072c 7C909FE5 		ldr	r9, .L105+20	@ tmp152,
 1580              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1581              		.loc 1 392 12 view .LVU405
 1582 0730 0050A0E3 		mov	r5, #0	@ yy,
 1583              	.LVL102:
 1584              	.L99:
 1585              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1586              		.loc 1 393 9 view .LVU406
 1587 0734 000053E3 		cmp	r3, #0	@ _13,
 1588              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1589              		.loc 1 393 16 view .LVU407
 1590 0738 0040A0C3 		movgt	r4, #0	@ xx,
 1591              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1592              		.loc 1 393 9 view .LVU408
 1593 073c 0F0000DA 		ble	.L101		@,
 1594              	.LVL103:
 1595              	.L100:
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1596              		.loc 1 394 13 is_stmt 1 discriminator 3 view .LVU409
 1597              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1598              		.loc 1 394 29 is_stmt 0 discriminator 3 view .LVU410
 1599 0740 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1600              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1601              		.loc 1 397 13 discriminator 3 view .LVU411
 1602 0744 0910A0E1 		mov	r1, r9	@, tmp152
 1603 0748 0700A0E1 		mov	r0, r7	@, fp
 1604              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1605              		.loc 1 394 18 discriminator 3 view .LVU412
 1606 074c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1607              	.LVL104:
 1608              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU413
 1609              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1610              		.loc 1 393 58 is_stmt 0 discriminator 3 view .LVU414
 1611 0750 014084E2 		add	r4, r4, #1	@ xx, xx,
 1612              	.LVL105:
 1613              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1614              		.loc 1 397 81 discriminator 3 view .LVU415
 1615 0754 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1616              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1617              		.loc 1 397 61 discriminator 3 view .LVU416
 1618 0758 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1619              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1620              		.loc 1 397 13 discriminator 3 view .LVU417
 1621 075c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1622 0760 7330EFE6 		uxtb	r3, r3	@, tmp142
 1623 0764 00C08DE5 		str	ip, [sp]	@ tmp147,
 1624 0768 7220EFE6 		uxtb	r2, r2	@, data
 1625              	.LVL106:
 1626              		.loc 1 397 13 discriminator 3 view .LVU418
 1627 076c FEFFFFEB 		bl	fprintf		@
 1628              	.LVL107:
 1629              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1630              		.loc 1 393 41 discriminator 3 view .LVU419
 1631 0770 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1632              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1633              		.loc 1 393 9 discriminator 3 view .LVU420
 1634 0774 040053E1 		cmp	r3, r4	@ _13, xx
 1635 0778 F0FFFFCA 		bgt	.L100		@,
 1636 077c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1637              	.LVL108:
 1638              	.L101:
 1639              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1640              		.loc 1 392 55 discriminator 2 view .LVU421
 1641 0780 015085E2 		add	r5, r5, #1	@ yy, yy,
 1642              	.LVL109:
 1643              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1644              		.loc 1 392 5 discriminator 2 view .LVU422
 1645 0784 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1646 0788 E9FFFFBA 		blt	.L99		@,
 1647              	.LVL110:
 1648              	.L98:
 398:armwave.c     ****         }
 399:armwave.c     ****     }
 400:armwave.c     **** 
 401:armwave.c     ****     fclose(fp);
 1649              		.loc 1 401 5 is_stmt 1 view .LVU423
 1650 078c 0700A0E1 		mov	r0, r7	@, fp
 1651              	@ armwave.c:402: }
 402:armwave.c     **** }
 1652              		.loc 1 402 1 is_stmt 0 view .LVU424
 1653 0790 0CD08DE2 		add	sp, sp, #12	@,,
 1654              		.cfi_def_cfa_offset 28
 1655              		@ sp needed	@
 1656 0794 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1657              		.cfi_restore 14
 1658              		.cfi_restore 9
 1659              		.cfi_restore 8
 1660              		.cfi_restore 7
 1661              		.cfi_restore 6
 1662              		.cfi_restore 5
 1663              		.cfi_restore 4
 1664              		.cfi_def_cfa_offset 0
 1665              	.LVL111:
 1666              	@ armwave.c:401:     fclose(fp);
 401:armwave.c     **** }
 1667              		.loc 1 401 5 view .LVU425
 1668 0798 FEFFFFEA 		b	fclose		@
 1669              	.LVL112:
 1670              	.L106:
 401:armwave.c     **** }
 1671              		.loc 1 401 5 view .LVU426
 1672              		.align	2
 1673              	.L105:
 1674 079c C8010000 		.word	.LC14
 1675 07a0 00000000 		.word	g_armwave_state
 1676 07a4 CC010000 		.word	.LC15
 1677 07a8 D0010000 		.word	.LC16
 1678 07ac D8010000 		.word	.LC17
 1679 07b0 E0010000 		.word	.LC18
 1680              		.cfi_endproc
 1681              	.LFE67:
 1683              		.align	2
 1684              		.global	armwave_test_init
 1685              		.syntax unified
 1686              		.arm
 1687              		.fpu vfp
 1689              	armwave_test_init:
 1690              	.LVL113:
 1691              	.LFB68:
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Initialise some test functionry.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 408:armwave.c     **** {
 1692              		.loc 1 408 1 is_stmt 1 view -0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     test_create_gamma();
 1696              		.loc 1 409 5 view .LVU428
 1697              	.LBB12:
 1698              	.LBI12:
  34:armwave.c     **** {
 1699              		.loc 1 34 6 view .LVU429
  34:armwave.c     **** {
 1700              		.loc 1 34 6 is_stmt 0 view .LVU430
 1701              	.LBE12:
 1702              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1703              		.loc 1 408 1 view .LVU431
 1704 07b4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1705              		.cfi_def_cfa_offset 32
 1706              		.cfi_offset 4, -32
 1707              		.cfi_offset 5, -28
 1708              		.cfi_offset 6, -24
 1709              		.cfi_offset 7, -20
 1710              		.cfi_offset 8, -16
 1711              		.cfi_offset 9, -12
 1712              		.cfi_offset 10, -8
 1713              		.cfi_offset 14, -4
 1714 07b8 068B2DED 		vpush.64	{d8, d9, d10}	@
 1715              		.cfi_def_cfa_offset 56
 1716              		.cfi_offset 80, -56
 1717              		.cfi_offset 81, -52
 1718              		.cfi_offset 82, -48
 1719              		.cfi_offset 83, -44
 1720              		.cfi_offset 84, -40
 1721              		.cfi_offset 85, -36
 1722 07bc C0409FE5 		ldr	r4, .L111+20	@ ivtmp.79,
 1723              	.LBB15:
 1724              	.LBB13:
 1725              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1726              		.loc 1 40 32 view .LVU432
 1727 07c0 2EAA9FED 		vldr.32	s20, .L111+16	@ tmp136,
 1728              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1729              		.loc 1 40 26 view .LVU433
 1730 07c4 299B9FED 		vldr.64	d9, .L111	@ tmp151,
 1731              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1732              		.loc 1 40 49 view .LVU434
 1733 07c8 2A8B9FED 		vldr.64	d8, .L111+8	@ tmp139,
 1734 07cc 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1735              	.LBE13:
 1736              	.LBE15:
 1737              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1738              		.loc 1 408 1 view .LVU435
 1739 07d0 10D04DE2 		sub	sp, sp, #16	@,,
 1740              		.cfi_def_cfa_offset 72
 1741              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1742              		.loc 1 408 1 view .LVU436
 1743 07d4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1744 07d8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1745 07dc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1746 07e0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1747 07e4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1748 07e8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1749              	.LVL114:
 1750              	.L108:
 1751              	.LBB16:
 1752              	.LBB14:
  40:armwave.c     ****     }
 1753              		.loc 1 40 9 is_stmt 1 view .LVU437
 1754              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1755              		.loc 1 40 32 is_stmt 0 view .LVU438
 1756 07ec 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1757              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1758              		.loc 1 40 26 view .LVU439
 1759 07f0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1760              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1761              		.loc 1 40 32 view .LVU440
 1762 07f4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1763 07f8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1764 07fc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1765              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1766              		.loc 1 40 26 view .LVU441
 1767 0800 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1768 0804 FEFFFFEB 		bl	pow		@
 1769              	.LVL115:
 1770              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1771              		.loc 1 40 49 view .LVU442
 1772 0808 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1773              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1774              		.loc 1 40 24 view .LVU443
 1775 080c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1776 0810 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1777 0814 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1778              	.LVL116:
 1779              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1780              		.loc 1 39 5 view .LVU444
 1781 0818 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1782 081c F2FFFF1A 		bne	.L108		@,
 1783              	.LVL117:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1784              		.loc 1 39 5 view .LVU445
 1785              	.LBE14:
 1786              	.LBE16:
 410:armwave.c     **** 
 411:armwave.c     ****     // make ch1 yellowish by default
 412:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1787              		.loc 1 412 5 is_stmt 1 view .LVU446
 1788              	.LBB17:
 1789              	.LBI17:
 365:armwave.c     **** {
 1790              		.loc 1 365 6 view .LVU447
 1791              	.LBB18:
 368:armwave.c     ****         case 1:
 1792              		.loc 1 368 5 view .LVU448
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1793              		.loc 1 370 13 view .LVU449
 371:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1794              		.loc 1 371 13 view .LVU450
 1795              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1796              		.loc 1 370 41 is_stmt 0 view .LVU451
 1797 0820 60C09FE5 		ldr	ip, .L111+24	@ tmp142,
 1798 0824 60409FE5 		ldr	r4, .L111+28	@ tmp143,
 1799              	.LBE18:
 1800              	.LBE17:
 1801              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 413:armwave.c     **** 
 414:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1802              		.loc 1 414 5 view .LVU452
 1803 0828 0000A0E3 		mov	r0, #0	@ tmp147,
 1804              	.LBB22:
 1805              	.LBB19:
 1806              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 1807              		.loc 1 372 41 view .LVU453
 1808 082c FAE0A0E3 		mov	lr, #250	@ tmp146,
 1809              	.LBE19:
 1810              	.LBE22:
 1811              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1812              		.loc 1 414 5 view .LVU454
 1813 0830 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1814 0834 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1815 0838 00808DE5 		str	r8, [sp]	@ render_width,
 1816 083c 0610A0E1 		mov	r1, r6	@, tmp3
 1817 0840 0720A0E1 		mov	r2, r7	@, nwaves
 1818              	.LBB23:
 1819              	.LBB20:
 1820              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1821              		.loc 1 370 41 view .LVU455
 1822 0844 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 372:armwave.c     ****             break;
 1823              		.loc 1 372 13 is_stmt 1 view .LVU456
 1824              	.LBE20:
 1825              	.LBE23:
 1826              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1827              		.loc 1 414 5 is_stmt 0 view .LVU457
 1828 0848 0630A0E1 		mov	r3, r6	@, wave_size
 1829              	.LBB24:
 1830              	.LBB21:
 1831              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 1832              		.loc 1 372 41 view .LVU458
 1833 084c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 373:armwave.c     ****     }
 1834              		.loc 1 373 13 is_stmt 1 view .LVU459
 1835              	.LVL118:
 373:armwave.c     ****     }
 1836              		.loc 1 373 13 is_stmt 0 view .LVU460
 1837              	.LBE21:
 1838              	.LBE24:
 1839              		.loc 1 414 5 is_stmt 1 view .LVU461
 1840 0850 FEFFFFEB 		bl	armwave_setup_render		@
 1841              	.LVL119:
 415:armwave.c     **** 
 416:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1842              		.loc 1 416 5 view .LVU462
 1843 0854 34109FE5 		ldr	r1, .L111+32	@,
 1844 0858 34009FE5 		ldr	r0, .L111+36	@,
 1845              	@ armwave.c:417: }
 417:armwave.c     **** }
 1846              		.loc 1 417 1 is_stmt 0 view .LVU463
 1847 085c 10D08DE2 		add	sp, sp, #16	@,,
 1848              		.cfi_def_cfa_offset 56
 1849              		@ sp needed	@
 1850 0860 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1851              		.cfi_restore 84
 1852              		.cfi_restore 85
 1853              		.cfi_restore 82
 1854              		.cfi_restore 83
 1855              		.cfi_restore 80
 1856              		.cfi_restore 81
 1857              		.cfi_def_cfa_offset 32
 1858 0864 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1859              		.cfi_restore 14
 1860              		.cfi_restore 10
 1861              		.cfi_restore 9
 1862              		.cfi_restore 8
 1863              		.cfi_restore 7
 1864              		.cfi_restore 6
 1865              		.cfi_restore 5
 1866              		.cfi_restore 4
 1867              		.cfi_def_cfa_offset 0
 1868              	.LVL120:
 1869              	@ armwave.c:416:     printf("armwave version: %s\n", ARMWAVE_VER);
 416:armwave.c     **** }
 1870              		.loc 1 416 5 view .LVU464
 1871 0868 FEFFFFEA 		b	printf		@
 1872              	.LVL121:
 1873              	.L112:
 1874 086c 0000A0E1 		.align	3
 1875              	.L111:
 1876 0870 000000C0 		.word	-1073741824
 1877 0874 CCCCEC3F 		.word	1072483532
 1878 0878 00000000 		.word	0
 1879 087c 00E06F40 		.word	1081073664
 1880 0880 00007F43 		.word	1132396544
 1881 0884 FFFFFFFF 		.word	gamma_table-1
 1882 0888 00000000 		.word	g_armwave_state
 1883 088c F609F406 		.word	116656630
 1884 0890 00000000 		.word	.LC0
 1885 0894 08000000 		.word	.LC1
 1886              		.cfi_endproc
 1887              	.LFE68:
 1889              		.global	__aeabi_idiv
 1890              		.align	2
 1891              		.global	armwave_test_generate
 1892              		.syntax unified
 1893              		.arm
 1894              		.fpu vfp
 1896              	armwave_test_generate:
 1897              	.LFB69:
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Fill buffers with test funtionry.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_generate()
 423:armwave.c     **** {
 1898              		.loc 1 423 1 is_stmt 1 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 24
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 424:armwave.c     ****     uint32_t yy;
 1902              		.loc 1 424 5 view .LVU466
 425:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1903              		.loc 1 425 5 view .LVU467
 1904              	@ armwave.c:423: {
 423:armwave.c     ****     uint32_t yy;
 1905              		.loc 1 423 1 is_stmt 0 view .LVU468
 1906 0898 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1907              		.cfi_def_cfa_offset 36
 1908              		.cfi_offset 4, -36
 1909              		.cfi_offset 5, -32
 1910              		.cfi_offset 6, -28
 1911              		.cfi_offset 7, -24
 1912              		.cfi_offset 8, -20
 1913              		.cfi_offset 9, -16
 1914              		.cfi_offset 10, -12
 1915              		.cfi_offset 11, -8
 1916              		.cfi_offset 14, -4
 1917 089c 24D04DE2 		sub	sp, sp, #36	@,,
 1918              		.cfi_def_cfa_offset 72
 1919              	@ armwave.c:425:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1920              		.loc 1 425 38 view .LVU469
 1921 08a0 18729FE5 		ldr	r7, .L133	@ tmp320,
 1922              	@ armwave.c:427:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 426:armwave.c     **** 
 427:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1923              		.loc 1 427 5 view .LVU470
 1924 08a4 0010A0E3 		mov	r1, #0	@,
 1925              	@ armwave.c:425:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 425:armwave.c     **** 
 1926              		.loc 1 425 14 view .LVU471
 1927 08a8 583097E5 		ldr	r3, [r7, #88]	@ xx_rem, g_armwave_state.target_width
 1928              	@ armwave.c:427:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1929              		.loc 1 427 5 view .LVU472
 1930 08ac 502097E5 		ldr	r2, [r7, #80]	@, g_armwave_state.ch_buff_size
 1931 08b0 040097E5 		ldr	r0, [r7, #4]	@, g_armwave_state.ch1_buffer
 1932              	@ armwave.c:425:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 425:armwave.c     **** 
 1933              		.loc 1 425 14 view .LVU473
 1934 08b4 10308DE5 		str	r3, [sp, #16]	@ xx_rem, %sfp
 1935              	.LVL122:
 1936              		.loc 1 427 5 is_stmt 1 view .LVU474
 1937 08b8 FEFFFFEB 		bl	memset		@
 1938              	.LVL123:
 428:armwave.c     **** 
 429:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 1939              		.loc 1 429 5 view .LVU475
 1940              	@ armwave.c:429:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1941              		.loc 1 429 69 is_stmt 0 view .LVU476
 1942 08bc 446097E5 		ldr	r6, [r7, #68]	@ _10, g_armwave_state.slice_height
 1943              	@ armwave.c:429:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1944              		.loc 1 429 52 view .LVU477
 1945 08c0 580097E5 		ldr	r0, [r7, #88]	@, g_armwave_state.target_width
 1946 08c4 0610A0E1 		mov	r1, r6	@, _10
 1947 08c8 FEFFFFEB 		bl	__aeabi_idiv		@
 1948              	.LVL124:
 1949              	@ armwave.c:429:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1950              		.loc 1 429 5 view .LVU478
 1951 08cc 000050E3 		cmp	r0, #0	@ tmp226
 1952 08d0 7500000A 		beq	.L125		@,
 1953              	@ armwave.c:425:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 425:armwave.c     **** 
 1954              		.loc 1 425 53 view .LVU479
 1955 08d4 0030A0E3 		mov	r3, #0	@ ypos,
 1956              	@ armwave.c:429:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1957              		.loc 1 429 12 view .LVU480
 1958 08d8 03B0A0E1 		mov	fp, r3	@ yy, ypos
 1959              	@ armwave.c:425:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 425:armwave.c     **** 
 1960              		.loc 1 425 53 view .LVU481
 1961 08dc 14308DE5 		str	r3, [sp, #20]	@ ypos, %sfp
 1962              	.LVL125:
 1963              	.L116:
 430:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 431:armwave.c     **** 
 432:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1964              		.loc 1 432 9 is_stmt 1 discriminator 3 view .LVU482
 1965 08e0 9B0606E0 		mul	r6, fp, r6	@ _7, yy, _10
 1966              	.LBB27:
 1967              	.LBB28:
 1968              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 1969              		.loc 1 71 64 is_stmt 0 discriminator 3 view .LVU483
 1970 08e4 243097E5 		ldr	r3, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1971              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 1972              		.loc 1 71 40 discriminator 3 view .LVU484
 1973 08e8 044097E5 		ldr	r4, [r7, #4]	@ _29, g_armwave_state.ch1_buffer
 1974              	.LBE28:
 1975              	.LBE27:
 1976              	@ armwave.c:432:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1977              		.loc 1 432 9 discriminator 3 view .LVU485
 1978 08ec 480097E5 		ldr	r0, [r7, #72]	@ _9, g_armwave_state.slice_record_height
 1979              	.LBB31:
 1980              	.LBB29:
 1981              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 1982              		.loc 1 71 64 discriminator 3 view .LVU486
 1983 08f0 930603E0 		mul	r3, r3, r6	@ tmp230, g_armwave_state.cmp_x_bitdepth_scale, _7
 1984              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 1985              		.loc 1 73 5 discriminator 3 view .LVU487
 1986 08f4 0420A0E1 		mov	r2, r4	@, _29
 1987              	.LBE29:
 1988              	.LBE31:
 1989              	@ armwave.c:432:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1990              		.loc 1 432 9 discriminator 3 view .LVU488
 1991 08f8 0C008DE5 		str	r0, [sp, #12]	@ _9, %sfp
 1992              	.LVL126:
 1993              	.LBB32:
 1994              	.LBI27:
  62:armwave.c     **** {
 1995              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU489
 1996              	.LBB30:
  64:armwave.c     ****     uint32_t value, word;
 1997              		.loc 1 64 5 discriminator 3 view .LVU490
  65:armwave.c     ****     uint8_t *wave_base;
 1998              		.loc 1 65 5 discriminator 3 view .LVU491
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1999              		.loc 1 66 5 discriminator 3 view .LVU492
  67:armwave.c     ****     uint8_t *write_buffer;
 2000              		.loc 1 67 5 discriminator 3 view .LVU493
  68:armwave.c     **** 
 2001              		.loc 1 68 5 discriminator 3 view .LVU494
  71:armwave.c     **** 
 2002              		.loc 1 71 5 discriminator 3 view .LVU495
 2003              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 2004              		.loc 1 71 104 is_stmt 0 discriminator 3 view .LVU496
 2005 08fc 2334A0E1 		lsr	r3, r3, #8	@ _32, tmp230,
 2006              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 2007              		.loc 1 71 23 discriminator 3 view .LVU497
 2008 0900 034084E0 		add	r4, r4, r3	@ write_buffer_base, _29, _32
 2009              	.LVL127:
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2010              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU498
 2011 0904 04008DE5 		str	r0, [sp, #4]	@ _9,
 2012 0908 00608DE5 		str	r6, [sp]	@ _7,
 2013 090c 0410A0E1 		mov	r1, r4	@, write_buffer_base
 2014 0910 AC019FE5 		ldr	r0, .L133+4	@,
 2015              	.LVL128:
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2016              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU499
 2017 0914 FEFFFFEB 		bl	printf		@
 2018              	.LVL129:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2019              		.loc 1 78 5 is_stmt 1 discriminator 3 view .LVU500
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2020              		.loc 1 78 5 is_stmt 0 discriminator 3 view .LVU501
 2021 0918 383097E5 		ldr	r3, [r7, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 2022 091c 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 2023 0920 4F0000DA 		ble	.L123		@,
 2024 0924 0C309DE5 		ldr	r3, [sp, #12]	@ _9, %sfp
 2025 0928 000053E3 		cmp	r3, #0	@ _9,
 2026 092c 4C00000A 		beq	.L123		@,
 2027              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2028              		.loc 1 78 11 view .LVU502
 2029 0930 0080A0E3 		mov	r8, #0	@ w,
 2030 0934 043046E2 		sub	r3, r6, #4	@ tmp319, _7,
 2031 0938 18308DE5 		str	r3, [sp, #24]	@ tmp319, %sfp
 2032 093c 1CB08DE5 		str	fp, [sp, #28]	@ yy, %sfp
 2033              	.LVL130:
 2034              	.L122:
  79:armwave.c     **** 
 2035              		.loc 1 79 9 is_stmt 1 view .LVU503
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2036              		.loc 1 83 9 view .LVU504
 2037              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 2038              		.loc 1 79 64 is_stmt 0 view .LVU505
 2039 0940 343097E5 		ldr	r3, [r7, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2040 0944 18209DE5 		ldr	r2, [sp, #24]	@ tmp319, %sfp
 2041 0948 14E097E5 		ldr	lr, [r7, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2042 094c 932823E0 		mla	r3, r3, r8, r2	@ tmp246, g_armwave_state.wave_stride, w, tmp319
 2043              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2044              		.loc 1 83 16 view .LVU506
 2045 0950 0010A0E3 		mov	r1, #0	@ yy,
 2046 0954 03E08EE0 		add	lr, lr, r3	@ ivtmp.85, g_armwave_state.wave_buffer, tmp246
 2047              	.LVL131:
 2048              	.L121:
  84:armwave.c     **** 
 2049              		.loc 1 84 13 is_stmt 1 view .LVU507
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2050              		.loc 1 95 17 view .LVU508
  96:armwave.c     ****                 word >>= 8;
 2051              		.loc 1 96 17 view .LVU509
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2052              		.loc 1 95 17 view .LVU510
  96:armwave.c     ****                 word >>= 8;
 2053              		.loc 1 96 17 view .LVU511
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2054              		.loc 1 95 17 view .LVU512
  96:armwave.c     ****                 word >>= 8;
 2055              		.loc 1 96 17 view .LVU513
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2056              		.loc 1 95 17 view .LVU514
  96:armwave.c     ****                 word >>= 8;
 2057              		.loc 1 96 17 view .LVU515
 2058              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 2059              		.loc 1 84 18 is_stmt 0 view .LVU516
 2060 0958 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _263, offset: 0B]
 2061              	.LVL132:
  86:armwave.c     ****                 scale_value = word & 0xff;
 2062              		.loc 1 86 13 is_stmt 1 view .LVU517
  87:armwave.c     ****                 
 2063              		.loc 1 87 17 view .LVU518
  90:armwave.c     ****                     continue;
 2064              		.loc 1 90 17 view .LVU519
 2065              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2066              		.loc 1 95 64 is_stmt 0 view .LVU520
 2067 095c 01A081E2 		add	r10, r1, #1	@ tmp273, yy,
 2068              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2069              		.loc 1 90 20 view .LVU521
 2070 0960 FFC013E2 		ands	ip, r3, #255	@ scale_value, word,
 2071 0964 0190A003 		moveq	r9, #1	@ tmp249,
 2072 0968 0090A013 		movne	r9, #0	@ tmp249,
 2073              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2074              		.loc 1 90 19 view .LVU522
 2075 096c FF005CE3 		cmp	ip, #255	@ scale_value,
 2076 0970 01908903 		orreq	r9, r9, #1	@,, tmp254, tmp249
 2077 0974 000059E3 		cmp	r9, #0	@ tmp254,
 2078              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2079              		.loc 1 95 64 view .LVU523
 2080 0978 026081E2 		add	r6, r1, #2	@ tmp291, yy,
 2081 097c 035081E2 		add	r5, r1, #3	@ tmp308, yy,
 2082              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2083              		.loc 1 97 22 view .LVU524
 2084 0980 2304A0E1 		lsr	r0, r3, #8	@ word, word,
 2085 0984 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 2086              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2087              		.loc 1 90 19 view .LVU525
 2088 0988 2C00001A 		bne	.L124		@,
 2089              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2090              		.loc 1 95 64 view .LVU526
 2091 098c 249097E5 		ldr	r9, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2092              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2093              		.loc 1 90 20 view .LVU527
 2094 0990 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 2095 0994 01B0A003 		moveq	fp, #1	@ tmp266,
 2096              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2097              		.loc 1 95 64 view .LVU528
 2098 0998 990109E0 		mul	r9, r9, r1	@ tmp256, g_armwave_state.cmp_x_bitdepth_scale, yy
 2099              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2100              		.loc 1 90 20 view .LVU529
 2101 099c 00B0A013 		movne	fp, #0	@ tmp266,
 2102              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2103              		.loc 1 90 19 view .LVU530
 2104 09a0 FF0050E3 		cmp	r0, #255	@ scale_value,
 2105 09a4 01B08B03 		orreq	fp, fp, #1	@,, tmp271, tmp266
 2106              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2107              		.loc 1 96 47 view .LVU531
 2108 09a8 29C48CE0 		add	ip, ip, r9, lsr #8	@ tmp259, scale_value, tmp256,
 2109              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2110              		.loc 1 90 19 view .LVU532
 2111 09ac 00005BE3 		cmp	fp, #0	@ tmp271,
 2112              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2113              		.loc 1 96 47 view .LVU533
 2114 09b0 0C90D4E7 		ldrb	r9, [r4, ip]	@ zero_extendqisi2	@ *_95, *_95
 2115 09b4 019089E2 		add	r9, r9, #1	@ tmp262, *_95,
 2116 09b8 0C90C4E7 		strb	r9, [r4, ip]	@ tmp262, *_95
 2117              	.LVL133:
  97:armwave.c     ****             }
 2118              		.loc 1 97 17 is_stmt 1 view .LVU534
  87:armwave.c     ****                 
 2119              		.loc 1 87 17 view .LVU535
  90:armwave.c     ****                     continue;
 2120              		.loc 1 90 17 view .LVU536
 2121              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2122              		.loc 1 90 19 is_stmt 0 view .LVU537
 2123 09bc 1F00001A 		bne	.L124		@,
 2124              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2125              		.loc 1 95 64 view .LVU538
 2126 09c0 24C097E5 		ldr	ip, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2127              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2128              		.loc 1 90 20 view .LVU539
 2129 09c4 FF2012E2 		ands	r2, r2, #255	@ scale_value, word,
 2130 09c8 0190A003 		moveq	r9, #1	@ tmp284,
 2131              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2132              		.loc 1 95 64 view .LVU540
 2133 09cc 9C0A0CE0 		mul	ip, ip, r10	@ tmp274, g_armwave_state.cmp_x_bitdepth_scale, tmp273
 2134              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2135              		.loc 1 90 20 view .LVU541
 2136 09d0 0090A013 		movne	r9, #0	@ tmp284,
 2137              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2138              		.loc 1 90 19 view .LVU542
 2139 09d4 FF0052E3 		cmp	r2, #255	@ scale_value,
 2140 09d8 01908903 		orreq	r9, r9, #1	@,, tmp289, tmp284
 2141              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2142              		.loc 1 96 47 view .LVU543
 2143 09dc 2C0480E0 		add	r0, r0, ip, lsr #8	@ tmp277, scale_value, tmp274,
 2144              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2145              		.loc 1 90 19 view .LVU544
 2146 09e0 000059E3 		cmp	r9, #0	@ tmp289,
 2147              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2148              		.loc 1 96 47 view .LVU545
 2149 09e4 00C0D4E7 		ldrb	ip, [r4, r0]	@ zero_extendqisi2	@ *_122, *_122
 2150 09e8 01C08CE2 		add	ip, ip, #1	@ tmp280, *_122,
 2151 09ec 00C0C4E7 		strb	ip, [r4, r0]	@ tmp280, *_122
  97:armwave.c     ****             }
 2152              		.loc 1 97 17 is_stmt 1 view .LVU546
 2153              	.LVL134:
  87:armwave.c     ****                 
 2154              		.loc 1 87 17 view .LVU547
  90:armwave.c     ****                     continue;
 2155              		.loc 1 90 17 view .LVU548
 2156              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2157              		.loc 1 90 19 is_stmt 0 view .LVU549
 2158 09f0 1200001A 		bne	.L124		@,
 2159              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2160              		.loc 1 95 64 view .LVU550
 2161 09f4 240097E5 		ldr	r0, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2162              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2163              		.loc 1 90 20 view .LVU551
 2164 09f8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 2165              	.LVL135:
  90:armwave.c     ****                     continue;
 2166              		.loc 1 90 20 view .LVU552
 2167 09fc 01C0A003 		moveq	ip, #1	@ tmp301,
 2168              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2169              		.loc 1 95 64 view .LVU553
 2170 0a00 900600E0 		mul	r0, r0, r6	@ tmp292, g_armwave_state.cmp_x_bitdepth_scale, tmp291
 2171              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2172              		.loc 1 90 20 view .LVU554
 2173 0a04 00C0A013 		movne	ip, #0	@ tmp301,
 2174              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2175              		.loc 1 90 19 view .LVU555
 2176 0a08 FF0053E3 		cmp	r3, #255	@ word,
 2177 0a0c 01C08C03 		orreq	ip, ip, #1	@,, tmp306, tmp301
 2178              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2179              		.loc 1 96 47 view .LVU556
 2180 0a10 202482E0 		add	r2, r2, r0, lsr #8	@ tmp295, scale_value, tmp292,
 2181              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2182              		.loc 1 90 19 view .LVU557
 2183 0a14 00005CE3 		cmp	ip, #0	@ tmp306,
 2184              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2185              		.loc 1 96 47 view .LVU558
 2186 0a18 0200D4E7 		ldrb	r0, [r4, r2]	@ zero_extendqisi2	@ *_149, *_149
 2187 0a1c 010080E2 		add	r0, r0, #1	@ tmp298, *_149,
 2188 0a20 0200C4E7 		strb	r0, [r4, r2]	@ tmp298, *_149
  97:armwave.c     ****             }
 2189              		.loc 1 97 17 is_stmt 1 view .LVU559
 2190              	.LVL136:
  87:armwave.c     ****                 
 2191              		.loc 1 87 17 view .LVU560
  90:armwave.c     ****                     continue;
 2192              		.loc 1 90 17 view .LVU561
 2193              	@ armwave.c:90:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  90:armwave.c     ****                     continue;
 2194              		.loc 1 90 19 is_stmt 0 view .LVU562
 2195 0a24 0500001A 		bne	.L124		@,
 2196              	@ armwave.c:95:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2197              		.loc 1 95 64 view .LVU563
 2198 0a28 242097E5 		ldr	r2, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2199 0a2c 920502E0 		mul	r2, r2, r5	@ tmp309, g_armwave_state.cmp_x_bitdepth_scale, tmp308
 2200              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2201              		.loc 1 96 47 view .LVU564
 2202 0a30 223483E0 		add	r3, r3, r2, lsr #8	@ tmp312, word, tmp309,
 2203 0a34 0320D4E7 		ldrb	r2, [r4, r3]	@ zero_extendqisi2	@ *_176, *_176
 2204 0a38 012082E2 		add	r2, r2, #1	@ tmp315, *_176,
 2205 0a3c 0320C4E7 		strb	r2, [r4, r3]	@ tmp315, *_176
  97:armwave.c     ****             }
 2206              		.loc 1 97 17 is_stmt 1 view .LVU565
 2207              	.LVL137:
 2208              	.L124:
 2209              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2210              		.loc 1 83 9 is_stmt 0 view .LVU566
 2211 0a40 0C309DE5 		ldr	r3, [sp, #12]	@ _9, %sfp
 2212              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2213              		.loc 1 83 37 view .LVU567
 2214 0a44 041081E2 		add	r1, r1, #4	@ yy, yy,
 2215              	.LVL138:
 2216              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2217              		.loc 1 83 9 view .LVU568
 2218 0a48 010053E1 		cmp	r3, r1	@ _9, yy
 2219 0a4c C1FFFF8A 		bhi	.L121		@,
 2220              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2221              		.loc 1 78 5 view .LVU569
 2222 0a50 383097E5 		ldr	r3, [r7, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 2223              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2224              		.loc 1 78 44 view .LVU570
 2225 0a54 018088E2 		add	r8, r8, #1	@ w, w,
 2226              	.LVL139:
 2227              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2228              		.loc 1 78 5 view .LVU571
 2229 0a58 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 2230 0a5c B7FFFFBA 		blt	.L122		@,
 2231 0a60 1CB09DE5 		ldr	fp, [sp, #28]	@ yy, %sfp
 2232              	.LVL140:
 2233              	.L123:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2234              		.loc 1 78 5 view .LVU572
 2235              	.LBE30:
 2236              	.LBE32:
 433:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2237              		.loc 1 433 9 is_stmt 1 view .LVU573
 2238              	@ armwave.c:433:         xx_rem -= g_armwave_state.slice_height;
 2239              		.loc 1 433 34 is_stmt 0 view .LVU574
 2240 0a64 446097E5 		ldr	r6, [r7, #68]	@ _10, g_armwave_state.slice_height
 2241              	@ armwave.c:429:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 429:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2242              		.loc 1 429 52 view .LVU575
 2243 0a68 580097E5 		ldr	r0, [r7, #88]	@, g_armwave_state.target_width
 2244 0a6c 0610A0E1 		mov	r1, r6	@, _10
 2245 0a70 FEFFFFEB 		bl	__aeabi_idiv		@
 2246              	.LVL141:
 2247              	@ armwave.c:433:         xx_rem -= g_armwave_state.slice_height;
 2248              		.loc 1 433 16 view .LVU576
 2249 0a74 10309DE5 		ldr	r3, [sp, #16]	@ xx_rem, %sfp
 2250              	@ armwave.c:429:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 429:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2251              		.loc 1 429 87 view .LVU577
 2252 0a78 01B08BE2 		add	fp, fp, #1	@ yy, yy,
 2253              	@ armwave.c:433:         xx_rem -= g_armwave_state.slice_height;
 2254              		.loc 1 433 16 view .LVU578
 2255 0a7c 063043E0 		sub	r3, r3, r6	@ xx_rem, xx_rem, _10
 2256 0a80 10308DE5 		str	r3, [sp, #16]	@ xx_rem, %sfp
 2257              	.LVL142:
 434:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2258              		.loc 1 434 9 is_stmt 1 view .LVU579
 2259              	@ armwave.c:434:         ypos += g_armwave_state.slice_height;
 2260              		.loc 1 434 14 is_stmt 0 view .LVU580
 2261 0a84 14309DE5 		ldr	r3, [sp, #20]	@ ypos, %sfp
 2262              	.LVL143:
 2263              		.loc 1 434 14 view .LVU581
 2264 0a88 063083E0 		add	r3, r3, r6	@ ypos, ypos, _10
 2265 0a8c 14308DE5 		str	r3, [sp, #20]	@ ypos, %sfp
 2266              	.LVL144:
 2267              	@ armwave.c:429:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 429:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2268              		.loc 1 429 5 view .LVU582
 2269 0a90 0B0050E1 		cmp	r0, fp	@, yy
 2270 0a94 91FFFF8A 		bhi	.L116		@,
 2271 0a98 0300A0E1 		mov	r0, r3	@, ypos
 435:armwave.c     ****     }
 436:armwave.c     **** 
 437:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2272              		.loc 1 437 5 is_stmt 1 view .LVU583
 2273 0a9c 10109DE5 		ldr	r1, [sp, #16]	@, %sfp
 2274              	@ armwave.c:438: }
 438:armwave.c     **** }
 2275              		.loc 1 438 1 is_stmt 0 view .LVU584
 2276 0aa0 24D08DE2 		add	sp, sp, #36	@,,
 2277              		.cfi_remember_state
 2278              		.cfi_def_cfa_offset 36
 2279              		@ sp needed	@
 2280 0aa4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2281              		.cfi_restore 14
 2282              		.cfi_restore 11
 2283              		.cfi_restore 10
 2284              		.cfi_restore 9
 2285              		.cfi_restore 8
 2286              		.cfi_restore 7
 2287              		.cfi_restore 6
 2288              		.cfi_restore 5
 2289              		.cfi_restore 4
 2290              		.cfi_def_cfa_offset 0
 2291              	.LVL145:
 2292              	@ armwave.c:437:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 437:armwave.c     **** }
 2293              		.loc 1 437 5 view .LVU585
 2294 0aa8 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2295              	.LVL146:
 2296              	.L125:
 2297              		.cfi_restore_state
 2298              	@ armwave.c:425:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 425:armwave.c     **** 
 2299              		.loc 1 425 53 view .LVU586
 2300 0aac 14008DE5 		str	r0, [sp, #20]	@ tmp226, %sfp
 437:armwave.c     **** }
 2301              		.loc 1 437 5 is_stmt 1 view .LVU587
 2302 0ab0 10109DE5 		ldr	r1, [sp, #16]	@, %sfp
 2303              	@ armwave.c:438: }
 2304              		.loc 1 438 1 is_stmt 0 view .LVU588
 2305 0ab4 24D08DE2 		add	sp, sp, #36	@,,
 2306              		.cfi_def_cfa_offset 36
 2307              		@ sp needed	@
 2308 0ab8 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2309              		.cfi_restore 14
 2310              		.cfi_restore 11
 2311              		.cfi_restore 10
 2312              		.cfi_restore 9
 2313              		.cfi_restore 8
 2314              		.cfi_restore 7
 2315              		.cfi_restore 6
 2316              		.cfi_restore 5
 2317              		.cfi_restore 4
 2318              		.cfi_def_cfa_offset 0
 2319              	@ armwave.c:437:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 437:armwave.c     **** }
 2320              		.loc 1 437 5 view .LVU589
 2321 0abc FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2322              	.LVL147:
 2323              	.L134:
 2324              		.align	2
 2325              	.L133:
 2326 0ac0 00000000 		.word	g_armwave_state
 2327 0ac4 20000000 		.word	.LC2
 2328              		.cfi_endproc
 2329              	.LFE69:
 2331              		.align	2
 2332              		.global	armwave_test_fill_outbuf
 2333              		.syntax unified
 2334              		.arm
 2335              		.fpu vfp
 2337              	armwave_test_fill_outbuf:
 2338              	.LFB70:
 439:armwave.c     **** 
 440:armwave.c     **** /*
 441:armwave.c     ****  * Render image to the local allocated buffer.
 442:armwave.c     ****  */
 443:armwave.c     **** void armwave_test_fill_outbuf()
 444:armwave.c     **** {
 2339              		.loc 1 444 1 is_stmt 1 view -0
 2340              		.cfi_startproc
 2341              		@ args = 0, pretend = 0, frame = 8
 2342              		@ frame_needed = 0, uses_anonymous_args = 0
 445:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2343              		.loc 1 445 5 view .LVU591
 2344 0ac8 50C19FE5 		ldr	ip, .L156	@ tmp204,
 2345              	@ armwave.c:444: {
 444:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2346              		.loc 1 444 1 is_stmt 0 view .LVU592
 2347 0acc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2348              		.cfi_def_cfa_offset 36
 2349              		.cfi_offset 4, -36
 2350              		.cfi_offset 5, -32
 2351              		.cfi_offset 6, -28
 2352              		.cfi_offset 7, -24
 2353              		.cfi_offset 8, -20
 2354              		.cfi_offset 9, -16
 2355              		.cfi_offset 10, -12
 2356              		.cfi_offset 11, -8
 2357              		.cfi_offset 14, -4
 2358 0ad0 0CD04DE2 		sub	sp, sp, #12	@,,
 2359              		.cfi_def_cfa_offset 48
 2360              	@ armwave.c:445:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2361              		.loc 1 445 5 view .LVU593
 2362 0ad4 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2363              	.LVL148:
 2364              	.LBB35:
 2365              	.LBI35:
 162:armwave.c     **** {
 2366              		.loc 1 162 6 is_stmt 1 view .LVU594
 2367              	.LBB36:
 164:armwave.c     ****     // uint32_t ysub;
 2368              		.loc 1 164 5 view .LVU595
 166:armwave.c     ****     uint8_t r, g, b, value; 
 2369              		.loc 1 166 5 view .LVU596
 167:armwave.c     ****     // uint8_t row;
 2370              		.loc 1 167 5 view .LVU597
 169:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2371              		.loc 1 169 5 view .LVU598
 2372              	@ armwave.c:169:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 169:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2373              		.loc 1 169 15 is_stmt 0 view .LVU599
 2374 0ad8 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2375              	.LVL149:
 170:armwave.c     ****     uint32_t offset;
 2376              		.loc 1 170 5 is_stmt 1 view .LVU600
 171:armwave.c     **** 
 2377              		.loc 1 171 5 view .LVU601
 173:armwave.c     **** 
 2378              		.loc 1 173 5 view .LVU602
 2379 0adc 000058E3 		cmp	r8, #0	@ _1,
 2380 0ae0 4900000A 		beq	.L154		@,
 175:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2381              		.loc 1 175 5 view .LVU603
 2382              	@ armwave.c:175:     npix = g_armwave_state.target_width * 256; 
 175:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2383              		.loc 1 175 10 is_stmt 0 view .LVU604
 2384 0ae4 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2385 0ae8 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2386              	.LVL150:
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2387              		.loc 1 178 5 is_stmt 1 view .LVU605
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2388              		.loc 1 178 5 is_stmt 0 view .LVU606
 2389 0aec 000057E3 		cmp	r7, #0	@ npix,
 2390 0af0 0A0000DA 		ble	.L135		@,
 2391              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2392              		.loc 1 190 52 view .LVU607
 2393 0af4 FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2394              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2395              		.loc 1 191 52 view .LVU608
 2396 0af8 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2397              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     **** 
 2398              		.loc 1 192 52 view .LVU609
 2399 0afc F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2400              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2401              		.loc 1 214 57 view .LVU610
 2402 0b00 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2403              	@ armwave.c:178:     for(n = 0; n < npix; n += 4) {
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2404              		.loc 1 178 11 view .LVU611
 2405 0b04 00E0A0E3 		mov	lr, #0	@ n,
 2406              	.LVL151:
 2407              	.L142:
 182:armwave.c     **** 
 2408              		.loc 1 182 9 is_stmt 1 view .LVU612
 2409              	@ armwave.c:182:         wave_word = *base_32ptr++;
 182:armwave.c     **** 
 2410              		.loc 1 182 19 is_stmt 0 view .LVU613
 2411 0b08 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2412              	.LVL152:
 184:armwave.c     ****             for(w = 0; w < 4; w++) {
 2413              		.loc 1 184 9 is_stmt 1 view .LVU614
 2414              	@ armwave.c:184:         if(COND_UNLIKELY(wave_word != 0)) {
 184:armwave.c     ****             for(w = 0; w < 4; w++) {
 2415              		.loc 1 184 11 is_stmt 0 view .LVU615
 2416 0b0c 000050E3 		cmp	r0, #0	@ wave_word,
 2417 0b10 0400001A 		bne	.L151		@,
 2418 0b14 04E08EE2 		add	lr, lr, #4	@ n, n,
 2419              	.L138:
 2420              	.LVL153:
 2421              	@ armwave.c:178:     for(n = 0; n < npix; n += 4) {
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2422              		.loc 1 178 5 view .LVU616
 2423 0b18 0E0057E1 		cmp	r7, lr	@ npix, n
 2424 0b1c F9FFFFCA 		bgt	.L142		@,
 2425              	.LVL154:
 2426              	.L135:
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2427              		.loc 1 178 5 view .LVU617
 2428              	.LBE36:
 2429              	.LBE35:
 2430              	@ armwave.c:446: }
 446:armwave.c     **** }
 2431              		.loc 1 446 1 view .LVU618
 2432 0b20 0CD08DE2 		add	sp, sp, #12	@,,
 2433              		.cfi_remember_state
 2434              		.cfi_def_cfa_offset 36
 2435              		@ sp needed	@
 2436 0b24 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2437              	.LVL155:
 2438              	.L151:
 2439              		.cfi_restore_state
 2440              	.LBB38:
 2441              	.LBB37:
 2442              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2443              		.loc 1 189 19 view .LVU619
 2444 0b28 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2445              	@ armwave.c:184:         if(COND_UNLIKELY(wave_word != 0)) {
 184:armwave.c     ****             for(w = 0; w < 4; w++) {
 2446              		.loc 1 184 11 view .LVU620
 2447 0b2c 0E60A0E1 		mov	r6, lr	@ ivtmp.102, n
 2448              	.LVL156:
 186:armwave.c     ****                 wave_word >>= 8;
 2449              		.loc 1 186 17 is_stmt 1 view .LVU621
 187:armwave.c     **** 
 2450              		.loc 1 187 17 view .LVU622
 2451              	@ armwave.c:187:                 wave_word >>= 8;
 187:armwave.c     **** 
 2452              		.loc 1 187 27 is_stmt 0 view .LVU623
 2453 0b30 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2454              	.LVL157:
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2455              		.loc 1 189 17 is_stmt 1 view .LVU624
 2456 0b34 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.102,
 2457              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2458              		.loc 1 189 19 is_stmt 0 view .LVU625
 2459 0b38 0500001A 		bne	.L155		@,
 2460              	.LVL158:
 2461              	.L139:
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2462              		.loc 1 189 19 view .LVU626
 2463 0b3c 016086E2 		add	r6, r6, #1	@ ivtmp.102, ivtmp.102,
 2464              	@ armwave.c:185:             for(w = 0; w < 4; w++) {
 185:armwave.c     ****                 value = wave_word & 0xff;
 2465              		.loc 1 185 13 view .LVU627
 2466 0b40 06005EE1 		cmp	lr, r6	@ n, ivtmp.102
 2467 0b44 F3FFFF0A 		beq	.L138		@,
 186:armwave.c     ****                 wave_word >>= 8;
 2468              		.loc 1 186 17 is_stmt 1 view .LVU628
 2469              	.LVL159:
 187:armwave.c     **** 
 2470              		.loc 1 187 17 view .LVU629
 2471              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2472              		.loc 1 189 19 is_stmt 0 view .LVU630
 2473 0b48 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2474              	@ armwave.c:187:                 wave_word >>= 8;
 187:armwave.c     **** 
 2475              		.loc 1 187 27 view .LVU631
 2476 0b4c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2477              	.LVL160:
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2478              		.loc 1 189 17 is_stmt 1 view .LVU632
 2479              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2480              		.loc 1 189 19 is_stmt 0 view .LVU633
 2481 0b50 F9FFFF0A 		beq	.L139		@,
 2482              	.L155:
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2483              		.loc 1 190 21 is_stmt 1 view .LVU634
 2484              	.LVL161:
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2485              		.loc 1 191 21 view .LVU635
 192:armwave.c     **** 
 2486              		.loc 1 192 21 view .LVU636
 194:armwave.c     ****                     g = MIN(gg, 255);
 2487              		.loc 1 194 21 view .LVU637
 195:armwave.c     ****                     b = MIN(bb, 255);
 2488              		.loc 1 195 21 view .LVU638
 196:armwave.c     **** 
 2489              		.loc 1 196 21 view .LVU639
 199:armwave.c     **** 
 2490              		.loc 1 199 21 view .LVU640
 2491              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2492              		.loc 1 214 32 is_stmt 0 view .LVU641
 2493 0b54 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.102
 2494              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2495              		.loc 1 215 41 view .LVU642
 2496 0b58 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2497              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2498              		.loc 1 214 40 view .LVU643
 2499 0b5c 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2500              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2501              		.loc 1 215 41 view .LVU644
 2502 0b60 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2503              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     **** 
 2504              		.loc 1 192 55 view .LVU645
 2505 0b64 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2506              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2507              		.loc 1 214 40 view .LVU646
 2508 0b68 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2509              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2510              		.loc 1 215 46 view .LVU647
 2511 0b6c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2512              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2513              		.loc 1 191 55 view .LVU648
 2514 0b70 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2515              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     **** 
 2516              		.loc 1 192 24 view .LVU649
 2517 0b74 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2518              	.LVL162:
 2519              	@ armwave.c:196:                     b = MIN(bb, 255);
 196:armwave.c     **** 
 2520              		.loc 1 196 25 view .LVU650
 2521 0b78 FF0053E3 		cmp	r3, #255	@ bb,
 2522              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2523              		.loc 1 191 24 view .LVU651
 2524 0b7c 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2525              	.LVL163:
 2526              	@ armwave.c:196:                     b = MIN(bb, 255);
 196:armwave.c     **** 
 2527              		.loc 1 196 25 view .LVU652
 2528 0b80 FF30A0A3 		movge	r3, #255	@ bb,
 2529              	.LVL164:
 2530              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2531              		.loc 1 214 40 view .LVU653
 2532 0b84 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2533              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2534              		.loc 1 215 46 view .LVU654
 2535 0b88 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2536              	@ armwave.c:195:                     g = MIN(gg, 255);
 195:armwave.c     ****                     b = MIN(bb, 255);
 2537              		.loc 1 195 25 view .LVU655
 2538 0b8c FF0052E3 		cmp	r2, #255	@ gg,
 2539 0b90 FF20A0A3 		movge	r2, #255	@ gg,
 2540              	.LVL165:
 2541              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2542              		.loc 1 190 55 view .LVU656
 2543 0b94 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2544              	.LVL166:
 2545              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2546              		.loc 1 199 56 view .LVU657
 2547 0b98 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2548              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2549              		.loc 1 199 44 view .LVU658
 2550 0b9c 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2551              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2552              		.loc 1 214 24 view .LVU659
 2553 0ba0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2554              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2555              		.loc 1 190 24 view .LVU660
 2556 0ba4 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2557              	.LVL167:
 2558              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2559              		.loc 1 199 56 view .LVU661
 2560 0ba8 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2561              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2562              		.loc 1 199 44 view .LVU662
 2563 0bac FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2564              	@ armwave.c:194:                     r = MIN(rr, 255);
 194:armwave.c     ****                     g = MIN(gg, 255);
 2565              		.loc 1 194 25 view .LVU663
 2566 0bb0 FF0051E3 		cmp	r1, #255	@ rr,
 2567              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2568              		.loc 1 199 51 view .LVU664
 2569 0bb4 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2570              	@ armwave.c:194:                     r = MIN(rr, 255);
 194:armwave.c     ****                     g = MIN(gg, 255);
 2571              		.loc 1 194 25 view .LVU665
 2572 0bb8 FF10A0A3 		movge	r1, #255	@ rr,
 2573              	.LVL168:
 2574              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2575              		.loc 1 214 24 view .LVU666
 2576 0bbc 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2577              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2578              		.loc 1 215 24 view .LVU667
 2579 0bc0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2580              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2581              		.loc 1 199 62 view .LVU668
 2582 0bc4 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2583 0bc8 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2584              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2585              		.loc 1 199 26 view .LVU669
 2586 0bcc FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2587              	.LVL169:
 213:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2588              		.loc 1 213 21 is_stmt 1 view .LVU670
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2589              		.loc 1 214 21 view .LVU671
 215:armwave.c     ****                     xx = (nsub >> 8);
 2590              		.loc 1 215 21 view .LVU672
 216:armwave.c     **** 
 2591              		.loc 1 216 21 view .LVU673
 2592              	@ armwave.c:216:                     xx = (nsub >> 8);
 216:armwave.c     **** 
 2593              		.loc 1 216 32 is_stmt 0 view .LVU674
 2594 0bd0 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.102,
 2595              	.LVL170:
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2596              		.loc 1 218 21 is_stmt 1 view .LVU675
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2597              		.loc 1 218 21 is_stmt 0 view .LVU676
 2598 0bd4 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2599              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2600              		.loc 1 215 24 view .LVU677
 2601 0bd8 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2602              	.LVL171:
 2603              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2604              		.loc 1 218 21 view .LVU678
 2605 0bdc 020054E1 		cmp	r4, r2	@ yy, ye
 2606 0be0 D5FFFF2A 		bcs	.L139		@,
 2607 0be4 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2608              	.LVL172:
 2609              	.L140:
 219:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2610              		.loc 1 219 25 is_stmt 1 view .LVU679
 220:armwave.c     ****                     }
 2611              		.loc 1 220 25 view .LVU680
 2612              	@ armwave.c:219:                         offset = (xx + (y * g_armwave_state.target_width)); 
 219:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2613              		.loc 1 219 43 is_stmt 0 view .LVU681
 2614 0be8 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2615              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2616              		.loc 1 218 21 view .LVU682
 2617 0bec 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2618              	@ armwave.c:220:                         *(out_buffer_base + offset) = word;
 220:armwave.c     ****                     }
 2619              		.loc 1 220 43 view .LVU683
 2620 0bf0 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2621              	.LVL173:
 2622              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2623              		.loc 1 218 42 view .LVU684
 2624 0bf4 014084E2 		add	r4, r4, #1	@ yy, yy,
 2625              	.LVL174:
 2626              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2627              		.loc 1 218 21 view .LVU685
 2628 0bf8 040050E1 		cmp	r0, r4	@ ye, yy
 2629              	@ armwave.c:220:                         *(out_buffer_base + offset) = word;
 220:armwave.c     ****                     }
 2630              		.loc 1 220 53 view .LVU686
 2631 0bfc 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2632              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2633              		.loc 1 218 21 view .LVU687
 2634 0c00 F8FFFF1A 		bne	.L140		@,
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2635              		.loc 1 218 21 view .LVU688
 2636 0c04 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2637 0c08 CBFFFFEA 		b	.L139		@
 2638              	.LVL175:
 2639              	.L154:
 173:armwave.c     **** 
 2640              		.loc 1 173 5 is_stmt 1 view .LVU689
 2641 0c0c 10309FE5 		ldr	r3, .L156+4	@,
 2642 0c10 AD20A0E3 		mov	r2, #173	@,
 2643 0c14 0C109FE5 		ldr	r1, .L156+8	@,
 2644 0c18 0C009FE5 		ldr	r0, .L156+12	@,
 2645 0c1c FEFFFFEB 		bl	__assert_fail		@
 2646              	.LVL176:
 2647              	.L157:
 2648              		.align	2
 2649              	.L156:
 2650 0c20 00000000 		.word	g_armwave_state
 2651 0c24 00000000 		.word	.LANCHOR0
 2652 0c28 54000000 		.word	.LC3
 2653 0c2c 60000000 		.word	.LC4
 2654              	.LBE37:
 2655              	.LBE38:
 2656              		.cfi_endproc
 2657              	.LFE70:
 2659              		.align	2
 2660              		.global	armwave_test_dump_buffer_to_ppm
 2661              		.syntax unified
 2662              		.arm
 2663              		.fpu vfp
 2665              	armwave_test_dump_buffer_to_ppm:
 2666              	.LVL177:
 2667              	.LFB71:
 447:armwave.c     **** 
 448:armwave.c     **** /*
 449:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 450:armwave.c     ****  */
 451:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 452:armwave.c     **** {
 2668              		.loc 1 452 1 view -0
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 0
 2671              		@ frame_needed = 0, uses_anonymous_args = 0
 2672              		@ link register save eliminated.
 453:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2673              		.loc 1 453 5 view .LVU691
 2674 0c30 08309FE5 		ldr	r3, .L159	@ tmp112,
 2675 0c34 0010A0E1 		mov	r1, r0	@, fn
 2676 0c38 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2677              	.LVL178:
 2678              		.loc 1 453 5 is_stmt 0 view .LVU692
 2679 0c3c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2680              	.LVL179:
 2681              	.L160:
 2682              		.loc 1 453 5 view .LVU693
 2683              		.align	2
 2684              	.L159:
 2685 0c40 00000000 		.word	g_armwave_state
 2686              		.cfi_endproc
 2687              	.LFE71:
 2689              		.align	2
 2690              		.global	armwave_test_fill_gdkbuf
 2691              		.syntax unified
 2692              		.arm
 2693              		.fpu vfp
 2695              	armwave_test_fill_gdkbuf:
 2696              	.LVL180:
 2697              	.LFB72:
 454:armwave.c     **** }
 455:armwave.c     **** 
 456:armwave.c     **** /*
 457:armwave.c     ****  * Render GDK buffer with test funtionry.
 458:armwave.c     ****  */
 459:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 460:armwave.c     **** {
 2698              		.loc 1 460 1 is_stmt 1 view -0
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 8
 2701              		@ frame_needed = 0, uses_anonymous_args = 0
 461:armwave.c     ****     //PyObject *mv;
 462:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 463:armwave.c     **** 
 464:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 465:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2702              		.loc 1 465 5 view .LVU695
 2703              	@ armwave.c:465:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2704              		.loc 1 465 11 is_stmt 0 view .LVU696
 2705 0c44 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2706              	@ armwave.c:460: {
 460:armwave.c     ****     //PyObject *mv;
 2707              		.loc 1 460 1 view .LVU697
 2708 0c48 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2709              		.cfi_def_cfa_offset 36
 2710              		.cfi_offset 4, -36
 2711              		.cfi_offset 5, -32
 2712              		.cfi_offset 6, -28
 2713              		.cfi_offset 7, -24
 2714              		.cfi_offset 8, -20
 2715              		.cfi_offset 9, -16
 2716              		.cfi_offset 10, -12
 2717              		.cfi_offset 11, -8
 2718              		.cfi_offset 14, -4
 2719 0c4c 0CD04DE2 		sub	sp, sp, #12	@,,
 2720              		.cfi_def_cfa_offset 48
 2721              	.LBB41:
 2722              	.LBB42:
 2723              	@ armwave.c:169:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 169:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2724              		.loc 1 169 15 view .LVU698
 2725 0c50 48519FE5 		ldr	r5, .L182	@ tmp206,
 2726              	.LBE42:
 2727              	.LBE41:
 2728              	@ armwave.c:465:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2729              		.loc 1 465 11 view .LVU699
 2730 0c54 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2731              	.LVL181:
 466:armwave.c     ****     
 467:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 468:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2732              		.loc 1 468 5 is_stmt 1 view .LVU700
 2733              	.LBB45:
 2734              	.LBI41:
 162:armwave.c     **** {
 2735              		.loc 1 162 6 view .LVU701
 2736              	.LBB43:
 164:armwave.c     ****     // uint32_t ysub;
 2737              		.loc 1 164 5 view .LVU702
 166:armwave.c     ****     uint8_t r, g, b, value; 
 2738              		.loc 1 166 5 view .LVU703
 167:armwave.c     ****     // uint8_t row;
 2739              		.loc 1 167 5 view .LVU704
 169:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2740              		.loc 1 169 5 view .LVU705
 2741              	@ armwave.c:173:     assert(out_buffer != NULL);
 173:armwave.c     **** 
 2742              		.loc 1 173 5 is_stmt 0 view .LVU706
 2743 0c58 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2744              	@ armwave.c:169:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 169:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2745              		.loc 1 169 15 view .LVU707
 2746 0c5c 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2747              	.LVL182:
 170:armwave.c     ****     uint32_t offset;
 2748              		.loc 1 170 5 is_stmt 1 view .LVU708
 171:armwave.c     **** 
 2749              		.loc 1 171 5 view .LVU709
 173:armwave.c     **** 
 2750              		.loc 1 173 5 view .LVU710
 2751 0c60 4900000A 		beq	.L180		@,
 175:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2752              		.loc 1 175 5 view .LVU711
 2753              	@ armwave.c:175:     npix = g_armwave_state.target_width * 256; 
 175:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2754              		.loc 1 175 10 is_stmt 0 view .LVU712
 2755 0c64 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2756 0c68 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2757              	.LVL183:
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2758              		.loc 1 178 5 is_stmt 1 view .LVU713
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2759              		.loc 1 178 5 is_stmt 0 view .LVU714
 2760 0c6c 000057E3 		cmp	r7, #0	@ npix,
 2761 0c70 0A0000DA 		ble	.L161		@,
 2762              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2763              		.loc 1 190 52 view .LVU715
 2764 0c74 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2765              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2766              		.loc 1 191 52 view .LVU716
 2767 0c78 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2768              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     **** 
 2769              		.loc 1 192 52 view .LVU717
 2770 0c7c F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2771              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2772              		.loc 1 214 57 view .LVU718
 2773 0c80 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2774              	@ armwave.c:178:     for(n = 0; n < npix; n += 4) {
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2775              		.loc 1 178 11 view .LVU719
 2776 0c84 00C0A0E3 		mov	ip, #0	@ n,
 2777              	.LVL184:
 2778              	.L168:
 182:armwave.c     **** 
 2779              		.loc 1 182 9 is_stmt 1 view .LVU720
 2780              	@ armwave.c:182:         wave_word = *base_32ptr++;
 182:armwave.c     **** 
 2781              		.loc 1 182 19 is_stmt 0 view .LVU721
 2782 0c88 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2783              	.LVL185:
 184:armwave.c     ****             for(w = 0; w < 4; w++) {
 2784              		.loc 1 184 9 is_stmt 1 view .LVU722
 2785              	@ armwave.c:184:         if(COND_UNLIKELY(wave_word != 0)) {
 184:armwave.c     ****             for(w = 0; w < 4; w++) {
 2786              		.loc 1 184 11 is_stmt 0 view .LVU723
 2787 0c8c 000050E3 		cmp	r0, #0	@ wave_word,
 2788 0c90 0400001A 		bne	.L177		@,
 2789 0c94 04C08CE2 		add	ip, ip, #4	@ n, n,
 2790              	.L164:
 2791              	.LVL186:
 2792              	@ armwave.c:178:     for(n = 0; n < npix; n += 4) {
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2793              		.loc 1 178 5 view .LVU724
 2794 0c98 0C0057E1 		cmp	r7, ip	@ npix, n
 2795 0c9c F9FFFFCA 		bgt	.L168		@,
 2796              	.LVL187:
 2797              	.L161:
 178:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2798              		.loc 1 178 5 view .LVU725
 2799              	.LBE43:
 2800              	.LBE45:
 2801              	@ armwave.c:469: }
 469:armwave.c     **** }
 2802              		.loc 1 469 1 view .LVU726
 2803 0ca0 0CD08DE2 		add	sp, sp, #12	@,,
 2804              		.cfi_remember_state
 2805              		.cfi_def_cfa_offset 36
 2806              		@ sp needed	@
 2807 0ca4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2808              	.LVL188:
 2809              	.L177:
 2810              		.cfi_restore_state
 2811              	.LBB46:
 2812              	.LBB44:
 2813              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2814              		.loc 1 189 19 view .LVU727
 2815 0ca8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2816              	@ armwave.c:184:         if(COND_UNLIKELY(wave_word != 0)) {
 184:armwave.c     ****             for(w = 0; w < 4; w++) {
 2817              		.loc 1 184 11 view .LVU728
 2818 0cac 0C60A0E1 		mov	r6, ip	@ ivtmp.118, n
 2819              	.LVL189:
 186:armwave.c     ****                 wave_word >>= 8;
 2820              		.loc 1 186 17 is_stmt 1 view .LVU729
 187:armwave.c     **** 
 2821              		.loc 1 187 17 view .LVU730
 2822              	@ armwave.c:187:                 wave_word >>= 8;
 187:armwave.c     **** 
 2823              		.loc 1 187 27 is_stmt 0 view .LVU731
 2824 0cb0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2825              	.LVL190:
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2826              		.loc 1 189 17 is_stmt 1 view .LVU732
 2827 0cb4 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.118,
 2828              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2829              		.loc 1 189 19 is_stmt 0 view .LVU733
 2830 0cb8 0500001A 		bne	.L181		@,
 2831              	.LVL191:
 2832              	.L165:
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2833              		.loc 1 189 19 view .LVU734
 2834 0cbc 016086E2 		add	r6, r6, #1	@ ivtmp.118, ivtmp.118,
 2835              	@ armwave.c:185:             for(w = 0; w < 4; w++) {
 185:armwave.c     ****                 value = wave_word & 0xff;
 2836              		.loc 1 185 13 view .LVU735
 2837 0cc0 06005CE1 		cmp	ip, r6	@ n, ivtmp.118
 2838 0cc4 F3FFFF0A 		beq	.L164		@,
 186:armwave.c     ****                 wave_word >>= 8;
 2839              		.loc 1 186 17 is_stmt 1 view .LVU736
 2840              	.LVL192:
 187:armwave.c     **** 
 2841              		.loc 1 187 17 view .LVU737
 2842              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2843              		.loc 1 189 19 is_stmt 0 view .LVU738
 2844 0cc8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2845              	@ armwave.c:187:                 wave_word >>= 8;
 187:armwave.c     **** 
 2846              		.loc 1 187 27 view .LVU739
 2847 0ccc 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2848              	.LVL193:
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2849              		.loc 1 189 17 is_stmt 1 view .LVU740
 2850              	@ armwave.c:189:                 if(value != 0) {
 189:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2851              		.loc 1 189 19 is_stmt 0 view .LVU741
 2852 0cd0 F9FFFF0A 		beq	.L165		@,
 2853              	.L181:
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2854              		.loc 1 190 21 is_stmt 1 view .LVU742
 2855              	.LVL194:
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2856              		.loc 1 191 21 view .LVU743
 192:armwave.c     **** 
 2857              		.loc 1 192 21 view .LVU744
 194:armwave.c     ****                     g = MIN(gg, 255);
 2858              		.loc 1 194 21 view .LVU745
 195:armwave.c     ****                     b = MIN(bb, 255);
 2859              		.loc 1 195 21 view .LVU746
 196:armwave.c     **** 
 2860              		.loc 1 196 21 view .LVU747
 199:armwave.c     **** 
 2861              		.loc 1 199 21 view .LVU748
 2862              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2863              		.loc 1 214 32 is_stmt 0 view .LVU749
 2864 0cd4 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.118
 2865              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2866              		.loc 1 215 41 view .LVU750
 2867 0cd8 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2868              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2869              		.loc 1 214 40 view .LVU751
 2870 0cdc 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2871              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2872              		.loc 1 215 41 view .LVU752
 2873 0ce0 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2874              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     **** 
 2875              		.loc 1 192 55 view .LVU753
 2876 0ce4 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2877              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2878              		.loc 1 214 40 view .LVU754
 2879 0ce8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2880              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2881              		.loc 1 215 46 view .LVU755
 2882 0cec C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2883              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2884              		.loc 1 191 55 view .LVU756
 2885 0cf0 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2886              	@ armwave.c:192:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 192:armwave.c     **** 
 2887              		.loc 1 192 24 view .LVU757
 2888 0cf4 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2889              	.LVL195:
 2890              	@ armwave.c:196:                     b = MIN(bb, 255);
 196:armwave.c     **** 
 2891              		.loc 1 196 25 view .LVU758
 2892 0cf8 FF0053E3 		cmp	r3, #255	@ bb,
 2893              	@ armwave.c:191:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2894              		.loc 1 191 24 view .LVU759
 2895 0cfc 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2896              	.LVL196:
 2897              	@ armwave.c:196:                     b = MIN(bb, 255);
 196:armwave.c     **** 
 2898              		.loc 1 196 25 view .LVU760
 2899 0d00 FF30A0A3 		movge	r3, #255	@ bb,
 2900              	.LVL197:
 2901              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2902              		.loc 1 214 40 view .LVU761
 2903 0d04 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2904              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2905              		.loc 1 215 46 view .LVU762
 2906 0d08 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2907              	@ armwave.c:195:                     g = MIN(gg, 255);
 195:armwave.c     ****                     b = MIN(bb, 255);
 2908              		.loc 1 195 25 view .LVU763
 2909 0d0c FF0052E3 		cmp	r2, #255	@ gg,
 2910 0d10 FF20A0A3 		movge	r2, #255	@ gg,
 2911              	.LVL198:
 2912              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2913              		.loc 1 190 55 view .LVU764
 2914 0d14 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2915              	.LVL199:
 2916              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2917              		.loc 1 199 56 view .LVU765
 2918 0d18 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2919              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2920              		.loc 1 199 44 view .LVU766
 2921 0d1c 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2922              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2923              		.loc 1 214 24 view .LVU767
 2924 0d20 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2925              	@ armwave.c:190:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 190:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2926              		.loc 1 190 24 view .LVU768
 2927 0d24 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2928              	.LVL200:
 2929              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2930              		.loc 1 199 56 view .LVU769
 2931 0d28 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2932              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2933              		.loc 1 199 44 view .LVU770
 2934 0d2c FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2935              	@ armwave.c:194:                     r = MIN(rr, 255);
 194:armwave.c     ****                     g = MIN(gg, 255);
 2936              		.loc 1 194 25 view .LVU771
 2937 0d30 FF0051E3 		cmp	r1, #255	@ rr,
 2938              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2939              		.loc 1 199 51 view .LVU772
 2940 0d34 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2941              	@ armwave.c:194:                     r = MIN(rr, 255);
 194:armwave.c     ****                     g = MIN(gg, 255);
 2942              		.loc 1 194 25 view .LVU773
 2943 0d38 FF10A0A3 		movge	r1, #255	@ rr,
 2944              	.LVL201:
 2945              	@ armwave.c:214:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2946              		.loc 1 214 24 view .LVU774
 2947 0d3c 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2948              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2949              		.loc 1 215 24 view .LVU775
 2950 0d40 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2951              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2952              		.loc 1 199 62 view .LVU776
 2953 0d44 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2954 0d48 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2955              	@ armwave.c:199:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 199:armwave.c     **** 
 2956              		.loc 1 199 26 view .LVU777
 2957 0d4c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2958              	.LVL202:
 213:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2959              		.loc 1 213 21 is_stmt 1 view .LVU778
 214:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2960              		.loc 1 214 21 view .LVU779
 215:armwave.c     ****                     xx = (nsub >> 8);
 2961              		.loc 1 215 21 view .LVU780
 216:armwave.c     **** 
 2962              		.loc 1 216 21 view .LVU781
 2963              	@ armwave.c:216:                     xx = (nsub >> 8);
 216:armwave.c     **** 
 2964              		.loc 1 216 32 is_stmt 0 view .LVU782
 2965 0d50 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.118,
 2966              	.LVL203:
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2967              		.loc 1 218 21 is_stmt 1 view .LVU783
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2968              		.loc 1 218 21 is_stmt 0 view .LVU784
 2969 0d54 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2970              	@ armwave.c:215:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 215:armwave.c     ****                     xx = (nsub >> 8);
 2971              		.loc 1 215 24 view .LVU785
 2972 0d58 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2973              	.LVL204:
 2974              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2975              		.loc 1 218 21 view .LVU786
 2976 0d5c 02005EE1 		cmp	lr, r2	@ yy, ye
 2977 0d60 D5FFFF2A 		bcs	.L165		@,
 2978 0d64 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2979              	.LVL205:
 2980              	.L166:
 219:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2981              		.loc 1 219 25 is_stmt 1 view .LVU787
 220:armwave.c     ****                     }
 2982              		.loc 1 220 25 view .LVU788
 2983              	@ armwave.c:219:                         offset = (xx + (y * g_armwave_state.target_width)); 
 219:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2984              		.loc 1 219 43 is_stmt 0 view .LVU789
 2985 0d68 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2986              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2987              		.loc 1 218 21 view .LVU790
 2988 0d6c 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2989              	@ armwave.c:220:                         *(out_buffer_base + offset) = word;
 220:armwave.c     ****                     }
 2990              		.loc 1 220 43 view .LVU791
 2991 0d70 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2992              	.LVL206:
 2993              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2994              		.loc 1 218 42 view .LVU792
 2995 0d74 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2996              	.LVL207:
 2997              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2998              		.loc 1 218 21 view .LVU793
 2999 0d78 0E0050E1 		cmp	r0, lr	@ ye, yy
 3000              	@ armwave.c:220:                         *(out_buffer_base + offset) = word;
 220:armwave.c     ****                     }
 3001              		.loc 1 220 53 view .LVU794
 3002 0d7c 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3003              	@ armwave.c:218:                     for(y = yy; y < ye; y++) {
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3004              		.loc 1 218 21 view .LVU795
 3005 0d80 F8FFFF1A 		bne	.L166		@,
 218:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3006              		.loc 1 218 21 view .LVU796
 3007 0d84 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3008 0d88 CBFFFFEA 		b	.L165		@
 3009              	.LVL208:
 3010              	.L180:
 173:armwave.c     **** 
 3011              		.loc 1 173 5 is_stmt 1 view .LVU797
 3012 0d8c 10309FE5 		ldr	r3, .L182+4	@,
 3013 0d90 AD20A0E3 		mov	r2, #173	@,
 3014 0d94 0C109FE5 		ldr	r1, .L182+8	@,
 3015 0d98 0C009FE5 		ldr	r0, .L182+12	@,
 3016              	.LVL209:
 173:armwave.c     **** 
 3017              		.loc 1 173 5 is_stmt 0 view .LVU798
 3018 0d9c FEFFFFEB 		bl	__assert_fail		@
 3019              	.LVL210:
 3020              	.L183:
 3021              		.align	2
 3022              	.L182:
 3023 0da0 00000000 		.word	g_armwave_state
 3024 0da4 00000000 		.word	.LANCHOR0
 3025 0da8 54000000 		.word	.LC3
 3026 0dac 60000000 		.word	.LC4
 3027              	.LBE44:
 3028              	.LBE46:
 3029              		.cfi_endproc
 3030              	.LFE72:
 3032              		.align	2
 3033              		.global	armwave_test_buffer_alloc
 3034              		.syntax unified
 3035              		.arm
 3036              		.fpu vfp
 3038              	armwave_test_buffer_alloc:
 3039              	.LVL211:
 3040              	.LFB73:
 470:armwave.c     **** 
 471:armwave.c     **** /*
 472:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 473:armwave.c     ****  */
 474:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 475:armwave.c     **** {
 3041              		.loc 1 475 1 is_stmt 1 view -0
 3042              		.cfi_startproc
 3043              		@ args = 0, pretend = 0, frame = 0
 3044              		@ frame_needed = 0, uses_anonymous_args = 0
 476:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3045              		.loc 1 476 5 view .LVU800
 3046              	@ armwave.c:475: {
 475:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3047              		.loc 1 475 1 is_stmt 0 view .LVU801
 3048 0db0 70402DE9 		push	{r4, r5, r6, lr}	@
 3049              		.cfi_def_cfa_offset 16
 3050              		.cfi_offset 4, -16
 3051              		.cfi_offset 5, -12
 3052              		.cfi_offset 6, -8
 3053              		.cfi_offset 14, -4
 3054              	@ armwave.c:475: {
 475:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3055              		.loc 1 475 1 view .LVU802
 3056 0db4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3057              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer != NULL) {
 3058              		.loc 1 476 23 view .LVU803
 3059 0db8 44409FE5 		ldr	r4, .L191	@ tmp128,
 3060 0dbc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3061              	.LVL212:
 3062              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer != NULL) {
 3063              		.loc 1 476 7 view .LVU804
 3064 0dc0 000050E3 		cmp	r0, #0	@ _1,
 3065 0dc4 0000000A 		beq	.L185		@,
 477:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3066              		.loc 1 477 9 is_stmt 1 view .LVU805
 3067 0dc8 FEFFFFEB 		bl	free		@
 3068              	.LVL213:
 3069              	.L185:
 478:armwave.c     ****     }
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 481:armwave.c     **** 
 482:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3070              		.loc 1 482 5 view .LVU806
 3071              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3072              		.loc 1 482 75 is_stmt 0 view .LVU807
 3073 0dcc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3074 0dd0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3075              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3076              		.loc 1 482 40 view .LVU808
 3077 0dd4 0610A0E1 		mov	r1, r6	@, nsets
 3078              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3079              		.loc 1 482 75 view .LVU809
 3080 0dd8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3081              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3082              		.loc 1 482 40 view .LVU810
 3083 0ddc 0500A0E1 		mov	r0, r5	@, _4
 3084 0de0 FEFFFFEB 		bl	calloc		@
 3085              	.LVL214:
 3086              	@ armwave.c:484:     if(g_armwave_state.test_wave_buffer == NULL) {
 483:armwave.c     **** 
 484:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3087              		.loc 1 484 7 view .LVU811
 3088 0de4 000050E3 		cmp	r0, #0	@ tmp124,
 3089              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 482:armwave.c     **** 
 3090              		.loc 1 482 38 view .LVU812
 3091 0de8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3092              		.loc 1 484 5 is_stmt 1 view .LVU813
 3093              	@ armwave.c:484:     if(g_armwave_state.test_wave_buffer == NULL) {
 3094              		.loc 1 484 7 is_stmt 0 view .LVU814
 3095 0dec 7080BD18 		popne	{r4, r5, r6, pc}	@
 485:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3096              		.loc 1 485 9 is_stmt 1 view .LVU815
 3097 0df0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3098 0df4 0620A0E1 		mov	r2, r6	@, nsets
 3099 0df8 08009FE5 		ldr	r0, .L191+4	@,
 3100              	@ armwave.c:489: }
 486:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 487:armwave.c     ****         return;
 488:armwave.c     ****     }
 489:armwave.c     **** }
 3101              		.loc 1 489 1 is_stmt 0 view .LVU816
 3102 0dfc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3103              		.cfi_restore 14
 3104              		.cfi_restore 6
 3105              		.cfi_restore 5
 3106              		.cfi_restore 4
 3107              		.cfi_def_cfa_offset 0
 3108              	.LVL215:
 3109              	@ armwave.c:485:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 485:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3110              		.loc 1 485 9 view .LVU817
 3111 0e00 FEFFFFEA 		b	printf		@
 3112              	.LVL216:
 3113              	.L192:
 485:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3114              		.loc 1 485 9 view .LVU818
 3115              		.align	2
 3116              	.L191:
 3117 0e04 00000000 		.word	g_armwave_state
 3118 0e08 F0010000 		.word	.LC19
 3119              		.cfi_endproc
 3120              	.LFE73:
 3122              		.align	2
 3123              		.global	armwave_fill_pixbuf_into_pybuffer
 3124              		.syntax unified
 3125              		.arm
 3126              		.fpu vfp
 3128              	armwave_fill_pixbuf_into_pybuffer:
 3129              	.LVL217:
 3130              	.LFB74:
 490:armwave.c     **** 
 491:armwave.c     **** /*
 492:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 493:armwave.c     ****  */
 494:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 495:armwave.c     **** {
 3131              		.loc 1 495 1 is_stmt 1 view -0
 3132              		.cfi_startproc
 3133              		@ args = 0, pretend = 0, frame = 48
 3134              		@ frame_needed = 0, uses_anonymous_args = 0
 496:armwave.c     ****     Py_buffer buffer;
 3135              		.loc 1 496 5 view .LVU820
 497:armwave.c     ****     int ret;
 3136              		.loc 1 497 5 view .LVU821
 498:armwave.c     **** 
 499:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 500:armwave.c     **** 
 501:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3137              		.loc 1 501 5 view .LVU822
 3138              	@ armwave.c:495: {
 495:armwave.c     ****     Py_buffer buffer;
 3139              		.loc 1 495 1 is_stmt 0 view .LVU823
 3140 0e0c 04E02DE5 		str	lr, [sp, #-4]!	@,
 3141              		.cfi_def_cfa_offset 4
 3142              		.cfi_offset 14, -4
 3143 0e10 34D04DE2 		sub	sp, sp, #52	@,,
 3144              		.cfi_def_cfa_offset 56
 3145              	@ armwave.c:501:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3146              		.loc 1 501 11 view .LVU824
 3147 0e14 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3148 0e18 0120A0E3 		mov	r2, #1	@,
 3149 0e1c FEFFFFEB 		bl	PyObject_GetBuffer		@
 3150              	.LVL218:
 502:armwave.c     **** 
 503:armwave.c     ****     if(ret != 0) {
 3151              		.loc 1 503 5 is_stmt 1 view .LVU825
 3152              	@ armwave.c:503:     if(ret != 0) {
 3153              		.loc 1 503 7 is_stmt 0 view .LVU826
 3154 0e20 000050E3 		cmp	r0, #0	@,
 3155 0e24 0A00001A 		bne	.L197		@,
 504:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 505:armwave.c     ****         Py_RETURN_FALSE;
 506:armwave.c     ****     }
 507:armwave.c     **** 
 508:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 509:armwave.c     **** 
 510:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3156              		.loc 1 510 5 is_stmt 1 view .LVU827
 3157 0e28 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3158              	.LVL219:
 3159              		.loc 1 510 5 is_stmt 0 view .LVU828
 3160 0e2c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3161              	.LVL220:
 511:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 512:armwave.c     **** 
 513:armwave.c     ****     PyBuffer_Release(&buffer);
 3162              		.loc 1 513 5 is_stmt 1 view .LVU829
 3163 0e30 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3164 0e34 FEFFFFEB 		bl	PyBuffer_Release		@
 3165              	.LVL221:
 514:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 515:armwave.c     **** 
 516:armwave.c     ****     Py_RETURN_TRUE;
 3166              		.loc 1 516 5 view .LVU830
 3167              	.LBB47:
 3168              	.LBI47:
 3169              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3170              		.loc 2 456 20 view .LVU831
 3171              	.LBB48:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3172              		.loc 2 458 21 view .LVU832
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3173              		.loc 2 459 5 view .LVU833
 3174              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3175              		.loc 2 459 18 is_stmt 0 view .LVU834
 3176 0e38 38309FE5 		ldr	r3, .L198	@ tmp126,
 3177              	.LBE48:
 3178              	.LBE47:
 3179              	@ armwave.c:516:     Py_RETURN_TRUE;
 3180              		.loc 1 516 5 view .LVU835
 3181 0e3c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3182              	.LBB50:
 3183              	.LBB49:
 3184              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3185              		.loc 2 459 18 view .LVU836
 3186 0e40 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3187 0e44 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3188 0e48 002083E5 		str	r2, [r3]	@ tmp128,
 3189              	.LBE49:
 3190              	.LBE50:
 3191              	@ armwave.c:517: }
 517:armwave.c     **** }
 3192              		.loc 1 517 1 view .LVU837
 3193 0e4c 34D08DE2 		add	sp, sp, #52	@,,
 3194              		.cfi_remember_state
 3195              		.cfi_def_cfa_offset 4
 3196              		@ sp needed	@
 3197 0e50 04F09DE4 		ldr	pc, [sp], #4	@
 3198              	.LVL222:
 3199              	.L197:
 3200              		.cfi_restore_state
 504:armwave.c     ****         Py_RETURN_FALSE;
 3201              		.loc 1 504 9 is_stmt 1 view .LVU838
 3202 0e54 20009FE5 		ldr	r0, .L198+4	@,
 3203              	.LVL223:
 504:armwave.c     ****         Py_RETURN_FALSE;
 3204              		.loc 1 504 9 is_stmt 0 view .LVU839
 3205 0e58 FEFFFFEB 		bl	puts		@
 3206              	.LVL224:
 505:armwave.c     ****     }
 3207              		.loc 1 505 9 is_stmt 1 view .LVU840
 3208              	.LBB51:
 3209              	.LBI51:
 456:/usr/local/include/python3.8/object.h **** {
 3210              		.loc 2 456 20 view .LVU841
 3211              	.LBB52:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3212              		.loc 2 458 21 view .LVU842
 3213              		.loc 2 459 5 view .LVU843
 3214              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3215              		.loc 2 459 18 is_stmt 0 view .LVU844
 3216 0e5c 1C309FE5 		ldr	r3, .L198+8	@ tmp120,
 3217              	.LBE52:
 3218              	.LBE51:
 3219              	@ armwave.c:505:         Py_RETURN_FALSE;
 505:armwave.c     ****     }
 3220              		.loc 1 505 9 view .LVU845
 3221 0e60 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3222              	.LBB54:
 3223              	.LBB53:
 3224              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3225              		.loc 2 459 18 view .LVU846
 3226 0e64 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3227 0e68 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3228 0e6c 002083E5 		str	r2, [r3]	@ tmp122,
 3229              	.LBE53:
 3230              	.LBE54:
 3231              	@ armwave.c:517: }
 3232              		.loc 1 517 1 view .LVU847
 3233 0e70 34D08DE2 		add	sp, sp, #52	@,,
 3234              		.cfi_def_cfa_offset 4
 3235              		@ sp needed	@
 3236 0e74 04F09DE4 		ldr	pc, [sp], #4	@
 3237              	.L199:
 3238              		.align	2
 3239              	.L198:
 3240 0e78 00000000 		.word	_Py_TrueStruct
 3241 0e7c 44020000 		.word	.LC20
 3242 0e80 00000000 		.word	_Py_FalseStruct
 3243              		.cfi_endproc
 3244              	.LFE74:
 3246              		.align	2
 3247              		.global	armwave_test_create_am_sine
 3248              		.syntax unified
 3249              		.arm
 3250              		.fpu vfp
 3252              	armwave_test_create_am_sine:
 3253              	.LVL225:
 3254              	.LFB75:
 518:armwave.c     **** 
 519:armwave.c     **** /*
 520:armwave.c     ****  * Make a test AM waveform for render tests.
 521:armwave.c     ****  *
 522:armwave.c     ****  * @param   mod                     modulation depth
 523:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 524:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 525:armwave.c     ****  */
 526:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 527:armwave.c     **** {
 3255              		.loc 1 527 1 is_stmt 1 view -0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 8
 3258              		@ frame_needed = 0, uses_anonymous_args = 0
 528:armwave.c     ****     float v, noise, xnoise, mod_val;
 3259              		.loc 1 528 5 view .LVU849
 529:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3260              		.loc 1 529 5 view .LVU850
 3261              	@ armwave.c:527: {
 527:armwave.c     ****     float v, noise, xnoise, mod_val;
 3262              		.loc 1 527 1 is_stmt 0 view .LVU851
 3263 0e84 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3264              		.cfi_def_cfa_offset 32
 3265              		.cfi_offset 4, -32
 3266              		.cfi_offset 5, -28
 3267              		.cfi_offset 6, -24
 3268              		.cfi_offset 7, -20
 3269              		.cfi_offset 8, -16
 3270              		.cfi_offset 9, -12
 3271              		.cfi_offset 10, -8
 3272              		.cfi_offset 14, -4
 3273              	@ armwave.c:529:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3274              		.loc 1 529 38 view .LVU852
 3275 0e88 7A7A9FED 		vldr.32	s14, .L231	@ tmp180,
 3276              	@ armwave.c:529:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3277              		.loc 1 529 55 view .LVU853
 3278 0e8c 00529FE5 		ldr	r5, .L231+28	@ tmp250,
 3279              	@ armwave.c:527: {
 527:armwave.c     ****     float v, noise, xnoise, mod_val;
 3280              		.loc 1 527 1 view .LVU854
 3281 0e90 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3282              		.cfi_def_cfa_offset 80
 3283              		.cfi_offset 80, -80
 3284              		.cfi_offset 81, -76
 3285              		.cfi_offset 82, -72
 3286              		.cfi_offset 83, -68
 3287              		.cfi_offset 84, -64
 3288              		.cfi_offset 85, -60
 3289              		.cfi_offset 86, -56
 3290              		.cfi_offset 87, -52
 3291              		.cfi_offset 88, -48
 3292              		.cfi_offset 89, -44
 3293              		.cfi_offset 90, -40
 3294              		.cfi_offset 91, -36
 3295 0e94 0090A0E1 		mov	r9, r0	@ sets, sets
 3296              	@ armwave.c:529:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3297              		.loc 1 529 38 view .LVU855
 3298 0e98 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3299              	@ armwave.c:533:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 530:armwave.c     ****     int s, set_offset = 0;
 531:armwave.c     ****     int w, x;
 532:armwave.c     **** 
 533:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3300              		.loc 1 533 70 view .LVU856
 3301 0e9c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3302 0ea0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3303              	.LBB57:
 3304              	.LBB58:
 3305              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer != NULL) {
 476:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3306              		.loc 1 476 23 view .LVU857
 3307 0ea4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3308              	.LVL226:
 476:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3309              		.loc 1 476 23 view .LVU858
 3310              	.LBE58:
 3311              	.LBE57:
 3312              	@ armwave.c:529:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 529:armwave.c     ****     int s, set_offset = 0;
 3313              		.loc 1 529 38 view .LVU859
 3314 0ea8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3315              	@ armwave.c:533:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3316              		.loc 1 533 70 view .LVU860
 3317 0eac 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3318              	@ armwave.c:527: {
 527:armwave.c     ****     float v, noise, xnoise, mod_val;
 3319              		.loc 1 527 1 view .LVU861
 3320 0eb0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3321              	.LBB62:
 3322              	.LBB59:
 3323              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer != NULL) {
 476:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3324              		.loc 1 476 7 view .LVU862
 3325 0eb4 000050E3 		cmp	r0, #0	@ _82,
 3326              	.LBE59:
 3327              	.LBE62:
 3328              	@ armwave.c:527: {
 527:armwave.c     ****     float v, noise, xnoise, mod_val;
 3329              		.loc 1 527 1 view .LVU863
 3330 0eb8 08D04DE2 		sub	sp, sp, #8	@,,
 3331              		.cfi_def_cfa_offset 88
 3332              	@ armwave.c:534:     g_armwave_state.test_wave_buffer_nsets = sets;
 534:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3333              		.loc 1 534 44 view .LVU864
 3334 0ebc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3335              	@ armwave.c:533:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 533:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3336              		.loc 1 533 45 view .LVU865
 3337 0ec0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3338              	@ armwave.c:529:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 529:armwave.c     ****     int s, set_offset = 0;
 3339              		.loc 1 529 38 view .LVU866
 3340 0ec4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3341              	@ armwave.c:529:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 529:armwave.c     ****     int s, set_offset = 0;
 3342              		.loc 1 529 11 view .LVU867
 3343 0ec8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3344              	.LVL227:
 530:armwave.c     ****     int w, x;
 3345              		.loc 1 530 5 is_stmt 1 view .LVU868
 531:armwave.c     **** 
 3346              		.loc 1 531 5 view .LVU869
 533:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3347              		.loc 1 533 5 view .LVU870
 3348              		.loc 1 534 5 view .LVU871
 535:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3349              		.loc 1 535 5 view .LVU872
 3350              	.LBB63:
 3351              	.LBI57:
 474:armwave.c     **** {
 3352              		.loc 1 474 6 view .LVU873
 3353              	.LBB60:
 476:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3354              		.loc 1 476 5 view .LVU874
 3355              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer != NULL) {
 476:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3356              		.loc 1 476 7 is_stmt 0 view .LVU875
 3357 0ecc 0000000A 		beq	.L201		@,
 477:armwave.c     ****     }
 3358              		.loc 1 477 9 is_stmt 1 view .LVU876
 3359 0ed0 FEFFFFEB 		bl	free		@
 3360              	.LVL228:
 3361              	.L201:
 482:armwave.c     **** 
 3362              		.loc 1 482 5 view .LVU877
 3363              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 482:armwave.c     **** 
 3364              		.loc 1 482 75 is_stmt 0 view .LVU878
 3365 0ed4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3366 0ed8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3367              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 482:armwave.c     **** 
 3368              		.loc 1 482 40 view .LVU879
 3369 0edc 0910A0E1 		mov	r1, r9	@, sets
 3370              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 482:armwave.c     **** 
 3371              		.loc 1 482 75 view .LVU880
 3372 0ee0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3373              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 482:armwave.c     **** 
 3374              		.loc 1 482 40 view .LVU881
 3375 0ee4 0400A0E1 		mov	r0, r4	@, _85
 3376 0ee8 FEFFFFEB 		bl	calloc		@
 3377              	.LVL229:
 3378              	@ armwave.c:484:     if(g_armwave_state.test_wave_buffer == NULL) {
 484:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3379              		.loc 1 484 7 view .LVU882
 3380 0eec 000050E3 		cmp	r0, #0	@ tmp191,
 3381              	@ armwave.c:482:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 482:armwave.c     **** 
 3382              		.loc 1 482 38 view .LVU883
 3383 0ef0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 484:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3384              		.loc 1 484 5 is_stmt 1 view .LVU884
 3385              	@ armwave.c:484:     if(g_armwave_state.test_wave_buffer == NULL) {
 484:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3386              		.loc 1 484 7 is_stmt 0 view .LVU885
 3387 0ef4 5A00000A 		beq	.L230		@,
 3388              	.L202:
 3389              	.LVL230:
 484:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3390              		.loc 1 484 7 view .LVU886
 3391              	.LBE60:
 3392              	.LBE63:
 3393              	@ armwave.c:537:     for(s = 0; s < sets; s++) {
 536:armwave.c     **** 
 537:armwave.c     ****     for(s = 0; s < sets; s++) {
 3394              		.loc 1 537 5 discriminator 1 view .LVU887
 3395 0ef8 000059E3 		cmp	r9, #0	@ sets,
 3396 0efc 550000DA 		ble	.L200		@,
 3397              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****         printf("Calculating test set %d\n", s);
 539:armwave.c     ****     
 540:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 541:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 542:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 543:armwave.c     **** 
 544:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 545:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 546:armwave.c     ****                 noise *= noise;
 547:armwave.c     ****                 noise *= noise;
 548:armwave.c     ****                 noise *= noise;
 549:armwave.c     **** 
 550:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 551:armwave.c     ****                     noise = -noise;
 552:armwave.c     **** 
 553:armwave.c     ****                 noise += 1.0f;
 554:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 555:armwave.c     **** 
 556:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3398              		.loc 1 556 45 view .LVU888
 3399 0f00 5C8A9FED 		vldr.32	s16, .L231	@ tmp258,
 3400              	@ armwave.c:559:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 557:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 558:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 559:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3401              		.loc 1 559 104 view .LVU889
 3402 0f04 5CCA9FED 		vldr.32	s24, .L231+4	@ tmp259,
 3403              	@ armwave.c:537:     for(s = 0; s < sets; s++) {
 537:armwave.c     ****         printf("Calculating test set %d\n", s);
 3404              		.loc 1 537 5 view .LVU890
 3405 0f08 0070A0E3 		mov	r7, #0	@ set_offset,
 3406              	@ armwave.c:538:         printf("Calculating test set %d\n", s);
 538:armwave.c     ****         printf("Calculating test set %d\n", s);
 3407              		.loc 1 538 9 view .LVU891
 3408 0f0c 84A19FE5 		ldr	r10, .L231+32	@ tmp257,
 3409              	@ armwave.c:537:     for(s = 0; s < sets; s++) {
 537:armwave.c     ****         printf("Calculating test set %d\n", s);
 3410              		.loc 1 537 5 view .LVU892
 3411 0f10 0780A0E1 		mov	r8, r7	@ s, set_offset
 3412              	.LVL231:
 3413              	.L203:
 538:armwave.c     ****         printf("Calculating test set %d\n", s);
 3414              		.loc 1 538 9 is_stmt 1 view .LVU893
 3415 0f14 0810A0E1 		mov	r1, r8	@, s
 3416 0f18 0A00A0E1 		mov	r0, r10	@, tmp257
 3417 0f1c FEFFFFEB 		bl	printf		@
 3418              	.LVL232:
 540:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3419              		.loc 1 540 9 view .LVU894
 3420              	@ armwave.c:540:         for(w = 0; w < g_armwave_state.waves; w++) {
 540:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3421              		.loc 1 540 39 is_stmt 0 view .LVU895
 3422 0f20 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3423              	@ armwave.c:540:         for(w = 0; w < g_armwave_state.waves; w++) {
 540:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3424              		.loc 1 540 9 view .LVU896
 3425 0f24 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3426 0f28 450000DA 		ble	.L204		@,
 3427              	@ armwave.c:542:             mod_val = 0.5f + (_1_waves_mod * w);
 542:armwave.c     **** 
 3428              		.loc 1 542 21 view .LVU897
 3429 0f2c 53CADFED 		vldr.32	s25, .L231+8	@ tmp200,
 3430              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3431              		.loc 1 556 33 view .LVU898
 3432 0f30 53BA9FED 		vldr.32	s22, .L231+12	@ tmp253,
 3433              	@ armwave.c:554:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 554:armwave.c     **** 
 3434              		.loc 1 554 24 view .LVU899
 3435 0f34 53AADFED 		vldr.32	s21, .L231+16	@ tmp254,
 3436 0f38 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3437              	@ armwave.c:540:         for(w = 0; w < g_armwave_state.waves; w++) {
 540:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3438              		.loc 1 540 15 view .LVU900
 3439 0f3c 0060A0E3 		mov	r6, #0	@ w,
 3440              	.LVL233:
 3441              	.L211:
 542:armwave.c     **** 
 3442              		.loc 1 542 13 is_stmt 1 view .LVU901
 3443              	@ armwave.c:542:             mod_val = 0.5f + (_1_waves_mod * w);
 542:armwave.c     **** 
 3444              		.loc 1 542 21 is_stmt 0 view .LVU902
 3445 0f40 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3446 0f44 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3447              	@ armwave.c:544:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 544:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3448              		.loc 1 544 13 view .LVU903
 3449 0f48 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3450              	@ armwave.c:542:             mod_val = 0.5f + (_1_waves_mod * w);
 542:armwave.c     **** 
 3451              		.loc 1 542 21 view .LVU904
 3452 0f4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3453 0f50 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3454              	.LVL234:
 544:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3455              		.loc 1 544 13 is_stmt 1 view .LVU905
 544:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3456              		.loc 1 544 13 is_stmt 0 view .LVU906
 3457 0f54 370000DA 		ble	.L205		@,
 3458 0f58 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3459              	@ armwave.c:559:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3460              		.loc 1 559 113 view .LVU907
 3461 0f5c 4AAA9FED 		vldr.32	s20, .L231+20	@ tmp229,
 3462 0f60 4A8ADFED 		vldr.32	s17, .L231+24	@ tmp230,
 3463              	@ armwave.c:544:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 544:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3464              		.loc 1 544 19 view .LVU908
 3465 0f64 0040A0E3 		mov	r4, #0	@ x,
 3466              	.LVL235:
 3467              	.L210:
 545:armwave.c     ****                 noise *= noise;
 3468              		.loc 1 545 17 is_stmt 1 view .LVU909
 3469              	@ armwave.c:545:                 noise  = ((rand() & 0xffff) * noise_fraction);
 545:armwave.c     ****                 noise *= noise;
 3470              		.loc 1 545 28 is_stmt 0 view .LVU910
 3471 0f68 FEFFFFEB 		bl	rand		@
 3472              	.LVL236:
 3473              	@ armwave.c:545:                 noise  = ((rand() & 0xffff) * noise_fraction);
 545:armwave.c     ****                 noise *= noise;
 3474              		.loc 1 545 35 view .LVU911
 3475 0f6c 7000FFE6 		uxth	r0, r0	@ tmp201,
 3476              	@ armwave.c:545:                 noise  = ((rand() & 0xffff) * noise_fraction);
 545:armwave.c     ****                 noise *= noise;
 3477              		.loc 1 545 45 view .LVU912
 3478 0f70 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3479 0f74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3480              	@ armwave.c:545:                 noise  = ((rand() & 0xffff) * noise_fraction);
 545:armwave.c     ****                 noise *= noise;
 3481              		.loc 1 545 24 view .LVU913
 3482 0f78 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3483              	.LVL237:
 546:armwave.c     ****                 noise *= noise;
 3484              		.loc 1 546 17 is_stmt 1 view .LVU914
 3485              	@ armwave.c:546:                 noise *= noise;
 546:armwave.c     ****                 noise *= noise;
 3486              		.loc 1 546 23 is_stmt 0 view .LVU915
 3487 0f7c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3488              	.LVL238:
 547:armwave.c     ****                 noise *= noise;
 3489              		.loc 1 547 17 is_stmt 1 view .LVU916
 3490              	@ armwave.c:547:                 noise *= noise;
 547:armwave.c     ****                 noise *= noise;
 3491              		.loc 1 547 23 is_stmt 0 view .LVU917
 3492 0f80 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3493              	.LVL239:
 548:armwave.c     **** 
 3494              		.loc 1 548 17 is_stmt 1 view .LVU918
 3495              	@ armwave.c:548:                 noise *= noise;
 548:armwave.c     **** 
 3496              		.loc 1 548 23 is_stmt 0 view .LVU919
 3497 0f84 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3498              	.LVL240:
 550:armwave.c     ****                     noise = -noise;
 3499              		.loc 1 550 17 is_stmt 1 view .LVU920
 3500              	@ armwave.c:550:                 if((rand() & 0xffff) > 0x7fff)
 550:armwave.c     ****                     noise = -noise;
 3501              		.loc 1 550 21 is_stmt 0 view .LVU921
 3502 0f88 FEFFFFEB 		bl	rand		@
 3503              	.LVL241:
 551:armwave.c     **** 
 3504              		.loc 1 551 21 is_stmt 1 view .LVU922
 3505              	@ armwave.c:550:                 if((rand() & 0xffff) > 0x7fff)
 550:armwave.c     ****                     noise = -noise;
 3506              		.loc 1 550 19 is_stmt 0 view .LVU923
 3507 0f8c 020910E3 		tst	r0, #32768	@,
 3508              	@ armwave.c:551:                     noise = -noise;
 551:armwave.c     **** 
 3509              		.loc 1 551 27 view .LVU924
 3510 0f90 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3511              	.LVL242:
 553:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3512              		.loc 1 553 17 is_stmt 1 view .LVU925
 554:armwave.c     **** 
 3513              		.loc 1 554 17 view .LVU926
 3514              	@ armwave.c:554:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 554:armwave.c     **** 
 3515              		.loc 1 554 27 is_stmt 0 view .LVU927
 3516 0f94 FEFFFFEB 		bl	rand		@
 3517              	.LVL243:
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3518              		.loc 1 556 17 is_stmt 1 view .LVU928
 3519              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3520              		.loc 1 556 45 is_stmt 0 view .LVU929
 3521 0f98 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3522              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3523              		.loc 1 556 33 view .LVU930
 3524 0f9c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3525              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3526              		.loc 1 556 45 view .LVU931
 3527 0fa0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3528              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3529              		.loc 1 556 33 view .LVU932
 3530 0fa4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3531              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3532              		.loc 1 556 45 view .LVU933
 3533 0fa8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3534              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3535              		.loc 1 556 33 view .LVU934
 3536 0fac 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3537              	@ armwave.c:554:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 554:armwave.c     **** 
 3538              		.loc 1 554 34 view .LVU935
 3539 0fb0 7000FFE6 		uxth	r0, r0	@ tmp214,
 3540              	.LVL244:
 3541              	@ armwave.c:554:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 554:armwave.c     **** 
 3542              		.loc 1 554 44 view .LVU936
 3543 0fb4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3544 0fb8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3545              	@ armwave.c:554:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 554:armwave.c     **** 
 3546              		.loc 1 554 24 view .LVU937
 3547 0fbc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3548              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3549              		.loc 1 556 77 view .LVU938
 3550 0fc0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3551              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3552              		.loc 1 556 22 view .LVU939
 3553 0fc4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3554 0fc8 FEFFFFEB 		bl	sin		@
 3555              	.LVL245:
 3556              		.loc 1 559 17 is_stmt 1 view .LVU940
 3557              	@ armwave.c:553:                 noise += 1.0f;
 553:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3558              		.loc 1 553 23 is_stmt 0 view .LVU941
 3559 0fcc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3560              	@ armwave.c:559:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3561              		.loc 1 559 104 view .LVU942
 3562 0fd0 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3563              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3564              		.loc 1 556 98 view .LVU943
 3565 0fd4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3566              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3567              		.loc 1 556 87 view .LVU944
 3568 0fd8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3569              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3570              		.loc 1 556 98 view .LVU945
 3571 0fdc 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3572              	@ armwave.c:556:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3573              		.loc 1 556 19 view .LVU946
 3574 0fe0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3575              	@ armwave.c:559:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3576              		.loc 1 559 113 view .LVU947
 3577 0fe4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3578 0fe8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3579 0fec C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3580 0ff0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3581 0ff4 050000DA 		ble	.L207		@,
 3582              	@ armwave.c:559:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3583              		.loc 1 559 104 discriminator 1 view .LVU948
 3584 0ff8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3585 0ffc FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3586 1000 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3587 1004 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3588 1008 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3589 100c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3590              	.L207:
 3591              	@ armwave.c:559:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3592              		.loc 1 559 57 discriminator 12 view .LVU949
 3593 1010 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3594              	@ armwave.c:559:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3595              		.loc 1 559 102 discriminator 12 view .LVU950
 3596 1014 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3597 1018 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3598 101c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3599              	@ armwave.c:544:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 544:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3600              		.loc 1 544 58 discriminator 12 view .LVU951
 3601 1020 014084E2 		add	r4, r4, #1	@ x, x,
 3602              	.LVL246:
 3603              	@ armwave.c:559:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3604              		.loc 1 559 102 discriminator 12 view .LVU952
 3605 1024 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3606              	@ armwave.c:544:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 544:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3607              		.loc 1 544 43 discriminator 12 view .LVU953
 3608 1028 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3609              	@ armwave.c:544:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 544:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3610              		.loc 1 544 13 discriminator 12 view .LVU954
 3611 102c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3612 1030 CCFFFFCA 		bgt	.L210		@,
 3613 1034 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3614              	.LVL247:
 3615              	.L205:
 3616              	@ armwave.c:540:         for(w = 0; w < g_armwave_state.waves; w++) {
 540:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3617              		.loc 1 540 48 discriminator 2 view .LVU955
 3618 1038 016086E2 		add	r6, r6, #1	@ w, w,
 3619              	.LVL248:
 3620              	@ armwave.c:540:         for(w = 0; w < g_armwave_state.waves; w++) {
 540:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3621              		.loc 1 540 9 discriminator 2 view .LVU956
 3622 103c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3623 1040 BEFFFFBA 		blt	.L211		@,
 3624              	.LVL249:
 3625              	.L204:
 560:armwave.c     ****             }
 561:armwave.c     ****         }
 562:armwave.c     **** 
 563:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3626              		.loc 1 563 9 is_stmt 1 discriminator 2 view .LVU957
 3627              	@ armwave.c:563:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3628              		.loc 1 563 46 is_stmt 0 discriminator 2 view .LVU958
 3629 1044 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3630              	@ armwave.c:537:     for(s = 0; s < sets; s++) {
 537:armwave.c     ****         printf("Calculating test set %d\n", s);
 3631              		.loc 1 537 27 discriminator 2 view .LVU959
 3632 1048 018088E2 		add	r8, r8, #1	@ s, s,
 3633              	.LVL250:
 3634              	@ armwave.c:537:     for(s = 0; s < sets; s++) {
 537:armwave.c     ****         printf("Calculating test set %d\n", s);
 3635              		.loc 1 537 5 discriminator 2 view .LVU960
 3636 104c 080059E1 		cmp	r9, r8	@ sets, s
 3637              	@ armwave.c:563:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3638              		.loc 1 563 20 discriminator 2 view .LVU961
 3639 1050 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3640              	.LVL251:
 3641              	@ armwave.c:537:     for(s = 0; s < sets; s++) {
 537:armwave.c     ****         printf("Calculating test set %d\n", s);
 3642              		.loc 1 537 5 discriminator 2 view .LVU962
 3643 1054 AEFFFF1A 		bne	.L203		@,
 3644              	.LVL252:
 3645              	.L200:
 3646              	@ armwave.c:565: }
 564:armwave.c     ****     }
 565:armwave.c     **** }
 3647              		.loc 1 565 1 view .LVU963
 3648 1058 08D08DE2 		add	sp, sp, #8	@,,
 3649              		.cfi_remember_state
 3650              		.cfi_def_cfa_offset 80
 3651              		@ sp needed	@
 3652 105c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3653              		.cfi_restore 90
 3654              		.cfi_restore 91
 3655              		.cfi_restore 88
 3656              		.cfi_restore 89
 3657              		.cfi_restore 86
 3658              		.cfi_restore 87
 3659              		.cfi_restore 84
 3660              		.cfi_restore 85
 3661              		.cfi_restore 82
 3662              		.cfi_restore 83
 3663              		.cfi_restore 80
 3664              		.cfi_restore 81
 3665              		.cfi_def_cfa_offset 32
 3666              	.LVL253:
 3667              		.loc 1 565 1 view .LVU964
 3668 1060 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3669              	.LVL254:
 3670              	.L230:
 3671              		.cfi_restore_state
 3672              	.LBB64:
 3673              	.LBB61:
 485:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3674              		.loc 1 485 9 is_stmt 1 view .LVU965
 3675 1064 940901E0 		mul	r1, r4, r9	@, _85, sets
 3676 1068 0920A0E1 		mov	r2, r9	@, sets
 3677 106c 28009FE5 		ldr	r0, .L231+36	@,
 3678 1070 FEFFFFEB 		bl	printf		@
 3679              	.LVL255:
 487:armwave.c     ****     }
 3680              		.loc 1 487 9 view .LVU966
 3681 1074 9FFFFFEA 		b	.L202		@
 3682              	.L232:
 3683              		.align	2
 3684              	.L231:
 3685 1078 0000803F 		.word	1065353216
 3686 107c 00007F43 		.word	1132396544
 3687 1080 0000003F 		.word	1056964608
 3688 1084 C3F5C840 		.word	1086911939
 3689 1088 38FFC74A 		.word	1254620984
 3690 108c 0000FE42 		.word	1123942400
 3691 1090 00000043 		.word	1124073472
 3692 1094 00000000 		.word	g_armwave_state
 3693 1098 98020000 		.word	.LC21
 3694 109c F0010000 		.word	.LC19
 3695              	.LBE61:
 3696              	.LBE64:
 3697              		.cfi_endproc
 3698              	.LFE75:
 3700              		.align	2
 3701              		.global	armwave_cleanup
 3702              		.syntax unified
 3703              		.arm
 3704              		.fpu vfp
 3706              	armwave_cleanup:
 3707              	.LFB76:
 566:armwave.c     **** 
 567:armwave.c     **** /*
 568:armwave.c     ****  * Make a test square waveform.
 569:armwave.c     ****  *
 570:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 571:armwave.c     ****  */
 572:armwave.c     **** #if 0
 573:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 574:armwave.c     **** {
 575:armwave.c     ****     uint8_t v;
 576:armwave.c     ****     float noise, xnoise;
 577:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 578:armwave.c     ****     int w, x;
 579:armwave.c     **** 
 580:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 581:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 582:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 583:armwave.c     ****             noise *= noise;
 584:armwave.c     ****             noise *= noise;
 585:armwave.c     ****             noise *= noise;
 586:armwave.c     **** 
 587:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 588:armwave.c     ****                 noise = -noise;
 589:armwave.c     **** 
 590:armwave.c     ****             //noise += 1.0f;
 591:armwave.c     **** 
 592:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 593:armwave.c     ****                 new_level = 0.2f;
 594:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 595:armwave.c     ****                 new_level = 0.8f;
 596:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 597:armwave.c     ****                 new_level = 0.2f;
 598:armwave.c     ****             } else {
 599:armwave.c     ****                 new_level = 0.8f;
 600:armwave.c     ****             }
 601:armwave.c     **** 
 602:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 603:armwave.c     **** 
 604:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 605:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 606:armwave.c     ****         }
 607:armwave.c     ****     }
 608:armwave.c     **** }
 609:armwave.c     **** #endif
 610:armwave.c     **** 
 611:armwave.c     **** /*
 612:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 613:armwave.c     ****  */
 614:armwave.c     **** void armwave_cleanup()
 615:armwave.c     **** {
 3708              		.loc 1 615 1 view -0
 3709              		.cfi_startproc
 3710              		@ args = 0, pretend = 0, frame = 0
 3711              		@ frame_needed = 0, uses_anonymous_args = 0
 616:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3712              		.loc 1 616 5 view .LVU968
 3713              	@ armwave.c:615: {
 615:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3714              		.loc 1 615 1 is_stmt 0 view .LVU969
 3715 10a0 10402DE9 		push	{r4, lr}	@
 3716              		.cfi_def_cfa_offset 8
 3717              		.cfi_offset 4, -8
 3718              		.cfi_offset 14, -4
 3719              	@ armwave.c:616:     free(g_armwave_state.out_pixbuf);
 3720              		.loc 1 616 25 view .LVU970
 3721 10a4 34409FE5 		ldr	r4, .L235	@ tmp114,
 3722              	@ armwave.c:616:     free(g_armwave_state.out_pixbuf);
 3723              		.loc 1 616 5 view .LVU971
 3724 10a8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3725 10ac FEFFFFEB 		bl	free		@
 3726              	.LVL256:
 617:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3727              		.loc 1 617 5 is_stmt 1 view .LVU972
 3728 10b0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3729 10b4 FEFFFFEB 		bl	free		@
 3730              	.LVL257:
 618:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3731              		.loc 1 618 5 view .LVU973
 3732 10b8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3733 10bc FEFFFFEB 		bl	free		@
 3734              	.LVL258:
 619:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3735              		.loc 1 619 5 view .LVU974
 3736 10c0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3737 10c4 FEFFFFEB 		bl	free		@
 3738              	.LVL259:
 620:armwave.c     **** 
 621:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3739              		.loc 1 621 5 view .LVU975
 3740              	@ armwave.c:621:     g_armwave_state.out_pixbuf = NULL;
 3741              		.loc 1 621 32 is_stmt 0 view .LVU976
 3742 10c8 0030A0E3 		mov	r3, #0	@ tmp123,
 3743 10cc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 622:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3744              		.loc 1 622 5 is_stmt 1 view .LVU977
 3745              	@ armwave.c:622:     g_armwave_state.ch1_buffer = NULL;
 3746              		.loc 1 622 32 is_stmt 0 view .LVU978
 3747 10d0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 623:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3748              		.loc 1 623 5 is_stmt 1 view .LVU979
 3749              	@ armwave.c:623:     g_armwave_state.xcoord_to_xpixel = NULL;
 3750              		.loc 1 623 38 is_stmt 0 view .LVU980
 3751 10d4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 624:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3752              		.loc 1 624 5 is_stmt 1 view .LVU981
 3753              	@ armwave.c:624:     g_armwave_state.test_wave_buffer = NULL;
 3754              		.loc 1 624 38 is_stmt 0 view .LVU982
 3755 10d8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3756              	@ armwave.c:625: }
 625:armwave.c     **** }
 3757              		.loc 1 625 1 view .LVU983
 3758 10dc 1080BDE8 		pop	{r4, pc}	@
 3759              	.L236:
 3760              		.align	2
 3761              	.L235:
 3762 10e0 00000000 		.word	g_armwave_state
 3763              		.cfi_endproc
 3764              	.LFE76:
 3766              		.comm	gamma_table,256,4
 3767              		.comm	g_armwave_state,136,4
 3768              		.section	.rodata
 3769              		.align	2
 3770              		.set	.LANCHOR0,. + 0
 3773              	__PRETTY_FUNCTION__.17095:
 3774 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3774      6176655F 
 3774      66696C6C 
 3774      5F706978 
 3774      6275665F 
 3775 001b 00       		.space	1
 3778              	__PRETTY_FUNCTION__.17117:
 3779 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3779      6176655F 
 3779      73657475 
 3779      705F7265 
 3779      6E646572 
 3780 0031 000000   		.space	3
 3783              	__PRETTY_FUNCTION__.17124:
 3784 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3784      6176655F 
 3784      7365745F 
 3784      77617665 
 3784      5F706F69 
 3785 004d 000000   		.space	3
 3788              	__PRETTY_FUNCTION__.17131:
 3789 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3789      6176655F 
 3789      7365745F 
 3789      77617665 
 3789      5F706F69 
 3790              		.section	.rodata.str1.4,"aMS",%progbits,1
 3791              		.align	2
 3792              	.LC0:
 3793 0000 76302E30 		.ascii	"v0.0.1\000"
 3793      2E3100
 3794 0007 00       		.space	1
 3795              	.LC1:
 3796 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3796      61766520 
 3796      76657273 
 3796      696F6E3A 
 3796      2025730A 
 3797 001d 000000   		.space	3
 3798              	.LC2:
 3799 0020 623D3078 		.ascii	"b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\012"
 3799      25303878 
 3799      20636831 
 3799      3D307825 
 3799      30387820 
 3800 0050 00       		.ascii	"\000"
 3801 0051 000000   		.space	3
 3802              	.LC3:
 3803 0054 61726D77 		.ascii	"armwave.c\000"
 3803      6176652E 
 3803      6300
 3804 005e 0000     		.space	2
 3805              	.LC4:
 3806 0060 6F75745F 		.ascii	"out_buffer != NULL\000"
 3806      62756666 
 3806      65722021 
 3806      3D204E55 
 3806      4C4C00
 3807 0073 00       		.space	1
 3808              	.LC5:
 3809 0074 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3809      20653D25 
 3809      6420773D 
 3809      25642077 
 3809      733D2564 
 3810              	.LC6:
 3811 00a0 73746172 		.ascii	"start_point < end_point\000"
 3811      745F706F 
 3811      696E7420 
 3811      3C20656E 
 3811      645F706F 
 3812              	.LC7:
 3813 00b8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3813      7566665F 
 3813      73697A65 
 3813      3D25642C 
 3813      20636D70 
 3814 00ea 00       		.ascii	"\000"
 3815 00eb 00       		.space	1
 3816              	.LC8:
 3817 00ec 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3817      6D776176 
 3817      655F7374 
 3817      6174652E 
 3817      6368315F 
 3818 010f 00       		.space	1
 3819              	.LC9:
 3820 0110 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3820      6D776176 
 3820      655F7374 
 3820      6174652E 
 3820      78636F6F 
 3821 0139 000000   		.space	3
 3822              	.LC10:
 3823 013c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3823      3A203078 
 3823      25303878 
 3823      20307825 
 3823      30387820 
 3824              	.LC11:
 3825 0160 77617665 		.ascii	"wave_buffer != NULL\000"
 3825      5F627566 
 3825      66657220 
 3825      213D204E 
 3825      554C4C00 
 3826              	.LC12:
 3827 0174 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3827      6176655F 
 3827      7365745F 
 3827      77617665 
 3827      5F706F69 
 3828 01a7 78636565 		.ascii	"xceeded\000"
 3828      64656400 
 3829 01af 00       		.space	1
 3830              	.LC13:
 3831 01b0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3831      5F627566 
 3831      6665725F 
 3831      70747220 
 3831      213D2030 
 3832 01c5 000000   		.space	3
 3833              	.LC14:
 3834 01c8 776200   		.ascii	"wb\000"
 3835 01cb 00       		.space	1
 3836              	.LC15:
 3837 01cc 50330A00 		.ascii	"P3\012\000"
 3838              	.LC16:
 3839 01d0 25642025 		.ascii	"%d %d\012\000"
 3839      640A00
 3840 01d7 00       		.space	1
 3841              	.LC17:
 3842 01d8 3235350A 		.ascii	"255\012\000"
 3842      00
 3843 01dd 000000   		.space	3
 3844              	.LC18:
 3845 01e0 25336420 		.ascii	"%3d %3d %3d\012\000"
 3845      25336420 
 3845      2533640A 
 3845      00
 3846 01ed 000000   		.space	3
 3847              	.LC19:
 3848 01f0 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3848      6176655F 
 3848      74657374 
 3848      5F627566 
 3848      6665725F 
 3849 0223 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3849      20627566 
 3849      66657220 
 3849      28256420 
 3849      62797465 
 3850              	.LC20:
 3851 0244 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3851      6176655F 
 3851      66696C6C 
 3851      5F706978 
 3851      6275665F 
 3852 0277 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3852      20666169 
 3852      6C65642C 
 3852      20726574 
 3852      75726E69 
 3853 0296 0000     		.space	2
 3854              	.LC21:
 3855 0298 43616C63 		.ascii	"Calculating test set %d\012\000"
 3855      756C6174 
 3855      696E6720 
 3855      74657374 
 3855      20736574 
 3856              		.text
 3857              	.Letext0:
 3858              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3859              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3860              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3861              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3862              		.file 7 "/usr/include/stdio.h"
 3863              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3864              		.file 9 "/usr/include/errno.h"
 3865              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3866              		.file 11 "/usr/include/unistd.h"
 3867              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3868              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3869              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3870              		.file 15 "/usr/include/math.h"
 3871              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3872              		.file 17 "/usr/include/time.h"
 3873              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3874              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3875              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3876              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3877              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3878              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3879              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3880              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3881              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3882              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3883              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3884              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3885              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3886              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3887              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3888              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3889              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3890              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3891              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3892              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3893              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3894              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3895              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3896              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3897              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3898              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3899              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3900              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3901              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3902              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3903              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3904              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3905              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3906              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3907              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3908              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3909              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3910              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3911              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3912              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3913              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3914              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3915              		.file 60 "/usr/local/include/python3.8/context.h"
 3916              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3917              		.file 62 "/usr/local/include/python3.8/code.h"
 3918              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3919              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3920              		.file 65 "/usr/local/include/python3.8/import.h"
 3921              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3922              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3923              		.file 68 "/usr/include/malloc.h"
 3924              		.file 69 "armwave.h"
 3925              		.file 70 "/usr/include/stdlib.h"
 3926              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3927              		.file 72 "/usr/include/assert.h"
 3928              		.file 73 "<built-in>"
 3929              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
