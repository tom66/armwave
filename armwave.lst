   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_NWAVES                 64
  25:armwave.c     **** #define TEST_WAVE_SIZE              2048
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t *test_wave_buffer; //[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.46,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.46,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.46,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.46
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.46, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     ****     
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 249              		.loc 1 81 40 view .LVU32
 250 00a0 D0409FE5 		ldr	r4, .L23	@ tmp242,
 251              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  82:armwave.c     **** 
  83:armwave.c     ****     // roll through each waveform
  84:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 252              		.loc 1 84 5 view .LVU33
 253 00a4 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 254              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 255              		.loc 1 81 63 view .LVU34
 256 00a8 2C5094E5 		ldr	r5, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 257              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 84 5 view .LVU35
 259 00ac 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 261              		.loc 1 81 40 view .LVU36
 262 00b0 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 264              		.loc 1 81 63 view .LVU37
 265 00b4 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 266              	.LVL7:
 267              		.loc 1 84 5 is_stmt 1 view .LVU38
 268              		.loc 1 84 5 is_stmt 0 view .LVU39
 269 00b8 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 270 00bc 000051E3 		cmp	r1, #0	@ height,
 271 00c0 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 272 00c4 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 273              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 84 11 view .LVU40
 275 00c8 0070A0E3 		mov	r7, #0	@ w,
 276              	.LVL8:
 277              	.L15:
  85:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 85 9 is_stmt 1 view .LVU41
  86:armwave.c     **** 
  87:armwave.c     ****         // roll through y and render the slice into the out buffer
  88:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  89:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 279              		.loc 1 89 9 view .LVU42
 280              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 281              		.loc 1 85 64 is_stmt 0 view .LVU43
 282 00cc 200094E5 		ldr	r0, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 283 00d0 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 284              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
 285              		.loc 1 89 16 view .LVU44
 286 00d4 0020A0E3 		mov	r2, #0	@ yy,
 287 00d8 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 288 00dc 006086E0 		add	r6, r6, r0	@ ivtmp.53, g_armwave_state.wave_buffer, tmp193
 289              	.LVL9:
 290              	.L14:
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 291              		.loc 1 90 13 is_stmt 1 view .LVU45
 292              	@ armwave.c:90:             word = *(uint32_t*)(wave_base + yy);
 293              		.loc 1 90 18 is_stmt 0 view .LVU46
 294 00e0 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 295              	.LVL10:
  91:armwave.c     **** 
  92:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 296              		.loc 1 92 13 is_stmt 1 view .LVU47
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  94:armwave.c     ****                 scale_value = (word & 0xff);
 297              		.loc 1 94 17 view .LVU48
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 298              		.loc 1 95 17 view .LVU49
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 299              		.loc 1 96 17 view .LVU50
 300              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 95 63 is_stmt 0 view .LVU51
 302 00e4 2C9094E5 		ldr	r9, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 303 00e8 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 304              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 96 47 view .LVU52
 306 00ec 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 307 00f0 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 308              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****                 word >>= 8;
 309              		.loc 1 97 22 view .LVU53
 310 00f4 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 311 00f8 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 312              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 313              		.loc 1 96 47 view .LVU54
 314 00fc 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 315 0100 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 316 0104 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 317 0108 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 318              	.LVL11:
 319              		.loc 1 97 17 is_stmt 1 view .LVU55
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 320              		.loc 1 94 17 view .LVU56
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 95 17 view .LVU57
  96:armwave.c     ****                 word >>= 8;
 322              		.loc 1 96 17 view .LVU58
 323              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 95 63 is_stmt 0 view .LVU59
 325 010c 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 326              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 327              		.loc 1 96 47 view .LVU60
 328 0110 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 329 0114 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 330              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 95 63 view .LVU61
 332 0118 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 333 011c 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 334              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 335              		.loc 1 96 47 view .LVU62
 336 0120 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 337 0124 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 338              	.LVL12:
 339              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 340              		.loc 1 89 37 view .LVU63
 341 0128 042082E2 		add	r2, r2, #4	@ yy, yy,
 342              	.LVL13:
 343              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 344              		.loc 1 96 47 view .LVU64
 345 012c 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 346 0130 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 347              	.LVL14:
 348              		.loc 1 97 17 is_stmt 1 view .LVU65
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 349              		.loc 1 94 17 view .LVU66
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 350              		.loc 1 95 17 view .LVU67
  96:armwave.c     ****                 word >>= 8;
 351              		.loc 1 96 17 view .LVU68
 352              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 95 63 is_stmt 0 view .LVU69
 354 0134 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 355              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 356              		.loc 1 89 9 view .LVU70
 357 0138 020051E1 		cmp	r1, r2	@ height, yy
 358              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 359              		.loc 1 96 47 view .LVU71
 360 013c 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 361 0140 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 362 0144 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 363 0148 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 364              		.loc 1 97 17 is_stmt 1 view .LVU72
 365              	.LVL15:
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 366              		.loc 1 94 17 view .LVU73
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 367              		.loc 1 95 17 view .LVU74
  96:armwave.c     ****                 word >>= 8;
 368              		.loc 1 96 17 view .LVU75
 369              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 95 63 is_stmt 0 view .LVU76
 371 014c 2CC094E5 		ldr	ip, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 372              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 373              		.loc 1 96 47 view .LVU77
 374 0150 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 375 0154 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 376 0158 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 377 015c 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 378              		.loc 1 97 17 is_stmt 1 view .LVU78
 379              	.LVL16:
 380              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 381              		.loc 1 89 9 is_stmt 0 view .LVU79
 382 0160 DEFFFF8A 		bhi	.L14		@,
 383              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 384              		.loc 1 84 5 view .LVU80
 385 0164 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 386              	.LVL17:
 387              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 388              		.loc 1 84 44 view .LVU81
 389 0168 017087E2 		add	r7, r7, #1	@ w, w,
 390              	.LVL18:
 391              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 392              		.loc 1 84 5 view .LVU82
 393 016c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 394 0170 D5FFFF3A 		bcc	.L15		@,
 395 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 396              	.L24:
 397              		.align	2
 398              	.L23:
 399 0178 00000000 		.word	g_armwave_state
 400              		.cfi_endproc
 401              	.LFE59:
 403              		.align	2
 404              		.global	armwave_fill_pixbuf_256
 405              		.syntax unified
 406              		.arm
 407              		.fpu vfp
 409              	armwave_fill_pixbuf_256:
 410              	.LVL19:
 411              	.LFB60:
  98:armwave.c     ****             }
  99:armwave.c     ****         }
 100:armwave.c     ****     }
 101:armwave.c     **** }
 102:armwave.c     **** 
 103:armwave.c     **** /*
 104:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 105:armwave.c     ****  */
 106:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 107:armwave.c     **** {
 412              		.loc 1 107 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 416              		.loc 1 108 5 view .LVU84
 109:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 417              		.loc 1 109 5 view .LVU85
 110:armwave.c     ****     uint8_t r, g, b, value;
 418              		.loc 1 110 5 view .LVU86
 111:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 419              		.loc 1 111 5 view .LVU87
 420              	@ armwave.c:107: {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 421              		.loc 1 107 1 is_stmt 0 view .LVU88
 422 017c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 423              		.cfi_def_cfa_offset 36
 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 8, -20
 429              		.cfi_offset 9, -16
 430              		.cfi_offset 10, -12
 431              		.cfi_offset 11, -8
 432              		.cfi_offset 14, -4
 433              	@ armwave.c:115:     assert(out_buffer != NULL);
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 113:armwave.c     ****     uint32_t offset;
 114:armwave.c     **** 
 115:armwave.c     ****     assert(out_buffer != NULL);
 434              		.loc 1 115 5 view .LVU89
 435 0180 000050E3 		cmp	r0, #0	@ out_buffer
 436              	@ armwave.c:111:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 437              		.loc 1 111 15 view .LVU90
 438 0184 44529FE5 		ldr	r5, .L52	@ tmp360,
 439              	@ armwave.c:107: {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 440              		.loc 1 107 1 view .LVU91
 441 0188 0CD04DE2 		sub	sp, sp, #12	@,,
 442              		.cfi_def_cfa_offset 48
 443              	@ armwave.c:111:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 444              		.loc 1 111 15 view .LVU92
 445 018c 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 446              	.LVL20:
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 447              		.loc 1 112 5 is_stmt 1 view .LVU93
 113:armwave.c     **** 
 448              		.loc 1 113 5 view .LVU94
 449              		.loc 1 115 5 view .LVU95
 450 0190 8900000A 		beq	.L50		@,
 116:armwave.c     **** 
 117:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 118:armwave.c     **** 
 119:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 451              		.loc 1 119 5 view .LVU96
 452              	@ armwave.c:119:     npix = g_armwave_state.target_width * 256;
 453              		.loc 1 119 41 is_stmt 0 view .LVU97
 454 0194 44C095E5 		ldr	ip, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 455 0198 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 456              	.LVL21:
 120:armwave.c     **** 
 121:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 457              		.loc 1 121 5 is_stmt 1 view .LVU98
 458              		.loc 1 121 5 is_stmt 0 view .LVU99
 459 019c 00005CE3 		cmp	ip, #0	@ npix,
 460 01a0 0A0000DA 		ble	.L25		@,
 461              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 123:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 124:armwave.c     ****         // most normal waveforms.
 125:armwave.c     ****         wave_word = *base_32ptr++;
 126:armwave.c     **** 
 127:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 129:armwave.c     ****                 value = wave_word & 0xff;
 130:armwave.c     ****                 wave_word >>= 8;
 131:armwave.c     **** 
 132:armwave.c     ****                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 462              		.loc 1 133 52 view .LVU100
 463 01a4 F8A5D5E1 		ldrsh	r10, [r5, #88]	@ _70, g_armwave_state.ch1_color.r
 464              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 465              		.loc 1 134 52 view .LVU101
 466 01a8 FA95D5E1 		ldrsh	r9, [r5, #90]	@ _76, g_armwave_state.ch1_color.g
 467              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 468              		.loc 1 135 52 view .LVU102
 469 01ac FCB5D5E1 		ldrsh	fp, [r5, #92]	@ _80, g_armwave_state.ch1_color.b
 470              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 471              		.loc 1 121 11 view .LVU103
 472 01b0 0030A0E3 		mov	r3, #0	@ n,
 473 01b4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 474              	.LVL22:
 475              	.L34:
 125:armwave.c     **** 
 476              		.loc 1 125 9 is_stmt 1 view .LVU104
 477              	@ armwave.c:125:         wave_word = *base_32ptr++;
 125:armwave.c     **** 
 478              		.loc 1 125 19 is_stmt 0 view .LVU105
 479 01b8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 480              	.LVL23:
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 481              		.loc 1 127 9 is_stmt 1 view .LVU106
 482              	@ armwave.c:127:         if(COND_UNLIKELY(wave_word != 0)) {
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 483              		.loc 1 127 11 is_stmt 0 view .LVU107
 484 01bc 000052E3 		cmp	r2, #0	@ wave_word,
 485 01c0 0400001A 		bne	.L51		@,
 486              	.LVL24:
 487              	.L29:
 488              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 489              		.loc 1 121 28 discriminator 2 view .LVU108
 490 01c4 043083E2 		add	r3, r3, #4	@ n, n,
 491              	.LVL25:
 492              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 493              		.loc 1 121 5 discriminator 2 view .LVU109
 494 01c8 03005CE1 		cmp	ip, r3	@ npix, n
 495 01cc F9FFFFCA 		bgt	.L34		@,
 496              	.LVL26:
 497              	.L25:
 498              	@ armwave.c:154: }
 136:armwave.c     **** 
 137:armwave.c     ****                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 140:armwave.c     **** 
 141:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 142:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 144:armwave.c     ****                     // Is there a better way?
 145:armwave.c     ****                     nsub = n + i;
 146:armwave.c     ****                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 151:armwave.c     ****             }
 152:armwave.c     ****         } 
 153:armwave.c     ****     }
 154:armwave.c     **** }
 499              		.loc 1 154 1 view .LVU110
 500 01d0 0CD08DE2 		add	sp, sp, #12	@,,
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed	@
 504 01d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 505              	.LVL27:
 506              	.L51:
 507              		.cfi_restore_state
 129:armwave.c     ****                 wave_word >>= 8;
 508              		.loc 1 129 17 is_stmt 1 view .LVU111
 130:armwave.c     **** 
 509              		.loc 1 130 17 view .LVU112
 510              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 511              		.loc 1 132 19 is_stmt 0 view .LVU113
 512 01d8 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 513              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 514              		.loc 1 130 27 view .LVU114
 515 01dc 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 516              	.LVL28:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 517              		.loc 1 132 17 is_stmt 1 view .LVU115
 518              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 519              		.loc 1 132 19 is_stmt 0 view .LVU116
 520 01e0 1900000A 		beq	.L30		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 521              		.loc 1 133 21 is_stmt 1 view .LVU117
 522              	.LVL29:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 523              		.loc 1 134 21 view .LVU118
 135:armwave.c     **** 
 524              		.loc 1 135 21 view .LVU119
 137:armwave.c     ****                     g = MIN(gg, 255);
 525              		.loc 1 137 21 view .LVU120
 138:armwave.c     ****                     b = MIN(bb, 255);
 526              		.loc 1 138 21 view .LVU121
 139:armwave.c     **** 
 527              		.loc 1 139 21 view .LVU122
 142:armwave.c     **** 
 528              		.loc 1 142 21 view .LVU123
 145:armwave.c     ****                     xx = nsub & 0xff;
 529              		.loc 1 145 21 view .LVU124
 146:armwave.c     ****                     yy = nsub >> 8;
 530              		.loc 1 146 21 view .LVU125
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 531              		.loc 1 147 21 view .LVU126
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 532              		.loc 1 148 21 view .LVU127
 149:armwave.c     ****                 }
 533              		.loc 1 149 21 view .LVU128
 534              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 535              		.loc 1 135 55 is_stmt 0 view .LVU129
 536 01e4 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 537              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 538              		.loc 1 134 55 view .LVU130
 539 01e8 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 540              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 541              		.loc 1 135 24 view .LVU131
 542 01ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 543              	.LVL30:
 544              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 545              		.loc 1 139 25 view .LVU132
 546 01f0 FF0054E3 		cmp	r4, #255	@ bb,
 547              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 548              		.loc 1 134 24 view .LVU133
 549 01f4 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 550              	.LVL31:
 551              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 552              		.loc 1 139 25 view .LVU134
 553 01f8 FF40A0A3 		movge	r4, #255	@ bb,
 554              	.LVL32:
 555              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 556              		.loc 1 133 55 view .LVU135
 557 01fc 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 558              	.LVL33:
 559              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 560              		.loc 1 138 25 view .LVU136
 561 0200 FF0058E3 		cmp	r8, #255	@ gg,
 562 0204 FF80A0A3 		movge	r8, #255	@ gg,
 563              	.LVL34:
 564              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 565              		.loc 1 133 24 view .LVU137
 566 0208 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 567              	.LVL35:
 568              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 569              		.loc 1 142 56 view .LVU138
 570 020c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 571              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 572              		.loc 1 149 39 view .LVU139
 573 0210 440095E5 		ldr	r0, [r5, #68]	@ tmp372, g_armwave_state.target_width
 574              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 575              		.loc 1 142 44 view .LVU140
 576 0214 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 577              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 578              		.loc 1 137 25 view .LVU141
 579 0218 FF0056E3 		cmp	r6, #255	@ rr,
 580              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 581              		.loc 1 142 56 view .LVU142
 582 021c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 583              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 584              		.loc 1 146 24 view .LVU143
 585 0220 7370EFE6 		uxtb	r7, r3	@ xx, n
 586              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 587              		.loc 1 142 44 view .LVU144
 588 0224 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 589              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 590              		.loc 1 142 51 view .LVU145
 591 0228 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 592              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 593              		.loc 1 137 25 view .LVU146
 594 022c FF60A0A3 		movge	r6, #255	@ rr,
 595              	.LVL36:
 596              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 597              		.loc 1 147 31 view .LVU147
 598 0230 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 599              	.LVL37:
 600              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 601              		.loc 1 149 39 view .LVU148
 602 0234 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 603              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 604              		.loc 1 142 62 view .LVU149
 605 0238 7660EFE6 		uxtb	r6, r6	@ rr, rr
 606              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 607              		.loc 1 149 49 view .LVU150
 608 023c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 609              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 610              		.loc 1 142 62 view .LVU151
 611 0240 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 612              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 613              		.loc 1 142 26 view .LVU152
 614 0244 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 615              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 616              		.loc 1 149 49 view .LVU153
 617 0248 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 618              	.LVL38:
 619              	.L30:
 129:armwave.c     ****                 wave_word >>= 8;
 620              		.loc 1 129 17 is_stmt 1 view .LVU154
 130:armwave.c     **** 
 621              		.loc 1 130 17 view .LVU155
 622              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 132 19 is_stmt 0 view .LVU156
 624 024c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 625              	.LVL39:
 626              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 627              		.loc 1 130 27 view .LVU157
 628 0250 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 629              	.LVL40:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 630              		.loc 1 132 17 is_stmt 1 view .LVU158
 631              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 132 19 is_stmt 0 view .LVU159
 633 0254 1C00000A 		beq	.L31		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 133 21 is_stmt 1 view .LVU160
 635              	.LVL41:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 134 21 view .LVU161
 135:armwave.c     **** 
 637              		.loc 1 135 21 view .LVU162
 137:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 137 21 view .LVU163
 138:armwave.c     ****                     b = MIN(bb, 255);
 639              		.loc 1 138 21 view .LVU164
 139:armwave.c     **** 
 640              		.loc 1 139 21 view .LVU165
 142:armwave.c     **** 
 641              		.loc 1 142 21 view .LVU166
 145:armwave.c     ****                     xx = nsub & 0xff;
 642              		.loc 1 145 21 view .LVU167
 643              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 644              		.loc 1 135 55 is_stmt 0 view .LVU168
 645 0258 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 646              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 134 55 view .LVU169
 648 025c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 649              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 650              		.loc 1 135 24 view .LVU170
 651 0260 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 652              	.LVL42:
 653              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 654              		.loc 1 139 25 view .LVU171
 655 0264 FF0054E3 		cmp	r4, #255	@ bb,
 656 0268 FF40A0A3 		movge	r4, #255	@ bb,
 657              	.LVL43:
 658              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 659              		.loc 1 133 55 view .LVU172
 660 026c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 661              	.LVL44:
 662              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 134 24 view .LVU173
 664 0270 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 665              	.LVL45:
 666              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 667              		.loc 1 142 44 view .LVU174
 668 0274 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 669              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 670              		.loc 1 138 25 view .LVU175
 671 0278 FF0057E3 		cmp	r7, #255	@ gg,
 672 027c 016083E2 		add	r6, r3, #1	@ _158, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 673              		.loc 1 146 21 is_stmt 1 view .LVU176
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 674              		.loc 1 147 21 view .LVU177
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 675              		.loc 1 148 21 view .LVU178
 149:armwave.c     ****                 }
 676              		.loc 1 149 21 view .LVU179
 677              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 678              		.loc 1 142 44 is_stmt 0 view .LVU180
 679 0280 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 680              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 681              		.loc 1 138 25 view .LVU181
 682 0284 FF70A0A3 		movge	r7, #255	@ gg,
 683              	.LVL46:
 684              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 685              		.loc 1 142 44 view .LVU182
 686 0288 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 687              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 688              		.loc 1 149 39 view .LVU183
 689 028c 444095E5 		ldr	r4, [r5, #68]	@ tmp375, g_armwave_state.target_width
 690              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 691              		.loc 1 133 24 view .LVU184
 692 0290 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 693              	.LVL47:
 694              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 695              		.loc 1 146 24 view .LVU185
 696 0294 7600EFE6 		uxtb	r0, r6	@ xx, _158
 697              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 698              		.loc 1 137 25 view .LVU186
 699 0298 FF005EE3 		cmp	lr, #255	@ rr,
 700              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 701              		.loc 1 142 56 view .LVU187
 702 029c 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 703              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 704              		.loc 1 147 31 view .LVU188
 705 02a0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 706              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 707              		.loc 1 149 39 view .LVU189
 708 02a4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 709              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 137 25 view .LVU190
 711 02a8 FFE0A0A3 		movge	lr, #255	@ rr,
 712              	.LVL48:
 713              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 714              		.loc 1 142 51 view .LVU191
 715 02ac 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 716              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 717              		.loc 1 142 56 view .LVU192
 718 02b0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 719              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 720              		.loc 1 142 51 view .LVU193
 721 02b4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 722              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 723              		.loc 1 142 62 view .LVU194
 724 02b8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 725              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 726              		.loc 1 149 49 view .LVU195
 727 02bc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 728              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 729              		.loc 1 142 62 view .LVU196
 730 02c0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 731              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 732              		.loc 1 142 26 view .LVU197
 733 02c4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 734              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 735              		.loc 1 149 49 view .LVU198
 736 02c8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 737              	.LVL49:
 738              	.L31:
 129:armwave.c     ****                 wave_word >>= 8;
 739              		.loc 1 129 17 is_stmt 1 view .LVU199
 130:armwave.c     **** 
 740              		.loc 1 130 17 view .LVU200
 741              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 132 19 is_stmt 0 view .LVU201
 743 02cc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 744              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 745              		.loc 1 130 27 view .LVU202
 746 02d0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 747              	.LVL50:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 132 17 is_stmt 1 view .LVU203
 749              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 132 19 is_stmt 0 view .LVU204
 751 02d4 1A00000A 		beq	.L32		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 133 21 is_stmt 1 view .LVU205
 753              	.LVL51:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 134 21 view .LVU206
 135:armwave.c     **** 
 755              		.loc 1 135 21 view .LVU207
 137:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 137 21 view .LVU208
 138:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 138 21 view .LVU209
 139:armwave.c     **** 
 758              		.loc 1 139 21 view .LVU210
 142:armwave.c     **** 
 759              		.loc 1 142 21 view .LVU211
 145:armwave.c     ****                     xx = nsub & 0xff;
 760              		.loc 1 145 21 view .LVU212
 761              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 762              		.loc 1 135 55 is_stmt 0 view .LVU213
 763 02d8 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 764              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 765              		.loc 1 134 55 view .LVU214
 766 02dc 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 767              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 768              		.loc 1 135 24 view .LVU215
 769 02e0 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 770              	.LVL52:
 771              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 772              		.loc 1 133 55 view .LVU216
 773 02e4 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 774              	.LVL53:
 775              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 776              		.loc 1 139 25 view .LVU217
 777 02e8 FF0054E3 		cmp	r4, #255	@ bb,
 778              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 779              		.loc 1 134 24 view .LVU218
 780 02ec 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 781              	.LVL54:
 782              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 783              		.loc 1 139 25 view .LVU219
 784 02f0 FF40A0A3 		movge	r4, #255	@ bb,
 785              	.LVL55:
 786              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 787              		.loc 1 138 25 view .LVU220
 788 02f4 FF0056E3 		cmp	r6, #255	@ gg,
 789 02f8 FF60A0A3 		movge	r6, #255	@ gg,
 790              	.LVL56:
 138:armwave.c     ****                     b = MIN(bb, 255);
 791              		.loc 1 138 25 view .LVU221
 792 02fc 027083E2 		add	r7, r3, #2	@ _66, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 793              		.loc 1 146 21 is_stmt 1 view .LVU222
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 794              		.loc 1 147 21 view .LVU223
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 795              		.loc 1 148 21 view .LVU224
 149:armwave.c     ****                 }
 796              		.loc 1 149 21 view .LVU225
 797              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 798              		.loc 1 133 24 is_stmt 0 view .LVU226
 799 0300 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 800              	.LVL57:
 801              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 802              		.loc 1 149 39 view .LVU227
 803 0304 440095E5 		ldr	r0, [r5, #68]	@ tmp376, g_armwave_state.target_width
 804              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 805              		.loc 1 137 25 view .LVU228
 806 0308 FF005EE3 		cmp	lr, #255	@ rr,
 807              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 808              		.loc 1 146 24 view .LVU229
 809 030c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 810              	.LVL58:
 811              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 812              		.loc 1 142 56 view .LVU230
 813 0310 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 814              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 815              		.loc 1 142 44 view .LVU231
 816 0314 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 817              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 137 25 view .LVU232
 819 0318 FFE0A0A3 		movge	lr, #255	@ rr,
 820              	.LVL59:
 821              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 822              		.loc 1 147 31 view .LVU233
 823 031c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 824              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 825              		.loc 1 149 39 view .LVU234
 826 0320 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 827              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 828              		.loc 1 142 44 view .LVU235
 829 0324 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 830              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 831              		.loc 1 142 56 view .LVU236
 832 0328 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 833              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 834              		.loc 1 142 51 view .LVU237
 835 032c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 836              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 837              		.loc 1 142 62 view .LVU238
 838 0330 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 839              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 840              		.loc 1 149 49 view .LVU239
 841 0334 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 842              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 843              		.loc 1 142 62 view .LVU240
 844 0338 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 845              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 846              		.loc 1 142 26 view .LVU241
 847 033c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 848              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 849              		.loc 1 149 49 view .LVU242
 850 0340 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 851              	.L32:
 852              	.LVL60:
 129:armwave.c     ****                 wave_word >>= 8;
 853              		.loc 1 129 17 is_stmt 1 view .LVU243
 130:armwave.c     **** 
 854              		.loc 1 130 17 view .LVU244
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 855              		.loc 1 132 17 view .LVU245
 856              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 857              		.loc 1 132 19 is_stmt 0 view .LVU246
 858 0344 000052E3 		cmp	r2, #0	@ wave_word,
 859 0348 9DFFFF0A 		beq	.L29		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 860              		.loc 1 133 21 is_stmt 1 view .LVU247
 861              	.LVL61:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 862              		.loc 1 134 21 view .LVU248
 135:armwave.c     **** 
 863              		.loc 1 135 21 view .LVU249
 137:armwave.c     ****                     g = MIN(gg, 255);
 864              		.loc 1 137 21 view .LVU250
 138:armwave.c     ****                     b = MIN(bb, 255);
 865              		.loc 1 138 21 view .LVU251
 139:armwave.c     **** 
 866              		.loc 1 139 21 view .LVU252
 142:armwave.c     **** 
 867              		.loc 1 142 21 view .LVU253
 145:armwave.c     ****                     xx = nsub & 0xff;
 868              		.loc 1 145 21 view .LVU254
 869              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 870              		.loc 1 135 55 is_stmt 0 view .LVU255
 871 034c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 872              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 873              		.loc 1 134 55 view .LVU256
 874 0350 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 875              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 876              		.loc 1 135 24 view .LVU257
 877 0354 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 878              	.LVL62:
 879              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 880              		.loc 1 133 55 view .LVU258
 881 0358 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 882              	.LVL63:
 883              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 884              		.loc 1 139 25 view .LVU259
 885 035c FF005EE3 		cmp	lr, #255	@ bb,
 886              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 887              		.loc 1 134 24 view .LVU260
 888 0360 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 889              	.LVL64:
 890              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 891              		.loc 1 139 25 view .LVU261
 892 0364 FFE0A0A3 		movge	lr, #255	@ bb,
 893              	.LVL65:
 894              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 138 25 view .LVU262
 896 0368 FF0054E3 		cmp	r4, #255	@ gg,
 897 036c FF40A0A3 		movge	r4, #255	@ gg,
 898              	.LVL66:
 138:armwave.c     ****                     b = MIN(bb, 255);
 899              		.loc 1 138 25 view .LVU263
 900 0370 036083E2 		add	r6, r3, #3	@ _59, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 901              		.loc 1 146 21 is_stmt 1 view .LVU264
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 902              		.loc 1 147 21 view .LVU265
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 903              		.loc 1 148 21 view .LVU266
 149:armwave.c     ****                 }
 904              		.loc 1 149 21 view .LVU267
 905              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 906              		.loc 1 133 24 is_stmt 0 view .LVU268
 907 0374 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 908              	.LVL67:
 909              	@ armwave.c:148:                     offset = yy + (xx * g_armwave_state.target_width);
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 910              		.loc 1 148 39 view .LVU269
 911 0378 447095E5 		ldr	r7, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 912              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 913              		.loc 1 137 25 view .LVU270
 914 037c FF0052E3 		cmp	r2, #255	@ rr,
 915              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 916              		.loc 1 146 24 view .LVU271
 917 0380 7680EFE6 		uxtb	r8, r6	@ xx, _59
 918              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 919              		.loc 1 142 56 view .LVU272
 920 0384 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 921              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 922              		.loc 1 142 44 view .LVU273
 923 0388 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 924              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 925              		.loc 1 137 25 view .LVU274
 926 038c FF20A0A3 		movge	r2, #255	@ rr,
 927              	.LVL68:
 928              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 929              		.loc 1 147 31 view .LVU275
 930 0390 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 931              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 932              		.loc 1 142 44 view .LVU276
 933 0394 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 934              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 935              		.loc 1 142 56 view .LVU277
 936 0398 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 937              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 938              		.loc 1 149 39 view .LVU278
 939 039c 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 940              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 941              		.loc 1 142 51 view .LVU279
 942 03a0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 943              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 944              		.loc 1 142 62 view .LVU280
 945 03a4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 946              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 947              		.loc 1 149 49 view .LVU281
 948 03a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 949              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 950              		.loc 1 142 62 view .LVU282
 951 03ac 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 952              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 953              		.loc 1 142 26 view .LVU283
 954 03b0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 955              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 956              		.loc 1 149 49 view .LVU284
 957 03b4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 958 03b8 81FFFFEA 		b	.L29		@
 959              	.LVL69:
 960              	.L50:
 115:armwave.c     **** 
 961              		.loc 1 115 5 is_stmt 1 discriminator 1 view .LVU285
 962 03bc 10309FE5 		ldr	r3, .L52+4	@,
 963 03c0 7320A0E3 		mov	r2, #115	@,
 964 03c4 0C109FE5 		ldr	r1, .L52+8	@,
 965              	.LVL70:
 115:armwave.c     **** 
 966              		.loc 1 115 5 is_stmt 0 discriminator 1 view .LVU286
 967 03c8 0C009FE5 		ldr	r0, .L52+12	@,
 968              	.LVL71:
 115:armwave.c     **** 
 969              		.loc 1 115 5 discriminator 1 view .LVU287
 970 03cc FEFFFFEB 		bl	__assert_fail		@
 971              	.LVL72:
 972              	.L53:
 115:armwave.c     **** 
 973              		.loc 1 115 5 discriminator 1 view .LVU288
 974              		.align	2
 975              	.L52:
 976 03d0 00000000 		.word	g_armwave_state
 977 03d4 00000000 		.word	.LANCHOR0
 978 03d8 20000000 		.word	.LC2
 979 03dc 2C000000 		.word	.LC3
 980              		.cfi_endproc
 981              	.LFE60:
 983              		.align	2
 984              		.global	armwave_fill_pixbuf_scaled
 985              		.syntax unified
 986              		.arm
 987              		.fpu vfp
 989              	armwave_fill_pixbuf_scaled:
 990              	.LVL73:
 991              	.LFB61:
 155:armwave.c     **** 
 156:armwave.c     **** /*
 157:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 158:armwave.c     ****  * Rows are repeated as necessary.
 159:armwave.c     ****  */
 160:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 161:armwave.c     **** {
 992              		.loc 1 161 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 996              		.loc 1 162 5 view .LVU290
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 997              		.loc 1 163 5 view .LVU291
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 998              		.loc 1 164 5 view .LVU292
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 999              		.loc 1 165 5 view .LVU293
 1000              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1001              		.loc 1 161 1 is_stmt 0 view .LVU294
 1002 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1003              		.cfi_def_cfa_offset 36
 1004              		.cfi_offset 4, -36
 1005              		.cfi_offset 5, -32
 1006              		.cfi_offset 6, -28
 1007              		.cfi_offset 7, -24
 1008              		.cfi_offset 8, -20
 1009              		.cfi_offset 9, -16
 1010              		.cfi_offset 10, -12
 1011              		.cfi_offset 11, -8
 1012              		.cfi_offset 14, -4
 1013              	@ armwave.c:169:     assert(out_buffer != NULL);
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 167:armwave.c     ****     uint32_t offset;
 168:armwave.c     **** 
 169:armwave.c     ****     assert(out_buffer != NULL);
 1014              		.loc 1 169 5 view .LVU295
 1015 03e4 000050E3 		cmp	r0, #0	@ out_buffer
 1016              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1017              		.loc 1 165 15 view .LVU296
 1018 03e8 34519FE5 		ldr	r5, .L79	@ tmp202,
 1019              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1020              		.loc 1 161 1 view .LVU297
 1021 03ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1022              		.cfi_def_cfa_offset 48
 1023              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1024              		.loc 1 165 15 view .LVU298
 1025 03f0 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1026              	.LVL74:
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1027              		.loc 1 166 5 is_stmt 1 view .LVU299
 167:armwave.c     **** 
 1028              		.loc 1 167 5 view .LVU300
 1029              		.loc 1 169 5 view .LVU301
 1030 03f4 4500000A 		beq	.L76		@,
 170:armwave.c     **** 
 171:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1031              		.loc 1 171 5 view .LVU302
 1032              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 1033              		.loc 1 171 41 is_stmt 0 view .LVU303
 1034 03f8 448095E5 		ldr	r8, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1035 03fc 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1036              	.LVL75:
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1037              		.loc 1 172 5 is_stmt 1 view .LVU304
 173:armwave.c     **** 
 174:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1038              		.loc 1 174 5 view .LVU305
 1039              		.loc 1 174 5 is_stmt 0 view .LVU306
 1040 0400 000058E3 		cmp	r8, #0	@ npix,
 1041 0404 0B0000DA 		ble	.L54		@,
 1042              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 176:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 177:armwave.c     ****         // most normal waveforms.
 178:armwave.c     ****         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 180:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 183:armwave.c     ****                 wave_word >>= 8;
 184:armwave.c     **** 
 185:armwave.c     ****                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1043              		.loc 1 187 52 view .LVU307
 1044 0408 FA35D5E1 		ldrsh	r3, [r5, #90]	@ _11, g_armwave_state.ch1_color.g
 1045              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1046              		.loc 1 186 52 view .LVU308
 1047 040c F8B5D5E1 		ldrsh	fp, [r5, #88]	@ _7, g_armwave_state.ch1_color.r
 1048              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1049              		.loc 1 174 11 view .LVU309
 1050 0410 00E0A0E3 		mov	lr, #0	@ n,
 1051              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1052              		.loc 1 187 52 view .LVU310
 1053 0414 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1054              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1055              		.loc 1 188 52 view .LVU311
 1056 0418 FC35D5E1 		ldrsh	r3, [r5, #92]	@ _14, g_armwave_state.ch1_color.b
 1057 041c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1058              	.LVL76:
 1059              	.L61:
 178:armwave.c     **** 
 1060              		.loc 1 178 9 is_stmt 1 view .LVU312
 1061              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 1062              		.loc 1 178 19 is_stmt 0 view .LVU313
 1063 0420 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1064              	.LVL77:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 1065              		.loc 1 180 9 is_stmt 1 view .LVU314
 1066              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 1067              		.loc 1 180 11 is_stmt 0 view .LVU315
 1068 0424 00005CE3 		cmp	ip, #0	@ wave_word,
 1069 0428 0400001A 		bne	.L77		@,
 1070              	.L57:
 1071              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1072              		.loc 1 174 28 view .LVU316
 1073 042c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1074              	.LVL78:
 1075              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1076              		.loc 1 174 5 view .LVU317
 1077 0430 0E0058E1 		cmp	r8, lr	@ npix, n
 1078 0434 F9FFFFCA 		bgt	.L61		@,
 1079              	.LVL79:
 1080              	.L54:
 1081              	@ armwave.c:210: }
 189:armwave.c     **** 
 190:armwave.c     ****                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 193:armwave.c     **** 
 194:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 195:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 197:armwave.c     ****                     // Do line scaling as necessary.
 198:armwave.c     ****                     nsub = n + w;
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 201:armwave.c     **** 
 202:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 206:armwave.c     ****                 }
 207:armwave.c     ****             }
 208:armwave.c     ****         }
 209:armwave.c     ****     }
 210:armwave.c     **** }
 1082              		.loc 1 210 1 view .LVU318
 1083 0438 0CD08DE2 		add	sp, sp, #12	@,,
 1084              		.cfi_remember_state
 1085              		.cfi_def_cfa_offset 36
 1086              		@ sp needed	@
 1087 043c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1088              	.LVL80:
 1089              	.L77:
 1090              		.cfi_restore_state
 1091              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1092              		.loc 1 185 19 view .LVU319
 1093 0440 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1094              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1095              		.loc 1 181 19 view .LVU320
 1096 0444 0090A0E3 		mov	r9, #0	@ w,
 1097              	.LVL81:
 182:armwave.c     ****                 wave_word >>= 8;
 1098              		.loc 1 182 17 is_stmt 1 view .LVU321
 183:armwave.c     **** 
 1099              		.loc 1 183 17 view .LVU322
 1100              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 1101              		.loc 1 183 27 is_stmt 0 view .LVU323
 1102 0448 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1103              	.LVL82:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1104              		.loc 1 185 17 is_stmt 1 view .LVU324
 1105              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1106              		.loc 1 185 19 is_stmt 0 view .LVU325
 1107 044c 0500001A 		bne	.L78		@,
 1108              	.L58:
 1109              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1110              		.loc 1 181 32 view .LVU326
 1111 0450 019089E2 		add	r9, r9, #1	@ w, w,
 1112              	.LVL83:
 1113              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1114              		.loc 1 181 13 view .LVU327
 1115 0454 040059E3 		cmp	r9, #4	@ w,
 1116 0458 F3FFFF0A 		beq	.L57		@,
 182:armwave.c     ****                 wave_word >>= 8;
 1117              		.loc 1 182 17 is_stmt 1 view .LVU328
 1118              	.LVL84:
 183:armwave.c     **** 
 1119              		.loc 1 183 17 view .LVU329
 1120              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1121              		.loc 1 185 19 is_stmt 0 view .LVU330
 1122 045c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1123              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 1124              		.loc 1 183 27 view .LVU331
 1125 0460 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1126              	.LVL85:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1127              		.loc 1 185 17 is_stmt 1 view .LVU332
 1128              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1129              		.loc 1 185 19 is_stmt 0 view .LVU333
 1130 0464 F9FFFF0A 		beq	.L58		@,
 1131              	.L78:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1132              		.loc 1 186 21 is_stmt 1 view .LVU334
 1133              	.LVL86:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1134              		.loc 1 187 21 view .LVU335
 188:armwave.c     **** 
 1135              		.loc 1 188 21 view .LVU336
 190:armwave.c     ****                     g = MIN(gg, 255);
 1136              		.loc 1 190 21 view .LVU337
 191:armwave.c     ****                     b = MIN(bb, 255);
 1137              		.loc 1 191 21 view .LVU338
 192:armwave.c     **** 
 1138              		.loc 1 192 21 view .LVU339
 195:armwave.c     **** 
 1139              		.loc 1 195 21 view .LVU340
 1140              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1141              		.loc 1 188 55 is_stmt 0 view .LVU341
 1142 0468 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1143              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1144              		.loc 1 187 55 view .LVU342
 1145 046c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1146 0470 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1147              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1148              		.loc 1 188 55 view .LVU343
 1149 0474 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1150              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1151              		.loc 1 187 55 view .LVU344
 1152 0478 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1153              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1154              		.loc 1 188 24 view .LVU345
 1155 047c 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1156              	.LVL87:
 1157              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1158              		.loc 1 186 55 view .LVU346
 1159 0480 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1160              	.LVL88:
 1161              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1162              		.loc 1 187 24 view .LVU347
 1163 0484 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1164              	.LVL89:
 1165              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 1166              		.loc 1 192 25 view .LVU348
 1167 0488 FF0052E3 		cmp	r2, #255	@ bb,
 1168 048c FF20A0A3 		movge	r2, #255	@ bb,
 1169              	.LVL90:
 1170              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 1171              		.loc 1 191 25 view .LVU349
 1172 0490 FF0051E3 		cmp	r1, #255	@ gg,
 1173 0494 FF10A0A3 		movge	r1, #255	@ gg,
 1174              	.LVL91:
 1175              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1176              		.loc 1 186 24 view .LVU350
 1177 0498 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1178              	.LVL92:
 1179              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 1180              		.loc 1 190 25 view .LVU351
 1181 049c FF0053E3 		cmp	r3, #255	@ rr,
 1182              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1183              		.loc 1 195 56 view .LVU352
 1184 04a0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1185              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 1186              		.loc 1 190 25 view .LVU353
 1187 04a4 FF30A0A3 		movge	r3, #255	@ rr,
 1188              	.LVL93:
 1189              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1190              		.loc 1 195 44 view .LVU354
 1191 04a8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1192              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1193              		.loc 1 195 56 view .LVU355
 1194 04ac 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1195              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1196              		.loc 1 199 57 view .LVU356
 1197 04b0 1CA095E5 		ldr	r10, [r5, #28]	@ _28, g_armwave_state.vscale
 1198              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1199              		.loc 1 195 44 view .LVU357
 1200 04b4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1201              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1202              		.loc 1 195 51 view .LVU358
 1203 04b8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1204              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1205              		.loc 1 195 62 view .LVU359
 1206 04bc 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1207              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1208              		.loc 1 199 32 view .LVU360
 1209 04c0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1210              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1211              		.loc 1 195 62 view .LVU361
 1212 04c4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1213              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1214              		.loc 1 202 21 view .LVU362
 1215 04c8 00005AE3 		cmp	r10, #0	@ _28,
 1216              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1217              		.loc 1 195 26 view .LVU363
 1218 04cc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1219              	.LVL94:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1220              		.loc 1 198 21 is_stmt 1 view .LVU364
 199:armwave.c     ****                     xx = (nsub >> 8);
 1221              		.loc 1 199 21 view .LVU365
 1222              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 1223              		.loc 1 200 32 is_stmt 0 view .LVU366
 1224 04d0 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1225              	.LVL95:
 1226              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1227              		.loc 1 199 24 view .LVU367
 1228 04d4 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1229              	.LVL96:
 200:armwave.c     **** 
 1230              		.loc 1 200 21 is_stmt 1 view .LVU368
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1231              		.loc 1 202 21 view .LVU369
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1232              		.loc 1 202 21 is_stmt 0 view .LVU370
 1233 04d8 DCFFFF0A 		beq	.L58		@,
 1234              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1235              		.loc 1 202 29 view .LVU371
 1236 04dc 0030A0E3 		mov	r3, #0	@ row,
 1237              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1238              		.loc 1 202 38 view .LVU372
 1239 04e0 0320A0E1 		mov	r2, r3	@ _35, row
 1240              	.LVL97:
 1241              	.L59:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1242              		.loc 1 203 25 is_stmt 1 discriminator 3 view .LVU373
 204:armwave.c     ****                     }
 1243              		.loc 1 204 25 discriminator 3 view .LVU374
 1244              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1245              		.loc 1 203 52 is_stmt 0 discriminator 3 view .LVU375
 1246 04e4 441095E5 		ldr	r1, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1247              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1248              		.loc 1 203 45 discriminator 3 view .LVU376
 1249 04e8 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1250              	.LVL98:
 1251              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1252              		.loc 1 202 67 discriminator 3 view .LVU377
 1253 04ec 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1254              	.LVL99:
 1255              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 1256              		.loc 1 204 43 discriminator 3 view .LVU378
 1257 04f0 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1258              	.LVL100:
 1259              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1260              		.loc 1 202 67 discriminator 3 view .LVU379
 1261 04f4 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1262              	.LVL101:
 1263              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1264              		.loc 1 202 38 discriminator 3 view .LVU380
 1265 04f8 0320A0E1 		mov	r2, r3	@ _35, row
 1266              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 1267              		.loc 1 204 53 discriminator 3 view .LVU381
 1268 04fc 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1269              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1270              		.loc 1 202 21 discriminator 3 view .LVU382
 1271 0500 1C1095E5 		ldr	r1, [r5, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1272              	.LVL102:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1273              		.loc 1 202 21 discriminator 3 view .LVU383
 1274 0504 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1275 0508 F5FFFF3A 		bcc	.L59		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 202 21 discriminator 3 view .LVU384
 1277 050c CFFFFFEA 		b	.L58		@
 1278              	.LVL103:
 1279              	.L76:
 169:armwave.c     **** 
 1280              		.loc 1 169 5 is_stmt 1 discriminator 1 view .LVU385
 1281 0510 10309FE5 		ldr	r3, .L79+4	@,
 1282 0514 A920A0E3 		mov	r2, #169	@,
 1283 0518 0C109FE5 		ldr	r1, .L79+8	@,
 1284 051c 0C009FE5 		ldr	r0, .L79+12	@,
 1285              	.LVL104:
 169:armwave.c     **** 
 1286              		.loc 1 169 5 is_stmt 0 discriminator 1 view .LVU386
 1287 0520 FEFFFFEB 		bl	__assert_fail		@
 1288              	.LVL105:
 1289              	.L80:
 1290              		.align	2
 1291              	.L79:
 1292 0524 00000000 		.word	g_armwave_state
 1293 0528 18000000 		.word	.LANCHOR0+24
 1294 052c 20000000 		.word	.LC2
 1295 0530 2C000000 		.word	.LC3
 1296              		.cfi_endproc
 1297              	.LFE61:
 1299              		.align	2
 1300              		.global	armwave_setup_render
 1301              		.syntax unified
 1302              		.arm
 1303              		.fpu vfp
 1305              	armwave_setup_render:
 1306              	.LVL106:
 1307              	.LFB62:
 211:armwave.c     **** 
 212:armwave.c     **** /*
 213:armwave.c     ****  * Setup the renderer with passed parameters.
 214:armwave.c     ****  */
 215:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 216:armwave.c     **** {
 1308              		.loc 1 216 1 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 12, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 217:armwave.c     ****     uint32_t length, xx;
 1312              		.loc 1 217 5 view .LVU388
 218:armwave.c     ****     float points_per_pixel;
 1313              		.loc 1 218 5 view .LVU389
 219:armwave.c     **** 
 220:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1314              		.loc 1 220 5 view .LVU390
 1315              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1316              		.loc 1 216 1 is_stmt 0 view .LVU391
 1317 0534 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1318              		.cfi_def_cfa_offset 32
 1319              		.cfi_offset 4, -32
 1320              		.cfi_offset 5, -28
 1321              		.cfi_offset 6, -24
 1322              		.cfi_offset 7, -20
 1323              		.cfi_offset 8, -16
 1324              		.cfi_offset 9, -12
 1325              		.cfi_offset 10, -8
 1326              		.cfi_offset 14, -4
 1327 0538 028B2DED 		vpush.64	{d8}	@
 1328              		.cfi_def_cfa_offset 40
 1329              		.cfi_offset 80, -40
 1330              		.cfi_offset 81, -36
 1331 053c 0080A0E1 		mov	r8, r0	@ start_point, start_point
 1332 0540 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1333 0544 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 1334 0548 10D04DE2 		sub	sp, sp, #16	@,,
 1335              		.cfi_def_cfa_offset 56
 1336              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1337              		.loc 1 216 1 view .LVU392
 1338 054c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1339 0550 38709DE5 		ldr	r7, [sp, #56]	@ target_width, target_width
 1340 0554 3C609DE5 		ldr	r6, [sp, #60]	@ target_height, target_height
 1341 0558 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1342              	@ armwave.c:220:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1343              		.loc 1 220 5 view .LVU393
 1344 055c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1345 0560 04708DE5 		str	r7, [sp, #4]	@ target_width,
 1346 0564 0230A0E1 		mov	r3, r2	@, waves_max
 1347              	.LVL107:
 1348              		.loc 1 220 5 view .LVU394
 1349 0568 08608DE5 		str	r6, [sp, #8]	@ target_height,
 1350 056c 0120A0E1 		mov	r2, r1	@, end_point
 1351              	.LVL108:
 1352              		.loc 1 220 5 view .LVU395
 1353 0570 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1354 0574 0010A0E1 		mov	r1, r0	@, start_point
 1355              	.LVL109:
 1356              		.loc 1 220 5 view .LVU396
 1357 0578 CC019FE5 		ldr	r0, .L104+4	@,
 1358              	.LVL110:
 1359              		.loc 1 220 5 view .LVU397
 1360 057c FEFFFFEB 		bl	printf		@
 1361              	.LVL111:
 221:armwave.c     **** 
 222:armwave.c     ****     // TODO these asserts should instead raise PyExc
 223:armwave.c     ****     assert(start_point < end_point);
 1362              		.loc 1 223 5 is_stmt 1 view .LVU398
 1363 0580 050058E1 		cmp	r8, r5	@ start_point, end_point
 1364 0584 6A00002A 		bcs	.L99		@,
 224:armwave.c     **** 
 225:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 226:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1365              		.loc 1 226 5 view .LVU399
 1366 0588 013C46E2 		sub	r3, r6, #256	@ tmp155, target_height,
 1367 058c 013CD3E3 		bics	r3, r3, #256	@ tmp234, tmp155,
 1368 0590 4C00000A 		beq	.L83		@,
 1369              	@ armwave.c:226:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1370              		.loc 1 226 5 is_stmt 0 discriminator 1 view .LVU400
 1371 0594 013B46E2 		sub	r3, r6, #1024	@ tmp157, target_height,
 1372 0598 013BD3E3 		bics	r3, r3, #1024	@ tmp235, tmp157,
 1373 059c 5500001A 		bne	.L100		@,
 227:armwave.c     **** 
 228:armwave.c     ****     if(target_height == 256) {
 229:armwave.c     ****         g_armwave_state.row_shift = 8;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 231:armwave.c     ****     } else if(target_height == 512) {
 1374              		.loc 1 231 12 is_stmt 1 view .LVU401
 232:armwave.c     ****         g_armwave_state.row_shift = 9;
 233:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 234:armwave.c     ****     } else if(target_height == 1024) {
 1375              		.loc 1 234 12 view .LVU402
 1376              	@ armwave.c:234:     } else if(target_height == 1024) {
 1377              		.loc 1 234 14 is_stmt 0 view .LVU403
 1378 05a0 010B56E3 		cmp	r6, #1024	@ target_height,
 1379              	@ armwave.c:235:         g_armwave_state.row_shift = 10;
 235:armwave.c     ****         g_armwave_state.row_shift = 10;
 1380              		.loc 1 235 35 view .LVU404
 1381 05a4 A4419FE5 		ldr	r4, .L104+8	@ tmp232,
 1382              	@ armwave.c:234:     } else if(target_height == 1024) {
 234:armwave.c     ****         g_armwave_state.row_shift = 10;
 1383              		.loc 1 234 14 view .LVU405
 1384 05a8 4E00000A 		beq	.L101		@,
 236:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 237:armwave.c     ****     } else if(target_height == 2048) {
 1385              		.loc 1 237 12 is_stmt 1 view .LVU406
 1386              	@ armwave.c:237:     } else if(target_height == 2048) {
 1387              		.loc 1 237 14 is_stmt 0 view .LVU407
 1388 05ac 020B56E3 		cmp	r6, #2048	@ target_height,
 238:armwave.c     ****         g_armwave_state.row_shift = 11;
 1389              		.loc 1 238 9 is_stmt 1 view .LVU408
 1390              	@ armwave.c:238:         g_armwave_state.row_shift = 11;
 1391              		.loc 1 238 35 is_stmt 0 view .LVU409
 1392 05b0 0B20A003 		moveq	r2, #11	@ tmp176,
 1393              	@ armwave.c:239:         g_armwave_state.row_mask = 0x7ff;
 239:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1394              		.loc 1 239 34 view .LVU410
 1395 05b4 98319F05 		ldreq	r3, .L104+12	@ tmp178,
 1396 05b8 FC24C401 		strdeq	r2, [r4, #76]	@, tmp232,
 1397              	.L86:
 240:armwave.c     ****     } 
 241:armwave.c     **** 
 242:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 243:armwave.c     ****     g_armwave_state.xstride = target_height;
 1398              		.loc 1 243 5 is_stmt 1 view .LVU411
 1399              	@ armwave.c:248:     g_armwave_state.size = target_height * target_width;
 244:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 245:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 246:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 247:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 248:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1400              		.loc 1 248 42 is_stmt 0 view .LVU412
 1401 05bc 960700E0 		mul	r0, r6, r7	@ tmp186, target_height, target_width
 1402              	@ armwave.c:250:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 249:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 250:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1403              		.loc 1 250 68 view .LVU413
 1404 05c0 0734A0E1 		lsl	r3, r7, #8	@ _9, target_width,
 1405              	@ armwave.c:244:     g_armwave_state.vscale = target_height / 256;
 244:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1406              		.loc 1 244 44 view .LVU414
 1407 05c4 2624A0E1 		lsr	r2, r6, #8	@ tmp181, target_height,
 1408              	@ armwave.c:255:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 251:armwave.c     ****     g_armwave_state.target_width = target_width;
 252:armwave.c     ****     g_armwave_state.target_height = target_height;
 253:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 254:armwave.c     **** 
 255:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1409              		.loc 1 255 5 view .LVU415
 1410 05c8 0310A0E1 		mov	r1, r3	@, _9
 1411              	@ armwave.c:248:     g_armwave_state.size = target_height * target_width;
 248:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1412              		.loc 1 248 26 view .LVU416
 1413 05cc 400084E5 		str	r0, [r4, #64]	@ tmp186, g_armwave_state.size
 1414              	@ armwave.c:249:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 249:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1415              		.loc 1 249 37 view .LVU417
 1416 05d0 01CCA0E3 		mov	ip, #256	@ tmp188,
 1417              	@ armwave.c:244:     g_armwave_state.vscale = target_height / 256;
 244:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1418              		.loc 1 244 28 view .LVU418
 1419 05d4 1C2084E5 		str	r2, [r4, #28]	@ tmp181, g_armwave_state.vscale
 1420              	@ armwave.c:255:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1421              		.loc 1 255 5 view .LVU419
 1422 05d8 78019FE5 		ldr	r0, .L104+16	@,
 1423              	@ armwave.c:253:     g_armwave_state.wave_length = start_point - end_point;
 253:armwave.c     **** 
 1424              		.loc 1 253 47 view .LVU420
 1425 05dc 052048E0 		sub	r2, r8, r5	@ tmp193, start_point, end_point
 1426              	@ armwave.c:250:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 250:armwave.c     ****     g_armwave_state.target_width = target_width;
 1427              		.loc 1 250 34 view .LVU421
 1428 05e0 3C3084E5 		str	r3, [r4, #60]	@ _9, g_armwave_state.ch_buff_size
 1429              	@ armwave.c:243:     g_armwave_state.xstride = target_height;
 243:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1430              		.loc 1 243 29 view .LVU422
 1431 05e4 186084E5 		str	r6, [r4, #24]	@ target_height, g_armwave_state.xstride
 244:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1432              		.loc 1 244 5 is_stmt 1 view .LVU423
 245:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1433              		.loc 1 245 5 view .LVU424
 246:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1434              		.loc 1 246 5 view .LVU425
 247:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1435              		.loc 1 247 5 view .LVU426
 248:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1436              		.loc 1 248 5 view .LVU427
 249:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1437              		.loc 1 249 5 view .LVU428
 1438              	@ armwave.c:245:     g_armwave_state.wave_stride = wave_stride;
 245:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1439              		.loc 1 245 33 is_stmt 0 view .LVU429
 1440 05e8 20A084E5 		str	r10, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1441              	@ armwave.c:246:     g_armwave_state.waves_max = waves_max;
 246:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1442              		.loc 1 246 31 view .LVU430
 1443 05ec 289084E5 		str	r9, [r4, #40]	@ waves_max, g_armwave_state.waves_max
 1444              	@ armwave.c:247:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 247:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1445              		.loc 1 247 27 view .LVU431
 1446 05f0 249084E5 		str	r9, [r4, #36]	@ waves_max, g_armwave_state.waves
 1447              	@ armwave.c:251:     g_armwave_state.target_width = target_width;
 251:armwave.c     ****     g_armwave_state.target_height = target_height;
 1448              		.loc 1 251 34 view .LVU432
 1449 05f4 447084E5 		str	r7, [r4, #68]	@ target_width, g_armwave_state.target_width
 1450              	@ armwave.c:252:     g_armwave_state.target_height = target_height;
 252:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 1451              		.loc 1 252 35 view .LVU433
 1452 05f8 486084E5 		str	r6, [r4, #72]	@ target_height, g_armwave_state.target_height
 1453              	@ armwave.c:249:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 249:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1454              		.loc 1 249 37 view .LVU434
 1455 05fc 2CC084E5 		str	ip, [r4, #44]	@ tmp188, g_armwave_state.bitdepth_height
 250:armwave.c     ****     g_armwave_state.target_width = target_width;
 1456              		.loc 1 250 5 is_stmt 1 view .LVU435
 251:armwave.c     ****     g_armwave_state.target_height = target_height;
 1457              		.loc 1 251 5 view .LVU436
 252:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 1458              		.loc 1 252 5 view .LVU437
 253:armwave.c     **** 
 1459              		.loc 1 253 5 view .LVU438
 1460              	@ armwave.c:253:     g_armwave_state.wave_length = start_point - end_point;
 253:armwave.c     **** 
 1461              		.loc 1 253 33 is_stmt 0 view .LVU439
 1462 0600 382084E5 		str	r2, [r4, #56]	@ tmp193, g_armwave_state.wave_length
 1463              		.loc 1 255 5 is_stmt 1 view .LVU440
 1464 0604 FEFFFFEB 		bl	printf		@
 1465              	.LVL112:
 256:armwave.c     **** 
 257:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 258:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 259:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 260:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1466              		.loc 1 260 5 view .LVU441
 1467              	@ armwave.c:262:     if(g_armwave_state.ch1_buffer != NULL)
 261:armwave.c     **** 
 262:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1468              		.loc 1 262 23 is_stmt 0 view .LVU442
 1469 0608 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 1470              	@ armwave.c:260:     g_armwave_state.slice_height = 64;  
 260:armwave.c     **** 
 1471              		.loc 1 260 34 view .LVU443
 1472 060c 4030A0E3 		mov	r3, #64	@ tmp196,
 1473              	@ armwave.c:262:     if(g_armwave_state.ch1_buffer != NULL)
 1474              		.loc 1 262 7 view .LVU444
 1475 0610 000050E3 		cmp	r0, #0	@ _11,
 1476              	@ armwave.c:260:     g_armwave_state.slice_height = 64;  
 260:armwave.c     **** 
 1477              		.loc 1 260 34 view .LVU445
 1478 0614 303084E5 		str	r3, [r4, #48]	@ tmp196, g_armwave_state.slice_height
 1479              		.loc 1 262 5 is_stmt 1 view .LVU446
 1480              	@ armwave.c:262:     if(g_armwave_state.ch1_buffer != NULL)
 1481              		.loc 1 262 7 is_stmt 0 view .LVU447
 1482 0618 0000000A 		beq	.L88		@,
 263:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1483              		.loc 1 263 9 is_stmt 1 view .LVU448
 1484 061c FEFFFFEB 		bl	free		@
 1485              	.LVL113:
 1486              	.L88:
 264:armwave.c     **** 
 265:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1487              		.loc 1 265 5 view .LVU449
 1488              	@ armwave.c:265:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1489              		.loc 1 265 34 is_stmt 0 view .LVU450
 1490 0620 0110A0E3 		mov	r1, #1	@,
 1491 0624 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.ch_buff_size
 1492 0628 FEFFFFEB 		bl	calloc		@
 1493              	.LVL114:
 1494              	@ armwave.c:267:     assert(g_armwave_state.ch1_buffer != NULL);
 266:armwave.c     **** 
 267:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1495              		.loc 1 267 5 view .LVU451
 1496 062c 000050E3 		cmp	r0, #0	@ tmp200,
 1497              	@ armwave.c:265:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 265:armwave.c     **** 
 1498              		.loc 1 265 32 view .LVU452
 1499 0630 040084E5 		str	r0, [r4, #4]	@ tmp200, g_armwave_state.ch1_buffer
 1500              		.loc 1 267 5 is_stmt 1 view .LVU453
 1501 0634 3400000A 		beq	.L102		@,
 268:armwave.c     **** 
 269:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 270:armwave.c     ****     length = end_point - start_point;
 1502              		.loc 1 270 5 view .LVU454
 1503              	@ armwave.c:271:     points_per_pixel = length / ((float)(target_width));
 271:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1504              		.loc 1 271 34 is_stmt 0 view .LVU455
 1505 0638 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1506              	@ armwave.c:270:     length = end_point - start_point;
 270:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1507              		.loc 1 270 12 view .LVU456
 1508 063c 085045E0 		sub	r5, r5, r8	@ length, end_point, start_point
 1509              	.LVL115:
 1510              		.loc 1 271 5 is_stmt 1 view .LVU457
 1511              	@ armwave.c:273:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 272:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 273:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1512              		.loc 1 273 40 is_stmt 0 view .LVU458
 1513 0640 8500A0E1 		lsl	r0, r5, #1	@, length,
 1514              	@ armwave.c:271:     points_per_pixel = length / ((float)(target_width));
 271:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1515              		.loc 1 271 34 view .LVU459
 1516 0644 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp208, target_width
 1517              	@ armwave.c:271:     points_per_pixel = length / ((float)(target_width));
 271:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1518              		.loc 1 271 31 view .LVU460
 1519 0648 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1520 064c 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp207, length
 1521              	@ armwave.c:272:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 272:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1522              		.loc 1 272 60 view .LVU461
 1523 0650 0C7AD4ED 		vldr.32	s15, [r4, #48]	@ int	@ tmp238, g_armwave_state.slice_height
 1524 0654 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp211, tmp238
 1525              	@ armwave.c:271:     points_per_pixel = length / ((float)(target_width));
 271:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1526              		.loc 1 271 22 view .LVU462
 1527 0658 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp207, tmp208
 1528              	.LVL116:
 272:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1529              		.loc 1 272 5 is_stmt 1 view .LVU463
 1530              	@ armwave.c:272:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 272:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1531              		.loc 1 272 60 is_stmt 0 view .LVU464
 1532 065c 887A67EE 		vmul.f32	s15, s15, s16	@ tmp213, tmp211, points_per_pixel
 1533              	@ armwave.c:272:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 272:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1534              		.loc 1 272 41 view .LVU465
 1535 0660 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp214, tmp213
 1536 0664 0D7AC4ED 		vstr.32	s15, [r4, #52]	@ int	@ tmp214, g_armwave_state.slice_record_height
 1537              		.loc 1 273 5 is_stmt 1 view .LVU466
 1538              	@ armwave.c:273:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1539              		.loc 1 273 40 is_stmt 0 view .LVU467
 1540 0668 FEFFFFEB 		bl	malloc		@
 1541              	.LVL117:
 1542              	@ armwave.c:275:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 274:armwave.c     **** 
 275:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1543              		.loc 1 275 5 view .LVU468
 1544 066c 000050E3 		cmp	r0, #0	@ tmp216,
 1545              	@ armwave.c:273:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 273:armwave.c     **** 
 1546              		.loc 1 273 38 view .LVU469
 1547 0670 700084E5 		str	r0, [r4, #112]	@ tmp216, g_armwave_state.xcoord_to_xpixel
 1548              		.loc 1 275 5 is_stmt 1 view .LVU470
 1549 0674 2900000A 		beq	.L103		@,
 1550              	@ armwave.c:278:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 276:armwave.c     **** 
 277:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1551              		.loc 1 278 54 is_stmt 0 view .LVU471
 1552 0678 327ADFED 		vldr.32	s15, .L104	@ tmp223,
 1553 067c 020040E2 		sub	r0, r0, #2	@ ivtmp.89, tmp216,
 1554              	@ armwave.c:277:     for(xx = 0; xx < length; xx++) {
 277:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1555              		.loc 1 277 12 view .LVU472
 1556 0680 0030A0E3 		mov	r3, #0	@ xx,
 1557              	@ armwave.c:278:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1558              		.loc 1 278 54 view .LVU473
 1559 0684 887A87EE 		vdiv.f32	s14, s15, s16	@ _22, tmp223, points_per_pixel
 1560              	.L91:
 1561              	.LVL118:
 1562              		.loc 1 278 9 is_stmt 1 discriminator 3 view .LVU474
 1563              	@ armwave.c:278:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1564              		.loc 1 278 74 is_stmt 0 discriminator 3 view .LVU475
 1565 0688 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1566              	@ armwave.c:277:     for(xx = 0; xx < length; xx++) {
 277:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1567              		.loc 1 277 32 discriminator 3 view .LVU476
 1568 068c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1569              	.LVL119:
 1570              	@ armwave.c:277:     for(xx = 0; xx < length; xx++) {
 277:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1571              		.loc 1 277 5 discriminator 3 view .LVU477
 1572 0690 030055E1 		cmp	r5, r3	@ length, xx
 1573              	@ armwave.c:278:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1574              		.loc 1 278 74 discriminator 3 view .LVU478
 1575 0694 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp224, xx
 1576 0698 877A67EE 		vmul.f32	s15, s15, s14	@ tmp225, tmp224, _22
 1577              	@ armwave.c:278:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1578              		.loc 1 278 46 discriminator 3 view .LVU479
 1579 069c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp226, tmp225
 1580 06a0 902A17EE 		vmov	r2, s15	@ int	@ tmp226, tmp226
 1581 06a4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp226, MEM[base: _81, offset: 0B]
 1582              	@ armwave.c:277:     for(xx = 0; xx < length; xx++) {
 277:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1583              		.loc 1 277 5 discriminator 3 view .LVU480
 1584 06a8 F6FFFF1A 		bne	.L91		@,
 279:armwave.c     **** 
 280:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 281:armwave.c     ****     }
 282:armwave.c     **** 
 283:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1585              		.loc 1 283 5 is_stmt 1 view .LVU481
 1586              	@ armwave.c:283:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1587              		.loc 1 283 34 is_stmt 0 view .LVU482
 1588 06ac 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.size, g_armwave_state.size
 1589 06b0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1590 06b4 FEFFFFEB 		bl	malloc		@
 1591              	.LVL120:
 1592              	@ armwave.c:283:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1593              		.loc 1 283 32 view .LVU483
 1594 06b8 540084E5 		str	r0, [r4, #84]	@, g_armwave_state.out_pixbuf
 1595              	@ armwave.c:284: }
 284:armwave.c     **** }
 1596              		.loc 1 284 1 view .LVU484
 1597 06bc 10D08DE2 		add	sp, sp, #16	@,,
 1598              		.cfi_remember_state
 1599              		.cfi_def_cfa_offset 40
 1600              		@ sp needed	@
 1601 06c0 028BBDEC 		vldm	sp!, {d8}	@
 1602              		.cfi_restore 80
 1603              		.cfi_restore 81
 1604              		.cfi_def_cfa_offset 32
 1605              	.LVL121:
 1606              		.loc 1 284 1 view .LVU485
 1607 06c4 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1608              	.LVL122:
 1609              	.L83:
 1610              		.cfi_restore_state
 228:armwave.c     ****         g_armwave_state.row_shift = 8;
 1611              		.loc 1 228 5 is_stmt 1 view .LVU486
 1612              	@ armwave.c:228:     if(target_height == 256) {
 228:armwave.c     ****         g_armwave_state.row_shift = 8;
 1613              		.loc 1 228 7 is_stmt 0 view .LVU487
 1614 06c8 010C56E3 		cmp	r6, #256	@ target_height,
 229:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1615              		.loc 1 229 9 is_stmt 1 view .LVU488
 1616              	@ armwave.c:229:         g_armwave_state.row_shift = 8;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1617              		.loc 1 229 35 is_stmt 0 view .LVU489
 1618 06cc 7C409FE5 		ldr	r4, .L104+8	@ tmp232,
 1619              	@ armwave.c:233:         g_armwave_state.row_mask = 0x1ff;
 233:armwave.c     ****     } else if(target_height == 1024) {
 1620              		.loc 1 233 34 view .LVU490
 1621 06d0 84309F15 		ldrne	r3, .L104+20	@ tmp170,
 1622              	@ armwave.c:230:         g_armwave_state.row_mask = 0x0ff;
 230:armwave.c     ****     } else if(target_height == 512) {
 1623              		.loc 1 230 34 view .LVU491
 1624 06d4 0820A003 		moveq	r2, #8	@ tmp164,
 1625 06d8 FF30A003 		moveq	r3, #255	@ tmp166,
 231:armwave.c     ****         g_armwave_state.row_shift = 9;
 1626              		.loc 1 231 12 is_stmt 1 view .LVU492
 232:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1627              		.loc 1 232 9 view .LVU493
 1628              	@ armwave.c:232:         g_armwave_state.row_shift = 9;
 232:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1629              		.loc 1 232 35 is_stmt 0 view .LVU494
 1630 06dc 0920A013 		movne	r2, #9	@ tmp168,
 1631              	@ armwave.c:233:         g_armwave_state.row_mask = 0x1ff;
 233:armwave.c     ****     } else if(target_height == 1024) {
 1632              		.loc 1 233 34 view .LVU495
 1633 06e0 FC24C4E1 		strd	r2, [r4, #76]	@, tmp232,
 1634 06e4 B4FFFFEA 		b	.L86		@
 1635              	.L101:
 235:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1636              		.loc 1 235 9 is_stmt 1 view .LVU496
 1637              	@ armwave.c:236:         g_armwave_state.row_mask = 0x3ff;
 236:armwave.c     ****     } else if(target_height == 2048) {
 1638              		.loc 1 236 34 is_stmt 0 view .LVU497
 1639 06e8 70309FE5 		ldr	r3, .L104+24	@ tmp174,
 1640              	@ armwave.c:235:         g_armwave_state.row_shift = 10;
 235:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1641              		.loc 1 235 35 view .LVU498
 1642 06ec 0A20A0E3 		mov	r2, #10	@ tmp172,
 1643              	@ armwave.c:236:         g_armwave_state.row_mask = 0x3ff;
 236:armwave.c     ****     } else if(target_height == 2048) {
 1644              		.loc 1 236 34 view .LVU499
 1645 06f0 FC24C4E1 		strd	r2, [r4, #76]	@, tmp232,
 1646 06f4 B0FFFFEA 		b	.L86		@
 1647              	.L100:
 226:armwave.c     **** 
 1648              		.loc 1 226 5 is_stmt 1 discriminator 2 view .LVU500
 1649 06f8 64309FE5 		ldr	r3, .L104+28	@,
 1650 06fc E220A0E3 		mov	r2, #226	@,
 1651 0700 60109FE5 		ldr	r1, .L104+32	@,
 1652 0704 60009FE5 		ldr	r0, .L104+36	@,
 1653 0708 FEFFFFEB 		bl	__assert_fail		@
 1654              	.LVL123:
 1655              	.L102:
 267:armwave.c     **** 
 1656              		.loc 1 267 5 discriminator 1 view .LVU501
 1657 070c 50309FE5 		ldr	r3, .L104+28	@,
 1658 0710 58209FE5 		ldr	r2, .L104+40	@,
 1659 0714 4C109FE5 		ldr	r1, .L104+32	@,
 1660 0718 54009FE5 		ldr	r0, .L104+44	@,
 1661 071c FEFFFFEB 		bl	__assert_fail		@
 1662              	.LVL124:
 1663              	.L103:
 275:armwave.c     **** 
 1664              		.loc 1 275 5 discriminator 1 view .LVU502
 1665 0720 3C309FE5 		ldr	r3, .L104+28	@,
 1666 0724 4C209FE5 		ldr	r2, .L104+48	@,
 1667 0728 38109FE5 		ldr	r1, .L104+32	@,
 1668 072c 48009FE5 		ldr	r0, .L104+52	@,
 1669 0730 FEFFFFEB 		bl	__assert_fail		@
 1670              	.LVL125:
 1671              	.L99:
 223:armwave.c     **** 
 1672              		.loc 1 223 5 discriminator 1 view .LVU503
 1673 0734 28309FE5 		ldr	r3, .L104+28	@,
 1674 0738 DF20A0E3 		mov	r2, #223	@,
 1675 073c 24109FE5 		ldr	r1, .L104+32	@,
 1676 0740 38009FE5 		ldr	r0, .L104+56	@,
 1677 0744 FEFFFFEB 		bl	__assert_fail		@
 1678              	.LVL126:
 1679              	.L105:
 1680              		.align	2
 1681              	.L104:
 1682 0748 0000803F 		.word	1065353216
 1683 074c 40000000 		.word	.LC4
 1684 0750 00000000 		.word	g_armwave_state
 1685 0754 FF070000 		.word	2047
 1686 0758 E4000000 		.word	.LC7
 1687 075c FF010000 		.word	511
 1688 0760 FF030000 		.word	1023
 1689 0764 34000000 		.word	.LANCHOR0+52
 1690 0768 20000000 		.word	.LC2
 1691 076c 84000000 		.word	.LC6
 1692 0770 0B010000 		.word	267
 1693 0774 F8000000 		.word	.LC8
 1694 0778 13010000 		.word	275
 1695 077c 1C010000 		.word	.LC9
 1696 0780 6C000000 		.word	.LC5
 1697              		.cfi_endproc
 1698              	.LFE62:
 1700              		.align	2
 1701              		.global	armwave_set_wave_pointer
 1702              		.syntax unified
 1703              		.arm
 1704              		.fpu vfp
 1706              	armwave_set_wave_pointer:
 1707              	.LVL127:
 1708              	.LFB63:
 285:armwave.c     **** 
 286:armwave.c     **** /*
 287:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 288:armwave.c     ****  * in the future.
 289:armwave.c     ****  */
 290:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 291:armwave.c     **** {
 1709              		.loc 1 291 1 view -0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 0
 1712              		@ frame_needed = 0, uses_anonymous_args = 0
 292:armwave.c     ****     assert(wave_buffer != NULL);
 1713              		.loc 1 292 5 view .LVU505
 1714 0784 000050E3 		cmp	r0, #0	@ wave_buffer
 1715              		.loc 1 292 5 is_stmt 0 view .LVU506
 1716 0788 0200000A 		beq	.L111		@,
 293:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1717              		.loc 1 293 5 is_stmt 1 view .LVU507
 1718              	@ armwave.c:293:     g_armwave_state.wave_buffer = wave_buffer;
 1719              		.loc 1 293 33 is_stmt 0 view .LVU508
 1720 078c 1C309FE5 		ldr	r3, .L112	@ tmp115,
 1721 0790 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1722 0794 1EFF2FE1 		bx	lr	@
 1723              	.L111:
 292:armwave.c     ****     assert(wave_buffer != NULL);
 1724              		.loc 1 292 5 is_stmt 1 discriminator 1 view .LVU509
 1725              	@ armwave.c:291: {
 291:armwave.c     ****     assert(wave_buffer != NULL);
 1726              		.loc 1 291 1 is_stmt 0 discriminator 1 view .LVU510
 1727 0798 10402DE9 		push	{r4, lr}	@
 1728              		.cfi_def_cfa_offset 8
 1729              		.cfi_offset 4, -8
 1730              		.cfi_offset 14, -4
 1731              	@ armwave.c:292:     assert(wave_buffer != NULL);
 292:armwave.c     ****     assert(wave_buffer != NULL);
 1732              		.loc 1 292 5 discriminator 1 view .LVU511
 1733 079c 492FA0E3 		mov	r2, #292	@,
 1734 07a0 0C309FE5 		ldr	r3, .L112+4	@,
 1735 07a4 0C109FE5 		ldr	r1, .L112+8	@,
 1736 07a8 0C009FE5 		ldr	r0, .L112+12	@,
 1737              	.LVL128:
 292:armwave.c     ****     assert(wave_buffer != NULL);
 1738              		.loc 1 292 5 discriminator 1 view .LVU512
 1739 07ac FEFFFFEB 		bl	__assert_fail		@
 1740              	.LVL129:
 1741              	.L113:
 1742              		.align	2
 1743              	.L112:
 1744 07b0 00000000 		.word	g_armwave_state
 1745 07b4 4C000000 		.word	.LANCHOR0+76
 1746 07b8 20000000 		.word	.LC2
 1747 07bc 48010000 		.word	.LC10
 1748              		.cfi_endproc
 1749              	.LFE63:
 1751              		.align	2
 1752              		.global	armwave_set_wave_pointer_as_testbuf
 1753              		.syntax unified
 1754              		.arm
 1755              		.fpu vfp
 1757              	armwave_set_wave_pointer_as_testbuf:
 1758              	.LFB64:
 294:armwave.c     **** }
 295:armwave.c     **** 
 296:armwave.c     **** /*
 297:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 298:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 299:armwave.c     ****  */
 300:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 301:armwave.c     **** {
 1759              		.loc 1 301 1 is_stmt 1 view -0
 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 0
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 1763              		@ link register save eliminated.
 302:armwave.c     ****     g_armwave_state.wave_buffer = &test_wave_buffer;
 1764              		.loc 1 302 5 view .LVU514
 1765              	@ armwave.c:302:     g_armwave_state.wave_buffer = &test_wave_buffer;
 1766              		.loc 1 302 33 is_stmt 0 view .LVU515
 1767 07c0 08309FE5 		ldr	r3, .L115	@ tmp110,
 1768 07c4 08209FE5 		ldr	r2, .L115+4	@ tmp111,
 1769 07c8 142083E5 		str	r2, [r3, #20]	@ tmp111, g_armwave_state.wave_buffer
 1770              	@ armwave.c:303: }
 303:armwave.c     **** }
 1771              		.loc 1 303 1 view .LVU516
 1772 07cc 1EFF2FE1 		bx	lr	@
 1773              	.L116:
 1774              		.align	2
 1775              	.L115:
 1776 07d0 00000000 		.word	g_armwave_state
 1777 07d4 00000000 		.word	test_wave_buffer
 1778              		.cfi_endproc
 1779              	.LFE64:
 1781              		.align	2
 1782              		.global	armwave_set_wave_pointer_u32
 1783              		.syntax unified
 1784              		.arm
 1785              		.fpu vfp
 1787              	armwave_set_wave_pointer_u32:
 1788              	.LVL130:
 1789              	.LFB65:
 304:armwave.c     **** 
 305:armwave.c     **** /*
 306:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 307:armwave.c     ****  * disjointed buffers in the future.
 308:armwave.c     ****  */
 309:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 310:armwave.c     **** {
 1790              		.loc 1 310 1 is_stmt 1 view -0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 311:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1794              		.loc 1 311 5 view .LVU518
 1795 07d8 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1796              		.loc 1 311 5 is_stmt 0 view .LVU519
 1797 07dc 0200000A 		beq	.L122		@,
 312:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1798              		.loc 1 312 5 is_stmt 1 view .LVU520
 1799              	@ armwave.c:312:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1800              		.loc 1 312 33 is_stmt 0 view .LVU521
 1801 07e0 1C309FE5 		ldr	r3, .L123	@ tmp117,
 1802 07e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1803 07e8 1EFF2FE1 		bx	lr	@
 1804              	.L122:
 311:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1805              		.loc 1 311 5 is_stmt 1 discriminator 1 view .LVU522
 1806              	@ armwave.c:310: {
 310:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1807              		.loc 1 310 1 is_stmt 0 discriminator 1 view .LVU523
 1808 07ec 10402DE9 		push	{r4, lr}	@
 1809              		.cfi_def_cfa_offset 8
 1810              		.cfi_offset 4, -8
 1811              		.cfi_offset 14, -4
 1812              	@ armwave.c:311:     assert(wave_buffer_ptr != 0);
 311:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1813              		.loc 1 311 5 discriminator 1 view .LVU524
 1814 07f0 10309FE5 		ldr	r3, .L123+4	@,
 1815 07f4 10209FE5 		ldr	r2, .L123+8	@,
 1816 07f8 10109FE5 		ldr	r1, .L123+12	@,
 1817 07fc 10009FE5 		ldr	r0, .L123+16	@,
 1818              	.LVL131:
 311:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1819              		.loc 1 311 5 discriminator 1 view .LVU525
 1820 0800 FEFFFFEB 		bl	__assert_fail		@
 1821              	.LVL132:
 1822              	.L124:
 1823              		.align	2
 1824              	.L123:
 1825 0804 00000000 		.word	g_armwave_state
 1826 0808 68000000 		.word	.LANCHOR0+104
 1827 080c 37010000 		.word	311
 1828 0810 20000000 		.word	.LC2
 1829 0814 5C010000 		.word	.LC11
 1830              		.cfi_endproc
 1831              	.LFE65:
 1833              		.align	2
 1834              		.global	armwave_clear_buffer
 1835              		.syntax unified
 1836              		.arm
 1837              		.fpu vfp
 1839              	armwave_clear_buffer:
 1840              	.LVL133:
 1841              	.LFB66:
 313:armwave.c     **** }
 314:armwave.c     **** 
 315:armwave.c     **** /*
 316:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 317:armwave.c     ****  */
 318:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 319:armwave.c     **** {
 1842              		.loc 1 319 1 is_stmt 1 view -0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 0
 1845              		@ frame_needed = 0, uses_anonymous_args = 0
 1846              		@ link register save eliminated.
 320:armwave.c     ****     // Flags ignored, only one buffer cleared
 321:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1847              		.loc 1 321 5 view .LVU527
 1848 0818 0C309FE5 		ldr	r3, .L126	@ tmp113,
 1849 081c 0010A0E3 		mov	r1, #0	@,
 1850 0820 3C2093E5 		ldr	r2, [r3, #60]	@, g_armwave_state.ch_buff_size
 1851 0824 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1852              	.LVL134:
 1853              		.loc 1 321 5 is_stmt 0 view .LVU528
 1854 0828 FEFFFFEA 		b	memset		@
 1855              	.LVL135:
 1856              	.L127:
 1857              		.align	2
 1858              	.L126:
 1859 082c 00000000 		.word	g_armwave_state
 1860              		.cfi_endproc
 1861              	.LFE66:
 1863              		.align	2
 1864              		.global	armwave_set_channel_colour
 1865              		.syntax unified
 1866              		.arm
 1867              		.fpu vfp
 1869              	armwave_set_channel_colour:
 1870              	.LVL136:
 1871              	.LFB67:
 322:armwave.c     **** }
 323:armwave.c     **** 
 324:armwave.c     **** /*
 325:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 326:armwave.c     ****  */
 327:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 328:armwave.c     **** {
 1872              		.loc 1 328 1 is_stmt 1 view -0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              		@ link register save eliminated.
 329:armwave.c     ****     // Only 1ch supported for now
 330:armwave.c     ****     switch(ch) {
 1877              		.loc 1 330 5 view .LVU530
 1878 0830 010050E3 		cmp	r0, #1	@ ch,
 331:armwave.c     ****         case 1:
 332:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1879              		.loc 1 332 13 view .LVU531
 1880              	@ armwave.c:332:             g_armwave_state.ch1_color.r = r;
 1881              		.loc 1 332 41 is_stmt 0 view .LVU532
 1882 0834 0C009F05 		ldreq	r0, .L130	@ tmp117,
 1883              	.LVL137:
 1884              		.loc 1 332 41 view .LVU533
 1885 0838 B815C001 		strheq	r1, [r0, #88]	@ movhi	@ r, g_armwave_state.ch1_color.r
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1886              		.loc 1 333 13 is_stmt 1 view .LVU534
 1887              	@ armwave.c:333:             g_armwave_state.ch1_color.g = g;
 1888              		.loc 1 333 41 is_stmt 0 view .LVU535
 1889 083c BA25C001 		strheq	r2, [r0, #90]	@ movhi	@ g, g_armwave_state.ch1_color.g
 334:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1890              		.loc 1 334 13 is_stmt 1 view .LVU536
 1891              	@ armwave.c:334:             g_armwave_state.ch1_color.b = b;
 1892              		.loc 1 334 41 is_stmt 0 view .LVU537
 1893 0840 BC35C001 		strheq	r3, [r0, #92]	@ movhi	@ b, g_armwave_state.ch1_color.b
 335:armwave.c     ****             break;
 1894              		.loc 1 335 13 is_stmt 1 view .LVU538
 1895              	@ armwave.c:337: }
 336:armwave.c     ****     }
 337:armwave.c     **** }
 1896              		.loc 1 337 1 is_stmt 0 view .LVU539
 1897 0844 1EFF2FE1 		bx	lr	@
 1898              	.L131:
 1899              		.align	2
 1900              	.L130:
 1901 0848 00000000 		.word	g_armwave_state
 1902              		.cfi_endproc
 1903              	.LFE67:
 1905              		.align	2
 1906              		.global	armwave_dump_ppm_debug
 1907              		.syntax unified
 1908              		.arm
 1909              		.fpu vfp
 1911              	armwave_dump_ppm_debug:
 1912              	.LVL138:
 1913              	.LFB68:
 338:armwave.c     **** 
 339:armwave.c     **** /*
 340:armwave.c     ****  * Dump a ppm of a buffer to a file.
 341:armwave.c     ****  */
 342:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 343:armwave.c     **** {
 1914              		.loc 1 343 1 is_stmt 1 view -0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 0
 1917              		@ frame_needed = 0, uses_anonymous_args = 0
 344:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1918              		.loc 1 344 5 view .LVU541
 1919              	@ armwave.c:343: {
 343:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1920              		.loc 1 343 1 is_stmt 0 view .LVU542
 1921 084c 0130A0E1 		mov	r3, r1	@ fn, fn
 1922 0850 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1923              		.cfi_def_cfa_offset 28
 1924              		.cfi_offset 4, -28
 1925              		.cfi_offset 5, -24
 1926              		.cfi_offset 6, -20
 1927              		.cfi_offset 7, -16
 1928              		.cfi_offset 8, -12
 1929              		.cfi_offset 9, -8
 1930              		.cfi_offset 14, -4
 1931 0854 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1932 0858 0CD04DE2 		sub	sp, sp, #12	@,,
 1933              		.cfi_def_cfa_offset 40
 1934              	@ armwave.c:344:     FILE *fp = fopen(fn, "wb");
 1935              		.loc 1 344 16 view .LVU543
 1936 085c D4109FE5 		ldr	r1, .L144	@,
 1937              	.LVL139:
 1938              		.loc 1 344 16 view .LVU544
 1939 0860 0300A0E1 		mov	r0, r3	@, fn
 1940              	.LVL140:
 1941              		.loc 1 344 16 view .LVU545
 1942 0864 FEFFFFEB 		bl	fopen64		@
 1943              	.LVL141:
 1944              	@ armwave.c:351:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 345:armwave.c     ****     uint32_t data;
 346:armwave.c     ****     int xx, yy;
 347:armwave.c     **** 
 348:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 349:armwave.c     **** 
 350:armwave.c     ****     fputs("P3\n", fp);
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1945              		.loc 1 351 5 view .LVU546
 1946 0868 CC609FE5 		ldr	r6, .L144+4	@ tmp154,
 1947              	@ armwave.c:350:     fputs("P3\n", fp);
 350:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1948              		.loc 1 350 5 view .LVU547
 1949 086c 0320A0E3 		mov	r2, #3	@,
 1950 0870 0110A0E3 		mov	r1, #1	@,
 1951              	@ armwave.c:344:     FILE *fp = fopen(fn, "wb");
 344:armwave.c     ****     uint32_t data;
 1952              		.loc 1 344 16 view .LVU548
 1953 0874 0070A0E1 		mov	r7, r0	@ fp,
 1954              	.LVL142:
 345:armwave.c     ****     uint32_t data;
 1955              		.loc 1 345 5 is_stmt 1 view .LVU549
 346:armwave.c     **** 
 1956              		.loc 1 346 5 view .LVU550
 350:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1957              		.loc 1 350 5 view .LVU551
 1958 0878 0030A0E1 		mov	r3, r0	@, fp
 1959 087c BC009FE5 		ldr	r0, .L144+8	@,
 1960              	.LVL143:
 350:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1961              		.loc 1 350 5 is_stmt 0 view .LVU552
 1962 0880 FEFFFFEB 		bl	fwrite		@
 1963              	.LVL144:
 1964              		.loc 1 351 5 is_stmt 1 view .LVU553
 1965 0884 D424C6E1 		ldrd	r2, [r6, #68]	@, tmp154,
 1966 0888 B4109FE5 		ldr	r1, .L144+12	@,
 1967 088c 0700A0E1 		mov	r0, r7	@, fp
 1968 0890 FEFFFFEB 		bl	fprintf		@
 1969              	.LVL145:
 352:armwave.c     ****     fputs("255\n", fp);
 1970              		.loc 1 352 5 view .LVU554
 1971 0894 0420A0E3 		mov	r2, #4	@,
 1972 0898 0730A0E1 		mov	r3, r7	@, fp
 1973 089c 0110A0E3 		mov	r1, #1	@,
 1974 08a0 A0009FE5 		ldr	r0, .L144+16	@,
 1975 08a4 FEFFFFEB 		bl	fwrite		@
 1976              	.LVL146:
 353:armwave.c     **** 
 354:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1977              		.loc 1 354 5 view .LVU555
 1978              	@ armwave.c:354:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1979              		.loc 1 354 37 is_stmt 0 view .LVU556
 1980 08a8 482096E5 		ldr	r2, [r6, #72]	@ prephitmp_57, g_armwave_state.target_height
 1981              	@ armwave.c:354:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1982              		.loc 1 354 5 view .LVU557
 1983 08ac 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1984 08b0 1800000A 		beq	.L133		@,
 1985 08b4 443096E5 		ldr	r3, [r6, #68]	@ _12, g_armwave_state.target_width
 1986              	@ armwave.c:359:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 358:armwave.c     **** 
 359:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1987              		.loc 1 359 13 view .LVU558
 1988 08b8 8C909FE5 		ldr	r9, .L144+20	@ tmp156,
 1989              	@ armwave.c:354:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1990              		.loc 1 354 12 view .LVU559
 1991 08bc 0050A0E3 		mov	r5, #0	@ yy,
 1992              	.LVL147:
 1993              	.L134:
 1994              	@ armwave.c:355:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1995              		.loc 1 355 9 view .LVU560
 1996 08c0 000053E3 		cmp	r3, #0	@ _12,
 1997              	@ armwave.c:355:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1998              		.loc 1 355 16 view .LVU561
 1999 08c4 0040A013 		movne	r4, #0	@ xx,
 2000              	@ armwave.c:355:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2001              		.loc 1 355 9 view .LVU562
 2002 08c8 1600000A 		beq	.L143		@,
 2003              	.LVL148:
 2004              	.L135:
 356:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2005              		.loc 1 356 13 is_stmt 1 discriminator 3 view .LVU563
 2006              	@ armwave.c:356:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 356:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2007              		.loc 1 356 29 is_stmt 0 discriminator 3 view .LVU564
 2008 08cc 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2009              	@ armwave.c:359:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2010              		.loc 1 359 13 discriminator 3 view .LVU565
 2011 08d0 0910A0E1 		mov	r1, r9	@, tmp156
 2012 08d4 0700A0E1 		mov	r0, r7	@, fp
 2013              	@ armwave.c:356:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 356:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2014              		.loc 1 356 18 discriminator 3 view .LVU566
 2015 08d8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2016              	.LVL149:
 2017              		.loc 1 359 13 is_stmt 1 discriminator 3 view .LVU567
 2018              	@ armwave.c:355:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2019              		.loc 1 355 58 is_stmt 0 discriminator 3 view .LVU568
 2020 08dc 014084E2 		add	r4, r4, #1	@ xx, xx,
 2021              	.LVL150:
 2022              	@ armwave.c:359:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2023              		.loc 1 359 81 discriminator 3 view .LVU569
 2024 08e0 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2025              	@ armwave.c:359:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2026              		.loc 1 359 61 discriminator 3 view .LVU570
 2027 08e4 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2028              	@ armwave.c:359:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2029              		.loc 1 359 13 discriminator 3 view .LVU571
 2030 08e8 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2031 08ec 7330EFE6 		uxtb	r3, r3	@, tmp146
 2032 08f0 00C08DE5 		str	ip, [sp]	@ tmp151,
 2033 08f4 7220EFE6 		uxtb	r2, r2	@, data
 2034              	.LVL151:
 2035              		.loc 1 359 13 discriminator 3 view .LVU572
 2036 08f8 FEFFFFEB 		bl	fprintf		@
 2037              	.LVL152:
 2038              	@ armwave.c:355:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2039              		.loc 1 355 41 discriminator 3 view .LVU573
 2040 08fc 443096E5 		ldr	r3, [r6, #68]	@ _12, g_armwave_state.target_width
 2041              	@ armwave.c:355:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2042              		.loc 1 355 9 discriminator 3 view .LVU574
 2043 0900 040053E1 		cmp	r3, r4	@ _12, xx
 2044 0904 F0FFFF8A 		bhi	.L135		@,
 2045 0908 482096E5 		ldr	r2, [r6, #72]	@ prephitmp_57, g_armwave_state.target_height
 2046              	.LVL153:
 2047              	.L136:
 2048              	@ armwave.c:354:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2049              		.loc 1 354 55 discriminator 2 view .LVU575
 2050 090c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2051              	.LVL154:
 2052              	@ armwave.c:354:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2053              		.loc 1 354 5 discriminator 2 view .LVU576
 2054 0910 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2055 0914 E9FFFF3A 		bcc	.L134		@,
 2056              	.LVL155:
 2057              	.L133:
 360:armwave.c     ****         }
 361:armwave.c     ****     }
 362:armwave.c     **** 
 363:armwave.c     ****     fclose(fp);
 2058              		.loc 1 363 5 is_stmt 1 view .LVU577
 2059 0918 0700A0E1 		mov	r0, r7	@, fp
 2060              	@ armwave.c:364: }
 364:armwave.c     **** }
 2061              		.loc 1 364 1 is_stmt 0 view .LVU578
 2062 091c 0CD08DE2 		add	sp, sp, #12	@,,
 2063              		.cfi_remember_state
 2064              		.cfi_def_cfa_offset 28
 2065              		@ sp needed	@
 2066 0920 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2067              		.cfi_restore 14
 2068              		.cfi_restore 9
 2069              		.cfi_restore 8
 2070              		.cfi_restore 7
 2071              		.cfi_restore 6
 2072              		.cfi_restore 5
 2073              		.cfi_restore 4
 2074              		.cfi_def_cfa_offset 0
 2075              	.LVL156:
 2076              	@ armwave.c:363:     fclose(fp);
 363:armwave.c     **** }
 2077              		.loc 1 363 5 view .LVU579
 2078 0924 FEFFFFEA 		b	fclose		@
 2079              	.LVL157:
 2080              	.L143:
 2081              		.cfi_restore_state
 2082              	@ armwave.c:354:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2083              		.loc 1 354 55 view .LVU580
 2084 0928 015085E2 		add	r5, r5, #1	@ yy, yy,
 2085              	.LVL158:
 2086              	@ armwave.c:354:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2087              		.loc 1 354 5 view .LVU581
 2088 092c 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2089 0930 F5FFFF8A 		bhi	.L136		@,
 2090 0934 F7FFFFEA 		b	.L133		@
 2091              	.L145:
 2092              		.align	2
 2093              	.L144:
 2094 0938 74010000 		.word	.LC12
 2095 093c 00000000 		.word	g_armwave_state
 2096 0940 78010000 		.word	.LC13
 2097 0944 7C010000 		.word	.LC14
 2098 0948 84010000 		.word	.LC15
 2099 094c 8C010000 		.word	.LC16
 2100              		.cfi_endproc
 2101              	.LFE68:
 2103              		.align	2
 2104              		.global	armwave_test_init
 2105              		.syntax unified
 2106              		.arm
 2107              		.fpu vfp
 2109              	armwave_test_init:
 2110              	.LVL159:
 2111              	.LFB69:
 365:armwave.c     **** 
 366:armwave.c     **** /*
 367:armwave.c     ****  * Initialise some test functionry.
 368:armwave.c     ****  */
 369:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 370:armwave.c     **** {
 2112              		.loc 1 370 1 is_stmt 1 view -0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 371:armwave.c     ****     test_create_gamma();
 2116              		.loc 1 371 5 view .LVU583
 2117              	.LBB10:
 2118              	.LBI10:
  45:armwave.c     **** {
 2119              		.loc 1 45 6 view .LVU584
  45:armwave.c     **** {
 2120              		.loc 1 45 6 is_stmt 0 view .LVU585
 2121              	.LBE10:
 2122              	@ armwave.c:370: {
 370:armwave.c     ****     test_create_gamma();
 2123              		.loc 1 370 1 view .LVU586
 2124 0950 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2125              		.cfi_def_cfa_offset 32
 2126              		.cfi_offset 4, -32
 2127              		.cfi_offset 5, -28
 2128              		.cfi_offset 6, -24
 2129              		.cfi_offset 7, -20
 2130              		.cfi_offset 8, -16
 2131              		.cfi_offset 9, -12
 2132              		.cfi_offset 10, -8
 2133              		.cfi_offset 14, -4
 2134 0954 068B2DED 		vpush.64	{d8, d9, d10}	@
 2135              		.cfi_def_cfa_offset 56
 2136              		.cfi_offset 80, -56
 2137              		.cfi_offset 81, -52
 2138              		.cfi_offset 82, -48
 2139              		.cfi_offset 83, -44
 2140              		.cfi_offset 84, -40
 2141              		.cfi_offset 85, -36
 2142 0958 F4409FE5 		ldr	r4, .L153+20	@ ivtmp.103,
 2143              	.LBB13:
 2144              	.LBB11:
 2145              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2146              		.loc 1 51 32 view .LVU587
 2147 095c 3BAA9FED 		vldr.32	s20, .L153+16	@ tmp139,
 2148              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2149              		.loc 1 51 26 view .LVU588
 2150 0960 369B9FED 		vldr.64	d9, .L153	@ tmp157,
 2151              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2152              		.loc 1 51 49 view .LVU589
 2153 0964 378B9FED 		vldr.64	d8, .L153+8	@ tmp142,
 2154 0968 01C084E2 		add	ip, r4, #1	@ _45, ivtmp.103,
 2155              	.LBE11:
 2156              	.LBE13:
 2157              	@ armwave.c:370: {
 370:armwave.c     ****     test_create_gamma();
 2158              		.loc 1 370 1 view .LVU590
 2159 096c 10D04DE2 		sub	sp, sp, #16	@,,
 2160              		.cfi_def_cfa_offset 72
 2161              	@ armwave.c:370: {
 370:armwave.c     ****     test_create_gamma();
 2162              		.loc 1 370 1 view .LVU591
 2163 0970 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2164 0974 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2165 0978 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2166 097c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2167 0980 01AC84E2 		add	r10, r4, #256	@ _46, ivtmp.103,
 2168 0984 01506CE2 		rsb	r5, ip, #1	@ tmp156, _45,
 2169              	.LVL160:
 2170              	.L147:
 2171              	.LBB14:
 2172              	.LBB12:
  51:armwave.c     ****     }
 2173              		.loc 1 51 9 is_stmt 1 view .LVU592
 2174              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2175              		.loc 1 51 32 is_stmt 0 view .LVU593
 2176 0988 043085E0 		add	r3, r5, r4	@ tmp136, tmp156, ivtmp.103
 2177              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2178              		.loc 1 51 26 view .LVU594
 2179 098c 491BB0EE 		vmov.f64	d1, d9	@, tmp157
 2180              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2181              		.loc 1 51 32 view .LVU595
 2182 0990 903A07EE 		vmov	s15, r3	@ int	@ tmp136, tmp136
 2183 0994 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp137, tmp136
 2184 0998 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp138, tmp137, tmp139
 2185              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2186              		.loc 1 51 26 view .LVU596
 2187 099c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp138
 2188 09a0 FEFFFFEB 		bl	pow		@
 2189              	.LVL161:
 2190              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2191              		.loc 1 51 49 view .LVU597
 2192 09a4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp141,, tmp142
 2193              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2194              		.loc 1 51 24 view .LVU598
 2195 09a8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp143, tmp141
 2196 09ac 903A17EE 		vmov	r3, s15	@ int	@ tmp143, tmp143
 2197 09b0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp143, MEM[base: _44, offset: 0B]
 2198              	.LVL162:
 2199              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2200              		.loc 1 50 5 view .LVU599
 2201 09b4 0A0054E1 		cmp	r4, r10	@ ivtmp.103, _46
 2202 09b8 F2FFFF1A 		bne	.L147		@,
 2203              	.LVL163:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2204              		.loc 1 50 5 view .LVU600
 2205              	.LBE12:
 2206              	.LBE14:
 372:armwave.c     **** 
 373:armwave.c     ****     // make ch1 yellowish by default
 374:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2207              		.loc 1 374 5 is_stmt 1 view .LVU601
 2208              	.LBB15:
 2209              	.LBI15:
 327:armwave.c     **** {
 2210              		.loc 1 327 6 view .LVU602
 2211              	.LBB16:
 330:armwave.c     ****         case 1:
 2212              		.loc 1 330 5 view .LVU603
 332:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2213              		.loc 1 332 13 view .LVU604
 333:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2214              		.loc 1 333 13 view .LVU605
 2215              	@ armwave.c:332:             g_armwave_state.ch1_color.r = r;
 332:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2216              		.loc 1 332 41 is_stmt 0 view .LVU606
 2217 09bc 94309FE5 		ldr	r3, .L153+24	@ tmp145,
 2218              	.LBE16:
 2219              	.LBE15:
 2220              	@ armwave.c:376:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 375:armwave.c     **** 
 376:armwave.c     ****     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2221              		.loc 1 376 41 view .LVU607
 2222 09c0 970604E0 		mul	r4, r7, r6	@ _1, nwaves, wave_size
 2223              	.LBB19:
 2224              	.LBB17:
 2225              	@ armwave.c:332:             g_armwave_state.ch1_color.r = r;
 332:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2226              		.loc 1 332 41 view .LVU608
 2227 09c4 90109FE5 		ldr	r1, .L153+28	@ tmp146,
 2228              	@ armwave.c:334:             g_armwave_state.ch1_color.b = b;
 334:armwave.c     ****             break;
 2229              		.loc 1 334 41 view .LVU609
 2230 09c8 FA20A0E3 		mov	r2, #250	@ tmp149,
 2231              	@ armwave.c:332:             g_armwave_state.ch1_color.r = r;
 332:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2232              		.loc 1 332 41 view .LVU610
 2233 09cc 581083E5 		str	r1, [r3, #88]	@ tmp146, MEM[(short int *)&g_armwave_state + 88B]
 334:armwave.c     ****             break;
 2234              		.loc 1 334 13 is_stmt 1 view .LVU611
 2235              	.LBE17:
 2236              	.LBE19:
 2237              	@ armwave.c:376:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2238              		.loc 1 376 24 is_stmt 0 view .LVU612
 2239 09d0 0400A0E1 		mov	r0, r4	@, _1
 2240 09d4 0110A0E3 		mov	r1, #1	@,
 2241              	.LBB20:
 2242              	.LBB18:
 2243              	@ armwave.c:334:             g_armwave_state.ch1_color.b = b;
 334:armwave.c     ****             break;
 2244              		.loc 1 334 41 view .LVU613
 2245 09d8 BC25C3E1 		strh	r2, [r3, #92]	@ movhi	@ tmp149, g_armwave_state.ch1_color.b
 335:armwave.c     ****     }
 2246              		.loc 1 335 13 is_stmt 1 view .LVU614
 2247              	.LVL164:
 335:armwave.c     ****     }
 2248              		.loc 1 335 13 is_stmt 0 view .LVU615
 2249              	.LBE18:
 2250              	.LBE20:
 2251              		.loc 1 376 5 is_stmt 1 view .LVU616
 2252              	@ armwave.c:376:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2253              		.loc 1 376 24 is_stmt 0 view .LVU617
 2254 09dc FEFFFFEB 		bl	calloc		@
 2255              	.LVL165:
 2256              	@ armwave.c:376:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2257              		.loc 1 376 22 view .LVU618
 2258 09e0 78309FE5 		ldr	r3, .L153+32	@ tmp151,
 2259              	@ armwave.c:378:     if(test_wave_buffer == NULL) {
 377:armwave.c     **** 
 378:armwave.c     ****     if(test_wave_buffer == NULL) {
 2260              		.loc 1 378 7 view .LVU619
 2261 09e4 000050E3 		cmp	r0, #0	@ tmp150,
 2262              	@ armwave.c:376:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 376:armwave.c     **** 
 2263              		.loc 1 376 22 view .LVU620
 2264 09e8 000083E5 		str	r0, [r3]	@ tmp150, test_wave_buffer
 2265              		.loc 1 378 5 is_stmt 1 view .LVU621
 2266              	@ armwave.c:378:     if(test_wave_buffer == NULL) {
 2267              		.loc 1 378 7 is_stmt 0 view .LVU622
 2268 09ec 0C00000A 		beq	.L152		@,
 379:armwave.c     ****         printf("armwave_test_init: failed to allocate test wave buffer (%d bytes)\n", wave_size * n
 380:armwave.c     ****         return;
 381:armwave.c     ****     }
 382:armwave.c     **** 
 383:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2269              		.loc 1 383 5 is_stmt 1 view .LVU623
 2270 09f0 0000A0E3 		mov	r0, #0	@ tmp153,
 2271 09f4 08008DE5 		str	r0, [sp, #8]	@ tmp153,
 2272 09f8 0610A0E1 		mov	r1, r6	@, tmp3
 2273 09fc F080CDE1 		strd	r8, [sp]	@,
 2274 0a00 0720A0E1 		mov	r2, r7	@, nwaves
 2275 0a04 0630A0E1 		mov	r3, r6	@, wave_size
 2276 0a08 FEFFFFEB 		bl	armwave_setup_render		@
 2277              	.LVL166:
 384:armwave.c     **** 
 385:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2278              		.loc 1 385 5 view .LVU624
 2279 0a0c 50109FE5 		ldr	r1, .L153+36	@,
 2280 0a10 50009FE5 		ldr	r0, .L153+40	@,
 2281              	@ armwave.c:386: }
 386:armwave.c     **** }
 2282              		.loc 1 386 1 is_stmt 0 view .LVU625
 2283 0a14 10D08DE2 		add	sp, sp, #16	@,,
 2284              		.cfi_remember_state
 2285              		.cfi_def_cfa_offset 56
 2286              		@ sp needed	@
 2287 0a18 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2288              		.cfi_restore 84
 2289              		.cfi_restore 85
 2290              		.cfi_restore 82
 2291              		.cfi_restore 83
 2292              		.cfi_restore 80
 2293              		.cfi_restore 81
 2294              		.cfi_def_cfa_offset 32
 2295 0a1c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2296              		.cfi_restore 14
 2297              		.cfi_restore 10
 2298              		.cfi_restore 9
 2299              		.cfi_restore 8
 2300              		.cfi_restore 7
 2301              		.cfi_restore 6
 2302              		.cfi_restore 5
 2303              		.cfi_restore 4
 2304              		.cfi_def_cfa_offset 0
 2305              	.LVL167:
 2306              	@ armwave.c:385:     printf("armwave version: %s\n", ARMWAVE_VER);
 385:armwave.c     **** }
 2307              		.loc 1 385 5 view .LVU626
 2308 0a20 FEFFFFEA 		b	printf		@
 2309              	.LVL168:
 2310              	.L152:
 2311              		.cfi_restore_state
 379:armwave.c     ****         return;
 2312              		.loc 1 379 9 is_stmt 1 view .LVU627
 2313 0a24 0410A0E1 		mov	r1, r4	@, _1
 2314 0a28 3C009FE5 		ldr	r0, .L153+44	@,
 2315              	@ armwave.c:386: }
 2316              		.loc 1 386 1 is_stmt 0 view .LVU628
 2317 0a2c 10D08DE2 		add	sp, sp, #16	@,,
 2318              		.cfi_def_cfa_offset 56
 2319              		@ sp needed	@
 2320 0a30 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2321              		.cfi_restore 84
 2322              		.cfi_restore 85
 2323              		.cfi_restore 82
 2324              		.cfi_restore 83
 2325              		.cfi_restore 80
 2326              		.cfi_restore 81
 2327              		.cfi_def_cfa_offset 32
 2328 0a34 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2329              		.cfi_restore 14
 2330              		.cfi_restore 10
 2331              		.cfi_restore 9
 2332              		.cfi_restore 8
 2333              		.cfi_restore 7
 2334              		.cfi_restore 6
 2335              		.cfi_restore 5
 2336              		.cfi_restore 4
 2337              		.cfi_def_cfa_offset 0
 2338              	.LVL169:
 2339              	@ armwave.c:385:     printf("armwave version: %s\n", ARMWAVE_VER);
 385:armwave.c     **** }
 2340              		.loc 1 385 5 view .LVU629
 2341 0a38 FEFFFFEA 		b	printf		@
 2342              	.LVL170:
 2343              	.L154:
 2344 0a3c 0000A0E1 		.align	3
 2345              	.L153:
 2346 0a40 000000C0 		.word	-1073741824
 2347 0a44 CCCCEC3F 		.word	1072483532
 2348 0a48 00000000 		.word	0
 2349 0a4c 00E06F40 		.word	1081073664
 2350 0a50 00007F43 		.word	1132396544
 2351 0a54 FFFFFFFF 		.word	gamma_table-1
 2352 0a58 00000000 		.word	g_armwave_state
 2353 0a5c F609F406 		.word	116656630
 2354 0a60 00000000 		.word	test_wave_buffer
 2355 0a64 00000000 		.word	.LC0
 2356 0a68 08000000 		.word	.LC1
 2357 0a6c 9C010000 		.word	.LC17
 2358              		.cfi_endproc
 2359              	.LFE69:
 2361              		.global	__aeabi_uidiv
 2362              		.align	2
 2363              		.global	armwave_test_generate
 2364              		.syntax unified
 2365              		.arm
 2366              		.fpu vfp
 2368              	armwave_test_generate:
 2369              	.LFB70:
 387:armwave.c     **** 
 388:armwave.c     **** /*
 389:armwave.c     ****  * Fill buffers with test funtionry.
 390:armwave.c     ****  */
 391:armwave.c     **** void armwave_test_generate()
 392:armwave.c     **** {
 2370              		.loc 1 392 1 is_stmt 1 view -0
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 0
 2373              		@ frame_needed = 0, uses_anonymous_args = 0
 393:armwave.c     ****     uint32_t yy;
 2374              		.loc 1 393 5 view .LVU631
 394:armwave.c     **** 
 395:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2375              		.loc 1 395 5 view .LVU632
 2376              	@ armwave.c:392: {
 392:armwave.c     ****     uint32_t yy;
 2377              		.loc 1 392 1 is_stmt 0 view .LVU633
 2378 0a70 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2379              		.cfi_def_cfa_offset 40
 2380              		.cfi_offset 3, -40
 2381              		.cfi_offset 4, -36
 2382              		.cfi_offset 5, -32
 2383              		.cfi_offset 6, -28
 2384              		.cfi_offset 7, -24
 2385              		.cfi_offset 8, -20
 2386              		.cfi_offset 9, -16
 2387              		.cfi_offset 10, -12
 2388              		.cfi_offset 11, -8
 2389              		.cfi_offset 14, -4
 2390              	@ armwave.c:395:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2391              		.loc 1 395 5 view .LVU634
 2392 0a74 0010A0E3 		mov	r1, #0	@,
 2393 0a78 28419FE5 		ldr	r4, .L173	@ tmp269,
 2394 0a7c 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.ch_buff_size
 2395 0a80 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2396 0a84 FEFFFFEB 		bl	memset		@
 2397              	.LVL171:
 396:armwave.c     **** 
 397:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2398              		.loc 1 397 5 is_stmt 1 view .LVU635
 2399              	@ armwave.c:397:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2400              		.loc 1 397 45 is_stmt 0 view .LVU636
 2401 0a88 306094E5 		ldr	r6, [r4, #48]	@ _96, g_armwave_state.slice_height
 2402              	@ armwave.c:397:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2403              		.loc 1 397 5 view .LVU637
 2404 0a8c 020B56E3 		cmp	r6, #2048	@ _96,
 2405 0a90 F88FBD88 		pophi	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2406              	@ armwave.c:397:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2407              		.loc 1 397 12 view .LVU638
 2408 0a94 0050A0E3 		mov	r5, #0	@ yy,
 2409              	.LVL172:
 2410              	.L156:
 398:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2411              		.loc 1 398 9 is_stmt 1 discriminator 3 view .LVU639
 2412 0a98 960502E0 		mul	r2, r6, r5	@, _96, yy
 2413 0a9c 343094E5 		ldr	r3, [r4, #52]	@, g_armwave_state.slice_record_height
 2414 0aa0 0510A0E1 		mov	r1, r5	@, yy
 2415 0aa4 00019FE5 		ldr	r0, .L173+4	@,
 2416 0aa8 FEFFFFEB 		bl	printf		@
 2417              	.LVL173:
 399:armwave.c     **** 
 400:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2418              		.loc 1 400 9 discriminator 3 view .LVU640
 2419              	@ armwave.c:400:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2420              		.loc 1 400 62 is_stmt 0 discriminator 3 view .LVU641
 2421 0aac 306094E5 		ldr	r6, [r4, #48]	@ _96, g_armwave_state.slice_height
 2422              	.LBB23:
 2423              	.LBB24:
 2424              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2425              		.loc 1 84 5 discriminator 3 view .LVU642
 2426 0ab0 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 2427              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2428              		.loc 1 81 63 discriminator 3 view .LVU643
 2429 0ab4 2C0094E5 		ldr	r0, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2430              	.LBE24:
 2431              	.LBE23:
 2432              	@ armwave.c:400:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2433              		.loc 1 400 9 discriminator 3 view .LVU644
 2434 0ab8 950608E0 		mul	r8, r5, r6	@ _6, yy, _96
 2435              	.LBB27:
 2436              	.LBB25:
 2437              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2438              		.loc 1 84 5 discriminator 3 view .LVU645
 2439 0abc 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 2440              	.LBE25:
 2441              	.LBE27:
 2442              	@ armwave.c:400:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2443              		.loc 1 400 9 discriminator 3 view .LVU646
 2444 0ac0 349094E5 		ldr	r9, [r4, #52]	@ _7, g_armwave_state.slice_record_height
 2445              	.LVL174:
 2446              	.LBB28:
 2447              	.LBI23:
  73:armwave.c     **** {
 2448              		.loc 1 73 6 is_stmt 1 discriminator 3 view .LVU647
 2449              	.LBB26:
  75:armwave.c     ****     uint32_t value, word;
 2450              		.loc 1 75 5 discriminator 3 view .LVU648
  76:armwave.c     ****     uint8_t *wave_base;
 2451              		.loc 1 76 5 discriminator 3 view .LVU649
  77:armwave.c     ****     uint8_t *write_buffer_base;
 2452              		.loc 1 77 5 discriminator 3 view .LVU650
  78:armwave.c     ****     uint8_t *write_buffer;
 2453              		.loc 1 78 5 discriminator 3 view .LVU651
  79:armwave.c     ****     
 2454              		.loc 1 79 5 discriminator 3 view .LVU652
  81:armwave.c     **** 
 2455              		.loc 1 81 5 discriminator 3 view .LVU653
 2456              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2457              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU654
 2458 0ac4 900800E0 		mul	r0, r0, r8	@ _19, g_armwave_state.bitdepth_height, _6
 2459              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2460              		.loc 1 81 40 discriminator 3 view .LVU655
 2461 0ac8 043094E5 		ldr	r3, [r4, #4]	@ _17, g_armwave_state.ch1_buffer
 2462              	.LVL175:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2463              		.loc 1 84 5 is_stmt 1 discriminator 3 view .LVU656
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2464              		.loc 1 84 5 is_stmt 0 discriminator 3 view .LVU657
 2465 0acc 2E00000A 		beq	.L157		@,
 2466 0ad0 000059E3 		cmp	r9, #0	@ _7,
 2467 0ad4 2B00000A 		beq	.L158		@,
 2468 0ad8 048048E2 		sub	r8, r8, #4	@ tmp268, _6,
 2469              	.LVL176:
 2470              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2471              		.loc 1 84 11 view .LVU658
 2472 0adc 0070A0E3 		mov	r7, #0	@ w,
 2473              	.LVL177:
 2474              	.L160:
  85:armwave.c     **** 
 2475              		.loc 1 85 9 is_stmt 1 view .LVU659
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2476              		.loc 1 89 9 view .LVU660
 2477              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     **** 
 2478              		.loc 1 85 64 is_stmt 0 view .LVU661
 2479 0ae0 201094E5 		ldr	r1, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2480 0ae4 14C094E5 		ldr	ip, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2481              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2482              		.loc 1 89 16 view .LVU662
 2483 0ae8 0020A0E3 		mov	r2, #0	@ yy,
 2484 0aec 918721E0 		mla	r1, r1, r7, r8	@ tmp214, g_armwave_state.wave_stride, w, tmp268
 2485 0af0 01C08CE0 		add	ip, ip, r1	@ ivtmp.109, g_armwave_state.wave_buffer, tmp214
 2486              	.LVL178:
 2487              	.L159:
  90:armwave.c     **** 
 2488              		.loc 1 90 13 is_stmt 1 view .LVU663
 2489              	@ armwave.c:90:             word = *(uint32_t*)(wave_base + yy);
  90:armwave.c     **** 
 2490              		.loc 1 90 18 is_stmt 0 view .LVU664
 2491 0af4 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _190, offset: 0B]
 2492              	.LVL179:
  92:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2493              		.loc 1 92 13 is_stmt 1 view .LVU665
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2494              		.loc 1 94 17 view .LVU666
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2495              		.loc 1 95 17 view .LVU667
  96:armwave.c     ****                 word >>= 8;
 2496              		.loc 1 96 17 view .LVU668
 2497              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2498              		.loc 1 95 63 is_stmt 0 view .LVU669
 2499 0af8 2C6094E5 		ldr	r6, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2500 0afc 01B082E2 		add	fp, r2, #1	@ tmp227, yy,
 2501              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2502              		.loc 1 96 47 view .LVU670
 2503 0b00 71E0E0E6 		uxtab	lr, r0, r1	@ tmp220, _19, word
 2504 0b04 96E226E0 		mla	r6, r6, r2, lr	@ tmp221, g_armwave_state.bitdepth_height, yy, tmp220
 2505              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2506              		.loc 1 97 22 view .LVU671
 2507 0b08 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2508              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2509              		.loc 1 96 47 view .LVU672
 2510 0b0c 06E0D3E7 		ldrb	lr, [r3, r6]	@ zero_extendqisi2	@ *_67, *_67
 2511 0b10 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp232, _19, word
 2512 0b14 01E08EE2 		add	lr, lr, #1	@ tmp224, *_67,
 2513 0b18 06E0C3E7 		strb	lr, [r3, r6]	@ tmp224, *_67
 2514              	.LVL180:
  97:armwave.c     ****             }
 2515              		.loc 1 97 17 is_stmt 1 view .LVU673
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2516              		.loc 1 94 17 view .LVU674
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2517              		.loc 1 95 17 view .LVU675
  96:armwave.c     ****                 word >>= 8;
 2518              		.loc 1 96 17 view .LVU676
 2519              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2520              		.loc 1 95 63 is_stmt 0 view .LVU677
 2521 0b1c 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2522              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2523              		.loc 1 97 22 view .LVU678
 2524 0b20 2168A0E1 		lsr	r6, r1, #16	@ word, word,
 2525              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2526              		.loc 1 96 47 view .LVU679
 2527 0b24 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp255, _19, word,
 2528              	.LVL181:
  96:armwave.c     ****                 word >>= 8;
 2529              		.loc 1 96 47 view .LVU680
 2530 0b28 9EAB2EE0 		mla	lr, lr, fp, r10	@ tmp233, g_armwave_state.bitdepth_height, tmp227, tmp232
 2531 0b2c 76A0E0E6 		uxtab	r10, r0, r6	@ tmp240, _19, word
 2532 0b30 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_87, *_87
 2533              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2534              		.loc 1 95 63 view .LVU681
 2535 0b34 026082E2 		add	r6, r2, #2	@ tmp242, yy,
 2536              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2537              		.loc 1 96 47 view .LVU682
 2538 0b38 01B08BE2 		add	fp, fp, #1	@ tmp236, *_87,
 2539 0b3c 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp236, *_87
 2540              	.LVL182:
  97:armwave.c     ****             }
 2541              		.loc 1 97 17 is_stmt 1 view .LVU683
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2542              		.loc 1 94 17 view .LVU684
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2543              		.loc 1 95 17 view .LVU685
  96:armwave.c     ****                 word >>= 8;
 2544              		.loc 1 96 17 view .LVU686
 2545              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2546              		.loc 1 95 63 is_stmt 0 view .LVU687
 2547 0b40 2CB094E5 		ldr	fp, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2548 0b44 03E082E2 		add	lr, r2, #3	@ tmp251, yy,
 2549              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2550              		.loc 1 89 37 view .LVU688
 2551 0b48 042082E2 		add	r2, r2, #4	@ yy, yy,
 2552              	.LVL183:
 2553              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2554              		.loc 1 96 47 view .LVU689
 2555 0b4c 9BA626E0 		mla	r6, fp, r6, r10	@ tmp245, g_armwave_state.bitdepth_height, tmp242, tmp240
 2556              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2557              		.loc 1 89 9 view .LVU690
 2558 0b50 020059E1 		cmp	r9, r2	@ _7, yy
 2559              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2560              		.loc 1 96 47 view .LVU691
 2561 0b54 06A0D3E7 		ldrb	r10, [r3, r6]	@ zero_extendqisi2	@ *_107, *_107
 2562 0b58 01A08AE2 		add	r10, r10, #1	@ tmp248, *_107,
 2563 0b5c 06A0C3E7 		strb	r10, [r3, r6]	@ tmp248, *_107
 2564              	.LVL184:
  97:armwave.c     ****             }
 2565              		.loc 1 97 17 is_stmt 1 view .LVU692
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2566              		.loc 1 94 17 view .LVU693
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2567              		.loc 1 95 17 view .LVU694
  96:armwave.c     ****                 word >>= 8;
 2568              		.loc 1 96 17 view .LVU695
 2569              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2570              		.loc 1 95 63 is_stmt 0 view .LVU696
 2571 0b60 2C6094E5 		ldr	r6, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2572              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2573              		.loc 1 96 47 view .LVU697
 2574 0b64 961E21E0 		mla	r1, r6, lr, r1	@ tmp256, g_armwave_state.bitdepth_height, tmp251, tmp255
 2575 0b68 01E0D3E7 		ldrb	lr, [r3, r1]	@ zero_extendqisi2	@ *_127, *_127
 2576 0b6c 01E08EE2 		add	lr, lr, #1	@ tmp259, *_127,
 2577 0b70 01E0C3E7 		strb	lr, [r3, r1]	@ tmp259, *_127
  97:armwave.c     ****             }
 2578              		.loc 1 97 17 is_stmt 1 view .LVU698
 2579              	.LVL185:
 2580              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2581              		.loc 1 89 9 is_stmt 0 view .LVU699
 2582 0b74 DEFFFF8A 		bhi	.L159		@,
 2583              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2584              		.loc 1 84 5 view .LVU700
 2585 0b78 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 2586              	.LVL186:
 2587              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2588              		.loc 1 84 44 view .LVU701
 2589 0b7c 017087E2 		add	r7, r7, #1	@ w, w,
 2590              	.LVL187:
 2591              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2592              		.loc 1 84 5 view .LVU702
 2593 0b80 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 2594 0b84 D5FFFF3A 		bcc	.L160		@,
 2595              	.LVL188:
 2596              	.L158:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2597              		.loc 1 84 5 view .LVU703
 2598 0b88 306094E5 		ldr	r6, [r4, #48]	@ _96, g_armwave_state.slice_height
 2599              	.L157:
 2600              	.LVL189:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2601              		.loc 1 84 5 view .LVU704
 2602              	.LBE26:
 2603              	.LBE28:
 2604              	@ armwave.c:397:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 397:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2605              		.loc 1 397 28 discriminator 3 view .LVU705
 2606 0b8c 0610A0E1 		mov	r1, r6	@, _96
 2607 0b90 020BA0E3 		mov	r0, #2048	@,
 2608              	.LVL190:
 397:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2609              		.loc 1 397 28 discriminator 3 view .LVU706
 2610 0b94 FEFFFFEB 		bl	__aeabi_uidiv		@
 2611              	.LVL191:
 2612              	@ armwave.c:397:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 397:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2613              		.loc 1 397 63 discriminator 3 view .LVU707
 2614 0b98 015085E2 		add	r5, r5, #1	@ yy, yy,
 2615              	.LVL192:
 2616              	@ armwave.c:397:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 397:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2617              		.loc 1 397 5 discriminator 3 view .LVU708
 2618 0b9c 050050E1 		cmp	r0, r5	@, yy
 2619 0ba0 BCFFFF8A 		bhi	.L156		@,
 2620 0ba4 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2621              	.L174:
 2622              		.align	2
 2623              	.L173:
 2624 0ba8 00000000 		.word	g_armwave_state
 2625 0bac E0010000 		.word	.LC18
 2626              		.cfi_endproc
 2627              	.LFE70:
 2629              		.align	2
 2630              		.global	armwave_test_fill_outbuf
 2631              		.syntax unified
 2632              		.arm
 2633              		.fpu vfp
 2635              	armwave_test_fill_outbuf:
 2636              	.LFB71:
 401:armwave.c     ****     }
 402:armwave.c     **** }
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Render image to the local allocated buffer.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_test_fill_outbuf()
 408:armwave.c     **** {
 2637              		.loc 1 408 1 is_stmt 1 view -0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 8
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2641              		.loc 1 409 5 view .LVU710
 2642 0bb0 40219FE5 		ldr	r2, .L199	@ tmp203,
 2643              	@ armwave.c:408: {
 408:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2644              		.loc 1 408 1 is_stmt 0 view .LVU711
 2645 0bb4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2646              		.cfi_def_cfa_offset 36
 2647              		.cfi_offset 4, -36
 2648              		.cfi_offset 5, -32
 2649              		.cfi_offset 6, -28
 2650              		.cfi_offset 7, -24
 2651              		.cfi_offset 8, -20
 2652              		.cfi_offset 9, -16
 2653              		.cfi_offset 10, -12
 2654              		.cfi_offset 11, -8
 2655              		.cfi_offset 14, -4
 2656 0bb8 0CD04DE2 		sub	sp, sp, #12	@,,
 2657              		.cfi_def_cfa_offset 48
 2658              	@ armwave.c:409:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2659              		.loc 1 409 5 view .LVU712
 2660 0bbc 548092E5 		ldr	r8, [r2, #84]	@ _1, g_armwave_state.out_pixbuf
 2661              	.LVL193:
 2662              	.LBB31:
 2663              	.LBI31:
 160:armwave.c     **** {
 2664              		.loc 1 160 6 is_stmt 1 view .LVU713
 2665              	.LBB32:
 162:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2666              		.loc 1 162 5 view .LVU714
 163:armwave.c     ****     uint8_t r, g, b, value, row;
 2667              		.loc 1 163 5 view .LVU715
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2668              		.loc 1 164 5 view .LVU716
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2669              		.loc 1 165 5 view .LVU717
 2670              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2671              		.loc 1 165 15 is_stmt 0 view .LVU718
 2672 0bc0 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2673              	.LVL194:
 166:armwave.c     ****     uint32_t offset;
 2674              		.loc 1 166 5 is_stmt 1 view .LVU719
 167:armwave.c     **** 
 2675              		.loc 1 167 5 view .LVU720
 169:armwave.c     **** 
 2676              		.loc 1 169 5 view .LVU721
 2677 0bc4 000058E3 		cmp	r8, #0	@ _1,
 2678 0bc8 4500000A 		beq	.L197		@,
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2679              		.loc 1 171 5 view .LVU722
 2680              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2681              		.loc 1 171 41 is_stmt 0 view .LVU723
 2682 0bcc 445092E5 		ldr	r5, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2683 0bd0 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2684              	.LVL195:
 172:armwave.c     **** 
 2685              		.loc 1 172 5 is_stmt 1 view .LVU724
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2686              		.loc 1 174 5 view .LVU725
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2687              		.loc 1 174 5 is_stmt 0 view .LVU726
 2688 0bd4 000055E3 		cmp	r5, #0	@ npix,
 2689 0bd8 0B0000DA 		ble	.L175		@,
 2690              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2691              		.loc 1 187 52 view .LVU727
 2692 0bdc FA35D2E1 		ldrsh	r3, [r2, #90]	@ _24, g_armwave_state.ch1_color.g
 2693              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2694              		.loc 1 186 52 view .LVU728
 2695 0be0 F8B5D2E1 		ldrsh	fp, [r2, #88]	@ _18, g_armwave_state.ch1_color.r
 2696              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2697              		.loc 1 174 11 view .LVU729
 2698 0be4 0010A0E3 		mov	r1, #0	@ n,
 2699              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2700              		.loc 1 187 52 view .LVU730
 2701 0be8 00308DE5 		str	r3, [sp]	@ _24, %sfp
 2702              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2703              		.loc 1 188 52 view .LVU731
 2704 0bec FC35D2E1 		ldrsh	r3, [r2, #92]	@ _28, g_armwave_state.ch1_color.b
 2705 0bf0 04308DE5 		str	r3, [sp, #4]	@ _28, %sfp
 2706              	.LVL196:
 2707              	.L182:
 178:armwave.c     **** 
 2708              		.loc 1 178 9 is_stmt 1 view .LVU732
 2709              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 2710              		.loc 1 178 19 is_stmt 0 view .LVU733
 2711 0bf4 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2712              	.LVL197:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2713              		.loc 1 180 9 is_stmt 1 view .LVU734
 2714              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2715              		.loc 1 180 11 is_stmt 0 view .LVU735
 2716 0bf8 000050E3 		cmp	r0, #0	@ wave_word,
 2717 0bfc 0400001A 		bne	.L194		@,
 2718 0c00 041081E2 		add	r1, r1, #4	@ n, n,
 2719              	.L178:
 2720              	.LVL198:
 2721              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2722              		.loc 1 174 5 view .LVU736
 2723 0c04 010055E1 		cmp	r5, r1	@ npix, n
 2724 0c08 F9FFFFCA 		bgt	.L182		@,
 2725              	.LVL199:
 2726              	.L175:
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2727              		.loc 1 174 5 view .LVU737
 2728              	.LBE32:
 2729              	.LBE31:
 2730              	@ armwave.c:410: }
 410:armwave.c     **** }
 2731              		.loc 1 410 1 view .LVU738
 2732 0c0c 0CD08DE2 		add	sp, sp, #12	@,,
 2733              		.cfi_remember_state
 2734              		.cfi_def_cfa_offset 36
 2735              		@ sp needed	@
 2736 0c10 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2737              	.LVL200:
 2738              	.L194:
 2739              		.cfi_restore_state
 2740              	.LBB34:
 2741              	.LBB33:
 2742              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2743              		.loc 1 185 19 view .LVU739
 2744 0c14 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2745              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2746              		.loc 1 180 11 view .LVU740
 2747 0c18 0160A0E1 		mov	r6, r1	@ ivtmp.126, n
 2748              	.LVL201:
 182:armwave.c     ****                 wave_word >>= 8;
 2749              		.loc 1 182 17 is_stmt 1 view .LVU741
 183:armwave.c     **** 
 2750              		.loc 1 183 17 view .LVU742
 2751              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 2752              		.loc 1 183 27 is_stmt 0 view .LVU743
 2753 0c1c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2754              	.LVL202:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2755              		.loc 1 185 17 is_stmt 1 view .LVU744
 2756 0c20 041081E2 		add	r1, r1, #4	@ n, ivtmp.126,
 2757              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2758              		.loc 1 185 19 is_stmt 0 view .LVU745
 2759 0c24 0500001A 		bne	.L198		@,
 2760              	.L179:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2761              		.loc 1 185 19 view .LVU746
 2762 0c28 016086E2 		add	r6, r6, #1	@ ivtmp.126, ivtmp.126,
 2763              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 2764              		.loc 1 181 13 view .LVU747
 2765 0c2c 060051E1 		cmp	r1, r6	@ n, ivtmp.126
 2766 0c30 F3FFFF0A 		beq	.L178		@,
 182:armwave.c     ****                 wave_word >>= 8;
 2767              		.loc 1 182 17 is_stmt 1 view .LVU748
 2768              	.LVL203:
 183:armwave.c     **** 
 2769              		.loc 1 183 17 view .LVU749
 2770              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2771              		.loc 1 185 19 is_stmt 0 view .LVU750
 2772 0c34 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2773              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 2774              		.loc 1 183 27 view .LVU751
 2775 0c38 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2776              	.LVL204:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2777              		.loc 1 185 17 is_stmt 1 view .LVU752
 2778              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2779              		.loc 1 185 19 is_stmt 0 view .LVU753
 2780 0c3c F9FFFF0A 		beq	.L179		@,
 2781              	.L198:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2782              		.loc 1 186 21 is_stmt 1 view .LVU754
 2783              	.LVL205:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2784              		.loc 1 187 21 view .LVU755
 188:armwave.c     **** 
 2785              		.loc 1 188 21 view .LVU756
 190:armwave.c     ****                     g = MIN(gg, 255);
 2786              		.loc 1 190 21 view .LVU757
 191:armwave.c     ****                     b = MIN(bb, 255);
 2787              		.loc 1 191 21 view .LVU758
 192:armwave.c     **** 
 2788              		.loc 1 192 21 view .LVU759
 195:armwave.c     **** 
 2789              		.loc 1 195 21 view .LVU760
 2790              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2791              		.loc 1 188 55 is_stmt 0 view .LVU761
 2792 0c40 04309DE5 		ldr	r3, [sp, #4]	@ _28, %sfp
 2793              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 2794              		.loc 1 199 57 view .LVU762
 2795 0c44 1CA092E5 		ldr	r10, [r2, #28]	@ _50, g_armwave_state.vscale
 2796              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 2797              		.loc 1 199 32 view .LVU763
 2798 0c48 7670EFE6 		uxtb	r7, r6	@ ivtmp.126, ivtmp.126
 2799              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2800              		.loc 1 188 55 view .LVU764
 2801 0c4c 930E0CE0 		mul	ip, r3, lr	@ tmp179, _28, _20
 2802              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2803              		.loc 1 187 55 view .LVU765
 2804 0c50 00309DE5 		ldr	r3, [sp]	@ _24, %sfp
 2805              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 2806              		.loc 1 199 24 view .LVU766
 2807 0c54 9A0707E0 		mul	r7, r10, r7	@ yy, _50, ivtmp.126
 2808              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2809              		.loc 1 187 55 view .LVU767
 2810 0c58 930E04E0 		mul	r4, r3, lr	@ tmp183, _24, _20
 2811              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2812              		.loc 1 188 24 view .LVU768
 2813 0c5c 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp179,
 2814              	.LVL206:
 2815              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2816              		.loc 1 186 55 view .LVU769
 2817 0c60 9E0B0EE0 		mul	lr, lr, fp	@ tmp189, _20, _18
 2818              	.LVL207:
 2819              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2820              		.loc 1 187 24 view .LVU770
 2821 0c64 4444A0E1 		asr	r4, r4, #8	@ gg, tmp183,
 2822              	.LVL208:
 2823              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 2824              		.loc 1 192 25 view .LVU771
 2825 0c68 FF005CE3 		cmp	ip, #255	@ bb,
 2826 0c6c FFC0A0A3 		movge	ip, #255	@ bb,
 2827              	.LVL209:
 2828              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 2829              		.loc 1 191 25 view .LVU772
 2830 0c70 FF0054E3 		cmp	r4, #255	@ gg,
 2831 0c74 FF40A0A3 		movge	r4, #255	@ gg,
 2832              	.LVL210:
 2833              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2834              		.loc 1 186 24 view .LVU773
 2835 0c78 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp189,
 2836              	.LVL211:
 2837              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 2838              		.loc 1 190 25 view .LVU774
 2839 0c7c FF005EE3 		cmp	lr, #255	@ rr,
 2840              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 2841              		.loc 1 195 56 view .LVU775
 2842 0c80 0444A0E1 		lsl	r4, r4, #8	@ tmp184, gg,
 2843              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 2844              		.loc 1 190 25 view .LVU776
 2845 0c84 FFE0A0A3 		movge	lr, #255	@ rr,
 2846              	.LVL212:
 2847              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 2848              		.loc 1 195 44 view .LVU777
 2849 0c88 0C38A0E1 		lsl	r3, ip, #16	@ tmp180, bb,
 2850 0c8c FF3803E2 		and	r3, r3, #16711680	@ tmp181, tmp180,
 2851              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 2852              		.loc 1 195 56 view .LVU778
 2853 0c90 7440FFE6 		uxth	r4, r4	@ tmp185, tmp184
 2854              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 2855              		.loc 1 195 51 view .LVU779
 2856 0c94 043083E1 		orr	r3, r3, r4	@ tmp187, tmp181, tmp185
 2857              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 2858              		.loc 1 195 62 view .LVU780
 2859 0c98 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 2860 0c9c 0E3083E1 		orr	r3, r3, lr	@ tmp191, tmp187, rr
 2861              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2862              		.loc 1 202 21 view .LVU781
 2863 0ca0 00005AE3 		cmp	r10, #0	@ _50,
 2864              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 2865              		.loc 1 195 26 view .LVU782
 2866 0ca4 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp191,
 2867              	.LVL213:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 2868              		.loc 1 198 21 is_stmt 1 view .LVU783
 199:armwave.c     ****                     xx = (nsub >> 8);
 2869              		.loc 1 199 21 view .LVU784
 200:armwave.c     **** 
 2870              		.loc 1 200 21 view .LVU785
 2871              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 2872              		.loc 1 200 32 is_stmt 0 view .LVU786
 2873 0ca8 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.126,
 2874              	.LVL214:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2875              		.loc 1 202 21 is_stmt 1 view .LVU787
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2876              		.loc 1 202 21 is_stmt 0 view .LVU788
 2877 0cac DDFFFF0A 		beq	.L179		@,
 2878              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2879              		.loc 1 202 29 view .LVU789
 2880 0cb0 00C0A0E3 		mov	ip, #0	@ row,
 2881              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2882              		.loc 1 202 38 view .LVU790
 2883 0cb4 0CE0A0E1 		mov	lr, ip	@ _54, row
 2884              	.LVL215:
 2885              	.L180:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2886              		.loc 1 203 25 is_stmt 1 view .LVU791
 204:armwave.c     ****                     }
 2887              		.loc 1 204 25 view .LVU792
 2888              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2889              		.loc 1 203 52 is_stmt 0 view .LVU793
 2890 0cb8 444092E5 		ldr	r4, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2891              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2892              		.loc 1 203 45 view .LVU794
 2893 0cbc 0EE087E0 		add	lr, r7, lr	@ tmp194, yy, _54
 2894              	.LVL216:
 2895              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2896              		.loc 1 202 67 view .LVU795
 2897 0cc0 01C08CE2 		add	ip, ip, #1	@ tmp199, row,
 2898              	.LVL217:
 2899              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 2900              		.loc 1 204 43 view .LVU796
 2901 0cc4 94AE24E0 		mla	r4, r4, lr, r10	@ tmp198, g_armwave_state.target_width, tmp194, xx
 2902              	.LVL218:
 2903              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2904              		.loc 1 202 67 view .LVU797
 2905 0cc8 7CC0EFE6 		uxtb	ip, ip	@ row, tmp199
 2906              	.LVL219:
 2907              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2908              		.loc 1 202 38 view .LVU798
 2909 0ccc 0CE0A0E1 		mov	lr, ip	@ _54, row
 2910              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 2911              		.loc 1 204 53 view .LVU799
 2912 0cd0 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_60
 2913              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2914              		.loc 1 202 21 view .LVU800
 2915 0cd4 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2916              	.LVL220:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2917              		.loc 1 202 21 view .LVU801
 2918 0cd8 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 2919 0cdc F5FFFF3A 		bcc	.L180		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2920              		.loc 1 202 21 view .LVU802
 2921 0ce0 D0FFFFEA 		b	.L179		@
 2922              	.LVL221:
 2923              	.L197:
 169:armwave.c     **** 
 2924              		.loc 1 169 5 is_stmt 1 view .LVU803
 2925 0ce4 10309FE5 		ldr	r3, .L199+4	@,
 2926 0ce8 A920A0E3 		mov	r2, #169	@,
 2927 0cec 0C109FE5 		ldr	r1, .L199+8	@,
 2928 0cf0 0C009FE5 		ldr	r0, .L199+12	@,
 2929 0cf4 FEFFFFEB 		bl	__assert_fail		@
 2930              	.LVL222:
 2931              	.L200:
 2932              		.align	2
 2933              	.L199:
 2934 0cf8 00000000 		.word	g_armwave_state
 2935 0cfc 18000000 		.word	.LANCHOR0+24
 2936 0d00 20000000 		.word	.LC2
 2937 0d04 2C000000 		.word	.LC3
 2938              	.LBE33:
 2939              	.LBE34:
 2940              		.cfi_endproc
 2941              	.LFE71:
 2943              		.align	2
 2944              		.global	armwave_test_dump_buffer_to_ppm
 2945              		.syntax unified
 2946              		.arm
 2947              		.fpu vfp
 2949              	armwave_test_dump_buffer_to_ppm:
 2950              	.LVL223:
 2951              	.LFB72:
 411:armwave.c     **** 
 412:armwave.c     **** /*
 413:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 414:armwave.c     ****  */
 415:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 416:armwave.c     **** {
 2952              		.loc 1 416 1 view -0
 2953              		.cfi_startproc
 2954              		@ args = 0, pretend = 0, frame = 0
 2955              		@ frame_needed = 0, uses_anonymous_args = 0
 2956              		@ link register save eliminated.
 417:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2957              		.loc 1 417 5 view .LVU805
 2958 0d08 08309FE5 		ldr	r3, .L202	@ tmp112,
 2959 0d0c 0010A0E1 		mov	r1, r0	@, fn
 2960 0d10 540093E5 		ldr	r0, [r3, #84]	@, g_armwave_state.out_pixbuf
 2961              	.LVL224:
 2962              		.loc 1 417 5 is_stmt 0 view .LVU806
 2963 0d14 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2964              	.LVL225:
 2965              	.L203:
 2966              		.loc 1 417 5 view .LVU807
 2967              		.align	2
 2968              	.L202:
 2969 0d18 00000000 		.word	g_armwave_state
 2970              		.cfi_endproc
 2971              	.LFE72:
 2973              		.align	2
 2974              		.global	armwave_test_fill_gdkbuf
 2975              		.syntax unified
 2976              		.arm
 2977              		.fpu vfp
 2979              	armwave_test_fill_gdkbuf:
 2980              	.LVL226:
 2981              	.LFB73:
 418:armwave.c     **** }
 419:armwave.c     **** 
 420:armwave.c     **** /*
 421:armwave.c     ****  * Render GDK buffer with test funtionry.
 422:armwave.c     ****  */
 423:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 424:armwave.c     **** {
 2982              		.loc 1 424 1 is_stmt 1 view -0
 2983              		.cfi_startproc
 2984              		@ args = 0, pretend = 0, frame = 8
 2985              		@ frame_needed = 0, uses_anonymous_args = 0
 425:armwave.c     ****     //PyObject *mv;
 426:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 427:armwave.c     **** 
 428:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 429:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2986              		.loc 1 429 5 view .LVU809
 2987              	@ armwave.c:429:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2988              		.loc 1 429 11 is_stmt 0 view .LVU810
 2989 0d1c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2990              	@ armwave.c:424: {
 424:armwave.c     ****     //PyObject *mv;
 2991              		.loc 1 424 1 view .LVU811
 2992 0d20 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2993              		.cfi_def_cfa_offset 36
 2994              		.cfi_offset 4, -36
 2995              		.cfi_offset 5, -32
 2996              		.cfi_offset 6, -28
 2997              		.cfi_offset 7, -24
 2998              		.cfi_offset 8, -20
 2999              		.cfi_offset 9, -16
 3000              		.cfi_offset 10, -12
 3001              		.cfi_offset 11, -8
 3002              		.cfi_offset 14, -4
 3003 0d24 0CD04DE2 		sub	sp, sp, #12	@,,
 3004              		.cfi_def_cfa_offset 48
 3005              	.LBB37:
 3006              	.LBB38:
 3007              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3008              		.loc 1 165 15 view .LVU812
 3009 0d28 38219FE5 		ldr	r2, .L228	@ tmp206,
 3010              	.LBE38:
 3011              	.LBE37:
 3012              	@ armwave.c:429:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3013              		.loc 1 429 11 view .LVU813
 3014 0d2c 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 3015              	.LVL227:
 430:armwave.c     ****     
 431:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 432:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 3016              		.loc 1 432 5 is_stmt 1 view .LVU814
 3017              	.LBB41:
 3018              	.LBI37:
 160:armwave.c     **** {
 3019              		.loc 1 160 6 view .LVU815
 3020              	.LBB39:
 162:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 3021              		.loc 1 162 5 view .LVU816
 163:armwave.c     ****     uint8_t r, g, b, value, row;
 3022              		.loc 1 163 5 view .LVU817
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 3023              		.loc 1 164 5 view .LVU818
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3024              		.loc 1 165 5 view .LVU819
 3025              	@ armwave.c:169:     assert(out_buffer != NULL);
 169:armwave.c     **** 
 3026              		.loc 1 169 5 is_stmt 0 view .LVU820
 3027 0d30 000058E3 		cmp	r8, #0	@ out_pixbuf,
 3028              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3029              		.loc 1 165 15 view .LVU821
 3030 0d34 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3031              	.LVL228:
 166:armwave.c     ****     uint32_t offset;
 3032              		.loc 1 166 5 is_stmt 1 view .LVU822
 167:armwave.c     **** 
 3033              		.loc 1 167 5 view .LVU823
 169:armwave.c     **** 
 3034              		.loc 1 169 5 view .LVU824
 3035 0d38 4500000A 		beq	.L226		@,
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3036              		.loc 1 171 5 view .LVU825
 3037              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3038              		.loc 1 171 41 is_stmt 0 view .LVU826
 3039 0d3c 445092E5 		ldr	r5, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3040 0d40 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 3041              	.LVL229:
 172:armwave.c     **** 
 3042              		.loc 1 172 5 is_stmt 1 view .LVU827
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3043              		.loc 1 174 5 view .LVU828
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3044              		.loc 1 174 5 is_stmt 0 view .LVU829
 3045 0d44 000055E3 		cmp	r5, #0	@ npix,
 3046 0d48 0B0000DA 		ble	.L204		@,
 3047              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3048              		.loc 1 187 52 view .LVU830
 3049 0d4c FA35D2E1 		ldrsh	r3, [r2, #90]	@ _26, g_armwave_state.ch1_color.g
 3050              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3051              		.loc 1 186 52 view .LVU831
 3052 0d50 F8B5D2E1 		ldrsh	fp, [r2, #88]	@ _20, g_armwave_state.ch1_color.r
 3053              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3054              		.loc 1 174 11 view .LVU832
 3055 0d54 0010A0E3 		mov	r1, #0	@ n,
 3056              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3057              		.loc 1 187 52 view .LVU833
 3058 0d58 00308DE5 		str	r3, [sp]	@ _26, %sfp
 3059              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3060              		.loc 1 188 52 view .LVU834
 3061 0d5c FC35D2E1 		ldrsh	r3, [r2, #92]	@ _30, g_armwave_state.ch1_color.b
 3062 0d60 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 3063              	.LVL230:
 3064              	.L211:
 178:armwave.c     **** 
 3065              		.loc 1 178 9 is_stmt 1 view .LVU835
 3066              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 3067              		.loc 1 178 19 is_stmt 0 view .LVU836
 3068 0d64 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 3069              	.LVL231:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3070              		.loc 1 180 9 is_stmt 1 view .LVU837
 3071              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3072              		.loc 1 180 11 is_stmt 0 view .LVU838
 3073 0d68 000050E3 		cmp	r0, #0	@ wave_word,
 3074 0d6c 0400001A 		bne	.L223		@,
 3075 0d70 041081E2 		add	r1, r1, #4	@ n, n,
 3076              	.L207:
 3077              	.LVL232:
 3078              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3079              		.loc 1 174 5 view .LVU839
 3080 0d74 010055E1 		cmp	r5, r1	@ npix, n
 3081 0d78 F9FFFFCA 		bgt	.L211		@,
 3082              	.LVL233:
 3083              	.L204:
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3084              		.loc 1 174 5 view .LVU840
 3085              	.LBE39:
 3086              	.LBE41:
 3087              	@ armwave.c:433: }
 433:armwave.c     **** }
 3088              		.loc 1 433 1 view .LVU841
 3089 0d7c 0CD08DE2 		add	sp, sp, #12	@,,
 3090              		.cfi_remember_state
 3091              		.cfi_def_cfa_offset 36
 3092              		@ sp needed	@
 3093 0d80 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3094              	.LVL234:
 3095              	.L223:
 3096              		.cfi_restore_state
 3097              	.LBB42:
 3098              	.LBB40:
 3099              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3100              		.loc 1 185 19 view .LVU842
 3101 0d84 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3102              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3103              		.loc 1 180 11 view .LVU843
 3104 0d88 0160A0E1 		mov	r6, r1	@ ivtmp.142, n
 3105              	.LVL235:
 182:armwave.c     ****                 wave_word >>= 8;
 3106              		.loc 1 182 17 is_stmt 1 view .LVU844
 183:armwave.c     **** 
 3107              		.loc 1 183 17 view .LVU845
 3108              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 3109              		.loc 1 183 27 is_stmt 0 view .LVU846
 3110 0d8c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3111              	.LVL236:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3112              		.loc 1 185 17 is_stmt 1 view .LVU847
 3113 0d90 041081E2 		add	r1, r1, #4	@ n, ivtmp.142,
 3114              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3115              		.loc 1 185 19 is_stmt 0 view .LVU848
 3116 0d94 0500001A 		bne	.L227		@,
 3117              	.L208:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3118              		.loc 1 185 19 view .LVU849
 3119 0d98 016086E2 		add	r6, r6, #1	@ ivtmp.142, ivtmp.142,
 3120              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 3121              		.loc 1 181 13 view .LVU850
 3122 0d9c 060051E1 		cmp	r1, r6	@ n, ivtmp.142
 3123 0da0 F3FFFF0A 		beq	.L207		@,
 182:armwave.c     ****                 wave_word >>= 8;
 3124              		.loc 1 182 17 is_stmt 1 view .LVU851
 3125              	.LVL237:
 183:armwave.c     **** 
 3126              		.loc 1 183 17 view .LVU852
 3127              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3128              		.loc 1 185 19 is_stmt 0 view .LVU853
 3129 0da4 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3130              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 3131              		.loc 1 183 27 view .LVU854
 3132 0da8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3133              	.LVL238:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3134              		.loc 1 185 17 is_stmt 1 view .LVU855
 3135              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3136              		.loc 1 185 19 is_stmt 0 view .LVU856
 3137 0dac F9FFFF0A 		beq	.L208		@,
 3138              	.L227:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3139              		.loc 1 186 21 is_stmt 1 view .LVU857
 3140              	.LVL239:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3141              		.loc 1 187 21 view .LVU858
 188:armwave.c     **** 
 3142              		.loc 1 188 21 view .LVU859
 190:armwave.c     ****                     g = MIN(gg, 255);
 3143              		.loc 1 190 21 view .LVU860
 191:armwave.c     ****                     b = MIN(bb, 255);
 3144              		.loc 1 191 21 view .LVU861
 192:armwave.c     **** 
 3145              		.loc 1 192 21 view .LVU862
 195:armwave.c     **** 
 3146              		.loc 1 195 21 view .LVU863
 3147              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3148              		.loc 1 188 55 is_stmt 0 view .LVU864
 3149 0db0 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 3150              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3151              		.loc 1 199 57 view .LVU865
 3152 0db4 1CA092E5 		ldr	r10, [r2, #28]	@ _52, g_armwave_state.vscale
 3153              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3154              		.loc 1 199 32 view .LVU866
 3155 0db8 7670EFE6 		uxtb	r7, r6	@ ivtmp.142, ivtmp.142
 3156              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3157              		.loc 1 188 55 view .LVU867
 3158 0dbc 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 3159              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3160              		.loc 1 187 55 view .LVU868
 3161 0dc0 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 3162              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3163              		.loc 1 199 24 view .LVU869
 3164 0dc4 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.142
 3165              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3166              		.loc 1 187 55 view .LVU870
 3167 0dc8 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 3168              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3169              		.loc 1 188 24 view .LVU871
 3170 0dcc 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 3171              	.LVL240:
 3172              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3173              		.loc 1 186 55 view .LVU872
 3174 0dd0 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 3175              	.LVL241:
 3176              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3177              		.loc 1 187 24 view .LVU873
 3178 0dd4 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 3179              	.LVL242:
 3180              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 3181              		.loc 1 192 25 view .LVU874
 3182 0dd8 FF005CE3 		cmp	ip, #255	@ bb,
 3183 0ddc FFC0A0A3 		movge	ip, #255	@ bb,
 3184              	.LVL243:
 3185              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 3186              		.loc 1 191 25 view .LVU875
 3187 0de0 FF0054E3 		cmp	r4, #255	@ gg,
 3188 0de4 FF40A0A3 		movge	r4, #255	@ gg,
 3189              	.LVL244:
 3190              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3191              		.loc 1 186 24 view .LVU876
 3192 0de8 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3193              	.LVL245:
 3194              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3195              		.loc 1 190 25 view .LVU877
 3196 0dec FF005EE3 		cmp	lr, #255	@ rr,
 3197              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3198              		.loc 1 195 56 view .LVU878
 3199 0df0 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3200              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3201              		.loc 1 190 25 view .LVU879
 3202 0df4 FFE0A0A3 		movge	lr, #255	@ rr,
 3203              	.LVL246:
 3204              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3205              		.loc 1 195 44 view .LVU880
 3206 0df8 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3207 0dfc FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3208              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3209              		.loc 1 195 56 view .LVU881
 3210 0e00 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3211              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3212              		.loc 1 195 51 view .LVU882
 3213 0e04 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3214              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3215              		.loc 1 195 62 view .LVU883
 3216 0e08 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3217 0e0c 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3218              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3219              		.loc 1 202 21 view .LVU884
 3220 0e10 00005AE3 		cmp	r10, #0	@ _52,
 3221              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3222              		.loc 1 195 26 view .LVU885
 3223 0e14 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3224              	.LVL247:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3225              		.loc 1 198 21 is_stmt 1 view .LVU886
 199:armwave.c     ****                     xx = (nsub >> 8);
 3226              		.loc 1 199 21 view .LVU887
 200:armwave.c     **** 
 3227              		.loc 1 200 21 view .LVU888
 3228              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 3229              		.loc 1 200 32 is_stmt 0 view .LVU889
 3230 0e18 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.142,
 3231              	.LVL248:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3232              		.loc 1 202 21 is_stmt 1 view .LVU890
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3233              		.loc 1 202 21 is_stmt 0 view .LVU891
 3234 0e1c DDFFFF0A 		beq	.L208		@,
 3235              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3236              		.loc 1 202 29 view .LVU892
 3237 0e20 00C0A0E3 		mov	ip, #0	@ row,
 3238              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3239              		.loc 1 202 38 view .LVU893
 3240 0e24 0CE0A0E1 		mov	lr, ip	@ _56, row
 3241              	.LVL249:
 3242              	.L209:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3243              		.loc 1 203 25 is_stmt 1 view .LVU894
 204:armwave.c     ****                     }
 3244              		.loc 1 204 25 view .LVU895
 3245              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3246              		.loc 1 203 52 is_stmt 0 view .LVU896
 3247 0e28 444092E5 		ldr	r4, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3248              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3249              		.loc 1 203 45 view .LVU897
 3250 0e2c 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3251              	.LVL250:
 3252              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3253              		.loc 1 202 67 view .LVU898
 3254 0e30 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3255              	.LVL251:
 3256              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3257              		.loc 1 204 43 view .LVU899
 3258 0e34 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3259              	.LVL252:
 3260              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3261              		.loc 1 202 67 view .LVU900
 3262 0e38 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3263              	.LVL253:
 3264              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3265              		.loc 1 202 38 view .LVU901
 3266 0e3c 0CE0A0E1 		mov	lr, ip	@ _56, row
 3267              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3268              		.loc 1 204 53 view .LVU902
 3269 0e40 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3270              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3271              		.loc 1 202 21 view .LVU903
 3272 0e44 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3273              	.LVL254:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3274              		.loc 1 202 21 view .LVU904
 3275 0e48 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3276 0e4c F5FFFF3A 		bcc	.L209		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3277              		.loc 1 202 21 view .LVU905
 3278 0e50 D0FFFFEA 		b	.L208		@
 3279              	.LVL255:
 3280              	.L226:
 169:armwave.c     **** 
 3281              		.loc 1 169 5 is_stmt 1 view .LVU906
 3282 0e54 10309FE5 		ldr	r3, .L228+4	@,
 3283 0e58 A920A0E3 		mov	r2, #169	@,
 3284 0e5c 0C109FE5 		ldr	r1, .L228+8	@,
 3285 0e60 0C009FE5 		ldr	r0, .L228+12	@,
 3286              	.LVL256:
 169:armwave.c     **** 
 3287              		.loc 1 169 5 is_stmt 0 view .LVU907
 3288 0e64 FEFFFFEB 		bl	__assert_fail		@
 3289              	.LVL257:
 3290              	.L229:
 3291              		.align	2
 3292              	.L228:
 3293 0e68 00000000 		.word	g_armwave_state
 3294 0e6c 18000000 		.word	.LANCHOR0+24
 3295 0e70 20000000 		.word	.LC2
 3296 0e74 2C000000 		.word	.LC3
 3297              	.LBE40:
 3298              	.LBE42:
 3299              		.cfi_endproc
 3300              	.LFE73:
 3302              		.align	2
 3303              		.global	armwave_fill_pixbuf_into_pybuffer
 3304              		.syntax unified
 3305              		.arm
 3306              		.fpu vfp
 3308              	armwave_fill_pixbuf_into_pybuffer:
 3309              	.LVL258:
 3310              	.LFB74:
 434:armwave.c     **** 
 435:armwave.c     **** /*
 436:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 437:armwave.c     ****  */
 438:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 439:armwave.c     **** {
 3311              		.loc 1 439 1 is_stmt 1 view -0
 3312              		.cfi_startproc
 3313              		@ args = 0, pretend = 0, frame = 48
 3314              		@ frame_needed = 0, uses_anonymous_args = 0
 440:armwave.c     ****     Py_buffer buffer;
 3315              		.loc 1 440 5 view .LVU909
 441:armwave.c     ****     int ret;
 3316              		.loc 1 441 5 view .LVU910
 442:armwave.c     **** 
 443:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3317              		.loc 1 443 5 view .LVU911
 3318              	@ armwave.c:439: {
 439:armwave.c     ****     Py_buffer buffer;
 3319              		.loc 1 439 1 is_stmt 0 view .LVU912
 3320 0e78 10402DE9 		push	{r4, lr}	@
 3321              		.cfi_def_cfa_offset 8
 3322              		.cfi_offset 4, -8
 3323              		.cfi_offset 14, -4
 3324 0e7c 0040A0E1 		mov	r4, r0	@ buf_obj, buf_obj
 3325 0e80 30D04DE2 		sub	sp, sp, #48	@,,
 3326              		.cfi_def_cfa_offset 56
 3327              	@ armwave.c:443:     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3328              		.loc 1 443 5 view .LVU913
 3329 0e84 64009FE5 		ldr	r0, .L234	@,
 3330              	.LVL259:
 3331              		.loc 1 443 5 view .LVU914
 3332 0e88 FEFFFFEB 		bl	puts		@
 3333              	.LVL260:
 444:armwave.c     **** 
 445:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3334              		.loc 1 445 5 is_stmt 1 view .LVU915
 3335              	@ armwave.c:445:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3336              		.loc 1 445 11 is_stmt 0 view .LVU916
 3337 0e8c 0400A0E1 		mov	r0, r4	@, buf_obj
 3338 0e90 04108DE2 		add	r1, sp, #4	@ tmp128,,
 3339 0e94 0120A0E3 		mov	r2, #1	@,
 3340 0e98 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3341              	.LVL261:
 446:armwave.c     **** 
 447:armwave.c     ****     if(ret != 0) {
 3342              		.loc 1 447 5 is_stmt 1 view .LVU917
 3343              	@ armwave.c:447:     if(ret != 0) {
 3344              		.loc 1 447 7 is_stmt 0 view .LVU918
 3345 0e9c 000050E3 		cmp	r0, #0	@,
 3346 0ea0 0900001A 		bne	.L233		@,
 448:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 449:armwave.c     ****         Py_RETURN_FALSE;
 450:armwave.c     ****     }
 451:armwave.c     **** 
 452:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 453:armwave.c     **** 
 454:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3347              		.loc 1 454 5 is_stmt 1 view .LVU919
 3348 0ea4 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3349              	.LVL262:
 3350              		.loc 1 454 5 is_stmt 0 view .LVU920
 3351 0ea8 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3352              	.LVL263:
 455:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 3353              		.loc 1 455 5 is_stmt 1 view .LVU921
 3354 0eac 40009FE5 		ldr	r0, .L234+4	@,
 3355 0eb0 FEFFFFEB 		bl	puts		@
 3356              	.LVL264:
 456:armwave.c     **** 
 457:armwave.c     ****     PyBuffer_Release(&buffer);
 3357              		.loc 1 457 5 view .LVU922
 3358 0eb4 04008DE2 		add	r0, sp, #4	@ tmp129,,
 3359 0eb8 FEFFFFEB 		bl	PyBuffer_Release		@
 3360              	.LVL265:
 458:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 3361              		.loc 1 458 5 view .LVU923
 3362 0ebc 34009FE5 		ldr	r0, .L234+8	@,
 3363 0ec0 FEFFFFEB 		bl	puts		@
 3364              	.LVL266:
 3365              	@ armwave.c:459: }
 459:armwave.c     **** }
 3366              		.loc 1 459 1 is_stmt 0 view .LVU924
 3367 0ec4 30D08DE2 		add	sp, sp, #48	@,,
 3368              		.cfi_remember_state
 3369              		.cfi_def_cfa_offset 8
 3370              		@ sp needed	@
 3371 0ec8 1080BDE8 		pop	{r4, pc}	@
 3372              	.LVL267:
 3373              	.L233:
 3374              		.cfi_restore_state
 448:armwave.c     ****         Py_RETURN_FALSE;
 3375              		.loc 1 448 9 is_stmt 1 view .LVU925
 3376 0ecc 28009FE5 		ldr	r0, .L234+12	@,
 3377              	.LVL268:
 448:armwave.c     ****         Py_RETURN_FALSE;
 3378              		.loc 1 448 9 is_stmt 0 view .LVU926
 3379 0ed0 FEFFFFEB 		bl	puts		@
 3380              	.LVL269:
 449:armwave.c     ****     }
 3381              		.loc 1 449 9 is_stmt 1 view .LVU927
 3382              	.LBB43:
 3383              	.LBI43:
 3384              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3385              		.loc 2 456 20 view .LVU928
 3386              	.LBB44:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3387              		.loc 2 458 21 view .LVU929
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3388              		.loc 2 459 5 view .LVU930
 3389              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3390              		.loc 2 459 18 is_stmt 0 view .LVU931
 3391 0ed4 24309FE5 		ldr	r3, .L234+16	@ tmp119,
 3392              	.LBE44:
 3393              	.LBE43:
 3394              	@ armwave.c:449:         Py_RETURN_FALSE;
 449:armwave.c     ****     }
 3395              		.loc 1 449 9 view .LVU932
 3396 0ed8 0300A0E1 		mov	r0, r3	@ <retval>, tmp119
 3397              	.LBB46:
 3398              	.LBB45:
 3399              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3400              		.loc 2 459 18 view .LVU933
 3401 0edc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct], MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3402 0ee0 012082E2 		add	r2, r2, #1	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3403 0ee4 002083E5 		str	r2, [r3]	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3404              	.LBE45:
 3405              	.LBE46:
 3406              	@ armwave.c:459: }
 3407              		.loc 1 459 1 view .LVU934
 3408 0ee8 30D08DE2 		add	sp, sp, #48	@,,
 3409              		.cfi_def_cfa_offset 8
 3410              		@ sp needed	@
 3411 0eec 1080BDE8 		pop	{r4, pc}	@
 3412              	.LVL270:
 3413              	.L235:
 3414              		.loc 1 459 1 view .LVU935
 3415              		.align	2
 3416              	.L234:
 3417 0ef0 10020000 		.word	.LC19
 3418 0ef4 90020000 		.word	.LC21
 3419 0ef8 C4020000 		.word	.LC22
 3420 0efc 3C020000 		.word	.LC20
 3421 0f00 00000000 		.word	_Py_FalseStruct
 3422              		.cfi_endproc
 3423              	.LFE74:
 3425              		.align	2
 3426              		.global	armwave_test_create_am_sine
 3427              		.syntax unified
 3428              		.arm
 3429              		.fpu vfp
 3431              	armwave_test_create_am_sine:
 3432              	.LVL271:
 3433              	.LFB75:
 460:armwave.c     **** 
 461:armwave.c     **** /*
 462:armwave.c     ****  * Make a test AM waveform for render tests.
 463:armwave.c     ****  *
 464:armwave.c     ****  * @param   mod                 modulation depth
 465:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 466:armwave.c     ****  */
 467:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 468:armwave.c     **** {
 3434              		.loc 1 468 1 is_stmt 1 view -0
 3435              		.cfi_startproc
 3436              		@ args = 0, pretend = 0, frame = 8
 3437              		@ frame_needed = 0, uses_anonymous_args = 0
 469:armwave.c     ****     float v, noise, xnoise, mod_val;
 3438              		.loc 1 469 5 view .LVU937
 470:armwave.c     ****     int w, x;
 3439              		.loc 1 470 5 view .LVU938
 471:armwave.c     **** 
 472:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3440              		.loc 1 472 5 view .LVU939
 3441              	@ armwave.c:468: {
 468:armwave.c     ****     float v, noise, xnoise, mod_val;
 3442              		.loc 1 468 1 is_stmt 0 view .LVU940
 3443 0f04 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 3444              		.cfi_def_cfa_offset 20
 3445              		.cfi_offset 4, -20
 3446              		.cfi_offset 5, -16
 3447              		.cfi_offset 6, -12
 3448              		.cfi_offset 7, -8
 3449              		.cfi_offset 14, -4
 3450 0f08 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3451              		.cfi_def_cfa_offset 76
 3452              		.cfi_offset 80, -76
 3453              		.cfi_offset 81, -72
 3454              		.cfi_offset 82, -68
 3455              		.cfi_offset 83, -64
 3456              		.cfi_offset 84, -60
 3457              		.cfi_offset 85, -56
 3458              		.cfi_offset 86, -52
 3459              		.cfi_offset 87, -48
 3460              		.cfi_offset 88, -44
 3461              		.cfi_offset 89, -40
 3462              		.cfi_offset 90, -36
 3463              		.cfi_offset 91, -32
 3464              		.cfi_offset 92, -28
 3465              		.cfi_offset 93, -24
 3466              	@ armwave.c:472:     for(w = 0; w < g_armwave_state.waves; w++) {
 3467              		.loc 1 472 35 view .LVU941
 3468 0f0c 68519FE5 		ldr	r5, .L261+32	@ tmp211,
 3469 0f10 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_77, g_armwave_state.waves
 3470              	@ armwave.c:468: {
 468:armwave.c     ****     float v, noise, xnoise, mod_val;
 3471              		.loc 1 468 1 view .LVU942
 3472 0f14 0CD04DE2 		sub	sp, sp, #12	@,,
 3473              		.cfi_def_cfa_offset 88
 3474              	@ armwave.c:472:     for(w = 0; w < g_armwave_state.waves; w++) {
 3475              		.loc 1 472 5 view .LVU943
 3476 0f18 000052E3 		cmp	r2, #0	@ prephitmp_77,
 3477 0f1c 4B00000A 		beq	.L236		@,
 3478 0f20 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3479 0f24 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3480              	@ armwave.c:473:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 473:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3481              		.loc 1 473 37 view .LVU944
 3482 0f28 4BDADFED 		vldr.32	s27, .L261	@ tmp164,
 3483              	@ armwave.c:473:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3484              		.loc 1 473 17 view .LVU945
 3485 0f2c 4BDA9FED 		vldr.32	s26, .L261+4	@ tmp166,
 3486              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 474:armwave.c     ****         //mod = 1.0f;
 475:armwave.c     **** 
 476:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 477:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 478:armwave.c     ****             noise *= noise;
 479:armwave.c     ****             noise *= noise;
 480:armwave.c     ****             noise *= noise;
 481:armwave.c     **** 
 482:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 483:armwave.c     ****                 noise = -noise;
 484:armwave.c     **** 
 485:armwave.c     ****             noise += 1.0f;
 486:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 487:armwave.c     **** 
 488:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3487              		.loc 1 488 41 view .LVU946
 3488 0f30 4B8A9FED 		vldr.32	s16, .L261+8	@ tmp216,
 3489              	@ armwave.c:490:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 489:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 490:armwave.c     ****             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 + (v * 127), 0), 
 3490              		.loc 1 490 69 view .LVU947
 3491 0f34 4BCA9FED 		vldr.32	s24, .L261+12	@ tmp217,
 3492 0f38 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_82, g_armwave_state.wave_length
 3493 0f3c 3C719FE5 		ldr	r7, .L261+36	@ tmp215,
 3494              	@ armwave.c:472:     for(w = 0; w < g_armwave_state.waves; w++) {
 472:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3495              		.loc 1 472 11 view .LVU948
 3496 0f40 0060A0E3 		mov	r6, #0	@ w,
 3497              	.LVL272:
 3498              	.L244:
 473:armwave.c     ****         //mod = 1.0f;
 3499              		.loc 1 473 9 is_stmt 1 view .LVU949
 3500              	@ armwave.c:473:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 473:armwave.c     ****         //mod = 1.0f;
 3501              		.loc 1 473 28 is_stmt 0 view .LVU950
 3502 0f44 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3503              	@ armwave.c:473:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 473:armwave.c     ****         //mod = 1.0f;
 3504              		.loc 1 473 17 view .LVU951
 3505 0f48 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp166
 3506              	@ armwave.c:476:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 476:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3507              		.loc 1 476 9 view .LVU952
 3508 0f4c 000053E3 		cmp	r3, #0	@ prephitmp_82,
 3509              	@ armwave.c:473:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 473:armwave.c     ****         //mod = 1.0f;
 3510              		.loc 1 473 28 view .LVU953
 3511 0f50 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp162, w
 3512              	@ armwave.c:473:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 473:armwave.c     ****         //mod = 1.0f;
 3513              		.loc 1 473 37 view .LVU954
 3514 0f54 AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp163, tmp162, tmp164
 3515              	@ armwave.c:473:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 473:armwave.c     ****         //mod = 1.0f;
 3516              		.loc 1 473 17 view .LVU955
 3517 0f58 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp163, mod
 3518              	.LVL273:
 476:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3519              		.loc 1 476 9 is_stmt 1 view .LVU956
 476:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3520              		.loc 1 476 9 is_stmt 0 view .LVU957
 3521 0f5c 3800000A 		beq	.L238		@,
 3522 0f60 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp213, mod_val
 3523              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3524              		.loc 1 488 29 view .LVU958
 3525 0f64 40BA9FED 		vldr.32	s22, .L261+16	@ tmp178,
 3526              	@ armwave.c:486:             xnoise = (rand() & 0xffff) / 6553500.0f;
 486:armwave.c     **** 
 3527              		.loc 1 486 20 view .LVU959
 3528 0f68 40AADFED 		vldr.32	s21, .L261+20	@ tmp184,
 3529              	@ armwave.c:490:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3530              		.loc 1 490 71 view .LVU960
 3531 0f6c 40AA9FED 		vldr.32	s20, .L261+24	@ tmp195,
 3532 0f70 408ADFED 		vldr.32	s17, .L261+28	@ tmp196,
 3533              	@ armwave.c:476:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 476:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3534              		.loc 1 476 15 view .LVU961
 3535 0f74 0040A0E3 		mov	r4, #0	@ x,
 3536              	.LVL274:
 3537              	.L243:
 477:armwave.c     ****             noise *= noise;
 3538              		.loc 1 477 13 is_stmt 1 view .LVU962
 3539              	@ armwave.c:477:             noise  = ((rand() & 0xffff) * noise_fraction);
 477:armwave.c     ****             noise *= noise;
 3540              		.loc 1 477 24 is_stmt 0 view .LVU963
 3541 0f78 FEFFFFEB 		bl	rand		@
 3542              	.LVL275:
 3543              	@ armwave.c:477:             noise  = ((rand() & 0xffff) * noise_fraction);
 477:armwave.c     ****             noise *= noise;
 3544              		.loc 1 477 31 view .LVU964
 3545 0f7c 7000FFE6 		uxth	r0, r0	@ tmp167,
 3546              	@ armwave.c:477:             noise  = ((rand() & 0xffff) * noise_fraction);
 477:armwave.c     ****             noise *= noise;
 3547              		.loc 1 477 41 view .LVU965
 3548 0f80 900A07EE 		vmov	s15, r0	@ int	@ tmp167, tmp167
 3549 0f84 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp169, tmp167
 3550              	@ armwave.c:477:             noise  = ((rand() & 0xffff) * noise_fraction);
 477:armwave.c     ****             noise *= noise;
 3551              		.loc 1 477 20 view .LVU966
 3552 0f88 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp169, noise_fraction
 3553              	.LVL276:
 478:armwave.c     ****             noise *= noise;
 3554              		.loc 1 478 13 is_stmt 1 view .LVU967
 3555              	@ armwave.c:478:             noise *= noise;
 478:armwave.c     ****             noise *= noise;
 3556              		.loc 1 478 19 is_stmt 0 view .LVU968
 3557 0f8c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3558              	.LVL277:
 479:armwave.c     ****             noise *= noise;
 3559              		.loc 1 479 13 is_stmt 1 view .LVU969
 3560              	@ armwave.c:479:             noise *= noise;
 479:armwave.c     ****             noise *= noise;
 3561              		.loc 1 479 19 is_stmt 0 view .LVU970
 3562 0f90 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3563              	.LVL278:
 480:armwave.c     **** 
 3564              		.loc 1 480 13 is_stmt 1 view .LVU971
 3565              	@ armwave.c:480:             noise *= noise;
 480:armwave.c     **** 
 3566              		.loc 1 480 19 is_stmt 0 view .LVU972
 3567 0f94 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3568              	.LVL279:
 482:armwave.c     ****                 noise = -noise;
 3569              		.loc 1 482 13 is_stmt 1 view .LVU973
 3570              	@ armwave.c:482:             if((rand() & 0xffff) > 0x7fff)
 482:armwave.c     ****                 noise = -noise;
 3571              		.loc 1 482 17 is_stmt 0 view .LVU974
 3572 0f98 FEFFFFEB 		bl	rand		@
 3573              	.LVL280:
 483:armwave.c     **** 
 3574              		.loc 1 483 17 is_stmt 1 view .LVU975
 3575              	@ armwave.c:482:             if((rand() & 0xffff) > 0x7fff)
 482:armwave.c     ****                 noise = -noise;
 3576              		.loc 1 482 15 is_stmt 0 view .LVU976
 3577 0f9c 020910E3 		tst	r0, #32768	@,
 3578              	@ armwave.c:483:                 noise = -noise;
 483:armwave.c     **** 
 3579              		.loc 1 483 23 view .LVU977
 3580 0fa0 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3581              	.LVL281:
 485:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3582              		.loc 1 485 13 is_stmt 1 view .LVU978
 486:armwave.c     **** 
 3583              		.loc 1 486 13 view .LVU979
 3584              	@ armwave.c:486:             xnoise = (rand() & 0xffff) / 6553500.0f;
 486:armwave.c     **** 
 3585              		.loc 1 486 23 is_stmt 0 view .LVU980
 3586 0fa4 FEFFFFEB 		bl	rand		@
 3587              	.LVL282:
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3588              		.loc 1 488 13 is_stmt 1 view .LVU981
 3589              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3590              		.loc 1 488 41 is_stmt 0 view .LVU982
 3591 0fa8 0E7A95ED 		vldr.32	s14, [r5, #56]	@ int	@ tmp225, g_armwave_state.wave_length
 3592              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3593              		.loc 1 488 29 view .LVU983
 3594 0fac 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3595              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3596              		.loc 1 488 41 view .LVU984
 3597 0fb0 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp172, tmp225
 3598              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3599              		.loc 1 488 29 view .LVU985
 3600 0fb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp176, x
 3601              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3602              		.loc 1 488 41 view .LVU986
 3603 0fb8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp174, tmp216, tmp172
 3604              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3605              		.loc 1 488 29 view .LVU987
 3606 0fbc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp177, tmp176, tmp178
 3607              	@ armwave.c:486:             xnoise = (rand() & 0xffff) / 6553500.0f;
 486:armwave.c     **** 
 3608              		.loc 1 486 30 view .LVU988
 3609 0fc0 7000FFE6 		uxth	r0, r0	@ tmp180,
 3610              	.LVL283:
 3611              	@ armwave.c:486:             xnoise = (rand() & 0xffff) / 6553500.0f;
 486:armwave.c     **** 
 3612              		.loc 1 486 40 view .LVU989
 3613 0fc4 100A07EE 		vmov	s14, r0	@ int	@ tmp180, tmp180
 3614 0fc8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp182, tmp180
 3615              	@ armwave.c:486:             xnoise = (rand() & 0xffff) / 6553500.0f;
 486:armwave.c     **** 
 3616              		.loc 1 486 20 view .LVU990
 3617 0fcc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp182, tmp184
 3618              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3619              		.loc 1 488 73 view .LVU991
 3620 0fd0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp185, tmp174, tmp177
 3621              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3622              		.loc 1 488 18 view .LVU992
 3623 0fd4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp185
 3624 0fd8 FEFFFFEB 		bl	sin		@
 3625              	.LVL284:
 3626              		.loc 1 490 13 is_stmt 1 view .LVU993
 3627              	@ armwave.c:485:             noise += 1.0f;
 485:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3628              		.loc 1 485 19 is_stmt 0 view .LVU994
 3629 0fdc 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp216
 3630              	@ armwave.c:490:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3631              		.loc 1 490 69 view .LVU995
 3632 0fe0 0020A0E3 		mov	r2, #0	@ iftmp.23_39,
 3633              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3634              		.loc 1 488 94 view .LVU996
 3635 0fe4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp191, noise
 3636              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3637              		.loc 1 488 83 view .LVU997
 3638 0fe8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp188, tmp213,
 3639              	.LVL285:
 3640              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3641              		.loc 1 488 94 view .LVU998
 3642 0fec 077B20EE 		vmul.f64	d7, d0, d7	@ tmp192, tmp188, tmp191
 3643              	@ armwave.c:488:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 488:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3644              		.loc 1 488 15 view .LVU999
 3645 0ff0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp192
 3646              	@ armwave.c:490:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3647              		.loc 1 490 71 view .LVU1000
 3648 0ff4 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp196
 3649 0ff8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp195
 3650 0ffc C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3651 1000 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3652 1004 050000DA 		ble	.L240		@,
 3653              	@ armwave.c:490:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3654              		.loc 1 490 69 discriminator 1 view .LVU1001
 3655 1008 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp217
 3656 100c FF20A0E3 		mov	r2, #255	@ iftmp.23_39,
 3657 1010 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3658 1014 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp200, _26
 3659 1018 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp200, %sfp
 3660 101c 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_39, %sfp
 3661              	.L240:
 3662              	@ armwave.c:490:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3663              		.loc 1 490 37 discriminator 12 view .LVU1002
 3664 1020 203095E5 		ldr	r3, [r5, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3665              	@ armwave.c:490:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3666              		.loc 1 490 69 discriminator 12 view .LVU1003
 3667 1024 001097E5 		ldr	r1, [r7]	@ test_wave_buffer, test_wave_buffer
 3668 1028 931623E0 		mla	r3, r3, r6, r1	@ tmp206, g_armwave_state.wave_stride, w, test_wave_buffer
 3669 102c 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.23_39, *_31
 3670              	@ armwave.c:476:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 476:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3671              		.loc 1 476 39 discriminator 12 view .LVU1004
 3672 1030 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_82, g_armwave_state.wave_length
 3673              	@ armwave.c:476:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 476:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3674              		.loc 1 476 54 discriminator 12 view .LVU1005
 3675 1034 014084E2 		add	r4, r4, #1	@ x, x,
 3676              	.LVL286:
 3677              	@ armwave.c:476:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 476:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3678              		.loc 1 476 9 discriminator 12 view .LVU1006
 3679 1038 040053E1 		cmp	r3, r4	@ prephitmp_82, x
 3680 103c CDFFFF8A 		bhi	.L243		@,
 3681 1040 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_77, g_armwave_state.waves
 3682              	.LVL287:
 3683              	.L238:
 3684              	@ armwave.c:472:     for(w = 0; w < g_armwave_state.waves; w++) {
 472:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3685              		.loc 1 472 44 discriminator 2 view .LVU1007
 3686 1044 016086E2 		add	r6, r6, #1	@ w, w,
 3687              	.LVL288:
 3688              	@ armwave.c:472:     for(w = 0; w < g_armwave_state.waves; w++) {
 472:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3689              		.loc 1 472 5 discriminator 2 view .LVU1008
 3690 1048 020056E1 		cmp	r6, r2	@ w, prephitmp_77
 3691 104c BCFFFF3A 		bcc	.L244		@,
 3692              	.LVL289:
 3693              	.L236:
 3694              	@ armwave.c:493: }
 491:armwave.c     ****         }
 492:armwave.c     ****     }
 493:armwave.c     **** }
 3695              		.loc 1 493 1 view .LVU1009
 3696 1050 0CD08DE2 		add	sp, sp, #12	@,,
 3697              		.cfi_def_cfa_offset 76
 3698              		@ sp needed	@
 3699 1054 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3700              		.cfi_restore 92
 3701              		.cfi_restore 93
 3702              		.cfi_restore 90
 3703              		.cfi_restore 91
 3704              		.cfi_restore 88
 3705              		.cfi_restore 89
 3706              		.cfi_restore 86
 3707              		.cfi_restore 87
 3708              		.cfi_restore 84
 3709              		.cfi_restore 85
 3710              		.cfi_restore 82
 3711              		.cfi_restore 83
 3712              		.cfi_restore 80
 3713              		.cfi_restore 81
 3714              		.cfi_def_cfa_offset 20
 3715 1058 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 3716              	.L262:
 3717              		.align	2
 3718              	.L261:
 3719 105c 0000803C 		.word	1015021568
 3720 1060 0000003F 		.word	1056964608
 3721 1064 0000803F 		.word	1065353216
 3722 1068 00007F43 		.word	1132396544
 3723 106c C3F5C840 		.word	1086911939
 3724 1070 38FFC74A 		.word	1254620984
 3725 1074 0000FE42 		.word	1123942400
 3726 1078 00000043 		.word	1124073472
 3727 107c 00000000 		.word	g_armwave_state
 3728 1080 00000000 		.word	test_wave_buffer
 3729              		.cfi_endproc
 3730              	.LFE75:
 3732              		.align	2
 3733              		.global	armwave_test_create_square
 3734              		.syntax unified
 3735              		.arm
 3736              		.fpu vfp
 3738              	armwave_test_create_square:
 3739              	.LVL290:
 3740              	.LFB76:
 494:armwave.c     **** 
 495:armwave.c     **** /*
 496:armwave.c     ****  * Make a test square waveform.
 497:armwave.c     ****  *
 498:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 499:armwave.c     ****  */
 500:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 501:armwave.c     **** {
 3741              		.loc 1 501 1 is_stmt 1 view -0
 3742              		.cfi_startproc
 3743              		@ args = 0, pretend = 0, frame = 8
 3744              		@ frame_needed = 0, uses_anonymous_args = 0
 502:armwave.c     ****     uint8_t v;
 3745              		.loc 1 502 5 view .LVU1011
 503:armwave.c     ****     float noise, xnoise;
 3746              		.loc 1 503 5 view .LVU1012
 504:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 3747              		.loc 1 504 5 view .LVU1013
 505:armwave.c     ****     int w, x;
 3748              		.loc 1 505 5 view .LVU1014
 506:armwave.c     **** 
 507:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3749              		.loc 1 507 5 view .LVU1015
 3750              	@ armwave.c:501: {
 501:armwave.c     ****     uint8_t v;
 3751              		.loc 1 501 1 is_stmt 0 view .LVU1016
 3752 1084 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 3753              		.cfi_def_cfa_offset 20
 3754              		.cfi_offset 4, -20
 3755              		.cfi_offset 5, -16
 3756              		.cfi_offset 6, -12
 3757              		.cfi_offset 7, -8
 3758              		.cfi_offset 14, -4
 3759 1088 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 3760              		.cfi_def_cfa_offset 60
 3761              		.cfi_offset 80, -60
 3762              		.cfi_offset 81, -56
 3763              		.cfi_offset 82, -52
 3764              		.cfi_offset 83, -48
 3765              		.cfi_offset 84, -44
 3766              		.cfi_offset 85, -40
 3767              		.cfi_offset 86, -36
 3768              		.cfi_offset 87, -32
 3769              		.cfi_offset 88, -28
 3770              		.cfi_offset 89, -24
 3771              	@ armwave.c:507:     for(w = 0; w < g_armwave_state.waves; w++) {
 3772              		.loc 1 507 35 view .LVU1017
 3773 108c 58519FE5 		ldr	r5, .L291+32	@ tmp179,
 3774 1090 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_33, g_armwave_state.waves
 3775              	@ armwave.c:501: {
 501:armwave.c     ****     uint8_t v;
 3776              		.loc 1 501 1 view .LVU1018
 3777 1094 0CD04DE2 		sub	sp, sp, #12	@,,
 3778              		.cfi_def_cfa_offset 72
 3779              	@ armwave.c:507:     for(w = 0; w < g_armwave_state.waves; w++) {
 3780              		.loc 1 507 5 view .LVU1019
 3781 1098 000052E3 		cmp	r2, #0	@ prephitmp_33,
 3782 109c 4700000A 		beq	.L263		@,
 3783 10a0 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 3784              	@ armwave.c:504:     float level = 0.8f, new_level = 0.8f;
 504:armwave.c     ****     int w, x;
 3785              		.loc 1 504 11 view .LVU1020
 3786 10a4 48CA9FED 		vldr.32	s24, .L291	@ level,
 3787              	@ armwave.c:519:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 508:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 509:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 510:armwave.c     ****             noise *= noise;
 511:armwave.c     ****             noise *= noise;
 512:armwave.c     ****             noise *= noise;
 513:armwave.c     **** 
 514:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 515:armwave.c     ****                 noise = -noise;
 516:armwave.c     **** 
 517:armwave.c     ****             //noise += 1.0f;
 518:armwave.c     **** 
 519:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 3788              		.loc 1 519 49 view .LVU1021
 3789 10a8 48AA9FED 		vldr.32	s20, .L291+4	@ tmp188,
 3790              	@ armwave.c:524:                 new_level = 0.2f;
 520:armwave.c     ****                 new_level = 0.2f;
 521:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 522:armwave.c     ****                 new_level = 0.8f;
 523:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 524:armwave.c     ****                 new_level = 0.2f;
 3791              		.loc 1 524 27 view .LVU1022
 3792 10ac 48AADFED 		vldr.32	s21, .L291+8	@ new_level,
 3793              	@ armwave.c:523:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 523:armwave.c     ****                 new_level = 0.2f;
 3794              		.loc 1 523 56 view .LVU1023
 3795 10b0 488ADFED 		vldr.32	s17, .L291+12	@ tmp190,
 3796 10b4 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_70, g_armwave_state.wave_length
 3797 10b8 30719FE5 		ldr	r7, .L291+36	@ tmp187,
 3798              	@ armwave.c:507:     for(w = 0; w < g_armwave_state.waves; w++) {
 507:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3799              		.loc 1 507 11 view .LVU1024
 3800 10bc 0060A0E3 		mov	r6, #0	@ w,
 3801              	.LVL291:
 3802              	.L265:
 3803              	@ armwave.c:508:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 508:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3804              		.loc 1 508 9 view .LVU1025
 3805 10c0 000053E3 		cmp	r3, #0	@ prephitmp_70,
 3806 10c4 3A00000A 		beq	.L272		@,
 3807              	@ armwave.c:521:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 521:armwave.c     ****                 new_level = 0.8f;
 3808              		.loc 1 521 56 view .LVU1026
 3809 10c8 43BA9FED 		vldr.32	s22, .L291+16	@ tmp184,
 3810              	@ armwave.c:522:                 new_level = 0.8f;
 522:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3811              		.loc 1 522 27 view .LVU1027
 3812 10cc 3EBADFED 		vldr.32	s23, .L291	@ new_level,
 3813              	@ armwave.c:529:             level = ((level * 3) + new_level) * 0.25f;
 525:armwave.c     ****             } else {
 526:armwave.c     ****                 new_level = 0.8f;
 527:armwave.c     ****             }
 528:armwave.c     **** 
 529:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 3814              		.loc 1 529 29 view .LVU1028
 3815 10d0 429A9FED 		vldr.32	s18, .L291+20	@ tmp161,
 3816              	@ armwave.c:508:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 508:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3817              		.loc 1 508 15 view .LVU1029
 3818 10d4 0040A0E3 		mov	r4, #0	@ x,
 3819              	.LVL292:
 3820              	.L271:
 509:armwave.c     ****             noise *= noise;
 3821              		.loc 1 509 13 is_stmt 1 view .LVU1030
 3822              	@ armwave.c:509:             noise  = ((rand() & 0xffff) * noise_fraction);
 509:armwave.c     ****             noise *= noise;
 3823              		.loc 1 509 24 is_stmt 0 view .LVU1031
 3824 10d8 FEFFFFEB 		bl	rand		@
 3825              	.LVL293:
 3826              	@ armwave.c:509:             noise  = ((rand() & 0xffff) * noise_fraction);
 509:armwave.c     ****             noise *= noise;
 3827              		.loc 1 509 31 view .LVU1032
 3828 10dc 7000FFE6 		uxth	r0, r0	@ tmp148,
 3829              	@ armwave.c:509:             noise  = ((rand() & 0xffff) * noise_fraction);
 509:armwave.c     ****             noise *= noise;
 3830              		.loc 1 509 41 view .LVU1033
 3831 10e0 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 3832 10e4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 3833              	@ armwave.c:509:             noise  = ((rand() & 0xffff) * noise_fraction);
 509:armwave.c     ****             noise *= noise;
 3834              		.loc 1 509 20 view .LVU1034
 3835 10e8 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 3836              	.LVL294:
 510:armwave.c     ****             noise *= noise;
 3837              		.loc 1 510 13 is_stmt 1 view .LVU1035
 3838              	@ armwave.c:510:             noise *= noise;
 510:armwave.c     ****             noise *= noise;
 3839              		.loc 1 510 19 is_stmt 0 view .LVU1036
 3840 10ec A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3841              	.LVL295:
 511:armwave.c     ****             noise *= noise;
 3842              		.loc 1 511 13 is_stmt 1 view .LVU1037
 3843              	@ armwave.c:511:             noise *= noise;
 511:armwave.c     ****             noise *= noise;
 3844              		.loc 1 511 19 is_stmt 0 view .LVU1038
 3845 10f0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3846              	.LVL296:
 512:armwave.c     **** 
 3847              		.loc 1 512 13 is_stmt 1 view .LVU1039
 3848              	@ armwave.c:512:             noise *= noise;
 512:armwave.c     **** 
 3849              		.loc 1 512 19 is_stmt 0 view .LVU1040
 3850 10f4 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 3851              	.LVL297:
 514:armwave.c     ****                 noise = -noise;
 3852              		.loc 1 514 13 is_stmt 1 view .LVU1041
 3853              	@ armwave.c:514:             if((rand() & 0xff) > 0x7f)
 514:armwave.c     ****                 noise = -noise;
 3854              		.loc 1 514 17 is_stmt 0 view .LVU1042
 3855 10f8 FEFFFFEB 		bl	rand		@
 3856              	.LVL298:
 3857              	@ armwave.c:519:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 519:armwave.c     ****                 new_level = 0.2f;
 3858              		.loc 1 519 18 view .LVU1043
 3859 10fc 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3860 1100 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 3861              	@ armwave.c:519:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 519:armwave.c     ****                 new_level = 0.2f;
 3862              		.loc 1 519 49 view .LVU1044
 3863 1104 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp196, g_armwave_state.wave_length
 3864 1108 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp196
 3865 110c 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp188
 3866              	@ armwave.c:519:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 519:armwave.c     ****                 new_level = 0.2f;
 3867              		.loc 1 519 15 view .LVU1045
 3868 1110 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 3869              	@ armwave.c:514:             if((rand() & 0xff) > 0x7f)
 514:armwave.c     ****                 noise = -noise;
 3870              		.loc 1 514 15 view .LVU1046
 3871 1114 800010E3 		tst	r0, #128	@,
 515:armwave.c     **** 
 3872              		.loc 1 515 17 is_stmt 1 view .LVU1047
 3873              	@ armwave.c:515:                 noise = -noise;
 515:armwave.c     **** 
 3874              		.loc 1 515 23 is_stmt 0 view .LVU1048
 3875 1118 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 3876              	.LVL299:
 519:armwave.c     ****                 new_level = 0.2f;
 3877              		.loc 1 519 13 is_stmt 1 view .LVU1049
 3878              	@ armwave.c:519:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 519:armwave.c     ****                 new_level = 0.2f;
 3879              		.loc 1 519 15 is_stmt 0 view .LVU1050
 3880 111c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3881              	@ armwave.c:524:                 new_level = 0.2f;
 524:armwave.c     ****             } else {
 3882              		.loc 1 524 27 view .LVU1051
 3883 1120 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 3884              	@ armwave.c:519:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 519:armwave.c     ****                 new_level = 0.2f;
 3885              		.loc 1 519 15 view .LVU1052
 3886 1124 090000CA 		bgt	.L267		@,
 521:armwave.c     ****                 new_level = 0.8f;
 3887              		.loc 1 521 20 is_stmt 1 view .LVU1053
 3888              	@ armwave.c:521:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 521:armwave.c     ****                 new_level = 0.8f;
 3889              		.loc 1 521 56 is_stmt 0 view .LVU1054
 3890 1128 8B6A67EE 		vmul.f32	s13, s15, s22	@ tmp156, _8, tmp184
 3891              	@ armwave.c:521:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 521:armwave.c     ****                 new_level = 0.8f;
 3892              		.loc 1 521 22 view .LVU1055
 3893 112c E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 3894 1130 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3895              	@ armwave.c:522:                 new_level = 0.8f;
 522:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3896              		.loc 1 522 27 view .LVU1056
 3897 1134 6B7AF0CE 		vmovgt.f32	s15, s23	@ new_level, new_level
 3898              	@ armwave.c:521:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 521:armwave.c     ****                 new_level = 0.8f;
 3899              		.loc 1 521 22 view .LVU1057
 3900 1138 040000CA 		bgt	.L267		@,
 523:armwave.c     ****                 new_level = 0.2f;
 3901              		.loc 1 523 20 is_stmt 1 view .LVU1058
 3902              	@ armwave.c:523:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 523:armwave.c     ****                 new_level = 0.2f;
 3903              		.loc 1 523 56 is_stmt 0 view .LVU1059
 3904 113c A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp190
 3905              	@ armwave.c:522:                 new_level = 0.8f;
 522:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3906              		.loc 1 522 27 view .LVU1060
 3907 1140 E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 3908 1144 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3909 1148 6B7AF0DE 		vmovle.f32	s15, s23	@, new_level, new_level
 3910 114c 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 3911              	.L267:
 3912              	.LVL300:
 3913              		.loc 1 529 13 is_stmt 1 view .LVU1061
 3914              	@ armwave.c:529:             level = ((level * 3) + new_level) * 0.25f;
 3915              		.loc 1 529 34 is_stmt 0 view .LVU1062
 3916 1150 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 3917              	.LVL301:
 3918              	@ armwave.c:529:             level = ((level * 3) + new_level) * 0.25f;
 3919              		.loc 1 529 19 view .LVU1063
 3920 1154 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp190
 3921              	.LVL302:
 530:armwave.c     **** 
 531:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3922              		.loc 1 531 13 is_stmt 1 view .LVU1064
 3923              	@ armwave.c:531:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3924              		.loc 1 531 27 is_stmt 0 view .LVU1065
 3925 1158 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 3926 115c C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 3927 1160 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3928              	@ armwave.c:531:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3929              		.loc 1 531 17 view .LVU1066
 3930 1164 0020A0D3 		movle	r2, #0	@ iftmp.31_32,
 3931              	@ armwave.c:531:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3932              		.loc 1 531 27 view .LVU1067
 3933 1168 080000DA 		ble	.L268		@,
 3934              	@ armwave.c:531:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3935              		.loc 1 531 17 discriminator 1 view .LVU1068
 3936 116c 1C7A9FED 		vldr.32	s14, .L291+24	@ tmp164,
 3937 1170 C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 3938 1174 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3939              	@ armwave.c:531:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3940              		.loc 1 531 60 discriminator 1 view .LVU1069
 3941 1178 1A7A9F4D 		vldrmi.32	s14, .L291+28	@ tmp166,
 3942              	@ armwave.c:531:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3943              		.loc 1 531 17 discriminator 1 view .LVU1070
 3944 117c FF20A053 		movpl	r2, #255	@ iftmp.31_32,
 3945              	@ armwave.c:531:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3946              		.loc 1 531 60 discriminator 1 view .LVU1071
 3947 1180 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 3948              	@ armwave.c:531:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3949              		.loc 1 531 17 discriminator 1 view .LVU1072
 3950 1184 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 3951 1188 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 3952 118c 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.31_32, %sfp
 3953              	.L268:
 3954              	.LVL303:
 532:armwave.c     ****             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3955              		.loc 1 532 13 is_stmt 1 discriminator 12 view .LVU1073
 3956              	@ armwave.c:532:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3957              		.loc 1 532 37 is_stmt 0 discriminator 12 view .LVU1074
 3958 1190 203095E5 		ldr	r3, [r5, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3959              	@ armwave.c:532:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3960              		.loc 1 532 69 discriminator 12 view .LVU1075
 3961 1194 001097E5 		ldr	r1, [r7]	@ test_wave_buffer, test_wave_buffer
 3962 1198 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, test_wave_buffer
 3963 119c 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.31_32, *_21
 3964              	@ armwave.c:508:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 508:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3965              		.loc 1 508 39 discriminator 12 view .LVU1076
 3966 11a0 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_70, g_armwave_state.wave_length
 3967              	@ armwave.c:508:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 508:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3968              		.loc 1 508 54 discriminator 12 view .LVU1077
 3969 11a4 014084E2 		add	r4, r4, #1	@ x, x,
 3970              	.LVL304:
 3971              	@ armwave.c:508:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 508:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3972              		.loc 1 508 9 discriminator 12 view .LVU1078
 3973 11a8 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 3974 11ac C9FFFF8A 		bhi	.L271		@,
 3975 11b0 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_33, g_armwave_state.waves
 3976              	.LVL305:
 3977              	.L272:
 3978              	@ armwave.c:507:     for(w = 0; w < g_armwave_state.waves; w++) {
 507:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3979              		.loc 1 507 44 discriminator 2 view .LVU1079
 3980 11b4 016086E2 		add	r6, r6, #1	@ w, w,
 3981              	.LVL306:
 3982              	@ armwave.c:507:     for(w = 0; w < g_armwave_state.waves; w++) {
 507:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3983              		.loc 1 507 5 discriminator 2 view .LVU1080
 3984 11b8 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 3985 11bc BFFFFF3A 		bcc	.L265		@,
 3986              	.LVL307:
 3987              	.L263:
 3988              	@ armwave.c:535: }
 533:armwave.c     ****         }
 534:armwave.c     ****     }
 535:armwave.c     **** }
 3989              		.loc 1 535 1 view .LVU1081
 3990 11c0 0CD08DE2 		add	sp, sp, #12	@,,
 3991              		.cfi_def_cfa_offset 60
 3992              		@ sp needed	@
 3993 11c4 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 3994              		.cfi_restore 88
 3995              		.cfi_restore 89
 3996              		.cfi_restore 86
 3997              		.cfi_restore 87
 3998              		.cfi_restore 84
 3999              		.cfi_restore 85
 4000              		.cfi_restore 82
 4001              		.cfi_restore 83
 4002              		.cfi_restore 80
 4003              		.cfi_restore 81
 4004              		.cfi_def_cfa_offset 20
 4005 11c8 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 4006              	.L292:
 4007              		.align	2
 4008              	.L291:
 4009 11cc CDCC4C3F 		.word	1061997773
 4010 11d0 0000403F 		.word	1061158912
 4011 11d4 CDCC4C3E 		.word	1045220557
 4012 11d8 0000803E 		.word	1048576000
 4013 11dc 0000003F 		.word	1056964608
 4014 11e0 00004040 		.word	1077936128
 4015 11e4 0000803F 		.word	1065353216
 4016 11e8 00007F43 		.word	1132396544
 4017 11ec 00000000 		.word	g_armwave_state
 4018 11f0 00000000 		.word	test_wave_buffer
 4019              		.cfi_endproc
 4020              	.LFE76:
 4022              		.align	2
 4023              		.global	armwave_cleanup
 4024              		.syntax unified
 4025              		.arm
 4026              		.fpu vfp
 4028              	armwave_cleanup:
 4029              	.LFB77:
 536:armwave.c     **** 
 537:armwave.c     **** /*
 538:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 539:armwave.c     ****  */
 540:armwave.c     **** void armwave_cleanup()
 541:armwave.c     **** {
 4030              		.loc 1 541 1 is_stmt 1 view -0
 4031              		.cfi_startproc
 4032              		@ args = 0, pretend = 0, frame = 0
 4033              		@ frame_needed = 0, uses_anonymous_args = 0
 542:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4034              		.loc 1 542 5 view .LVU1083
 4035              	@ armwave.c:541: {
 541:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4036              		.loc 1 541 1 is_stmt 0 view .LVU1084
 4037 11f4 10402DE9 		push	{r4, lr}	@
 4038              		.cfi_def_cfa_offset 8
 4039              		.cfi_offset 4, -8
 4040              		.cfi_offset 14, -4
 4041              	@ armwave.c:542:     free(g_armwave_state.out_pixbuf);
 4042              		.loc 1 542 25 view .LVU1085
 4043 11f8 28409FE5 		ldr	r4, .L295	@ tmp113,
 4044              	@ armwave.c:542:     free(g_armwave_state.out_pixbuf);
 4045              		.loc 1 542 5 view .LVU1086
 4046 11fc 540094E5 		ldr	r0, [r4, #84]	@, g_armwave_state.out_pixbuf
 4047 1200 FEFFFFEB 		bl	free		@
 4048              	.LVL308:
 543:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4049              		.loc 1 543 5 is_stmt 1 view .LVU1087
 4050 1204 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4051 1208 FEFFFFEB 		bl	free		@
 4052              	.LVL309:
 544:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4053              		.loc 1 544 5 view .LVU1088
 4054 120c 700094E5 		ldr	r0, [r4, #112]	@, g_armwave_state.xcoord_to_xpixel
 4055 1210 FEFFFFEB 		bl	free		@
 4056              	.LVL310:
 545:armwave.c     **** 
 546:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4057              		.loc 1 546 5 view .LVU1089
 4058              	@ armwave.c:546:     g_armwave_state.out_pixbuf = NULL;
 4059              		.loc 1 546 32 is_stmt 0 view .LVU1090
 4060 1214 0030A0E3 		mov	r3, #0	@ tmp120,
 4061 1218 543084E5 		str	r3, [r4, #84]	@ tmp120, g_armwave_state.out_pixbuf
 547:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4062              		.loc 1 547 5 is_stmt 1 view .LVU1091
 4063              	@ armwave.c:547:     g_armwave_state.ch1_buffer = NULL;
 4064              		.loc 1 547 32 is_stmt 0 view .LVU1092
 4065 121c 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 548:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4066              		.loc 1 548 5 is_stmt 1 view .LVU1093
 4067              	@ armwave.c:548:     g_armwave_state.xcoord_to_xpixel = NULL;
 4068              		.loc 1 548 38 is_stmt 0 view .LVU1094
 4069 1220 703084E5 		str	r3, [r4, #112]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 4070              	@ armwave.c:549: }
 549:armwave.c     **** }
 4071              		.loc 1 549 1 view .LVU1095
 4072 1224 1080BDE8 		pop	{r4, pc}	@
 4073              	.L296:
 4074              		.align	2
 4075              	.L295:
 4076 1228 00000000 		.word	g_armwave_state
 4077              		.cfi_endproc
 4078              	.LFE77:
 4080              		.comm	gamma_table,256,4
 4081              		.comm	test_wave_buffer,4,4
 4082              		.comm	g_armwave_state,116,4
 4083              		.section	.rodata
 4084              		.align	2
 4085              		.set	.LANCHOR0,. + 0
 4088              	__PRETTY_FUNCTION__.17016:
 4089 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4089      6176655F 
 4089      66696C6C 
 4089      5F706978 
 4089      6275665F 
 4092              	__PRETTY_FUNCTION__.17047:
 4093 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4093      6176655F 
 4093      66696C6C 
 4093      5F706978 
 4093      6275665F 
 4094 0033 00       		.space	1
 4097              	__PRETTY_FUNCTION__.17069:
 4098 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4098      6176655F 
 4098      73657475 
 4098      705F7265 
 4098      6E646572 
 4099 0049 000000   		.space	3
 4102              	__PRETTY_FUNCTION__.17076:
 4103 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4103      6176655F 
 4103      7365745F 
 4103      77617665 
 4103      5F706F69 
 4104 0065 000000   		.space	3
 4107              	__PRETTY_FUNCTION__.17082:
 4108 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4108      6176655F 
 4108      7365745F 
 4108      77617665 
 4108      5F706F69 
 4109              		.section	.rodata.str1.4,"aMS",%progbits,1
 4110              		.align	2
 4111              	.LC0:
 4112 0000 76302E30 		.ascii	"v0.0.1\000"
 4112      2E3100
 4113 0007 00       		.space	1
 4114              	.LC1:
 4115 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4115      61766520 
 4115      76657273 
 4115      696F6E3A 
 4115      2025730A 
 4116 001d 000000   		.space	3
 4117              	.LC2:
 4118 0020 61726D77 		.ascii	"armwave.c\000"
 4118      6176652E 
 4118      6300
 4119 002a 0000     		.space	2
 4120              	.LC3:
 4121 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4121      62756666 
 4121      65722021 
 4121      3D204E55 
 4121      4C4C00
 4122 003f 00       		.space	1
 4123              	.LC4:
 4124 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4124      20653D25 
 4124      6420773D 
 4124      25642077 
 4124      733D2564 
 4125              	.LC5:
 4126 006c 73746172 		.ascii	"start_point < end_point\000"
 4126      745F706F 
 4126      696E7420 
 4126      3C20656E 
 4126      645F706F 
 4127              	.LC6:
 4128 0084 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 4128      65745F68 
 4128      65696768 
 4128      74203D3D 
 4128      20323536 
 4129 00b7 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4129      68656967 
 4129      6874203D 
 4129      3D203130 
 4129      3234207C 
 4130 00e3 00       		.space	1
 4131              	.LC7:
 4132 00e4 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4132      7566665F 
 4132      73697A65 
 4132      3D25640A 
 4132      00
 4133 00f5 000000   		.space	3
 4134              	.LC8:
 4135 00f8 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4135      6D776176 
 4135      655F7374 
 4135      6174652E 
 4135      6368315F 
 4136 011b 00       		.space	1
 4137              	.LC9:
 4138 011c 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4138      6D776176 
 4138      655F7374 
 4138      6174652E 
 4138      78636F6F 
 4139 0145 000000   		.space	3
 4140              	.LC10:
 4141 0148 77617665 		.ascii	"wave_buffer != NULL\000"
 4141      5F627566 
 4141      66657220 
 4141      213D204E 
 4141      554C4C00 
 4142              	.LC11:
 4143 015c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4143      5F627566 
 4143      6665725F 
 4143      70747220 
 4143      213D2030 
 4144 0171 000000   		.space	3
 4145              	.LC12:
 4146 0174 776200   		.ascii	"wb\000"
 4147 0177 00       		.space	1
 4148              	.LC13:
 4149 0178 50330A00 		.ascii	"P3\012\000"
 4150              	.LC14:
 4151 017c 25642025 		.ascii	"%d %d\012\000"
 4151      640A00
 4152 0183 00       		.space	1
 4153              	.LC15:
 4154 0184 3235350A 		.ascii	"255\012\000"
 4154      00
 4155 0189 000000   		.space	3
 4156              	.LC16:
 4157 018c 25336420 		.ascii	"%3d %3d %3d\012\000"
 4157      25336420 
 4157      2533640A 
 4157      00
 4158 0199 000000   		.space	3
 4159              	.LC17:
 4160 019c 61726D77 		.ascii	"armwave_test_init: failed to allocate test wave buf"
 4160      6176655F 
 4160      74657374 
 4160      5F696E69 
 4160      743A2066 
 4161 01cf 66657220 		.ascii	"fer (%d bytes)\012\000"
 4161      28256420 
 4161      62797465 
 4161      73290A00 
 4162 01df 00       		.space	1
 4163              	.LC18:
 4164 01e0 61726D77 		.ascii	"armwave_test_generate: slice %d (y=%d, h=%d)\012\000"
 4164      6176655F 
 4164      74657374 
 4164      5F67656E 
 4164      65726174 
 4165 020e 0000     		.space	2
 4166              	.LC19:
 4167 0210 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: start\000"
 4167      6176655F 
 4167      66696C6C 
 4167      5F706978 
 4167      6275665F 
 4168 0239 000000   		.space	3
 4169              	.LC20:
 4170 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4170      6176655F 
 4170      66696C6C 
 4170      5F706978 
 4170      6275665F 
 4171 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4171      20666169 
 4171      6C65642C 
 4171      20726574 
 4171      75726E69 
 4172 028e 0000     		.space	2
 4173              	.LC21:
 4174 0290 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: buffer fill done"
 4174      6176655F 
 4174      66696C6C 
 4174      5F706978 
 4174      6275665F 
 4175 02c3 00       		.ascii	"\000"
 4176              	.LC22:
 4177 02c4 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: done\000"
 4177      6176655F 
 4177      66696C6C 
 4177      5F706978 
 4177      6275665F 
 4178              		.text
 4179              	.Letext0:
 4180              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4181              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4182              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4183              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4184              		.file 7 "/usr/include/stdio.h"
 4185              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4186              		.file 9 "/usr/include/errno.h"
 4187              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4188              		.file 11 "/usr/include/unistd.h"
 4189              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4190              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4191              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4192              		.file 15 "/usr/include/math.h"
 4193              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4194              		.file 17 "/usr/include/time.h"
 4195              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4196              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4197              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4198              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4199              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4200              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4201              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4202              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4203              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4204              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4205              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4206              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4207              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4208              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4209              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4210              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4211              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4212              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4213              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4214              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4215              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4216              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4217              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4218              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4219              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4220              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4221              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4222              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4223              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4224              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4225              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4226              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4227              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4228              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4229              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4230              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4231              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4232              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4233              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4234              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4235              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4236              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4237              		.file 60 "/usr/local/include/python3.8/context.h"
 4238              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4239              		.file 62 "/usr/local/include/python3.8/code.h"
 4240              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4241              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4242              		.file 65 "/usr/local/include/python3.8/import.h"
 4243              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4244              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4245              		.file 68 "armwave.h"
 4246              		.file 69 "/usr/include/stdlib.h"
 4247              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4248              		.file 71 "/usr/include/assert.h"
 4249              		.file 72 "<built-in>"
 4250              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
