   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 C0419FE5 		ldr	r4, .L25	@ tmp314,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 1CD04DE2 		sub	sp, sp, #28	@,,
 255              		.cfi_def_cfa_offset 64
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 65 view .LVU34
 258 00ac 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 130 view .LVU35
 261 00b0 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 40 view .LVU36
 265 00b4 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 65 view .LVU37
 268 00b8 920002E0 		mul	r2, r2, r0	@ tmp215, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 269              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 270              		.loc 1 73 5 view .LVU38
 271 00bc 0530A0E1 		mov	r3, r5	@, _1
 272              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 273              		.loc 1 63 1 view .LVU39
 274 00c0 14008DE5 		str	r0, [sp, #20]	@ slice_y, %sfp
 275              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 276              		.loc 1 71 105 view .LVU40
 277 00c4 2224A0E1 		lsr	r2, r2, #8	@ tmp217, tmp215,
 278              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 279              		.loc 1 73 5 view .LVU41
 280 00c8 41008DE9 		stmib	sp, {r0, r6}	@,,
 281              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 282              		.loc 1 71 130 view .LVU42
 283 00cc 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp217
 284              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 285              		.loc 1 73 5 view .LVU43
 286 00d0 98019FE5 		ldr	r0, .L25+4	@,
 287              	.LVL8:
 288              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 289              		.loc 1 71 23 view .LVU44
 290 00d4 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _7
 291              	.LVL9:
 292              		.loc 1 73 5 is_stmt 1 view .LVU45
 293 00d8 00208DE5 		str	r2, [sp]	@ _7,
 294 00dc 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 295 00e0 0520A0E1 		mov	r2, r5	@, write_buffer_base
 296 00e4 FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 78 5 view .LVU46
 299              		.loc 1 78 5 is_stmt 0 view .LVU47
 300 00e8 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00ec 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f0 5B0000DA 		ble	.L11		@,
 303              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 78 11 view .LVU48
 305 00f4 0030A0E3 		mov	r3, #0	@ w,
 306 00f8 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 307              	.LVL11:
 308              	.L12:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 309              		.loc 1 79 9 is_stmt 1 view .LVU49
 310              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 311              		.loc 1 79 59 is_stmt 0 view .LVU50
 312 00fc 10009DE5 		ldr	r0, [sp, #16]	@ w, %sfp
 313              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 314              		.loc 1 79 81 view .LVU51
 315 0100 341094E5 		ldr	r1, [r4, #52]	@ _12, g_armwave_state.wave_stride
 316              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 317              		.loc 1 79 59 view .LVU52
 318 0104 14309DE5 		ldr	r3, [sp, #20]	@ slice_y, %sfp
 319              	@ armwave.c:81:         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_
  80:armwave.c     **** 
  81:armwave.c     ****         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_stride, slice_y,
 320              		.loc 1 81 9 view .LVU53
 321 0108 0120A0E1 		mov	r2, r1	@, _12
 322              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 323              		.loc 1 79 59 view .LVU54
 324 010c 903121E0 		mla	r1, r0, r1, r3	@ tmp228, w, _12, slice_y
 325              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 326              		.loc 1 79 19 view .LVU55
 327 0110 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 328 0114 018088E0 		add	r8, r8, r1	@ wave_base, g_armwave_state.wave_buffer, tmp228
 329              	.LVL12:
 330              		.loc 1 81 9 is_stmt 1 view .LVU56
 331 0118 00808DE5 		str	r8, [sp]	@ wave_base,
 332 011c 0010A0E1 		mov	r1, r0	@, w
 333 0120 4C019FE5 		ldr	r0, .L25+8	@,
 334 0124 FEFFFFEB 		bl	printf		@
 335              	.LVL13:
  82:armwave.c     **** 
  83:armwave.c     ****         // roll through y and render the slice into the out buffer
  84:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  85:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 336              		.loc 1 85 9 view .LVU57
 337              		.loc 1 85 9 is_stmt 0 view .LVU58
 338 0128 000056E3 		cmp	r6, #0	@ height,
 339 012c 04804812 		subne	r8, r8, #4	@ ivtmp.39, wave_base,
 340              	.LVL14:
 341              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 342              		.loc 1 85 16 view .LVU59
 343 0130 0020A013 		movne	r2, #0	@ yy,
 344              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 345              		.loc 1 85 9 view .LVU60
 346 0134 4400000A 		beq	.L19		@,
 347              	.LVL15:
 348              	.L18:
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 349              		.loc 1 86 13 is_stmt 1 view .LVU61
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 350              		.loc 1 100 17 view .LVU62
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 351              		.loc 1 102 17 view .LVU63
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 100 17 view .LVU64
 353              		.loc 1 102 17 view .LVU65
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 354              		.loc 1 100 17 view .LVU66
 355              		.loc 1 102 17 view .LVU67
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 356              		.loc 1 100 17 view .LVU68
 357              		.loc 1 102 17 view .LVU69
 358              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 359              		.loc 1 86 18 is_stmt 0 view .LVU70
 360 0138 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _161, offset: 0B]
 361              	.LVL16:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 362              		.loc 1 88 13 is_stmt 1 view .LVU71
  90:armwave.c     ****                 
 363              		.loc 1 90 17 view .LVU72
  93:armwave.c     ****                     continue;
 364              		.loc 1 93 17 view .LVU73
 365              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 366              		.loc 1 101 34 is_stmt 0 view .LVU74
 367 013c 01B082E2 		add	fp, r2, #1	@ tmp261, yy,
 368              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 369              		.loc 1 93 20 view .LVU75
 370 0140 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 371 0144 0110A003 		moveq	r1, #1	@ tmp234,
 372 0148 0010A013 		movne	r1, #0	@ tmp234,
 373              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 374              		.loc 1 93 19 view .LVU76
 375 014c FF0057E3 		cmp	r7, #255	@ scale_value,
 376 0150 01108103 		orreq	r1, r1, #1	@,, tmp239, tmp234
 377 0154 000051E3 		cmp	r1, #0	@ tmp239,
 378              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 379              		.loc 1 101 34 view .LVU77
 380 0158 02A082E2 		add	r10, r2, #2	@ tmp282, yy,
 381 015c 039082E2 		add	r9, r2, #3	@ tmp302, yy,
 382              	.LVL17:
 383              	@ armwave.c:103:                 word >>= 8;
 103:armwave.c     ****                 word >>= 8;
 384              		.loc 1 103 22 view .LVU78
 385 0160 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 386 0164 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 387              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 388              		.loc 1 93 19 view .LVU79
 389 0168 3400001A 		bne	.L20		@,
 390              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 101 34 view .LVU80
 392 016c 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 393              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 394              		.loc 1 93 20 view .LVU81
 395 0170 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 396 0174 01E0A003 		moveq	lr, #1	@ tmp254,
 397              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 398              		.loc 1 101 34 view .LVU82
 399 0178 910201E0 		mul	r1, r1, r2	@ tmp241, g_armwave_state.cmp_x_bitdepth_scale, yy
 400              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 401              		.loc 1 93 20 view .LVU83
 402 017c 00E0A013 		movne	lr, #0	@ tmp254,
 403              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 404              		.loc 1 93 19 view .LVU84
 405 0180 FF005CE3 		cmp	ip, #255	@ scale_value,
 406 0184 01E08E03 		orreq	lr, lr, #1	@,, tmp259, tmp254
 407 0188 00005EE3 		cmp	lr, #0	@ tmp259,
 408              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 409              		.loc 1 102 47 view .LVU85
 410 018c 40E094E5 		ldr	lr, [r4, #64]	@ tmp330, g_armwave_state.bitdepth_height
 411              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 101 74 view .LVU86
 413 0190 2114A0E1 		lsr	r1, r1, #8	@ tmp243, tmp241,
 414              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 415              		.loc 1 102 47 view .LVU87
 416 0194 9E7121E0 		mla	r1, lr, r1, r7	@ tmp247, tmp330, tmp243, scale_value
 417 0198 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_82, *_82
 418 019c 01E08EE2 		add	lr, lr, #1	@ tmp250, *_82,
 419 01a0 01E0C5E7 		strb	lr, [r5, r1]	@ tmp250, *_82
 420              	.LVL18:
 421              		.loc 1 103 17 is_stmt 1 view .LVU88
  90:armwave.c     ****                 
 422              		.loc 1 90 17 view .LVU89
  93:armwave.c     ****                     continue;
 423              		.loc 1 93 17 view .LVU90
 424              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 425              		.loc 1 93 19 is_stmt 0 view .LVU91
 426 01a4 2500001A 		bne	.L20		@,
 427              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 428              		.loc 1 101 34 view .LVU92
 429 01a8 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 430              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 431              		.loc 1 101 99 view .LVU93
 432 01ac 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 433              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 434              		.loc 1 93 20 view .LVU94
 435 01b0 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 436              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 437              		.loc 1 101 34 view .LVU95
 438 01b4 9E0B0BE0 		mul	fp, lr, fp	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 439              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 440              		.loc 1 93 20 view .LVU96
 441 01b8 01E0A003 		moveq	lr, #1	@ tmp275,
 442 01bc 00E0A013 		movne	lr, #0	@ tmp275,
 443              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 444              		.loc 1 101 74 view .LVU97
 445 01c0 2BB4A0E1 		lsr	fp, fp, #8	@ tmp264, tmp262,
 446              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 447              		.loc 1 93 19 view .LVU98
 448 01c4 FF0050E3 		cmp	r0, #255	@ scale_value,
 449 01c8 01E08E03 		orreq	lr, lr, #1	@,, tmp280, tmp275
 450              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 451              		.loc 1 102 47 view .LVU99
 452 01cc 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp268, g_armwave_state.bitdepth_height, tmp264, scale_value
 453              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 454              		.loc 1 93 19 view .LVU100
 455 01d0 00005EE3 		cmp	lr, #0	@ tmp280,
 456              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 457              		.loc 1 102 47 view .LVU101
 458 01d4 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_112, *_112
 459 01d8 011081E2 		add	r1, r1, #1	@ tmp271, *_112,
 460 01dc 0C10C5E7 		strb	r1, [r5, ip]	@ tmp271, *_112
 461              		.loc 1 103 17 is_stmt 1 view .LVU102
 462              	.LVL19:
  90:armwave.c     ****                 
 463              		.loc 1 90 17 view .LVU103
  93:armwave.c     ****                     continue;
 464              		.loc 1 93 17 view .LVU104
 465              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 466              		.loc 1 93 19 is_stmt 0 view .LVU105
 467 01e0 1600001A 		bne	.L20		@,
 468              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 469              		.loc 1 101 34 view .LVU106
 470 01e4 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 471              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 472              		.loc 1 101 99 view .LVU107
 473 01e8 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 474              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 475              		.loc 1 93 20 view .LVU108
 476 01ec 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 477              	.LVL20:
 478              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 479              		.loc 1 101 34 view .LVU109
 480 01f0 910A0AE0 		mul	r10, r1, r10	@ tmp283, g_armwave_state.cmp_x_bitdepth_scale, tmp282
 481              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 482              		.loc 1 93 20 view .LVU110
 483 01f4 0110A003 		moveq	r1, #1	@ tmp295,
 484 01f8 0010A013 		movne	r1, #0	@ tmp295,
 485              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 486              		.loc 1 101 74 view .LVU111
 487 01fc 2AA4A0E1 		lsr	r10, r10, #8	@ tmp285, tmp283,
 488              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 489              		.loc 1 93 19 view .LVU112
 490 0200 FF0053E3 		cmp	r3, #255	@ word,
 491 0204 01108103 		orreq	r1, r1, #1	@,, tmp300, tmp295
 492              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 493              		.loc 1 102 47 view .LVU113
 494 0208 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp289, g_armwave_state.bitdepth_height, tmp285, scale_value
 495              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 496              		.loc 1 93 19 view .LVU114
 497 020c 000051E3 		cmp	r1, #0	@ tmp300,
 498              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 499              		.loc 1 102 47 view .LVU115
 500 0210 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_142, *_142
 501 0214 011081E2 		add	r1, r1, #1	@ tmp292, *_142,
 502 0218 0010C5E7 		strb	r1, [r5, r0]	@ tmp292, *_142
 503              		.loc 1 103 17 is_stmt 1 view .LVU116
 504              	.LVL21:
  90:armwave.c     ****                 
 505              		.loc 1 90 17 view .LVU117
  93:armwave.c     ****                     continue;
 506              		.loc 1 93 17 view .LVU118
 507              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 508              		.loc 1 93 19 is_stmt 0 view .LVU119
 509 021c 0700001A 		bne	.L20		@,
 510              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 511              		.loc 1 101 34 view .LVU120
 512 0220 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 513              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 514              		.loc 1 101 99 view .LVU121
 515 0224 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 516              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 517              		.loc 1 101 34 view .LVU122
 518 0228 910909E0 		mul	r9, r1, r9	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp302
 519              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 520              		.loc 1 101 74 view .LVU123
 521 022c 2994A0E1 		lsr	r9, r9, #8	@ tmp305, tmp303,
 522              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 523              		.loc 1 102 47 view .LVU124
 524 0230 903923E0 		mla	r3, r0, r9, r3	@ tmp309, g_armwave_state.bitdepth_height, tmp305, word
 525 0234 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_172, *_172
 526 0238 011081E2 		add	r1, r1, #1	@ tmp312, *_172,
 527 023c 0310C5E7 		strb	r1, [r5, r3]	@ tmp312, *_172
 528              		.loc 1 103 17 is_stmt 1 view .LVU125
 529              	.LVL22:
 530              	.L20:
 531              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 532              		.loc 1 85 37 is_stmt 0 view .LVU126
 533 0240 042082E2 		add	r2, r2, #4	@ yy, yy,
 534              	.LVL23:
 535              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 536              		.loc 1 85 9 view .LVU127
 537 0244 020056E1 		cmp	r6, r2	@ height, yy
 538 0248 BAFFFF8A 		bhi	.L18		@,
 539              	.LVL24:
 540              	.L19:
 541              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 78 44 view .LVU128
 543 024c 10209DE5 		ldr	r2, [sp, #16]	@ w, %sfp
 544              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 78 5 view .LVU129
 546 0250 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 547              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 78 44 view .LVU130
 549 0254 012082E2 		add	r2, r2, #1	@ w, w,
 550              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 551              		.loc 1 78 5 view .LVU131
 552 0258 020053E1 		cmp	r3, r2	@ g_armwave_state.waves, w
 553              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 554              		.loc 1 78 44 view .LVU132
 555 025c 10208DE5 		str	r2, [sp, #16]	@ w, %sfp
 556              	.LVL25:
 557              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 558              		.loc 1 78 5 view .LVU133
 559 0260 A5FFFFCA 		bgt	.L12		@,
 560              	.LVL26:
 561              	.L11:
 562              	@ armwave.c:107: }
 104:armwave.c     ****             }
 105:armwave.c     ****         }
 106:armwave.c     ****     }
 107:armwave.c     **** }
 563              		.loc 1 107 1 view .LVU134
 564 0264 1CD08DE2 		add	sp, sp, #28	@,,
 565              		.cfi_def_cfa_offset 36
 566              		@ sp needed	@
 567 0268 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 568              	.LVL27:
 569              	.L26:
 570              		.loc 1 107 1 view .LVU135
 571              		.align	2
 572              	.L25:
 573 026c 00000000 		.word	g_armwave_state
 574 0270 20000000 		.word	.LC2
 575 0274 5C000000 		.word	.LC3
 576              		.cfi_endproc
 577              	.LFE59:
 579              		.align	2
 580              		.global	armwave_fill_pixbuf_scaled
 581              		.syntax unified
 582              		.arm
 583              		.fpu vfp
 585              	armwave_fill_pixbuf_scaled:
 586              	.LVL28:
 587              	.LFB60:
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     **** /*
 111:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 112:armwave.c     ****  */
 113:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 114:armwave.c     **** {
 115:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 116:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 117:armwave.c     ****     uint8_t r, g, b, value;
 118:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 120:armwave.c     ****     uint32_t offset;
 121:armwave.c     **** 
 122:armwave.c     ****     assert(out_buffer != NULL);
 123:armwave.c     **** 
 124:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 125:armwave.c     **** 
 126:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 127:armwave.c     **** 
 128:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 129:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 130:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 131:armwave.c     ****         // most normal waveforms.
 132:armwave.c     ****         wave_word = *base_32ptr++;
 133:armwave.c     **** 
 134:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 135:armwave.c     ****             for(i = 0; i < 4; i++) {
 136:armwave.c     ****                 value = wave_word & 0xff;
 137:armwave.c     ****                 wave_word >>= 8;
 138:armwave.c     **** 
 139:armwave.c     ****                 if(value != 0) {
 140:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 141:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 142:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 143:armwave.c     **** 
 144:armwave.c     ****                     r = MIN(rr, 255);
 145:armwave.c     ****                     g = MIN(gg, 255);
 146:armwave.c     ****                     b = MIN(bb, 255);
 147:armwave.c     **** 
 148:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 149:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 150:armwave.c     **** 
 151:armwave.c     ****                     // Is there a better way?
 152:armwave.c     ****                     nsub = n + i;
 153:armwave.c     ****                     xx = nsub & 0xff;
 154:armwave.c     ****                     yy = nsub >> 8;
 155:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 156:armwave.c     ****                     *(out_buffer_base + offset) = word;
 157:armwave.c     ****                 }
 158:armwave.c     ****             }
 159:armwave.c     ****         } 
 160:armwave.c     ****     }
 161:armwave.c     **** }
 162:armwave.c     **** #endif
 163:armwave.c     **** 
 164:armwave.c     **** /*
 165:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 166:armwave.c     ****  * Rows are repeated as necessary.
 167:armwave.c     ****  */
 168:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 169:armwave.c     **** {
 588              		.loc 1 169 1 is_stmt 1 view -0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 8
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 170:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 592              		.loc 1 170 5 view .LVU137
 171:armwave.c     ****     // uint32_t ysub;
 172:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 593              		.loc 1 172 5 view .LVU138
 173:armwave.c     ****     uint8_t r, g, b, value; 
 594              		.loc 1 173 5 view .LVU139
 174:armwave.c     ****     // uint8_t row;
 175:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 595              		.loc 1 175 5 view .LVU140
 596              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 597              		.loc 1 169 1 is_stmt 0 view .LVU141
 598 0278 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 599              		.cfi_def_cfa_offset 36
 600              		.cfi_offset 4, -36
 601              		.cfi_offset 5, -32
 602              		.cfi_offset 6, -28
 603              		.cfi_offset 7, -24
 604              		.cfi_offset 8, -20
 605              		.cfi_offset 9, -16
 606              		.cfi_offset 10, -12
 607              		.cfi_offset 11, -8
 608              		.cfi_offset 14, -4
 609              	@ armwave.c:179:     assert(out_buffer != NULL);
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 177:armwave.c     ****     uint32_t offset;
 178:armwave.c     **** 
 179:armwave.c     ****     assert(out_buffer != NULL);
 610              		.loc 1 179 5 view .LVU142
 611 027c 000050E3 		cmp	r0, #0	@ out_buffer
 612              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 613              		.loc 1 175 15 view .LVU143
 614 0280 44619FE5 		ldr	r6, .L49	@ tmp203,
 615              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 616              		.loc 1 169 1 view .LVU144
 617 0284 0CD04DE2 		sub	sp, sp, #12	@,,
 618              		.cfi_def_cfa_offset 48
 619              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 620              		.loc 1 175 15 view .LVU145
 621 0288 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 622              	.LVL29:
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 623              		.loc 1 176 5 is_stmt 1 view .LVU146
 177:armwave.c     **** 
 624              		.loc 1 177 5 view .LVU147
 625              		.loc 1 179 5 view .LVU148
 626 028c 4900000A 		beq	.L46		@,
 180:armwave.c     **** 
 181:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 627              		.loc 1 181 5 view .LVU149
 628              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 629              		.loc 1 181 10 is_stmt 0 view .LVU150
 630 0290 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 631 0294 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 632              	.LVL30:
 182:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 183:armwave.c     **** 
 184:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 633              		.loc 1 184 5 is_stmt 1 view .LVU151
 634              		.loc 1 184 5 is_stmt 0 view .LVU152
 635 0298 000058E3 		cmp	r8, #0	@ npix,
 636 029c 0C0000DA 		ble	.L27		@,
 637              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 186:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 187:armwave.c     ****         // most normal waveforms.
 188:armwave.c     ****         wave_word = *base_32ptr++;
 189:armwave.c     **** 
 190:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 192:armwave.c     ****                 value = wave_word & 0xff;
 193:armwave.c     ****                 wave_word >>= 8;
 194:armwave.c     **** 
 195:armwave.c     ****                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 638              		.loc 1 197 52 view .LVU153
 639 02a0 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 640              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 641              		.loc 1 196 52 view .LVU154
 642 02a4 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 643              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 200:armwave.c     ****                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 202:armwave.c     ****                     b = MIN(bb, 255);
 203:armwave.c     **** 
 204:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 205:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 207:armwave.c     ****                     // Do line scaling as necessary.
 208:armwave.c     ****                     /*
 209:armwave.c     ****                     nsub = n + w;
 210:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 211:armwave.c     ****                     xx = (nsub >> 8);
 212:armwave.c     **** 
 213:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 214:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 215:armwave.c     ****                         *(out_buffer_base + offset) = word;
 216:armwave.c     ****                     }
 217:armwave.c     ****                     */
 218:armwave.c     **** 
 219:armwave.c     ****                     nsub = n + w;
 220:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 644              		.loc 1 220 57 view .LVU155
 645 02a8 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 646              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 197 52 view .LVU156
 648 02ac 00308DE5 		str	r3, [sp]	@ _10, %sfp
 649              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 650              		.loc 1 198 52 view .LVU157
 651 02b0 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 652              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 653              		.loc 1 184 11 view .LVU158
 654 02b4 0010A0E3 		mov	r1, #0	@ n,
 655              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 656              		.loc 1 198 52 view .LVU159
 657 02b8 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 658              	.LVL31:
 659              	.L34:
 188:armwave.c     **** 
 660              		.loc 1 188 9 is_stmt 1 view .LVU160
 661              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 662              		.loc 1 188 19 is_stmt 0 view .LVU161
 663 02bc 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 664              	.LVL32:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 665              		.loc 1 190 9 is_stmt 1 view .LVU162
 666              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 667              		.loc 1 190 11 is_stmt 0 view .LVU163
 668 02c0 000053E3 		cmp	r3, #0	@ wave_word,
 669 02c4 0400001A 		bne	.L47		@,
 670              	.L30:
 671              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 672              		.loc 1 184 28 view .LVU164
 673 02c8 041081E2 		add	r1, r1, #4	@ n, n,
 674              	.LVL33:
 675              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 676              		.loc 1 184 5 view .LVU165
 677 02cc 010058E1 		cmp	r8, r1	@ npix, n
 678 02d0 F9FFFFCA 		bgt	.L34		@,
 679              	.LVL34:
 680              	.L27:
 681              	@ armwave.c:232: }
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 223:armwave.c     **** 
 224:armwave.c     ****                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 228:armwave.c     ****                 }
 229:armwave.c     ****             }
 230:armwave.c     ****         }
 231:armwave.c     ****     }
 232:armwave.c     **** }
 682              		.loc 1 232 1 view .LVU166
 683 02d4 0CD08DE2 		add	sp, sp, #12	@,,
 684              		.cfi_remember_state
 685              		.cfi_def_cfa_offset 36
 686              		@ sp needed	@
 687 02d8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 688              	.LVL35:
 689              	.L47:
 690              		.cfi_restore_state
 691              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 692              		.loc 1 195 19 view .LVU167
 693 02dc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 694              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 695              		.loc 1 191 19 view .LVU168
 696 02e0 0070A0E3 		mov	r7, #0	@ w,
 697              	.LVL36:
 192:armwave.c     ****                 wave_word >>= 8;
 698              		.loc 1 192 17 is_stmt 1 view .LVU169
 193:armwave.c     **** 
 699              		.loc 1 193 17 view .LVU170
 700              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 701              		.loc 1 193 27 is_stmt 0 view .LVU171
 702 02e4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 703              	.LVL37:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 704              		.loc 1 195 17 is_stmt 1 view .LVU172
 705              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 706              		.loc 1 195 19 is_stmt 0 view .LVU173
 707 02e8 0500001A 		bne	.L48		@,
 708              	.L31:
 709              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 710              		.loc 1 191 32 view .LVU174
 711 02ec 017087E2 		add	r7, r7, #1	@ w, w,
 712              	.LVL38:
 713              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 714              		.loc 1 191 13 view .LVU175
 715 02f0 040057E3 		cmp	r7, #4	@ w,
 716 02f4 F3FFFF0A 		beq	.L30		@,
 192:armwave.c     ****                 wave_word >>= 8;
 717              		.loc 1 192 17 is_stmt 1 view .LVU176
 718              	.LVL39:
 193:armwave.c     **** 
 719              		.loc 1 193 17 view .LVU177
 720              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 721              		.loc 1 195 19 is_stmt 0 view .LVU178
 722 02f8 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 723              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 724              		.loc 1 193 27 view .LVU179
 725 02fc 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 726              	.LVL40:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 727              		.loc 1 195 17 is_stmt 1 view .LVU180
 728              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 729              		.loc 1 195 19 is_stmt 0 view .LVU181
 730 0300 F9FFFF0A 		beq	.L31		@,
 731              	.L48:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 732              		.loc 1 196 21 is_stmt 1 view .LVU182
 733              	.LVL41:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 734              		.loc 1 197 21 view .LVU183
 198:armwave.c     **** 
 735              		.loc 1 198 21 view .LVU184
 200:armwave.c     ****                     g = MIN(gg, 255);
 736              		.loc 1 200 21 view .LVU185
 201:armwave.c     ****                     b = MIN(bb, 255);
 737              		.loc 1 201 21 view .LVU186
 202:armwave.c     **** 
 738              		.loc 1 202 21 view .LVU187
 205:armwave.c     **** 
 739              		.loc 1 205 21 view .LVU188
 740              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 741              		.loc 1 198 55 is_stmt 0 view .LVU189
 742 0304 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 743 0308 075081E0 		add	r5, r1, r7	@ _120, n, w
 744 030c 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 745              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 746              		.loc 1 220 32 view .LVU190
 747 0310 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 748              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 749              		.loc 1 221 41 view .LVU191
 750 0314 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 751              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 752              		.loc 1 220 40 view .LVU192
 753 0318 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 754              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 755              		.loc 1 221 41 view .LVU193
 756 031c 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 757              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 758              		.loc 1 197 55 view .LVU194
 759 0320 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 760              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 761              		.loc 1 198 24 view .LVU195
 762 0324 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 763              	.LVL42:
 764              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 765              		.loc 1 220 40 view .LVU196
 766 0328 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 767              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 768              		.loc 1 221 46 view .LVU197
 769 032c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 770              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 771              		.loc 1 197 55 view .LVU198
 772 0330 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 773              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 774              		.loc 1 196 55 view .LVU199
 775 0334 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 776              	.LVL43:
 777              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 778              		.loc 1 202 25 view .LVU200
 779 0338 FF005AE3 		cmp	r10, #255	@ bb,
 780              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 781              		.loc 1 197 24 view .LVU201
 782 033c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 783              	.LVL44:
 784              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 785              		.loc 1 220 40 view .LVU202
 786 0340 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 787              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 788              		.loc 1 221 46 view .LVU203
 789 0344 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 790              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 791              		.loc 1 196 24 view .LVU204
 792 0348 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 793              	.LVL45:
 794              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 795              		.loc 1 202 25 view .LVU205
 796 034c FFA0A0A3 		movge	r10, #255	@ bb,
 797              	.LVL46:
 798              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 799              		.loc 1 201 25 view .LVU206
 800 0350 FF0054E3 		cmp	r4, #255	@ gg,
 801 0354 FF40A0A3 		movge	r4, #255	@ gg,
 802              	.LVL47:
 803              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 804              		.loc 1 200 25 view .LVU207
 805 0358 FF005CE3 		cmp	ip, #255	@ rr,
 806              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 807              		.loc 1 205 56 view .LVU208
 808 035c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 809              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 810              		.loc 1 220 24 view .LVU209
 811 0360 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 812              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 813              		.loc 1 200 25 view .LVU210
 814 0364 FFC0A0A3 		movge	ip, #255	@ rr,
 815              	.LVL48:
 816              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 817              		.loc 1 205 44 view .LVU211
 818 0368 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 819 036c FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 820              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 821              		.loc 1 205 56 view .LVU212
 822 0370 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 823              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 824              		.loc 1 205 51 view .LVU213
 825 0374 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 826              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 827              		.loc 1 205 62 view .LVU214
 828 0378 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 829 037c 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 830              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 831              		.loc 1 220 24 view .LVU215
 832 0380 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 833              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 834              		.loc 1 221 24 view .LVU216
 835 0384 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 836              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 837              		.loc 1 205 26 view .LVU217
 838 0388 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 839              	.LVL49:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 840              		.loc 1 219 21 is_stmt 1 view .LVU218
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 841              		.loc 1 220 21 view .LVU219
 221:armwave.c     ****                     xx = (nsub >> 8);
 842              		.loc 1 221 21 view .LVU220
 843              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 844              		.loc 1 222 32 is_stmt 0 view .LVU221
 845 038c 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 846              	.LVL50:
 847              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 848              		.loc 1 221 24 view .LVU222
 849 0390 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 850              	.LVL51:
 222:armwave.c     **** 
 851              		.loc 1 222 21 is_stmt 1 view .LVU223
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 852              		.loc 1 224 21 view .LVU224
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 853              		.loc 1 224 21 is_stmt 0 view .LVU225
 854 0394 090052E1 		cmp	r2, r9	@ yy, ye
 855 0398 D3FFFF2A 		bcs	.L31		@,
 856              	.LVL52:
 857              	.L32:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 858              		.loc 1 225 25 is_stmt 1 discriminator 3 view .LVU226
 226:armwave.c     ****                     }
 859              		.loc 1 226 25 discriminator 3 view .LVU227
 860              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 861              		.loc 1 225 43 is_stmt 0 discriminator 3 view .LVU228
 862 039c 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 863              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 864              		.loc 1 226 43 discriminator 3 view .LVU229
 865 03a0 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 866              	.LVL53:
 867              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 868              		.loc 1 224 42 discriminator 3 view .LVU230
 869 03a4 012082E2 		add	r2, r2, #1	@ yy, yy,
 870              	.LVL54:
 871              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 872              		.loc 1 224 21 discriminator 3 view .LVU231
 873 03a8 020059E1 		cmp	r9, r2	@ ye, yy
 874              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 875              		.loc 1 226 53 discriminator 3 view .LVU232
 876 03ac 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 877              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 878              		.loc 1 224 21 discriminator 3 view .LVU233
 879 03b0 F9FFFF1A 		bne	.L32		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 880              		.loc 1 224 21 discriminator 3 view .LVU234
 881 03b4 CCFFFFEA 		b	.L31		@
 882              	.LVL55:
 883              	.L46:
 179:armwave.c     **** 
 884              		.loc 1 179 5 is_stmt 1 discriminator 1 view .LVU235
 885 03b8 10309FE5 		ldr	r3, .L49+4	@,
 886 03bc B320A0E3 		mov	r2, #179	@,
 887 03c0 0C109FE5 		ldr	r1, .L49+8	@,
 888 03c4 0C009FE5 		ldr	r0, .L49+12	@,
 889              	.LVL56:
 179:armwave.c     **** 
 890              		.loc 1 179 5 is_stmt 0 discriminator 1 view .LVU236
 891 03c8 FEFFFFEB 		bl	__assert_fail		@
 892              	.LVL57:
 893              	.L50:
 179:armwave.c     **** 
 894              		.loc 1 179 5 discriminator 1 view .LVU237
 895              		.align	2
 896              	.L49:
 897 03cc 00000000 		.word	g_armwave_state
 898 03d0 00000000 		.word	.LANCHOR0
 899 03d4 84000000 		.word	.LC4
 900 03d8 90000000 		.word	.LC5
 901              		.cfi_endproc
 902              	.LFE60:
 904              		.align	2
 905              		.global	armwave_generate
 906              		.syntax unified
 907              		.arm
 908              		.fpu vfp
 910              	armwave_generate:
 911              	.LFB61:
 233:armwave.c     **** 
 234:armwave.c     **** /*
 235:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 236:armwave.c     ****  */
 237:armwave.c     **** void armwave_generate()
 238:armwave.c     **** {
 912              		.loc 1 238 1 is_stmt 1 view -0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 239:armwave.c     ****     uint32_t yy;
 916              		.loc 1 239 5 view .LVU239
 240:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 917              		.loc 1 240 5 view .LVU240
 918              	.LVL58:
 241:armwave.c     **** 
 242:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 919              		.loc 1 242 5 view .LVU241
 920              	@ armwave.c:238: {
 238:armwave.c     ****     uint32_t yy;
 921              		.loc 1 238 1 is_stmt 0 view .LVU242
 922 03dc 10402DE9 		push	{r4, lr}	@
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 4, -8
 925              		.cfi_offset 14, -4
 926              	@ armwave.c:242:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 927              		.loc 1 242 5 view .LVU243
 928 03e0 0010A0E3 		mov	r1, #0	@,
 929              	@ armwave.c:242:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 930              		.loc 1 242 58 view .LVU244
 931 03e4 18409FE5 		ldr	r4, .L53	@ tmp115,
 932              	@ armwave.c:242:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 933              		.loc 1 242 5 view .LVU245
 934 03e8 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 935 03ec 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 936 03f0 FEFFFFEB 		bl	memset		@
 937              	.LVL59:
 243:armwave.c     **** 
 244:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 245:armwave.c     ****     for(yy = 0; yy < 1; yy++) {
 938              		.loc 1 245 5 is_stmt 1 view .LVU246
 246:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 247:armwave.c     **** 
 248:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 939              		.loc 1 248 9 view .LVU247
 940 03f4 481094E5 		ldr	r1, [r4, #72]	@, g_armwave_state.slice_record_height
 941 03f8 0000A0E3 		mov	r0, #0	@,
 942              	@ armwave.c:254: }
 249:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 250:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 251:armwave.c     ****     }
 252:armwave.c     **** 
 253:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 254:armwave.c     **** }
 943              		.loc 1 254 1 is_stmt 0 view .LVU248
 944 03fc 1040BDE8 		pop	{r4, lr}	@
 945              		.cfi_restore 14
 946              		.cfi_restore 4
 947              		.cfi_def_cfa_offset 0
 948              	@ armwave.c:248:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 248:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 949              		.loc 1 248 9 view .LVU249
 950 0400 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 951              	.LVL60:
 952              	.L54:
 953              		.align	2
 954              	.L53:
 955 0404 00000000 		.word	g_armwave_state
 956              		.cfi_endproc
 957              	.LFE61:
 959              		.align	2
 960              		.global	armwave_setup_render
 961              		.syntax unified
 962              		.arm
 963              		.fpu vfp
 965              	armwave_setup_render:
 966              	.LVL61:
 967              	.LFB62:
 255:armwave.c     **** 
 256:armwave.c     **** /*
 257:armwave.c     ****  * Setup the renderer with passed parameters.
 258:armwave.c     ****  */
 259:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 260:armwave.c     **** {
 968              		.loc 1 260 1 is_stmt 1 view -0
 969              		.cfi_startproc
 970              		@ args = 12, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 261:armwave.c     ****     uint32_t length, xx;
 972              		.loc 1 261 5 view .LVU251
 262:armwave.c     ****     float points_per_pixel;
 973              		.loc 1 262 5 view .LVU252
 263:armwave.c     **** 
 264:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 974              		.loc 1 264 5 view .LVU253
 975              	@ armwave.c:260: {
 260:armwave.c     ****     uint32_t length, xx;
 976              		.loc 1 260 1 is_stmt 0 view .LVU254
 977 0408 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 978              		.cfi_def_cfa_offset 28
 979              		.cfi_offset 4, -28
 980              		.cfi_offset 5, -24
 981              		.cfi_offset 6, -20
 982              		.cfi_offset 7, -16
 983              		.cfi_offset 8, -12
 984              		.cfi_offset 9, -8
 985              		.cfi_offset 14, -4
 986 040c 028B2DED 		vpush.64	{d8}	@
 987              		.cfi_def_cfa_offset 36
 988              		.cfi_offset 80, -36
 989              		.cfi_offset 81, -32
 990 0410 0040A0E1 		mov	r4, r0	@ start_point, start_point
 991 0414 0150A0E1 		mov	r5, r1	@ end_point, end_point
 992 0418 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 993 041c 14D04DE2 		sub	sp, sp, #20	@,,
 994              		.cfi_def_cfa_offset 56
 995              	@ armwave.c:260: {
 260:armwave.c     ****     uint32_t length, xx;
 996              		.loc 1 260 1 view .LVU255
 997 0420 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 998 0424 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 999 0428 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1000              	@ armwave.c:264:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1001              		.loc 1 264 5 view .LVU256
 1002 042c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1003 0430 F460CDE1 		strd	r6, [sp, #4]	@,,
 1004 0434 0230A0E1 		mov	r3, r2	@, waves_max
 1005              	.LVL62:
 1006              		.loc 1 264 5 view .LVU257
 1007 0438 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1008 043c 0120A0E1 		mov	r2, r1	@, end_point
 1009              	.LVL63:
 1010              		.loc 1 264 5 view .LVU258
 1011 0440 0010A0E1 		mov	r1, r0	@, start_point
 1012              	.LVL64:
 1013              		.loc 1 264 5 view .LVU259
 1014 0444 D0019FE5 		ldr	r0, .L69+12	@,
 1015              	.LVL65:
 1016              		.loc 1 264 5 view .LVU260
 1017 0448 FEFFFFEB 		bl	printf		@
 1018              	.LVL66:
 265:armwave.c     **** 
 266:armwave.c     ****     // TODO these asserts should instead raise PyExc
 267:armwave.c     ****     assert(start_point < end_point);
 1019              		.loc 1 267 5 is_stmt 1 view .LVU261
 1020 044c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1021 0450 5F00002A 		bcs	.L66		@,
 268:armwave.c     **** 
 269:armwave.c     ****     /*
 270:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 271:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 272:armwave.c     **** 
 273:armwave.c     ****     if(target_height == 256) {
 274:armwave.c     ****         g_armwave_state.row_shift = 8;
 275:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 276:armwave.c     ****     } else if(target_height == 512) {
 277:armwave.c     ****         g_armwave_state.row_shift = 9;
 278:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 279:armwave.c     ****     } else if(target_height == 1024) {
 280:armwave.c     ****         g_armwave_state.row_shift = 10;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 282:armwave.c     ****     } else if(target_height == 2048) {
 283:armwave.c     ****         g_armwave_state.row_shift = 11;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 285:armwave.c     ****     }
 286:armwave.c     ****     */
 287:armwave.c     **** 
 288:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 289:armwave.c     ****     g_armwave_state.xstride = target_height;
 1022              		.loc 1 289 5 view .LVU262
 1023              	@ armwave.c:300:     g_armwave_state.wave_length = end_point - start_point;
 290:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 291:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 292:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 293:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 294:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 295:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 296:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 297:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 298:armwave.c     ****     g_armwave_state.target_width = target_width;
 299:armwave.c     ****     g_armwave_state.target_height = target_height;
 300:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1024              		.loc 1 300 45 is_stmt 0 view .LVU263
 1025 0454 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1026              	.LVL67:
 1027              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1028              		.loc 1 290 49 view .LVU264
 1029 0458 6C6A9FED 		vldr.32	s12, .L69	@ tmp175,
 1030              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 301:armwave.c     **** 
 302:armwave.c     ****     // Calculate compound scaler
 303:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 304:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1031              		.loc 1 304 48 view .LVU265
 1032 045c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1033              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1034              		.loc 1 304 79 view .LVU266
 1035 0460 6B6ADFED 		vldr.32	s13, .L69+4	@ tmp199,
 1036              	@ armwave.c:297:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1037              		.loc 1 297 90 view .LVU267
 1038 0464 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1039              	@ armwave.c:289:     g_armwave_state.xstride = target_height;
 289:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1040              		.loc 1 289 29 view .LVU268
 1041 0468 B0419FE5 		ldr	r4, .L69+16	@ tmp242,
 1042              	.LVL68:
 1043              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1044              		.loc 1 304 48 view .LVU269
 1045 046c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1046              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1047              		.loc 1 290 49 view .LVU270
 1048 0470 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1049              	@ armwave.c:295:     g_armwave_state.size = target_height * target_width;
 295:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1050              		.loc 1 295 42 view .LVU271
 1051 0474 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1052              	@ armwave.c:297:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1053              		.loc 1 297 74 view .LVU272
 1054 0478 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1055              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1056              		.loc 1 290 49 view .LVU273
 1057 047c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1058              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1059              		.loc 1 304 48 view .LVU274
 1060 0480 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1061              	@ armwave.c:297:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1062              		.loc 1 297 74 view .LVU275
 1063 0484 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1064              	@ armwave.c:296:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 296:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1065              		.loc 1 296 37 view .LVU276
 1066 0488 012CA0E3 		mov	r2, #256	@ tmp185,
 1067              	@ armwave.c:295:     g_armwave_state.size = target_height * target_width;
 295:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1068              		.loc 1 295 26 view .LVU277
 1069 048c 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1070              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1071              		.loc 1 304 48 view .LVU278
 1072 0490 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1073              	@ armwave.c:306:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 305:armwave.c     **** 
 306:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1074              		.loc 1 306 5 view .LVU279
 1075 0494 0310A0E1 		mov	r1, r3	@, tmp190
 1076              	@ armwave.c:296:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 296:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1077              		.loc 1 296 37 view .LVU280
 1078 0498 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1079              	@ armwave.c:297:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1080              		.loc 1 297 34 view .LVU281
 1081 049c 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1082              	@ armwave.c:306:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1083              		.loc 1 306 5 view .LVU282
 1084 04a0 7C019FE5 		ldr	r0, .L69+20	@,
 1085              	@ armwave.c:289:     g_armwave_state.xstride = target_height;
 289:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1086              		.loc 1 289 29 view .LVU283
 1087 04a4 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1088              		.loc 1 290 5 is_stmt 1 view .LVU284
 1089              	@ armwave.c:292:     g_armwave_state.wave_stride = wave_stride;
 292:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1090              		.loc 1 292 33 is_stmt 0 view .LVU285
 1091 04a8 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1092              	@ armwave.c:293:     g_armwave_state.waves_max = waves_max;
 293:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1093              		.loc 1 293 31 view .LVU286
 1094 04ac 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1095              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 304:armwave.c     **** 
 1096              		.loc 1 304 48 view .LVU287
 1097 04b0 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1098              	@ armwave.c:294:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 294:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1099              		.loc 1 294 27 view .LVU288
 1100 04b4 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1101              	@ armwave.c:299:     g_armwave_state.target_height = target_height;
 299:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1102              		.loc 1 299 35 view .LVU289
 1103 04b8 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1104              	@ armwave.c:300:     g_armwave_state.wave_length = end_point - start_point;
 300:armwave.c     **** 
 1105              		.loc 1 300 33 view .LVU290
 1106 04bc 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1107              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1108              		.loc 1 290 49 view .LVU291
 1109 04c0 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1110              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 304:armwave.c     **** 
 1111              		.loc 1 304 79 view .LVU292
 1112 04c4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1113              	@ armwave.c:303:     g_armwave_state.cmp_x_bitdepth_scale = \
 303:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1114              		.loc 1 303 42 view .LVU293
 1115 04c8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1116              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1117              		.loc 1 290 33 view .LVU294
 1118 04cc 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 291:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1119              		.loc 1 291 5 is_stmt 1 view .LVU295
 1120              	@ armwave.c:303:     g_armwave_state.cmp_x_bitdepth_scale = \
 303:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1121              		.loc 1 303 42 is_stmt 0 view .LVU296
 1122 04d0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1123              	@ armwave.c:291:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 291:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1124              		.loc 1 291 30 view .LVU297
 1125 04d4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1126              	@ armwave.c:306:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1127              		.loc 1 306 5 view .LVU298
 1128 04d8 0C30A0E1 		mov	r3, ip	@, _19
 1129 04dc 0C20A0E1 		mov	r2, ip	@, tmp3
 1130              	@ armwave.c:303:     g_armwave_state.cmp_x_bitdepth_scale = \
 303:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1131              		.loc 1 303 42 view .LVU299
 1132 04e0 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1133              	@ armwave.c:291:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 291:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1134              		.loc 1 291 30 view .LVU300
 1135 04e4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 292:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1136              		.loc 1 292 5 is_stmt 1 view .LVU301
 293:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1137              		.loc 1 293 5 view .LVU302
 294:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1138              		.loc 1 294 5 view .LVU303
 295:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1139              		.loc 1 295 5 view .LVU304
 296:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1140              		.loc 1 296 5 view .LVU305
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1141              		.loc 1 297 5 view .LVU306
 298:armwave.c     ****     g_armwave_state.target_height = target_height;
 1142              		.loc 1 298 5 view .LVU307
 299:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1143              		.loc 1 299 5 view .LVU308
 300:armwave.c     **** 
 1144              		.loc 1 300 5 view .LVU309
 303:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1145              		.loc 1 303 5 view .LVU310
 1146              		.loc 1 306 5 view .LVU311
 1147 04e8 FEFFFFEB 		bl	printf		@
 1148              	.LVL69:
 307:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 308:armwave.c     **** 
 309:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 310:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 311:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 312:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1149              		.loc 1 312 5 view .LVU312
 1150              	@ armwave.c:314:     if(g_armwave_state.ch1_buffer != NULL)
 313:armwave.c     **** 
 314:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1151              		.loc 1 314 23 is_stmt 0 view .LVU313
 1152 04ec 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1153              	@ armwave.c:312:     g_armwave_state.slice_height = 64;  
 312:armwave.c     **** 
 1154              		.loc 1 312 34 view .LVU314
 1155 04f0 4030A0E3 		mov	r3, #64	@ tmp203,
 1156              	@ armwave.c:314:     if(g_armwave_state.ch1_buffer != NULL)
 1157              		.loc 1 314 7 view .LVU315
 1158 04f4 000050E3 		cmp	r0, #0	@ _20,
 1159              	@ armwave.c:312:     g_armwave_state.slice_height = 64;  
 312:armwave.c     **** 
 1160              		.loc 1 312 34 view .LVU316
 1161 04f8 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1162              		.loc 1 314 5 is_stmt 1 view .LVU317
 1163              	@ armwave.c:314:     if(g_armwave_state.ch1_buffer != NULL)
 1164              		.loc 1 314 7 is_stmt 0 view .LVU318
 1165 04fc 0000000A 		beq	.L57		@,
 315:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1166              		.loc 1 315 9 is_stmt 1 view .LVU319
 1167 0500 FEFFFFEB 		bl	free		@
 1168              	.LVL70:
 1169              	.L57:
 316:armwave.c     **** 
 317:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1170              		.loc 1 317 5 view .LVU320
 1171              	@ armwave.c:317:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1172              		.loc 1 317 34 is_stmt 0 view .LVU321
 1173 0504 0110A0E3 		mov	r1, #1	@,
 1174 0508 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1175 050c FEFFFFEB 		bl	calloc		@
 1176              	.LVL71:
 1177              	@ armwave.c:319:     assert(g_armwave_state.ch1_buffer != NULL);
 318:armwave.c     **** 
 319:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1178              		.loc 1 319 5 view .LVU322
 1179 0510 000050E3 		cmp	r0, #0	@ _23,
 1180              	@ armwave.c:317:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 317:armwave.c     **** 
 1181              		.loc 1 317 34 view .LVU323
 1182 0514 0070A0E1 		mov	r7, r0	@ _23,
 1183              	@ armwave.c:317:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 317:armwave.c     **** 
 1184              		.loc 1 317 32 view .LVU324
 1185 0518 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1186              		.loc 1 319 5 is_stmt 1 view .LVU325
 1187 051c 3600000A 		beq	.L67		@,
 320:armwave.c     **** 
 321:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 322:armwave.c     ****     length = end_point - start_point;
 1188              		.loc 1 322 5 view .LVU326
 1189              	.LVL72:
 323:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1190              		.loc 1 323 5 view .LVU327
 1191              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 1192              		.loc 1 323 34 is_stmt 0 view .LVU328
 1193 0520 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1194              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 1195              		.loc 1 323 22 view .LVU329
 1196 0524 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1197              	@ armwave.c:324:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1198              		.loc 1 324 60 view .LVU330
 1199 0528 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1200              	@ armwave.c:325:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 325:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1201              		.loc 1 325 40 view .LVU331
 1202 052c 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1203              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 323:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1204              		.loc 1 323 34 view .LVU332
 1205 0530 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1206              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 323:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1207              		.loc 1 323 22 view .LVU333
 1208 0534 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1209              	@ armwave.c:324:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1210              		.loc 1 324 60 view .LVU334
 1211 0538 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1212              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 323:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1213              		.loc 1 323 22 view .LVU335
 1214 053c A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1215              	.LVL73:
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1216              		.loc 1 324 5 is_stmt 1 view .LVU336
 1217              	@ armwave.c:324:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1218              		.loc 1 324 60 is_stmt 0 view .LVU337
 1219 0540 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1220              	@ armwave.c:324:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1221              		.loc 1 324 41 view .LVU338
 1222 0544 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1223 0548 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1224              		.loc 1 325 5 is_stmt 1 view .LVU339
 1225              	@ armwave.c:325:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1226              		.loc 1 325 40 is_stmt 0 view .LVU340
 1227 054c FEFFFFEB 		bl	malloc		@
 1228              	.LVL74:
 1229              	@ armwave.c:327:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 326:armwave.c     **** 
 327:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1230              		.loc 1 327 5 view .LVU341
 1231 0550 000050E3 		cmp	r0, #0	@ _31,
 1232              	@ armwave.c:325:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 325:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1233              		.loc 1 325 40 view .LVU342
 1234 0554 0060A0E1 		mov	r6, r0	@ _31,
 1235              	@ armwave.c:325:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 325:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1236              		.loc 1 325 38 view .LVU343
 1237 0558 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1238              		.loc 1 327 5 is_stmt 1 view .LVU344
 1239 055c 2100000A 		beq	.L68		@,
 1240              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 328:armwave.c     **** 
 329:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 330:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1241              		.loc 1 330 54 is_stmt 0 view .LVU345
 1242 0560 2C7ADFED 		vldr.32	s15, .L69+8	@ tmp230,
 1243 0564 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _31,
 1244              	@ armwave.c:329:     for(xx = 0; xx < length; xx++) {
 329:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1245              		.loc 1 329 12 view .LVU346
 1246 0568 0030A0E3 		mov	r3, #0	@ xx,
 1247              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1248              		.loc 1 330 54 view .LVU347
 1249 056c 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1250              	.L60:
 1251              	.LVL75:
 1252              		.loc 1 330 9 is_stmt 1 discriminator 3 view .LVU348
 1253              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1254              		.loc 1 330 74 is_stmt 0 discriminator 3 view .LVU349
 1255 0570 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1256              	@ armwave.c:329:     for(xx = 0; xx < length; xx++) {
 329:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1257              		.loc 1 329 32 discriminator 3 view .LVU350
 1258 0574 013083E2 		add	r3, r3, #1	@ xx, xx,
 1259              	.LVL76:
 1260              	@ armwave.c:329:     for(xx = 0; xx < length; xx++) {
 329:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1261              		.loc 1 329 5 discriminator 3 view .LVU351
 1262 0578 030055E1 		cmp	r5, r3	@ _13, xx
 1263              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1264              		.loc 1 330 74 discriminator 3 view .LVU352
 1265 057c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1266 0580 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1267              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1268              		.loc 1 330 46 discriminator 3 view .LVU353
 1269 0584 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1270 0588 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1271 058c B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1272              	@ armwave.c:329:     for(xx = 0; xx < length; xx++) {
 329:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1273              		.loc 1 329 5 discriminator 3 view .LVU354
 1274 0590 F6FFFF1A 		bne	.L60		@,
 331:armwave.c     **** 
 332:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 333:armwave.c     ****     }
 334:armwave.c     **** 
 335:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1275              		.loc 1 335 5 is_stmt 1 view .LVU355
 1276              	@ armwave.c:335:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1277              		.loc 1 335 34 is_stmt 0 view .LVU356
 1278 0594 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1279 0598 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1280 059c FEFFFFEB 		bl	malloc		@
 1281              	.LVL77:
 1282              	@ armwave.c:337:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 336:armwave.c     **** 
 337:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1283              		.loc 1 337 5 view .LVU357
 1284 05a0 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1285 05a4 0620A0E1 		mov	r2, r6	@, _31
 1286 05a8 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1287 05ac 0710A0E1 		mov	r1, r7	@, _23
 1288              	@ armwave.c:335:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 335:armwave.c     **** 
 1289              		.loc 1 335 34 view .LVU358
 1290 05b0 00C0A0E1 		mov	ip, r0	@ tmp237,
 1291              	@ armwave.c:337:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1292              		.loc 1 337 5 view .LVU359
 1293 05b4 0030A0E1 		mov	r3, r0	@, tmp237
 1294              	@ armwave.c:335:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 335:armwave.c     **** 
 1295              		.loc 1 335 32 view .LVU360
 1296 05b8 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1297              		.loc 1 337 5 is_stmt 1 view .LVU361
 1298 05bc 64009FE5 		ldr	r0, .L69+24	@,
 1299 05c0 FEFFFFEB 		bl	printf		@
 1300              	.LVL78:
 338:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 339:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 340:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 341:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 342:armwave.c     **** 
 343:armwave.c     ****     malloc_stats();
 1301              		.loc 1 343 5 view .LVU362
 1302              	@ armwave.c:344: }
 344:armwave.c     **** }
 1303              		.loc 1 344 1 is_stmt 0 view .LVU363
 1304 05c4 14D08DE2 		add	sp, sp, #20	@,,
 1305              		.cfi_remember_state
 1306              		.cfi_def_cfa_offset 36
 1307              		@ sp needed	@
 1308 05c8 028BBDEC 		vldm	sp!, {d8}	@
 1309              		.cfi_restore 80
 1310              		.cfi_restore 81
 1311              		.cfi_def_cfa_offset 28
 1312              	.LVL79:
 1313              		.loc 1 344 1 view .LVU364
 1314 05cc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1315              		.cfi_restore 14
 1316              		.cfi_restore 9
 1317              		.cfi_restore 8
 1318              		.cfi_restore 7
 1319              		.cfi_restore 6
 1320              		.cfi_restore 5
 1321              		.cfi_restore 4
 1322              		.cfi_def_cfa_offset 0
 1323              	.LVL80:
 1324              	@ armwave.c:343:     malloc_stats();
 343:armwave.c     **** }
 1325              		.loc 1 343 5 view .LVU365
 1326 05d0 FEFFFFEA 		b	malloc_stats		@
 1327              	.LVL81:
 1328              	.L66:
 1329              		.cfi_restore_state
 267:armwave.c     **** 
 1330              		.loc 1 267 5 is_stmt 1 discriminator 1 view .LVU366
 1331 05d4 50309FE5 		ldr	r3, .L69+28	@,
 1332 05d8 50209FE5 		ldr	r2, .L69+32	@,
 1333 05dc 50109FE5 		ldr	r1, .L69+36	@,
 1334 05e0 50009FE5 		ldr	r0, .L69+40	@,
 1335 05e4 FEFFFFEB 		bl	__assert_fail		@
 1336              	.LVL82:
 1337              	.L68:
 327:armwave.c     **** 
 1338              		.loc 1 327 5 discriminator 1 view .LVU367
 1339 05e8 3C309FE5 		ldr	r3, .L69+28	@,
 1340 05ec 48209FE5 		ldr	r2, .L69+44	@,
 1341 05f0 3C109FE5 		ldr	r1, .L69+36	@,
 1342 05f4 44009FE5 		ldr	r0, .L69+48	@,
 1343 05f8 FEFFFFEB 		bl	__assert_fail		@
 1344              	.LVL83:
 1345              	.L67:
 319:armwave.c     **** 
 1346              		.loc 1 319 5 discriminator 1 view .LVU368
 1347 05fc 28309FE5 		ldr	r3, .L69+28	@,
 1348 0600 3C209FE5 		ldr	r2, .L69+52	@,
 1349 0604 28109FE5 		ldr	r1, .L69+36	@,
 1350 0608 38009FE5 		ldr	r0, .L69+56	@,
 1351 060c FEFFFFEB 		bl	__assert_fail		@
 1352              	.LVL84:
 1353              	.L70:
 1354              		.align	2
 1355              	.L69:
 1356 0610 00007F43 		.word	1132396544
 1357 0614 00008043 		.word	1132462080
 1358 0618 0000803F 		.word	1065353216
 1359 061c A4000000 		.word	.LC6
 1360 0620 00000000 		.word	g_armwave_state
 1361 0624 E8000000 		.word	.LC8
 1362 0628 6C010000 		.word	.LC11
 1363 062c 1C000000 		.word	.LANCHOR0+28
 1364 0630 0B010000 		.word	267
 1365 0634 84000000 		.word	.LC4
 1366 0638 D0000000 		.word	.LC7
 1367 063c 47010000 		.word	327
 1368 0640 40010000 		.word	.LC10
 1369 0644 3F010000 		.word	319
 1370 0648 1C010000 		.word	.LC9
 1371              		.cfi_endproc
 1372              	.LFE62:
 1374              		.align	2
 1375              		.global	armwave_set_wave_pointer
 1376              		.syntax unified
 1377              		.arm
 1378              		.fpu vfp
 1380              	armwave_set_wave_pointer:
 1381              	.LVL85:
 1382              	.LFB63:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 348:armwave.c     ****  * in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 351:armwave.c     **** {
 1383              		.loc 1 351 1 view -0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 0
 1386              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer != NULL);
 1387              		.loc 1 352 5 view .LVU370
 1388 064c 000050E3 		cmp	r0, #0	@ wave_buffer
 1389              		.loc 1 352 5 is_stmt 0 view .LVU371
 1390 0650 0200000A 		beq	.L76		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1391              		.loc 1 353 5 is_stmt 1 view .LVU372
 1392              	@ armwave.c:353:     g_armwave_state.wave_buffer = wave_buffer;
 1393              		.loc 1 353 33 is_stmt 0 view .LVU373
 1394 0654 1C309FE5 		ldr	r3, .L77	@ tmp115,
 1395 0658 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1396 065c 1EFF2FE1 		bx	lr	@
 1397              	.L76:
 352:armwave.c     ****     assert(wave_buffer != NULL);
 1398              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU374
 1399              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer != NULL);
 1400              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU375
 1401 0660 10402DE9 		push	{r4, lr}	@
 1402              		.cfi_def_cfa_offset 8
 1403              		.cfi_offset 4, -8
 1404              		.cfi_offset 14, -4
 1405              	@ armwave.c:352:     assert(wave_buffer != NULL);
 352:armwave.c     ****     assert(wave_buffer != NULL);
 1406              		.loc 1 352 5 discriminator 1 view .LVU376
 1407 0664 162EA0E3 		mov	r2, #352	@,
 1408 0668 0C309FE5 		ldr	r3, .L77+4	@,
 1409 066c 0C109FE5 		ldr	r1, .L77+8	@,
 1410 0670 0C009FE5 		ldr	r0, .L77+12	@,
 1411              	.LVL86:
 352:armwave.c     ****     assert(wave_buffer != NULL);
 1412              		.loc 1 352 5 discriminator 1 view .LVU377
 1413 0674 FEFFFFEB 		bl	__assert_fail		@
 1414              	.LVL87:
 1415              	.L78:
 1416              		.align	2
 1417              	.L77:
 1418 0678 00000000 		.word	g_armwave_state
 1419 067c 34000000 		.word	.LANCHOR0+52
 1420 0680 84000000 		.word	.LC4
 1421 0684 90010000 		.word	.LC12
 1422              		.cfi_endproc
 1423              	.LFE63:
 1425              		.align	2
 1426              		.global	armwave_set_wave_pointer_as_testbuf
 1427              		.syntax unified
 1428              		.arm
 1429              		.fpu vfp
 1431              	armwave_set_wave_pointer_as_testbuf:
 1432              	.LVL88:
 1433              	.LFB64:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 358:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 359:armwave.c     ****  */
 360:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 361:armwave.c     **** {
 1434              		.loc 1 361 1 is_stmt 1 view -0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 0, uses_anonymous_args = 0
 1438              		@ link register save eliminated.
 362:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1439              		.loc 1 362 5 view .LVU379
 1440              	@ armwave.c:362:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1441              		.loc 1 362 29 is_stmt 0 view .LVU380
 1442 0688 24309FE5 		ldr	r3, .L82	@ tmp117,
 1443              	@ armwave.c:362:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1444              		.loc 1 362 7 view .LVU381
 1445 068c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1446 0690 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1447 0694 0400003A 		bcc	.L81		@,
 363:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 364:armwave.c     ****         return;
 365:armwave.c     ****     }
 366:armwave.c     **** 
 367:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1448              		.loc 1 367 5 is_stmt 1 view .LVU382
 1449              	@ armwave.c:367:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1450              		.loc 1 367 111 is_stmt 0 view .LVU383
 1451 0698 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1452              	@ armwave.c:367:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1453              		.loc 1 367 68 view .LVU384
 1454 069c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1455 06a0 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1456              	.LVL89:
 1457              	@ armwave.c:367:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1458              		.loc 1 367 33 view .LVU385
 1459 06a4 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1460              	@ armwave.c:368: }
 368:armwave.c     **** }
 1461              		.loc 1 368 1 view .LVU386
 1462 06a8 1EFF2FE1 		bx	lr	@
 1463              	.LVL90:
 1464              	.L81:
 363:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1465              		.loc 1 363 9 is_stmt 1 view .LVU387
 1466 06ac 04009FE5 		ldr	r0, .L82+4	@,
 1467              	.LVL91:
 363:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1468              		.loc 1 363 9 is_stmt 0 view .LVU388
 1469 06b0 FEFFFFEA 		b	puts		@
 1470              	.LVL92:
 1471              	.L83:
 1472              		.align	2
 1473              	.L82:
 1474 06b4 00000000 		.word	g_armwave_state
 1475 06b8 A4010000 		.word	.LC13
 1476              		.cfi_endproc
 1477              	.LFE64:
 1479              		.align	2
 1480              		.global	armwave_set_wave_pointer_u32
 1481              		.syntax unified
 1482              		.arm
 1483              		.fpu vfp
 1485              	armwave_set_wave_pointer_u32:
 1486              	.LVL93:
 1487              	.LFB65:
 369:armwave.c     **** 
 370:armwave.c     **** /*
 371:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 372:armwave.c     ****  * disjointed buffers in the future.
 373:armwave.c     ****  */
 374:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 375:armwave.c     **** {
 1488              		.loc 1 375 1 is_stmt 1 view -0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 0
 1491              		@ frame_needed = 0, uses_anonymous_args = 0
 376:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1492              		.loc 1 376 5 view .LVU390
 1493 06bc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1494              		.loc 1 376 5 is_stmt 0 view .LVU391
 1495 06c0 0200000A 		beq	.L89		@,
 377:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1496              		.loc 1 377 5 is_stmt 1 view .LVU392
 1497              	@ armwave.c:377:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1498              		.loc 1 377 33 is_stmt 0 view .LVU393
 1499 06c4 1C309FE5 		ldr	r3, .L90	@ tmp116,
 1500 06c8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1501 06cc 1EFF2FE1 		bx	lr	@
 1502              	.L89:
 376:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1503              		.loc 1 376 5 is_stmt 1 discriminator 1 view .LVU394
 1504              	@ armwave.c:375: {
 375:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1505              		.loc 1 375 1 is_stmt 0 discriminator 1 view .LVU395
 1506 06d0 10402DE9 		push	{r4, lr}	@
 1507              		.cfi_def_cfa_offset 8
 1508              		.cfi_offset 4, -8
 1509              		.cfi_offset 14, -4
 1510              	@ armwave.c:376:     assert(wave_buffer_ptr != 0);
 376:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1511              		.loc 1 376 5 discriminator 1 view .LVU396
 1512 06d4 5E2FA0E3 		mov	r2, #376	@,
 1513 06d8 0C309FE5 		ldr	r3, .L90+4	@,
 1514 06dc 0C109FE5 		ldr	r1, .L90+8	@,
 1515 06e0 0C009FE5 		ldr	r0, .L90+12	@,
 1516              	.LVL94:
 376:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1517              		.loc 1 376 5 discriminator 1 view .LVU397
 1518 06e4 FEFFFFEB 		bl	__assert_fail		@
 1519              	.LVL95:
 1520              	.L91:
 1521              		.align	2
 1522              	.L90:
 1523 06e8 00000000 		.word	g_armwave_state
 1524 06ec 50000000 		.word	.LANCHOR0+80
 1525 06f0 84000000 		.word	.LC4
 1526 06f4 E0010000 		.word	.LC14
 1527              		.cfi_endproc
 1528              	.LFE65:
 1530              		.align	2
 1531              		.global	armwave_clear_buffer
 1532              		.syntax unified
 1533              		.arm
 1534              		.fpu vfp
 1536              	armwave_clear_buffer:
 1537              	.LVL96:
 1538              	.LFB66:
 378:armwave.c     **** }
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 384:armwave.c     **** {
 1539              		.loc 1 384 1 is_stmt 1 view -0
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 0
 1542              		@ frame_needed = 0, uses_anonymous_args = 0
 1543              		@ link register save eliminated.
 385:armwave.c     ****     // Flags ignored, only one buffer cleared
 386:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1544              		.loc 1 386 5 view .LVU399
 1545              	@ armwave.c:386:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1546              		.loc 1 386 58 is_stmt 0 view .LVU400
 1547 06f8 0C309FE5 		ldr	r3, .L93	@ tmp114,
 1548              	@ armwave.c:386:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1549              		.loc 1 386 5 view .LVU401
 1550 06fc 0010A0E3 		mov	r1, #0	@,
 1551 0700 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1552 0704 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1553              	.LVL97:
 1554              		.loc 1 386 5 view .LVU402
 1555 0708 FEFFFFEA 		b	memset		@
 1556              	.LVL98:
 1557              	.L94:
 1558              		.align	2
 1559              	.L93:
 1560 070c 00000000 		.word	g_armwave_state
 1561              		.cfi_endproc
 1562              	.LFE66:
 1564              		.align	2
 1565              		.global	armwave_set_channel_colour
 1566              		.syntax unified
 1567              		.arm
 1568              		.fpu vfp
 1570              	armwave_set_channel_colour:
 1571              	.LVL99:
 1572              	.LFB67:
 387:armwave.c     **** }
 388:armwave.c     **** 
 389:armwave.c     **** /*
 390:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 391:armwave.c     ****  */
 392:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 393:armwave.c     **** {
 1573              		.loc 1 393 1 is_stmt 1 view -0
 1574              		.cfi_startproc
 1575              		@ args = 0, pretend = 0, frame = 0
 1576              		@ frame_needed = 0, uses_anonymous_args = 0
 1577              		@ link register save eliminated.
 394:armwave.c     ****     // Only 1ch supported for now
 395:armwave.c     ****     switch(ch) {
 1578              		.loc 1 395 5 view .LVU404
 1579 0710 010050E3 		cmp	r0, #1	@ ch,
 396:armwave.c     ****         case 1:
 397:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1580              		.loc 1 397 13 view .LVU405
 1581              	@ armwave.c:397:             g_armwave_state.ch1_color.r = r;
 1582              		.loc 1 397 41 is_stmt 0 view .LVU406
 1583 0714 0C009F05 		ldreq	r0, .L97	@ tmp117,
 1584              	.LVL100:
 1585              		.loc 1 397 41 view .LVU407
 1586 0718 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 398:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1587              		.loc 1 398 13 is_stmt 1 view .LVU408
 1588              	@ armwave.c:398:             g_armwave_state.ch1_color.g = g;
 1589              		.loc 1 398 41 is_stmt 0 view .LVU409
 1590 071c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 399:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1591              		.loc 1 399 13 is_stmt 1 view .LVU410
 1592              	@ armwave.c:399:             g_armwave_state.ch1_color.b = b;
 1593              		.loc 1 399 41 is_stmt 0 view .LVU411
 1594 0720 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 400:armwave.c     ****             break;
 1595              		.loc 1 400 13 is_stmt 1 view .LVU412
 1596              	@ armwave.c:402: }
 401:armwave.c     ****     }
 402:armwave.c     **** }
 1597              		.loc 1 402 1 is_stmt 0 view .LVU413
 1598 0724 1EFF2FE1 		bx	lr	@
 1599              	.L98:
 1600              		.align	2
 1601              	.L97:
 1602 0728 00000000 		.word	g_armwave_state
 1603              		.cfi_endproc
 1604              	.LFE67:
 1606              		.align	2
 1607              		.global	armwave_dump_ppm_debug
 1608              		.syntax unified
 1609              		.arm
 1610              		.fpu vfp
 1612              	armwave_dump_ppm_debug:
 1613              	.LVL101:
 1614              	.LFB68:
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Dump a ppm of a buffer to a file.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 408:armwave.c     **** {
 1615              		.loc 1 408 1 is_stmt 1 view -0
 1616              		.cfi_startproc
 1617              		@ args = 0, pretend = 0, frame = 0
 1618              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1619              		.loc 1 409 5 view .LVU415
 1620              	@ armwave.c:408: {
 408:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1621              		.loc 1 408 1 is_stmt 0 view .LVU416
 1622 072c 0130A0E1 		mov	r3, r1	@ fn, fn
 1623 0730 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1624              		.cfi_def_cfa_offset 28
 1625              		.cfi_offset 4, -28
 1626              		.cfi_offset 5, -24
 1627              		.cfi_offset 6, -20
 1628              		.cfi_offset 7, -16
 1629              		.cfi_offset 8, -12
 1630              		.cfi_offset 9, -8
 1631              		.cfi_offset 14, -4
 1632 0734 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1633 0738 0CD04DE2 		sub	sp, sp, #12	@,,
 1634              		.cfi_def_cfa_offset 40
 1635              	@ armwave.c:409:     FILE *fp = fopen(fn, "wb");
 1636              		.loc 1 409 16 view .LVU417
 1637 073c C4109FE5 		ldr	r1, .L107	@,
 1638              	.LVL102:
 1639              		.loc 1 409 16 view .LVU418
 1640 0740 0300A0E1 		mov	r0, r3	@, fn
 1641              	.LVL103:
 1642              		.loc 1 409 16 view .LVU419
 1643 0744 FEFFFFEB 		bl	fopen64		@
 1644              	.LVL104:
 1645              	@ armwave.c:416:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 410:armwave.c     ****     uint32_t data;
 411:armwave.c     ****     int xx, yy;
 412:armwave.c     **** 
 413:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 414:armwave.c     **** 
 415:armwave.c     ****     fputs("P3\n", fp);
 416:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1646              		.loc 1 416 5 view .LVU420
 1647 0748 BC609FE5 		ldr	r6, .L107+4	@ tmp150,
 1648              	@ armwave.c:415:     fputs("P3\n", fp);
 415:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1649              		.loc 1 415 5 view .LVU421
 1650 074c 0320A0E3 		mov	r2, #3	@,
 1651 0750 0110A0E3 		mov	r1, #1	@,
 1652              	@ armwave.c:409:     FILE *fp = fopen(fn, "wb");
 409:armwave.c     ****     uint32_t data;
 1653              		.loc 1 409 16 view .LVU422
 1654 0754 0070A0E1 		mov	r7, r0	@ fp,
 1655              	.LVL105:
 410:armwave.c     ****     uint32_t data;
 1656              		.loc 1 410 5 is_stmt 1 view .LVU423
 411:armwave.c     **** 
 1657              		.loc 1 411 5 view .LVU424
 415:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1658              		.loc 1 415 5 view .LVU425
 1659 0758 0030A0E1 		mov	r3, r0	@, fp
 1660 075c AC009FE5 		ldr	r0, .L107+8	@,
 1661              	.LVL106:
 415:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1662              		.loc 1 415 5 is_stmt 0 view .LVU426
 1663 0760 FEFFFFEB 		bl	fwrite		@
 1664              	.LVL107:
 1665              		.loc 1 416 5 is_stmt 1 view .LVU427
 1666 0764 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1667 0768 A4109FE5 		ldr	r1, .L107+12	@,
 1668 076c 0700A0E1 		mov	r0, r7	@, fp
 1669 0770 FEFFFFEB 		bl	fprintf		@
 1670              	.LVL108:
 417:armwave.c     ****     fputs("255\n", fp);
 1671              		.loc 1 417 5 view .LVU428
 1672 0774 0420A0E3 		mov	r2, #4	@,
 1673 0778 0730A0E1 		mov	r3, r7	@, fp
 1674 077c 0110A0E3 		mov	r1, #1	@,
 1675 0780 90009FE5 		ldr	r0, .L107+16	@,
 1676 0784 FEFFFFEB 		bl	fwrite		@
 1677              	.LVL109:
 418:armwave.c     **** 
 419:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1678              		.loc 1 419 5 view .LVU429
 1679              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1680              		.loc 1 419 37 is_stmt 0 view .LVU430
 1681 0788 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1682              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1683              		.loc 1 419 5 view .LVU431
 1684 078c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1685 0790 180000DA 		ble	.L100		@,
 1686 0794 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1687              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 421:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 422:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 423:armwave.c     **** 
 424:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1688              		.loc 1 424 13 view .LVU432
 1689 0798 7C909FE5 		ldr	r9, .L107+20	@ tmp152,
 1690              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 419:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1691              		.loc 1 419 12 view .LVU433
 1692 079c 0050A0E3 		mov	r5, #0	@ yy,
 1693              	.LVL110:
 1694              	.L101:
 1695              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1696              		.loc 1 420 9 view .LVU434
 1697 07a0 000053E3 		cmp	r3, #0	@ _13,
 1698              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1699              		.loc 1 420 16 view .LVU435
 1700 07a4 0040A0C3 		movgt	r4, #0	@ xx,
 1701              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1702              		.loc 1 420 9 view .LVU436
 1703 07a8 0F0000DA 		ble	.L103		@,
 1704              	.LVL111:
 1705              	.L102:
 421:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1706              		.loc 1 421 13 is_stmt 1 discriminator 3 view .LVU437
 1707              	@ armwave.c:421:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 421:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1708              		.loc 1 421 29 is_stmt 0 discriminator 3 view .LVU438
 1709 07ac 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1710              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1711              		.loc 1 424 13 discriminator 3 view .LVU439
 1712 07b0 0910A0E1 		mov	r1, r9	@, tmp152
 1713 07b4 0700A0E1 		mov	r0, r7	@, fp
 1714              	@ armwave.c:421:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 421:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1715              		.loc 1 421 18 discriminator 3 view .LVU440
 1716 07b8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1717              	.LVL112:
 1718              		.loc 1 424 13 is_stmt 1 discriminator 3 view .LVU441
 1719              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1720              		.loc 1 420 58 is_stmt 0 discriminator 3 view .LVU442
 1721 07bc 014084E2 		add	r4, r4, #1	@ xx, xx,
 1722              	.LVL113:
 1723              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1724              		.loc 1 424 81 discriminator 3 view .LVU443
 1725 07c0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1726              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1727              		.loc 1 424 61 discriminator 3 view .LVU444
 1728 07c4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1729              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1730              		.loc 1 424 13 discriminator 3 view .LVU445
 1731 07c8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1732 07cc 7330EFE6 		uxtb	r3, r3	@, tmp142
 1733 07d0 00C08DE5 		str	ip, [sp]	@ tmp147,
 1734 07d4 7220EFE6 		uxtb	r2, r2	@, data
 1735              	.LVL114:
 1736              		.loc 1 424 13 discriminator 3 view .LVU446
 1737 07d8 FEFFFFEB 		bl	fprintf		@
 1738              	.LVL115:
 1739              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1740              		.loc 1 420 41 discriminator 3 view .LVU447
 1741 07dc 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1742              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1743              		.loc 1 420 9 discriminator 3 view .LVU448
 1744 07e0 040053E1 		cmp	r3, r4	@ _13, xx
 1745 07e4 F0FFFFCA 		bgt	.L102		@,
 1746 07e8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1747              	.LVL116:
 1748              	.L103:
 1749              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 419:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1750              		.loc 1 419 55 discriminator 2 view .LVU449
 1751 07ec 015085E2 		add	r5, r5, #1	@ yy, yy,
 1752              	.LVL117:
 1753              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 419:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1754              		.loc 1 419 5 discriminator 2 view .LVU450
 1755 07f0 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1756 07f4 E9FFFFBA 		blt	.L101		@,
 1757              	.LVL118:
 1758              	.L100:
 425:armwave.c     ****         }
 426:armwave.c     ****     }
 427:armwave.c     **** 
 428:armwave.c     ****     fclose(fp);
 1759              		.loc 1 428 5 is_stmt 1 view .LVU451
 1760 07f8 0700A0E1 		mov	r0, r7	@, fp
 1761              	@ armwave.c:429: }
 429:armwave.c     **** }
 1762              		.loc 1 429 1 is_stmt 0 view .LVU452
 1763 07fc 0CD08DE2 		add	sp, sp, #12	@,,
 1764              		.cfi_def_cfa_offset 28
 1765              		@ sp needed	@
 1766 0800 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1767              		.cfi_restore 14
 1768              		.cfi_restore 9
 1769              		.cfi_restore 8
 1770              		.cfi_restore 7
 1771              		.cfi_restore 6
 1772              		.cfi_restore 5
 1773              		.cfi_restore 4
 1774              		.cfi_def_cfa_offset 0
 1775              	.LVL119:
 1776              	@ armwave.c:428:     fclose(fp);
 428:armwave.c     **** }
 1777              		.loc 1 428 5 view .LVU453
 1778 0804 FEFFFFEA 		b	fclose		@
 1779              	.LVL120:
 1780              	.L108:
 428:armwave.c     **** }
 1781              		.loc 1 428 5 view .LVU454
 1782              		.align	2
 1783              	.L107:
 1784 0808 F8010000 		.word	.LC15
 1785 080c 00000000 		.word	g_armwave_state
 1786 0810 FC010000 		.word	.LC16
 1787 0814 00020000 		.word	.LC17
 1788 0818 08020000 		.word	.LC18
 1789 081c 10020000 		.word	.LC19
 1790              		.cfi_endproc
 1791              	.LFE68:
 1793              		.align	2
 1794              		.global	armwave_test_init
 1795              		.syntax unified
 1796              		.arm
 1797              		.fpu vfp
 1799              	armwave_test_init:
 1800              	.LVL121:
 1801              	.LFB69:
 430:armwave.c     **** 
 431:armwave.c     **** /*
 432:armwave.c     ****  * Initialise some test functionry.
 433:armwave.c     ****  */
 434:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 435:armwave.c     **** {
 1802              		.loc 1 435 1 is_stmt 1 view -0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 0
 1805              		@ frame_needed = 0, uses_anonymous_args = 0
 436:armwave.c     ****     test_create_gamma();
 1806              		.loc 1 436 5 view .LVU456
 1807              	.LBB12:
 1808              	.LBI12:
  34:armwave.c     **** {
 1809              		.loc 1 34 6 view .LVU457
  34:armwave.c     **** {
 1810              		.loc 1 34 6 is_stmt 0 view .LVU458
 1811              	.LBE12:
 1812              	@ armwave.c:435: {
 435:armwave.c     ****     test_create_gamma();
 1813              		.loc 1 435 1 view .LVU459
 1814 0820 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1815              		.cfi_def_cfa_offset 32
 1816              		.cfi_offset 4, -32
 1817              		.cfi_offset 5, -28
 1818              		.cfi_offset 6, -24
 1819              		.cfi_offset 7, -20
 1820              		.cfi_offset 8, -16
 1821              		.cfi_offset 9, -12
 1822              		.cfi_offset 10, -8
 1823              		.cfi_offset 14, -4
 1824 0824 068B2DED 		vpush.64	{d8, d9, d10}	@
 1825              		.cfi_def_cfa_offset 56
 1826              		.cfi_offset 80, -56
 1827              		.cfi_offset 81, -52
 1828              		.cfi_offset 82, -48
 1829              		.cfi_offset 83, -44
 1830              		.cfi_offset 84, -40
 1831              		.cfi_offset 85, -36
 1832 0828 BC409FE5 		ldr	r4, .L113+20	@ ivtmp.79,
 1833              	.LBB15:
 1834              	.LBB13:
 1835              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1836              		.loc 1 40 32 view .LVU460
 1837 082c 2DAA9FED 		vldr.32	s20, .L113+16	@ tmp136,
 1838              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1839              		.loc 1 40 26 view .LVU461
 1840 0830 289B9FED 		vldr.64	d9, .L113	@ tmp151,
 1841              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1842              		.loc 1 40 49 view .LVU462
 1843 0834 298B9FED 		vldr.64	d8, .L113+8	@ tmp139,
 1844 0838 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1845              	.LBE13:
 1846              	.LBE15:
 1847              	@ armwave.c:435: {
 435:armwave.c     ****     test_create_gamma();
 1848              		.loc 1 435 1 view .LVU463
 1849 083c 10D04DE2 		sub	sp, sp, #16	@,,
 1850              		.cfi_def_cfa_offset 72
 1851              	@ armwave.c:435: {
 435:armwave.c     ****     test_create_gamma();
 1852              		.loc 1 435 1 view .LVU464
 1853 0840 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1854 0844 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1855 0848 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1856 084c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1857 0850 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1858 0854 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1859              	.LVL122:
 1860              	.L110:
 1861              	.LBB16:
 1862              	.LBB14:
  40:armwave.c     ****     }
 1863              		.loc 1 40 9 is_stmt 1 view .LVU465
 1864              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1865              		.loc 1 40 32 is_stmt 0 view .LVU466
 1866 0858 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1867              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1868              		.loc 1 40 26 view .LVU467
 1869 085c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1870              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1871              		.loc 1 40 32 view .LVU468
 1872 0860 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1873 0864 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1874 0868 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1875              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1876              		.loc 1 40 26 view .LVU469
 1877 086c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1878 0870 FEFFFFEB 		bl	pow		@
 1879              	.LVL123:
 1880              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1881              		.loc 1 40 49 view .LVU470
 1882 0874 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1883              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1884              		.loc 1 40 24 view .LVU471
 1885 0878 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1886 087c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1887 0880 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1888              	.LVL124:
 1889              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1890              		.loc 1 39 5 view .LVU472
 1891 0884 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1892 0888 F2FFFF1A 		bne	.L110		@,
 1893              	.LVL125:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1894              		.loc 1 39 5 view .LVU473
 1895              	.LBE14:
 1896              	.LBE16:
 437:armwave.c     **** 
 438:armwave.c     ****     // make ch1 yellowish by default
 439:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1897              		.loc 1 439 5 is_stmt 1 view .LVU474
 1898              	.LBB17:
 1899              	.LBI17:
 392:armwave.c     **** {
 1900              		.loc 1 392 6 view .LVU475
 1901              	.LBB18:
 395:armwave.c     ****         case 1:
 1902              		.loc 1 395 5 view .LVU476
 397:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1903              		.loc 1 397 13 view .LVU477
 398:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1904              		.loc 1 398 13 view .LVU478
 1905              	@ armwave.c:397:             g_armwave_state.ch1_color.r = r;
 397:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1906              		.loc 1 397 41 is_stmt 0 view .LVU479
 1907 088c 5CC09FE5 		ldr	ip, .L113+24	@ tmp142,
 1908 0890 5C409FE5 		ldr	r4, .L113+28	@ tmp143,
 1909              	.LBE18:
 1910              	.LBE17:
 1911              	@ armwave.c:441:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 440:armwave.c     **** 
 441:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1912              		.loc 1 441 5 view .LVU480
 1913 0894 0000A0E3 		mov	r0, #0	@ tmp147,
 1914              	.LBB22:
 1915              	.LBB19:
 1916              	@ armwave.c:399:             g_armwave_state.ch1_color.b = b;
 399:armwave.c     ****             break;
 1917              		.loc 1 399 41 view .LVU481
 1918 0898 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1919              	.LBE19:
 1920              	.LBE22:
 1921              	@ armwave.c:441:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1922              		.loc 1 441 5 view .LVU482
 1923 089c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1924 08a0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1925 08a4 00808DE5 		str	r8, [sp]	@ render_width,
 1926 08a8 0610A0E1 		mov	r1, r6	@, tmp3
 1927 08ac 0720A0E1 		mov	r2, r7	@, nwaves
 1928              	.LBB23:
 1929              	.LBB20:
 1930              	@ armwave.c:397:             g_armwave_state.ch1_color.r = r;
 397:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1931              		.loc 1 397 41 view .LVU483
 1932 08b0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 399:armwave.c     ****             break;
 1933              		.loc 1 399 13 is_stmt 1 view .LVU484
 1934              	.LBE20:
 1935              	.LBE23:
 1936              	@ armwave.c:441:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1937              		.loc 1 441 5 is_stmt 0 view .LVU485
 1938 08b4 0630A0E1 		mov	r3, r6	@, wave_size
 1939              	.LBB24:
 1940              	.LBB21:
 1941              	@ armwave.c:399:             g_armwave_state.ch1_color.b = b;
 399:armwave.c     ****             break;
 1942              		.loc 1 399 41 view .LVU486
 1943 08b8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 400:armwave.c     ****     }
 1944              		.loc 1 400 13 is_stmt 1 view .LVU487
 1945              	.LVL126:
 400:armwave.c     ****     }
 1946              		.loc 1 400 13 is_stmt 0 view .LVU488
 1947              	.LBE21:
 1948              	.LBE24:
 1949              		.loc 1 441 5 is_stmt 1 view .LVU489
 1950 08bc FEFFFFEB 		bl	armwave_setup_render		@
 1951              	.LVL127:
 442:armwave.c     **** 
 443:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1952              		.loc 1 443 5 view .LVU490
 1953 08c0 30109FE5 		ldr	r1, .L113+32	@,
 1954 08c4 30009FE5 		ldr	r0, .L113+36	@,
 1955              	@ armwave.c:444: }
 444:armwave.c     **** }
 1956              		.loc 1 444 1 is_stmt 0 view .LVU491
 1957 08c8 10D08DE2 		add	sp, sp, #16	@,,
 1958              		.cfi_def_cfa_offset 56
 1959              		@ sp needed	@
 1960 08cc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1961              		.cfi_restore 84
 1962              		.cfi_restore 85
 1963              		.cfi_restore 82
 1964              		.cfi_restore 83
 1965              		.cfi_restore 80
 1966              		.cfi_restore 81
 1967              		.cfi_def_cfa_offset 32
 1968 08d0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1969              		.cfi_restore 14
 1970              		.cfi_restore 10
 1971              		.cfi_restore 9
 1972              		.cfi_restore 8
 1973              		.cfi_restore 7
 1974              		.cfi_restore 6
 1975              		.cfi_restore 5
 1976              		.cfi_restore 4
 1977              		.cfi_def_cfa_offset 0
 1978              	.LVL128:
 1979              	@ armwave.c:443:     printf("armwave version: %s\n", ARMWAVE_VER);
 443:armwave.c     **** }
 1980              		.loc 1 443 5 view .LVU492
 1981 08d4 FEFFFFEA 		b	printf		@
 1982              	.LVL129:
 1983              	.L114:
 1984              		.align	3
 1985              	.L113:
 1986 08d8 000000C0 		.word	-1073741824
 1987 08dc CCCCEC3F 		.word	1072483532
 1988 08e0 00000000 		.word	0
 1989 08e4 00E06F40 		.word	1081073664
 1990 08e8 00007F43 		.word	1132396544
 1991 08ec FFFFFFFF 		.word	gamma_table-1
 1992 08f0 00000000 		.word	g_armwave_state
 1993 08f4 F609F406 		.word	116656630
 1994 08f8 00000000 		.word	.LC0
 1995 08fc 08000000 		.word	.LC1
 1996              		.cfi_endproc
 1997              	.LFE69:
 1999              		.align	2
 2000              		.global	armwave_test_fill_outbuf
 2001              		.syntax unified
 2002              		.arm
 2003              		.fpu vfp
 2005              	armwave_test_fill_outbuf:
 2006              	.LFB70:
 445:armwave.c     **** 
 446:armwave.c     **** /*
 447:armwave.c     ****  * Render image to the local allocated buffer.
 448:armwave.c     ****  */
 449:armwave.c     **** void armwave_test_fill_outbuf()
 450:armwave.c     **** {
 2007              		.loc 1 450 1 is_stmt 1 view -0
 2008              		.cfi_startproc
 2009              		@ args = 0, pretend = 0, frame = 8
 2010              		@ frame_needed = 0, uses_anonymous_args = 0
 451:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2011              		.loc 1 451 5 view .LVU494
 2012 0900 50C19FE5 		ldr	ip, .L136	@ tmp204,
 2013              	@ armwave.c:450: {
 450:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2014              		.loc 1 450 1 is_stmt 0 view .LVU495
 2015 0904 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2016              		.cfi_def_cfa_offset 36
 2017              		.cfi_offset 4, -36
 2018              		.cfi_offset 5, -32
 2019              		.cfi_offset 6, -28
 2020              		.cfi_offset 7, -24
 2021              		.cfi_offset 8, -20
 2022              		.cfi_offset 9, -16
 2023              		.cfi_offset 10, -12
 2024              		.cfi_offset 11, -8
 2025              		.cfi_offset 14, -4
 2026 0908 0CD04DE2 		sub	sp, sp, #12	@,,
 2027              		.cfi_def_cfa_offset 48
 2028              	@ armwave.c:451:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2029              		.loc 1 451 5 view .LVU496
 2030 090c 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2031              	.LVL130:
 2032              	.LBB27:
 2033              	.LBI27:
 168:armwave.c     **** {
 2034              		.loc 1 168 6 is_stmt 1 view .LVU497
 2035              	.LBB28:
 170:armwave.c     ****     // uint32_t ysub;
 2036              		.loc 1 170 5 view .LVU498
 172:armwave.c     ****     uint8_t r, g, b, value; 
 2037              		.loc 1 172 5 view .LVU499
 173:armwave.c     ****     // uint8_t row;
 2038              		.loc 1 173 5 view .LVU500
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2039              		.loc 1 175 5 view .LVU501
 2040              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2041              		.loc 1 175 15 is_stmt 0 view .LVU502
 2042 0910 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2043              	.LVL131:
 176:armwave.c     ****     uint32_t offset;
 2044              		.loc 1 176 5 is_stmt 1 view .LVU503
 177:armwave.c     **** 
 2045              		.loc 1 177 5 view .LVU504
 179:armwave.c     **** 
 2046              		.loc 1 179 5 view .LVU505
 2047 0914 000058E3 		cmp	r8, #0	@ _1,
 2048 0918 4900000A 		beq	.L134		@,
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2049              		.loc 1 181 5 view .LVU506
 2050              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2051              		.loc 1 181 10 is_stmt 0 view .LVU507
 2052 091c 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2053 0920 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2054              	.LVL132:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2055              		.loc 1 184 5 is_stmt 1 view .LVU508
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2056              		.loc 1 184 5 is_stmt 0 view .LVU509
 2057 0924 000057E3 		cmp	r7, #0	@ npix,
 2058 0928 0A0000DA 		ble	.L115		@,
 2059              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2060              		.loc 1 196 52 view .LVU510
 2061 092c FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2062              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2063              		.loc 1 197 52 view .LVU511
 2064 0930 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2065              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2066              		.loc 1 198 52 view .LVU512
 2067 0934 F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2068              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2069              		.loc 1 220 57 view .LVU513
 2070 0938 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2071              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2072              		.loc 1 184 11 view .LVU514
 2073 093c 00E0A0E3 		mov	lr, #0	@ n,
 2074              	.LVL133:
 2075              	.L122:
 188:armwave.c     **** 
 2076              		.loc 1 188 9 is_stmt 1 view .LVU515
 2077              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 2078              		.loc 1 188 19 is_stmt 0 view .LVU516
 2079 0940 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2080              	.LVL134:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2081              		.loc 1 190 9 is_stmt 1 view .LVU517
 2082              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2083              		.loc 1 190 11 is_stmt 0 view .LVU518
 2084 0944 000050E3 		cmp	r0, #0	@ wave_word,
 2085 0948 0400001A 		bne	.L131		@,
 2086 094c 04E08EE2 		add	lr, lr, #4	@ n, n,
 2087              	.L118:
 2088              	.LVL135:
 2089              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2090              		.loc 1 184 5 view .LVU519
 2091 0950 0E0057E1 		cmp	r7, lr	@ npix, n
 2092 0954 F9FFFFCA 		bgt	.L122		@,
 2093              	.LVL136:
 2094              	.L115:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2095              		.loc 1 184 5 view .LVU520
 2096              	.LBE28:
 2097              	.LBE27:
 2098              	@ armwave.c:452: }
 452:armwave.c     **** }
 2099              		.loc 1 452 1 view .LVU521
 2100 0958 0CD08DE2 		add	sp, sp, #12	@,,
 2101              		.cfi_remember_state
 2102              		.cfi_def_cfa_offset 36
 2103              		@ sp needed	@
 2104 095c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2105              	.LVL137:
 2106              	.L131:
 2107              		.cfi_restore_state
 2108              	.LBB30:
 2109              	.LBB29:
 2110              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2111              		.loc 1 195 19 view .LVU522
 2112 0960 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2113              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2114              		.loc 1 190 11 view .LVU523
 2115 0964 0E60A0E1 		mov	r6, lr	@ ivtmp.89, n
 2116              	.LVL138:
 192:armwave.c     ****                 wave_word >>= 8;
 2117              		.loc 1 192 17 is_stmt 1 view .LVU524
 193:armwave.c     **** 
 2118              		.loc 1 193 17 view .LVU525
 2119              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2120              		.loc 1 193 27 is_stmt 0 view .LVU526
 2121 0968 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2122              	.LVL139:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2123              		.loc 1 195 17 is_stmt 1 view .LVU527
 2124 096c 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.89,
 2125              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2126              		.loc 1 195 19 is_stmt 0 view .LVU528
 2127 0970 0500001A 		bne	.L135		@,
 2128              	.LVL140:
 2129              	.L119:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2130              		.loc 1 195 19 view .LVU529
 2131 0974 016086E2 		add	r6, r6, #1	@ ivtmp.89, ivtmp.89,
 2132              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 2133              		.loc 1 191 13 view .LVU530
 2134 0978 06005EE1 		cmp	lr, r6	@ n, ivtmp.89
 2135 097c F3FFFF0A 		beq	.L118		@,
 192:armwave.c     ****                 wave_word >>= 8;
 2136              		.loc 1 192 17 is_stmt 1 view .LVU531
 2137              	.LVL141:
 193:armwave.c     **** 
 2138              		.loc 1 193 17 view .LVU532
 2139              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2140              		.loc 1 195 19 is_stmt 0 view .LVU533
 2141 0980 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2142              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2143              		.loc 1 193 27 view .LVU534
 2144 0984 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2145              	.LVL142:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2146              		.loc 1 195 17 is_stmt 1 view .LVU535
 2147              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2148              		.loc 1 195 19 is_stmt 0 view .LVU536
 2149 0988 F9FFFF0A 		beq	.L119		@,
 2150              	.L135:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2151              		.loc 1 196 21 is_stmt 1 view .LVU537
 2152              	.LVL143:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2153              		.loc 1 197 21 view .LVU538
 198:armwave.c     **** 
 2154              		.loc 1 198 21 view .LVU539
 200:armwave.c     ****                     g = MIN(gg, 255);
 2155              		.loc 1 200 21 view .LVU540
 201:armwave.c     ****                     b = MIN(bb, 255);
 2156              		.loc 1 201 21 view .LVU541
 202:armwave.c     **** 
 2157              		.loc 1 202 21 view .LVU542
 205:armwave.c     **** 
 2158              		.loc 1 205 21 view .LVU543
 2159              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2160              		.loc 1 220 32 is_stmt 0 view .LVU544
 2161 098c 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.89
 2162              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2163              		.loc 1 221 41 view .LVU545
 2164 0990 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2165              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2166              		.loc 1 220 40 view .LVU546
 2167 0994 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2168              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2169              		.loc 1 221 41 view .LVU547
 2170 0998 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2171              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2172              		.loc 1 198 55 view .LVU548
 2173 099c 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2174              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2175              		.loc 1 220 40 view .LVU549
 2176 09a0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2177              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2178              		.loc 1 221 46 view .LVU550
 2179 09a4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2180              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2181              		.loc 1 197 55 view .LVU551
 2182 09a8 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2183              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2184              		.loc 1 198 24 view .LVU552
 2185 09ac 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2186              	.LVL144:
 2187              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2188              		.loc 1 202 25 view .LVU553
 2189 09b0 FF0053E3 		cmp	r3, #255	@ bb,
 2190              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2191              		.loc 1 197 24 view .LVU554
 2192 09b4 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2193              	.LVL145:
 2194              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2195              		.loc 1 202 25 view .LVU555
 2196 09b8 FF30A0A3 		movge	r3, #255	@ bb,
 2197              	.LVL146:
 2198              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2199              		.loc 1 220 40 view .LVU556
 2200 09bc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2201              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2202              		.loc 1 221 46 view .LVU557
 2203 09c0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2204              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 2205              		.loc 1 201 25 view .LVU558
 2206 09c4 FF0052E3 		cmp	r2, #255	@ gg,
 2207 09c8 FF20A0A3 		movge	r2, #255	@ gg,
 2208              	.LVL147:
 2209              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2210              		.loc 1 196 55 view .LVU559
 2211 09cc 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2212              	.LVL148:
 2213              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2214              		.loc 1 205 56 view .LVU560
 2215 09d0 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2216              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2217              		.loc 1 205 44 view .LVU561
 2218 09d4 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2219              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2220              		.loc 1 220 24 view .LVU562
 2221 09d8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2222              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2223              		.loc 1 196 24 view .LVU563
 2224 09dc 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2225              	.LVL149:
 2226              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2227              		.loc 1 205 56 view .LVU564
 2228 09e0 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2229              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2230              		.loc 1 205 44 view .LVU565
 2231 09e4 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2232              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2233              		.loc 1 200 25 view .LVU566
 2234 09e8 FF0051E3 		cmp	r1, #255	@ rr,
 2235              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2236              		.loc 1 205 51 view .LVU567
 2237 09ec 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2238              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2239              		.loc 1 200 25 view .LVU568
 2240 09f0 FF10A0A3 		movge	r1, #255	@ rr,
 2241              	.LVL150:
 2242              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2243              		.loc 1 220 24 view .LVU569
 2244 09f4 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2245              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2246              		.loc 1 221 24 view .LVU570
 2247 09f8 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2248              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2249              		.loc 1 205 62 view .LVU571
 2250 09fc 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2251 0a00 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2252              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2253              		.loc 1 205 26 view .LVU572
 2254 0a04 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2255              	.LVL151:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2256              		.loc 1 219 21 is_stmt 1 view .LVU573
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2257              		.loc 1 220 21 view .LVU574
 221:armwave.c     ****                     xx = (nsub >> 8);
 2258              		.loc 1 221 21 view .LVU575
 222:armwave.c     **** 
 2259              		.loc 1 222 21 view .LVU576
 2260              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 2261              		.loc 1 222 32 is_stmt 0 view .LVU577
 2262 0a08 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.89,
 2263              	.LVL152:
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2264              		.loc 1 224 21 is_stmt 1 view .LVU578
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2265              		.loc 1 224 21 is_stmt 0 view .LVU579
 2266 0a0c 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2267              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2268              		.loc 1 221 24 view .LVU580
 2269 0a10 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2270              	.LVL153:
 2271              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2272              		.loc 1 224 21 view .LVU581
 2273 0a14 020054E1 		cmp	r4, r2	@ yy, ye
 2274 0a18 D5FFFF2A 		bcs	.L119		@,
 2275 0a1c 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2276              	.LVL154:
 2277              	.L120:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2278              		.loc 1 225 25 is_stmt 1 view .LVU582
 226:armwave.c     ****                     }
 2279              		.loc 1 226 25 view .LVU583
 2280              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2281              		.loc 1 225 43 is_stmt 0 view .LVU584
 2282 0a20 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2283              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2284              		.loc 1 224 21 view .LVU585
 2285 0a24 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2286              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2287              		.loc 1 226 43 view .LVU586
 2288 0a28 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2289              	.LVL155:
 2290              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2291              		.loc 1 224 42 view .LVU587
 2292 0a2c 014084E2 		add	r4, r4, #1	@ yy, yy,
 2293              	.LVL156:
 2294              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2295              		.loc 1 224 21 view .LVU588
 2296 0a30 040050E1 		cmp	r0, r4	@ ye, yy
 2297              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2298              		.loc 1 226 53 view .LVU589
 2299 0a34 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2300              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2301              		.loc 1 224 21 view .LVU590
 2302 0a38 F8FFFF1A 		bne	.L120		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2303              		.loc 1 224 21 view .LVU591
 2304 0a3c 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2305 0a40 CBFFFFEA 		b	.L119		@
 2306              	.LVL157:
 2307              	.L134:
 179:armwave.c     **** 
 2308              		.loc 1 179 5 is_stmt 1 view .LVU592
 2309 0a44 10309FE5 		ldr	r3, .L136+4	@,
 2310 0a48 B320A0E3 		mov	r2, #179	@,
 2311 0a4c 0C109FE5 		ldr	r1, .L136+8	@,
 2312 0a50 0C009FE5 		ldr	r0, .L136+12	@,
 2313 0a54 FEFFFFEB 		bl	__assert_fail		@
 2314              	.LVL158:
 2315              	.L137:
 2316              		.align	2
 2317              	.L136:
 2318 0a58 00000000 		.word	g_armwave_state
 2319 0a5c 00000000 		.word	.LANCHOR0
 2320 0a60 84000000 		.word	.LC4
 2321 0a64 90000000 		.word	.LC5
 2322              	.LBE29:
 2323              	.LBE30:
 2324              		.cfi_endproc
 2325              	.LFE70:
 2327              		.align	2
 2328              		.global	armwave_test_dump_buffer_to_ppm
 2329              		.syntax unified
 2330              		.arm
 2331              		.fpu vfp
 2333              	armwave_test_dump_buffer_to_ppm:
 2334              	.LVL159:
 2335              	.LFB71:
 453:armwave.c     **** 
 454:armwave.c     **** /*
 455:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 456:armwave.c     ****  */
 457:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 458:armwave.c     **** {
 2336              		.loc 1 458 1 view -0
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 0
 2339              		@ frame_needed = 0, uses_anonymous_args = 0
 2340              		@ link register save eliminated.
 459:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2341              		.loc 1 459 5 view .LVU594
 2342 0a68 08309FE5 		ldr	r3, .L139	@ tmp112,
 2343 0a6c 0010A0E1 		mov	r1, r0	@, fn
 2344 0a70 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2345              	.LVL160:
 2346              		.loc 1 459 5 is_stmt 0 view .LVU595
 2347 0a74 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2348              	.LVL161:
 2349              	.L140:
 2350              		.loc 1 459 5 view .LVU596
 2351              		.align	2
 2352              	.L139:
 2353 0a78 00000000 		.word	g_armwave_state
 2354              		.cfi_endproc
 2355              	.LFE71:
 2357              		.align	2
 2358              		.global	armwave_test_fill_gdkbuf
 2359              		.syntax unified
 2360              		.arm
 2361              		.fpu vfp
 2363              	armwave_test_fill_gdkbuf:
 2364              	.LVL162:
 2365              	.LFB72:
 460:armwave.c     **** }
 461:armwave.c     **** 
 462:armwave.c     **** /*
 463:armwave.c     ****  * Render GDK buffer with test funtionry.
 464:armwave.c     ****  */
 465:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 466:armwave.c     **** {
 2366              		.loc 1 466 1 is_stmt 1 view -0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 8
 2369              		@ frame_needed = 0, uses_anonymous_args = 0
 467:armwave.c     ****     //PyObject *mv;
 468:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 469:armwave.c     **** 
 470:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 471:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2370              		.loc 1 471 5 view .LVU598
 2371              	@ armwave.c:471:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2372              		.loc 1 471 11 is_stmt 0 view .LVU599
 2373 0a7c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2374              	@ armwave.c:466: {
 466:armwave.c     ****     //PyObject *mv;
 2375              		.loc 1 466 1 view .LVU600
 2376 0a80 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2377              		.cfi_def_cfa_offset 36
 2378              		.cfi_offset 4, -36
 2379              		.cfi_offset 5, -32
 2380              		.cfi_offset 6, -28
 2381              		.cfi_offset 7, -24
 2382              		.cfi_offset 8, -20
 2383              		.cfi_offset 9, -16
 2384              		.cfi_offset 10, -12
 2385              		.cfi_offset 11, -8
 2386              		.cfi_offset 14, -4
 2387 0a84 0CD04DE2 		sub	sp, sp, #12	@,,
 2388              		.cfi_def_cfa_offset 48
 2389              	.LBB33:
 2390              	.LBB34:
 2391              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2392              		.loc 1 175 15 view .LVU601
 2393 0a88 48519FE5 		ldr	r5, .L162	@ tmp206,
 2394              	.LBE34:
 2395              	.LBE33:
 2396              	@ armwave.c:471:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2397              		.loc 1 471 11 view .LVU602
 2398 0a8c 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2399              	.LVL163:
 472:armwave.c     ****     
 473:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 474:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2400              		.loc 1 474 5 is_stmt 1 view .LVU603
 2401              	.LBB37:
 2402              	.LBI33:
 168:armwave.c     **** {
 2403              		.loc 1 168 6 view .LVU604
 2404              	.LBB35:
 170:armwave.c     ****     // uint32_t ysub;
 2405              		.loc 1 170 5 view .LVU605
 172:armwave.c     ****     uint8_t r, g, b, value; 
 2406              		.loc 1 172 5 view .LVU606
 173:armwave.c     ****     // uint8_t row;
 2407              		.loc 1 173 5 view .LVU607
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2408              		.loc 1 175 5 view .LVU608
 2409              	@ armwave.c:179:     assert(out_buffer != NULL);
 179:armwave.c     **** 
 2410              		.loc 1 179 5 is_stmt 0 view .LVU609
 2411 0a90 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2412              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2413              		.loc 1 175 15 view .LVU610
 2414 0a94 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2415              	.LVL164:
 176:armwave.c     ****     uint32_t offset;
 2416              		.loc 1 176 5 is_stmt 1 view .LVU611
 177:armwave.c     **** 
 2417              		.loc 1 177 5 view .LVU612
 179:armwave.c     **** 
 2418              		.loc 1 179 5 view .LVU613
 2419 0a98 4900000A 		beq	.L160		@,
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2420              		.loc 1 181 5 view .LVU614
 2421              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2422              		.loc 1 181 10 is_stmt 0 view .LVU615
 2423 0a9c 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2424 0aa0 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2425              	.LVL165:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2426              		.loc 1 184 5 is_stmt 1 view .LVU616
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2427              		.loc 1 184 5 is_stmt 0 view .LVU617
 2428 0aa4 000057E3 		cmp	r7, #0	@ npix,
 2429 0aa8 0A0000DA 		ble	.L141		@,
 2430              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2431              		.loc 1 196 52 view .LVU618
 2432 0aac FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2433              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2434              		.loc 1 197 52 view .LVU619
 2435 0ab0 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2436              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2437              		.loc 1 198 52 view .LVU620
 2438 0ab4 F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2439              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2440              		.loc 1 220 57 view .LVU621
 2441 0ab8 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2442              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2443              		.loc 1 184 11 view .LVU622
 2444 0abc 00C0A0E3 		mov	ip, #0	@ n,
 2445              	.LVL166:
 2446              	.L148:
 188:armwave.c     **** 
 2447              		.loc 1 188 9 is_stmt 1 view .LVU623
 2448              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 2449              		.loc 1 188 19 is_stmt 0 view .LVU624
 2450 0ac0 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2451              	.LVL167:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2452              		.loc 1 190 9 is_stmt 1 view .LVU625
 2453              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2454              		.loc 1 190 11 is_stmt 0 view .LVU626
 2455 0ac4 000050E3 		cmp	r0, #0	@ wave_word,
 2456 0ac8 0400001A 		bne	.L157		@,
 2457 0acc 04C08CE2 		add	ip, ip, #4	@ n, n,
 2458              	.L144:
 2459              	.LVL168:
 2460              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2461              		.loc 1 184 5 view .LVU627
 2462 0ad0 0C0057E1 		cmp	r7, ip	@ npix, n
 2463 0ad4 F9FFFFCA 		bgt	.L148		@,
 2464              	.LVL169:
 2465              	.L141:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2466              		.loc 1 184 5 view .LVU628
 2467              	.LBE35:
 2468              	.LBE37:
 2469              	@ armwave.c:475: }
 475:armwave.c     **** }
 2470              		.loc 1 475 1 view .LVU629
 2471 0ad8 0CD08DE2 		add	sp, sp, #12	@,,
 2472              		.cfi_remember_state
 2473              		.cfi_def_cfa_offset 36
 2474              		@ sp needed	@
 2475 0adc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2476              	.LVL170:
 2477              	.L157:
 2478              		.cfi_restore_state
 2479              	.LBB38:
 2480              	.LBB36:
 2481              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2482              		.loc 1 195 19 view .LVU630
 2483 0ae0 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2484              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2485              		.loc 1 190 11 view .LVU631
 2486 0ae4 0C60A0E1 		mov	r6, ip	@ ivtmp.105, n
 2487              	.LVL171:
 192:armwave.c     ****                 wave_word >>= 8;
 2488              		.loc 1 192 17 is_stmt 1 view .LVU632
 193:armwave.c     **** 
 2489              		.loc 1 193 17 view .LVU633
 2490              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2491              		.loc 1 193 27 is_stmt 0 view .LVU634
 2492 0ae8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2493              	.LVL172:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2494              		.loc 1 195 17 is_stmt 1 view .LVU635
 2495 0aec 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.105,
 2496              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2497              		.loc 1 195 19 is_stmt 0 view .LVU636
 2498 0af0 0500001A 		bne	.L161		@,
 2499              	.LVL173:
 2500              	.L145:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2501              		.loc 1 195 19 view .LVU637
 2502 0af4 016086E2 		add	r6, r6, #1	@ ivtmp.105, ivtmp.105,
 2503              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 2504              		.loc 1 191 13 view .LVU638
 2505 0af8 06005CE1 		cmp	ip, r6	@ n, ivtmp.105
 2506 0afc F3FFFF0A 		beq	.L144		@,
 192:armwave.c     ****                 wave_word >>= 8;
 2507              		.loc 1 192 17 is_stmt 1 view .LVU639
 2508              	.LVL174:
 193:armwave.c     **** 
 2509              		.loc 1 193 17 view .LVU640
 2510              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2511              		.loc 1 195 19 is_stmt 0 view .LVU641
 2512 0b00 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2513              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2514              		.loc 1 193 27 view .LVU642
 2515 0b04 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2516              	.LVL175:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2517              		.loc 1 195 17 is_stmt 1 view .LVU643
 2518              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2519              		.loc 1 195 19 is_stmt 0 view .LVU644
 2520 0b08 F9FFFF0A 		beq	.L145		@,
 2521              	.L161:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2522              		.loc 1 196 21 is_stmt 1 view .LVU645
 2523              	.LVL176:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2524              		.loc 1 197 21 view .LVU646
 198:armwave.c     **** 
 2525              		.loc 1 198 21 view .LVU647
 200:armwave.c     ****                     g = MIN(gg, 255);
 2526              		.loc 1 200 21 view .LVU648
 201:armwave.c     ****                     b = MIN(bb, 255);
 2527              		.loc 1 201 21 view .LVU649
 202:armwave.c     **** 
 2528              		.loc 1 202 21 view .LVU650
 205:armwave.c     **** 
 2529              		.loc 1 205 21 view .LVU651
 2530              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2531              		.loc 1 220 32 is_stmt 0 view .LVU652
 2532 0b0c 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.105
 2533              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2534              		.loc 1 221 41 view .LVU653
 2535 0b10 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2536              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2537              		.loc 1 220 40 view .LVU654
 2538 0b14 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2539              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2540              		.loc 1 221 41 view .LVU655
 2541 0b18 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2542              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2543              		.loc 1 198 55 view .LVU656
 2544 0b1c 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2545              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2546              		.loc 1 220 40 view .LVU657
 2547 0b20 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2548              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2549              		.loc 1 221 46 view .LVU658
 2550 0b24 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2551              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2552              		.loc 1 197 55 view .LVU659
 2553 0b28 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2554              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2555              		.loc 1 198 24 view .LVU660
 2556 0b2c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2557              	.LVL177:
 2558              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2559              		.loc 1 202 25 view .LVU661
 2560 0b30 FF0053E3 		cmp	r3, #255	@ bb,
 2561              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2562              		.loc 1 197 24 view .LVU662
 2563 0b34 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2564              	.LVL178:
 2565              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2566              		.loc 1 202 25 view .LVU663
 2567 0b38 FF30A0A3 		movge	r3, #255	@ bb,
 2568              	.LVL179:
 2569              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2570              		.loc 1 220 40 view .LVU664
 2571 0b3c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2572              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2573              		.loc 1 221 46 view .LVU665
 2574 0b40 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2575              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 2576              		.loc 1 201 25 view .LVU666
 2577 0b44 FF0052E3 		cmp	r2, #255	@ gg,
 2578 0b48 FF20A0A3 		movge	r2, #255	@ gg,
 2579              	.LVL180:
 2580              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2581              		.loc 1 196 55 view .LVU667
 2582 0b4c 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2583              	.LVL181:
 2584              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2585              		.loc 1 205 56 view .LVU668
 2586 0b50 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2587              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2588              		.loc 1 205 44 view .LVU669
 2589 0b54 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2590              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2591              		.loc 1 220 24 view .LVU670
 2592 0b58 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2593              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2594              		.loc 1 196 24 view .LVU671
 2595 0b5c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2596              	.LVL182:
 2597              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2598              		.loc 1 205 56 view .LVU672
 2599 0b60 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2600              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2601              		.loc 1 205 44 view .LVU673
 2602 0b64 FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2603              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2604              		.loc 1 200 25 view .LVU674
 2605 0b68 FF0051E3 		cmp	r1, #255	@ rr,
 2606              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2607              		.loc 1 205 51 view .LVU675
 2608 0b6c 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2609              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2610              		.loc 1 200 25 view .LVU676
 2611 0b70 FF10A0A3 		movge	r1, #255	@ rr,
 2612              	.LVL183:
 2613              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2614              		.loc 1 220 24 view .LVU677
 2615 0b74 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2616              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2617              		.loc 1 221 24 view .LVU678
 2618 0b78 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2619              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2620              		.loc 1 205 62 view .LVU679
 2621 0b7c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2622 0b80 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2623              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2624              		.loc 1 205 26 view .LVU680
 2625 0b84 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2626              	.LVL184:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2627              		.loc 1 219 21 is_stmt 1 view .LVU681
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2628              		.loc 1 220 21 view .LVU682
 221:armwave.c     ****                     xx = (nsub >> 8);
 2629              		.loc 1 221 21 view .LVU683
 222:armwave.c     **** 
 2630              		.loc 1 222 21 view .LVU684
 2631              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 2632              		.loc 1 222 32 is_stmt 0 view .LVU685
 2633 0b88 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.105,
 2634              	.LVL185:
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2635              		.loc 1 224 21 is_stmt 1 view .LVU686
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2636              		.loc 1 224 21 is_stmt 0 view .LVU687
 2637 0b8c 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2638              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2639              		.loc 1 221 24 view .LVU688
 2640 0b90 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2641              	.LVL186:
 2642              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2643              		.loc 1 224 21 view .LVU689
 2644 0b94 02005EE1 		cmp	lr, r2	@ yy, ye
 2645 0b98 D5FFFF2A 		bcs	.L145		@,
 2646 0b9c 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2647              	.LVL187:
 2648              	.L146:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2649              		.loc 1 225 25 is_stmt 1 view .LVU690
 226:armwave.c     ****                     }
 2650              		.loc 1 226 25 view .LVU691
 2651              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2652              		.loc 1 225 43 is_stmt 0 view .LVU692
 2653 0ba0 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2654              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2655              		.loc 1 224 21 view .LVU693
 2656 0ba4 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2657              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2658              		.loc 1 226 43 view .LVU694
 2659 0ba8 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2660              	.LVL188:
 2661              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2662              		.loc 1 224 42 view .LVU695
 2663 0bac 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2664              	.LVL189:
 2665              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2666              		.loc 1 224 21 view .LVU696
 2667 0bb0 0E0050E1 		cmp	r0, lr	@ ye, yy
 2668              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2669              		.loc 1 226 53 view .LVU697
 2670 0bb4 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 2671              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2672              		.loc 1 224 21 view .LVU698
 2673 0bb8 F8FFFF1A 		bne	.L146		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2674              		.loc 1 224 21 view .LVU699
 2675 0bbc 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2676 0bc0 CBFFFFEA 		b	.L145		@
 2677              	.LVL190:
 2678              	.L160:
 179:armwave.c     **** 
 2679              		.loc 1 179 5 is_stmt 1 view .LVU700
 2680 0bc4 10309FE5 		ldr	r3, .L162+4	@,
 2681 0bc8 B320A0E3 		mov	r2, #179	@,
 2682 0bcc 0C109FE5 		ldr	r1, .L162+8	@,
 2683 0bd0 0C009FE5 		ldr	r0, .L162+12	@,
 2684              	.LVL191:
 179:armwave.c     **** 
 2685              		.loc 1 179 5 is_stmt 0 view .LVU701
 2686 0bd4 FEFFFFEB 		bl	__assert_fail		@
 2687              	.LVL192:
 2688              	.L163:
 2689              		.align	2
 2690              	.L162:
 2691 0bd8 00000000 		.word	g_armwave_state
 2692 0bdc 00000000 		.word	.LANCHOR0
 2693 0be0 84000000 		.word	.LC4
 2694 0be4 90000000 		.word	.LC5
 2695              	.LBE36:
 2696              	.LBE38:
 2697              		.cfi_endproc
 2698              	.LFE72:
 2700              		.align	2
 2701              		.global	armwave_test_buffer_alloc
 2702              		.syntax unified
 2703              		.arm
 2704              		.fpu vfp
 2706              	armwave_test_buffer_alloc:
 2707              	.LVL193:
 2708              	.LFB73:
 476:armwave.c     **** 
 477:armwave.c     **** /*
 478:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 479:armwave.c     ****  */
 480:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 481:armwave.c     **** {
 2709              		.loc 1 481 1 is_stmt 1 view -0
 2710              		.cfi_startproc
 2711              		@ args = 0, pretend = 0, frame = 0
 2712              		@ frame_needed = 0, uses_anonymous_args = 0
 482:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2713              		.loc 1 482 5 view .LVU703
 2714              	@ armwave.c:481: {
 481:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2715              		.loc 1 481 1 is_stmt 0 view .LVU704
 2716 0be8 70402DE9 		push	{r4, r5, r6, lr}	@
 2717              		.cfi_def_cfa_offset 16
 2718              		.cfi_offset 4, -16
 2719              		.cfi_offset 5, -12
 2720              		.cfi_offset 6, -8
 2721              		.cfi_offset 14, -4
 2722              	@ armwave.c:481: {
 481:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2723              		.loc 1 481 1 view .LVU705
 2724 0bec 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2725              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 2726              		.loc 1 482 23 view .LVU706
 2727 0bf0 44409FE5 		ldr	r4, .L171	@ tmp128,
 2728 0bf4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2729              	.LVL194:
 2730              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 2731              		.loc 1 482 7 view .LVU707
 2732 0bf8 000050E3 		cmp	r0, #0	@ _1,
 2733 0bfc 0000000A 		beq	.L165		@,
 483:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2734              		.loc 1 483 9 is_stmt 1 view .LVU708
 2735 0c00 FEFFFFEB 		bl	free		@
 2736              	.LVL195:
 2737              	.L165:
 484:armwave.c     ****     }
 485:armwave.c     **** 
 486:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 487:armwave.c     **** 
 488:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2738              		.loc 1 488 5 view .LVU709
 2739              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2740              		.loc 1 488 75 is_stmt 0 view .LVU710
 2741 0c04 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2742 0c08 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2743              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2744              		.loc 1 488 40 view .LVU711
 2745 0c0c 0610A0E1 		mov	r1, r6	@, nsets
 2746              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2747              		.loc 1 488 75 view .LVU712
 2748 0c10 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2749              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2750              		.loc 1 488 40 view .LVU713
 2751 0c14 0500A0E1 		mov	r0, r5	@, _4
 2752 0c18 FEFFFFEB 		bl	calloc		@
 2753              	.LVL196:
 2754              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer == NULL) {
 489:armwave.c     **** 
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2755              		.loc 1 490 7 view .LVU714
 2756 0c1c 000050E3 		cmp	r0, #0	@ tmp124,
 2757              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 2758              		.loc 1 488 38 view .LVU715
 2759 0c20 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2760              		.loc 1 490 5 is_stmt 1 view .LVU716
 2761              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer == NULL) {
 2762              		.loc 1 490 7 is_stmt 0 view .LVU717
 2763 0c24 7080BD18 		popne	{r4, r5, r6, pc}	@
 491:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2764              		.loc 1 491 9 is_stmt 1 view .LVU718
 2765 0c28 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2766 0c2c 0620A0E1 		mov	r2, r6	@, nsets
 2767 0c30 08009FE5 		ldr	r0, .L171+4	@,
 2768              	@ armwave.c:495: }
 492:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 493:armwave.c     ****         return;
 494:armwave.c     ****     }
 495:armwave.c     **** }
 2769              		.loc 1 495 1 is_stmt 0 view .LVU719
 2770 0c34 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2771              		.cfi_restore 14
 2772              		.cfi_restore 6
 2773              		.cfi_restore 5
 2774              		.cfi_restore 4
 2775              		.cfi_def_cfa_offset 0
 2776              	.LVL197:
 2777              	@ armwave.c:491:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 491:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2778              		.loc 1 491 9 view .LVU720
 2779 0c38 FEFFFFEA 		b	printf		@
 2780              	.LVL198:
 2781              	.L172:
 491:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2782              		.loc 1 491 9 view .LVU721
 2783              		.align	2
 2784              	.L171:
 2785 0c3c 00000000 		.word	g_armwave_state
 2786 0c40 20020000 		.word	.LC20
 2787              		.cfi_endproc
 2788              	.LFE73:
 2790              		.align	2
 2791              		.global	armwave_fill_pixbuf_into_pybuffer
 2792              		.syntax unified
 2793              		.arm
 2794              		.fpu vfp
 2796              	armwave_fill_pixbuf_into_pybuffer:
 2797              	.LVL199:
 2798              	.LFB74:
 496:armwave.c     **** 
 497:armwave.c     **** /*
 498:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 499:armwave.c     ****  */
 500:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 501:armwave.c     **** {
 2799              		.loc 1 501 1 is_stmt 1 view -0
 2800              		.cfi_startproc
 2801              		@ args = 0, pretend = 0, frame = 48
 2802              		@ frame_needed = 0, uses_anonymous_args = 0
 502:armwave.c     ****     Py_buffer buffer;
 2803              		.loc 1 502 5 view .LVU723
 503:armwave.c     ****     int ret;
 2804              		.loc 1 503 5 view .LVU724
 504:armwave.c     **** 
 505:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 506:armwave.c     **** 
 507:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2805              		.loc 1 507 5 view .LVU725
 2806              	@ armwave.c:501: {
 501:armwave.c     ****     Py_buffer buffer;
 2807              		.loc 1 501 1 is_stmt 0 view .LVU726
 2808 0c44 04E02DE5 		str	lr, [sp, #-4]!	@,
 2809              		.cfi_def_cfa_offset 4
 2810              		.cfi_offset 14, -4
 2811 0c48 34D04DE2 		sub	sp, sp, #52	@,,
 2812              		.cfi_def_cfa_offset 56
 2813              	@ armwave.c:507:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2814              		.loc 1 507 11 view .LVU727
 2815 0c4c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2816 0c50 0120A0E3 		mov	r2, #1	@,
 2817 0c54 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2818              	.LVL200:
 508:armwave.c     **** 
 509:armwave.c     ****     if(ret != 0) {
 2819              		.loc 1 509 5 is_stmt 1 view .LVU728
 2820              	@ armwave.c:509:     if(ret != 0) {
 2821              		.loc 1 509 7 is_stmt 0 view .LVU729
 2822 0c58 000050E3 		cmp	r0, #0	@,
 2823 0c5c 0A00001A 		bne	.L177		@,
 510:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 511:armwave.c     ****         Py_RETURN_FALSE;
 512:armwave.c     ****     }
 513:armwave.c     **** 
 514:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 515:armwave.c     **** 
 516:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2824              		.loc 1 516 5 is_stmt 1 view .LVU730
 2825 0c60 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2826              	.LVL201:
 2827              		.loc 1 516 5 is_stmt 0 view .LVU731
 2828 0c64 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2829              	.LVL202:
 517:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 518:armwave.c     **** 
 519:armwave.c     ****     PyBuffer_Release(&buffer);
 2830              		.loc 1 519 5 is_stmt 1 view .LVU732
 2831 0c68 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2832 0c6c FEFFFFEB 		bl	PyBuffer_Release		@
 2833              	.LVL203:
 520:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 521:armwave.c     **** 
 522:armwave.c     ****     Py_RETURN_TRUE;
 2834              		.loc 1 522 5 view .LVU733
 2835              	.LBB39:
 2836              	.LBI39:
 2837              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2838              		.loc 2 456 20 view .LVU734
 2839              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2840              		.loc 2 458 21 view .LVU735
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2841              		.loc 2 459 5 view .LVU736
 2842              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2843              		.loc 2 459 18 is_stmt 0 view .LVU737
 2844 0c70 38309FE5 		ldr	r3, .L178	@ tmp126,
 2845              	.LBE40:
 2846              	.LBE39:
 2847              	@ armwave.c:522:     Py_RETURN_TRUE;
 2848              		.loc 1 522 5 view .LVU738
 2849 0c74 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2850              	.LBB42:
 2851              	.LBB41:
 2852              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2853              		.loc 2 459 18 view .LVU739
 2854 0c78 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2855 0c7c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2856 0c80 002083E5 		str	r2, [r3]	@ tmp128,
 2857              	.LBE41:
 2858              	.LBE42:
 2859              	@ armwave.c:523: }
 523:armwave.c     **** }
 2860              		.loc 1 523 1 view .LVU740
 2861 0c84 34D08DE2 		add	sp, sp, #52	@,,
 2862              		.cfi_remember_state
 2863              		.cfi_def_cfa_offset 4
 2864              		@ sp needed	@
 2865 0c88 04F09DE4 		ldr	pc, [sp], #4	@
 2866              	.LVL204:
 2867              	.L177:
 2868              		.cfi_restore_state
 510:armwave.c     ****         Py_RETURN_FALSE;
 2869              		.loc 1 510 9 is_stmt 1 view .LVU741
 2870 0c8c 20009FE5 		ldr	r0, .L178+4	@,
 2871              	.LVL205:
 510:armwave.c     ****         Py_RETURN_FALSE;
 2872              		.loc 1 510 9 is_stmt 0 view .LVU742
 2873 0c90 FEFFFFEB 		bl	puts		@
 2874              	.LVL206:
 511:armwave.c     ****     }
 2875              		.loc 1 511 9 is_stmt 1 view .LVU743
 2876              	.LBB43:
 2877              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 2878              		.loc 2 456 20 view .LVU744
 2879              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2880              		.loc 2 458 21 view .LVU745
 2881              		.loc 2 459 5 view .LVU746
 2882              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2883              		.loc 2 459 18 is_stmt 0 view .LVU747
 2884 0c94 1C309FE5 		ldr	r3, .L178+8	@ tmp120,
 2885              	.LBE44:
 2886              	.LBE43:
 2887              	@ armwave.c:511:         Py_RETURN_FALSE;
 511:armwave.c     ****     }
 2888              		.loc 1 511 9 view .LVU748
 2889 0c98 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2890              	.LBB46:
 2891              	.LBB45:
 2892              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2893              		.loc 2 459 18 view .LVU749
 2894 0c9c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2895 0ca0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2896 0ca4 002083E5 		str	r2, [r3]	@ tmp122,
 2897              	.LBE45:
 2898              	.LBE46:
 2899              	@ armwave.c:523: }
 2900              		.loc 1 523 1 view .LVU750
 2901 0ca8 34D08DE2 		add	sp, sp, #52	@,,
 2902              		.cfi_def_cfa_offset 4
 2903              		@ sp needed	@
 2904 0cac 04F09DE4 		ldr	pc, [sp], #4	@
 2905              	.L179:
 2906              		.align	2
 2907              	.L178:
 2908 0cb0 00000000 		.word	_Py_TrueStruct
 2909 0cb4 74020000 		.word	.LC21
 2910 0cb8 00000000 		.word	_Py_FalseStruct
 2911              		.cfi_endproc
 2912              	.LFE74:
 2914              		.align	2
 2915              		.global	armwave_test_create_am_sine
 2916              		.syntax unified
 2917              		.arm
 2918              		.fpu vfp
 2920              	armwave_test_create_am_sine:
 2921              	.LVL207:
 2922              	.LFB75:
 524:armwave.c     **** 
 525:armwave.c     **** /*
 526:armwave.c     ****  * Make a test AM waveform for render tests.
 527:armwave.c     ****  *
 528:armwave.c     ****  * @param   mod                     modulation depth
 529:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 530:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 531:armwave.c     ****  */
 532:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 533:armwave.c     **** {
 2923              		.loc 1 533 1 is_stmt 1 view -0
 2924              		.cfi_startproc
 2925              		@ args = 0, pretend = 0, frame = 8
 2926              		@ frame_needed = 0, uses_anonymous_args = 0
 534:armwave.c     ****     float v, noise, xnoise, mod_val;
 2927              		.loc 1 534 5 view .LVU752
 535:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2928              		.loc 1 535 5 view .LVU753
 2929              	@ armwave.c:533: {
 533:armwave.c     ****     float v, noise, xnoise, mod_val;
 2930              		.loc 1 533 1 is_stmt 0 view .LVU754
 2931 0cbc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2932              		.cfi_def_cfa_offset 32
 2933              		.cfi_offset 4, -32
 2934              		.cfi_offset 5, -28
 2935              		.cfi_offset 6, -24
 2936              		.cfi_offset 7, -20
 2937              		.cfi_offset 8, -16
 2938              		.cfi_offset 9, -12
 2939              		.cfi_offset 10, -8
 2940              		.cfi_offset 14, -4
 2941              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2942              		.loc 1 535 38 view .LVU755
 2943 0cc0 7A7A9FED 		vldr.32	s14, .L211	@ tmp180,
 2944              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2945              		.loc 1 535 55 view .LVU756
 2946 0cc4 00529FE5 		ldr	r5, .L211+28	@ tmp250,
 2947              	@ armwave.c:533: {
 533:armwave.c     ****     float v, noise, xnoise, mod_val;
 2948              		.loc 1 533 1 view .LVU757
 2949 0cc8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2950              		.cfi_def_cfa_offset 80
 2951              		.cfi_offset 80, -80
 2952              		.cfi_offset 81, -76
 2953              		.cfi_offset 82, -72
 2954              		.cfi_offset 83, -68
 2955              		.cfi_offset 84, -64
 2956              		.cfi_offset 85, -60
 2957              		.cfi_offset 86, -56
 2958              		.cfi_offset 87, -52
 2959              		.cfi_offset 88, -48
 2960              		.cfi_offset 89, -44
 2961              		.cfi_offset 90, -40
 2962              		.cfi_offset 91, -36
 2963 0ccc 0090A0E1 		mov	r9, r0	@ sets, sets
 2964              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2965              		.loc 1 535 38 view .LVU758
 2966 0cd0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2967              	@ armwave.c:539:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 536:armwave.c     ****     int s, set_offset = 0;
 537:armwave.c     ****     int w, x;
 538:armwave.c     **** 
 539:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2968              		.loc 1 539 70 view .LVU759
 2969 0cd4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2970 0cd8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2971              	.LBB49:
 2972              	.LBB50:
 2973              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2974              		.loc 1 482 23 view .LVU760
 2975 0cdc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2976              	.LVL208:
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2977              		.loc 1 482 23 view .LVU761
 2978              	.LBE50:
 2979              	.LBE49:
 2980              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 535:armwave.c     ****     int s, set_offset = 0;
 2981              		.loc 1 535 38 view .LVU762
 2982 0ce0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2983              	@ armwave.c:539:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2984              		.loc 1 539 70 view .LVU763
 2985 0ce4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2986              	@ armwave.c:533: {
 533:armwave.c     ****     float v, noise, xnoise, mod_val;
 2987              		.loc 1 533 1 view .LVU764
 2988 0ce8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2989              	.LBB54:
 2990              	.LBB51:
 2991              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2992              		.loc 1 482 7 view .LVU765
 2993 0cec 000050E3 		cmp	r0, #0	@ _82,
 2994              	.LBE51:
 2995              	.LBE54:
 2996              	@ armwave.c:533: {
 533:armwave.c     ****     float v, noise, xnoise, mod_val;
 2997              		.loc 1 533 1 view .LVU766
 2998 0cf0 08D04DE2 		sub	sp, sp, #8	@,,
 2999              		.cfi_def_cfa_offset 88
 3000              	@ armwave.c:540:     g_armwave_state.test_wave_buffer_nsets = sets;
 540:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3001              		.loc 1 540 44 view .LVU767
 3002 0cf4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3003              	@ armwave.c:539:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 539:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3004              		.loc 1 539 45 view .LVU768
 3005 0cf8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3006              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 535:armwave.c     ****     int s, set_offset = 0;
 3007              		.loc 1 535 38 view .LVU769
 3008 0cfc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3009              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 535:armwave.c     ****     int s, set_offset = 0;
 3010              		.loc 1 535 11 view .LVU770
 3011 0d00 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3012              	.LVL209:
 536:armwave.c     ****     int w, x;
 3013              		.loc 1 536 5 is_stmt 1 view .LVU771
 537:armwave.c     **** 
 3014              		.loc 1 537 5 view .LVU772
 539:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3015              		.loc 1 539 5 view .LVU773
 3016              		.loc 1 540 5 view .LVU774
 541:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3017              		.loc 1 541 5 view .LVU775
 3018              	.LBB55:
 3019              	.LBI49:
 480:armwave.c     **** {
 3020              		.loc 1 480 6 view .LVU776
 3021              	.LBB52:
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3022              		.loc 1 482 5 view .LVU777
 3023              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3024              		.loc 1 482 7 is_stmt 0 view .LVU778
 3025 0d04 0000000A 		beq	.L181		@,
 483:armwave.c     ****     }
 3026              		.loc 1 483 9 is_stmt 1 view .LVU779
 3027 0d08 FEFFFFEB 		bl	free		@
 3028              	.LVL210:
 3029              	.L181:
 488:armwave.c     **** 
 3030              		.loc 1 488 5 view .LVU780
 3031              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3032              		.loc 1 488 75 is_stmt 0 view .LVU781
 3033 0d0c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3034 0d10 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3035              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3036              		.loc 1 488 40 view .LVU782
 3037 0d14 0910A0E1 		mov	r1, r9	@, sets
 3038              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3039              		.loc 1 488 75 view .LVU783
 3040 0d18 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3041              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3042              		.loc 1 488 40 view .LVU784
 3043 0d1c 0400A0E1 		mov	r0, r4	@, _85
 3044 0d20 FEFFFFEB 		bl	calloc		@
 3045              	.LVL211:
 3046              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer == NULL) {
 490:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3047              		.loc 1 490 7 view .LVU785
 3048 0d24 000050E3 		cmp	r0, #0	@ tmp191,
 3049              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3050              		.loc 1 488 38 view .LVU786
 3051 0d28 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 490:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3052              		.loc 1 490 5 is_stmt 1 view .LVU787
 3053              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer == NULL) {
 490:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3054              		.loc 1 490 7 is_stmt 0 view .LVU788
 3055 0d2c 5A00000A 		beq	.L210		@,
 3056              	.L182:
 3057              	.LVL212:
 490:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3058              		.loc 1 490 7 view .LVU789
 3059              	.LBE52:
 3060              	.LBE55:
 3061              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 542:armwave.c     **** 
 543:armwave.c     ****     for(s = 0; s < sets; s++) {
 3062              		.loc 1 543 5 discriminator 1 view .LVU790
 3063 0d30 000059E3 		cmp	r9, #0	@ sets,
 3064 0d34 550000DA 		ble	.L180		@,
 3065              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 544:armwave.c     ****         printf("Calculating test set %d\n", s);
 545:armwave.c     ****     
 546:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 547:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 548:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 549:armwave.c     **** 
 550:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 551:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 552:armwave.c     ****                 noise *= noise;
 553:armwave.c     ****                 noise *= noise;
 554:armwave.c     ****                 noise *= noise;
 555:armwave.c     **** 
 556:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 557:armwave.c     ****                     noise = -noise;
 558:armwave.c     **** 
 559:armwave.c     ****                 noise += 1.0f;
 560:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 561:armwave.c     **** 
 562:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3066              		.loc 1 562 45 view .LVU791
 3067 0d38 5C8A9FED 		vldr.32	s16, .L211	@ tmp258,
 3068              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 563:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 564:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 565:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3069              		.loc 1 565 104 view .LVU792
 3070 0d3c 5CCA9FED 		vldr.32	s24, .L211+4	@ tmp259,
 3071              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3072              		.loc 1 543 5 view .LVU793
 3073 0d40 0070A0E3 		mov	r7, #0	@ set_offset,
 3074              	@ armwave.c:544:         printf("Calculating test set %d\n", s);
 544:armwave.c     ****         printf("Calculating test set %d\n", s);
 3075              		.loc 1 544 9 view .LVU794
 3076 0d44 84A19FE5 		ldr	r10, .L211+32	@ tmp257,
 3077              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3078              		.loc 1 543 5 view .LVU795
 3079 0d48 0780A0E1 		mov	r8, r7	@ s, set_offset
 3080              	.LVL213:
 3081              	.L183:
 544:armwave.c     ****         printf("Calculating test set %d\n", s);
 3082              		.loc 1 544 9 is_stmt 1 view .LVU796
 3083 0d4c 0810A0E1 		mov	r1, r8	@, s
 3084 0d50 0A00A0E1 		mov	r0, r10	@, tmp257
 3085 0d54 FEFFFFEB 		bl	printf		@
 3086              	.LVL214:
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3087              		.loc 1 546 9 view .LVU797
 3088              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3089              		.loc 1 546 39 is_stmt 0 view .LVU798
 3090 0d58 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3091              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3092              		.loc 1 546 9 view .LVU799
 3093 0d5c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3094 0d60 450000DA 		ble	.L184		@,
 3095              	@ armwave.c:548:             mod_val = 0.5f + (_1_waves_mod * w);
 548:armwave.c     **** 
 3096              		.loc 1 548 21 view .LVU800
 3097 0d64 53CADFED 		vldr.32	s25, .L211+8	@ tmp200,
 3098              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3099              		.loc 1 562 33 view .LVU801
 3100 0d68 53BA9FED 		vldr.32	s22, .L211+12	@ tmp253,
 3101              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3102              		.loc 1 560 24 view .LVU802
 3103 0d6c 53AADFED 		vldr.32	s21, .L211+16	@ tmp254,
 3104 0d70 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3105              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3106              		.loc 1 546 15 view .LVU803
 3107 0d74 0060A0E3 		mov	r6, #0	@ w,
 3108              	.LVL215:
 3109              	.L191:
 548:armwave.c     **** 
 3110              		.loc 1 548 13 is_stmt 1 view .LVU804
 3111              	@ armwave.c:548:             mod_val = 0.5f + (_1_waves_mod * w);
 548:armwave.c     **** 
 3112              		.loc 1 548 21 is_stmt 0 view .LVU805
 3113 0d78 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3114 0d7c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3115              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3116              		.loc 1 550 13 view .LVU806
 3117 0d80 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3118              	@ armwave.c:548:             mod_val = 0.5f + (_1_waves_mod * w);
 548:armwave.c     **** 
 3119              		.loc 1 548 21 view .LVU807
 3120 0d84 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3121 0d88 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3122              	.LVL216:
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3123              		.loc 1 550 13 is_stmt 1 view .LVU808
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3124              		.loc 1 550 13 is_stmt 0 view .LVU809
 3125 0d8c 370000DA 		ble	.L185		@,
 3126 0d90 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3127              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3128              		.loc 1 565 113 view .LVU810
 3129 0d94 4AAA9FED 		vldr.32	s20, .L211+20	@ tmp229,
 3130 0d98 4A8ADFED 		vldr.32	s17, .L211+24	@ tmp230,
 3131              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3132              		.loc 1 550 19 view .LVU811
 3133 0d9c 0040A0E3 		mov	r4, #0	@ x,
 3134              	.LVL217:
 3135              	.L190:
 551:armwave.c     ****                 noise *= noise;
 3136              		.loc 1 551 17 is_stmt 1 view .LVU812
 3137              	@ armwave.c:551:                 noise  = ((rand() & 0xffff) * noise_fraction);
 551:armwave.c     ****                 noise *= noise;
 3138              		.loc 1 551 28 is_stmt 0 view .LVU813
 3139 0da0 FEFFFFEB 		bl	rand		@
 3140              	.LVL218:
 3141              	@ armwave.c:551:                 noise  = ((rand() & 0xffff) * noise_fraction);
 551:armwave.c     ****                 noise *= noise;
 3142              		.loc 1 551 35 view .LVU814
 3143 0da4 7000FFE6 		uxth	r0, r0	@ tmp201,
 3144              	@ armwave.c:551:                 noise  = ((rand() & 0xffff) * noise_fraction);
 551:armwave.c     ****                 noise *= noise;
 3145              		.loc 1 551 45 view .LVU815
 3146 0da8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3147 0dac E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3148              	@ armwave.c:551:                 noise  = ((rand() & 0xffff) * noise_fraction);
 551:armwave.c     ****                 noise *= noise;
 3149              		.loc 1 551 24 view .LVU816
 3150 0db0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3151              	.LVL219:
 552:armwave.c     ****                 noise *= noise;
 3152              		.loc 1 552 17 is_stmt 1 view .LVU817
 3153              	@ armwave.c:552:                 noise *= noise;
 552:armwave.c     ****                 noise *= noise;
 3154              		.loc 1 552 23 is_stmt 0 view .LVU818
 3155 0db4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3156              	.LVL220:
 553:armwave.c     ****                 noise *= noise;
 3157              		.loc 1 553 17 is_stmt 1 view .LVU819
 3158              	@ armwave.c:553:                 noise *= noise;
 553:armwave.c     ****                 noise *= noise;
 3159              		.loc 1 553 23 is_stmt 0 view .LVU820
 3160 0db8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3161              	.LVL221:
 554:armwave.c     **** 
 3162              		.loc 1 554 17 is_stmt 1 view .LVU821
 3163              	@ armwave.c:554:                 noise *= noise;
 554:armwave.c     **** 
 3164              		.loc 1 554 23 is_stmt 0 view .LVU822
 3165 0dbc A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3166              	.LVL222:
 556:armwave.c     ****                     noise = -noise;
 3167              		.loc 1 556 17 is_stmt 1 view .LVU823
 3168              	@ armwave.c:556:                 if((rand() & 0xffff) > 0x7fff)
 556:armwave.c     ****                     noise = -noise;
 3169              		.loc 1 556 21 is_stmt 0 view .LVU824
 3170 0dc0 FEFFFFEB 		bl	rand		@
 3171              	.LVL223:
 557:armwave.c     **** 
 3172              		.loc 1 557 21 is_stmt 1 view .LVU825
 3173              	@ armwave.c:556:                 if((rand() & 0xffff) > 0x7fff)
 556:armwave.c     ****                     noise = -noise;
 3174              		.loc 1 556 19 is_stmt 0 view .LVU826
 3175 0dc4 020910E3 		tst	r0, #32768	@,
 3176              	@ armwave.c:557:                     noise = -noise;
 557:armwave.c     **** 
 3177              		.loc 1 557 27 view .LVU827
 3178 0dc8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3179              	.LVL224:
 559:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3180              		.loc 1 559 17 is_stmt 1 view .LVU828
 560:armwave.c     **** 
 3181              		.loc 1 560 17 view .LVU829
 3182              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3183              		.loc 1 560 27 is_stmt 0 view .LVU830
 3184 0dcc FEFFFFEB 		bl	rand		@
 3185              	.LVL225:
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3186              		.loc 1 562 17 is_stmt 1 view .LVU831
 3187              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3188              		.loc 1 562 45 is_stmt 0 view .LVU832
 3189 0dd0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3190              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3191              		.loc 1 562 33 view .LVU833
 3192 0dd4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3193              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3194              		.loc 1 562 45 view .LVU834
 3195 0dd8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3196              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3197              		.loc 1 562 33 view .LVU835
 3198 0ddc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3199              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3200              		.loc 1 562 45 view .LVU836
 3201 0de0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3202              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3203              		.loc 1 562 33 view .LVU837
 3204 0de4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3205              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3206              		.loc 1 560 34 view .LVU838
 3207 0de8 7000FFE6 		uxth	r0, r0	@ tmp214,
 3208              	.LVL226:
 3209              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3210              		.loc 1 560 44 view .LVU839
 3211 0dec 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3212 0df0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3213              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3214              		.loc 1 560 24 view .LVU840
 3215 0df4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3216              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3217              		.loc 1 562 77 view .LVU841
 3218 0df8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3219              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3220              		.loc 1 562 22 view .LVU842
 3221 0dfc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3222 0e00 FEFFFFEB 		bl	sin		@
 3223              	.LVL227:
 3224              		.loc 1 565 17 is_stmt 1 view .LVU843
 3225              	@ armwave.c:559:                 noise += 1.0f;
 559:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3226              		.loc 1 559 23 is_stmt 0 view .LVU844
 3227 0e04 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3228              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3229              		.loc 1 565 104 view .LVU845
 3230 0e08 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3231              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3232              		.loc 1 562 98 view .LVU846
 3233 0e0c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3234              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3235              		.loc 1 562 87 view .LVU847
 3236 0e10 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3237              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3238              		.loc 1 562 98 view .LVU848
 3239 0e14 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3240              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3241              		.loc 1 562 19 view .LVU849
 3242 0e18 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3243              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3244              		.loc 1 565 113 view .LVU850
 3245 0e1c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3246 0e20 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3247 0e24 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3248 0e28 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3249 0e2c 050000DA 		ble	.L187		@,
 3250              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3251              		.loc 1 565 104 discriminator 1 view .LVU851
 3252 0e30 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3253 0e34 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3254 0e38 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3255 0e3c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3256 0e40 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3257 0e44 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3258              	.L187:
 3259              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3260              		.loc 1 565 57 discriminator 12 view .LVU852
 3261 0e48 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3262              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3263              		.loc 1 565 102 discriminator 12 view .LVU853
 3264 0e4c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3265 0e50 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3266 0e54 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3267              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3268              		.loc 1 550 58 discriminator 12 view .LVU854
 3269 0e58 014084E2 		add	r4, r4, #1	@ x, x,
 3270              	.LVL228:
 3271              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3272              		.loc 1 565 102 discriminator 12 view .LVU855
 3273 0e5c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3274              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3275              		.loc 1 550 43 discriminator 12 view .LVU856
 3276 0e60 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3277              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3278              		.loc 1 550 13 discriminator 12 view .LVU857
 3279 0e64 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3280 0e68 CCFFFFCA 		bgt	.L190		@,
 3281 0e6c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3282              	.LVL229:
 3283              	.L185:
 3284              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3285              		.loc 1 546 48 discriminator 2 view .LVU858
 3286 0e70 016086E2 		add	r6, r6, #1	@ w, w,
 3287              	.LVL230:
 3288              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3289              		.loc 1 546 9 discriminator 2 view .LVU859
 3290 0e74 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3291 0e78 BEFFFFBA 		blt	.L191		@,
 3292              	.LVL231:
 3293              	.L184:
 566:armwave.c     ****             }
 567:armwave.c     ****         }
 568:armwave.c     **** 
 569:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3294              		.loc 1 569 9 is_stmt 1 discriminator 2 view .LVU860
 3295              	@ armwave.c:569:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3296              		.loc 1 569 46 is_stmt 0 discriminator 2 view .LVU861
 3297 0e7c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3298              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3299              		.loc 1 543 27 discriminator 2 view .LVU862
 3300 0e80 018088E2 		add	r8, r8, #1	@ s, s,
 3301              	.LVL232:
 3302              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3303              		.loc 1 543 5 discriminator 2 view .LVU863
 3304 0e84 080059E1 		cmp	r9, r8	@ sets, s
 3305              	@ armwave.c:569:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3306              		.loc 1 569 20 discriminator 2 view .LVU864
 3307 0e88 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3308              	.LVL233:
 3309              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3310              		.loc 1 543 5 discriminator 2 view .LVU865
 3311 0e8c AEFFFF1A 		bne	.L183		@,
 3312              	.LVL234:
 3313              	.L180:
 3314              	@ armwave.c:571: }
 570:armwave.c     ****     }
 571:armwave.c     **** }
 3315              		.loc 1 571 1 view .LVU866
 3316 0e90 08D08DE2 		add	sp, sp, #8	@,,
 3317              		.cfi_remember_state
 3318              		.cfi_def_cfa_offset 80
 3319              		@ sp needed	@
 3320 0e94 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3321              		.cfi_restore 90
 3322              		.cfi_restore 91
 3323              		.cfi_restore 88
 3324              		.cfi_restore 89
 3325              		.cfi_restore 86
 3326              		.cfi_restore 87
 3327              		.cfi_restore 84
 3328              		.cfi_restore 85
 3329              		.cfi_restore 82
 3330              		.cfi_restore 83
 3331              		.cfi_restore 80
 3332              		.cfi_restore 81
 3333              		.cfi_def_cfa_offset 32
 3334              	.LVL235:
 3335              		.loc 1 571 1 view .LVU867
 3336 0e98 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3337              	.LVL236:
 3338              	.L210:
 3339              		.cfi_restore_state
 3340              	.LBB56:
 3341              	.LBB53:
 491:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3342              		.loc 1 491 9 is_stmt 1 view .LVU868
 3343 0e9c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3344 0ea0 0920A0E1 		mov	r2, r9	@, sets
 3345 0ea4 28009FE5 		ldr	r0, .L211+36	@,
 3346 0ea8 FEFFFFEB 		bl	printf		@
 3347              	.LVL237:
 493:armwave.c     ****     }
 3348              		.loc 1 493 9 view .LVU869
 3349 0eac 9FFFFFEA 		b	.L182		@
 3350              	.L212:
 3351              		.align	2
 3352              	.L211:
 3353 0eb0 0000803F 		.word	1065353216
 3354 0eb4 00007F43 		.word	1132396544
 3355 0eb8 0000003F 		.word	1056964608
 3356 0ebc C3F5C840 		.word	1086911939
 3357 0ec0 38FFC74A 		.word	1254620984
 3358 0ec4 0000FE42 		.word	1123942400
 3359 0ec8 00000043 		.word	1124073472
 3360 0ecc 00000000 		.word	g_armwave_state
 3361 0ed0 C8020000 		.word	.LC22
 3362 0ed4 20020000 		.word	.LC20
 3363              	.LBE53:
 3364              	.LBE56:
 3365              		.cfi_endproc
 3366              	.LFE75:
 3368              		.align	2
 3369              		.global	armwave_cleanup
 3370              		.syntax unified
 3371              		.arm
 3372              		.fpu vfp
 3374              	armwave_cleanup:
 3375              	.LFB76:
 572:armwave.c     **** 
 573:armwave.c     **** /*
 574:armwave.c     ****  * Make a test square waveform.
 575:armwave.c     ****  *
 576:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 577:armwave.c     ****  */
 578:armwave.c     **** #if 0
 579:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 580:armwave.c     **** {
 581:armwave.c     ****     uint8_t v;
 582:armwave.c     ****     float noise, xnoise;
 583:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 584:armwave.c     ****     int w, x;
 585:armwave.c     **** 
 586:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 587:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 588:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 589:armwave.c     ****             noise *= noise;
 590:armwave.c     ****             noise *= noise;
 591:armwave.c     ****             noise *= noise;
 592:armwave.c     **** 
 593:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 594:armwave.c     ****                 noise = -noise;
 595:armwave.c     **** 
 596:armwave.c     ****             //noise += 1.0f;
 597:armwave.c     **** 
 598:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 599:armwave.c     ****                 new_level = 0.2f;
 600:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 601:armwave.c     ****                 new_level = 0.8f;
 602:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 603:armwave.c     ****                 new_level = 0.2f;
 604:armwave.c     ****             } else {
 605:armwave.c     ****                 new_level = 0.8f;
 606:armwave.c     ****             }
 607:armwave.c     **** 
 608:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 609:armwave.c     **** 
 610:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 611:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 612:armwave.c     ****         }
 613:armwave.c     ****     }
 614:armwave.c     **** }
 615:armwave.c     **** #endif
 616:armwave.c     **** 
 617:armwave.c     **** /*
 618:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 619:armwave.c     ****  */
 620:armwave.c     **** void armwave_cleanup()
 621:armwave.c     **** {
 3376              		.loc 1 621 1 view -0
 3377              		.cfi_startproc
 3378              		@ args = 0, pretend = 0, frame = 0
 3379              		@ frame_needed = 0, uses_anonymous_args = 0
 622:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3380              		.loc 1 622 5 view .LVU871
 3381              	@ armwave.c:621: {
 621:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3382              		.loc 1 621 1 is_stmt 0 view .LVU872
 3383 0ed8 10402DE9 		push	{r4, lr}	@
 3384              		.cfi_def_cfa_offset 8
 3385              		.cfi_offset 4, -8
 3386              		.cfi_offset 14, -4
 3387              	@ armwave.c:622:     free(g_armwave_state.out_pixbuf);
 3388              		.loc 1 622 25 view .LVU873
 3389 0edc 34409FE5 		ldr	r4, .L215	@ tmp114,
 3390              	@ armwave.c:622:     free(g_armwave_state.out_pixbuf);
 3391              		.loc 1 622 5 view .LVU874
 3392 0ee0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3393 0ee4 FEFFFFEB 		bl	free		@
 3394              	.LVL238:
 623:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3395              		.loc 1 623 5 is_stmt 1 view .LVU875
 3396 0ee8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3397 0eec FEFFFFEB 		bl	free		@
 3398              	.LVL239:
 624:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3399              		.loc 1 624 5 view .LVU876
 3400 0ef0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3401 0ef4 FEFFFFEB 		bl	free		@
 3402              	.LVL240:
 625:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3403              		.loc 1 625 5 view .LVU877
 3404 0ef8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3405 0efc FEFFFFEB 		bl	free		@
 3406              	.LVL241:
 626:armwave.c     **** 
 627:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3407              		.loc 1 627 5 view .LVU878
 3408              	@ armwave.c:627:     g_armwave_state.out_pixbuf = NULL;
 3409              		.loc 1 627 32 is_stmt 0 view .LVU879
 3410 0f00 0030A0E3 		mov	r3, #0	@ tmp123,
 3411 0f04 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 628:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3412              		.loc 1 628 5 is_stmt 1 view .LVU880
 3413              	@ armwave.c:628:     g_armwave_state.ch1_buffer = NULL;
 3414              		.loc 1 628 32 is_stmt 0 view .LVU881
 3415 0f08 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 629:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3416              		.loc 1 629 5 is_stmt 1 view .LVU882
 3417              	@ armwave.c:629:     g_armwave_state.xcoord_to_xpixel = NULL;
 3418              		.loc 1 629 38 is_stmt 0 view .LVU883
 3419 0f0c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 630:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3420              		.loc 1 630 5 is_stmt 1 view .LVU884
 3421              	@ armwave.c:630:     g_armwave_state.test_wave_buffer = NULL;
 3422              		.loc 1 630 38 is_stmt 0 view .LVU885
 3423 0f10 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3424              	@ armwave.c:631: }
 631:armwave.c     **** }
 3425              		.loc 1 631 1 view .LVU886
 3426 0f14 1080BDE8 		pop	{r4, pc}	@
 3427              	.L216:
 3428              		.align	2
 3429              	.L215:
 3430 0f18 00000000 		.word	g_armwave_state
 3431              		.cfi_endproc
 3432              	.LFE76:
 3434              		.comm	gamma_table,256,4
 3435              		.comm	g_armwave_state,136,4
 3436              		.section	.rodata
 3437              		.align	2
 3438              		.set	.LANCHOR0,. + 0
 3441              	__PRETTY_FUNCTION__.17095:
 3442 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3442      6176655F 
 3442      66696C6C 
 3442      5F706978 
 3442      6275665F 
 3443 001b 00       		.space	1
 3446              	__PRETTY_FUNCTION__.17125:
 3447 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3447      6176655F 
 3447      73657475 
 3447      705F7265 
 3447      6E646572 
 3448 0031 000000   		.space	3
 3451              	__PRETTY_FUNCTION__.17132:
 3452 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3452      6176655F 
 3452      7365745F 
 3452      77617665 
 3452      5F706F69 
 3453 004d 000000   		.space	3
 3456              	__PRETTY_FUNCTION__.17139:
 3457 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3457      6176655F 
 3457      7365745F 
 3457      77617665 
 3457      5F706F69 
 3458              		.section	.rodata.str1.4,"aMS",%progbits,1
 3459              		.align	2
 3460              	.LC0:
 3461 0000 76302E30 		.ascii	"v0.0.1\000"
 3461      2E3100
 3462 0007 00       		.space	1
 3463              	.LC1:
 3464 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3464      61766520 
 3464      76657273 
 3464      696F6E3A 
 3464      2025730A 
 3465 001d 000000   		.space	3
 3466              	.LC2:
 3467 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3467      78253038 
 3467      7820623D 
 3467      30782530 
 3467      38782063 
 3468 0053 6768743D 		.ascii	"ght=%d\012\000"
 3468      25640A00 
 3469 005b 00       		.space	1
 3470              	.LC3:
 3471 005c 773D2564 		.ascii	"w=%d stride=%d sly=%d wave_base=0x%08x\012\000"
 3471      20737472 
 3471      6964653D 
 3471      25642073 
 3471      6C793D25 
 3472              	.LC4:
 3473 0084 61726D77 		.ascii	"armwave.c\000"
 3473      6176652E 
 3473      6300
 3474 008e 0000     		.space	2
 3475              	.LC5:
 3476 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 3476      62756666 
 3476      65722021 
 3476      3D204E55 
 3476      4C4C00
 3477 00a3 00       		.space	1
 3478              	.LC6:
 3479 00a4 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3479      20653D25 
 3479      6420773D 
 3479      25642077 
 3479      733D2564 
 3480              	.LC7:
 3481 00d0 73746172 		.ascii	"start_point < end_point\000"
 3481      745F706F 
 3481      696E7420 
 3481      3C20656E 
 3481      645F706F 
 3482              	.LC8:
 3483 00e8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3483      7566665F 
 3483      73697A65 
 3483      3D25642C 
 3483      20636D70 
 3484 011a 00       		.ascii	"\000"
 3485 011b 00       		.space	1
 3486              	.LC9:
 3487 011c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3487      6D776176 
 3487      655F7374 
 3487      6174652E 
 3487      6368315F 
 3488 013f 00       		.space	1
 3489              	.LC10:
 3490 0140 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3490      6D776176 
 3490      655F7374 
 3490      6174652E 
 3490      78636F6F 
 3491 0169 000000   		.space	3
 3492              	.LC11:
 3493 016c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3493      3A203078 
 3493      25303878 
 3493      20307825 
 3493      30387820 
 3494              	.LC12:
 3495 0190 77617665 		.ascii	"wave_buffer != NULL\000"
 3495      5F627566 
 3495      66657220 
 3495      213D204E 
 3495      554C4C00 
 3496              	.LC13:
 3497 01a4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3497      6176655F 
 3497      7365745F 
 3497      77617665 
 3497      5F706F69 
 3498 01d7 78636565 		.ascii	"xceeded\000"
 3498      64656400 
 3499 01df 00       		.space	1
 3500              	.LC14:
 3501 01e0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3501      5F627566 
 3501      6665725F 
 3501      70747220 
 3501      213D2030 
 3502 01f5 000000   		.space	3
 3503              	.LC15:
 3504 01f8 776200   		.ascii	"wb\000"
 3505 01fb 00       		.space	1
 3506              	.LC16:
 3507 01fc 50330A00 		.ascii	"P3\012\000"
 3508              	.LC17:
 3509 0200 25642025 		.ascii	"%d %d\012\000"
 3509      640A00
 3510 0207 00       		.space	1
 3511              	.LC18:
 3512 0208 3235350A 		.ascii	"255\012\000"
 3512      00
 3513 020d 000000   		.space	3
 3514              	.LC19:
 3515 0210 25336420 		.ascii	"%3d %3d %3d\012\000"
 3515      25336420 
 3515      2533640A 
 3515      00
 3516 021d 000000   		.space	3
 3517              	.LC20:
 3518 0220 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3518      6176655F 
 3518      74657374 
 3518      5F627566 
 3518      6665725F 
 3519 0253 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3519      20627566 
 3519      66657220 
 3519      28256420 
 3519      62797465 
 3520              	.LC21:
 3521 0274 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3521      6176655F 
 3521      66696C6C 
 3521      5F706978 
 3521      6275665F 
 3522 02a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3522      20666169 
 3522      6C65642C 
 3522      20726574 
 3522      75726E69 
 3523 02c6 0000     		.space	2
 3524              	.LC22:
 3525 02c8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3525      756C6174 
 3525      696E6720 
 3525      74657374 
 3525      20736574 
 3526              		.text
 3527              	.Letext0:
 3528              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3529              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3530              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3531              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3532              		.file 7 "/usr/include/stdio.h"
 3533              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3534              		.file 9 "/usr/include/errno.h"
 3535              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3536              		.file 11 "/usr/include/unistd.h"
 3537              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3538              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3539              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3540              		.file 15 "/usr/include/math.h"
 3541              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3542              		.file 17 "/usr/include/time.h"
 3543              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3544              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3545              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3546              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3547              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3548              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3549              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3550              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3551              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3552              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3553              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3554              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3555              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3556              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3557              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3558              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3559              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3560              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3561              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3562              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3563              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3564              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3565              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3566              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3567              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3568              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3569              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3570              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3571              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3572              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3573              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3574              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3575              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3576              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3577              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3578              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3579              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3580              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3581              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3582              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3583              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3584              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3585              		.file 60 "/usr/local/include/python3.8/context.h"
 3586              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3587              		.file 62 "/usr/local/include/python3.8/code.h"
 3588              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3589              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3590              		.file 65 "/usr/local/include/python3.8/import.h"
 3591              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3592              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3593              		.file 68 "/usr/include/malloc.h"
 3594              		.file 69 "armwave.h"
 3595              		.file 70 "/usr/include/stdlib.h"
 3596              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3597              		.file 72 "/usr/include/assert.h"
 3598              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3599              		.file 74 "<built-in>"
