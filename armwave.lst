   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.33,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.33,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.33,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.33
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.33, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 00329FE5 		ldr	r3, .L27	@ tmp205,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0140A0E1 		mov	r4, r1	@ height, height
 259 00b0 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp208, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 38C093E5 		ldr	ip, [r3, #56]	@ _93, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 147 view .LVU37
 269 00bc 40B093E5 		ldr	fp, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 270              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 271              		.loc 1 71 105 view .LVU38
 272 00c0 2118A0E1 		lsr	r1, r1, #16	@ tmp209, tmp208,
 273              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 79 5 view .LVU39
 275 00c4 00005CE3 		cmp	ip, #0	@ _93,
 276              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 277              		.loc 1 79 35 view .LVU40
 278 00c8 20C08DE5 		str	ip, [sp, #32]	@ _93, %sfp
 279              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 280              		.loc 1 71 40 view .LVU41
 281 00cc 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 130 view .LVU42
 284 00d0 9B010AE0 		mul	r10, fp, r1	@ _7, _6, tmp209
 285              	.LVL8:
 286              		.loc 1 79 5 is_stmt 1 view .LVU43
 287              		.loc 1 79 5 is_stmt 0 view .LVU44
 288 00d4 700000DA 		ble	.L11		@,
 289              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 80 36 view .LVU45
 291 00d8 141093E5 		ldr	r1, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 292              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 293              		.loc 1 80 81 view .LVU46
 294 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 295 00e0 000054E3 		cmp	r4, #0	@ height,
 296 00e4 24308DE5 		str	r3, [sp, #36]	@ _9, %sfp
 297 00e8 6B00000A 		beq	.L11		@,
 298 00ec 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 299 00f0 003081E0 		add	r3, r1, r0	@ tmp213, _8, slice_y
 300 00f4 000063E2 		rsb	r0, r3, #0	@ ivtmp.48, tmp213
 301              	.LVL9:
 302              		.loc 1 80 81 view .LVU47
 303 00f8 8210A0E1 		lsl	r1, r2, #1	@ tmp215, _2,
 304 00fc 18308DE5 		str	r3, [sp, #24]	@ tmp213, %sfp
 305 0100 8C30A0E1 		lsl	r3, ip, #1	@ tmp220, tmp219,
 306 0104 14308DE5 		str	r3, [sp, #20]	@ tmp220, %sfp
 307 0108 023081E0 		add	r3, r1, r2	@ ivtmp.42, tmp215, _2
 308 010c 28308DE5 		str	r3, [sp, #40]	@ ivtmp.42, %sfp
 309 0110 0231A0E1 		lsl	r3, r2, #2	@ _186, _2,
 310 0114 00308DE5 		str	r3, [sp]	@ _186, %sfp
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 11 view .LVU48
 313 0118 0030A0E3 		mov	r3, #0	@ w,
 314 011c 2C108DE5 		str	r1, [sp, #44]	@ tmp215, %sfp
 315 0120 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.48, %sfp
 316 0124 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 317              	.LVL10:
 318              	.L19:
 319              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 320              		.loc 1 84 9 view .LVU50
 321              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 322              		.loc 1 79 11 is_stmt 0 view .LVU51
 323 0128 2C609DE5 		ldr	r6, [sp, #44]	@ ivtmp.43, %sfp
 324 012c 28909DE5 		ldr	r9, [sp, #40]	@ ivtmp.42, %sfp
 325 0130 18809DE5 		ldr	r8, [sp, #24]	@ ivtmp.49, %sfp
 326              	.LVL11:
 327              	.L14:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 87 13 is_stmt 1 view .LVU52
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 338              		.loc 1 102 34 is_stmt 0 view .LVU61
 339 0134 14209DE5 		ldr	r2, [sp, #20]	@ tmp220, %sfp
 340              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 341              		.loc 1 102 74 view .LVU62
 342 0138 2908A0E1 		lsr	r0, r9, #16	@ tmp277, ivtmp.42,
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 344              		.loc 1 102 34 view .LVU63
 345 013c 023086E0 		add	r3, r6, r2	@ tmp228, ivtmp.43, tmp220
 346              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 347              		.loc 1 102 74 view .LVU64
 348 0140 04008DE5 		str	r0, [sp, #4]	@ tmp277, %sfp
 349 0144 2338A0E1 		lsr	r3, r3, #16	@ tmp229, tmp228,
 350              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 351              		.loc 1 87 18 view .LVU65
 352 0148 040098E4 		ldr	r0, [r8], #4	@ word, MEM[base: _182, offset: 0B]
 353              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 354              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 355              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 356              		.loc 1 94 17 view .LVU68
 357              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 106 47 is_stmt 0 view .LVU69
 359 014c 9BA323E0 		mla	r3, fp, r3, r10	@ tmp231, _6, tmp229, _7
 360              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 361              		.loc 1 94 20 view .LVU70
 362 0150 FF7010E2 		ands	r7, r0, #255	@ scale_value, word,
 363              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 364              		.loc 1 102 34 view .LVU71
 365 0154 021089E0 		add	r1, r9, r2	@ tmp245, ivtmp.42, tmp220
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 20 view .LVU72
 368 0158 0150A003 		moveq	r5, #1	@ tmp222,
 369 015c 0050A013 		movne	r5, #0	@ tmp222,
 370 0160 00C09DE5 		ldr	ip, [sp]	@ _186, %sfp
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 372              		.loc 1 106 47 view .LVU73
 373 0164 073083E0 		add	r3, r3, r7	@ tmp232, tmp231, scale_value
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 19 view .LVU74
 376 0168 FF0057E3 		cmp	r7, #255	@ scale_value,
 377 016c 01508503 		orreq	r5, r5, #1	@,, tmp227, tmp222
 378              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 379              		.loc 1 102 74 view .LVU75
 380 0170 2628A0E1 		lsr	r2, r6, #16	@ tmp262, ivtmp.43,
 381 0174 2118A0E1 		lsr	r1, r1, #16	@ tmp246, tmp245,
 382              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 383              		.loc 1 84 9 view .LVU76
 384 0178 0C709DE5 		ldr	r7, [sp, #12]	@ ivtmp.48, %sfp
 385              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 386              		.loc 1 94 19 view .LVU77
 387 017c 000055E3 		cmp	r5, #0	@ tmp227,
 388 0180 0C9089E0 		add	r9, r9, ip	@ ivtmp.42, ivtmp.42, _186
 389              	.LVL13:
 390              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 106 47 view .LVU78
 392 0184 9BA121E0 		mla	r1, fp, r1, r10	@ tmp248, _6, tmp246, _7
 393 0188 9BA222E0 		mla	r2, fp, r2, r10	@ tmp264, _6, tmp262, _7
 394              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 395              		.loc 1 107 22 view .LVU79
 396 018c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 397              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 398              		.loc 1 106 47 view .LVU80
 399 0190 8330A0E1 		lsl	r3, r3, #1	@ tmp233, tmp232,
 400              	@ armwave.c:107:                 word >>= 8;
 401              		.loc 1 107 22 view .LVU81
 402 0194 20C8A0E1 		lsr	ip, r0, #16	@ word, word,
 403              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 404              		.loc 1 84 9 view .LVU82
 405 0198 077088E0 		add	r7, r8, r7	@ tmp285, ivtmp.41, ivtmp.48
 406              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 407              		.loc 1 94 19 view .LVU83
 408 019c 2C00001A 		bne	.L20		@,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 20 view .LVU84
 411 01a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU85
 414 01a4 0450A0E1 		mov	r5, r4	@ scale_value, scale_value
 415 01a8 041081E0 		add	r1, r1, r4	@ tmp249, tmp248, scale_value
 416 01ac B3409EE1 		ldrh	r4, [lr, r3]	@ *_75, *_75
 417 01b0 8110A0E1 		lsl	r1, r1, #1	@ tmp250, tmp249,
 418 01b4 08408DE5 		str	r4, [sp, #8]	@ *_75, %sfp
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 20 view .LVU86
 421 01b8 0140A003 		moveq	r4, #1	@ tmp239,
 422 01bc 0040A013 		movne	r4, #0	@ tmp239,
 423              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 424              		.loc 1 94 19 view .LVU87
 425 01c0 FF0055E3 		cmp	r5, #255	@ scale_value,
 426 01c4 01408403 		orreq	r4, r4, #1	@,, tmp239, tmp239
 427 01c8 000054E3 		cmp	r4, #0	@ tmp244,
 428              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 429              		.loc 1 106 47 view .LVU88
 430 01cc 08409DE5 		ldr	r4, [sp, #8]	@ *_75, %sfp
 431 01d0 015084E2 		add	r5, r4, #1	@ tmp236, *_75,
 432 01d4 B3508EE1 		strh	r5, [lr, r3]	@ movhi	@ tmp236, *_75
 433              		.loc 1 107 17 is_stmt 1 view .LVU89
 434              	.LVL14:
  91:armwave.c     ****                 
 435              		.loc 1 91 17 view .LVU90
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 17 view .LVU91
 437              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 438              		.loc 1 94 19 is_stmt 0 view .LVU92
 439 01d8 1D00001A 		bne	.L20		@,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 20 view .LVU93
 442 01dc FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 443              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 444              		.loc 1 106 47 view .LVU94
 445 01e0 B1309EE1 		ldrh	r3, [lr, r1]	@ *_104, *_104
 446              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 447              		.loc 1 94 20 view .LVU95
 448 01e4 0140A003 		moveq	r4, #1	@ tmp256,
 449 01e8 0040A013 		movne	r4, #0	@ tmp256,
 450              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 451              		.loc 1 106 47 view .LVU96
 452 01ec 0C2082E0 		add	r2, r2, ip	@ tmp265, tmp264, scale_value
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 view .LVU97
 455 01f0 FF005CE3 		cmp	ip, #255	@ scale_value,
 456 01f4 04C0A011 		movne	ip, r4	@, tmp261, tmp256
 457 01f8 01C08403 		orreq	ip, r4, #1	@,, tmp261, tmp256
 458              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 459              		.loc 1 106 47 view .LVU98
 460 01fc 013083E2 		add	r3, r3, #1	@ tmp253, *_104,
 461              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 462              		.loc 1 94 19 view .LVU99
 463 0200 00005CE3 		cmp	ip, #0	@ tmp261,
 464              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 465              		.loc 1 106 47 view .LVU100
 466 0204 8220A0E1 		lsl	r2, r2, #1	@ tmp266, tmp265,
 467 0208 B1308EE1 		strh	r3, [lr, r1]	@ movhi	@ tmp253, *_104
 468              		.loc 1 107 17 is_stmt 1 view .LVU101
 469              	.LVL15:
  91:armwave.c     ****                 
 470              		.loc 1 91 17 view .LVU102
  94:armwave.c     ****                     continue;
 471              		.loc 1 94 17 view .LVU103
 472              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 473              		.loc 1 94 19 is_stmt 0 view .LVU104
 474 020c 1000001A 		bne	.L20		@,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU105
 477 0210 04309DE5 		ldr	r3, [sp, #4]	@ tmp277, %sfp
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU106
 480 0214 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 481              	.LVL16:
 482              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 483              		.loc 1 106 47 view .LVU107
 484 0218 B2109EE1 		ldrh	r1, [lr, r2]	@ *_133, *_133
 485 021c 9B0323E0 		mla	r3, fp, r3, r0	@ tmp279, _6, tmp277, word
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 20 view .LVU108
 488 0220 01C0A003 		moveq	ip, #1	@ tmp271,
 489 0224 00C0A013 		movne	ip, #0	@ tmp271,
 490              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 491              		.loc 1 106 47 view .LVU109
 492 0228 0A3083E0 		add	r3, r3, r10	@ tmp280, tmp279, _7
 493              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 494              		.loc 1 94 19 view .LVU110
 495 022c FF0050E3 		cmp	r0, #255	@ word,
 496 0230 0C00A011 		movne	r0, ip	@, tmp276, tmp271
 497 0234 01008C03 		orreq	r0, ip, #1	@,, tmp276, tmp271
 498 0238 000050E3 		cmp	r0, #0	@ tmp276,
 499              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 500              		.loc 1 106 47 view .LVU111
 501 023c 8330A0E1 		lsl	r3, r3, #1	@ tmp281, tmp280,
 502 0240 011081E2 		add	r1, r1, #1	@ tmp269, *_133,
 503 0244 B2108EE1 		strh	r1, [lr, r2]	@ movhi	@ tmp269, *_133
 504              		.loc 1 107 17 is_stmt 1 view .LVU112
 505              	.LVL17:
  91:armwave.c     ****                 
 506              		.loc 1 91 17 view .LVU113
  94:armwave.c     ****                     continue;
 507              		.loc 1 94 17 view .LVU114
 508              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 509              		.loc 1 106 47 is_stmt 0 view .LVU115
 510 0248 B3209E01 		ldrheq	r2, [lr, r3]	@ *_162, *_162
 511 024c 01208202 		addeq	r2, r2, #1	@ tmp284, *_162,
 512 0250 B3208E01 		strheq	r2, [lr, r3]	@ movhi	@ tmp284, *_162
 513              		.loc 1 107 17 is_stmt 1 view .LVU116
 514              	.LVL18:
 515              	.L20:
 516              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 517              		.loc 1 84 9 is_stmt 0 view .LVU117
 518 0254 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 519 0258 070053E1 		cmp	r3, r7	@ height, tmp285
 520 025c 00309DE5 		ldr	r3, [sp]	@ _186, %sfp
 521 0260 036086E0 		add	r6, r6, r3	@ ivtmp.43, ivtmp.43, _186
 522 0264 B2FFFF8A 		bhi	.L14		@,
 523              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 524              		.loc 1 79 44 view .LVU118
 525 0268 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 526              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 527              		.loc 1 79 5 view .LVU119
 528 026c 20209DE5 		ldr	r2, [sp, #32]	@ _93, %sfp
 529              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 530              		.loc 1 79 44 view .LVU120
 531 0270 013083E2 		add	r3, r3, #1	@ w, w,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 5 view .LVU121
 534 0274 020053E1 		cmp	r3, r2	@ w, _93
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU122
 537 0278 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 538              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU123
 540 027c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.48, %sfp
 541 0280 24309DE5 		ldr	r3, [sp, #36]	@ _9, %sfp
 542              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 543              		.loc 1 79 44 view .LVU124
 544 0284 032042E0 		sub	r2, r2, r3	@ ivtmp.48, ivtmp.48, _9
 545 0288 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.48, %sfp
 546 028c 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.49, %sfp
 547 0290 033082E0 		add	r3, r2, r3	@ ivtmp.49, ivtmp.49, _9
 548 0294 18308DE5 		str	r3, [sp, #24]	@ ivtmp.49, %sfp
 549              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 550              		.loc 1 79 5 view .LVU125
 551 0298 A2FFFF1A 		bne	.L19		@,
 552              	.LVL21:
 553              	.L11:
 554              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 555              		.loc 1 111 1 view .LVU126
 556 029c 34D08DE2 		add	sp, sp, #52	@,,
 557              		.cfi_def_cfa_offset 36
 558              		@ sp needed	@
 559 02a0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 560              	.LVL22:
 561              	.L28:
 562              		.loc 1 111 1 view .LVU127
 563              		.align	2
 564              	.L27:
 565 02a4 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL23:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** /*
 114:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 115:armwave.c     ****  * Rows are repeated as necessary.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 118:armwave.c     **** {
 578              		.loc 1 118 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 8
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 119 5 view .LVU129
 120:armwave.c     ****     // uint32_t ysub;
 121:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 121 5 view .LVU130
 122:armwave.c     ****     uint8_t r, g, b;
 584              		.loc 1 122 5 view .LVU131
 123:armwave.c     ****     int value; 
 585              		.loc 1 123 5 view .LVU132
 124:armwave.c     ****     // uint8_t row;
 125:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 586              		.loc 1 125 5 view .LVU133
 587              	@ armwave.c:118: {
 118:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 588              		.loc 1 118 1 is_stmt 0 view .LVU134
 589 02a8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 590              		.cfi_def_cfa_offset 36
 591              		.cfi_offset 4, -36
 592              		.cfi_offset 5, -32
 593              		.cfi_offset 6, -28
 594              		.cfi_offset 7, -24
 595              		.cfi_offset 8, -20
 596              		.cfi_offset 9, -16
 597              		.cfi_offset 10, -12
 598              		.cfi_offset 11, -8
 599              		.cfi_offset 14, -4
 600              	@ armwave.c:129:     assert(out_buffer != NULL);
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 127:armwave.c     ****     uint32_t offset;
 128:armwave.c     **** 
 129:armwave.c     ****     assert(out_buffer != NULL);
 601              		.loc 1 129 5 view .LVU135
 602 02ac 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 603              	@ armwave.c:125:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 125:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 604              		.loc 1 125 15 view .LVU136
 605 02b0 70519FE5 		ldr	r5, .L49	@ tmp224,
 606              	@ armwave.c:118: {
 118:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 607              		.loc 1 118 1 view .LVU137
 608 02b4 0CD04DE2 		sub	sp, sp, #12	@,,
 609              		.cfi_def_cfa_offset 48
 610              	@ armwave.c:125:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 125:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 611              		.loc 1 125 15 view .LVU138
 612 02b8 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 613              	.LVL24:
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 614              		.loc 1 126 5 is_stmt 1 view .LVU139
 127:armwave.c     **** 
 615              		.loc 1 127 5 view .LVU140
 616              		.loc 1 129 5 view .LVU141
 617 02bc 5400000A 		beq	.L47		@,
 130:armwave.c     **** 
 131:armwave.c     ****     // we don't really want to be doing this if possible
 132:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 618              		.loc 1 132 5 view .LVU142
 619              	@ armwave.c:132:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 620              		.loc 1 132 59 is_stmt 0 view .LVU143
 621 02c0 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 622 02c4 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 623              	@ armwave.c:132:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 624              		.loc 1 132 5 view .LVU144
 625 02c8 0010A0E3 		mov	r1, #0	@,
 626              	@ armwave.c:132:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 627              		.loc 1 132 59 view .LVU145
 628 02cc 920302E0 		mul	r2, r2, r3	@ tmp180, g_armwave_state.target_height, g_armwave_state.target_width
 629              	@ armwave.c:132:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 630              		.loc 1 132 5 view .LVU146
 631 02d0 0221A0E1 		lsl	r2, r2, #2	@, tmp180,
 632 02d4 FEFFFFEB 		bl	memset		@
 633              	.LVL25:
 133:armwave.c     **** 
 134:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 634              		.loc 1 134 5 is_stmt 1 view .LVU147
 635              	@ armwave.c:134:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 636              		.loc 1 134 10 is_stmt 0 view .LVU148
 637 02d8 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 638 02dc 400095E5 		ldr	r0, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 639 02e0 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 640              	.LVL26:
 135:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 136:armwave.c     **** 
 137:armwave.c     **** #if 0
 138:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 139:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 140:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 141:armwave.c     ****         // most normal waveforms.
 142:armwave.c     ****         wave_word = *base_32ptr++;
 143:armwave.c     **** 
 144:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 145:armwave.c     ****             for(w = 0; w < 2; w++) {
 146:armwave.c     ****                 value = wave_word & 0xffff;
 147:armwave.c     ****                 wave_word >>= 16;
 148:armwave.c     **** 
 149:armwave.c     ****                 if(value != 0) {
 150:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 151:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 152:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 153:armwave.c     **** 
 154:armwave.c     ****                     r = MIN(rr, 255);
 155:armwave.c     ****                     g = MIN(gg, 255);
 156:armwave.c     ****                     b = MIN(bb, 255);
 157:armwave.c     **** 
 158:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 159:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 160:armwave.c     **** 
 161:armwave.c     ****                     // Plot the pixels
 162:armwave.c     ****                     nsub = n + (w * 2);
 163:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 164:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 165:armwave.c     ****                     xx = (nsub >> 8);
 166:armwave.c     **** 
 167:armwave.c     ****                     for(y = yy; y < ye; y++) {
 168:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 169:armwave.c     ****                         *(out_buffer_base + offset) = word;
 170:armwave.c     ****                     }
 171:armwave.c     ****                 }
 172:armwave.c     ****             }
 173:armwave.c     ****         }
 174:armwave.c     ****     }
 175:armwave.c     **** #endif
 176:armwave.c     **** 
 177:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 641              		.loc 1 177 5 is_stmt 1 view .LVU149
 642              		.loc 1 177 5 is_stmt 0 view .LVU150
 643 02e4 000050E3 		cmp	r0, #0	@ npix,
 644 02e8 0D0000DA 		ble	.L29		@,
 645              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 178:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 179:armwave.c     ****         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 181:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 2; w++) {
 183:armwave.c     ****                 value = wave_word & 0xffff;
 184:armwave.c     ****                 wave_word >>= 16;
 185:armwave.c     **** 
 186:armwave.c     ****                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 646              		.loc 1 188 52 view .LVU151
 647 02ec FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 648              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 649              		.loc 1 187 52 view .LVU152
 650 02f0 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _13, g_armwave_state.ch1_color.r
 651              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 194:armwave.c     **** 
 195:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 196:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 198:armwave.c     ****                     // Plot the pixels
 199:armwave.c     ****                     nsub = n + w;
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 652              		.loc 1 200 57 view .LVU153
 653 02f4 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 654              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 655              		.loc 1 188 52 view .LVU154
 656 02f8 00308DE5 		str	r3, [sp]	@ _16, %sfp
 657              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 658              		.loc 1 189 52 view .LVU155
 659 02fc F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 660 0300 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 661              	@ armwave.c:177:     for(n = 0; n < npix; n += 2) {
 177:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 662              		.loc 1 177 11 view .LVU156
 663 0304 0030A0E3 		mov	r3, #0	@ n,
 664              	.LVL27:
 665              	.L36:
 179:armwave.c     **** 
 666              		.loc 1 179 9 is_stmt 1 view .LVU157
 667              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 668              		.loc 1 179 19 is_stmt 0 view .LVU158
 669 0308 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_62, offset: 4294967292B]
 670              	.LVL28:
 181:armwave.c     ****             for(w = 0; w < 2; w++) {
 671              		.loc 1 181 9 is_stmt 1 view .LVU159
 672              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 2; w++) {
 673              		.loc 1 181 11 is_stmt 0 view .LVU160
 674 030c 000052E3 		cmp	r2, #0	@ wave_word,
 675              	@ armwave.c:182:             for(w = 0; w < 2; w++) {
 182:armwave.c     ****                 value = wave_word & 0xffff;
 676              		.loc 1 182 19 view .LVU161
 677 0310 0080A013 		movne	r8, #0	@ w,
 678              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 2; w++) {
 679              		.loc 1 181 11 view .LVU162
 680 0314 0400001A 		bne	.L35		@,
 681              	.L32:
 682              	@ armwave.c:177:     for(n = 0; n < npix; n += 2) {
 177:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 683              		.loc 1 177 28 view .LVU163
 684 0318 023083E2 		add	r3, r3, #2	@ n, n,
 685              	.LVL29:
 686              	@ armwave.c:177:     for(n = 0; n < npix; n += 2) {
 177:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 687              		.loc 1 177 5 view .LVU164
 688 031c 030050E1 		cmp	r0, r3	@ npix, n
 689 0320 F8FFFFCA 		bgt	.L36		@,
 690              	.LVL30:
 691              	.L29:
 692              	@ armwave.c:212: }
 201:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 202:armwave.c     ****                     xx = (nsub >> 8) / 2;
 203:armwave.c     **** 
 204:armwave.c     ****                     for(y = yy; y < ye; y++) {
 205:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 206:armwave.c     ****                         *(out_buffer_base + offset) = word;
 207:armwave.c     ****                     }
 208:armwave.c     ****                 }
 209:armwave.c     ****             }
 210:armwave.c     ****         }
 211:armwave.c     ****     }
 212:armwave.c     **** }
 693              		.loc 1 212 1 view .LVU165
 694 0324 0CD08DE2 		add	sp, sp, #12	@,,
 695              		.cfi_remember_state
 696              		.cfi_def_cfa_offset 36
 697              		@ sp needed	@
 698 0328 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 699              	.LVL31:
 700              	.L35:
 701              		.cfi_restore_state
 183:armwave.c     ****                 wave_word >>= 16;
 702              		.loc 1 183 17 is_stmt 1 view .LVU166
 703              	@ armwave.c:183:                 value = wave_word & 0xffff;
 183:armwave.c     ****                 wave_word >>= 16;
 704              		.loc 1 183 23 is_stmt 0 view .LVU167
 705 032c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 706              	.LVL32:
 184:armwave.c     **** 
 707              		.loc 1 184 17 is_stmt 1 view .LVU168
 708              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 709              		.loc 1 186 19 is_stmt 0 view .LVU169
 710 0330 000059E3 		cmp	r9, #0	@ value,
 711              	@ armwave.c:184:                 wave_word >>= 16;
 184:armwave.c     **** 
 712              		.loc 1 184 27 view .LVU170
 713 0334 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 714              	.LVL33:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 715              		.loc 1 186 17 is_stmt 1 view .LVU171
 716              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 717              		.loc 1 186 19 is_stmt 0 view .LVU172
 718 0338 0600001A 		bne	.L48		@,
 719              	.LVL34:
 720              	.L33:
 721              	@ armwave.c:182:             for(w = 0; w < 2; w++) {
 182:armwave.c     ****                 value = wave_word & 0xffff;
 722              		.loc 1 182 13 view .LVU173
 723 033c 010058E3 		cmp	r8, #1	@ w,
 724 0340 F4FFFF0A 		beq	.L32		@,
 725              	@ armwave.c:183:                 value = wave_word & 0xffff;
 183:armwave.c     ****                 wave_word >>= 16;
 726              		.loc 1 183 23 view .LVU174
 727 0344 7290FFE6 		uxth	r9, r2	@ value, wave_word
 728              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 729              		.loc 1 186 19 view .LVU175
 730 0348 000059E3 		cmp	r9, #0	@ value,
 731 034c 0180A0E3 		mov	r8, #1	@ w,
 732              	.LVL35:
 183:armwave.c     ****                 wave_word >>= 16;
 733              		.loc 1 183 17 is_stmt 1 view .LVU176
 184:armwave.c     **** 
 734              		.loc 1 184 17 view .LVU177
 735              	@ armwave.c:184:                 wave_word >>= 16;
 184:armwave.c     **** 
 736              		.loc 1 184 27 is_stmt 0 view .LVU178
 737 0350 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 738              	.LVL36:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 739              		.loc 1 186 17 is_stmt 1 view .LVU179
 740              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 741              		.loc 1 186 19 is_stmt 0 view .LVU180
 742 0354 F8FFFF0A 		beq	.L33		@,
 743              	.L48:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 744              		.loc 1 187 21 is_stmt 1 view .LVU181
 745              	.LVL37:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 746              		.loc 1 188 21 view .LVU182
 189:armwave.c     **** 
 747              		.loc 1 189 21 view .LVU183
 191:armwave.c     ****                     g = MIN(gg, 255);
 748              		.loc 1 191 21 view .LVU184
 192:armwave.c     ****                     b = MIN(bb, 255);
 749              		.loc 1 192 21 view .LVU185
 193:armwave.c     **** 
 750              		.loc 1 193 21 view .LVU186
 196:armwave.c     **** 
 751              		.loc 1 196 21 view .LVU187
 752              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 753              		.loc 1 189 55 is_stmt 0 view .LVU188
 754 0358 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 755 035c 08E083E0 		add	lr, r3, r8	@ _131, n, w
 756 0360 99010CE0 		mul	ip, r9, r1	@ tmp198, value, _19
 757              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 200 32 view .LVU189
 759 0364 7E10EFE6 		uxtb	r1, lr	@ _31, _131
 760              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8) / 2;
 761              		.loc 1 201 41 view .LVU190
 762 0368 017081E2 		add	r7, r1, #1	@ tmp213, _31,
 763              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 764              		.loc 1 200 40 view .LVU191
 765 036c 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 766              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8) / 2;
 767              		.loc 1 201 41 view .LVU192
 768 0370 107A07EE 		vmov	s14, r7	@ int	@ tmp213, tmp213
 769              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 770              		.loc 1 188 55 view .LVU193
 771 0374 00109DE5 		ldr	r1, [sp]	@ _16, %sfp
 772              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 773              		.loc 1 189 24 view .LVU194
 774 0378 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp198,
 775              	.LVL38:
 776              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 777              		.loc 1 200 40 view .LVU195
 778 037c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp211, _31
 779              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8) / 2;
 780              		.loc 1 201 46 view .LVU196
 781 0380 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp214, tmp213
 782              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 783              		.loc 1 188 55 view .LVU197
 784 0384 99010AE0 		mul	r10, r9, r1	@ tmp202, value, _16
 785              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 786              		.loc 1 187 55 view .LVU198
 787 0388 990B09E0 		mul	r9, r9, fp	@ tmp208, value, _13
 788              	.LVL39:
 789              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 790              		.loc 1 193 25 view .LVU199
 791 038c FF005CE3 		cmp	ip, #255	@ bb,
 792              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 793              		.loc 1 188 24 view .LVU200
 794 0390 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp202,
 795              	.LVL40:
 796              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 797              		.loc 1 200 40 view .LVU201
 798 0394 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp212, tmp211, _33
 799              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8) / 2;
 800              		.loc 1 201 46 view .LVU202
 801 0398 267A27EE 		vmul.f32	s14, s14, s13	@ tmp215, tmp214, _33
 802              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 803              		.loc 1 193 25 view .LVU203
 804 039c FFC0A0A3 		movge	ip, #255	@ bb,
 805              	.LVL41:
 806              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 807              		.loc 1 192 25 view .LVU204
 808 03a0 FF005AE3 		cmp	r10, #255	@ gg,
 809 03a4 FFA0A0A3 		movge	r10, #255	@ gg,
 810              	.LVL42:
 811              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 812              		.loc 1 187 24 view .LVU205
 813 03a8 4994A0E1 		asr	r9, r9, #8	@ rr, tmp208,
 814              	.LVL43:
 815              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 816              		.loc 1 191 25 view .LVU206
 817 03ac FF0059E3 		cmp	r9, #255	@ rr,
 818              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 819              		.loc 1 196 56 view .LVU207
 820 03b0 0AA4A0E1 		lsl	r10, r10, #8	@ tmp203, gg,
 821              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 822              		.loc 1 200 24 view .LVU208
 823 03b4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp212
 824              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 825              		.loc 1 191 25 view .LVU209
 826 03b8 FF90A0A3 		movge	r9, #255	@ rr,
 827              	.LVL44:
 828              	@ armwave.c:202:                     xx = (nsub >> 8) / 2;
 202:armwave.c     **** 
 829              		.loc 1 202 32 view .LVU210
 830 03bc 4EE4A0E1 		asr	lr, lr, #8	@ tmp216, _131,
 831              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 832              		.loc 1 196 44 view .LVU211
 833 03c0 0CC8A0E1 		lsl	ip, ip, #16	@ tmp199, bb,
 834              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 835              		.loc 1 196 56 view .LVU212
 836 03c4 7AA0FFE6 		uxth	r10, r10	@ tmp204, tmp203
 837              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 838              		.loc 1 196 44 view .LVU213
 839 03c8 FFC80CE2 		and	ip, ip, #16711680	@ tmp200, tmp199,
 840              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 841              		.loc 1 196 51 view .LVU214
 842 03cc 0AC08CE1 		orr	ip, ip, r10	@ tmp206, tmp200, tmp204
 843              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 844              		.loc 1 196 62 view .LVU215
 845 03d0 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 846              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 847              		.loc 1 200 24 view .LVU216
 848 03d4 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 849              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8) / 2;
 850              		.loc 1 201 24 view .LVU217
 851 03d8 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp215
 852              	@ armwave.c:202:                     xx = (nsub >> 8) / 2;
 202:armwave.c     **** 
 853              		.loc 1 202 38 view .LVU218
 854 03dc AE9F8EE0 		add	r9, lr, lr, lsr #31	@ tmp218, tmp216, tmp216,
 855              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 856              		.loc 1 196 62 view .LVU219
 857 03e0 0AC08CE1 		orr	ip, ip, r10	@ tmp210, tmp206, rr
 858              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 859              		.loc 1 196 26 view .LVU220
 860 03e4 FFE48CE3 		orr	lr, ip, #-16777216	@ word, tmp210,
 861              	.LVL45:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 862              		.loc 1 199 21 is_stmt 1 view .LVU221
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 863              		.loc 1 200 21 view .LVU222
 201:armwave.c     ****                     xx = (nsub >> 8) / 2;
 864              		.loc 1 201 21 view .LVU223
 865              	@ armwave.c:202:                     xx = (nsub >> 8) / 2;
 202:armwave.c     **** 
 866              		.loc 1 202 38 is_stmt 0 view .LVU224
 867 03e8 C990A0E1 		asr	r9, r9, #1	@ xx, tmp218,
 868              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8) / 2;
 869              		.loc 1 201 24 view .LVU225
 870 03ec 907A17EE 		vmov	r7, s15	@ int	@ ye, ye
 871              	.LVL46:
 202:armwave.c     **** 
 872              		.loc 1 202 21 is_stmt 1 view .LVU226
 204:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 204 21 view .LVU227
 204:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 874              		.loc 1 204 21 is_stmt 0 view .LVU228
 875 03f0 070051E1 		cmp	r1, r7	@ yy, ye
 876 03f4 D0FFFF2A 		bcs	.L33		@,
 877              	.LVL47:
 878              	.L34:
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 879              		.loc 1 205 25 is_stmt 1 discriminator 3 view .LVU229
 206:armwave.c     ****                     }
 880              		.loc 1 206 25 discriminator 3 view .LVU230
 881              	@ armwave.c:205:                         offset = (xx + (y * g_armwave_state.target_width)); 
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 882              		.loc 1 205 43 is_stmt 0 discriminator 3 view .LVU231
 883 03f8 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 884              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 885              		.loc 1 206 43 discriminator 3 view .LVU232
 886 03fc 9C912CE0 		mla	ip, ip, r1, r9	@ tmp223, g_armwave_state.target_width, yy, xx
 887              	.LVL48:
 888              	@ armwave.c:204:                     for(y = yy; y < ye; y++) {
 204:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 889              		.loc 1 204 42 discriminator 3 view .LVU233
 890 0400 011081E2 		add	r1, r1, #1	@ yy, yy,
 891              	.LVL49:
 892              	@ armwave.c:204:                     for(y = yy; y < ye; y++) {
 204:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 893              		.loc 1 204 21 discriminator 3 view .LVU234
 894 0404 010057E1 		cmp	r7, r1	@ ye, yy
 895              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 896              		.loc 1 206 53 discriminator 3 view .LVU235
 897 0408 0CE186E7 		str	lr, [r6, ip, lsl #2]	@ word, *_44
 898              	@ armwave.c:204:                     for(y = yy; y < ye; y++) {
 204:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 899              		.loc 1 204 21 discriminator 3 view .LVU236
 900 040c F9FFFF1A 		bne	.L34		@,
 204:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 901              		.loc 1 204 21 discriminator 3 view .LVU237
 902 0410 C9FFFFEA 		b	.L33		@
 903              	.LVL50:
 904              	.L47:
 129:armwave.c     **** 
 905              		.loc 1 129 5 is_stmt 1 discriminator 1 view .LVU238
 906 0414 10309FE5 		ldr	r3, .L49+4	@,
 907 0418 8120A0E3 		mov	r2, #129	@,
 908 041c 0C109FE5 		ldr	r1, .L49+8	@,
 909 0420 0C009FE5 		ldr	r0, .L49+12	@,
 910              	.LVL51:
 129:armwave.c     **** 
 911              		.loc 1 129 5 is_stmt 0 discriminator 1 view .LVU239
 912 0424 FEFFFFEB 		bl	__assert_fail		@
 913              	.LVL52:
 914              	.L50:
 915              		.align	2
 916              	.L49:
 917 0428 00000000 		.word	g_armwave_state
 918 042c 00000000 		.word	.LANCHOR0
 919 0430 20000000 		.word	.LC2
 920 0434 2C000000 		.word	.LC3
 921              		.cfi_endproc
 922              	.LFE60:
 924              		.global	__aeabi_idiv
 925              		.align	2
 926              		.global	armwave_generate
 927              		.syntax unified
 928              		.arm
 929              		.fpu vfp
 931              	armwave_generate:
 932              	.LFB61:
 213:armwave.c     **** 
 214:armwave.c     **** /*
 215:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 216:armwave.c     ****  */
 217:armwave.c     **** void armwave_generate()
 218:armwave.c     **** {
 933              		.loc 1 218 1 is_stmt 1 view -0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 72
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 219:armwave.c     ****     uint32_t yy;
 937              		.loc 1 219 5 view .LVU241
 220:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 938              		.loc 1 220 5 view .LVU242
 939              	.LVL53:
 221:armwave.c     **** 
 222:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 940              		.loc 1 222 5 view .LVU243
 941              	@ armwave.c:218: {
 218:armwave.c     ****     uint32_t yy;
 942              		.loc 1 218 1 is_stmt 0 view .LVU244
 943 0438 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 944              		.cfi_def_cfa_offset 36
 945              		.cfi_offset 4, -36
 946              		.cfi_offset 5, -32
 947              		.cfi_offset 6, -28
 948              		.cfi_offset 7, -24
 949              		.cfi_offset 8, -20
 950              		.cfi_offset 9, -16
 951              		.cfi_offset 10, -12
 952              		.cfi_offset 11, -8
 953              		.cfi_offset 14, -4
 954              	@ armwave.c:222:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 955              		.loc 1 222 5 view .LVU245
 956 043c 0010A0E3 		mov	r1, #0	@,
 957              	@ armwave.c:222:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 958              		.loc 1 222 58 view .LVU246
 959 0440 90429FE5 		ldr	r4, .L71	@ tmp212,
 960              	@ armwave.c:218: {
 218:armwave.c     ****     uint32_t yy;
 961              		.loc 1 218 1 view .LVU247
 962 0444 4CD04DE2 		sub	sp, sp, #76	@,,
 963              		.cfi_def_cfa_offset 112
 964              	@ armwave.c:222:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 965              		.loc 1 222 5 view .LVU248
 966 0448 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 967 044c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 968 0450 FEFFFFEB 		bl	memset		@
 969              	.LVL54:
 223:armwave.c     **** 
 224:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 970              		.loc 1 224 5 is_stmt 1 view .LVU249
 971              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 972              		.loc 1 224 68 is_stmt 0 view .LVU250
 973 0454 445094E5 		ldr	r5, [r4, #68]	@ _133, g_armwave_state.slice_height
 974              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 975              		.loc 1 224 51 view .LVU251
 976 0458 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 977 045c 0510A0E1 		mov	r1, r5	@, _133
 978              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 979              		.loc 1 224 68 view .LVU252
 980 0460 24508DE5 		str	r5, [sp, #36]	@ _133, %sfp
 981              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 982              		.loc 1 224 51 view .LVU253
 983 0464 FEFFFFEB 		bl	__aeabi_idiv		@
 984              	.LVL55:
 985              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 986              		.loc 1 224 5 view .LVU254
 987 0468 003050E2 		subs	r3, r0, #0	@ _179,
 988 046c 40308DE5 		str	r3, [sp, #64]	@ _179, %sfp
 989 0470 9600000A 		beq	.L51		@,
 990              	.LBB10:
 991              	.LBB11:
 992              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 993              		.loc 1 79 35 view .LVU255
 994 0474 383094E5 		ldr	r3, [r4, #56]	@ _38, g_armwave_state.waves
 995              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 996              		.loc 1 80 81 view .LVU256
 997 0478 341094E5 		ldr	r1, [r4, #52]	@ _24, g_armwave_state.wave_stride
 998 047c 000053E3 		cmp	r3, #0	@ _38,
 999              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1000              		.loc 1 79 35 view .LVU257
 1001 0480 30308DE5 		str	r3, [sp, #48]	@ _38, %sfp
 1002              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1003              		.loc 1 71 40 view .LVU258
 1004 0484 048094E5 		ldr	r8, [r4, #4]	@ _16, g_armwave_state.ch1_buffer
 1005              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1006              		.loc 1 71 82 view .LVU259
 1007 0488 243094E5 		ldr	r3, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 1008              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1009              		.loc 1 71 147 view .LVU260
 1010 048c 409094E5 		ldr	r9, [r4, #64]	@ _21, g_armwave_state.bitdepth_height
 1011              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1012              		.loc 1 80 36 view .LVU261
 1013 0490 142094E5 		ldr	r2, [r4, #20]	@ _23, g_armwave_state.wave_buffer
 1014              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1015              		.loc 1 80 81 view .LVU262
 1016 0494 2C108DE5 		str	r1, [sp, #44]	@ _24, %sfp
 1017 0498 8C0000DA 		ble	.L51		@,
 1018 049c 000055E3 		cmp	r5, #0	@ _133,
 1019 04a0 8A00000A 		beq	.L51		@,
 1020 04a4 930500E0 		mul	r0, r3, r5	@ _185, _17, _133
 1021 04a8 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp235, _17, _17,
 1022 04ac 10208DE5 		str	r2, [sp, #16]	@ ivtmp.85, %sfp
 1023 04b0 002062E2 		rsb	r2, r2, #0	@ ivtmp.84, ivtmp.85
 1024 04b4 44008DE5 		str	r0, [sp, #68]	@ _185, %sfp
 1025 04b8 14208DE5 		str	r2, [sp, #20]	@ ivtmp.84, %sfp
 1026 04bc 8300A0E1 		lsl	r0, r3, #1	@ tmp231, _17,
 1027 04c0 8120A0E1 		lsl	r2, r1, #1	@ tmp236, tmp235,
 1028 04c4 09B0A0E1 		mov	fp, r9	@ _21, _21
 1029 04c8 00C0A0E3 		mov	ip, #0	@ ivtmp.83,
 1030 04cc 3C208DE5 		str	r2, [sp, #60]	@ tmp236, %sfp
 1031 04d0 032080E0 		add	r2, r0, r3	@ ivtmp.73, tmp231, _17
 1032 04d4 0331A0E1 		lsl	r3, r3, #2	@ _208, _17,
 1033 04d8 38008DE5 		str	r0, [sp, #56]	@ tmp231, %sfp
 1034 04dc 18C08DE5 		str	ip, [sp, #24]	@ ivtmp.83, %sfp
 1035 04e0 34208DE5 		str	r2, [sp, #52]	@ ivtmp.73, %sfp
 1036              	.LBE11:
 1037              	.LBE10:
 1038              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1039              		.loc 1 224 12 view .LVU263
 1040 04e4 28C08DE5 		str	ip, [sp, #40]	@ ivtmp.83, %sfp
 1041 04e8 1C308DE5 		str	r3, [sp, #28]	@ _208, %sfp
 1042              	.LVL56:
 1043              	.L57:
 225:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 226:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 227:armwave.c     **** 
 228:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1044              		.loc 1 228 9 is_stmt 1 discriminator 3 view .LVU264
 1045              	.LBB13:
 1046              	.LBI10:
  62:armwave.c     **** {
 1047              		.loc 1 62 6 discriminator 3 view .LVU265
 1048              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1049              		.loc 1 64 5 discriminator 3 view .LVU266
  65:armwave.c     ****     uint8_t *wave_base;
 1050              		.loc 1 65 5 discriminator 3 view .LVU267
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 1051              		.loc 1 66 5 discriminator 3 view .LVU268
  67:armwave.c     ****     bufftyp_t *write_buffer;
 1052              		.loc 1 67 5 discriminator 3 view .LVU269
  68:armwave.c     **** 
 1053              		.loc 1 68 5 discriminator 3 view .LVU270
  71:armwave.c     **** 
 1054              		.loc 1 71 5 discriminator 3 view .LVU271
 1055              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1056              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU272
 1057 04ec 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.83, %sfp
 1058              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1059              		.loc 1 71 130 discriminator 3 view .LVU273
 1060 04f0 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.85, %sfp
 1061              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1062              		.loc 1 71 105 discriminator 3 view .LVU274
 1063 04f4 2338A0E1 		lsr	r3, r3, #16	@ tmp237, ivtmp.83,
 1064              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1065              		.loc 1 71 130 discriminator 3 view .LVU275
 1066 04f8 00208DE5 		str	r2, [sp]	@ ivtmp.85, %sfp
 1067 04fc 9B0307E0 		mul	r7, fp, r3	@ _22, _21, tmp237
 1068              	.LVL57:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1069              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU276
 1070              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1071              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU277
 1072 0500 14309DE5 		ldr	r3, [sp, #20]	@ ivtmp.84, %sfp
 1073 0504 04308DE5 		str	r3, [sp, #4]	@ ivtmp.84, %sfp
 1074              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1075              		.loc 1 79 11 discriminator 3 view .LVU278
 1076 0508 0030A0E3 		mov	r3, #0	@ w,
 1077 050c 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1078              	.LVL58:
 1079              	.L54:
  80:armwave.c     **** 
 1080              		.loc 1 80 9 is_stmt 1 view .LVU279
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1081              		.loc 1 84 9 view .LVU280
 1082              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1083              		.loc 1 79 11 is_stmt 0 view .LVU281
 1084 0510 38509DE5 		ldr	r5, [sp, #56]	@ ivtmp.74, %sfp
 1085 0514 34A09DE5 		ldr	r10, [sp, #52]	@ ivtmp.73, %sfp
 1086 0518 00309DE5 		ldr	r3, [sp]	@ ivtmp.80, %sfp
 1087 051c 08308DE5 		str	r3, [sp, #8]	@ ivtmp.80, %sfp
 1088              	.LVL59:
 1089              	.L56:
  87:armwave.c     **** 
 1090              		.loc 1 87 13 is_stmt 1 view .LVU282
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1091              		.loc 1 101 17 view .LVU283
 106:armwave.c     ****                 word >>= 8;
 1092              		.loc 1 106 17 view .LVU284
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1093              		.loc 1 101 17 view .LVU285
 106:armwave.c     ****                 word >>= 8;
 1094              		.loc 1 106 17 view .LVU286
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1095              		.loc 1 101 17 view .LVU287
 106:armwave.c     ****                 word >>= 8;
 1096              		.loc 1 106 17 view .LVU288
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1097              		.loc 1 101 17 view .LVU289
 106:armwave.c     ****                 word >>= 8;
 1098              		.loc 1 106 17 view .LVU290
 1099              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1100              		.loc 1 102 34 is_stmt 0 view .LVU291
 1101 0520 3C209DE5 		ldr	r2, [sp, #60]	@ tmp236, %sfp
 1102              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1103              		.loc 1 87 18 view .LVU292
 1104 0524 08E09DE5 		ldr	lr, [sp, #8]	@ ivtmp.72, %sfp
 1105              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1106              		.loc 1 102 34 view .LVU293
 1107 0528 053082E0 		add	r3, r2, r5	@ tmp245, tmp236, ivtmp.74
 1108 052c 0A1082E0 		add	r1, r2, r10	@ tmp262, tmp236, ivtmp.73
 1109              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1110              		.loc 1 102 74 view .LVU294
 1111 0530 2338A0E1 		lsr	r3, r3, #16	@ tmp246, tmp245,
 1112              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1113              		.loc 1 87 18 view .LVU295
 1114 0534 04009EE4 		ldr	r0, [lr], #4	@ word, MEM[base: _204, offset: 0B]
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU296
 1117 0538 9B7323E0 		mla	r3, fp, r3, r7	@ tmp248, _21, tmp246, _22
 1118              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1119              		.loc 1 94 20 view .LVU297
 1120 053c FF9010E2 		ands	r9, r0, #255	@ scale_value, word,
 1121              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1122              		.loc 1 107 22 view .LVU298
 1123 0540 2068A0E1 		lsr	r6, r0, #16	@ word, word,
 1124              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1125              		.loc 1 94 20 view .LVU299
 1126 0544 0160A003 		moveq	r6, #1	@ tmp239,
 1127 0548 0060A013 		movne	r6, #0	@ tmp239,
 1128              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1129              		.loc 1 106 47 view .LVU300
 1130 054c 093083E0 		add	r3, r3, r9	@ tmp249, tmp248, scale_value
 1131              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 19 view .LVU301
 1133 0550 FF0059E3 		cmp	r9, #255	@ scale_value,
 1134 0554 01608603 		orreq	r6, r6, #1	@,, tmp244, tmp239
 1135              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1136              		.loc 1 87 18 view .LVU302
 1137 0558 08E08DE5 		str	lr, [sp, #8]	@ ivtmp.72, %sfp
 1138              	.LVL60:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1139              		.loc 1 89 13 is_stmt 1 view .LVU303
  91:armwave.c     ****                 
 1140              		.loc 1 91 17 view .LVU304
  94:armwave.c     ****                     continue;
 1141              		.loc 1 94 17 view .LVU305
 1142              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1143              		.loc 1 84 9 is_stmt 0 view .LVU306
 1144 055c 0E90A0E1 		mov	r9, lr	@ ivtmp.72, ivtmp.72
 1145 0560 04E09DE5 		ldr	lr, [sp, #4]	@ ivtmp.79, %sfp
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1146              		.loc 1 84 9 view .LVU307
 1147 0564 1C409DE5 		ldr	r4, [sp, #28]	@ _208, %sfp
 1148              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1149              		.loc 1 102 74 view .LVU308
 1150 0568 2528A0E1 		lsr	r2, r5, #16	@ tmp279, ivtmp.74,
 1151 056c 2118A0E1 		lsr	r1, r1, #16	@ tmp263, tmp262,
 1152              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1153              		.loc 1 84 9 view .LVU309
 1154 0570 0E9089E0 		add	r9, r9, lr	@ tmp302, ivtmp.72, ivtmp.79
 1155              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1156              		.loc 1 94 19 view .LVU310
 1157 0574 000056E3 		cmp	r6, #0	@ tmp244,
 1158              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1159              		.loc 1 102 74 view .LVU311
 1160 0578 2AC8A0E1 		lsr	ip, r10, #16	@ tmp294, ivtmp.73,
 1161              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1162              		.loc 1 106 47 view .LVU312
 1163 057c 9B7121E0 		mla	r1, fp, r1, r7	@ tmp265, _21, tmp263, _22
 1164 0580 04A08AE0 		add	r10, r10, r4	@ ivtmp.73, ivtmp.73, _208
 1165              	.LVL61:
 106:armwave.c     ****                 word >>= 8;
 1166              		.loc 1 106 47 view .LVU313
 1167 0584 9B7222E0 		mla	r2, fp, r2, r7	@ tmp281, _21, tmp279, _22
 1168              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1169              		.loc 1 107 22 view .LVU314
 1170 0588 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 1171              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1172              		.loc 1 106 47 view .LVU315
 1173 058c 8330A0E1 		lsl	r3, r3, #1	@ tmp250, tmp249,
 1174              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1175              		.loc 1 84 9 view .LVU316
 1176 0590 20908DE5 		str	r9, [sp, #32]	@ tmp302, %sfp
 1177              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1178              		.loc 1 94 19 view .LVU317
 1179 0594 2A00001A 		bne	.L62		@,
 1180              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1181              		.loc 1 94 20 view .LVU318
 1182 0598 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1183              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1184              		.loc 1 106 47 view .LVU319
 1185 059c B36098E1 		ldrh	r6, [r8, r3]	@ *_86, *_86
 1186              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1187              		.loc 1 94 20 view .LVU320
 1188 05a0 0190A003 		moveq	r9, #1	@ tmp256,
 1189 05a4 0090A013 		movne	r9, #0	@ tmp256,
 1190              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1191              		.loc 1 106 47 view .LVU321
 1192 05a8 041081E0 		add	r1, r1, r4	@ tmp266, tmp265, scale_value
 1193              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1194              		.loc 1 94 19 view .LVU322
 1195 05ac FF0054E3 		cmp	r4, #255	@ scale_value,
 1196 05b0 0940A011 		movne	r4, r9	@, tmp261, tmp256
 1197 05b4 01408903 		orreq	r4, r9, #1	@,, tmp261, tmp256
 1198              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1199              		.loc 1 106 47 view .LVU323
 1200 05b8 016086E2 		add	r6, r6, #1	@ tmp253, *_86,
 1201              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1202              		.loc 1 94 19 view .LVU324
 1203 05bc 000054E3 		cmp	r4, #0	@ tmp261,
 1204              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1205              		.loc 1 106 47 view .LVU325
 1206 05c0 8110A0E1 		lsl	r1, r1, #1	@ tmp267, tmp266,
 1207 05c4 B36088E1 		strh	r6, [r8, r3]	@ movhi	@ tmp253, *_86
 107:armwave.c     ****             }
 1208              		.loc 1 107 17 is_stmt 1 view .LVU326
 1209              	.LVL62:
  91:armwave.c     ****                 
 1210              		.loc 1 91 17 view .LVU327
  94:armwave.c     ****                     continue;
 1211              		.loc 1 94 17 view .LVU328
 1212              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1213              		.loc 1 94 19 is_stmt 0 view .LVU329
 1214 05c8 1D00001A 		bne	.L62		@,
 1215              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1216              		.loc 1 94 20 view .LVU330
 1217 05cc 2038A0E1 		lsr	r3, r0, #16	@ word, word,
 1218 05d0 FFE013E2 		ands	lr, r3, #255	@ scale_value, word,
 1219              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1220              		.loc 1 106 47 view .LVU331
 1221 05d4 B13098E1 		ldrh	r3, [r8, r1]	@ *_115, *_115
 1222              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1223              		.loc 1 94 20 view .LVU332
 1224 05d8 0140A003 		moveq	r4, #1	@ tmp273,
 1225 05dc 0040A013 		movne	r4, #0	@ tmp273,
 1226              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1227              		.loc 1 106 47 view .LVU333
 1228 05e0 0E2082E0 		add	r2, r2, lr	@ tmp282, tmp281, scale_value
 1229              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1230              		.loc 1 94 19 view .LVU334
 1231 05e4 FF005EE3 		cmp	lr, #255	@ scale_value,
 1232 05e8 04E0A011 		movne	lr, r4	@, tmp278, tmp273
 1233 05ec 01E08403 		orreq	lr, r4, #1	@,, tmp278, tmp273
 1234              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1235              		.loc 1 106 47 view .LVU335
 1236 05f0 013083E2 		add	r3, r3, #1	@ tmp270, *_115,
 1237              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1238              		.loc 1 94 19 view .LVU336
 1239 05f4 00005EE3 		cmp	lr, #0	@ tmp278,
 1240              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1241              		.loc 1 106 47 view .LVU337
 1242 05f8 8220A0E1 		lsl	r2, r2, #1	@ tmp283, tmp282,
 1243 05fc B13088E1 		strh	r3, [r8, r1]	@ movhi	@ tmp270, *_115
 107:armwave.c     ****             }
 1244              		.loc 1 107 17 is_stmt 1 view .LVU338
 1245              	.LVL63:
  91:armwave.c     ****                 
 1246              		.loc 1 91 17 view .LVU339
  94:armwave.c     ****                     continue;
 1247              		.loc 1 94 17 view .LVU340
 1248              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1249              		.loc 1 94 19 is_stmt 0 view .LVU341
 1250 0600 0F00001A 		bne	.L62		@,
 1251              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1252              		.loc 1 94 20 view .LVU342
 1253 0604 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 1254              	.LVL64:
 1255              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1256              		.loc 1 106 47 view .LVU343
 1257 0608 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp296, _21, tmp294, word
 1258 060c B23098E1 		ldrh	r3, [r8, r2]	@ *_144, *_144
 1259              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1260              		.loc 1 94 20 view .LVU344
 1261 0610 0110A003 		moveq	r1, #1	@ tmp288,
 1262 0614 0010A013 		movne	r1, #0	@ tmp288,
 1263              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1264              		.loc 1 106 47 view .LVU345
 1265 0618 07C08CE0 		add	ip, ip, r7	@ tmp297, tmp296, _22
 1266              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1267              		.loc 1 94 19 view .LVU346
 1268 061c FF0050E3 		cmp	r0, #255	@ word,
 1269 0620 0100A011 		movne	r0, r1	@, tmp293, tmp288
 1270 0624 01008103 		orreq	r0, r1, #1	@,, tmp293, tmp288
 1271 0628 000050E3 		cmp	r0, #0	@ tmp293,
 1272              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1273              		.loc 1 106 47 view .LVU347
 1274 062c 8CC0A0E1 		lsl	ip, ip, #1	@ tmp298, tmp297,
 1275 0630 013083E2 		add	r3, r3, #1	@ tmp286, *_144,
 1276 0634 B23088E1 		strh	r3, [r8, r2]	@ movhi	@ tmp286, *_144
 107:armwave.c     ****             }
 1277              		.loc 1 107 17 is_stmt 1 view .LVU348
 1278              	.LVL65:
  91:armwave.c     ****                 
 1279              		.loc 1 91 17 view .LVU349
  94:armwave.c     ****                     continue;
 1280              		.loc 1 94 17 view .LVU350
 1281              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1282              		.loc 1 106 47 is_stmt 0 view .LVU351
 1283 0638 BC309801 		ldrheq	r3, [r8, ip]	@ *_173, *_173
 1284 063c 01308302 		addeq	r3, r3, #1	@ tmp301, *_173,
 1285 0640 BC308801 		strheq	r3, [r8, ip]	@ movhi	@ tmp301, *_173
 107:armwave.c     ****             }
 1286              		.loc 1 107 17 is_stmt 1 view .LVU352
 1287              	.LVL66:
 1288              	.L62:
 1289              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1290              		.loc 1 84 9 is_stmt 0 view .LVU353
 1291 0644 D022CDE1 		ldrd	r2, [sp, #32]	@,,
 1292 0648 020053E1 		cmp	r3, r2	@ _133, tmp302
 1293 064c 1C309DE5 		ldr	r3, [sp, #28]	@ _208, %sfp
 1294 0650 035085E0 		add	r5, r5, r3	@ ivtmp.74, ivtmp.74, _208
 1295 0654 B1FFFF8A 		bhi	.L56		@,
 1296              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1297              		.loc 1 79 44 view .LVU354
 1298 0658 0C309DE5 		ldr	r3, [sp, #12]	@ w, %sfp
 1299              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1300              		.loc 1 79 5 view .LVU355
 1301 065c 30209DE5 		ldr	r2, [sp, #48]	@ _38, %sfp
 1302              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1303              		.loc 1 79 44 view .LVU356
 1304 0660 013083E2 		add	r3, r3, #1	@ w, w,
 1305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1306              		.loc 1 79 5 view .LVU357
 1307 0664 030052E1 		cmp	r2, r3	@ _38, w
 1308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1309              		.loc 1 79 44 view .LVU358
 1310 0668 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1311              	.LVL67:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1312              		.loc 1 79 44 view .LVU359
 1313 066c 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.79, %sfp
 1314 0670 2C309DE5 		ldr	r3, [sp, #44]	@ _24, %sfp
 1315              	.LVL68:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1316              		.loc 1 79 44 view .LVU360
 1317 0674 032042E0 		sub	r2, r2, r3	@ ivtmp.79, ivtmp.79, _24
 1318 0678 04208DE5 		str	r2, [sp, #4]	@ ivtmp.79, %sfp
 1319 067c 00209DE5 		ldr	r2, [sp]	@ ivtmp.80, %sfp
 1320 0680 033082E0 		add	r3, r2, r3	@ ivtmp.80, ivtmp.80, _24
 1321 0684 00308DE5 		str	r3, [sp]	@ ivtmp.80, %sfp
 1322              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1323              		.loc 1 79 5 view .LVU361
 1324 0688 A0FFFF1A 		bne	.L54		@,
 1325              	.LVL69:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1326              		.loc 1 79 5 view .LVU362
 1327              	.LBE12:
 1328              	.LBE13:
 229:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1329              		.loc 1 229 9 is_stmt 1 view .LVU363
 230:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1330              		.loc 1 230 9 view .LVU364
 1331              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 224:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1332              		.loc 1 224 86 is_stmt 0 view .LVU365
 1333 068c 28309DE5 		ldr	r3, [sp, #40]	@ yy, %sfp
 1334              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 224:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1335              		.loc 1 224 5 view .LVU366
 1336 0690 40209DE5 		ldr	r2, [sp, #64]	@ _179, %sfp
 1337              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 224:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1338              		.loc 1 224 86 view .LVU367
 1339 0694 013083E2 		add	r3, r3, #1	@ yy, yy,
 1340              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 224:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1341              		.loc 1 224 5 view .LVU368
 1342 0698 020053E1 		cmp	r3, r2	@ yy, _179
 1343              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 224:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1344              		.loc 1 224 86 view .LVU369
 1345 069c 28308DE5 		str	r3, [sp, #40]	@ yy, %sfp
 1346              	.LVL70:
 224:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1347              		.loc 1 224 86 view .LVU370
 1348 06a0 44209DE5 		ldr	r2, [sp, #68]	@ _185, %sfp
 1349 06a4 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.83, %sfp
 1350              	.LVL71:
 224:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1351              		.loc 1 224 86 view .LVU371
 1352 06a8 023083E0 		add	r3, r3, r2	@ ivtmp.83, ivtmp.83, _185
 1353 06ac 18308DE5 		str	r3, [sp, #24]	@ ivtmp.83, %sfp
 1354 06b0 14209DE5 		ldr	r2, [sp, #20]	@ ivtmp.84, %sfp
 1355 06b4 24309DE5 		ldr	r3, [sp, #36]	@ _133, %sfp
 1356 06b8 032042E0 		sub	r2, r2, r3	@ ivtmp.84, ivtmp.84, _133
 1357 06bc 14208DE5 		str	r2, [sp, #20]	@ ivtmp.84, %sfp
 1358 06c0 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.85, %sfp
 1359 06c4 033082E0 		add	r3, r2, r3	@ ivtmp.85, ivtmp.85, _133
 1360 06c8 10308DE5 		str	r3, [sp, #16]	@ ivtmp.85, %sfp
 1361              	@ armwave.c:224:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 224:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1362              		.loc 1 224 5 view .LVU372
 1363 06cc 86FFFF1A 		bne	.L57		@,
 1364              	.LVL72:
 1365              	.L51:
 1366              	@ armwave.c:234: }
 231:armwave.c     ****     }
 232:armwave.c     **** 
 233:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 234:armwave.c     **** }
 1367              		.loc 1 234 1 view .LVU373
 1368 06d0 4CD08DE2 		add	sp, sp, #76	@,,
 1369              		.cfi_def_cfa_offset 36
 1370              		@ sp needed	@
 1371 06d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1372              	.L72:
 1373              		.align	2
 1374              	.L71:
 1375 06d8 00000000 		.word	g_armwave_state
 1376              		.cfi_endproc
 1377              	.LFE61:
 1379              		.align	2
 1380              		.global	armwave_setup_render
 1381              		.syntax unified
 1382              		.arm
 1383              		.fpu vfp
 1385              	armwave_setup_render:
 1386              	.LVL73:
 1387              	.LFB62:
 235:armwave.c     **** 
 236:armwave.c     **** /*
 237:armwave.c     ****  * Setup the renderer with passed parameters.
 238:armwave.c     ****  */
 239:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 240:armwave.c     **** {
 1388              		.loc 1 240 1 is_stmt 1 view -0
 1389              		.cfi_startproc
 1390              		@ args = 12, pretend = 0, frame = 0
 1391              		@ frame_needed = 0, uses_anonymous_args = 0
 241:armwave.c     ****     uint32_t length, xx;
 1392              		.loc 1 241 5 view .LVU375
 242:armwave.c     ****     float points_per_pixel;
 1393              		.loc 1 242 5 view .LVU376
 243:armwave.c     **** 
 244:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1394              		.loc 1 244 5 view .LVU377
 1395              	@ armwave.c:240: {
 240:armwave.c     ****     uint32_t length, xx;
 1396              		.loc 1 240 1 is_stmt 0 view .LVU378
 1397 06dc F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1398              		.cfi_def_cfa_offset 28
 1399              		.cfi_offset 4, -28
 1400              		.cfi_offset 5, -24
 1401              		.cfi_offset 6, -20
 1402              		.cfi_offset 7, -16
 1403              		.cfi_offset 8, -12
 1404              		.cfi_offset 9, -8
 1405              		.cfi_offset 14, -4
 1406 06e0 028B2DED 		vpush.64	{d8}	@
 1407              		.cfi_def_cfa_offset 36
 1408              		.cfi_offset 80, -36
 1409              		.cfi_offset 81, -32
 1410 06e4 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1411 06e8 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1412 06ec 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1413 06f0 14D04DE2 		sub	sp, sp, #20	@,,
 1414              		.cfi_def_cfa_offset 56
 1415              	@ armwave.c:240: {
 240:armwave.c     ****     uint32_t length, xx;
 1416              		.loc 1 240 1 view .LVU379
 1417 06f4 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1418 06f8 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1419 06fc 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1420              	@ armwave.c:244:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1421              		.loc 1 244 5 view .LVU380
 1422 0700 00308DE5 		str	r3, [sp]	@ wave_stride,
 1423 0704 F460CDE1 		strd	r6, [sp, #4]	@,,
 1424 0708 0230A0E1 		mov	r3, r2	@, waves_max
 1425              	.LVL74:
 1426              		.loc 1 244 5 view .LVU381
 1427 070c 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1428 0710 0120A0E1 		mov	r2, r1	@, end_point
 1429              	.LVL75:
 1430              		.loc 1 244 5 view .LVU382
 1431 0714 0010A0E1 		mov	r1, r0	@, start_point
 1432              	.LVL76:
 1433              		.loc 1 244 5 view .LVU383
 1434 0718 E0019FE5 		ldr	r0, .L87+12	@,
 1435              	.LVL77:
 1436              		.loc 1 244 5 view .LVU384
 1437 071c FEFFFFEB 		bl	printf		@
 1438              	.LVL78:
 245:armwave.c     **** 
 246:armwave.c     ****     // TODO these asserts should instead raise PyExc
 247:armwave.c     ****     assert(start_point < end_point);
 1439              		.loc 1 247 5 is_stmt 1 view .LVU385
 1440 0720 050054E1 		cmp	r4, r5	@ start_point, end_point
 1441 0724 6300002A 		bcs	.L84		@,
 248:armwave.c     **** 
 249:armwave.c     ****     /*
 250:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 251:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 252:armwave.c     ****     if(target_height == 256) {
 253:armwave.c     ****         g_armwave_state.row_shift = 8;
 254:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 255:armwave.c     ****     } else if(target_height == 512) {
 256:armwave.c     ****         g_armwave_state.row_shift = 9;
 257:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 258:armwave.c     ****     } else if(target_height == 1024) {
 259:armwave.c     ****         g_armwave_state.row_shift = 10;
 260:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 261:armwave.c     ****     } else if(target_height == 2048) {
 262:armwave.c     ****         g_armwave_state.row_shift = 11;
 263:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 264:armwave.c     ****     }
 265:armwave.c     ****     */
 266:armwave.c     **** 
 267:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 268:armwave.c     ****     g_armwave_state.xstride = target_height;
 1442              		.loc 1 268 5 view .LVU386
 1443              	@ armwave.c:279:     g_armwave_state.wave_length = end_point - start_point;
 269:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 270:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 271:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 272:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 273:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 274:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 275:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 276:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 277:armwave.c     ****     g_armwave_state.target_width = target_width;
 278:armwave.c     ****     g_armwave_state.target_height = target_height;
 279:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1444              		.loc 1 279 45 is_stmt 0 view .LVU387
 1445 0728 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1446              	.LVL79:
 1447              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1448              		.loc 1 269 49 view .LVU388
 1449 072c 706A9FED 		vldr.32	s12, .L87	@ tmp174,
 1450              	@ armwave.c:283:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 280:armwave.c     **** 
 281:armwave.c     ****     // Calculate compound scaler
 282:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 283:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1451              		.loc 1 283 48 view .LVU389
 1452 0730 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1453              	@ armwave.c:283:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1454              		.loc 1 283 79 view .LVU390
 1455 0734 6F6ADFED 		vldr.32	s13, .L87+4	@ tmp198,
 1456              	@ armwave.c:276:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 276:armwave.c     ****     g_armwave_state.target_width = target_width;
 1457              		.loc 1 276 90 view .LVU391
 1458 0738 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 1459              	@ armwave.c:268:     g_armwave_state.xstride = target_height;
 268:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1460              		.loc 1 268 29 view .LVU392
 1461 073c C0419FE5 		ldr	r4, .L87+16	@ tmp240,
 1462              	.LVL80:
 1463              	@ armwave.c:283:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1464              		.loc 1 283 48 view .LVU393
 1465 0740 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 1466              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1467              		.loc 1 269 49 view .LVU394
 1468 0744 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1469              	@ armwave.c:274:     g_armwave_state.size = target_height * target_width;
 274:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1470              		.loc 1 274 42 view .LVU395
 1471 0748 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 1472              	@ armwave.c:276:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 276:armwave.c     ****     g_armwave_state.target_width = target_width;
 1473              		.loc 1 276 95 view .LVU396
 1474 074c 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 1475              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1476              		.loc 1 269 49 view .LVU397
 1477 0750 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 1478              	@ armwave.c:283:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1479              		.loc 1 283 48 view .LVU398
 1480 0754 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1481              	@ armwave.c:285:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 284:armwave.c     **** 
 285:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1482              		.loc 1 285 5 view .LVU399
 1483 0758 0128A0E3 		mov	r2, #65536	@ tmp201,
 1484 075c 04508DE5 		str	r5, [sp, #4]	@ _13,
 1485 0760 00608DE5 		str	r6, [sp]	@ target_width,
 1486              	@ armwave.c:283:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 283:armwave.c     **** 
 1487              		.loc 1 283 48 view .LVU400
 1488 0764 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1489              	@ armwave.c:276:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 276:armwave.c     ****     g_armwave_state.target_width = target_width;
 1490              		.loc 1 276 95 view .LVU401
 1491 0768 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 1492              	@ armwave.c:268:     g_armwave_state.xstride = target_height;
 268:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1493              		.loc 1 268 29 view .LVU402
 1494 076c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1495              		.loc 1 269 5 is_stmt 1 view .LVU403
 1496              	@ armwave.c:271:     g_armwave_state.wave_stride = wave_stride;
 271:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1497              		.loc 1 271 33 is_stmt 0 view .LVU404
 1498 0770 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1499              	@ armwave.c:272:     g_armwave_state.waves_max = waves_max;
 272:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1500              		.loc 1 272 31 view .LVU405
 1501 0774 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1502              	@ armwave.c:273:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 273:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1503              		.loc 1 273 27 view .LVU406
 1504 0778 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1505              	@ armwave.c:278:     g_armwave_state.target_height = target_height;
 278:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1506              		.loc 1 278 35 view .LVU407
 1507 077c F865C4E1 		strd	r6, [r4, #88]	@, tmp240,
 1508              	@ armwave.c:285:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1509              		.loc 1 285 5 view .LVU408
 1510 0780 08208DE5 		str	r2, [sp, #8]	@ tmp201,
 1511              	@ armwave.c:283:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 283:armwave.c     **** 
 1512              		.loc 1 283 48 view .LVU409
 1513 0784 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1514              	@ armwave.c:275:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 275:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1515              		.loc 1 275 37 view .LVU410
 1516 0788 022CA0E3 		mov	r2, #512	@ tmp184,
 1517              	@ armwave.c:274:     g_armwave_state.size = target_height * target_width;
 274:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1518              		.loc 1 274 26 view .LVU411
 1519 078c 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1520              	@ armwave.c:275:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 275:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1521              		.loc 1 275 37 view .LVU412
 1522 0790 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1523              	@ armwave.c:285:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1524              		.loc 1 285 5 view .LVU413
 1525 0794 0310A0E1 		mov	r1, r3	@, tmp189
 1526              	@ armwave.c:276:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 276:armwave.c     ****     g_armwave_state.target_width = target_width;
 1527              		.loc 1 276 34 view .LVU414
 1528 0798 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1529              	@ armwave.c:279:     g_armwave_state.wave_length = end_point - start_point;
 279:armwave.c     **** 
 1530              		.loc 1 279 33 view .LVU415
 1531 079c 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1532              	@ armwave.c:285:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1533              		.loc 1 285 5 view .LVU416
 1534 07a0 60019FE5 		ldr	r0, .L87+20	@,
 1535              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1536              		.loc 1 269 49 view .LVU417
 1537 07a4 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1538              	@ armwave.c:283:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 283:armwave.c     **** 
 1539              		.loc 1 283 79 view .LVU418
 1540 07a8 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1541              	@ armwave.c:282:     g_armwave_state.cmp_x_bitdepth_scale = \
 282:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1542              		.loc 1 282 42 view .LVU419
 1543 07ac E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1544              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1545              		.loc 1 269 33 view .LVU420
 1546 07b0 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 270:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1547              		.loc 1 270 5 is_stmt 1 view .LVU421
 1548              	@ armwave.c:282:     g_armwave_state.cmp_x_bitdepth_scale = \
 282:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1549              		.loc 1 282 42 is_stmt 0 view .LVU422
 1550 07b4 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1551              	@ armwave.c:270:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 270:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1552              		.loc 1 270 30 view .LVU423
 1553 07b8 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1554              	@ armwave.c:285:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1555              		.loc 1 285 5 view .LVU424
 1556 07bc 0C30A0E1 		mov	r3, ip	@, _19
 1557 07c0 0C20A0E1 		mov	r2, ip	@, tmp3
 1558              	@ armwave.c:282:     g_armwave_state.cmp_x_bitdepth_scale = \
 282:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1559              		.loc 1 282 42 view .LVU425
 1560 07c4 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1561              	@ armwave.c:270:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 270:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1562              		.loc 1 270 30 view .LVU426
 1563 07c8 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 271:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1564              		.loc 1 271 5 is_stmt 1 view .LVU427
 272:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1565              		.loc 1 272 5 view .LVU428
 273:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1566              		.loc 1 273 5 view .LVU429
 274:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1567              		.loc 1 274 5 view .LVU430
 275:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1568              		.loc 1 275 5 view .LVU431
 276:armwave.c     ****     g_armwave_state.target_width = target_width;
 1569              		.loc 1 276 5 view .LVU432
 277:armwave.c     ****     g_armwave_state.target_height = target_height;
 1570              		.loc 1 277 5 view .LVU433
 278:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1571              		.loc 1 278 5 view .LVU434
 279:armwave.c     **** 
 1572              		.loc 1 279 5 view .LVU435
 282:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1573              		.loc 1 282 5 view .LVU436
 1574              		.loc 1 285 5 view .LVU437
 1575 07cc FEFFFFEB 		bl	printf		@
 1576              	.LVL81:
 286:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 287:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 288:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 289:armwave.c     **** 
 290:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 291:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 292:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 293:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1577              		.loc 1 293 5 view .LVU438
 1578              	@ armwave.c:295:     if(g_armwave_state.ch1_buffer != NULL)
 294:armwave.c     **** 
 295:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1579              		.loc 1 295 23 is_stmt 0 view .LVU439
 1580 07d0 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1581              	@ armwave.c:293:     g_armwave_state.slice_height = 256; // 64;  
 293:armwave.c     **** 
 1582              		.loc 1 293 34 view .LVU440
 1583 07d4 013CA0E3 		mov	r3, #256	@ tmp203,
 1584              	@ armwave.c:295:     if(g_armwave_state.ch1_buffer != NULL)
 1585              		.loc 1 295 7 view .LVU441
 1586 07d8 000050E3 		cmp	r0, #0	@ _20,
 1587              	@ armwave.c:293:     g_armwave_state.slice_height = 256; // 64;  
 293:armwave.c     **** 
 1588              		.loc 1 293 34 view .LVU442
 1589 07dc 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1590              		.loc 1 295 5 is_stmt 1 view .LVU443
 1591              	@ armwave.c:295:     if(g_armwave_state.ch1_buffer != NULL)
 1592              		.loc 1 295 7 is_stmt 0 view .LVU444
 1593 07e0 0000000A 		beq	.L75		@,
 296:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1594              		.loc 1 296 9 is_stmt 1 view .LVU445
 1595 07e4 FEFFFFEB 		bl	free		@
 1596              	.LVL82:
 1597              	.L75:
 297:armwave.c     **** 
 298:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1598              		.loc 1 298 5 view .LVU446
 1599              	@ armwave.c:298:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1600              		.loc 1 298 34 is_stmt 0 view .LVU447
 1601 07e8 0110A0E3 		mov	r1, #1	@,
 1602 07ec 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1603 07f0 FEFFFFEB 		bl	calloc		@
 1604              	.LVL83:
 1605              	@ armwave.c:300:     assert(g_armwave_state.ch1_buffer != NULL);
 299:armwave.c     **** 
 300:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1606              		.loc 1 300 5 view .LVU448
 1607 07f4 000050E3 		cmp	r0, #0	@ _23,
 1608              	@ armwave.c:298:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 298:armwave.c     **** 
 1609              		.loc 1 298 34 view .LVU449
 1610 07f8 0070A0E1 		mov	r7, r0	@ _23,
 1611              	@ armwave.c:298:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 298:armwave.c     **** 
 1612              		.loc 1 298 32 view .LVU450
 1613 07fc 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1614              		.loc 1 300 5 is_stmt 1 view .LVU451
 1615 0800 3600000A 		beq	.L85		@,
 301:armwave.c     **** 
 302:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 303:armwave.c     ****     length = end_point - start_point;
 1616              		.loc 1 303 5 view .LVU452
 1617              	.LVL84:
 304:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1618              		.loc 1 304 5 view .LVU453
 1619              	@ armwave.c:304:     points_per_pixel = length / ((float)(target_width));
 1620              		.loc 1 304 34 is_stmt 0 view .LVU454
 1621 0804 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1622              	@ armwave.c:304:     points_per_pixel = length / ((float)(target_width));
 1623              		.loc 1 304 22 view .LVU455
 1624 0808 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1625              	@ armwave.c:305:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 305:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1626              		.loc 1 305 60 view .LVU456
 1627 080c 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp251, g_armwave_state.slice_height
 1628              	@ armwave.c:306:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 306:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1629              		.loc 1 306 40 view .LVU457
 1630 0810 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1631              	@ armwave.c:304:     points_per_pixel = length / ((float)(target_width));
 304:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1632              		.loc 1 304 34 view .LVU458
 1633 0814 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp214, target_width
 1634              	@ armwave.c:304:     points_per_pixel = length / ((float)(target_width));
 304:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1635              		.loc 1 304 22 view .LVU459
 1636 0818 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp213, _13
 1637              	@ armwave.c:305:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 305:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1638              		.loc 1 305 60 view .LVU460
 1639 081c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp251
 1640              	@ armwave.c:304:     points_per_pixel = length / ((float)(target_width));
 304:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1641              		.loc 1 304 22 view .LVU461
 1642 0820 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp213, tmp214
 1643              	.LVL85:
 305:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1644              		.loc 1 305 5 is_stmt 1 view .LVU462
 1645              	@ armwave.c:305:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 305:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1646              		.loc 1 305 60 is_stmt 0 view .LVU463
 1647 0824 087A67EE 		vmul.f32	s15, s14, s16	@ tmp219, tmp217, points_per_pixel
 1648              	@ armwave.c:305:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 305:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1649              		.loc 1 305 41 view .LVU464
 1650 0828 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 1651 082c 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 1652              		.loc 1 306 5 is_stmt 1 view .LVU465
 1653              	@ armwave.c:306:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1654              		.loc 1 306 40 is_stmt 0 view .LVU466
 1655 0830 FEFFFFEB 		bl	malloc		@
 1656              	.LVL86:
 1657              	@ armwave.c:308:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 307:armwave.c     **** 
 308:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1658              		.loc 1 308 5 view .LVU467
 1659 0834 000050E3 		cmp	r0, #0	@ _31,
 1660              	@ armwave.c:306:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 306:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1661              		.loc 1 306 40 view .LVU468
 1662 0838 0060A0E1 		mov	r6, r0	@ _31,
 1663              	@ armwave.c:306:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 306:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1664              		.loc 1 306 38 view .LVU469
 1665 083c 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1666              		.loc 1 308 5 is_stmt 1 view .LVU470
 1667 0840 2100000A 		beq	.L86		@,
 1668              	@ armwave.c:311:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 309:armwave.c     **** 
 310:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 311:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1669              		.loc 1 311 54 is_stmt 0 view .LVU471
 1670 0844 2C7ADFED 		vldr.32	s15, .L87+8	@ tmp228,
 1671 0848 020040E2 		sub	r0, r0, #2	@ ivtmp.89, _31,
 1672              	@ armwave.c:310:     for(xx = 0; xx < length; xx++) {
 310:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1673              		.loc 1 310 12 view .LVU472
 1674 084c 0030A0E3 		mov	r3, #0	@ xx,
 1675              	@ armwave.c:311:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1676              		.loc 1 311 54 view .LVU473
 1677 0850 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp228, points_per_pixel
 1678              	.L78:
 1679              	.LVL87:
 1680              		.loc 1 311 9 is_stmt 1 discriminator 3 view .LVU474
 1681              	@ armwave.c:311:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1682              		.loc 1 311 74 is_stmt 0 discriminator 3 view .LVU475
 1683 0854 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1684              	@ armwave.c:310:     for(xx = 0; xx < length; xx++) {
 310:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1685              		.loc 1 310 32 discriminator 3 view .LVU476
 1686 0858 013083E2 		add	r3, r3, #1	@ xx, xx,
 1687              	.LVL88:
 1688              	@ armwave.c:310:     for(xx = 0; xx < length; xx++) {
 310:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1689              		.loc 1 310 5 discriminator 3 view .LVU477
 1690 085c 030055E1 		cmp	r5, r3	@ _13, xx
 1691              	@ armwave.c:311:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1692              		.loc 1 311 74 discriminator 3 view .LVU478
 1693 0860 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp229, xx
 1694 0864 877A67EE 		vmul.f32	s15, s15, s14	@ tmp230, tmp229, _32
 1695              	@ armwave.c:311:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1696              		.loc 1 311 46 discriminator 3 view .LVU479
 1697 0868 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp231, tmp230
 1698 086c 902A17EE 		vmov	r2, s15	@ int	@ tmp231, tmp231
 1699 0870 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp231, MEM[base: _101, offset: 0B]
 1700              	@ armwave.c:310:     for(xx = 0; xx < length; xx++) {
 310:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1701              		.loc 1 310 5 discriminator 3 view .LVU480
 1702 0874 F6FFFF1A 		bne	.L78		@,
 312:armwave.c     **** 
 313:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 314:armwave.c     ****     }
 315:armwave.c     **** 
 316:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1703              		.loc 1 316 5 is_stmt 1 view .LVU481
 1704              	@ armwave.c:316:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1705              		.loc 1 316 34 is_stmt 0 view .LVU482
 1706 0878 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1707 087c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1708 0880 FEFFFFEB 		bl	malloc		@
 1709              	.LVL89:
 1710              	@ armwave.c:318:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 317:armwave.c     **** 
 318:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1711              		.loc 1 318 5 view .LVU483
 1712 0884 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1713 0888 0620A0E1 		mov	r2, r6	@, _31
 1714 088c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1715 0890 0710A0E1 		mov	r1, r7	@, _23
 1716              	@ armwave.c:316:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 316:armwave.c     **** 
 1717              		.loc 1 316 34 view .LVU484
 1718 0894 00C0A0E1 		mov	ip, r0	@ tmp235,
 1719              	@ armwave.c:318:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1720              		.loc 1 318 5 view .LVU485
 1721 0898 0030A0E1 		mov	r3, r0	@, tmp235
 1722              	@ armwave.c:316:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 316:armwave.c     **** 
 1723              		.loc 1 316 32 view .LVU486
 1724 089c 68C084E5 		str	ip, [r4, #104]	@ tmp235, g_armwave_state.out_pixbuf
 1725              		.loc 1 318 5 is_stmt 1 view .LVU487
 1726 08a0 64009FE5 		ldr	r0, .L87+24	@,
 1727 08a4 FEFFFFEB 		bl	printf		@
 1728              	.LVL90:
 319:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 320:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 321:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 322:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 323:armwave.c     **** 
 324:armwave.c     ****     malloc_stats();
 1729              		.loc 1 324 5 view .LVU488
 1730              	@ armwave.c:325: }
 325:armwave.c     **** }
 1731              		.loc 1 325 1 is_stmt 0 view .LVU489
 1732 08a8 14D08DE2 		add	sp, sp, #20	@,,
 1733              		.cfi_remember_state
 1734              		.cfi_def_cfa_offset 36
 1735              		@ sp needed	@
 1736 08ac 028BBDEC 		vldm	sp!, {d8}	@
 1737              		.cfi_restore 80
 1738              		.cfi_restore 81
 1739              		.cfi_def_cfa_offset 28
 1740              	.LVL91:
 1741              		.loc 1 325 1 view .LVU490
 1742 08b0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1743              		.cfi_restore 14
 1744              		.cfi_restore 9
 1745              		.cfi_restore 8
 1746              		.cfi_restore 7
 1747              		.cfi_restore 6
 1748              		.cfi_restore 5
 1749              		.cfi_restore 4
 1750              		.cfi_def_cfa_offset 0
 1751              	.LVL92:
 1752              	@ armwave.c:324:     malloc_stats();
 324:armwave.c     **** }
 1753              		.loc 1 324 5 view .LVU491
 1754 08b4 FEFFFFEA 		b	malloc_stats		@
 1755              	.LVL93:
 1756              	.L84:
 1757              		.cfi_restore_state
 247:armwave.c     **** 
 1758              		.loc 1 247 5 is_stmt 1 discriminator 1 view .LVU492
 1759 08b8 50309FE5 		ldr	r3, .L87+28	@,
 1760 08bc F720A0E3 		mov	r2, #247	@,
 1761 08c0 4C109FE5 		ldr	r1, .L87+32	@,
 1762 08c4 4C009FE5 		ldr	r0, .L87+36	@,
 1763 08c8 FEFFFFEB 		bl	__assert_fail		@
 1764              	.LVL94:
 1765              	.L86:
 308:armwave.c     **** 
 1766              		.loc 1 308 5 discriminator 1 view .LVU493
 1767 08cc 3C309FE5 		ldr	r3, .L87+28	@,
 1768 08d0 4D2FA0E3 		mov	r2, #308	@,
 1769 08d4 38109FE5 		ldr	r1, .L87+32	@,
 1770 08d8 3C009FE5 		ldr	r0, .L87+40	@,
 1771 08dc FEFFFFEB 		bl	__assert_fail		@
 1772              	.LVL95:
 1773              	.L85:
 300:armwave.c     **** 
 1774              		.loc 1 300 5 discriminator 1 view .LVU494
 1775 08e0 28309FE5 		ldr	r3, .L87+28	@,
 1776 08e4 4B2FA0E3 		mov	r2, #300	@,
 1777 08e8 24109FE5 		ldr	r1, .L87+32	@,
 1778 08ec 2C009FE5 		ldr	r0, .L87+44	@,
 1779 08f0 FEFFFFEB 		bl	__assert_fail		@
 1780              	.LVL96:
 1781              	.L88:
 1782              		.align	2
 1783              	.L87:
 1784 08f4 00007F43 		.word	1132396544
 1785 08f8 00008047 		.word	1199570944
 1786 08fc 0000803F 		.word	1065353216
 1787 0900 40000000 		.word	.LC4
 1788 0904 00000000 		.word	g_armwave_state
 1789 0908 84000000 		.word	.LC6
 1790 090c 34010000 		.word	.LC9
 1791 0910 1C000000 		.word	.LANCHOR0+28
 1792 0914 20000000 		.word	.LC2
 1793 0918 6C000000 		.word	.LC5
 1794 091c 08010000 		.word	.LC8
 1795 0920 E4000000 		.word	.LC7
 1796              		.cfi_endproc
 1797              	.LFE62:
 1799              		.align	2
 1800              		.global	armwave_set_wave_pointer
 1801              		.syntax unified
 1802              		.arm
 1803              		.fpu vfp
 1805              	armwave_set_wave_pointer:
 1806              	.LVL97:
 1807              	.LFB63:
 326:armwave.c     **** 
 327:armwave.c     **** /*
 328:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 329:armwave.c     ****  * in the future.
 330:armwave.c     ****  */
 331:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 332:armwave.c     **** {
 1808              		.loc 1 332 1 view -0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 0
 1811              		@ frame_needed = 0, uses_anonymous_args = 0
 333:armwave.c     ****     assert(wave_buffer != NULL);
 1812              		.loc 1 333 5 view .LVU496
 1813 0924 000050E3 		cmp	r0, #0	@ wave_buffer
 1814              		.loc 1 333 5 is_stmt 0 view .LVU497
 1815 0928 0200000A 		beq	.L94		@,
 334:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1816              		.loc 1 334 5 is_stmt 1 view .LVU498
 1817              	@ armwave.c:334:     g_armwave_state.wave_buffer = wave_buffer;
 1818              		.loc 1 334 33 is_stmt 0 view .LVU499
 1819 092c 1C309FE5 		ldr	r3, .L95	@ tmp116,
 1820 0930 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1821 0934 1EFF2FE1 		bx	lr	@
 1822              	.L94:
 333:armwave.c     ****     assert(wave_buffer != NULL);
 1823              		.loc 1 333 5 is_stmt 1 discriminator 1 view .LVU500
 1824              	@ armwave.c:332: {
 332:armwave.c     ****     assert(wave_buffer != NULL);
 1825              		.loc 1 332 1 is_stmt 0 discriminator 1 view .LVU501
 1826 0938 10402DE9 		push	{r4, lr}	@
 1827              		.cfi_def_cfa_offset 8
 1828              		.cfi_offset 4, -8
 1829              		.cfi_offset 14, -4
 1830              	@ armwave.c:333:     assert(wave_buffer != NULL);
 333:armwave.c     ****     assert(wave_buffer != NULL);
 1831              		.loc 1 333 5 discriminator 1 view .LVU502
 1832 093c 10309FE5 		ldr	r3, .L95+4	@,
 1833 0940 10209FE5 		ldr	r2, .L95+8	@,
 1834 0944 10109FE5 		ldr	r1, .L95+12	@,
 1835 0948 10009FE5 		ldr	r0, .L95+16	@,
 1836              	.LVL98:
 333:armwave.c     ****     assert(wave_buffer != NULL);
 1837              		.loc 1 333 5 discriminator 1 view .LVU503
 1838 094c FEFFFFEB 		bl	__assert_fail		@
 1839              	.LVL99:
 1840              	.L96:
 1841              		.align	2
 1842              	.L95:
 1843 0950 00000000 		.word	g_armwave_state
 1844 0954 34000000 		.word	.LANCHOR0+52
 1845 0958 4D010000 		.word	333
 1846 095c 20000000 		.word	.LC2
 1847 0960 58010000 		.word	.LC10
 1848              		.cfi_endproc
 1849              	.LFE63:
 1851              		.align	2
 1852              		.global	armwave_set_wave_pointer_as_testbuf
 1853              		.syntax unified
 1854              		.arm
 1855              		.fpu vfp
 1857              	armwave_set_wave_pointer_as_testbuf:
 1858              	.LVL100:
 1859              	.LFB64:
 335:armwave.c     **** }
 336:armwave.c     **** 
 337:armwave.c     **** /*
 338:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 339:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 340:armwave.c     ****  */
 341:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 342:armwave.c     **** {
 1860              		.loc 1 342 1 is_stmt 1 view -0
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 0
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
 1864              		@ link register save eliminated.
 343:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1865              		.loc 1 343 5 view .LVU505
 1866              	@ armwave.c:343:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1867              		.loc 1 343 29 is_stmt 0 view .LVU506
 1868 0964 24309FE5 		ldr	r3, .L100	@ tmp117,
 1869              	@ armwave.c:343:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1870              		.loc 1 343 7 view .LVU507
 1871 0968 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1872 096c 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1873 0970 0400003A 		bcc	.L99		@,
 344:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 345:armwave.c     ****         return;
 346:armwave.c     ****     }
 347:armwave.c     **** 
 348:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1874              		.loc 1 348 5 is_stmt 1 view .LVU508
 1875              	@ armwave.c:348:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1876              		.loc 1 348 111 is_stmt 0 view .LVU509
 1877 0974 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1878              	@ armwave.c:348:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1879              		.loc 1 348 68 view .LVU510
 1880 0978 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1881 097c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1882              	.LVL101:
 1883              	@ armwave.c:348:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1884              		.loc 1 348 33 view .LVU511
 1885 0980 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1886              	@ armwave.c:349: }
 349:armwave.c     **** }
 1887              		.loc 1 349 1 view .LVU512
 1888 0984 1EFF2FE1 		bx	lr	@
 1889              	.LVL102:
 1890              	.L99:
 344:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1891              		.loc 1 344 9 is_stmt 1 view .LVU513
 1892 0988 04009FE5 		ldr	r0, .L100+4	@,
 1893              	.LVL103:
 344:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1894              		.loc 1 344 9 is_stmt 0 view .LVU514
 1895 098c FEFFFFEA 		b	puts		@
 1896              	.LVL104:
 1897              	.L101:
 1898              		.align	2
 1899              	.L100:
 1900 0990 00000000 		.word	g_armwave_state
 1901 0994 6C010000 		.word	.LC11
 1902              		.cfi_endproc
 1903              	.LFE64:
 1905              		.align	2
 1906              		.global	armwave_set_wave_pointer_u32
 1907              		.syntax unified
 1908              		.arm
 1909              		.fpu vfp
 1911              	armwave_set_wave_pointer_u32:
 1912              	.LVL105:
 1913              	.LFB65:
 350:armwave.c     **** 
 351:armwave.c     **** /*
 352:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 353:armwave.c     ****  * disjointed buffers in the future.
 354:armwave.c     ****  */
 355:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 356:armwave.c     **** {
 1914              		.loc 1 356 1 is_stmt 1 view -0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 0
 1917              		@ frame_needed = 0, uses_anonymous_args = 0
 357:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1918              		.loc 1 357 5 view .LVU516
 1919 0998 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1920              		.loc 1 357 5 is_stmt 0 view .LVU517
 1921 099c 0200000A 		beq	.L107		@,
 358:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1922              		.loc 1 358 5 is_stmt 1 view .LVU518
 1923              	@ armwave.c:358:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1924              		.loc 1 358 33 is_stmt 0 view .LVU519
 1925 09a0 1C309FE5 		ldr	r3, .L108	@ tmp117,
 1926 09a4 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1927 09a8 1EFF2FE1 		bx	lr	@
 1928              	.L107:
 357:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1929              		.loc 1 357 5 is_stmt 1 discriminator 1 view .LVU520
 1930              	@ armwave.c:356: {
 356:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1931              		.loc 1 356 1 is_stmt 0 discriminator 1 view .LVU521
 1932 09ac 10402DE9 		push	{r4, lr}	@
 1933              		.cfi_def_cfa_offset 8
 1934              		.cfi_offset 4, -8
 1935              		.cfi_offset 14, -4
 1936              	@ armwave.c:357:     assert(wave_buffer_ptr != 0);
 357:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1937              		.loc 1 357 5 discriminator 1 view .LVU522
 1938 09b0 10309FE5 		ldr	r3, .L108+4	@,
 1939 09b4 10209FE5 		ldr	r2, .L108+8	@,
 1940 09b8 10109FE5 		ldr	r1, .L108+12	@,
 1941 09bc 10009FE5 		ldr	r0, .L108+16	@,
 1942              	.LVL106:
 357:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1943              		.loc 1 357 5 discriminator 1 view .LVU523
 1944 09c0 FEFFFFEB 		bl	__assert_fail		@
 1945              	.LVL107:
 1946              	.L109:
 1947              		.align	2
 1948              	.L108:
 1949 09c4 00000000 		.word	g_armwave_state
 1950 09c8 50000000 		.word	.LANCHOR0+80
 1951 09cc 65010000 		.word	357
 1952 09d0 20000000 		.word	.LC2
 1953 09d4 A8010000 		.word	.LC12
 1954              		.cfi_endproc
 1955              	.LFE65:
 1957              		.align	2
 1958              		.global	armwave_clear_buffer
 1959              		.syntax unified
 1960              		.arm
 1961              		.fpu vfp
 1963              	armwave_clear_buffer:
 1964              	.LVL108:
 1965              	.LFB66:
 359:armwave.c     **** }
 360:armwave.c     **** 
 361:armwave.c     **** /*
 362:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 363:armwave.c     ****  */
 364:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 365:armwave.c     **** {
 1966              		.loc 1 365 1 is_stmt 1 view -0
 1967              		.cfi_startproc
 1968              		@ args = 0, pretend = 0, frame = 0
 1969              		@ frame_needed = 0, uses_anonymous_args = 0
 1970              		@ link register save eliminated.
 366:armwave.c     ****     // Flags ignored, only one buffer cleared
 367:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1971              		.loc 1 367 5 view .LVU525
 1972              	@ armwave.c:367:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1973              		.loc 1 367 58 is_stmt 0 view .LVU526
 1974 09d8 0C309FE5 		ldr	r3, .L111	@ tmp114,
 1975              	@ armwave.c:367:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1976              		.loc 1 367 5 view .LVU527
 1977 09dc 0010A0E3 		mov	r1, #0	@,
 1978 09e0 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1979 09e4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1980              	.LVL109:
 1981              		.loc 1 367 5 view .LVU528
 1982 09e8 FEFFFFEA 		b	memset		@
 1983              	.LVL110:
 1984              	.L112:
 1985              		.align	2
 1986              	.L111:
 1987 09ec 00000000 		.word	g_armwave_state
 1988              		.cfi_endproc
 1989              	.LFE66:
 1991              		.align	2
 1992              		.global	armwave_set_channel_colour
 1993              		.syntax unified
 1994              		.arm
 1995              		.fpu vfp
 1997              	armwave_set_channel_colour:
 1998              	.LVL111:
 1999              	.LFB67:
 368:armwave.c     **** }
 369:armwave.c     **** 
 370:armwave.c     **** /*
 371:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 372:armwave.c     ****  */
 373:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 374:armwave.c     **** {
 2000              		.loc 1 374 1 is_stmt 1 view -0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 0
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004              		@ link register save eliminated.
 375:armwave.c     ****     // Only 1ch supported for now
 376:armwave.c     ****     switch(ch) {
 2005              		.loc 1 376 5 view .LVU530
 2006 09f0 010050E3 		cmp	r0, #1	@ ch,
 377:armwave.c     ****         case 1:
 378:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 2007              		.loc 1 378 13 view .LVU531
 2008              	@ armwave.c:378:             g_armwave_state.ch1_color.r = r;
 2009              		.loc 1 378 41 is_stmt 0 view .LVU532
 2010 09f4 0C009F05 		ldreq	r0, .L115	@ tmp117,
 2011              	.LVL112:
 2012              		.loc 1 378 41 view .LVU533
 2013 09f8 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 379:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2014              		.loc 1 379 13 is_stmt 1 view .LVU534
 2015              	@ armwave.c:379:             g_armwave_state.ch1_color.g = g;
 2016              		.loc 1 379 41 is_stmt 0 view .LVU535
 2017 09fc BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 380:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2018              		.loc 1 380 13 is_stmt 1 view .LVU536
 2019              	@ armwave.c:380:             g_armwave_state.ch1_color.b = b;
 2020              		.loc 1 380 41 is_stmt 0 view .LVU537
 2021 0a00 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 381:armwave.c     ****             break;
 2022              		.loc 1 381 13 is_stmt 1 view .LVU538
 2023              	@ armwave.c:383: }
 382:armwave.c     ****     }
 383:armwave.c     **** }
 2024              		.loc 1 383 1 is_stmt 0 view .LVU539
 2025 0a04 1EFF2FE1 		bx	lr	@
 2026              	.L116:
 2027              		.align	2
 2028              	.L115:
 2029 0a08 00000000 		.word	g_armwave_state
 2030              		.cfi_endproc
 2031              	.LFE67:
 2033              		.align	2
 2034              		.global	armwave_dump_ppm_debug
 2035              		.syntax unified
 2036              		.arm
 2037              		.fpu vfp
 2039              	armwave_dump_ppm_debug:
 2040              	.LVL113:
 2041              	.LFB68:
 384:armwave.c     **** 
 385:armwave.c     **** /*
 386:armwave.c     ****  * Dump a ppm of a buffer to a file.
 387:armwave.c     ****  */
 388:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 389:armwave.c     **** {
 2042              		.loc 1 389 1 is_stmt 1 view -0
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 0
 2045              		@ frame_needed = 0, uses_anonymous_args = 0
 390:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2046              		.loc 1 390 5 view .LVU541
 2047              	@ armwave.c:389: {
 389:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2048              		.loc 1 389 1 is_stmt 0 view .LVU542
 2049 0a0c 0130A0E1 		mov	r3, r1	@ fn, fn
 2050 0a10 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2051              		.cfi_def_cfa_offset 28
 2052              		.cfi_offset 4, -28
 2053              		.cfi_offset 5, -24
 2054              		.cfi_offset 6, -20
 2055              		.cfi_offset 7, -16
 2056              		.cfi_offset 8, -12
 2057              		.cfi_offset 9, -8
 2058              		.cfi_offset 14, -4
 2059 0a14 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2060 0a18 0CD04DE2 		sub	sp, sp, #12	@,,
 2061              		.cfi_def_cfa_offset 40
 2062              	@ armwave.c:390:     FILE *fp = fopen(fn, "wb");
 2063              		.loc 1 390 16 view .LVU543
 2064 0a1c C4109FE5 		ldr	r1, .L125	@,
 2065              	.LVL114:
 2066              		.loc 1 390 16 view .LVU544
 2067 0a20 0300A0E1 		mov	r0, r3	@, fn
 2068              	.LVL115:
 2069              		.loc 1 390 16 view .LVU545
 2070 0a24 FEFFFFEB 		bl	fopen64		@
 2071              	.LVL116:
 2072              	@ armwave.c:397:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 391:armwave.c     ****     uint32_t data;
 392:armwave.c     ****     int xx, yy;
 393:armwave.c     **** 
 394:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 395:armwave.c     **** 
 396:armwave.c     ****     fputs("P3\n", fp);
 397:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2073              		.loc 1 397 5 view .LVU546
 2074 0a28 BC609FE5 		ldr	r6, .L125+4	@ tmp150,
 2075              	@ armwave.c:396:     fputs("P3\n", fp);
 396:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2076              		.loc 1 396 5 view .LVU547
 2077 0a2c 0320A0E3 		mov	r2, #3	@,
 2078 0a30 0110A0E3 		mov	r1, #1	@,
 2079              	@ armwave.c:390:     FILE *fp = fopen(fn, "wb");
 390:armwave.c     ****     uint32_t data;
 2080              		.loc 1 390 16 view .LVU548
 2081 0a34 0070A0E1 		mov	r7, r0	@ fp,
 2082              	.LVL117:
 391:armwave.c     ****     uint32_t data;
 2083              		.loc 1 391 5 is_stmt 1 view .LVU549
 392:armwave.c     **** 
 2084              		.loc 1 392 5 view .LVU550
 396:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2085              		.loc 1 396 5 view .LVU551
 2086 0a38 0030A0E1 		mov	r3, r0	@, fp
 2087 0a3c AC009FE5 		ldr	r0, .L125+8	@,
 2088              	.LVL118:
 396:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2089              		.loc 1 396 5 is_stmt 0 view .LVU552
 2090 0a40 FEFFFFEB 		bl	fwrite		@
 2091              	.LVL119:
 2092              		.loc 1 397 5 is_stmt 1 view .LVU553
 2093 0a44 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2094 0a48 A4109FE5 		ldr	r1, .L125+12	@,
 2095 0a4c 0700A0E1 		mov	r0, r7	@, fp
 2096 0a50 FEFFFFEB 		bl	fprintf		@
 2097              	.LVL120:
 398:armwave.c     ****     fputs("255\n", fp);
 2098              		.loc 1 398 5 view .LVU554
 2099 0a54 0420A0E3 		mov	r2, #4	@,
 2100 0a58 0730A0E1 		mov	r3, r7	@, fp
 2101 0a5c 0110A0E3 		mov	r1, #1	@,
 2102 0a60 90009FE5 		ldr	r0, .L125+16	@,
 2103 0a64 FEFFFFEB 		bl	fwrite		@
 2104              	.LVL121:
 399:armwave.c     **** 
 400:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2105              		.loc 1 400 5 view .LVU555
 2106              	@ armwave.c:400:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2107              		.loc 1 400 37 is_stmt 0 view .LVU556
 2108 0a68 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2109              	@ armwave.c:400:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2110              		.loc 1 400 5 view .LVU557
 2111 0a6c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2112 0a70 180000DA 		ble	.L118		@,
 2113 0a74 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2114              	@ armwave.c:405:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 401:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 402:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 403:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 404:armwave.c     **** 
 405:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2115              		.loc 1 405 13 view .LVU558
 2116 0a78 7C909FE5 		ldr	r9, .L125+20	@ tmp152,
 2117              	@ armwave.c:400:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 400:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2118              		.loc 1 400 12 view .LVU559
 2119 0a7c 0050A0E3 		mov	r5, #0	@ yy,
 2120              	.LVL122:
 2121              	.L119:
 2122              	@ armwave.c:401:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 401:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2123              		.loc 1 401 9 view .LVU560
 2124 0a80 000053E3 		cmp	r3, #0	@ _13,
 2125              	@ armwave.c:401:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 401:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2126              		.loc 1 401 16 view .LVU561
 2127 0a84 0040A0C3 		movgt	r4, #0	@ xx,
 2128              	@ armwave.c:401:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 401:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2129              		.loc 1 401 9 view .LVU562
 2130 0a88 0F0000DA 		ble	.L121		@,
 2131              	.LVL123:
 2132              	.L120:
 402:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2133              		.loc 1 402 13 is_stmt 1 discriminator 3 view .LVU563
 2134              	@ armwave.c:402:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 402:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2135              		.loc 1 402 29 is_stmt 0 discriminator 3 view .LVU564
 2136 0a8c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2137              	@ armwave.c:405:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2138              		.loc 1 405 13 discriminator 3 view .LVU565
 2139 0a90 0910A0E1 		mov	r1, r9	@, tmp152
 2140 0a94 0700A0E1 		mov	r0, r7	@, fp
 2141              	@ armwave.c:402:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 402:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2142              		.loc 1 402 18 discriminator 3 view .LVU566
 2143 0a98 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2144              	.LVL124:
 2145              		.loc 1 405 13 is_stmt 1 discriminator 3 view .LVU567
 2146              	@ armwave.c:401:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 401:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2147              		.loc 1 401 58 is_stmt 0 discriminator 3 view .LVU568
 2148 0a9c 014084E2 		add	r4, r4, #1	@ xx, xx,
 2149              	.LVL125:
 2150              	@ armwave.c:405:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2151              		.loc 1 405 81 discriminator 3 view .LVU569
 2152 0aa0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2153              	@ armwave.c:405:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2154              		.loc 1 405 61 discriminator 3 view .LVU570
 2155 0aa4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2156              	@ armwave.c:405:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2157              		.loc 1 405 13 discriminator 3 view .LVU571
 2158 0aa8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2159 0aac 7330EFE6 		uxtb	r3, r3	@, tmp142
 2160 0ab0 00C08DE5 		str	ip, [sp]	@ tmp147,
 2161 0ab4 7220EFE6 		uxtb	r2, r2	@, data
 2162              	.LVL126:
 2163              		.loc 1 405 13 discriminator 3 view .LVU572
 2164 0ab8 FEFFFFEB 		bl	fprintf		@
 2165              	.LVL127:
 2166              	@ armwave.c:401:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 401:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2167              		.loc 1 401 41 discriminator 3 view .LVU573
 2168 0abc 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2169              	@ armwave.c:401:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 401:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2170              		.loc 1 401 9 discriminator 3 view .LVU574
 2171 0ac0 040053E1 		cmp	r3, r4	@ _13, xx
 2172 0ac4 F0FFFFCA 		bgt	.L120		@,
 2173 0ac8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2174              	.LVL128:
 2175              	.L121:
 2176              	@ armwave.c:400:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 400:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2177              		.loc 1 400 55 discriminator 2 view .LVU575
 2178 0acc 015085E2 		add	r5, r5, #1	@ yy, yy,
 2179              	.LVL129:
 2180              	@ armwave.c:400:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 400:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2181              		.loc 1 400 5 discriminator 2 view .LVU576
 2182 0ad0 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2183 0ad4 E9FFFFBA 		blt	.L119		@,
 2184              	.LVL130:
 2185              	.L118:
 406:armwave.c     ****         }
 407:armwave.c     ****     }
 408:armwave.c     **** 
 409:armwave.c     ****     fclose(fp);
 2186              		.loc 1 409 5 is_stmt 1 view .LVU577
 2187 0ad8 0700A0E1 		mov	r0, r7	@, fp
 2188              	@ armwave.c:410: }
 410:armwave.c     **** }
 2189              		.loc 1 410 1 is_stmt 0 view .LVU578
 2190 0adc 0CD08DE2 		add	sp, sp, #12	@,,
 2191              		.cfi_def_cfa_offset 28
 2192              		@ sp needed	@
 2193 0ae0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2194              		.cfi_restore 14
 2195              		.cfi_restore 9
 2196              		.cfi_restore 8
 2197              		.cfi_restore 7
 2198              		.cfi_restore 6
 2199              		.cfi_restore 5
 2200              		.cfi_restore 4
 2201              		.cfi_def_cfa_offset 0
 2202              	.LVL131:
 2203              	@ armwave.c:409:     fclose(fp);
 409:armwave.c     **** }
 2204              		.loc 1 409 5 view .LVU579
 2205 0ae4 FEFFFFEA 		b	fclose		@
 2206              	.LVL132:
 2207              	.L126:
 409:armwave.c     **** }
 2208              		.loc 1 409 5 view .LVU580
 2209              		.align	2
 2210              	.L125:
 2211 0ae8 C0010000 		.word	.LC13
 2212 0aec 00000000 		.word	g_armwave_state
 2213 0af0 C4010000 		.word	.LC14
 2214 0af4 C8010000 		.word	.LC15
 2215 0af8 D0010000 		.word	.LC16
 2216 0afc D8010000 		.word	.LC17
 2217              		.cfi_endproc
 2218              	.LFE68:
 2220              		.align	2
 2221              		.global	armwave_test_init
 2222              		.syntax unified
 2223              		.arm
 2224              		.fpu vfp
 2226              	armwave_test_init:
 2227              	.LVL133:
 2228              	.LFB69:
 411:armwave.c     **** 
 412:armwave.c     **** /*
 413:armwave.c     ****  * Initialise some test functionry.
 414:armwave.c     ****  */
 415:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 416:armwave.c     **** {
 2229              		.loc 1 416 1 is_stmt 1 view -0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 0
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 417:armwave.c     ****     test_create_gamma();
 2233              		.loc 1 417 5 view .LVU582
 2234              	.LBB18:
 2235              	.LBI18:
  34:armwave.c     **** {
 2236              		.loc 1 34 6 view .LVU583
  34:armwave.c     **** {
 2237              		.loc 1 34 6 is_stmt 0 view .LVU584
 2238              	.LBE18:
 2239              	@ armwave.c:416: {
 416:armwave.c     ****     test_create_gamma();
 2240              		.loc 1 416 1 view .LVU585
 2241 0b00 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2242              		.cfi_def_cfa_offset 32
 2243              		.cfi_offset 4, -32
 2244              		.cfi_offset 5, -28
 2245              		.cfi_offset 6, -24
 2246              		.cfi_offset 7, -20
 2247              		.cfi_offset 8, -16
 2248              		.cfi_offset 9, -12
 2249              		.cfi_offset 10, -8
 2250              		.cfi_offset 14, -4
 2251 0b04 068B2DED 		vpush.64	{d8, d9, d10}	@
 2252              		.cfi_def_cfa_offset 56
 2253              		.cfi_offset 80, -56
 2254              		.cfi_offset 81, -52
 2255              		.cfi_offset 82, -48
 2256              		.cfi_offset 83, -44
 2257              		.cfi_offset 84, -40
 2258              		.cfi_offset 85, -36
 2259 0b08 BC409FE5 		ldr	r4, .L131+20	@ ivtmp.103,
 2260              	.LBB21:
 2261              	.LBB19:
 2262              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2263              		.loc 1 40 32 view .LVU586
 2264 0b0c 2DAA9FED 		vldr.32	s20, .L131+16	@ tmp136,
 2265              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2266              		.loc 1 40 26 view .LVU587
 2267 0b10 289B9FED 		vldr.64	d9, .L131	@ tmp151,
 2268              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2269              		.loc 1 40 49 view .LVU588
 2270 0b14 298B9FED 		vldr.64	d8, .L131+8	@ tmp139,
 2271 0b18 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.103,
 2272              	.LBE19:
 2273              	.LBE21:
 2274              	@ armwave.c:416: {
 416:armwave.c     ****     test_create_gamma();
 2275              		.loc 1 416 1 view .LVU589
 2276 0b1c 10D04DE2 		sub	sp, sp, #16	@,,
 2277              		.cfi_def_cfa_offset 72
 2278              	@ armwave.c:416: {
 416:armwave.c     ****     test_create_gamma();
 2279              		.loc 1 416 1 view .LVU590
 2280 0b20 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2281 0b24 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2282 0b28 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2283 0b2c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2284 0b30 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.103,
 2285 0b34 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2286              	.LVL134:
 2287              	.L128:
 2288              	.LBB22:
 2289              	.LBB20:
  40:armwave.c     ****     }
 2290              		.loc 1 40 9 is_stmt 1 view .LVU591
 2291              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2292              		.loc 1 40 32 is_stmt 0 view .LVU592
 2293 0b38 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.103
 2294              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2295              		.loc 1 40 26 view .LVU593
 2296 0b3c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2297              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2298              		.loc 1 40 32 view .LVU594
 2299 0b40 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2300 0b44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2301 0b48 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2302              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2303              		.loc 1 40 26 view .LVU595
 2304 0b4c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2305 0b50 FEFFFFEB 		bl	pow		@
 2306              	.LVL135:
 2307              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2308              		.loc 1 40 49 view .LVU596
 2309 0b54 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2310              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2311              		.loc 1 40 24 view .LVU597
 2312 0b58 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2313 0b5c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2314 0b60 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2315              	.LVL136:
 2316              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2317              		.loc 1 39 5 view .LVU598
 2318 0b64 0A0054E1 		cmp	r4, r10	@ ivtmp.103, _39
 2319 0b68 F2FFFF1A 		bne	.L128		@,
 2320              	.LVL137:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2321              		.loc 1 39 5 view .LVU599
 2322              	.LBE20:
 2323              	.LBE22:
 418:armwave.c     **** 
 419:armwave.c     ****     // make ch1 yellowish by default
 420:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2324              		.loc 1 420 5 is_stmt 1 view .LVU600
 2325              	.LBB23:
 2326              	.LBI23:
 373:armwave.c     **** {
 2327              		.loc 1 373 6 view .LVU601
 2328              	.LBB24:
 376:armwave.c     ****         case 1:
 2329              		.loc 1 376 5 view .LVU602
 378:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2330              		.loc 1 378 13 view .LVU603
 379:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2331              		.loc 1 379 13 view .LVU604
 2332              	@ armwave.c:378:             g_armwave_state.ch1_color.r = r;
 378:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2333              		.loc 1 378 41 is_stmt 0 view .LVU605
 2334 0b6c 5CC09FE5 		ldr	ip, .L131+24	@ tmp142,
 2335 0b70 5C409FE5 		ldr	r4, .L131+28	@ tmp143,
 2336              	.LBE24:
 2337              	.LBE23:
 2338              	@ armwave.c:422:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 421:armwave.c     **** 
 422:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2339              		.loc 1 422 5 view .LVU606
 2340 0b74 0000A0E3 		mov	r0, #0	@ tmp147,
 2341              	.LBB28:
 2342              	.LBB25:
 2343              	@ armwave.c:380:             g_armwave_state.ch1_color.b = b;
 380:armwave.c     ****             break;
 2344              		.loc 1 380 41 view .LVU607
 2345 0b78 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2346              	.LBE25:
 2347              	.LBE28:
 2348              	@ armwave.c:422:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2349              		.loc 1 422 5 view .LVU608
 2350 0b7c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2351 0b80 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2352 0b84 00808DE5 		str	r8, [sp]	@ render_width,
 2353 0b88 0610A0E1 		mov	r1, r6	@, tmp3
 2354 0b8c 0720A0E1 		mov	r2, r7	@, nwaves
 2355              	.LBB29:
 2356              	.LBB26:
 2357              	@ armwave.c:378:             g_armwave_state.ch1_color.r = r;
 378:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2358              		.loc 1 378 41 view .LVU609
 2359 0b90 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 380:armwave.c     ****             break;
 2360              		.loc 1 380 13 is_stmt 1 view .LVU610
 2361              	.LBE26:
 2362              	.LBE29:
 2363              	@ armwave.c:422:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2364              		.loc 1 422 5 is_stmt 0 view .LVU611
 2365 0b94 0630A0E1 		mov	r3, r6	@, wave_size
 2366              	.LBB30:
 2367              	.LBB27:
 2368              	@ armwave.c:380:             g_armwave_state.ch1_color.b = b;
 380:armwave.c     ****             break;
 2369              		.loc 1 380 41 view .LVU612
 2370 0b98 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 381:armwave.c     ****     }
 2371              		.loc 1 381 13 is_stmt 1 view .LVU613
 2372              	.LVL138:
 381:armwave.c     ****     }
 2373              		.loc 1 381 13 is_stmt 0 view .LVU614
 2374              	.LBE27:
 2375              	.LBE30:
 2376              		.loc 1 422 5 is_stmt 1 view .LVU615
 2377 0b9c FEFFFFEB 		bl	armwave_setup_render		@
 2378              	.LVL139:
 423:armwave.c     **** 
 424:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2379              		.loc 1 424 5 view .LVU616
 2380 0ba0 30109FE5 		ldr	r1, .L131+32	@,
 2381 0ba4 30009FE5 		ldr	r0, .L131+36	@,
 2382              	@ armwave.c:425: }
 425:armwave.c     **** }
 2383              		.loc 1 425 1 is_stmt 0 view .LVU617
 2384 0ba8 10D08DE2 		add	sp, sp, #16	@,,
 2385              		.cfi_def_cfa_offset 56
 2386              		@ sp needed	@
 2387 0bac 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2388              		.cfi_restore 84
 2389              		.cfi_restore 85
 2390              		.cfi_restore 82
 2391              		.cfi_restore 83
 2392              		.cfi_restore 80
 2393              		.cfi_restore 81
 2394              		.cfi_def_cfa_offset 32
 2395 0bb0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2396              		.cfi_restore 14
 2397              		.cfi_restore 10
 2398              		.cfi_restore 9
 2399              		.cfi_restore 8
 2400              		.cfi_restore 7
 2401              		.cfi_restore 6
 2402              		.cfi_restore 5
 2403              		.cfi_restore 4
 2404              		.cfi_def_cfa_offset 0
 2405              	.LVL140:
 2406              	@ armwave.c:424:     printf("armwave version: %s\n", ARMWAVE_VER);
 424:armwave.c     **** }
 2407              		.loc 1 424 5 view .LVU618
 2408 0bb4 FEFFFFEA 		b	printf		@
 2409              	.LVL141:
 2410              	.L132:
 2411              		.align	3
 2412              	.L131:
 2413 0bb8 000000C0 		.word	-1073741824
 2414 0bbc CCCCEC3F 		.word	1072483532
 2415 0bc0 00000000 		.word	0
 2416 0bc4 00E06F40 		.word	1081073664
 2417 0bc8 00007F43 		.word	1132396544
 2418 0bcc FFFFFFFF 		.word	gamma_table-1
 2419 0bd0 00000000 		.word	g_armwave_state
 2420 0bd4 F609F406 		.word	116656630
 2421 0bd8 00000000 		.word	.LC0
 2422 0bdc 08000000 		.word	.LC1
 2423              		.cfi_endproc
 2424              	.LFE69:
 2426              		.align	2
 2427              		.global	armwave_test_fill_outbuf
 2428              		.syntax unified
 2429              		.arm
 2430              		.fpu vfp
 2432              	armwave_test_fill_outbuf:
 2433              	.LFB70:
 426:armwave.c     **** 
 427:armwave.c     **** /*
 428:armwave.c     ****  * Render image to the local allocated buffer.
 429:armwave.c     ****  */
 430:armwave.c     **** void armwave_test_fill_outbuf()
 431:armwave.c     **** {
 2434              		.loc 1 431 1 is_stmt 1 view -0
 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 0
 2437              		@ frame_needed = 0, uses_anonymous_args = 0
 2438              		@ link register save eliminated.
 432:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2439              		.loc 1 432 5 view .LVU620
 2440 0be0 04309FE5 		ldr	r3, .L134	@ tmp111,
 2441 0be4 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2442 0be8 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2443              	.LVL142:
 2444              	.L135:
 2445              		.align	2
 2446              	.L134:
 2447 0bec 00000000 		.word	g_armwave_state
 2448              		.cfi_endproc
 2449              	.LFE70:
 2451              		.align	2
 2452              		.global	armwave_test_dump_buffer_to_ppm
 2453              		.syntax unified
 2454              		.arm
 2455              		.fpu vfp
 2457              	armwave_test_dump_buffer_to_ppm:
 2458              	.LVL143:
 2459              	.LFB71:
 433:armwave.c     **** }
 434:armwave.c     **** 
 435:armwave.c     **** /*
 436:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 437:armwave.c     ****  */
 438:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 439:armwave.c     **** {
 2460              		.loc 1 439 1 view -0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
 2463              		@ frame_needed = 0, uses_anonymous_args = 0
 2464              		@ link register save eliminated.
 440:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2465              		.loc 1 440 5 view .LVU622
 2466 0bf0 08309FE5 		ldr	r3, .L137	@ tmp112,
 2467 0bf4 0010A0E1 		mov	r1, r0	@, fn
 2468 0bf8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2469              	.LVL144:
 2470              		.loc 1 440 5 is_stmt 0 view .LVU623
 2471 0bfc FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2472              	.LVL145:
 2473              	.L138:
 2474              		.loc 1 440 5 view .LVU624
 2475              		.align	2
 2476              	.L137:
 2477 0c00 00000000 		.word	g_armwave_state
 2478              		.cfi_endproc
 2479              	.LFE71:
 2481              		.align	2
 2482              		.global	armwave_test_fill_gdkbuf
 2483              		.syntax unified
 2484              		.arm
 2485              		.fpu vfp
 2487              	armwave_test_fill_gdkbuf:
 2488              	.LVL146:
 2489              	.LFB72:
 441:armwave.c     **** }
 442:armwave.c     **** 
 443:armwave.c     **** /*
 444:armwave.c     ****  * Render GDK buffer with test funtionry.
 445:armwave.c     ****  */
 446:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 447:armwave.c     **** {
 2490              		.loc 1 447 1 is_stmt 1 view -0
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 0
 2493              		@ frame_needed = 0, uses_anonymous_args = 0
 2494              		@ link register save eliminated.
 448:armwave.c     ****     //PyObject *mv;
 449:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 450:armwave.c     **** 
 451:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 452:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2495              		.loc 1 452 5 view .LVU626
 453:armwave.c     ****     
 454:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 455:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2496              		.loc 1 455 5 view .LVU627
 2497              	@ armwave.c:452:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 452:armwave.c     ****     
 2498              		.loc 1 452 11 is_stmt 0 view .LVU628
 2499 0c04 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2500              	@ armwave.c:455:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2501              		.loc 1 455 5 view .LVU629
 2502 0c08 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2503              	.LVL147:
 2504              		.loc 1 455 5 view .LVU630
 2505 0c0c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2506              	.LVL148:
 2507              		.loc 1 455 5 view .LVU631
 2508              		.cfi_endproc
 2509              	.LFE72:
 2511              		.align	2
 2512              		.global	armwave_test_buffer_alloc
 2513              		.syntax unified
 2514              		.arm
 2515              		.fpu vfp
 2517              	armwave_test_buffer_alloc:
 2518              	.LVL149:
 2519              	.LFB73:
 456:armwave.c     **** }
 457:armwave.c     **** 
 458:armwave.c     **** /*
 459:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 460:armwave.c     ****  */
 461:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 462:armwave.c     **** {
 2520              		.loc 1 462 1 is_stmt 1 view -0
 2521              		.cfi_startproc
 2522              		@ args = 0, pretend = 0, frame = 0
 2523              		@ frame_needed = 0, uses_anonymous_args = 0
 463:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2524              		.loc 1 463 5 view .LVU633
 2525              	@ armwave.c:462: {
 462:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2526              		.loc 1 462 1 is_stmt 0 view .LVU634
 2527 0c10 70402DE9 		push	{r4, r5, r6, lr}	@
 2528              		.cfi_def_cfa_offset 16
 2529              		.cfi_offset 4, -16
 2530              		.cfi_offset 5, -12
 2531              		.cfi_offset 6, -8
 2532              		.cfi_offset 14, -4
 2533              	@ armwave.c:462: {
 462:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2534              		.loc 1 462 1 view .LVU635
 2535 0c14 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2536              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer != NULL) {
 2537              		.loc 1 463 23 view .LVU636
 2538 0c18 44409FE5 		ldr	r4, .L147	@ tmp128,
 2539 0c1c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2540              	.LVL150:
 2541              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer != NULL) {
 2542              		.loc 1 463 7 view .LVU637
 2543 0c20 000050E3 		cmp	r0, #0	@ _1,
 2544 0c24 0000000A 		beq	.L141		@,
 464:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2545              		.loc 1 464 9 is_stmt 1 view .LVU638
 2546 0c28 FEFFFFEB 		bl	free		@
 2547              	.LVL151:
 2548              	.L141:
 465:armwave.c     ****     }
 466:armwave.c     **** 
 467:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 468:armwave.c     **** 
 469:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2549              		.loc 1 469 5 view .LVU639
 2550              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2551              		.loc 1 469 75 is_stmt 0 view .LVU640
 2552 0c2c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2553 0c30 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2554              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2555              		.loc 1 469 40 view .LVU641
 2556 0c34 0610A0E1 		mov	r1, r6	@, nsets
 2557              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2558              		.loc 1 469 75 view .LVU642
 2559 0c38 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2560              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2561              		.loc 1 469 40 view .LVU643
 2562 0c3c 0500A0E1 		mov	r0, r5	@, _4
 2563 0c40 FEFFFFEB 		bl	calloc		@
 2564              	.LVL152:
 2565              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer == NULL) {
 470:armwave.c     **** 
 471:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2566              		.loc 1 471 7 view .LVU644
 2567 0c44 000050E3 		cmp	r0, #0	@ tmp124,
 2568              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 469:armwave.c     **** 
 2569              		.loc 1 469 38 view .LVU645
 2570 0c48 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2571              		.loc 1 471 5 is_stmt 1 view .LVU646
 2572              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer == NULL) {
 2573              		.loc 1 471 7 is_stmt 0 view .LVU647
 2574 0c4c 7080BD18 		popne	{r4, r5, r6, pc}	@
 472:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2575              		.loc 1 472 9 is_stmt 1 view .LVU648
 2576 0c50 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2577 0c54 0620A0E1 		mov	r2, r6	@, nsets
 2578 0c58 08009FE5 		ldr	r0, .L147+4	@,
 2579              	@ armwave.c:476: }
 473:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 474:armwave.c     ****         return;
 475:armwave.c     ****     }
 476:armwave.c     **** }
 2580              		.loc 1 476 1 is_stmt 0 view .LVU649
 2581 0c5c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2582              		.cfi_restore 14
 2583              		.cfi_restore 6
 2584              		.cfi_restore 5
 2585              		.cfi_restore 4
 2586              		.cfi_def_cfa_offset 0
 2587              	.LVL153:
 2588              	@ armwave.c:472:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 472:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2589              		.loc 1 472 9 view .LVU650
 2590 0c60 FEFFFFEA 		b	printf		@
 2591              	.LVL154:
 2592              	.L148:
 472:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2593              		.loc 1 472 9 view .LVU651
 2594              		.align	2
 2595              	.L147:
 2596 0c64 00000000 		.word	g_armwave_state
 2597 0c68 E8010000 		.word	.LC18
 2598              		.cfi_endproc
 2599              	.LFE73:
 2601              		.align	2
 2602              		.global	armwave_fill_pixbuf_into_pybuffer
 2603              		.syntax unified
 2604              		.arm
 2605              		.fpu vfp
 2607              	armwave_fill_pixbuf_into_pybuffer:
 2608              	.LVL155:
 2609              	.LFB74:
 477:armwave.c     **** 
 478:armwave.c     **** /*
 479:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 480:armwave.c     ****  */
 481:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 482:armwave.c     **** {
 2610              		.loc 1 482 1 is_stmt 1 view -0
 2611              		.cfi_startproc
 2612              		@ args = 0, pretend = 0, frame = 48
 2613              		@ frame_needed = 0, uses_anonymous_args = 0
 483:armwave.c     ****     Py_buffer buffer;
 2614              		.loc 1 483 5 view .LVU653
 484:armwave.c     ****     int ret;
 2615              		.loc 1 484 5 view .LVU654
 485:armwave.c     **** 
 486:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 487:armwave.c     **** 
 488:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2616              		.loc 1 488 5 view .LVU655
 2617              	@ armwave.c:482: {
 482:armwave.c     ****     Py_buffer buffer;
 2618              		.loc 1 482 1 is_stmt 0 view .LVU656
 2619 0c6c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2620              		.cfi_def_cfa_offset 4
 2621              		.cfi_offset 14, -4
 2622 0c70 34D04DE2 		sub	sp, sp, #52	@,,
 2623              		.cfi_def_cfa_offset 56
 2624              	@ armwave.c:488:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2625              		.loc 1 488 11 view .LVU657
 2626 0c74 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2627 0c78 0120A0E3 		mov	r2, #1	@,
 2628 0c7c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2629              	.LVL156:
 489:armwave.c     **** 
 490:armwave.c     ****     if(ret != 0) {
 2630              		.loc 1 490 5 is_stmt 1 view .LVU658
 2631              	@ armwave.c:490:     if(ret != 0) {
 2632              		.loc 1 490 7 is_stmt 0 view .LVU659
 2633 0c80 000050E3 		cmp	r0, #0	@,
 2634 0c84 0A00001A 		bne	.L153		@,
 491:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 492:armwave.c     ****         Py_RETURN_FALSE;
 493:armwave.c     ****     }
 494:armwave.c     **** 
 495:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 496:armwave.c     **** 
 497:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2635              		.loc 1 497 5 is_stmt 1 view .LVU660
 2636 0c88 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2637              	.LVL157:
 2638              		.loc 1 497 5 is_stmt 0 view .LVU661
 2639 0c8c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2640              	.LVL158:
 498:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 499:armwave.c     **** 
 500:armwave.c     ****     PyBuffer_Release(&buffer);
 2641              		.loc 1 500 5 is_stmt 1 view .LVU662
 2642 0c90 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2643 0c94 FEFFFFEB 		bl	PyBuffer_Release		@
 2644              	.LVL159:
 501:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 502:armwave.c     **** 
 503:armwave.c     ****     Py_RETURN_TRUE;
 2645              		.loc 1 503 5 view .LVU663
 2646              	.LBB31:
 2647              	.LBI31:
 2648              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2649              		.loc 2 456 20 view .LVU664
 2650              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2651              		.loc 2 458 21 view .LVU665
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2652              		.loc 2 459 5 view .LVU666
 2653              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2654              		.loc 2 459 18 is_stmt 0 view .LVU667
 2655 0c98 38309FE5 		ldr	r3, .L154	@ tmp126,
 2656              	.LBE32:
 2657              	.LBE31:
 2658              	@ armwave.c:503:     Py_RETURN_TRUE;
 2659              		.loc 1 503 5 view .LVU668
 2660 0c9c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2661              	.LBB34:
 2662              	.LBB33:
 2663              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2664              		.loc 2 459 18 view .LVU669
 2665 0ca0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2666 0ca4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2667 0ca8 002083E5 		str	r2, [r3]	@ tmp128,
 2668              	.LBE33:
 2669              	.LBE34:
 2670              	@ armwave.c:504: }
 504:armwave.c     **** }
 2671              		.loc 1 504 1 view .LVU670
 2672 0cac 34D08DE2 		add	sp, sp, #52	@,,
 2673              		.cfi_remember_state
 2674              		.cfi_def_cfa_offset 4
 2675              		@ sp needed	@
 2676 0cb0 04F09DE4 		ldr	pc, [sp], #4	@
 2677              	.LVL160:
 2678              	.L153:
 2679              		.cfi_restore_state
 491:armwave.c     ****         Py_RETURN_FALSE;
 2680              		.loc 1 491 9 is_stmt 1 view .LVU671
 2681 0cb4 20009FE5 		ldr	r0, .L154+4	@,
 2682              	.LVL161:
 491:armwave.c     ****         Py_RETURN_FALSE;
 2683              		.loc 1 491 9 is_stmt 0 view .LVU672
 2684 0cb8 FEFFFFEB 		bl	puts		@
 2685              	.LVL162:
 492:armwave.c     ****     }
 2686              		.loc 1 492 9 is_stmt 1 view .LVU673
 2687              	.LBB35:
 2688              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2689              		.loc 2 456 20 view .LVU674
 2690              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2691              		.loc 2 458 21 view .LVU675
 2692              		.loc 2 459 5 view .LVU676
 2693              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2694              		.loc 2 459 18 is_stmt 0 view .LVU677
 2695 0cbc 1C309FE5 		ldr	r3, .L154+8	@ tmp120,
 2696              	.LBE36:
 2697              	.LBE35:
 2698              	@ armwave.c:492:         Py_RETURN_FALSE;
 492:armwave.c     ****     }
 2699              		.loc 1 492 9 view .LVU678
 2700 0cc0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2701              	.LBB38:
 2702              	.LBB37:
 2703              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2704              		.loc 2 459 18 view .LVU679
 2705 0cc4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2706 0cc8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2707 0ccc 002083E5 		str	r2, [r3]	@ tmp122,
 2708              	.LBE37:
 2709              	.LBE38:
 2710              	@ armwave.c:504: }
 2711              		.loc 1 504 1 view .LVU680
 2712 0cd0 34D08DE2 		add	sp, sp, #52	@,,
 2713              		.cfi_def_cfa_offset 4
 2714              		@ sp needed	@
 2715 0cd4 04F09DE4 		ldr	pc, [sp], #4	@
 2716              	.L155:
 2717              		.align	2
 2718              	.L154:
 2719 0cd8 00000000 		.word	_Py_TrueStruct
 2720 0cdc 3C020000 		.word	.LC19
 2721 0ce0 00000000 		.word	_Py_FalseStruct
 2722              		.cfi_endproc
 2723              	.LFE74:
 2725              		.align	2
 2726              		.global	armwave_test_create_am_sine
 2727              		.syntax unified
 2728              		.arm
 2729              		.fpu vfp
 2731              	armwave_test_create_am_sine:
 2732              	.LVL163:
 2733              	.LFB75:
 505:armwave.c     **** 
 506:armwave.c     **** /*
 507:armwave.c     ****  * Make a test AM waveform for render tests.
 508:armwave.c     ****  *
 509:armwave.c     ****  * @param   mod                     modulation depth
 510:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 511:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 512:armwave.c     ****  */
 513:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 514:armwave.c     **** {
 2734              		.loc 1 514 1 is_stmt 1 view -0
 2735              		.cfi_startproc
 2736              		@ args = 0, pretend = 0, frame = 8
 2737              		@ frame_needed = 0, uses_anonymous_args = 0
 515:armwave.c     ****     float v, noise, xnoise, mod_val;
 2738              		.loc 1 515 5 view .LVU682
 516:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2739              		.loc 1 516 5 view .LVU683
 2740              	@ armwave.c:514: {
 514:armwave.c     ****     float v, noise, xnoise, mod_val;
 2741              		.loc 1 514 1 is_stmt 0 view .LVU684
 2742 0ce4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2743              		.cfi_def_cfa_offset 32
 2744              		.cfi_offset 4, -32
 2745              		.cfi_offset 5, -28
 2746              		.cfi_offset 6, -24
 2747              		.cfi_offset 7, -20
 2748              		.cfi_offset 8, -16
 2749              		.cfi_offset 9, -12
 2750              		.cfi_offset 10, -8
 2751              		.cfi_offset 14, -4
 2752              	@ armwave.c:516:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2753              		.loc 1 516 38 view .LVU685
 2754 0ce8 7A7A9FED 		vldr.32	s14, .L187	@ tmp180,
 2755              	@ armwave.c:516:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2756              		.loc 1 516 55 view .LVU686
 2757 0cec 00529FE5 		ldr	r5, .L187+28	@ tmp250,
 2758              	@ armwave.c:514: {
 514:armwave.c     ****     float v, noise, xnoise, mod_val;
 2759              		.loc 1 514 1 view .LVU687
 2760 0cf0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2761              		.cfi_def_cfa_offset 80
 2762              		.cfi_offset 80, -80
 2763              		.cfi_offset 81, -76
 2764              		.cfi_offset 82, -72
 2765              		.cfi_offset 83, -68
 2766              		.cfi_offset 84, -64
 2767              		.cfi_offset 85, -60
 2768              		.cfi_offset 86, -56
 2769              		.cfi_offset 87, -52
 2770              		.cfi_offset 88, -48
 2771              		.cfi_offset 89, -44
 2772              		.cfi_offset 90, -40
 2773              		.cfi_offset 91, -36
 2774 0cf4 0090A0E1 		mov	r9, r0	@ sets, sets
 2775              	@ armwave.c:516:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2776              		.loc 1 516 38 view .LVU688
 2777 0cf8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2778              	@ armwave.c:520:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 517:armwave.c     ****     int s, set_offset = 0;
 518:armwave.c     ****     int w, x;
 519:armwave.c     **** 
 520:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2779              		.loc 1 520 70 view .LVU689
 2780 0cfc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2781 0d00 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2782              	.LBB41:
 2783              	.LBB42:
 2784              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer != NULL) {
 463:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2785              		.loc 1 463 23 view .LVU690
 2786 0d04 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2787              	.LVL164:
 463:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2788              		.loc 1 463 23 view .LVU691
 2789              	.LBE42:
 2790              	.LBE41:
 2791              	@ armwave.c:516:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 516:armwave.c     ****     int s, set_offset = 0;
 2792              		.loc 1 516 38 view .LVU692
 2793 0d08 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2794              	@ armwave.c:520:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2795              		.loc 1 520 70 view .LVU693
 2796 0d0c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2797              	@ armwave.c:514: {
 514:armwave.c     ****     float v, noise, xnoise, mod_val;
 2798              		.loc 1 514 1 view .LVU694
 2799 0d10 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2800              	.LBB46:
 2801              	.LBB43:
 2802              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer != NULL) {
 463:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2803              		.loc 1 463 7 view .LVU695
 2804 0d14 000050E3 		cmp	r0, #0	@ _82,
 2805              	.LBE43:
 2806              	.LBE46:
 2807              	@ armwave.c:514: {
 514:armwave.c     ****     float v, noise, xnoise, mod_val;
 2808              		.loc 1 514 1 view .LVU696
 2809 0d18 08D04DE2 		sub	sp, sp, #8	@,,
 2810              		.cfi_def_cfa_offset 88
 2811              	@ armwave.c:521:     g_armwave_state.test_wave_buffer_nsets = sets;
 521:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2812              		.loc 1 521 44 view .LVU697
 2813 0d1c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2814              	@ armwave.c:520:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 520:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2815              		.loc 1 520 45 view .LVU698
 2816 0d20 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2817              	@ armwave.c:516:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 516:armwave.c     ****     int s, set_offset = 0;
 2818              		.loc 1 516 38 view .LVU699
 2819 0d24 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2820              	@ armwave.c:516:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 516:armwave.c     ****     int s, set_offset = 0;
 2821              		.loc 1 516 11 view .LVU700
 2822 0d28 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2823              	.LVL165:
 517:armwave.c     ****     int w, x;
 2824              		.loc 1 517 5 is_stmt 1 view .LVU701
 518:armwave.c     **** 
 2825              		.loc 1 518 5 view .LVU702
 520:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2826              		.loc 1 520 5 view .LVU703
 2827              		.loc 1 521 5 view .LVU704
 522:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2828              		.loc 1 522 5 view .LVU705
 2829              	.LBB47:
 2830              	.LBI41:
 461:armwave.c     **** {
 2831              		.loc 1 461 6 view .LVU706
 2832              	.LBB44:
 463:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2833              		.loc 1 463 5 view .LVU707
 2834              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer != NULL) {
 463:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2835              		.loc 1 463 7 is_stmt 0 view .LVU708
 2836 0d2c 0000000A 		beq	.L157		@,
 464:armwave.c     ****     }
 2837              		.loc 1 464 9 is_stmt 1 view .LVU709
 2838 0d30 FEFFFFEB 		bl	free		@
 2839              	.LVL166:
 2840              	.L157:
 469:armwave.c     **** 
 2841              		.loc 1 469 5 view .LVU710
 2842              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 469:armwave.c     **** 
 2843              		.loc 1 469 75 is_stmt 0 view .LVU711
 2844 0d34 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2845 0d38 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2846              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 469:armwave.c     **** 
 2847              		.loc 1 469 40 view .LVU712
 2848 0d3c 0910A0E1 		mov	r1, r9	@, sets
 2849              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 469:armwave.c     **** 
 2850              		.loc 1 469 75 view .LVU713
 2851 0d40 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2852              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 469:armwave.c     **** 
 2853              		.loc 1 469 40 view .LVU714
 2854 0d44 0400A0E1 		mov	r0, r4	@, _85
 2855 0d48 FEFFFFEB 		bl	calloc		@
 2856              	.LVL167:
 2857              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer == NULL) {
 471:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2858              		.loc 1 471 7 view .LVU715
 2859 0d4c 000050E3 		cmp	r0, #0	@ tmp191,
 2860              	@ armwave.c:469:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 469:armwave.c     **** 
 2861              		.loc 1 469 38 view .LVU716
 2862 0d50 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 471:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2863              		.loc 1 471 5 is_stmt 1 view .LVU717
 2864              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer == NULL) {
 471:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2865              		.loc 1 471 7 is_stmt 0 view .LVU718
 2866 0d54 5A00000A 		beq	.L186		@,
 2867              	.L158:
 2868              	.LVL168:
 471:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2869              		.loc 1 471 7 view .LVU719
 2870              	.LBE44:
 2871              	.LBE47:
 2872              	@ armwave.c:524:     for(s = 0; s < sets; s++) {
 523:armwave.c     **** 
 524:armwave.c     ****     for(s = 0; s < sets; s++) {
 2873              		.loc 1 524 5 discriminator 1 view .LVU720
 2874 0d58 000059E3 		cmp	r9, #0	@ sets,
 2875 0d5c 550000DA 		ble	.L156		@,
 2876              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 525:armwave.c     ****         printf("Calculating test set %d\n", s);
 526:armwave.c     ****     
 527:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 528:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 529:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 530:armwave.c     **** 
 531:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 532:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 533:armwave.c     ****                 noise *= noise;
 534:armwave.c     ****                 noise *= noise;
 535:armwave.c     ****                 noise *= noise;
 536:armwave.c     **** 
 537:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 538:armwave.c     ****                     noise = -noise;
 539:armwave.c     **** 
 540:armwave.c     ****                 noise += 1.0f;
 541:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 542:armwave.c     **** 
 543:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2877              		.loc 1 543 45 view .LVU721
 2878 0d60 5C8A9FED 		vldr.32	s16, .L187	@ tmp258,
 2879              	@ armwave.c:546:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 544:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 545:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 546:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2880              		.loc 1 546 104 view .LVU722
 2881 0d64 5CCA9FED 		vldr.32	s24, .L187+4	@ tmp259,
 2882              	@ armwave.c:524:     for(s = 0; s < sets; s++) {
 524:armwave.c     ****         printf("Calculating test set %d\n", s);
 2883              		.loc 1 524 5 view .LVU723
 2884 0d68 0070A0E3 		mov	r7, #0	@ set_offset,
 2885              	@ armwave.c:525:         printf("Calculating test set %d\n", s);
 525:armwave.c     ****         printf("Calculating test set %d\n", s);
 2886              		.loc 1 525 9 view .LVU724
 2887 0d6c 84A19FE5 		ldr	r10, .L187+32	@ tmp257,
 2888              	@ armwave.c:524:     for(s = 0; s < sets; s++) {
 524:armwave.c     ****         printf("Calculating test set %d\n", s);
 2889              		.loc 1 524 5 view .LVU725
 2890 0d70 0780A0E1 		mov	r8, r7	@ s, set_offset
 2891              	.LVL169:
 2892              	.L159:
 525:armwave.c     ****         printf("Calculating test set %d\n", s);
 2893              		.loc 1 525 9 is_stmt 1 view .LVU726
 2894 0d74 0810A0E1 		mov	r1, r8	@, s
 2895 0d78 0A00A0E1 		mov	r0, r10	@, tmp257
 2896 0d7c FEFFFFEB 		bl	printf		@
 2897              	.LVL170:
 527:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2898              		.loc 1 527 9 view .LVU727
 2899              	@ armwave.c:527:         for(w = 0; w < g_armwave_state.waves; w++) {
 527:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2900              		.loc 1 527 39 is_stmt 0 view .LVU728
 2901 0d80 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2902              	@ armwave.c:527:         for(w = 0; w < g_armwave_state.waves; w++) {
 527:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2903              		.loc 1 527 9 view .LVU729
 2904 0d84 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2905 0d88 450000DA 		ble	.L160		@,
 2906              	@ armwave.c:529:             mod_val = 0.5f + (_1_waves_mod * w);
 529:armwave.c     **** 
 2907              		.loc 1 529 21 view .LVU730
 2908 0d8c 53CADFED 		vldr.32	s25, .L187+8	@ tmp200,
 2909              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2910              		.loc 1 543 33 view .LVU731
 2911 0d90 53BA9FED 		vldr.32	s22, .L187+12	@ tmp253,
 2912              	@ armwave.c:541:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 541:armwave.c     **** 
 2913              		.loc 1 541 24 view .LVU732
 2914 0d94 53AADFED 		vldr.32	s21, .L187+16	@ tmp254,
 2915 0d98 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2916              	@ armwave.c:527:         for(w = 0; w < g_armwave_state.waves; w++) {
 527:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2917              		.loc 1 527 15 view .LVU733
 2918 0d9c 0060A0E3 		mov	r6, #0	@ w,
 2919              	.LVL171:
 2920              	.L167:
 529:armwave.c     **** 
 2921              		.loc 1 529 13 is_stmt 1 view .LVU734
 2922              	@ armwave.c:529:             mod_val = 0.5f + (_1_waves_mod * w);
 529:armwave.c     **** 
 2923              		.loc 1 529 21 is_stmt 0 view .LVU735
 2924 0da0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2925 0da4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2926              	@ armwave.c:531:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2927              		.loc 1 531 13 view .LVU736
 2928 0da8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2929              	@ armwave.c:529:             mod_val = 0.5f + (_1_waves_mod * w);
 529:armwave.c     **** 
 2930              		.loc 1 529 21 view .LVU737
 2931 0dac E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2932 0db0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2933              	.LVL172:
 531:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2934              		.loc 1 531 13 is_stmt 1 view .LVU738
 531:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2935              		.loc 1 531 13 is_stmt 0 view .LVU739
 2936 0db4 370000DA 		ble	.L161		@,
 2937 0db8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2938              	@ armwave.c:546:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2939              		.loc 1 546 113 view .LVU740
 2940 0dbc 4AAA9FED 		vldr.32	s20, .L187+20	@ tmp229,
 2941 0dc0 4A8ADFED 		vldr.32	s17, .L187+24	@ tmp230,
 2942              	@ armwave.c:531:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2943              		.loc 1 531 19 view .LVU741
 2944 0dc4 0040A0E3 		mov	r4, #0	@ x,
 2945              	.LVL173:
 2946              	.L166:
 532:armwave.c     ****                 noise *= noise;
 2947              		.loc 1 532 17 is_stmt 1 view .LVU742
 2948              	@ armwave.c:532:                 noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****                 noise *= noise;
 2949              		.loc 1 532 28 is_stmt 0 view .LVU743
 2950 0dc8 FEFFFFEB 		bl	rand		@
 2951              	.LVL174:
 2952              	@ armwave.c:532:                 noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****                 noise *= noise;
 2953              		.loc 1 532 35 view .LVU744
 2954 0dcc 7000FFE6 		uxth	r0, r0	@ tmp201,
 2955              	@ armwave.c:532:                 noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****                 noise *= noise;
 2956              		.loc 1 532 45 view .LVU745
 2957 0dd0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2958 0dd4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2959              	@ armwave.c:532:                 noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****                 noise *= noise;
 2960              		.loc 1 532 24 view .LVU746
 2961 0dd8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2962              	.LVL175:
 533:armwave.c     ****                 noise *= noise;
 2963              		.loc 1 533 17 is_stmt 1 view .LVU747
 2964              	@ armwave.c:533:                 noise *= noise;
 533:armwave.c     ****                 noise *= noise;
 2965              		.loc 1 533 23 is_stmt 0 view .LVU748
 2966 0ddc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2967              	.LVL176:
 534:armwave.c     ****                 noise *= noise;
 2968              		.loc 1 534 17 is_stmt 1 view .LVU749
 2969              	@ armwave.c:534:                 noise *= noise;
 534:armwave.c     ****                 noise *= noise;
 2970              		.loc 1 534 23 is_stmt 0 view .LVU750
 2971 0de0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2972              	.LVL177:
 535:armwave.c     **** 
 2973              		.loc 1 535 17 is_stmt 1 view .LVU751
 2974              	@ armwave.c:535:                 noise *= noise;
 535:armwave.c     **** 
 2975              		.loc 1 535 23 is_stmt 0 view .LVU752
 2976 0de4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2977              	.LVL178:
 537:armwave.c     ****                     noise = -noise;
 2978              		.loc 1 537 17 is_stmt 1 view .LVU753
 2979              	@ armwave.c:537:                 if((rand() & 0xffff) > 0x7fff)
 537:armwave.c     ****                     noise = -noise;
 2980              		.loc 1 537 21 is_stmt 0 view .LVU754
 2981 0de8 FEFFFFEB 		bl	rand		@
 2982              	.LVL179:
 538:armwave.c     **** 
 2983              		.loc 1 538 21 is_stmt 1 view .LVU755
 2984              	@ armwave.c:537:                 if((rand() & 0xffff) > 0x7fff)
 537:armwave.c     ****                     noise = -noise;
 2985              		.loc 1 537 19 is_stmt 0 view .LVU756
 2986 0dec 020910E3 		tst	r0, #32768	@,
 2987              	@ armwave.c:538:                     noise = -noise;
 538:armwave.c     **** 
 2988              		.loc 1 538 27 view .LVU757
 2989 0df0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2990              	.LVL180:
 540:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2991              		.loc 1 540 17 is_stmt 1 view .LVU758
 541:armwave.c     **** 
 2992              		.loc 1 541 17 view .LVU759
 2993              	@ armwave.c:541:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 541:armwave.c     **** 
 2994              		.loc 1 541 27 is_stmt 0 view .LVU760
 2995 0df4 FEFFFFEB 		bl	rand		@
 2996              	.LVL181:
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2997              		.loc 1 543 17 is_stmt 1 view .LVU761
 2998              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2999              		.loc 1 543 45 is_stmt 0 view .LVU762
 3000 0df8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3001              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3002              		.loc 1 543 33 view .LVU763
 3003 0dfc 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3004              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3005              		.loc 1 543 45 view .LVU764
 3006 0e00 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3007              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3008              		.loc 1 543 33 view .LVU765
 3009 0e04 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3010              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3011              		.loc 1 543 45 view .LVU766
 3012 0e08 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3013              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3014              		.loc 1 543 33 view .LVU767
 3015 0e0c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3016              	@ armwave.c:541:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 541:armwave.c     **** 
 3017              		.loc 1 541 34 view .LVU768
 3018 0e10 7000FFE6 		uxth	r0, r0	@ tmp214,
 3019              	.LVL182:
 3020              	@ armwave.c:541:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 541:armwave.c     **** 
 3021              		.loc 1 541 44 view .LVU769
 3022 0e14 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3023 0e18 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3024              	@ armwave.c:541:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 541:armwave.c     **** 
 3025              		.loc 1 541 24 view .LVU770
 3026 0e1c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3027              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3028              		.loc 1 543 77 view .LVU771
 3029 0e20 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3030              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3031              		.loc 1 543 22 view .LVU772
 3032 0e24 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3033 0e28 FEFFFFEB 		bl	sin		@
 3034              	.LVL183:
 3035              		.loc 1 546 17 is_stmt 1 view .LVU773
 3036              	@ armwave.c:540:                 noise += 1.0f;
 540:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3037              		.loc 1 540 23 is_stmt 0 view .LVU774
 3038 0e2c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3039              	@ armwave.c:546:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3040              		.loc 1 546 104 view .LVU775
 3041 0e30 0010A0E3 		mov	r1, #0	@ iftmp.23_50,
 3042              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3043              		.loc 1 543 98 view .LVU776
 3044 0e34 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3045              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3046              		.loc 1 543 87 view .LVU777
 3047 0e38 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3048              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3049              		.loc 1 543 98 view .LVU778
 3050 0e3c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3051              	@ armwave.c:543:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 543:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3052              		.loc 1 543 19 view .LVU779
 3053 0e40 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3054              	@ armwave.c:546:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3055              		.loc 1 546 113 view .LVU780
 3056 0e44 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3057 0e48 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3058 0e4c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3059 0e50 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3060 0e54 050000DA 		ble	.L163		@,
 3061              	@ armwave.c:546:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3062              		.loc 1 546 104 discriminator 1 view .LVU781
 3063 0e58 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3064 0e5c FF10A0E3 		mov	r1, #255	@ iftmp.23_50,
 3065 0e60 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3066 0e64 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3067 0e68 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3068 0e6c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_50, %sfp
 3069              	.L163:
 3070              	@ armwave.c:546:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3071              		.loc 1 546 57 discriminator 12 view .LVU782
 3072 0e70 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3073              	@ armwave.c:546:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3074              		.loc 1 546 102 discriminator 12 view .LVU783
 3075 0e74 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3076 0e78 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3077 0e7c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3078              	@ armwave.c:531:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3079              		.loc 1 531 58 discriminator 12 view .LVU784
 3080 0e80 014084E2 		add	r4, r4, #1	@ x, x,
 3081              	.LVL184:
 3082              	@ armwave.c:546:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3083              		.loc 1 546 102 discriminator 12 view .LVU785
 3084 0e84 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.23_50, *_40
 3085              	@ armwave.c:531:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3086              		.loc 1 531 43 discriminator 12 view .LVU786
 3087 0e88 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3088              	@ armwave.c:531:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3089              		.loc 1 531 13 discriminator 12 view .LVU787
 3090 0e8c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3091 0e90 CCFFFFCA 		bgt	.L166		@,
 3092 0e94 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3093              	.LVL185:
 3094              	.L161:
 3095              	@ armwave.c:527:         for(w = 0; w < g_armwave_state.waves; w++) {
 527:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3096              		.loc 1 527 48 discriminator 2 view .LVU788
 3097 0e98 016086E2 		add	r6, r6, #1	@ w, w,
 3098              	.LVL186:
 3099              	@ armwave.c:527:         for(w = 0; w < g_armwave_state.waves; w++) {
 527:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3100              		.loc 1 527 9 discriminator 2 view .LVU789
 3101 0e9c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3102 0ea0 BEFFFFBA 		blt	.L167		@,
 3103              	.LVL187:
 3104              	.L160:
 547:armwave.c     ****             }
 548:armwave.c     ****         }
 549:armwave.c     **** 
 550:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3105              		.loc 1 550 9 is_stmt 1 discriminator 2 view .LVU790
 3106              	@ armwave.c:550:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3107              		.loc 1 550 46 is_stmt 0 discriminator 2 view .LVU791
 3108 0ea4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3109              	@ armwave.c:524:     for(s = 0; s < sets; s++) {
 524:armwave.c     ****         printf("Calculating test set %d\n", s);
 3110              		.loc 1 524 27 discriminator 2 view .LVU792
 3111 0ea8 018088E2 		add	r8, r8, #1	@ s, s,
 3112              	.LVL188:
 3113              	@ armwave.c:524:     for(s = 0; s < sets; s++) {
 524:armwave.c     ****         printf("Calculating test set %d\n", s);
 3114              		.loc 1 524 5 discriminator 2 view .LVU793
 3115 0eac 080059E1 		cmp	r9, r8	@ sets, s
 3116              	@ armwave.c:550:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3117              		.loc 1 550 20 discriminator 2 view .LVU794
 3118 0eb0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3119              	.LVL189:
 3120              	@ armwave.c:524:     for(s = 0; s < sets; s++) {
 524:armwave.c     ****         printf("Calculating test set %d\n", s);
 3121              		.loc 1 524 5 discriminator 2 view .LVU795
 3122 0eb4 AEFFFF1A 		bne	.L159		@,
 3123              	.LVL190:
 3124              	.L156:
 3125              	@ armwave.c:552: }
 551:armwave.c     ****     }
 552:armwave.c     **** }
 3126              		.loc 1 552 1 view .LVU796
 3127 0eb8 08D08DE2 		add	sp, sp, #8	@,,
 3128              		.cfi_remember_state
 3129              		.cfi_def_cfa_offset 80
 3130              		@ sp needed	@
 3131 0ebc 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3132              		.cfi_restore 90
 3133              		.cfi_restore 91
 3134              		.cfi_restore 88
 3135              		.cfi_restore 89
 3136              		.cfi_restore 86
 3137              		.cfi_restore 87
 3138              		.cfi_restore 84
 3139              		.cfi_restore 85
 3140              		.cfi_restore 82
 3141              		.cfi_restore 83
 3142              		.cfi_restore 80
 3143              		.cfi_restore 81
 3144              		.cfi_def_cfa_offset 32
 3145              	.LVL191:
 3146              		.loc 1 552 1 view .LVU797
 3147 0ec0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3148              	.LVL192:
 3149              	.L186:
 3150              		.cfi_restore_state
 3151              	.LBB48:
 3152              	.LBB45:
 472:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3153              		.loc 1 472 9 is_stmt 1 view .LVU798
 3154 0ec4 940901E0 		mul	r1, r4, r9	@, _85, sets
 3155 0ec8 0920A0E1 		mov	r2, r9	@, sets
 3156 0ecc 28009FE5 		ldr	r0, .L187+36	@,
 3157 0ed0 FEFFFFEB 		bl	printf		@
 3158              	.LVL193:
 474:armwave.c     ****     }
 3159              		.loc 1 474 9 view .LVU799
 3160 0ed4 9FFFFFEA 		b	.L158		@
 3161              	.L188:
 3162              		.align	2
 3163              	.L187:
 3164 0ed8 0000803F 		.word	1065353216
 3165 0edc 00007F43 		.word	1132396544
 3166 0ee0 0000003F 		.word	1056964608
 3167 0ee4 C3F5C840 		.word	1086911939
 3168 0ee8 38FFC74A 		.word	1254620984
 3169 0eec 0000FE42 		.word	1123942400
 3170 0ef0 00000043 		.word	1124073472
 3171 0ef4 00000000 		.word	g_armwave_state
 3172 0ef8 90020000 		.word	.LC20
 3173 0efc E8010000 		.word	.LC18
 3174              	.LBE45:
 3175              	.LBE48:
 3176              		.cfi_endproc
 3177              	.LFE75:
 3179              		.align	2
 3180              		.global	armwave_cleanup
 3181              		.syntax unified
 3182              		.arm
 3183              		.fpu vfp
 3185              	armwave_cleanup:
 3186              	.LFB76:
 553:armwave.c     **** 
 554:armwave.c     **** /*
 555:armwave.c     ****  * Make a test square waveform.
 556:armwave.c     ****  *
 557:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 558:armwave.c     ****  */
 559:armwave.c     **** #if 0
 560:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 561:armwave.c     **** {
 562:armwave.c     ****     uint8_t v;
 563:armwave.c     ****     float noise, xnoise;
 564:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 565:armwave.c     ****     int w, x;
 566:armwave.c     **** 
 567:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 568:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 569:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 570:armwave.c     ****             noise *= noise;
 571:armwave.c     ****             noise *= noise;
 572:armwave.c     ****             noise *= noise;
 573:armwave.c     **** 
 574:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 575:armwave.c     ****                 noise = -noise;
 576:armwave.c     **** 
 577:armwave.c     ****             //noise += 1.0f;
 578:armwave.c     **** 
 579:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 580:armwave.c     ****                 new_level = 0.2f;
 581:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 582:armwave.c     ****                 new_level = 0.8f;
 583:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 584:armwave.c     ****                 new_level = 0.2f;
 585:armwave.c     ****             } else {
 586:armwave.c     ****                 new_level = 0.8f;
 587:armwave.c     ****             }
 588:armwave.c     **** 
 589:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 590:armwave.c     **** 
 591:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 592:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 593:armwave.c     ****         }
 594:armwave.c     ****     }
 595:armwave.c     **** }
 596:armwave.c     **** #endif
 597:armwave.c     **** 
 598:armwave.c     **** /*
 599:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 600:armwave.c     ****  */
 601:armwave.c     **** void armwave_cleanup()
 602:armwave.c     **** {
 3187              		.loc 1 602 1 view -0
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 0
 3190              		@ frame_needed = 0, uses_anonymous_args = 0
 603:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3191              		.loc 1 603 5 view .LVU801
 3192              	@ armwave.c:602: {
 602:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3193              		.loc 1 602 1 is_stmt 0 view .LVU802
 3194 0f00 10402DE9 		push	{r4, lr}	@
 3195              		.cfi_def_cfa_offset 8
 3196              		.cfi_offset 4, -8
 3197              		.cfi_offset 14, -4
 3198              	@ armwave.c:603:     free(g_armwave_state.out_pixbuf);
 3199              		.loc 1 603 25 view .LVU803
 3200 0f04 34409FE5 		ldr	r4, .L191	@ tmp114,
 3201              	@ armwave.c:603:     free(g_armwave_state.out_pixbuf);
 3202              		.loc 1 603 5 view .LVU804
 3203 0f08 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3204 0f0c FEFFFFEB 		bl	free		@
 3205              	.LVL194:
 604:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3206              		.loc 1 604 5 is_stmt 1 view .LVU805
 3207 0f10 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3208 0f14 FEFFFFEB 		bl	free		@
 3209              	.LVL195:
 605:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3210              		.loc 1 605 5 view .LVU806
 3211 0f18 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3212 0f1c FEFFFFEB 		bl	free		@
 3213              	.LVL196:
 606:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3214              		.loc 1 606 5 view .LVU807
 3215 0f20 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3216 0f24 FEFFFFEB 		bl	free		@
 3217              	.LVL197:
 607:armwave.c     **** 
 608:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3218              		.loc 1 608 5 view .LVU808
 3219              	@ armwave.c:608:     g_armwave_state.out_pixbuf = NULL;
 3220              		.loc 1 608 32 is_stmt 0 view .LVU809
 3221 0f28 0030A0E3 		mov	r3, #0	@ tmp123,
 3222 0f2c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 609:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3223              		.loc 1 609 5 is_stmt 1 view .LVU810
 3224              	@ armwave.c:609:     g_armwave_state.ch1_buffer = NULL;
 3225              		.loc 1 609 32 is_stmt 0 view .LVU811
 3226 0f30 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 610:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3227              		.loc 1 610 5 is_stmt 1 view .LVU812
 3228              	@ armwave.c:610:     g_armwave_state.xcoord_to_xpixel = NULL;
 3229              		.loc 1 610 38 is_stmt 0 view .LVU813
 3230 0f34 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 611:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3231              		.loc 1 611 5 is_stmt 1 view .LVU814
 3232              	@ armwave.c:611:     g_armwave_state.test_wave_buffer = NULL;
 3233              		.loc 1 611 38 is_stmt 0 view .LVU815
 3234 0f38 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3235              	@ armwave.c:612: }
 612:armwave.c     **** }
 3236              		.loc 1 612 1 view .LVU816
 3237 0f3c 1080BDE8 		pop	{r4, pc}	@
 3238              	.L192:
 3239              		.align	2
 3240              	.L191:
 3241 0f40 00000000 		.word	g_armwave_state
 3242              		.cfi_endproc
 3243              	.LFE76:
 3245              		.comm	gamma_table,256,4
 3246              		.comm	g_armwave_state,136,4
 3247              		.section	.rodata
 3248              		.align	2
 3249              		.set	.LANCHOR0,. + 0
 3252              	__PRETTY_FUNCTION__.17096:
 3253 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3253      6176655F 
 3253      66696C6C 
 3253      5F706978 
 3253      6275665F 
 3254 001b 00       		.space	1
 3257              	__PRETTY_FUNCTION__.17126:
 3258 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3258      6176655F 
 3258      73657475 
 3258      705F7265 
 3258      6E646572 
 3259 0031 000000   		.space	3
 3262              	__PRETTY_FUNCTION__.17133:
 3263 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3263      6176655F 
 3263      7365745F 
 3263      77617665 
 3263      5F706F69 
 3264 004d 000000   		.space	3
 3267              	__PRETTY_FUNCTION__.17140:
 3268 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3268      6176655F 
 3268      7365745F 
 3268      77617665 
 3268      5F706F69 
 3269              		.section	.rodata.str1.4,"aMS",%progbits,1
 3270              		.align	2
 3271              	.LC0:
 3272 0000 76302E30 		.ascii	"v0.0.1\000"
 3272      2E3100
 3273 0007 00       		.space	1
 3274              	.LC1:
 3275 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3275      61766520 
 3275      76657273 
 3275      696F6E3A 
 3275      2025730A 
 3276 001d 000000   		.space	3
 3277              	.LC2:
 3278 0020 61726D77 		.ascii	"armwave.c\000"
 3278      6176652E 
 3278      6300
 3279 002a 0000     		.space	2
 3280              	.LC3:
 3281 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3281      62756666 
 3281      65722021 
 3281      3D204E55 
 3281      4C4C00
 3282 003f 00       		.space	1
 3283              	.LC4:
 3284 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3284      20653D25 
 3284      6420773D 
 3284      25642077 
 3284      733D2564 
 3285              	.LC5:
 3286 006c 73746172 		.ascii	"start_point < end_point\000"
 3286      745F706F 
 3286      696E7420 
 3286      3C20656E 
 3286      645F706F 
 3287              	.LC6:
 3288 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3288      7566665F 
 3288      73697A65 
 3288      3D25642C 
 3288      20636D70 
 3289 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3289      5F776964 
 3289      74683D25 
 3289      642C2077 
 3289      6176655F 
 3290 00e1 000000   		.space	3
 3291              	.LC7:
 3292 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3292      6D776176 
 3292      655F7374 
 3292      6174652E 
 3292      6368315F 
 3293 0107 00       		.space	1
 3294              	.LC8:
 3295 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3295      6D776176 
 3295      655F7374 
 3295      6174652E 
 3295      78636F6F 
 3296 0131 000000   		.space	3
 3297              	.LC9:
 3298 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3298      3A203078 
 3298      25303878 
 3298      20307825 
 3298      30387820 
 3299              	.LC10:
 3300 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3300      5F627566 
 3300      66657220 
 3300      213D204E 
 3300      554C4C00 
 3301              	.LC11:
 3302 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3302      6176655F 
 3302      7365745F 
 3302      77617665 
 3302      5F706F69 
 3303 019f 78636565 		.ascii	"xceeded\000"
 3303      64656400 
 3304 01a7 00       		.space	1
 3305              	.LC12:
 3306 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3306      5F627566 
 3306      6665725F 
 3306      70747220 
 3306      213D2030 
 3307 01bd 000000   		.space	3
 3308              	.LC13:
 3309 01c0 776200   		.ascii	"wb\000"
 3310 01c3 00       		.space	1
 3311              	.LC14:
 3312 01c4 50330A00 		.ascii	"P3\012\000"
 3313              	.LC15:
 3314 01c8 25642025 		.ascii	"%d %d\012\000"
 3314      640A00
 3315 01cf 00       		.space	1
 3316              	.LC16:
 3317 01d0 3235350A 		.ascii	"255\012\000"
 3317      00
 3318 01d5 000000   		.space	3
 3319              	.LC17:
 3320 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3320      25336420 
 3320      2533640A 
 3320      00
 3321 01e5 000000   		.space	3
 3322              	.LC18:
 3323 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3323      6176655F 
 3323      74657374 
 3323      5F627566 
 3323      6665725F 
 3324 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3324      20627566 
 3324      66657220 
 3324      28256420 
 3324      62797465 
 3325              	.LC19:
 3326 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3326      6176655F 
 3326      66696C6C 
 3326      5F706978 
 3326      6275665F 
 3327 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3327      20666169 
 3327      6C65642C 
 3327      20726574 
 3327      75726E69 
 3328 028e 0000     		.space	2
 3329              	.LC20:
 3330 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3330      756C6174 
 3330      696E6720 
 3330      74657374 
 3330      20736574 
 3331              		.text
 3332              	.Letext0:
 3333              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3334              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3335              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3336              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3337              		.file 7 "/usr/include/stdio.h"
 3338              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3339              		.file 9 "/usr/include/errno.h"
 3340              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3341              		.file 11 "/usr/include/unistd.h"
 3342              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3343              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3344              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3345              		.file 15 "/usr/include/math.h"
 3346              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3347              		.file 17 "/usr/include/time.h"
 3348              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3349              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3350              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3351              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3352              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3353              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3354              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3355              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3356              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3357              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3358              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3359              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3360              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3361              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3362              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3363              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3364              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3365              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3366              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3367              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3368              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3369              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3370              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3371              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3372              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3373              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3374              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3375              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3376              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3377              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3378              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3379              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3380              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3381              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3382              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3383              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3384              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3385              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3386              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3387              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3388              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3389              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3390              		.file 60 "/usr/local/include/python3.8/context.h"
 3391              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3392              		.file 62 "/usr/local/include/python3.8/code.h"
 3393              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3394              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3395              		.file 65 "/usr/local/include/python3.8/import.h"
 3396              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3397              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3398              		.file 68 "/usr/include/malloc.h"
 3399              		.file 69 "armwave.h"
 3400              		.file 70 "/usr/include/stdlib.h"
 3401              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3402              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3403              		.file 73 "<built-in>"
 3404              		.file 74 "/usr/include/assert.h"
