   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C4C19FE5 		ldr	ip, .L27	@ tmp320,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 52 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp217, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp219, tmp217,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 52 view .LVU41
 279 00c8 950303E0 		mul	r3, r5, r3	@ tmp221, g_armwave_state.bitdepth_height, tmp219
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 620000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 6000000A 		beq	.L11		@,
 289 00dc 8350A0E1 		lsl	r5, r3, #1	@ _8, tmp221,
 290              	.LVL8:
 291              		.loc 1 79 5 view .LVU45
 292 00e0 043040E2 		sub	r3, r0, #4	@ tmp319, slice_y,
 293 00e4 0C308DE5 		str	r3, [sp, #12]	@ tmp319, %sfp
 294              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 295              		.loc 1 79 11 view .LVU46
 296 00e8 0030A0E3 		mov	r3, #0	@ w,
 297 00ec 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 298              	.LVL9:
 299              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 301              		.loc 1 84 9 view .LVU48
 302              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 80 64 is_stmt 0 view .LVU49
 304 00f0 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 305 00f4 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 306 00f8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp319, %sfp
 307 00fc 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 308 0100 93E223E0 		mla	r3, r3, r2, lr	@ tmp230, g_armwave_state.wave_stride, w, tmp319
 309              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 84 16 view .LVU50
 311 0104 0000A0E3 		mov	r0, #0	@ yy,
 312 0108 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 313 010c 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 314              	.LVL10:
 315              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 316              		.loc 1 87 13 is_stmt 1 view .LVU51
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 317              		.loc 1 101 17 view .LVU52
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 106 17 view .LVU53
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 319              		.loc 1 101 17 view .LVU54
 320              		.loc 1 106 17 view .LVU55
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 101 17 view .LVU56
 322              		.loc 1 106 17 view .LVU57
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 101 17 view .LVU58
 324              		.loc 1 106 17 view .LVU59
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 is_stmt 0 view .LVU60
 327 0110 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 328              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 102 34 view .LVU61
 330 0114 019080E2 		add	r9, r0, #1	@ tmp261, yy,
 331 0118 028080E2 		add	r8, r0, #2	@ tmp283, yy,
 332              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 333              		.loc 1 87 18 view .LVU62
 334 011c 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _187, offset: 0B]
 335              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 336              		.loc 1 102 34 view .LVU63
 337 0120 037080E2 		add	r7, r0, #3	@ tmp303, yy,
 338              	.LVL11:
 339              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 340              		.loc 1 94 20 view .LVU64
 341 0124 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 342              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 343              		.loc 1 87 18 view .LVU65
 344 0128 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 345              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 346              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 347              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 17 view .LVU68
 349              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 350              		.loc 1 94 20 is_stmt 0 view .LVU69
 351 012c 0120A003 		moveq	r2, #1	@ tmp233,
 352 0130 0020A013 		movne	r2, #0	@ tmp233,
 353              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 354              		.loc 1 94 19 view .LVU70
 355 0134 FF005AE3 		cmp	r10, #255	@ scale_value,
 356 0138 01208203 		orreq	r2, r2, #1	@,, tmp238, tmp233
 357 013c 000052E3 		cmp	r2, #0	@ tmp238,
 358              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 106 47 view .LVU71
 360 0140 05B08AE0 		add	fp, r10, r5	@ tmp246, scale_value, _8
 361              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 362              		.loc 1 107 22 view .LVU72
 363 0144 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 364 0148 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 365              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 366              		.loc 1 94 19 view .LVU73
 367 014c 3900001A 		bne	.L20		@,
 368              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 369              		.loc 1 102 34 view .LVU74
 370 0150 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 372              		.loc 1 106 47 view .LVU75
 373 0154 40609CE5 		ldr	r6, [ip, #64]	@ tmp332, g_armwave_state.bitdepth_height
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 20 view .LVU76
 376 0158 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 377              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 378              		.loc 1 102 34 view .LVU77
 379 015c 920002E0 		mul	r2, r2, r0	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 380              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 381              		.loc 1 106 47 view .LVU78
 382 0160 05A084E0 		add	r10, r4, r5	@ tmp268, scale_value, _8
 383              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 384              		.loc 1 102 74 view .LVU79
 385 0164 2228A0E1 		lsr	r2, r2, #16	@ tmp242, tmp240,
 386              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 47 view .LVU80
 388 0168 96B222E0 		mla	r2, r6, r2, fp	@ tmp247, tmp332, tmp242, tmp246
 389              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 390              		.loc 1 94 20 view .LVU81
 391 016c 01B0A003 		moveq	fp, #1	@ tmp254,
 392 0170 00B0A013 		movne	fp, #0	@ tmp254,
 393              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 394              		.loc 1 94 19 view .LVU82
 395 0174 FF0054E3 		cmp	r4, #255	@ scale_value,
 396 0178 0B40A011 		movne	r4, fp	@, tmp259, tmp254
 397 017c 01408B03 		orreq	r4, fp, #1	@,, tmp259, tmp254
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU83
 400 0180 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_80, *_80
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU84
 403 0184 000054E3 		cmp	r4, #0	@ tmp259,
 404              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 405              		.loc 1 106 47 view .LVU85
 406 0188 01B08BE2 		add	fp, fp, #1	@ tmp250, *_80,
 407 018c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp250, *_80
 408              	.LVL13:
 409              		.loc 1 107 17 is_stmt 1 view .LVU86
  91:armwave.c     ****                 
 410              		.loc 1 91 17 view .LVU87
  94:armwave.c     ****                     continue;
 411              		.loc 1 94 17 view .LVU88
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 19 is_stmt 0 view .LVU89
 414 0190 2800001A 		bne	.L20		@,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU90
 417 0194 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 418              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 419              		.loc 1 102 99 view .LVU91
 420 0198 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 421              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 422              		.loc 1 94 20 view .LVU92
 423 019c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 424              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 425              		.loc 1 102 34 view .LVU93
 426 01a0 920909E0 		mul	r9, r2, r9	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 view .LVU94
 429 01a4 0120A003 		moveq	r2, #1	@ tmp276,
 430 01a8 0020A013 		movne	r2, #0	@ tmp276,
 431              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 432              		.loc 1 102 74 view .LVU95
 433 01ac 2998A0E1 		lsr	r9, r9, #16	@ tmp264, tmp262,
 434              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 435              		.loc 1 106 47 view .LVU96
 436 01b0 05408EE0 		add	r4, lr, r5	@ tmp290, scale_value, _8
 437 01b4 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp269, g_armwave_state.bitdepth_height, tmp264, tmp268
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU97
 440 01b8 FF005EE3 		cmp	lr, #255	@ scale_value,
 441 01bc 02E0A011 		movne	lr, r2	@, tmp281, tmp276
 442 01c0 01E08203 		orreq	lr, r2, #1	@,, tmp281, tmp276
 443 01c4 00005EE3 		cmp	lr, #0	@ tmp281,
 444              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 445              		.loc 1 106 47 view .LVU98
 446 01c8 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_111, *_111
 447 01cc 012082E2 		add	r2, r2, #1	@ tmp272, *_111,
 448 01d0 0A20C1E7 		strb	r2, [r1, r10]	@ tmp272, *_111
 449              		.loc 1 107 17 is_stmt 1 view .LVU99
 450              	.LVL14:
  91:armwave.c     ****                 
 451              		.loc 1 91 17 view .LVU100
  94:armwave.c     ****                     continue;
 452              		.loc 1 94 17 view .LVU101
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 is_stmt 0 view .LVU102
 455 01d4 1700001A 		bne	.L20		@,
 456              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 457              		.loc 1 102 34 view .LVU103
 458 01d8 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 459              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 460              		.loc 1 94 20 view .LVU104
 461 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 462              	.LVL15:
 463              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 464              		.loc 1 106 47 view .LVU105
 465 01e0 032085E0 		add	r2, r5, r3	@ tmp311, _8, word
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 34 view .LVU106
 468 01e4 9E0808E0 		mul	r8, lr, r8	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 99 view .LVU107
 471 01e8 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 472              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 473              		.loc 1 102 74 view .LVU108
 474 01ec 2888A0E1 		lsr	r8, r8, #16	@ tmp286, tmp284,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU109
 477 01f0 9E4828E0 		mla	r8, lr, r8, r4	@ tmp291, g_armwave_state.bitdepth_height, tmp286, tmp290
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU110
 480 01f4 01E0A003 		moveq	lr, #1	@ tmp297,
 481 01f8 00E0A013 		movne	lr, #0	@ tmp297,
 482              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 483              		.loc 1 94 19 view .LVU111
 484 01fc FF0053E3 		cmp	r3, #255	@ word,
 485 0200 01E08E03 		orreq	lr, lr, #1	@,, tmp302, tmp297
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU112
 488 0204 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_142, *_142
 489              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 490              		.loc 1 94 19 view .LVU113
 491 0208 00005EE3 		cmp	lr, #0	@ tmp302,
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU114
 494 020c 013083E2 		add	r3, r3, #1	@ tmp294, *_142,
 495 0210 0830C1E7 		strb	r3, [r1, r8]	@ tmp294, *_142
 496              		.loc 1 107 17 is_stmt 1 view .LVU115
 497              	.LVL16:
  91:armwave.c     ****                 
 498              		.loc 1 91 17 view .LVU116
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU117
 500              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 501              		.loc 1 94 19 is_stmt 0 view .LVU118
 502 0214 0700001A 		bne	.L20		@,
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 34 view .LVU119
 505 0218 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 99 view .LVU120
 508 021c 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 34 view .LVU121
 511 0220 930707E0 		mul	r7, r3, r7	@ tmp305, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 512              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 513              		.loc 1 102 74 view .LVU122
 514 0224 2778A0E1 		lsr	r7, r7, #16	@ tmp307, tmp305,
 515              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 516              		.loc 1 106 47 view .LVU123
 517 0228 9E2727E0 		mla	r7, lr, r7, r2	@ tmp312, g_armwave_state.bitdepth_height, tmp307, tmp311
 518 022c 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_173, *_173
 519 0230 013083E2 		add	r3, r3, #1	@ tmp315, *_173,
 520 0234 0730C1E7 		strb	r3, [r1, r7]	@ tmp315, *_173
 521              		.loc 1 107 17 is_stmt 1 view .LVU124
 522              	.LVL17:
 523              	.L20:
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 9 is_stmt 0 view .LVU125
 526 0238 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 527              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 528              		.loc 1 84 37 view .LVU126
 529 023c 040080E2 		add	r0, r0, #4	@ yy, yy,
 530              	.LVL18:
 531              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 532              		.loc 1 84 9 view .LVU127
 533 0240 000053E1 		cmp	r3, r0	@ height, yy
 534 0244 B1FFFF8A 		bhi	.L17		@,
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU128
 537 0248 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 5 view .LVU129
 540 024c 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 view .LVU130
 543 0250 012082E2 		add	r2, r2, #1	@ w, w,
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 5 view .LVU131
 546 0254 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 547              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 79 44 view .LVU132
 549 0258 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 550              	.LVL19:
 551              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 552              		.loc 1 79 5 view .LVU133
 553 025c A3FFFFBA 		blt	.L18		@,
 554              	.LVL20:
 555              	.L11:
 556              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 557              		.loc 1 111 1 view .LVU134
 558 0260 14D08DE2 		add	sp, sp, #20	@,,
 559              		.cfi_def_cfa_offset 36
 560              		@ sp needed	@
 561 0264 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 562              	.L28:
 563              		.align	2
 564              	.L27:
 565 0268 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL21:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 8
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b;
 584              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     uint16_t value; 
 585              		.loc 1 178 5 view .LVU139
 179:armwave.c     ****     // uint8_t row;
 180:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 586              		.loc 1 180 5 view .LVU140
 587              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 588              		.loc 1 173 1 is_stmt 0 view .LVU141
 589 026c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 590              		.cfi_def_cfa_offset 36
 591              		.cfi_offset 4, -36
 592              		.cfi_offset 5, -32
 593              		.cfi_offset 6, -28
 594              		.cfi_offset 7, -24
 595              		.cfi_offset 8, -20
 596              		.cfi_offset 9, -16
 597              		.cfi_offset 10, -12
 598              		.cfi_offset 11, -8
 599              		.cfi_offset 14, -4
 600              	@ armwave.c:184:     assert(out_buffer != NULL);
 181:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 182:armwave.c     ****     uint32_t offset;
 183:armwave.c     **** 
 184:armwave.c     ****     assert(out_buffer != NULL);
 601              		.loc 1 184 5 view .LVU142
 602 0270 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 603              	@ armwave.c:180:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 604              		.loc 1 180 15 view .LVU143
 605 0274 6C519FE5 		ldr	r5, .L49	@ tmp222,
 606              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 607              		.loc 1 173 1 view .LVU144
 608 0278 0CD04DE2 		sub	sp, sp, #12	@,,
 609              		.cfi_def_cfa_offset 48
 610              	@ armwave.c:180:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 611              		.loc 1 180 15 view .LVU145
 612 027c 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 613              	.LVL22:
 181:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 614              		.loc 1 181 5 is_stmt 1 view .LVU146
 182:armwave.c     **** 
 615              		.loc 1 182 5 view .LVU147
 616              		.loc 1 184 5 view .LVU148
 617 0280 5300000A 		beq	.L47		@,
 185:armwave.c     **** 
 186:armwave.c     ****     // we don't really want to be doing this if possible
 187:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 618              		.loc 1 187 5 view .LVU149
 619              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 620              		.loc 1 187 59 is_stmt 0 view .LVU150
 621 0284 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 622 0288 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 623              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 624              		.loc 1 187 5 view .LVU151
 625 028c 0010A0E3 		mov	r1, #0	@,
 626              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 627              		.loc 1 187 59 view .LVU152
 628 0290 920302E0 		mul	r2, r2, r3	@ tmp181, g_armwave_state.target_height, g_armwave_state.target_width
 629              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 630              		.loc 1 187 5 view .LVU153
 631 0294 0221A0E1 		lsl	r2, r2, #2	@, tmp181,
 632 0298 FEFFFFEB 		bl	memset		@
 633              	.LVL23:
 188:armwave.c     **** 
 189:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 634              		.loc 1 189 5 is_stmt 1 view .LVU154
 635              	@ armwave.c:189:     npix = g_armwave_state.target_width * 256; 
 636              		.loc 1 189 10 is_stmt 0 view .LVU155
 637 029c 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 638 02a0 0004A0E1 		lsl	r0, r0, #8	@ npix, g_armwave_state.target_width,
 639              	.LVL24:
 190:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 191:armwave.c     **** 
 192:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 640              		.loc 1 192 5 is_stmt 1 view .LVU156
 641              		.loc 1 192 5 is_stmt 0 view .LVU157
 642 02a4 000050E3 		cmp	r0, #0	@ npix,
 643 02a8 0D0000DA 		ble	.L29		@,
 644              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each 16-bit word within.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 2; w++) {
 199:armwave.c     ****                 value = wave_word & 0xffff;
 200:armwave.c     ****                 wave_word >>= 16;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 645              		.loc 1 204 52 view .LVU158
 646 02ac FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 647              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 648              		.loc 1 203 52 view .LVU159
 649 02b0 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 650              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // TODO: Replace this FP math with integer math: big performance hit converting
 215:armwave.c     ****                     nsub = n + (w * 2);
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 651              		.loc 1 216 57 view .LVU160
 652 02b4 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 653              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 654              		.loc 1 204 52 view .LVU161
 655 02b8 00308DE5 		str	r3, [sp]	@ _15, %sfp
 656              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 657              		.loc 1 205 52 view .LVU162
 658 02bc F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 659              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 660              		.loc 1 192 11 view .LVU163
 661 02c0 0020A0E3 		mov	r2, #0	@ n,
 662              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 205 52 view .LVU164
 664 02c4 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 665              	.LVL25:
 666              	.L36:
 195:armwave.c     **** 
 667              		.loc 1 195 9 is_stmt 1 view .LVU165
 668              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 669              		.loc 1 195 19 is_stmt 0 view .LVU166
 670 02c8 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_61, offset: 4294967292B]
 671              	.LVL26:
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 672              		.loc 1 197 9 is_stmt 1 view .LVU167
 673              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 674              		.loc 1 197 11 is_stmt 0 view .LVU168
 675 02cc 000053E3 		cmp	r3, #0	@ wave_word,
 676              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 677              		.loc 1 198 19 view .LVU169
 678 02d0 00E0A013 		movne	lr, #0	@ w,
 679              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 680              		.loc 1 197 11 view .LVU170
 681 02d4 0400001A 		bne	.L35		@,
 682              	.L32:
 683              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 684              		.loc 1 192 28 view .LVU171
 685 02d8 022082E2 		add	r2, r2, #2	@ n, n,
 686              	.LVL27:
 687              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 688              		.loc 1 192 5 view .LVU172
 689 02dc 020050E1 		cmp	r0, r2	@ npix, n
 690 02e0 F8FFFFCA 		bgt	.L36		@,
 691              	.LVL28:
 692              	.L29:
 693              	@ armwave.c:228: }
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                 }
 225:armwave.c     ****             }
 226:armwave.c     ****         }
 227:armwave.c     ****     }
 228:armwave.c     **** }
 694              		.loc 1 228 1 view .LVU173
 695 02e4 0CD08DE2 		add	sp, sp, #12	@,,
 696              		.cfi_remember_state
 697              		.cfi_def_cfa_offset 36
 698              		@ sp needed	@
 699 02e8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 700              	.LVL29:
 701              	.L35:
 702              		.cfi_restore_state
 199:armwave.c     ****                 wave_word >>= 16;
 703              		.loc 1 199 17 is_stmt 1 view .LVU174
 200:armwave.c     **** 
 704              		.loc 1 200 17 view .LVU175
 705              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 706              		.loc 1 202 19 is_stmt 0 view .LVU176
 707 02ec 7310FFE6 		uxth	r1, r3	@ wave_word, wave_word
 708 02f0 000051E3 		cmp	r1, #0	@ wave_word,
 709              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 710              		.loc 1 200 27 view .LVU177
 711 02f4 23C8A0E1 		lsr	ip, r3, #16	@ wave_word, wave_word,
 712              	.LVL30:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 713              		.loc 1 202 17 is_stmt 1 view .LVU178
 714              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 715              		.loc 1 202 19 is_stmt 0 view .LVU179
 716 02f8 0700001A 		bne	.L48		@,
 717              	.LVL31:
 718              	.L33:
 719              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 720              		.loc 1 198 13 view .LVU180
 721 02fc 01005EE3 		cmp	lr, #1	@ w,
 722              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 723              		.loc 1 200 27 view .LVU181
 724 0300 0C30A0E1 		mov	r3, ip	@ wave_word, wave_word
 725              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 726              		.loc 1 198 13 view .LVU182
 727 0304 F3FFFF0A 		beq	.L32		@,
 728              	.LVL32:
 729              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 730              		.loc 1 202 19 view .LVU183
 731 0308 7310FFE6 		uxth	r1, r3	@ wave_word, wave_word
 732 030c 000051E3 		cmp	r1, #0	@ wave_word,
 733 0310 01E0A0E3 		mov	lr, #1	@ w,
 734              	.LVL33:
 199:armwave.c     ****                 wave_word >>= 16;
 735              		.loc 1 199 17 is_stmt 1 view .LVU184
 200:armwave.c     **** 
 736              		.loc 1 200 17 view .LVU185
 737              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 738              		.loc 1 200 27 is_stmt 0 view .LVU186
 739 0314 23C8A0E1 		lsr	ip, r3, #16	@ wave_word, wave_word,
 740              	.LVL34:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 741              		.loc 1 202 17 is_stmt 1 view .LVU187
 742              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 743              		.loc 1 202 19 is_stmt 0 view .LVU188
 744 0318 F7FFFF0A 		beq	.L33		@,
 745              	.L48:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 746              		.loc 1 203 21 is_stmt 1 view .LVU189
 747 031c 8E9082E0 		add	r9, r2, lr, lsl #1	@ _127, n, w,
 748              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 749              		.loc 1 203 55 is_stmt 0 view .LVU190
 750 0320 0130A0E1 		mov	r3, r1	@ _12, wave_word
 751              	.LVL35:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 752              		.loc 1 204 21 is_stmt 1 view .LVU191
 205:armwave.c     **** 
 753              		.loc 1 205 21 view .LVU192
 207:armwave.c     ****                     g = MIN(gg, 255);
 754              		.loc 1 207 21 view .LVU193
 208:armwave.c     ****                     b = MIN(bb, 255);
 755              		.loc 1 208 21 view .LVU194
 209:armwave.c     **** 
 756              		.loc 1 209 21 view .LVU195
 212:armwave.c     **** 
 757              		.loc 1 212 21 view .LVU196
 758              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 759              		.loc 1 216 32 is_stmt 0 view .LVU197
 760 0324 7910EFE6 		uxtb	r1, r9	@ _31, _127
 761              	.LVL36:
 762              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 763              		.loc 1 217 41 view .LVU198
 764 0328 017081E2 		add	r7, r1, #1	@ tmp215, _31,
 765              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 766              		.loc 1 216 40 view .LVU199
 767 032c 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 768              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 769              		.loc 1 217 41 view .LVU200
 770 0330 107A07EE 		vmov	s14, r7	@ int	@ tmp215, tmp215
 771              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 772              		.loc 1 205 55 view .LVU201
 773 0334 04109DE5 		ldr	r1, [sp, #4]	@ _18, %sfp
 774              	@ armwave.c:218:                     xx = (nsub >> 8);
 218:armwave.c     **** 
 775              		.loc 1 218 32 view .LVU202
 776 0338 4994A0E1 		asr	r9, r9, #8	@ xx, _127,
 777              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 216 40 view .LVU203
 779 033c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp213, _31
 780              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 781              		.loc 1 217 46 view .LVU204
 782 0340 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp215
 783              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 784              		.loc 1 205 55 view .LVU205
 785 0344 910307E0 		mul	r7, r1, r3	@ tmp199, _18, _12
 786              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 787              		.loc 1 204 55 view .LVU206
 788 0348 00109DE5 		ldr	r1, [sp]	@ _15, %sfp
 789              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 790              		.loc 1 205 24 view .LVU207
 791 034c 4774A0E1 		asr	r7, r7, #8	@ bb, tmp199,
 792              	.LVL37:
 793              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 794              		.loc 1 204 55 view .LVU208
 795 0350 91030AE0 		mul	r10, r1, r3	@ tmp203, _15, _12
 796              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 797              		.loc 1 216 40 view .LVU209
 798 0354 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp214, tmp213, _33
 799              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 800              		.loc 1 217 46 view .LVU210
 801 0358 267A27EE 		vmul.f32	s14, s14, s13	@ tmp217, tmp216, _33
 802              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 803              		.loc 1 203 55 view .LVU211
 804 035c 930B03E0 		mul	r3, r3, fp	@ tmp209, _12, _11
 805              	.LVL38:
 806              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 807              		.loc 1 209 25 view .LVU212
 808 0360 FF0057E3 		cmp	r7, #255	@ bb,
 809              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 810              		.loc 1 204 24 view .LVU213
 811 0364 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp203,
 812              	.LVL39:
 813              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 814              		.loc 1 203 24 view .LVU214
 815 0368 4314A0E1 		asr	r1, r3, #8	@ rr, tmp209,
 816              	.LVL40:
 817              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 818              		.loc 1 209 25 view .LVU215
 819 036c FF70A0A3 		movge	r7, #255	@ bb,
 820              	.LVL41:
 821              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 822              		.loc 1 216 24 view .LVU216
 823 0370 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp214
 824              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 825              		.loc 1 208 25 view .LVU217
 826 0374 FF005AE3 		cmp	r10, #255	@ gg,
 827 0378 FFA0A0A3 		movge	r10, #255	@ gg,
 828              	.LVL42:
 829              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 830              		.loc 1 207 25 view .LVU218
 831 037c FF0051E3 		cmp	r1, #255	@ rr,
 832              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 833              		.loc 1 212 56 view .LVU219
 834 0380 0AA4A0E1 		lsl	r10, r10, #8	@ tmp204, gg,
 835              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 836              		.loc 1 207 25 view .LVU220
 837 0384 FF10A0A3 		movge	r1, #255	@ rr,
 838              	.LVL43:
 839              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 840              		.loc 1 212 44 view .LVU221
 841 0388 0778A0E1 		lsl	r7, r7, #16	@ tmp200, bb,
 842 038c FF7807E2 		and	r7, r7, #16711680	@ tmp201, tmp200,
 843              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 844              		.loc 1 216 24 view .LVU222
 845 0390 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 846              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 847              		.loc 1 217 24 view .LVU223
 848 0394 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp217
 849              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 850              		.loc 1 212 56 view .LVU224
 851 0398 7AA0FFE6 		uxth	r10, r10	@ tmp205, tmp204
 852              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 853              		.loc 1 212 51 view .LVU225
 854 039c 0A7087E1 		orr	r7, r7, r10	@ tmp207, tmp201, tmp205
 855              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 856              		.loc 1 212 62 view .LVU226
 857 03a0 7110EFE6 		uxtb	r1, r1	@ rr, rr
 858 03a4 011087E1 		orr	r1, r7, r1	@ tmp211, tmp207, rr
 859              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 860              		.loc 1 212 26 view .LVU227
 861 03a8 FF7481E3 		orr	r7, r1, #-16777216	@ word, tmp211,
 862              	.LVL44:
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 863              		.loc 1 215 21 is_stmt 1 view .LVU228
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 864              		.loc 1 216 21 view .LVU229
 217:armwave.c     ****                     xx = (nsub >> 8);
 865              		.loc 1 217 21 view .LVU230
 866              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 867              		.loc 1 217 24 is_stmt 0 view .LVU231
 868 03ac 908A17EE 		vmov	r8, s15	@ int	@ ye, ye
 869              	.LVL45:
 218:armwave.c     **** 
 870              		.loc 1 218 21 is_stmt 1 view .LVU232
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 220 21 view .LVU233
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 872              		.loc 1 220 21 is_stmt 0 view .LVU234
 873 03b0 080053E1 		cmp	r3, r8	@ yy, ye
 874 03b4 D0FFFF2A 		bcs	.L33		@,
 875              	.LVL46:
 876              	.L34:
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 877              		.loc 1 221 25 is_stmt 1 discriminator 3 view .LVU235
 222:armwave.c     ****                     }
 878              		.loc 1 222 25 discriminator 3 view .LVU236
 879              	@ armwave.c:221:                         offset = (xx + (y * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 880              		.loc 1 221 43 is_stmt 0 discriminator 3 view .LVU237
 881 03b8 581095E5 		ldr	r1, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 882              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 883              		.loc 1 222 43 discriminator 3 view .LVU238
 884 03bc 919321E0 		mla	r1, r1, r3, r9	@ tmp221, g_armwave_state.target_width, yy, xx
 885              	.LVL47:
 886              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 887              		.loc 1 220 42 discriminator 3 view .LVU239
 888 03c0 013083E2 		add	r3, r3, #1	@ yy, yy,
 889              	.LVL48:
 890              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 891              		.loc 1 220 21 discriminator 3 view .LVU240
 892 03c4 030058E1 		cmp	r8, r3	@ ye, yy
 893              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 894              		.loc 1 222 53 discriminator 3 view .LVU241
 895 03c8 017186E7 		str	r7, [r6, r1, lsl #2]	@ word, *_43
 896              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 897              		.loc 1 220 21 discriminator 3 view .LVU242
 898 03cc F9FFFF1A 		bne	.L34		@,
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 899              		.loc 1 220 21 discriminator 3 view .LVU243
 900 03d0 C9FFFFEA 		b	.L33		@
 901              	.LVL49:
 902              	.L47:
 184:armwave.c     **** 
 903              		.loc 1 184 5 is_stmt 1 discriminator 1 view .LVU244
 904 03d4 10309FE5 		ldr	r3, .L49+4	@,
 905 03d8 B820A0E3 		mov	r2, #184	@,
 906 03dc 0C109FE5 		ldr	r1, .L49+8	@,
 907 03e0 0C009FE5 		ldr	r0, .L49+12	@,
 908              	.LVL50:
 184:armwave.c     **** 
 909              		.loc 1 184 5 is_stmt 0 discriminator 1 view .LVU245
 910 03e4 FEFFFFEB 		bl	__assert_fail		@
 911              	.LVL51:
 912              	.L50:
 913              		.align	2
 914              	.L49:
 915 03e8 00000000 		.word	g_armwave_state
 916 03ec 00000000 		.word	.LANCHOR0
 917 03f0 20000000 		.word	.LC2
 918 03f4 2C000000 		.word	.LC3
 919              		.cfi_endproc
 920              	.LFE60:
 922              		.global	__aeabi_idiv
 923              		.align	2
 924              		.global	armwave_generate
 925              		.syntax unified
 926              		.arm
 927              		.fpu vfp
 929              	armwave_generate:
 930              	.LFB61:
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 232:armwave.c     ****  */
 233:armwave.c     **** void armwave_generate()
 234:armwave.c     **** {
 931              		.loc 1 234 1 is_stmt 1 view -0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 16
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 235:armwave.c     ****     uint32_t yy;
 935              		.loc 1 235 5 view .LVU247
 236:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 936              		.loc 1 236 5 view .LVU248
 937              	.LVL52:
 237:armwave.c     **** 
 238:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 938              		.loc 1 238 5 view .LVU249
 939              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 940              		.loc 1 234 1 is_stmt 0 view .LVU250
 941 03f8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 942              		.cfi_def_cfa_offset 36
 943              		.cfi_offset 4, -36
 944              		.cfi_offset 5, -32
 945              		.cfi_offset 6, -28
 946              		.cfi_offset 7, -24
 947              		.cfi_offset 8, -20
 948              		.cfi_offset 9, -16
 949              		.cfi_offset 10, -12
 950              		.cfi_offset 11, -8
 951              		.cfi_offset 14, -4
 952              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 953              		.loc 1 238 5 view .LVU251
 954 03fc 0010A0E3 		mov	r1, #0	@,
 955              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 956              		.loc 1 238 58 view .LVU252
 957 0400 14829FE5 		ldr	r8, .L70	@ tmp342,
 958              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 959              		.loc 1 234 1 view .LVU253
 960 0404 14D04DE2 		sub	sp, sp, #20	@,,
 961              		.cfi_def_cfa_offset 56
 962              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 963              		.loc 1 238 5 view .LVU254
 964 0408 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 965 040c 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 966 0410 FEFFFFEB 		bl	memset		@
 967              	.LVL53:
 239:armwave.c     **** 
 240:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 968              		.loc 1 240 5 is_stmt 1 view .LVU255
 969              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 970              		.loc 1 240 68 is_stmt 0 view .LVU256
 971 0414 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 972              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 973              		.loc 1 240 38 view .LVU257
 974 0418 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 975              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 976              		.loc 1 240 51 view .LVU258
 977 041c 0310A0E1 		mov	r1, r3	@, _35
 978 0420 0500A0E1 		mov	r0, r5	@, prephitmp_229
 979              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 980              		.loc 1 240 68 view .LVU259
 981 0424 00308DE5 		str	r3, [sp]	@ _35, %sfp
 982              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 983              		.loc 1 240 51 view .LVU260
 984 0428 FEFFFFEB 		bl	__aeabi_idiv		@
 985              	.LVL54:
 986              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 987              		.loc 1 240 5 view .LVU261
 988 042c 000050E3 		cmp	r0, #0	@,
 989 0430 7700000A 		beq	.L51		@,
 990 0434 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 991              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 992              		.loc 1 240 12 view .LVU262
 993 0438 0030A0E3 		mov	r3, #0	@ yy,
 994 043c 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 995              	.LVL55:
 996              	.L60:
 241:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 242:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 243:armwave.c     **** 
 244:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 997              		.loc 1 244 9 is_stmt 1 discriminator 3 view .LVU263
 998 0440 D020CDE1 		ldrd	r2, [sp]	@, %sfp
 999              	.LBB10:
 1000              	.LBB11:
 1001              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1002              		.loc 1 71 52 is_stmt 0 discriminator 3 view .LVU264
 1003 0444 400098E5 		ldr	r0, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1004              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1005              		.loc 1 79 5 discriminator 3 view .LVU265
 1006 0448 000054E3 		cmp	r4, #0	@ prephitmp_239,
 1007              	.LBE11:
 1008              	.LBE10:
 1009              	@ armwave.c:244:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1010              		.loc 1 244 9 discriminator 3 view .LVU266
 1011 044c 930202E0 		mul	r2, r3, r2	@ _5, yy, _35
 1012              	.LVL56:
 1013              	.LBB13:
 1014              	.LBI10:
  62:armwave.c     **** {
 1015              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU267
 1016              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1017              		.loc 1 64 5 discriminator 3 view .LVU268
  65:armwave.c     ****     uint8_t *wave_base;
 1018              		.loc 1 65 5 discriminator 3 view .LVU269
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1019              		.loc 1 66 5 discriminator 3 view .LVU270
  67:armwave.c     ****     uint8_t *write_buffer;
 1020              		.loc 1 67 5 discriminator 3 view .LVU271
  68:armwave.c     **** 
 1021              		.loc 1 68 5 discriminator 3 view .LVU272
  71:armwave.c     **** 
 1022              		.loc 1 71 5 discriminator 3 view .LVU273
 1023              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1024              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU274
 1025 0450 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1026              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1027              		.loc 1 71 40 discriminator 3 view .LVU275
 1028 0454 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1029              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1030              		.loc 1 71 65 discriminator 3 view .LVU276
 1031 0458 930203E0 		mul	r3, r3, r2	@ tmp239, g_armwave_state.cmp_x_bitdepth_scale, _5
 1032              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1033              		.loc 1 71 105 discriminator 3 view .LVU277
 1034 045c 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp239,
 1035              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1036              		.loc 1 71 52 discriminator 3 view .LVU278
 1037 0460 900300E0 		mul	r0, r0, r3	@ tmp243, g_armwave_state.bitdepth_height, tmp241
 1038 0464 8000A0E1 		lsl	r0, r0, #1	@ _23, tmp243,
 1039              	.LVL57:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1040              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU279
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1041              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU280
 1042 0468 610000DA 		ble	.L53		@,
 1043              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1044              		.loc 1 79 11 view .LVU281
 1045 046c 0070A0E3 		mov	r7, #0	@ w,
 1046 0470 043042E2 		sub	r3, r2, #4	@ _32, _5,
 1047 0474 08308DE5 		str	r3, [sp, #8]	@ _32, %sfp
 1048              	.LVL58:
 1049              	.L59:
  80:armwave.c     **** 
 1050              		.loc 1 80 9 is_stmt 1 view .LVU282
 1051              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1052              		.loc 1 84 9 is_stmt 0 view .LVU283
 1053 0478 00209DE5 		ldr	r2, [sp]	@ _35, %sfp
 1054              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1055              		.loc 1 80 64 view .LVU284
 1056 047c 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1057              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1058              		.loc 1 84 9 view .LVU285
 1059 0480 000052E3 		cmp	r2, #0	@ _35,
 1060              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1061              		.loc 1 80 36 view .LVU286
 1062 0484 142098E5 		ldr	r2, [r8, #20]	@ _24, g_armwave_state.wave_buffer
 1063              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1064              		.loc 1 80 64 view .LVU287
 1065 0488 930703E0 		mul	r3, r3, r7	@ _28, g_armwave_state.wave_stride, w
 1066              	.LVL59:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1067              		.loc 1 84 9 is_stmt 1 view .LVU288
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1068              		.loc 1 84 9 is_stmt 0 view .LVU289
 1069 048c 5200000A 		beq	.L54		@,
 1070 0490 08C09DE5 		ldr	ip, [sp, #8]	@ _32, %sfp
 1071 0494 0C3083E0 		add	r3, r3, ip	@ tmp248, _28, _32
 1072              	.LVL60:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1073              		.loc 1 84 9 view .LVU290
 1074 0498 036082E0 		add	r6, r2, r3	@ ivtmp.67, _24, tmp248
 1075              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1076              		.loc 1 84 16 view .LVU291
 1077 049c 00C0A0E3 		mov	ip, #0	@ yy,
 1078              	.LVL61:
 1079              	.L58:
  87:armwave.c     **** 
 1080              		.loc 1 87 13 is_stmt 1 view .LVU292
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1081              		.loc 1 101 17 view .LVU293
 106:armwave.c     ****                 word >>= 8;
 1082              		.loc 1 106 17 view .LVU294
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1083              		.loc 1 101 17 view .LVU295
 106:armwave.c     ****                 word >>= 8;
 1084              		.loc 1 106 17 view .LVU296
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1085              		.loc 1 101 17 view .LVU297
 106:armwave.c     ****                 word >>= 8;
 1086              		.loc 1 106 17 view .LVU298
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1087              		.loc 1 101 17 view .LVU299
 106:armwave.c     ****                 word >>= 8;
 1088              		.loc 1 106 17 view .LVU300
 1089              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1090              		.loc 1 87 18 is_stmt 0 view .LVU301
 1091 04a0 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _272, offset: 0B]
 1092              	.LVL62:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1093              		.loc 1 89 13 is_stmt 1 view .LVU302
  91:armwave.c     ****                 
 1094              		.loc 1 91 17 view .LVU303
  94:armwave.c     ****                     continue;
 1095              		.loc 1 94 17 view .LVU304
 1096              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1097              		.loc 1 102 34 is_stmt 0 view .LVU305
 1098 04a4 01A08CE2 		add	r10, ip, #1	@ tmp278, yy,
 1099              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1100              		.loc 1 94 20 view .LVU306
 1101 04a8 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1102 04ac 0120A003 		moveq	r2, #1	@ tmp250,
 1103 04b0 0020A013 		movne	r2, #0	@ tmp250,
 1104              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1105              		.loc 1 94 19 view .LVU307
 1106 04b4 FF0059E3 		cmp	r9, #255	@ scale_value,
 1107 04b8 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 1108              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1109              		.loc 1 107 22 view .LVU308
 1110 04bc 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1111              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1112              		.loc 1 94 19 view .LVU309
 1113 04c0 000052E3 		cmp	r2, #0	@ tmp255,
 1114              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1115              		.loc 1 102 34 view .LVU310
 1116 04c4 02508CE2 		add	r5, ip, #2	@ tmp300, yy,
 1117              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1118              		.loc 1 106 47 view .LVU311
 1119 04c8 00B089E0 		add	fp, r9, r0	@ tmp263, scale_value, _23
 1120              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1121              		.loc 1 107 22 view .LVU312
 1122 04cc 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1123 04d0 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1124              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1125              		.loc 1 94 19 view .LVU313
 1126 04d4 3B00001A 		bne	.L62		@,
 1127              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1128              		.loc 1 102 34 view .LVU314
 1129 04d8 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1130              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1131              		.loc 1 106 47 view .LVU315
 1132 04dc 40E098E5 		ldr	lr, [r8, #64]	@ tmp362, g_armwave_state.bitdepth_height
 1133              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1134              		.loc 1 94 20 view .LVU316
 1135 04e0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1136              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1137              		.loc 1 102 34 view .LVU317
 1138 04e4 920C02E0 		mul	r2, r2, ip	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1139              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1140              		.loc 1 106 47 view .LVU318
 1141 04e8 009084E0 		add	r9, r4, r0	@ tmp285, scale_value, _23
 1142              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1143              		.loc 1 102 74 view .LVU319
 1144 04ec 2228A0E1 		lsr	r2, r2, #16	@ tmp259, tmp257,
 1145              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1146              		.loc 1 106 47 view .LVU320
 1147 04f0 9EB222E0 		mla	r2, lr, r2, fp	@ tmp264, tmp362, tmp259, tmp263
 1148              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1149              		.loc 1 94 20 view .LVU321
 1150 04f4 01B0A003 		moveq	fp, #1	@ tmp271,
 1151 04f8 00B0A013 		movne	fp, #0	@ tmp271,
 1152              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1153              		.loc 1 94 19 view .LVU322
 1154 04fc FF0054E3 		cmp	r4, #255	@ scale_value,
 1155 0500 0B40A011 		movne	r4, fp	@, tmp276, tmp271
 1156 0504 01408B03 		orreq	r4, fp, #1	@,, tmp276, tmp271
 1157              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1158              		.loc 1 106 47 view .LVU323
 1159 0508 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_91, *_91
 1160              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1161              		.loc 1 94 19 view .LVU324
 1162 050c 000054E3 		cmp	r4, #0	@ tmp276,
 1163              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1164              		.loc 1 106 47 view .LVU325
 1165 0510 01B08BE2 		add	fp, fp, #1	@ tmp267, *_91,
 1166 0514 02B0C1E7 		strb	fp, [r1, r2]	@ tmp267, *_91
 1167              	.LVL63:
 107:armwave.c     ****             }
 1168              		.loc 1 107 17 is_stmt 1 view .LVU326
  91:armwave.c     ****                 
 1169              		.loc 1 91 17 view .LVU327
  94:armwave.c     ****                     continue;
 1170              		.loc 1 94 17 view .LVU328
 1171              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1172              		.loc 1 94 19 is_stmt 0 view .LVU329
 1173 0518 2A00001A 		bne	.L62		@,
 1174              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1175              		.loc 1 102 34 view .LVU330
 1176 051c 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1177              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1178              		.loc 1 102 99 view .LVU331
 1179 0520 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1180              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1181              		.loc 1 94 20 view .LVU332
 1182 0524 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1183              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1184              		.loc 1 102 34 view .LVU333
 1185 0528 920A0AE0 		mul	r10, r2, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1186              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1187              		.loc 1 94 20 view .LVU334
 1188 052c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1189 0530 0120A003 		moveq	r2, #1	@ tmp293,
 1190              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1191              		.loc 1 102 74 view .LVU335
 1192 0534 2AA8A0E1 		lsr	r10, r10, #16	@ tmp281, tmp279,
 1193              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1194              		.loc 1 94 20 view .LVU336
 1195 0538 0020A013 		movne	r2, #0	@ tmp293,
 1196              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1197              		.loc 1 106 47 view .LVU337
 1198 053c 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp286, g_armwave_state.bitdepth_height, tmp281, tmp285
 1199 0540 00408EE0 		add	r4, lr, r0	@ tmp307, scale_value, _23
 1200              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1201              		.loc 1 94 19 view .LVU338
 1202 0544 FF005EE3 		cmp	lr, #255	@ scale_value,
 1203 0548 02E0A011 		movne	lr, r2	@, tmp298, tmp293
 1204 054c 01E08203 		orreq	lr, r2, #1	@,, tmp298, tmp293
 1205              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1206              		.loc 1 106 47 view .LVU339
 1207 0550 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_122, *_122
 1208              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1209              		.loc 1 94 19 view .LVU340
 1210 0554 00005EE3 		cmp	lr, #0	@ tmp298,
 1211              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1212              		.loc 1 106 47 view .LVU341
 1213 0558 012082E2 		add	r2, r2, #1	@ tmp289, *_122,
 1214 055c 0920C1E7 		strb	r2, [r1, r9]	@ tmp289, *_122
 107:armwave.c     ****             }
 1215              		.loc 1 107 17 is_stmt 1 view .LVU342
 1216              	.LVL64:
  91:armwave.c     ****                 
 1217              		.loc 1 91 17 view .LVU343
  94:armwave.c     ****                     continue;
 1218              		.loc 1 94 17 view .LVU344
 1219              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1220              		.loc 1 94 19 is_stmt 0 view .LVU345
 1221 0560 1800001A 		bne	.L62		@,
 1222              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1223              		.loc 1 102 34 view .LVU346
 1224 0564 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1225              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1226              		.loc 1 94 20 view .LVU347
 1227 0568 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1228              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1229              		.loc 1 106 47 view .LVU348
 1230 056c 032080E0 		add	r2, r0, r3	@ tmp328, _23, word
 1231              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1232              		.loc 1 102 34 view .LVU349
 1233 0570 9E0505E0 		mul	r5, lr, r5	@ tmp301, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 1234              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1235              		.loc 1 102 99 view .LVU350
 1236 0574 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1237              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1238              		.loc 1 102 74 view .LVU351
 1239 0578 2558A0E1 		lsr	r5, r5, #16	@ tmp303, tmp301,
 1240              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1241              		.loc 1 106 47 view .LVU352
 1242 057c 9E4525E0 		mla	r5, lr, r5, r4	@ tmp308, g_armwave_state.bitdepth_height, tmp303, tmp307
 1243              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1244              		.loc 1 94 20 view .LVU353
 1245 0580 01E0A003 		moveq	lr, #1	@ tmp314,
 1246 0584 00E0A013 		movne	lr, #0	@ tmp314,
 1247              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1248              		.loc 1 94 19 view .LVU354
 1249 0588 FF0053E3 		cmp	r3, #255	@ word,
 1250 058c 01E08E03 		orreq	lr, lr, #1	@,, tmp319, tmp314
 1251              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1252              		.loc 1 106 47 view .LVU355
 1253 0590 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_153, *_153
 1254              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1255              		.loc 1 94 19 view .LVU356
 1256 0594 00005EE3 		cmp	lr, #0	@ tmp319,
 1257              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1258              		.loc 1 106 47 view .LVU357
 1259 0598 013083E2 		add	r3, r3, #1	@ tmp311, *_153,
 1260 059c 0530C1E7 		strb	r3, [r1, r5]	@ tmp311, *_153
 107:armwave.c     ****             }
 1261              		.loc 1 107 17 is_stmt 1 view .LVU358
 1262              	.LVL65:
  91:armwave.c     ****                 
 1263              		.loc 1 91 17 view .LVU359
  94:armwave.c     ****                     continue;
 1264              		.loc 1 94 17 view .LVU360
 1265              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1266              		.loc 1 94 19 is_stmt 0 view .LVU361
 1267 05a0 0800001A 		bne	.L62		@,
 1268              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1269              		.loc 1 102 34 view .LVU362
 1270 05a4 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1271 05a8 03408CE2 		add	r4, ip, #3	@ tmp321, yy,
 1272              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1273              		.loc 1 102 99 view .LVU363
 1274 05ac 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1275              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1276              		.loc 1 102 34 view .LVU364
 1277 05b0 930403E0 		mul	r3, r3, r4	@ tmp322, g_armwave_state.cmp_x_bitdepth_scale, tmp321
 1278              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1279              		.loc 1 102 74 view .LVU365
 1280 05b4 2338A0E1 		lsr	r3, r3, #16	@ tmp324, tmp322,
 1281              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1282              		.loc 1 106 47 view .LVU366
 1283 05b8 9E2323E0 		mla	r3, lr, r3, r2	@ tmp329, g_armwave_state.bitdepth_height, tmp324, tmp328
 1284 05bc 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_184, *_184
 1285 05c0 012082E2 		add	r2, r2, #1	@ tmp332, *_184,
 1286 05c4 0320C1E7 		strb	r2, [r1, r3]	@ tmp332, *_184
 107:armwave.c     ****             }
 1287              		.loc 1 107 17 is_stmt 1 view .LVU367
 1288              	.LVL66:
 1289              	.L62:
 1290              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1291              		.loc 1 84 9 is_stmt 0 view .LVU368
 1292 05c8 00309DE5 		ldr	r3, [sp]	@ _35, %sfp
 1293              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1294              		.loc 1 84 37 view .LVU369
 1295 05cc 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 1296              	.LVL67:
 1297              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1298              		.loc 1 84 9 view .LVU370
 1299 05d0 0C0053E1 		cmp	r3, ip	@ _35, yy
 1300 05d4 B1FFFF8A 		bhi	.L58		@,
 1301 05d8 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 1302              	.LVL68:
 1303              	.L54:
 1304              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1305              		.loc 1 79 44 view .LVU371
 1306 05dc 017087E2 		add	r7, r7, #1	@ w, w,
 1307              	.LVL69:
 1308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1309              		.loc 1 79 5 view .LVU372
 1310 05e0 040057E1 		cmp	r7, r4	@ w, prephitmp_239
 1311 05e4 A3FFFFBA 		blt	.L59		@,
 1312 05e8 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 1313 05ec 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 1314 05f0 00308DE5 		str	r3, [sp]	@ _35, %sfp
 1315              	.LVL70:
 1316              	.L53:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1317              		.loc 1 79 5 view .LVU373
 1318              	.LBE12:
 1319              	.LBE13:
 245:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1320              		.loc 1 245 9 is_stmt 1 discriminator 3 view .LVU374
 246:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1321              		.loc 1 246 9 discriminator 3 view .LVU375
 1322              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1323              		.loc 1 240 51 is_stmt 0 discriminator 3 view .LVU376
 1324 05f4 00109DE5 		ldr	r1, [sp]	@, %sfp
 1325              	.LVL71:
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1326              		.loc 1 240 51 discriminator 3 view .LVU377
 1327 05f8 0500A0E1 		mov	r0, r5	@, prephitmp_229
 1328 05fc FEFFFFEB 		bl	__aeabi_idiv		@
 1329              	.LVL72:
 1330              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1331              		.loc 1 240 86 discriminator 3 view .LVU378
 1332 0600 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1333 0604 013083E2 		add	r3, r3, #1	@ yy, yy,
 1334 0608 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1335              	.LVL73:
 1336              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1337              		.loc 1 240 5 discriminator 3 view .LVU379
 1338 060c 030050E1 		cmp	r0, r3	@, yy
 1339 0610 8AFFFF8A 		bhi	.L60		@,
 1340              	.LVL74:
 1341              	.L51:
 1342              	@ armwave.c:250: }
 247:armwave.c     ****     }
 248:armwave.c     **** 
 249:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 250:armwave.c     **** }
 1343              		.loc 1 250 1 view .LVU380
 1344 0614 14D08DE2 		add	sp, sp, #20	@,,
 1345              		.cfi_def_cfa_offset 36
 1346              		@ sp needed	@
 1347 0618 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1348              	.L71:
 1349              		.align	2
 1350              	.L70:
 1351 061c 00000000 		.word	g_armwave_state
 1352              		.cfi_endproc
 1353              	.LFE61:
 1355              		.align	2
 1356              		.global	armwave_setup_render
 1357              		.syntax unified
 1358              		.arm
 1359              		.fpu vfp
 1361              	armwave_setup_render:
 1362              	.LVL75:
 1363              	.LFB62:
 251:armwave.c     **** 
 252:armwave.c     **** /*
 253:armwave.c     ****  * Setup the renderer with passed parameters.
 254:armwave.c     ****  */
 255:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 256:armwave.c     **** {
 1364              		.loc 1 256 1 is_stmt 1 view -0
 1365              		.cfi_startproc
 1366              		@ args = 12, pretend = 0, frame = 0
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 257:armwave.c     ****     uint32_t length, xx;
 1368              		.loc 1 257 5 view .LVU382
 258:armwave.c     ****     float points_per_pixel;
 1369              		.loc 1 258 5 view .LVU383
 259:armwave.c     **** 
 260:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1370              		.loc 1 260 5 view .LVU384
 1371              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1372              		.loc 1 256 1 is_stmt 0 view .LVU385
 1373 0620 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1374              		.cfi_def_cfa_offset 28
 1375              		.cfi_offset 4, -28
 1376              		.cfi_offset 5, -24
 1377              		.cfi_offset 6, -20
 1378              		.cfi_offset 7, -16
 1379              		.cfi_offset 8, -12
 1380              		.cfi_offset 9, -8
 1381              		.cfi_offset 14, -4
 1382 0624 028B2DED 		vpush.64	{d8}	@
 1383              		.cfi_def_cfa_offset 36
 1384              		.cfi_offset 80, -36
 1385              		.cfi_offset 81, -32
 1386 0628 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1387 062c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1388 0630 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1389 0634 14D04DE2 		sub	sp, sp, #20	@,,
 1390              		.cfi_def_cfa_offset 56
 1391              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1392              		.loc 1 256 1 view .LVU386
 1393 0638 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1394 063c D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1395 0640 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1396              	@ armwave.c:260:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1397              		.loc 1 260 5 view .LVU387
 1398 0644 00308DE5 		str	r3, [sp]	@ wave_stride,
 1399 0648 F460CDE1 		strd	r6, [sp, #4]	@,,
 1400 064c 0230A0E1 		mov	r3, r2	@, waves_max
 1401              	.LVL76:
 1402              		.loc 1 260 5 view .LVU388
 1403 0650 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1404 0654 0120A0E1 		mov	r2, r1	@, end_point
 1405              	.LVL77:
 1406              		.loc 1 260 5 view .LVU389
 1407 0658 0010A0E1 		mov	r1, r0	@, start_point
 1408              	.LVL78:
 1409              		.loc 1 260 5 view .LVU390
 1410 065c DC019FE5 		ldr	r0, .L86+12	@,
 1411              	.LVL79:
 1412              		.loc 1 260 5 view .LVU391
 1413 0660 FEFFFFEB 		bl	printf		@
 1414              	.LVL80:
 261:armwave.c     **** 
 262:armwave.c     ****     // TODO these asserts should instead raise PyExc
 263:armwave.c     ****     assert(start_point < end_point);
 1415              		.loc 1 263 5 is_stmt 1 view .LVU392
 1416 0664 050054E1 		cmp	r4, r5	@ start_point, end_point
 1417 0668 6200002A 		bcs	.L83		@,
 264:armwave.c     **** 
 265:armwave.c     ****     /*
 266:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 267:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 268:armwave.c     **** 
 269:armwave.c     ****     if(target_height == 256) {
 270:armwave.c     ****         g_armwave_state.row_shift = 8;
 271:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 272:armwave.c     ****     } else if(target_height == 512) {
 273:armwave.c     ****         g_armwave_state.row_shift = 9;
 274:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 275:armwave.c     ****     } else if(target_height == 1024) {
 276:armwave.c     ****         g_armwave_state.row_shift = 10;
 277:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 278:armwave.c     ****     } else if(target_height == 2048) {
 279:armwave.c     ****         g_armwave_state.row_shift = 11;
 280:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 281:armwave.c     ****     }
 282:armwave.c     ****     */
 283:armwave.c     **** 
 284:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 285:armwave.c     ****     g_armwave_state.xstride = target_height;
 1418              		.loc 1 285 5 view .LVU393
 1419              	@ armwave.c:296:     g_armwave_state.wave_length = end_point - start_point;
 286:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 287:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 288:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 289:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 290:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 291:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 292:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 293:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 294:armwave.c     ****     g_armwave_state.target_width = target_width;
 295:armwave.c     ****     g_armwave_state.target_height = target_height;
 296:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1420              		.loc 1 296 45 is_stmt 0 view .LVU394
 1421 066c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1422              	.LVL81:
 1423              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1424              		.loc 1 286 49 view .LVU395
 1425 0670 6F6A9FED 		vldr.32	s12, .L86	@ tmp175,
 1426              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 297:armwave.c     **** 
 298:armwave.c     ****     // Calculate compound scaler
 299:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 300:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1427              		.loc 1 300 48 view .LVU396
 1428 0674 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1429              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1430              		.loc 1 300 79 view .LVU397
 1431 0678 6E6ADFED 		vldr.32	s13, .L86+4	@ tmp199,
 1432              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1433              		.loc 1 293 90 view .LVU398
 1434 067c 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1435              	@ armwave.c:285:     g_armwave_state.xstride = target_height;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1436              		.loc 1 285 29 view .LVU399
 1437 0680 BC419FE5 		ldr	r4, .L86+16	@ tmp243,
 1438              	.LVL82:
 1439              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1440              		.loc 1 300 48 view .LVU400
 1441 0684 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1442              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1443              		.loc 1 286 49 view .LVU401
 1444 0688 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1445              	@ armwave.c:291:     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1446              		.loc 1 291 42 view .LVU402
 1447 068c 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1448              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1449              		.loc 1 293 95 view .LVU403
 1450 0690 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1451              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1452              		.loc 1 286 49 view .LVU404
 1453 0694 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1454              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1455              		.loc 1 300 48 view .LVU405
 1456 0698 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1457              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 301:armwave.c     **** 
 302:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1458              		.loc 1 302 5 view .LVU406
 1459 069c 04508DE5 		str	r5, [sp, #4]	@ _13,
 1460 06a0 00608DE5 		str	r6, [sp]	@ target_width,
 1461              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1462              		.loc 1 293 95 view .LVU407
 1463 06a4 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1464              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1465              		.loc 1 300 48 view .LVU408
 1466 06a8 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1467              	@ armwave.c:285:     g_armwave_state.xstride = target_height;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1468              		.loc 1 285 29 view .LVU409
 1469 06ac 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1470              		.loc 1 286 5 is_stmt 1 view .LVU410
 1471              	@ armwave.c:295:     g_armwave_state.target_height = target_height;
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1472              		.loc 1 295 35 is_stmt 0 view .LVU411
 1473 06b0 F865C4E1 		strd	r6, [r4, #88]	@, tmp243,
 1474              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1475              		.loc 1 302 5 view .LVU412
 1476 06b4 0118A0E3 		mov	r1, #65536	@ tmp202,
 1477              	@ armwave.c:292:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1478              		.loc 1 292 37 view .LVU413
 1479 06b8 017CA0E3 		mov	r7, #256	@ tmp185,
 1480              	@ armwave.c:288:     g_armwave_state.wave_stride = wave_stride;
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1481              		.loc 1 288 33 view .LVU414
 1482 06bc 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1483              	@ armwave.c:289:     g_armwave_state.waves_max = waves_max;
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1484              		.loc 1 289 31 view .LVU415
 1485 06c0 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1486              	@ armwave.c:290:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1487              		.loc 1 290 27 view .LVU416
 1488 06c4 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1489              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1490              		.loc 1 300 48 view .LVU417
 1491 06c8 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1492              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1493              		.loc 1 302 5 view .LVU418
 1494 06cc 08108DE5 		str	r1, [sp, #8]	@ tmp202,
 1495 06d0 70019FE5 		ldr	r0, .L86+20	@,
 1496 06d4 0310A0E1 		mov	r1, r3	@, tmp190
 1497              	@ armwave.c:291:     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1498              		.loc 1 291 26 view .LVU419
 1499 06d8 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1500              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1501              		.loc 1 293 34 view .LVU420
 1502 06dc 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1503              	@ armwave.c:296:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     **** 
 1504              		.loc 1 296 33 view .LVU421
 1505 06e0 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1506              	@ armwave.c:292:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1507              		.loc 1 292 37 view .LVU422
 1508 06e4 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1509              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1510              		.loc 1 286 49 view .LVU423
 1511 06e8 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1512              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1513              		.loc 1 300 79 view .LVU424
 1514 06ec A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1515              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1516              		.loc 1 299 42 view .LVU425
 1517 06f0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1518              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1519              		.loc 1 286 33 view .LVU426
 1520 06f4 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1521              		.loc 1 287 5 is_stmt 1 view .LVU427
 1522              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1523              		.loc 1 299 42 is_stmt 0 view .LVU428
 1524 06f8 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1525              	@ armwave.c:287:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1526              		.loc 1 287 30 view .LVU429
 1527 06fc C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1528              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1529              		.loc 1 302 5 view .LVU430
 1530 0700 0C30A0E1 		mov	r3, ip	@, _19
 1531 0704 0C20A0E1 		mov	r2, ip	@, tmp3
 1532              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1533              		.loc 1 299 42 view .LVU431
 1534 0708 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1535              	@ armwave.c:287:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1536              		.loc 1 287 30 view .LVU432
 1537 070c 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1538              		.loc 1 288 5 is_stmt 1 view .LVU433
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1539              		.loc 1 289 5 view .LVU434
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1540              		.loc 1 290 5 view .LVU435
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1541              		.loc 1 291 5 view .LVU436
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1542              		.loc 1 292 5 view .LVU437
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1543              		.loc 1 293 5 view .LVU438
 294:armwave.c     ****     g_armwave_state.target_height = target_height;
 1544              		.loc 1 294 5 view .LVU439
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1545              		.loc 1 295 5 view .LVU440
 296:armwave.c     **** 
 1546              		.loc 1 296 5 view .LVU441
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1547              		.loc 1 299 5 view .LVU442
 1548              		.loc 1 302 5 view .LVU443
 1549 0710 FEFFFFEB 		bl	printf		@
 1550              	.LVL83:
 303:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 304:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 305:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 306:armwave.c     **** 
 307:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 308:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 309:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 310:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1551              		.loc 1 310 5 view .LVU444
 1552              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 311:armwave.c     **** 
 312:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1553              		.loc 1 312 23 is_stmt 0 view .LVU445
 1554 0714 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1555              	@ armwave.c:310:     g_armwave_state.slice_height = 256; // 64;  
 310:armwave.c     **** 
 1556              		.loc 1 310 34 view .LVU446
 1557 0718 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1558              		.loc 1 312 5 is_stmt 1 view .LVU447
 1559              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 1560              		.loc 1 312 7 is_stmt 0 view .LVU448
 1561 071c 000050E3 		cmp	r0, #0	@ _20,
 1562 0720 0000000A 		beq	.L74		@,
 313:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1563              		.loc 1 313 9 is_stmt 1 view .LVU449
 1564 0724 FEFFFFEB 		bl	free		@
 1565              	.LVL84:
 1566              	.L74:
 314:armwave.c     **** 
 315:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1567              		.loc 1 315 5 view .LVU450
 1568              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1569              		.loc 1 315 34 is_stmt 0 view .LVU451
 1570 0728 0110A0E3 		mov	r1, #1	@,
 1571 072c 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1572 0730 FEFFFFEB 		bl	calloc		@
 1573              	.LVL85:
 1574              	@ armwave.c:317:     assert(g_armwave_state.ch1_buffer != NULL);
 316:armwave.c     **** 
 317:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1575              		.loc 1 317 5 view .LVU452
 1576 0734 000050E3 		cmp	r0, #0	@ _23,
 1577              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 315:armwave.c     **** 
 1578              		.loc 1 315 34 view .LVU453
 1579 0738 0070A0E1 		mov	r7, r0	@ _23,
 1580              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 315:armwave.c     **** 
 1581              		.loc 1 315 32 view .LVU454
 1582 073c 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1583              		.loc 1 317 5 is_stmt 1 view .LVU455
 1584 0740 3600000A 		beq	.L84		@,
 318:armwave.c     **** 
 319:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 320:armwave.c     ****     length = end_point - start_point;
 1585              		.loc 1 320 5 view .LVU456
 1586              	.LVL86:
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1587              		.loc 1 321 5 view .LVU457
 1588              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 1589              		.loc 1 321 34 is_stmt 0 view .LVU458
 1590 0744 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1591              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 1592              		.loc 1 321 22 view .LVU459
 1593 0748 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1594              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1595              		.loc 1 322 60 view .LVU460
 1596 074c 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp254, g_armwave_state.slice_height
 1597              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1598              		.loc 1 323 40 view .LVU461
 1599 0750 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1600              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1601              		.loc 1 321 34 view .LVU462
 1602 0754 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 1603              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1604              		.loc 1 321 22 view .LVU463
 1605 0758 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp215, _13
 1606              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1607              		.loc 1 322 60 view .LVU464
 1608 075c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp219, tmp254
 1609              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1610              		.loc 1 321 22 view .LVU465
 1611 0760 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp215, tmp216
 1612              	.LVL87:
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1613              		.loc 1 322 5 is_stmt 1 view .LVU466
 1614              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1615              		.loc 1 322 60 is_stmt 0 view .LVU467
 1616 0764 087A67EE 		vmul.f32	s15, s14, s16	@ tmp221, tmp219, points_per_pixel
 1617              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1618              		.loc 1 322 41 view .LVU468
 1619 0768 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp222, tmp221
 1620 076c 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp222, g_armwave_state.slice_record_height
 1621              		.loc 1 323 5 is_stmt 1 view .LVU469
 1622              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1623              		.loc 1 323 40 is_stmt 0 view .LVU470
 1624 0770 FEFFFFEB 		bl	malloc		@
 1625              	.LVL88:
 1626              	@ armwave.c:325:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 324:armwave.c     **** 
 325:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1627              		.loc 1 325 5 view .LVU471
 1628 0774 000050E3 		cmp	r0, #0	@ _31,
 1629              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1630              		.loc 1 323 40 view .LVU472
 1631 0778 0060A0E1 		mov	r6, r0	@ _31,
 1632              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1633              		.loc 1 323 38 view .LVU473
 1634 077c 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1635              		.loc 1 325 5 is_stmt 1 view .LVU474
 1636 0780 2100000A 		beq	.L85		@,
 1637              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 326:armwave.c     **** 
 327:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 328:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1638              		.loc 1 328 54 is_stmt 0 view .LVU475
 1639 0784 2C7ADFED 		vldr.32	s15, .L86+8	@ tmp231,
 1640 0788 020040E2 		sub	r0, r0, #2	@ ivtmp.79, _31,
 1641              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1642              		.loc 1 327 12 view .LVU476
 1643 078c 0030A0E3 		mov	r3, #0	@ xx,
 1644              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1645              		.loc 1 328 54 view .LVU477
 1646 0790 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp231, points_per_pixel
 1647              	.L77:
 1648              	.LVL89:
 1649              		.loc 1 328 9 is_stmt 1 discriminator 3 view .LVU478
 1650              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1651              		.loc 1 328 74 is_stmt 0 discriminator 3 view .LVU479
 1652 0794 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1653              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1654              		.loc 1 327 32 discriminator 3 view .LVU480
 1655 0798 013083E2 		add	r3, r3, #1	@ xx, xx,
 1656              	.LVL90:
 1657              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1658              		.loc 1 327 5 discriminator 3 view .LVU481
 1659 079c 030055E1 		cmp	r5, r3	@ _13, xx
 1660              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1661              		.loc 1 328 74 discriminator 3 view .LVU482
 1662 07a0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp232, xx
 1663 07a4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp233, tmp232, _32
 1664              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1665              		.loc 1 328 46 discriminator 3 view .LVU483
 1666 07a8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp234, tmp233
 1667 07ac 902A17EE 		vmov	r2, s15	@ int	@ tmp234, tmp234
 1668 07b0 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp234, MEM[base: _101, offset: 0B]
 1669              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1670              		.loc 1 327 5 discriminator 3 view .LVU484
 1671 07b4 F6FFFF1A 		bne	.L77		@,
 329:armwave.c     **** 
 330:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 331:armwave.c     ****     }
 332:armwave.c     **** 
 333:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1672              		.loc 1 333 5 is_stmt 1 view .LVU485
 1673              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1674              		.loc 1 333 34 is_stmt 0 view .LVU486
 1675 07b8 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1676 07bc 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1677 07c0 FEFFFFEB 		bl	malloc		@
 1678              	.LVL91:
 1679              	@ armwave.c:335:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 334:armwave.c     **** 
 335:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1680              		.loc 1 335 5 view .LVU487
 1681 07c4 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1682 07c8 0620A0E1 		mov	r2, r6	@, _31
 1683 07cc 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1684 07d0 0710A0E1 		mov	r1, r7	@, _23
 1685              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333:armwave.c     **** 
 1686              		.loc 1 333 34 view .LVU488
 1687 07d4 00C0A0E1 		mov	ip, r0	@ tmp238,
 1688              	@ armwave.c:335:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1689              		.loc 1 335 5 view .LVU489
 1690 07d8 0030A0E1 		mov	r3, r0	@, tmp238
 1691              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333:armwave.c     **** 
 1692              		.loc 1 333 32 view .LVU490
 1693 07dc 68C084E5 		str	ip, [r4, #104]	@ tmp238, g_armwave_state.out_pixbuf
 1694              		.loc 1 335 5 is_stmt 1 view .LVU491
 1695 07e0 64009FE5 		ldr	r0, .L86+24	@,
 1696 07e4 FEFFFFEB 		bl	printf		@
 1697              	.LVL92:
 336:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 337:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 338:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 339:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 340:armwave.c     **** 
 341:armwave.c     ****     malloc_stats();
 1698              		.loc 1 341 5 view .LVU492
 1699              	@ armwave.c:342: }
 342:armwave.c     **** }
 1700              		.loc 1 342 1 is_stmt 0 view .LVU493
 1701 07e8 14D08DE2 		add	sp, sp, #20	@,,
 1702              		.cfi_remember_state
 1703              		.cfi_def_cfa_offset 36
 1704              		@ sp needed	@
 1705 07ec 028BBDEC 		vldm	sp!, {d8}	@
 1706              		.cfi_restore 80
 1707              		.cfi_restore 81
 1708              		.cfi_def_cfa_offset 28
 1709              	.LVL93:
 1710              		.loc 1 342 1 view .LVU494
 1711 07f0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1712              		.cfi_restore 14
 1713              		.cfi_restore 9
 1714              		.cfi_restore 8
 1715              		.cfi_restore 7
 1716              		.cfi_restore 6
 1717              		.cfi_restore 5
 1718              		.cfi_restore 4
 1719              		.cfi_def_cfa_offset 0
 1720              	.LVL94:
 1721              	@ armwave.c:341:     malloc_stats();
 341:armwave.c     **** }
 1722              		.loc 1 341 5 view .LVU495
 1723 07f4 FEFFFFEA 		b	malloc_stats		@
 1724              	.LVL95:
 1725              	.L83:
 1726              		.cfi_restore_state
 263:armwave.c     **** 
 1727              		.loc 1 263 5 is_stmt 1 discriminator 1 view .LVU496
 1728 07f8 50309FE5 		ldr	r3, .L86+28	@,
 1729 07fc 50209FE5 		ldr	r2, .L86+32	@,
 1730 0800 50109FE5 		ldr	r1, .L86+36	@,
 1731 0804 50009FE5 		ldr	r0, .L86+40	@,
 1732 0808 FEFFFFEB 		bl	__assert_fail		@
 1733              	.LVL96:
 1734              	.L85:
 325:armwave.c     **** 
 1735              		.loc 1 325 5 discriminator 1 view .LVU497
 1736 080c 3C309FE5 		ldr	r3, .L86+28	@,
 1737 0810 48209FE5 		ldr	r2, .L86+44	@,
 1738 0814 3C109FE5 		ldr	r1, .L86+36	@,
 1739 0818 44009FE5 		ldr	r0, .L86+48	@,
 1740 081c FEFFFFEB 		bl	__assert_fail		@
 1741              	.LVL97:
 1742              	.L84:
 317:armwave.c     **** 
 1743              		.loc 1 317 5 discriminator 1 view .LVU498
 1744 0820 28309FE5 		ldr	r3, .L86+28	@,
 1745 0824 3C209FE5 		ldr	r2, .L86+52	@,
 1746 0828 28109FE5 		ldr	r1, .L86+36	@,
 1747 082c 38009FE5 		ldr	r0, .L86+56	@,
 1748 0830 FEFFFFEB 		bl	__assert_fail		@
 1749              	.LVL98:
 1750              	.L87:
 1751              		.align	2
 1752              	.L86:
 1753 0834 00007F43 		.word	1132396544
 1754 0838 00008047 		.word	1199570944
 1755 083c 0000803F 		.word	1065353216
 1756 0840 40000000 		.word	.LC4
 1757 0844 00000000 		.word	g_armwave_state
 1758 0848 84000000 		.word	.LC6
 1759 084c 34010000 		.word	.LC9
 1760 0850 1C000000 		.word	.LANCHOR0+28
 1761 0854 07010000 		.word	263
 1762 0858 20000000 		.word	.LC2
 1763 085c 6C000000 		.word	.LC5
 1764 0860 45010000 		.word	325
 1765 0864 08010000 		.word	.LC8
 1766 0868 3D010000 		.word	317
 1767 086c E4000000 		.word	.LC7
 1768              		.cfi_endproc
 1769              	.LFE62:
 1771              		.align	2
 1772              		.global	armwave_set_wave_pointer
 1773              		.syntax unified
 1774              		.arm
 1775              		.fpu vfp
 1777              	armwave_set_wave_pointer:
 1778              	.LVL99:
 1779              	.LFB63:
 343:armwave.c     **** 
 344:armwave.c     **** /*
 345:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 346:armwave.c     ****  * in the future.
 347:armwave.c     ****  */
 348:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 349:armwave.c     **** {
 1780              		.loc 1 349 1 view -0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 0, uses_anonymous_args = 0
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1784              		.loc 1 350 5 view .LVU500
 1785 0870 000050E3 		cmp	r0, #0	@ wave_buffer
 1786              		.loc 1 350 5 is_stmt 0 view .LVU501
 1787 0874 0200000A 		beq	.L93		@,
 351:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1788              		.loc 1 351 5 is_stmt 1 view .LVU502
 1789              	@ armwave.c:351:     g_armwave_state.wave_buffer = wave_buffer;
 1790              		.loc 1 351 33 is_stmt 0 view .LVU503
 1791 0878 1C309FE5 		ldr	r3, .L94	@ tmp116,
 1792 087c 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1793 0880 1EFF2FE1 		bx	lr	@
 1794              	.L93:
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1795              		.loc 1 350 5 is_stmt 1 discriminator 1 view .LVU504
 1796              	@ armwave.c:349: {
 349:armwave.c     ****     assert(wave_buffer != NULL);
 1797              		.loc 1 349 1 is_stmt 0 discriminator 1 view .LVU505
 1798 0884 10402DE9 		push	{r4, lr}	@
 1799              		.cfi_def_cfa_offset 8
 1800              		.cfi_offset 4, -8
 1801              		.cfi_offset 14, -4
 1802              	@ armwave.c:350:     assert(wave_buffer != NULL);
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1803              		.loc 1 350 5 discriminator 1 view .LVU506
 1804 0888 10309FE5 		ldr	r3, .L94+4	@,
 1805 088c 10209FE5 		ldr	r2, .L94+8	@,
 1806 0890 10109FE5 		ldr	r1, .L94+12	@,
 1807 0894 10009FE5 		ldr	r0, .L94+16	@,
 1808              	.LVL100:
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1809              		.loc 1 350 5 discriminator 1 view .LVU507
 1810 0898 FEFFFFEB 		bl	__assert_fail		@
 1811              	.LVL101:
 1812              	.L95:
 1813              		.align	2
 1814              	.L94:
 1815 089c 00000000 		.word	g_armwave_state
 1816 08a0 34000000 		.word	.LANCHOR0+52
 1817 08a4 5E010000 		.word	350
 1818 08a8 20000000 		.word	.LC2
 1819 08ac 58010000 		.word	.LC10
 1820              		.cfi_endproc
 1821              	.LFE63:
 1823              		.align	2
 1824              		.global	armwave_set_wave_pointer_as_testbuf
 1825              		.syntax unified
 1826              		.arm
 1827              		.fpu vfp
 1829              	armwave_set_wave_pointer_as_testbuf:
 1830              	.LVL102:
 1831              	.LFB64:
 352:armwave.c     **** }
 353:armwave.c     **** 
 354:armwave.c     **** /*
 355:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 356:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 359:armwave.c     **** {
 1832              		.loc 1 359 1 is_stmt 1 view -0
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 1836              		@ link register save eliminated.
 360:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1837              		.loc 1 360 5 view .LVU509
 1838              	@ armwave.c:360:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1839              		.loc 1 360 29 is_stmt 0 view .LVU510
 1840 08b0 24309FE5 		ldr	r3, .L99	@ tmp117,
 1841              	@ armwave.c:360:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1842              		.loc 1 360 7 view .LVU511
 1843 08b4 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1844 08b8 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1845 08bc 0400003A 		bcc	.L98		@,
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 362:armwave.c     ****         return;
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1846              		.loc 1 365 5 is_stmt 1 view .LVU512
 1847              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1848              		.loc 1 365 111 is_stmt 0 view .LVU513
 1849 08c0 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1850              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1851              		.loc 1 365 68 view .LVU514
 1852 08c4 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1853 08c8 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1854              	.LVL103:
 1855              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1856              		.loc 1 365 33 view .LVU515
 1857 08cc 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1858              	@ armwave.c:366: }
 366:armwave.c     **** }
 1859              		.loc 1 366 1 view .LVU516
 1860 08d0 1EFF2FE1 		bx	lr	@
 1861              	.LVL104:
 1862              	.L98:
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1863              		.loc 1 361 9 is_stmt 1 view .LVU517
 1864 08d4 04009FE5 		ldr	r0, .L99+4	@,
 1865              	.LVL105:
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1866              		.loc 1 361 9 is_stmt 0 view .LVU518
 1867 08d8 FEFFFFEA 		b	puts		@
 1868              	.LVL106:
 1869              	.L100:
 1870              		.align	2
 1871              	.L99:
 1872 08dc 00000000 		.word	g_armwave_state
 1873 08e0 6C010000 		.word	.LC11
 1874              		.cfi_endproc
 1875              	.LFE64:
 1877              		.align	2
 1878              		.global	armwave_set_wave_pointer_u32
 1879              		.syntax unified
 1880              		.arm
 1881              		.fpu vfp
 1883              	armwave_set_wave_pointer_u32:
 1884              	.LVL107:
 1885              	.LFB65:
 367:armwave.c     **** 
 368:armwave.c     **** /*
 369:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 370:armwave.c     ****  * disjointed buffers in the future.
 371:armwave.c     ****  */
 372:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 373:armwave.c     **** {
 1886              		.loc 1 373 1 is_stmt 1 view -0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1890              		.loc 1 374 5 view .LVU520
 1891 08e4 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1892              		.loc 1 374 5 is_stmt 0 view .LVU521
 1893 08e8 0200000A 		beq	.L106		@,
 375:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1894              		.loc 1 375 5 is_stmt 1 view .LVU522
 1895              	@ armwave.c:375:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1896              		.loc 1 375 33 is_stmt 0 view .LVU523
 1897 08ec 1C309FE5 		ldr	r3, .L107	@ tmp117,
 1898 08f0 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1899 08f4 1EFF2FE1 		bx	lr	@
 1900              	.L106:
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1901              		.loc 1 374 5 is_stmt 1 discriminator 1 view .LVU524
 1902              	@ armwave.c:373: {
 373:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1903              		.loc 1 373 1 is_stmt 0 discriminator 1 view .LVU525
 1904 08f8 10402DE9 		push	{r4, lr}	@
 1905              		.cfi_def_cfa_offset 8
 1906              		.cfi_offset 4, -8
 1907              		.cfi_offset 14, -4
 1908              	@ armwave.c:374:     assert(wave_buffer_ptr != 0);
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1909              		.loc 1 374 5 discriminator 1 view .LVU526
 1910 08fc 10309FE5 		ldr	r3, .L107+4	@,
 1911 0900 10209FE5 		ldr	r2, .L107+8	@,
 1912 0904 10109FE5 		ldr	r1, .L107+12	@,
 1913 0908 10009FE5 		ldr	r0, .L107+16	@,
 1914              	.LVL108:
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1915              		.loc 1 374 5 discriminator 1 view .LVU527
 1916 090c FEFFFFEB 		bl	__assert_fail		@
 1917              	.LVL109:
 1918              	.L108:
 1919              		.align	2
 1920              	.L107:
 1921 0910 00000000 		.word	g_armwave_state
 1922 0914 50000000 		.word	.LANCHOR0+80
 1923 0918 76010000 		.word	374
 1924 091c 20000000 		.word	.LC2
 1925 0920 A8010000 		.word	.LC12
 1926              		.cfi_endproc
 1927              	.LFE65:
 1929              		.align	2
 1930              		.global	armwave_clear_buffer
 1931              		.syntax unified
 1932              		.arm
 1933              		.fpu vfp
 1935              	armwave_clear_buffer:
 1936              	.LVL110:
 1937              	.LFB66:
 376:armwave.c     **** }
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 382:armwave.c     **** {
 1938              		.loc 1 382 1 is_stmt 1 view -0
 1939              		.cfi_startproc
 1940              		@ args = 0, pretend = 0, frame = 0
 1941              		@ frame_needed = 0, uses_anonymous_args = 0
 1942              		@ link register save eliminated.
 383:armwave.c     ****     // Flags ignored, only one buffer cleared
 384:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1943              		.loc 1 384 5 view .LVU529
 1944              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1945              		.loc 1 384 58 is_stmt 0 view .LVU530
 1946 0924 0C309FE5 		ldr	r3, .L110	@ tmp114,
 1947              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1948              		.loc 1 384 5 view .LVU531
 1949 0928 0010A0E3 		mov	r1, #0	@,
 1950 092c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1951 0930 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1952              	.LVL111:
 1953              		.loc 1 384 5 view .LVU532
 1954 0934 FEFFFFEA 		b	memset		@
 1955              	.LVL112:
 1956              	.L111:
 1957              		.align	2
 1958              	.L110:
 1959 0938 00000000 		.word	g_armwave_state
 1960              		.cfi_endproc
 1961              	.LFE66:
 1963              		.align	2
 1964              		.global	armwave_set_channel_colour
 1965              		.syntax unified
 1966              		.arm
 1967              		.fpu vfp
 1969              	armwave_set_channel_colour:
 1970              	.LVL113:
 1971              	.LFB67:
 385:armwave.c     **** }
 386:armwave.c     **** 
 387:armwave.c     **** /*
 388:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 391:armwave.c     **** {
 1972              		.loc 1 391 1 is_stmt 1 view -0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 0
 1975              		@ frame_needed = 0, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
 392:armwave.c     ****     // Only 1ch supported for now
 393:armwave.c     ****     switch(ch) {
 1977              		.loc 1 393 5 view .LVU534
 1978 093c 010050E3 		cmp	r0, #1	@ ch,
 394:armwave.c     ****         case 1:
 395:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1979              		.loc 1 395 13 view .LVU535
 1980              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 1981              		.loc 1 395 41 is_stmt 0 view .LVU536
 1982 0940 0C009F05 		ldreq	r0, .L114	@ tmp117,
 1983              	.LVL114:
 1984              		.loc 1 395 41 view .LVU537
 1985 0944 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 396:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1986              		.loc 1 396 13 is_stmt 1 view .LVU538
 1987              	@ armwave.c:396:             g_armwave_state.ch1_color.g = g;
 1988              		.loc 1 396 41 is_stmt 0 view .LVU539
 1989 0948 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 397:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1990              		.loc 1 397 13 is_stmt 1 view .LVU540
 1991              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 1992              		.loc 1 397 41 is_stmt 0 view .LVU541
 1993 094c B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 398:armwave.c     ****             break;
 1994              		.loc 1 398 13 is_stmt 1 view .LVU542
 1995              	@ armwave.c:400: }
 399:armwave.c     ****     }
 400:armwave.c     **** }
 1996              		.loc 1 400 1 is_stmt 0 view .LVU543
 1997 0950 1EFF2FE1 		bx	lr	@
 1998              	.L115:
 1999              		.align	2
 2000              	.L114:
 2001 0954 00000000 		.word	g_armwave_state
 2002              		.cfi_endproc
 2003              	.LFE67:
 2005              		.align	2
 2006              		.global	armwave_dump_ppm_debug
 2007              		.syntax unified
 2008              		.arm
 2009              		.fpu vfp
 2011              	armwave_dump_ppm_debug:
 2012              	.LVL115:
 2013              	.LFB68:
 401:armwave.c     **** 
 402:armwave.c     **** /*
 403:armwave.c     ****  * Dump a ppm of a buffer to a file.
 404:armwave.c     ****  */
 405:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 406:armwave.c     **** {
 2014              		.loc 1 406 1 is_stmt 1 view -0
 2015              		.cfi_startproc
 2016              		@ args = 0, pretend = 0, frame = 0
 2017              		@ frame_needed = 0, uses_anonymous_args = 0
 407:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2018              		.loc 1 407 5 view .LVU545
 2019              	@ armwave.c:406: {
 406:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2020              		.loc 1 406 1 is_stmt 0 view .LVU546
 2021 0958 0130A0E1 		mov	r3, r1	@ fn, fn
 2022 095c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2023              		.cfi_def_cfa_offset 28
 2024              		.cfi_offset 4, -28
 2025              		.cfi_offset 5, -24
 2026              		.cfi_offset 6, -20
 2027              		.cfi_offset 7, -16
 2028              		.cfi_offset 8, -12
 2029              		.cfi_offset 9, -8
 2030              		.cfi_offset 14, -4
 2031 0960 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2032 0964 0CD04DE2 		sub	sp, sp, #12	@,,
 2033              		.cfi_def_cfa_offset 40
 2034              	@ armwave.c:407:     FILE *fp = fopen(fn, "wb");
 2035              		.loc 1 407 16 view .LVU547
 2036 0968 C4109FE5 		ldr	r1, .L124	@,
 2037              	.LVL116:
 2038              		.loc 1 407 16 view .LVU548
 2039 096c 0300A0E1 		mov	r0, r3	@, fn
 2040              	.LVL117:
 2041              		.loc 1 407 16 view .LVU549
 2042 0970 FEFFFFEB 		bl	fopen64		@
 2043              	.LVL118:
 2044              	@ armwave.c:414:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 408:armwave.c     ****     uint32_t data;
 409:armwave.c     ****     int xx, yy;
 410:armwave.c     **** 
 411:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 412:armwave.c     **** 
 413:armwave.c     ****     fputs("P3\n", fp);
 414:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2045              		.loc 1 414 5 view .LVU550
 2046 0974 BC609FE5 		ldr	r6, .L124+4	@ tmp150,
 2047              	@ armwave.c:413:     fputs("P3\n", fp);
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2048              		.loc 1 413 5 view .LVU551
 2049 0978 0320A0E3 		mov	r2, #3	@,
 2050 097c 0110A0E3 		mov	r1, #1	@,
 2051              	@ armwave.c:407:     FILE *fp = fopen(fn, "wb");
 407:armwave.c     ****     uint32_t data;
 2052              		.loc 1 407 16 view .LVU552
 2053 0980 0070A0E1 		mov	r7, r0	@ fp,
 2054              	.LVL119:
 408:armwave.c     ****     uint32_t data;
 2055              		.loc 1 408 5 is_stmt 1 view .LVU553
 409:armwave.c     **** 
 2056              		.loc 1 409 5 view .LVU554
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2057              		.loc 1 413 5 view .LVU555
 2058 0984 0030A0E1 		mov	r3, r0	@, fp
 2059 0988 AC009FE5 		ldr	r0, .L124+8	@,
 2060              	.LVL120:
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2061              		.loc 1 413 5 is_stmt 0 view .LVU556
 2062 098c FEFFFFEB 		bl	fwrite		@
 2063              	.LVL121:
 2064              		.loc 1 414 5 is_stmt 1 view .LVU557
 2065 0990 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2066 0994 A4109FE5 		ldr	r1, .L124+12	@,
 2067 0998 0700A0E1 		mov	r0, r7	@, fp
 2068 099c FEFFFFEB 		bl	fprintf		@
 2069              	.LVL122:
 415:armwave.c     ****     fputs("255\n", fp);
 2070              		.loc 1 415 5 view .LVU558
 2071 09a0 0420A0E3 		mov	r2, #4	@,
 2072 09a4 0730A0E1 		mov	r3, r7	@, fp
 2073 09a8 0110A0E3 		mov	r1, #1	@,
 2074 09ac 90009FE5 		ldr	r0, .L124+16	@,
 2075 09b0 FEFFFFEB 		bl	fwrite		@
 2076              	.LVL123:
 416:armwave.c     **** 
 417:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2077              		.loc 1 417 5 view .LVU559
 2078              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2079              		.loc 1 417 37 is_stmt 0 view .LVU560
 2080 09b4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2081              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2082              		.loc 1 417 5 view .LVU561
 2083 09b8 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2084 09bc 180000DA 		ble	.L117		@,
 2085 09c0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2086              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 419:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 420:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 421:armwave.c     **** 
 422:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2087              		.loc 1 422 13 view .LVU562
 2088 09c4 7C909FE5 		ldr	r9, .L124+20	@ tmp152,
 2089              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2090              		.loc 1 417 12 view .LVU563
 2091 09c8 0050A0E3 		mov	r5, #0	@ yy,
 2092              	.LVL124:
 2093              	.L118:
 2094              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2095              		.loc 1 418 9 view .LVU564
 2096 09cc 000053E3 		cmp	r3, #0	@ _13,
 2097              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2098              		.loc 1 418 16 view .LVU565
 2099 09d0 0040A0C3 		movgt	r4, #0	@ xx,
 2100              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2101              		.loc 1 418 9 view .LVU566
 2102 09d4 0F0000DA 		ble	.L120		@,
 2103              	.LVL125:
 2104              	.L119:
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2105              		.loc 1 419 13 is_stmt 1 discriminator 3 view .LVU567
 2106              	@ armwave.c:419:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2107              		.loc 1 419 29 is_stmt 0 discriminator 3 view .LVU568
 2108 09d8 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2109              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2110              		.loc 1 422 13 discriminator 3 view .LVU569
 2111 09dc 0910A0E1 		mov	r1, r9	@, tmp152
 2112 09e0 0700A0E1 		mov	r0, r7	@, fp
 2113              	@ armwave.c:419:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2114              		.loc 1 419 18 discriminator 3 view .LVU570
 2115 09e4 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2116              	.LVL126:
 2117              		.loc 1 422 13 is_stmt 1 discriminator 3 view .LVU571
 2118              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2119              		.loc 1 418 58 is_stmt 0 discriminator 3 view .LVU572
 2120 09e8 014084E2 		add	r4, r4, #1	@ xx, xx,
 2121              	.LVL127:
 2122              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2123              		.loc 1 422 81 discriminator 3 view .LVU573
 2124 09ec 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2125              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2126              		.loc 1 422 61 discriminator 3 view .LVU574
 2127 09f0 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2128              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2129              		.loc 1 422 13 discriminator 3 view .LVU575
 2130 09f4 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2131 09f8 7330EFE6 		uxtb	r3, r3	@, tmp142
 2132 09fc 00C08DE5 		str	ip, [sp]	@ tmp147,
 2133 0a00 7220EFE6 		uxtb	r2, r2	@, data
 2134              	.LVL128:
 2135              		.loc 1 422 13 discriminator 3 view .LVU576
 2136 0a04 FEFFFFEB 		bl	fprintf		@
 2137              	.LVL129:
 2138              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2139              		.loc 1 418 41 discriminator 3 view .LVU577
 2140 0a08 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2141              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2142              		.loc 1 418 9 discriminator 3 view .LVU578
 2143 0a0c 040053E1 		cmp	r3, r4	@ _13, xx
 2144 0a10 F0FFFFCA 		bgt	.L119		@,
 2145 0a14 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2146              	.LVL130:
 2147              	.L120:
 2148              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2149              		.loc 1 417 55 discriminator 2 view .LVU579
 2150 0a18 015085E2 		add	r5, r5, #1	@ yy, yy,
 2151              	.LVL131:
 2152              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2153              		.loc 1 417 5 discriminator 2 view .LVU580
 2154 0a1c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2155 0a20 E9FFFFBA 		blt	.L118		@,
 2156              	.LVL132:
 2157              	.L117:
 423:armwave.c     ****         }
 424:armwave.c     ****     }
 425:armwave.c     **** 
 426:armwave.c     ****     fclose(fp);
 2158              		.loc 1 426 5 is_stmt 1 view .LVU581
 2159 0a24 0700A0E1 		mov	r0, r7	@, fp
 2160              	@ armwave.c:427: }
 427:armwave.c     **** }
 2161              		.loc 1 427 1 is_stmt 0 view .LVU582
 2162 0a28 0CD08DE2 		add	sp, sp, #12	@,,
 2163              		.cfi_def_cfa_offset 28
 2164              		@ sp needed	@
 2165 0a2c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2166              		.cfi_restore 14
 2167              		.cfi_restore 9
 2168              		.cfi_restore 8
 2169              		.cfi_restore 7
 2170              		.cfi_restore 6
 2171              		.cfi_restore 5
 2172              		.cfi_restore 4
 2173              		.cfi_def_cfa_offset 0
 2174              	.LVL133:
 2175              	@ armwave.c:426:     fclose(fp);
 426:armwave.c     **** }
 2176              		.loc 1 426 5 view .LVU583
 2177 0a30 FEFFFFEA 		b	fclose		@
 2178              	.LVL134:
 2179              	.L125:
 426:armwave.c     **** }
 2180              		.loc 1 426 5 view .LVU584
 2181              		.align	2
 2182              	.L124:
 2183 0a34 C0010000 		.word	.LC13
 2184 0a38 00000000 		.word	g_armwave_state
 2185 0a3c C4010000 		.word	.LC14
 2186 0a40 C8010000 		.word	.LC15
 2187 0a44 D0010000 		.word	.LC16
 2188 0a48 D8010000 		.word	.LC17
 2189              		.cfi_endproc
 2190              	.LFE68:
 2192              		.align	2
 2193              		.global	armwave_test_init
 2194              		.syntax unified
 2195              		.arm
 2196              		.fpu vfp
 2198              	armwave_test_init:
 2199              	.LVL135:
 2200              	.LFB69:
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Initialise some test functionry.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 433:armwave.c     **** {
 2201              		.loc 1 433 1 is_stmt 1 view -0
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 0
 2204              		@ frame_needed = 0, uses_anonymous_args = 0
 434:armwave.c     ****     test_create_gamma();
 2205              		.loc 1 434 5 view .LVU586
 2206              	.LBB18:
 2207              	.LBI18:
  34:armwave.c     **** {
 2208              		.loc 1 34 6 view .LVU587
  34:armwave.c     **** {
 2209              		.loc 1 34 6 is_stmt 0 view .LVU588
 2210              	.LBE18:
 2211              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2212              		.loc 1 433 1 view .LVU589
 2213 0a4c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2214              		.cfi_def_cfa_offset 32
 2215              		.cfi_offset 4, -32
 2216              		.cfi_offset 5, -28
 2217              		.cfi_offset 6, -24
 2218              		.cfi_offset 7, -20
 2219              		.cfi_offset 8, -16
 2220              		.cfi_offset 9, -12
 2221              		.cfi_offset 10, -8
 2222              		.cfi_offset 14, -4
 2223 0a50 068B2DED 		vpush.64	{d8, d9, d10}	@
 2224              		.cfi_def_cfa_offset 56
 2225              		.cfi_offset 80, -56
 2226              		.cfi_offset 81, -52
 2227              		.cfi_offset 82, -48
 2228              		.cfi_offset 83, -44
 2229              		.cfi_offset 84, -40
 2230              		.cfi_offset 85, -36
 2231 0a54 C0409FE5 		ldr	r4, .L130+20	@ ivtmp.93,
 2232              	.LBB21:
 2233              	.LBB19:
 2234              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2235              		.loc 1 40 32 view .LVU590
 2236 0a58 2EAA9FED 		vldr.32	s20, .L130+16	@ tmp136,
 2237              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2238              		.loc 1 40 26 view .LVU591
 2239 0a5c 299B9FED 		vldr.64	d9, .L130	@ tmp151,
 2240              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2241              		.loc 1 40 49 view .LVU592
 2242 0a60 2A8B9FED 		vldr.64	d8, .L130+8	@ tmp139,
 2243 0a64 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.93,
 2244              	.LBE19:
 2245              	.LBE21:
 2246              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2247              		.loc 1 433 1 view .LVU593
 2248 0a68 10D04DE2 		sub	sp, sp, #16	@,,
 2249              		.cfi_def_cfa_offset 72
 2250              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2251              		.loc 1 433 1 view .LVU594
 2252 0a6c 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2253 0a70 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2254 0a74 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2255 0a78 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2256 0a7c 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.93,
 2257 0a80 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2258              	.LVL136:
 2259              	.L127:
 2260              	.LBB22:
 2261              	.LBB20:
  40:armwave.c     ****     }
 2262              		.loc 1 40 9 is_stmt 1 view .LVU595
 2263              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2264              		.loc 1 40 32 is_stmt 0 view .LVU596
 2265 0a84 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.93
 2266              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2267              		.loc 1 40 26 view .LVU597
 2268 0a88 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2269              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2270              		.loc 1 40 32 view .LVU598
 2271 0a8c 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2272 0a90 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2273 0a94 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2274              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2275              		.loc 1 40 26 view .LVU599
 2276 0a98 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2277 0a9c FEFFFFEB 		bl	pow		@
 2278              	.LVL137:
 2279              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2280              		.loc 1 40 49 view .LVU600
 2281 0aa0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2282              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2283              		.loc 1 40 24 view .LVU601
 2284 0aa4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2285 0aa8 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2286 0aac 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2287              	.LVL138:
 2288              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2289              		.loc 1 39 5 view .LVU602
 2290 0ab0 0A0054E1 		cmp	r4, r10	@ ivtmp.93, _39
 2291 0ab4 F2FFFF1A 		bne	.L127		@,
 2292              	.LVL139:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2293              		.loc 1 39 5 view .LVU603
 2294              	.LBE20:
 2295              	.LBE22:
 435:armwave.c     **** 
 436:armwave.c     ****     // make ch1 yellowish by default
 437:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2296              		.loc 1 437 5 is_stmt 1 view .LVU604
 2297              	.LBB23:
 2298              	.LBI23:
 390:armwave.c     **** {
 2299              		.loc 1 390 6 view .LVU605
 2300              	.LBB24:
 393:armwave.c     ****         case 1:
 2301              		.loc 1 393 5 view .LVU606
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2302              		.loc 1 395 13 view .LVU607
 396:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2303              		.loc 1 396 13 view .LVU608
 2304              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2305              		.loc 1 395 41 is_stmt 0 view .LVU609
 2306 0ab8 60C09FE5 		ldr	ip, .L130+24	@ tmp142,
 2307 0abc 60409FE5 		ldr	r4, .L130+28	@ tmp143,
 2308              	.LBE24:
 2309              	.LBE23:
 2310              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 438:armwave.c     **** 
 439:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2311              		.loc 1 439 5 view .LVU610
 2312 0ac0 0000A0E3 		mov	r0, #0	@ tmp147,
 2313              	.LBB28:
 2314              	.LBB25:
 2315              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 397:armwave.c     ****             break;
 2316              		.loc 1 397 41 view .LVU611
 2317 0ac4 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2318              	.LBE25:
 2319              	.LBE28:
 2320              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2321              		.loc 1 439 5 view .LVU612
 2322 0ac8 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2323 0acc 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2324 0ad0 00808DE5 		str	r8, [sp]	@ render_width,
 2325 0ad4 0610A0E1 		mov	r1, r6	@, tmp3
 2326 0ad8 0720A0E1 		mov	r2, r7	@, nwaves
 2327              	.LBB29:
 2328              	.LBB26:
 2329              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2330              		.loc 1 395 41 view .LVU613
 2331 0adc 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 397:armwave.c     ****             break;
 2332              		.loc 1 397 13 is_stmt 1 view .LVU614
 2333              	.LBE26:
 2334              	.LBE29:
 2335              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2336              		.loc 1 439 5 is_stmt 0 view .LVU615
 2337 0ae0 0630A0E1 		mov	r3, r6	@, wave_size
 2338              	.LBB30:
 2339              	.LBB27:
 2340              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 397:armwave.c     ****             break;
 2341              		.loc 1 397 41 view .LVU616
 2342 0ae4 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 398:armwave.c     ****     }
 2343              		.loc 1 398 13 is_stmt 1 view .LVU617
 2344              	.LVL140:
 398:armwave.c     ****     }
 2345              		.loc 1 398 13 is_stmt 0 view .LVU618
 2346              	.LBE27:
 2347              	.LBE30:
 2348              		.loc 1 439 5 is_stmt 1 view .LVU619
 2349 0ae8 FEFFFFEB 		bl	armwave_setup_render		@
 2350              	.LVL141:
 440:armwave.c     **** 
 441:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2351              		.loc 1 441 5 view .LVU620
 2352 0aec 34109FE5 		ldr	r1, .L130+32	@,
 2353 0af0 34009FE5 		ldr	r0, .L130+36	@,
 2354              	@ armwave.c:442: }
 442:armwave.c     **** }
 2355              		.loc 1 442 1 is_stmt 0 view .LVU621
 2356 0af4 10D08DE2 		add	sp, sp, #16	@,,
 2357              		.cfi_def_cfa_offset 56
 2358              		@ sp needed	@
 2359 0af8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2360              		.cfi_restore 84
 2361              		.cfi_restore 85
 2362              		.cfi_restore 82
 2363              		.cfi_restore 83
 2364              		.cfi_restore 80
 2365              		.cfi_restore 81
 2366              		.cfi_def_cfa_offset 32
 2367 0afc F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2368              		.cfi_restore 14
 2369              		.cfi_restore 10
 2370              		.cfi_restore 9
 2371              		.cfi_restore 8
 2372              		.cfi_restore 7
 2373              		.cfi_restore 6
 2374              		.cfi_restore 5
 2375              		.cfi_restore 4
 2376              		.cfi_def_cfa_offset 0
 2377              	.LVL142:
 2378              	@ armwave.c:441:     printf("armwave version: %s\n", ARMWAVE_VER);
 441:armwave.c     **** }
 2379              		.loc 1 441 5 view .LVU622
 2380 0b00 FEFFFFEA 		b	printf		@
 2381              	.LVL143:
 2382              	.L131:
 2383 0b04 0000A0E1 		.align	3
 2384              	.L130:
 2385 0b08 000000C0 		.word	-1073741824
 2386 0b0c CCCCEC3F 		.word	1072483532
 2387 0b10 00000000 		.word	0
 2388 0b14 00E06F40 		.word	1081073664
 2389 0b18 00007F43 		.word	1132396544
 2390 0b1c FFFFFFFF 		.word	gamma_table-1
 2391 0b20 00000000 		.word	g_armwave_state
 2392 0b24 F609F406 		.word	116656630
 2393 0b28 00000000 		.word	.LC0
 2394 0b2c 08000000 		.word	.LC1
 2395              		.cfi_endproc
 2396              	.LFE69:
 2398              		.align	2
 2399              		.global	armwave_test_fill_outbuf
 2400              		.syntax unified
 2401              		.arm
 2402              		.fpu vfp
 2404              	armwave_test_fill_outbuf:
 2405              	.LFB70:
 443:armwave.c     **** 
 444:armwave.c     **** /*
 445:armwave.c     ****  * Render image to the local allocated buffer.
 446:armwave.c     ****  */
 447:armwave.c     **** void armwave_test_fill_outbuf()
 448:armwave.c     **** {
 2406              		.loc 1 448 1 is_stmt 1 view -0
 2407              		.cfi_startproc
 2408              		@ args = 0, pretend = 0, frame = 0
 2409              		@ frame_needed = 0, uses_anonymous_args = 0
 2410              		@ link register save eliminated.
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2411              		.loc 1 449 5 view .LVU624
 2412 0b30 04309FE5 		ldr	r3, .L133	@ tmp111,
 2413 0b34 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2414 0b38 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2415              	.LVL144:
 2416              	.L134:
 2417              		.align	2
 2418              	.L133:
 2419 0b3c 00000000 		.word	g_armwave_state
 2420              		.cfi_endproc
 2421              	.LFE70:
 2423              		.align	2
 2424              		.global	armwave_test_dump_buffer_to_ppm
 2425              		.syntax unified
 2426              		.arm
 2427              		.fpu vfp
 2429              	armwave_test_dump_buffer_to_ppm:
 2430              	.LVL145:
 2431              	.LFB71:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 456:armwave.c     **** {
 2432              		.loc 1 456 1 view -0
 2433              		.cfi_startproc
 2434              		@ args = 0, pretend = 0, frame = 0
 2435              		@ frame_needed = 0, uses_anonymous_args = 0
 2436              		@ link register save eliminated.
 457:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2437              		.loc 1 457 5 view .LVU626
 2438 0b40 08309FE5 		ldr	r3, .L136	@ tmp112,
 2439 0b44 0010A0E1 		mov	r1, r0	@, fn
 2440 0b48 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2441              	.LVL146:
 2442              		.loc 1 457 5 is_stmt 0 view .LVU627
 2443 0b4c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2444              	.LVL147:
 2445              	.L137:
 2446              		.loc 1 457 5 view .LVU628
 2447              		.align	2
 2448              	.L136:
 2449 0b50 00000000 		.word	g_armwave_state
 2450              		.cfi_endproc
 2451              	.LFE71:
 2453              		.align	2
 2454              		.global	armwave_test_fill_gdkbuf
 2455              		.syntax unified
 2456              		.arm
 2457              		.fpu vfp
 2459              	armwave_test_fill_gdkbuf:
 2460              	.LVL148:
 2461              	.LFB72:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Render GDK buffer with test funtionry.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 464:armwave.c     **** {
 2462              		.loc 1 464 1 is_stmt 1 view -0
 2463              		.cfi_startproc
 2464              		@ args = 0, pretend = 0, frame = 0
 2465              		@ frame_needed = 0, uses_anonymous_args = 0
 2466              		@ link register save eliminated.
 465:armwave.c     ****     //PyObject *mv;
 466:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 467:armwave.c     **** 
 468:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 469:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2467              		.loc 1 469 5 view .LVU630
 470:armwave.c     ****     
 471:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 472:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2468              		.loc 1 472 5 view .LVU631
 2469              	@ armwave.c:469:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 469:armwave.c     ****     
 2470              		.loc 1 469 11 is_stmt 0 view .LVU632
 2471 0b54 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2472              	@ armwave.c:472:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2473              		.loc 1 472 5 view .LVU633
 2474 0b58 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2475              	.LVL149:
 2476              		.loc 1 472 5 view .LVU634
 2477 0b5c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2478              	.LVL150:
 2479              		.loc 1 472 5 view .LVU635
 2480              		.cfi_endproc
 2481              	.LFE72:
 2483              		.align	2
 2484              		.global	armwave_test_buffer_alloc
 2485              		.syntax unified
 2486              		.arm
 2487              		.fpu vfp
 2489              	armwave_test_buffer_alloc:
 2490              	.LVL151:
 2491              	.LFB73:
 473:armwave.c     **** }
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 477:armwave.c     ****  */
 478:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 479:armwave.c     **** {
 2492              		.loc 1 479 1 is_stmt 1 view -0
 2493              		.cfi_startproc
 2494              		@ args = 0, pretend = 0, frame = 0
 2495              		@ frame_needed = 0, uses_anonymous_args = 0
 480:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2496              		.loc 1 480 5 view .LVU637
 2497              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2498              		.loc 1 479 1 is_stmt 0 view .LVU638
 2499 0b60 70402DE9 		push	{r4, r5, r6, lr}	@
 2500              		.cfi_def_cfa_offset 16
 2501              		.cfi_offset 4, -16
 2502              		.cfi_offset 5, -12
 2503              		.cfi_offset 6, -8
 2504              		.cfi_offset 14, -4
 2505              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2506              		.loc 1 479 1 view .LVU639
 2507 0b64 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2508              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2509              		.loc 1 480 23 view .LVU640
 2510 0b68 44409FE5 		ldr	r4, .L146	@ tmp128,
 2511 0b6c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2512              	.LVL152:
 2513              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2514              		.loc 1 480 7 view .LVU641
 2515 0b70 000050E3 		cmp	r0, #0	@ _1,
 2516 0b74 0000000A 		beq	.L140		@,
 481:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2517              		.loc 1 481 9 is_stmt 1 view .LVU642
 2518 0b78 FEFFFFEB 		bl	free		@
 2519              	.LVL153:
 2520              	.L140:
 482:armwave.c     ****     }
 483:armwave.c     **** 
 484:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 485:armwave.c     **** 
 486:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2521              		.loc 1 486 5 view .LVU643
 2522              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2523              		.loc 1 486 75 is_stmt 0 view .LVU644
 2524 0b7c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2525 0b80 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2526              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2527              		.loc 1 486 40 view .LVU645
 2528 0b84 0610A0E1 		mov	r1, r6	@, nsets
 2529              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2530              		.loc 1 486 75 view .LVU646
 2531 0b88 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2532              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2533              		.loc 1 486 40 view .LVU647
 2534 0b8c 0500A0E1 		mov	r0, r5	@, _4
 2535 0b90 FEFFFFEB 		bl	calloc		@
 2536              	.LVL154:
 2537              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     **** 
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2538              		.loc 1 488 7 view .LVU648
 2539 0b94 000050E3 		cmp	r0, #0	@ tmp124,
 2540              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2541              		.loc 1 486 38 view .LVU649
 2542 0b98 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2543              		.loc 1 488 5 is_stmt 1 view .LVU650
 2544              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 2545              		.loc 1 488 7 is_stmt 0 view .LVU651
 2546 0b9c 7080BD18 		popne	{r4, r5, r6, pc}	@
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2547              		.loc 1 489 9 is_stmt 1 view .LVU652
 2548 0ba0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2549 0ba4 0620A0E1 		mov	r2, r6	@, nsets
 2550 0ba8 08009FE5 		ldr	r0, .L146+4	@,
 2551              	@ armwave.c:493: }
 490:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 491:armwave.c     ****         return;
 492:armwave.c     ****     }
 493:armwave.c     **** }
 2552              		.loc 1 493 1 is_stmt 0 view .LVU653
 2553 0bac 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2554              		.cfi_restore 14
 2555              		.cfi_restore 6
 2556              		.cfi_restore 5
 2557              		.cfi_restore 4
 2558              		.cfi_def_cfa_offset 0
 2559              	.LVL155:
 2560              	@ armwave.c:489:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2561              		.loc 1 489 9 view .LVU654
 2562 0bb0 FEFFFFEA 		b	printf		@
 2563              	.LVL156:
 2564              	.L147:
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2565              		.loc 1 489 9 view .LVU655
 2566              		.align	2
 2567              	.L146:
 2568 0bb4 00000000 		.word	g_armwave_state
 2569 0bb8 E8010000 		.word	.LC18
 2570              		.cfi_endproc
 2571              	.LFE73:
 2573              		.align	2
 2574              		.global	armwave_fill_pixbuf_into_pybuffer
 2575              		.syntax unified
 2576              		.arm
 2577              		.fpu vfp
 2579              	armwave_fill_pixbuf_into_pybuffer:
 2580              	.LVL157:
 2581              	.LFB74:
 494:armwave.c     **** 
 495:armwave.c     **** /*
 496:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 497:armwave.c     ****  */
 498:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 499:armwave.c     **** {
 2582              		.loc 1 499 1 is_stmt 1 view -0
 2583              		.cfi_startproc
 2584              		@ args = 0, pretend = 0, frame = 48
 2585              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     Py_buffer buffer;
 2586              		.loc 1 500 5 view .LVU657
 501:armwave.c     ****     int ret;
 2587              		.loc 1 501 5 view .LVU658
 502:armwave.c     **** 
 503:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 504:armwave.c     **** 
 505:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2588              		.loc 1 505 5 view .LVU659
 2589              	@ armwave.c:499: {
 499:armwave.c     ****     Py_buffer buffer;
 2590              		.loc 1 499 1 is_stmt 0 view .LVU660
 2591 0bbc 04E02DE5 		str	lr, [sp, #-4]!	@,
 2592              		.cfi_def_cfa_offset 4
 2593              		.cfi_offset 14, -4
 2594 0bc0 34D04DE2 		sub	sp, sp, #52	@,,
 2595              		.cfi_def_cfa_offset 56
 2596              	@ armwave.c:505:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2597              		.loc 1 505 11 view .LVU661
 2598 0bc4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2599 0bc8 0120A0E3 		mov	r2, #1	@,
 2600 0bcc FEFFFFEB 		bl	PyObject_GetBuffer		@
 2601              	.LVL158:
 506:armwave.c     **** 
 507:armwave.c     ****     if(ret != 0) {
 2602              		.loc 1 507 5 is_stmt 1 view .LVU662
 2603              	@ armwave.c:507:     if(ret != 0) {
 2604              		.loc 1 507 7 is_stmt 0 view .LVU663
 2605 0bd0 000050E3 		cmp	r0, #0	@,
 2606 0bd4 0A00001A 		bne	.L152		@,
 508:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 509:armwave.c     ****         Py_RETURN_FALSE;
 510:armwave.c     ****     }
 511:armwave.c     **** 
 512:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 513:armwave.c     **** 
 514:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2607              		.loc 1 514 5 is_stmt 1 view .LVU664
 2608 0bd8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2609              	.LVL159:
 2610              		.loc 1 514 5 is_stmt 0 view .LVU665
 2611 0bdc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2612              	.LVL160:
 515:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 516:armwave.c     **** 
 517:armwave.c     ****     PyBuffer_Release(&buffer);
 2613              		.loc 1 517 5 is_stmt 1 view .LVU666
 2614 0be0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2615 0be4 FEFFFFEB 		bl	PyBuffer_Release		@
 2616              	.LVL161:
 518:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 519:armwave.c     **** 
 520:armwave.c     ****     Py_RETURN_TRUE;
 2617              		.loc 1 520 5 view .LVU667
 2618              	.LBB31:
 2619              	.LBI31:
 2620              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2621              		.loc 2 456 20 view .LVU668
 2622              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2623              		.loc 2 458 21 view .LVU669
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2624              		.loc 2 459 5 view .LVU670
 2625              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2626              		.loc 2 459 18 is_stmt 0 view .LVU671
 2627 0be8 38309FE5 		ldr	r3, .L153	@ tmp126,
 2628              	.LBE32:
 2629              	.LBE31:
 2630              	@ armwave.c:520:     Py_RETURN_TRUE;
 2631              		.loc 1 520 5 view .LVU672
 2632 0bec 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2633              	.LBB34:
 2634              	.LBB33:
 2635              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2636              		.loc 2 459 18 view .LVU673
 2637 0bf0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2638 0bf4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2639 0bf8 002083E5 		str	r2, [r3]	@ tmp128,
 2640              	.LBE33:
 2641              	.LBE34:
 2642              	@ armwave.c:521: }
 521:armwave.c     **** }
 2643              		.loc 1 521 1 view .LVU674
 2644 0bfc 34D08DE2 		add	sp, sp, #52	@,,
 2645              		.cfi_remember_state
 2646              		.cfi_def_cfa_offset 4
 2647              		@ sp needed	@
 2648 0c00 04F09DE4 		ldr	pc, [sp], #4	@
 2649              	.LVL162:
 2650              	.L152:
 2651              		.cfi_restore_state
 508:armwave.c     ****         Py_RETURN_FALSE;
 2652              		.loc 1 508 9 is_stmt 1 view .LVU675
 2653 0c04 20009FE5 		ldr	r0, .L153+4	@,
 2654              	.LVL163:
 508:armwave.c     ****         Py_RETURN_FALSE;
 2655              		.loc 1 508 9 is_stmt 0 view .LVU676
 2656 0c08 FEFFFFEB 		bl	puts		@
 2657              	.LVL164:
 509:armwave.c     ****     }
 2658              		.loc 1 509 9 is_stmt 1 view .LVU677
 2659              	.LBB35:
 2660              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2661              		.loc 2 456 20 view .LVU678
 2662              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2663              		.loc 2 458 21 view .LVU679
 2664              		.loc 2 459 5 view .LVU680
 2665              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2666              		.loc 2 459 18 is_stmt 0 view .LVU681
 2667 0c0c 1C309FE5 		ldr	r3, .L153+8	@ tmp120,
 2668              	.LBE36:
 2669              	.LBE35:
 2670              	@ armwave.c:509:         Py_RETURN_FALSE;
 509:armwave.c     ****     }
 2671              		.loc 1 509 9 view .LVU682
 2672 0c10 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2673              	.LBB38:
 2674              	.LBB37:
 2675              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2676              		.loc 2 459 18 view .LVU683
 2677 0c14 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2678 0c18 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2679 0c1c 002083E5 		str	r2, [r3]	@ tmp122,
 2680              	.LBE37:
 2681              	.LBE38:
 2682              	@ armwave.c:521: }
 2683              		.loc 1 521 1 view .LVU684
 2684 0c20 34D08DE2 		add	sp, sp, #52	@,,
 2685              		.cfi_def_cfa_offset 4
 2686              		@ sp needed	@
 2687 0c24 04F09DE4 		ldr	pc, [sp], #4	@
 2688              	.L154:
 2689              		.align	2
 2690              	.L153:
 2691 0c28 00000000 		.word	_Py_TrueStruct
 2692 0c2c 3C020000 		.word	.LC19
 2693 0c30 00000000 		.word	_Py_FalseStruct
 2694              		.cfi_endproc
 2695              	.LFE74:
 2697              		.align	2
 2698              		.global	armwave_test_create_am_sine
 2699              		.syntax unified
 2700              		.arm
 2701              		.fpu vfp
 2703              	armwave_test_create_am_sine:
 2704              	.LVL165:
 2705              	.LFB75:
 522:armwave.c     **** 
 523:armwave.c     **** /*
 524:armwave.c     ****  * Make a test AM waveform for render tests.
 525:armwave.c     ****  *
 526:armwave.c     ****  * @param   mod                     modulation depth
 527:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 528:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 529:armwave.c     ****  */
 530:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 531:armwave.c     **** {
 2706              		.loc 1 531 1 is_stmt 1 view -0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 8
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     float v, noise, xnoise, mod_val;
 2710              		.loc 1 532 5 view .LVU686
 533:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2711              		.loc 1 533 5 view .LVU687
 2712              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2713              		.loc 1 531 1 is_stmt 0 view .LVU688
 2714 0c34 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2715              		.cfi_def_cfa_offset 32
 2716              		.cfi_offset 4, -32
 2717              		.cfi_offset 5, -28
 2718              		.cfi_offset 6, -24
 2719              		.cfi_offset 7, -20
 2720              		.cfi_offset 8, -16
 2721              		.cfi_offset 9, -12
 2722              		.cfi_offset 10, -8
 2723              		.cfi_offset 14, -4
 2724              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2725              		.loc 1 533 38 view .LVU689
 2726 0c38 7A7A9FED 		vldr.32	s14, .L186	@ tmp180,
 2727              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2728              		.loc 1 533 55 view .LVU690
 2729 0c3c 00529FE5 		ldr	r5, .L186+28	@ tmp250,
 2730              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2731              		.loc 1 531 1 view .LVU691
 2732 0c40 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2733              		.cfi_def_cfa_offset 80
 2734              		.cfi_offset 80, -80
 2735              		.cfi_offset 81, -76
 2736              		.cfi_offset 82, -72
 2737              		.cfi_offset 83, -68
 2738              		.cfi_offset 84, -64
 2739              		.cfi_offset 85, -60
 2740              		.cfi_offset 86, -56
 2741              		.cfi_offset 87, -52
 2742              		.cfi_offset 88, -48
 2743              		.cfi_offset 89, -44
 2744              		.cfi_offset 90, -40
 2745              		.cfi_offset 91, -36
 2746 0c44 0090A0E1 		mov	r9, r0	@ sets, sets
 2747              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2748              		.loc 1 533 38 view .LVU692
 2749 0c48 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2750              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 534:armwave.c     ****     int s, set_offset = 0;
 535:armwave.c     ****     int w, x;
 536:armwave.c     **** 
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2751              		.loc 1 537 70 view .LVU693
 2752 0c4c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2753 0c50 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2754              	.LBB41:
 2755              	.LBB42:
 2756              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2757              		.loc 1 480 23 view .LVU694
 2758 0c54 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2759              	.LVL166:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2760              		.loc 1 480 23 view .LVU695
 2761              	.LBE42:
 2762              	.LBE41:
 2763              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2764              		.loc 1 533 38 view .LVU696
 2765 0c58 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2766              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2767              		.loc 1 537 70 view .LVU697
 2768 0c5c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2769              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2770              		.loc 1 531 1 view .LVU698
 2771 0c60 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2772              	.LBB46:
 2773              	.LBB43:
 2774              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2775              		.loc 1 480 7 view .LVU699
 2776 0c64 000050E3 		cmp	r0, #0	@ _82,
 2777              	.LBE43:
 2778              	.LBE46:
 2779              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2780              		.loc 1 531 1 view .LVU700
 2781 0c68 08D04DE2 		sub	sp, sp, #8	@,,
 2782              		.cfi_def_cfa_offset 88
 2783              	@ armwave.c:538:     g_armwave_state.test_wave_buffer_nsets = sets;
 538:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2784              		.loc 1 538 44 view .LVU701
 2785 0c6c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2786              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2787              		.loc 1 537 45 view .LVU702
 2788 0c70 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2789              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2790              		.loc 1 533 38 view .LVU703
 2791 0c74 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2792              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2793              		.loc 1 533 11 view .LVU704
 2794 0c78 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2795              	.LVL167:
 534:armwave.c     ****     int w, x;
 2796              		.loc 1 534 5 is_stmt 1 view .LVU705
 535:armwave.c     **** 
 2797              		.loc 1 535 5 view .LVU706
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2798              		.loc 1 537 5 view .LVU707
 2799              		.loc 1 538 5 view .LVU708
 539:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2800              		.loc 1 539 5 view .LVU709
 2801              	.LBB47:
 2802              	.LBI41:
 478:armwave.c     **** {
 2803              		.loc 1 478 6 view .LVU710
 2804              	.LBB44:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2805              		.loc 1 480 5 view .LVU711
 2806              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2807              		.loc 1 480 7 is_stmt 0 view .LVU712
 2808 0c7c 0000000A 		beq	.L156		@,
 481:armwave.c     ****     }
 2809              		.loc 1 481 9 is_stmt 1 view .LVU713
 2810 0c80 FEFFFFEB 		bl	free		@
 2811              	.LVL168:
 2812              	.L156:
 486:armwave.c     **** 
 2813              		.loc 1 486 5 view .LVU714
 2814              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2815              		.loc 1 486 75 is_stmt 0 view .LVU715
 2816 0c84 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2817 0c88 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2818              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2819              		.loc 1 486 40 view .LVU716
 2820 0c8c 0910A0E1 		mov	r1, r9	@, sets
 2821              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2822              		.loc 1 486 75 view .LVU717
 2823 0c90 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2824              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2825              		.loc 1 486 40 view .LVU718
 2826 0c94 0400A0E1 		mov	r0, r4	@, _85
 2827 0c98 FEFFFFEB 		bl	calloc		@
 2828              	.LVL169:
 2829              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2830              		.loc 1 488 7 view .LVU719
 2831 0c9c 000050E3 		cmp	r0, #0	@ tmp191,
 2832              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2833              		.loc 1 486 38 view .LVU720
 2834 0ca0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2835              		.loc 1 488 5 is_stmt 1 view .LVU721
 2836              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2837              		.loc 1 488 7 is_stmt 0 view .LVU722
 2838 0ca4 5A00000A 		beq	.L185		@,
 2839              	.L157:
 2840              	.LVL170:
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2841              		.loc 1 488 7 view .LVU723
 2842              	.LBE44:
 2843              	.LBE47:
 2844              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 540:armwave.c     **** 
 541:armwave.c     ****     for(s = 0; s < sets; s++) {
 2845              		.loc 1 541 5 discriminator 1 view .LVU724
 2846 0ca8 000059E3 		cmp	r9, #0	@ sets,
 2847 0cac 550000DA 		ble	.L155		@,
 2848              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 543:armwave.c     ****     
 544:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 545:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 546:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 547:armwave.c     **** 
 548:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 549:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 550:armwave.c     ****                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 552:armwave.c     ****                 noise *= noise;
 553:armwave.c     **** 
 554:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 555:armwave.c     ****                     noise = -noise;
 556:armwave.c     **** 
 557:armwave.c     ****                 noise += 1.0f;
 558:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 559:armwave.c     **** 
 560:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2849              		.loc 1 560 45 view .LVU725
 2850 0cb0 5C8A9FED 		vldr.32	s16, .L186	@ tmp258,
 2851              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 561:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 562:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 563:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2852              		.loc 1 563 104 view .LVU726
 2853 0cb4 5CCA9FED 		vldr.32	s24, .L186+4	@ tmp259,
 2854              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2855              		.loc 1 541 5 view .LVU727
 2856 0cb8 0070A0E3 		mov	r7, #0	@ set_offset,
 2857              	@ armwave.c:542:         printf("Calculating test set %d\n", s);
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2858              		.loc 1 542 9 view .LVU728
 2859 0cbc 84A19FE5 		ldr	r10, .L186+32	@ tmp257,
 2860              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2861              		.loc 1 541 5 view .LVU729
 2862 0cc0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2863              	.LVL171:
 2864              	.L158:
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2865              		.loc 1 542 9 is_stmt 1 view .LVU730
 2866 0cc4 0810A0E1 		mov	r1, r8	@, s
 2867 0cc8 0A00A0E1 		mov	r0, r10	@, tmp257
 2868 0ccc FEFFFFEB 		bl	printf		@
 2869              	.LVL172:
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2870              		.loc 1 544 9 view .LVU731
 2871              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2872              		.loc 1 544 39 is_stmt 0 view .LVU732
 2873 0cd0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2874              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2875              		.loc 1 544 9 view .LVU733
 2876 0cd4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2877 0cd8 450000DA 		ble	.L159		@,
 2878              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2879              		.loc 1 546 21 view .LVU734
 2880 0cdc 53CADFED 		vldr.32	s25, .L186+8	@ tmp200,
 2881              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2882              		.loc 1 560 33 view .LVU735
 2883 0ce0 53BA9FED 		vldr.32	s22, .L186+12	@ tmp253,
 2884              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2885              		.loc 1 558 24 view .LVU736
 2886 0ce4 53AADFED 		vldr.32	s21, .L186+16	@ tmp254,
 2887 0ce8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2888              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2889              		.loc 1 544 15 view .LVU737
 2890 0cec 0060A0E3 		mov	r6, #0	@ w,
 2891              	.LVL173:
 2892              	.L166:
 546:armwave.c     **** 
 2893              		.loc 1 546 13 is_stmt 1 view .LVU738
 2894              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2895              		.loc 1 546 21 is_stmt 0 view .LVU739
 2896 0cf0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2897 0cf4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2898              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2899              		.loc 1 548 13 view .LVU740
 2900 0cf8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2901              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2902              		.loc 1 546 21 view .LVU741
 2903 0cfc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2904 0d00 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2905              	.LVL174:
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2906              		.loc 1 548 13 is_stmt 1 view .LVU742
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2907              		.loc 1 548 13 is_stmt 0 view .LVU743
 2908 0d04 370000DA 		ble	.L160		@,
 2909 0d08 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2910              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2911              		.loc 1 563 113 view .LVU744
 2912 0d0c 4AAA9FED 		vldr.32	s20, .L186+20	@ tmp229,
 2913 0d10 4A8ADFED 		vldr.32	s17, .L186+24	@ tmp230,
 2914              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2915              		.loc 1 548 19 view .LVU745
 2916 0d14 0040A0E3 		mov	r4, #0	@ x,
 2917              	.LVL175:
 2918              	.L165:
 549:armwave.c     ****                 noise *= noise;
 2919              		.loc 1 549 17 is_stmt 1 view .LVU746
 2920              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2921              		.loc 1 549 28 is_stmt 0 view .LVU747
 2922 0d18 FEFFFFEB 		bl	rand		@
 2923              	.LVL176:
 2924              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2925              		.loc 1 549 35 view .LVU748
 2926 0d1c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2927              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2928              		.loc 1 549 45 view .LVU749
 2929 0d20 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2930 0d24 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2931              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2932              		.loc 1 549 24 view .LVU750
 2933 0d28 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2934              	.LVL177:
 550:armwave.c     ****                 noise *= noise;
 2935              		.loc 1 550 17 is_stmt 1 view .LVU751
 2936              	@ armwave.c:550:                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 2937              		.loc 1 550 23 is_stmt 0 view .LVU752
 2938 0d2c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2939              	.LVL178:
 551:armwave.c     ****                 noise *= noise;
 2940              		.loc 1 551 17 is_stmt 1 view .LVU753
 2941              	@ armwave.c:551:                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 2942              		.loc 1 551 23 is_stmt 0 view .LVU754
 2943 0d30 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2944              	.LVL179:
 552:armwave.c     **** 
 2945              		.loc 1 552 17 is_stmt 1 view .LVU755
 2946              	@ armwave.c:552:                 noise *= noise;
 552:armwave.c     **** 
 2947              		.loc 1 552 23 is_stmt 0 view .LVU756
 2948 0d34 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2949              	.LVL180:
 554:armwave.c     ****                     noise = -noise;
 2950              		.loc 1 554 17 is_stmt 1 view .LVU757
 2951              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 2952              		.loc 1 554 21 is_stmt 0 view .LVU758
 2953 0d38 FEFFFFEB 		bl	rand		@
 2954              	.LVL181:
 555:armwave.c     **** 
 2955              		.loc 1 555 21 is_stmt 1 view .LVU759
 2956              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 2957              		.loc 1 554 19 is_stmt 0 view .LVU760
 2958 0d3c 020910E3 		tst	r0, #32768	@,
 2959              	@ armwave.c:555:                     noise = -noise;
 555:armwave.c     **** 
 2960              		.loc 1 555 27 view .LVU761
 2961 0d40 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2962              	.LVL182:
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2963              		.loc 1 557 17 is_stmt 1 view .LVU762
 558:armwave.c     **** 
 2964              		.loc 1 558 17 view .LVU763
 2965              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2966              		.loc 1 558 27 is_stmt 0 view .LVU764
 2967 0d44 FEFFFFEB 		bl	rand		@
 2968              	.LVL183:
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2969              		.loc 1 560 17 is_stmt 1 view .LVU765
 2970              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2971              		.loc 1 560 45 is_stmt 0 view .LVU766
 2972 0d48 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2973              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2974              		.loc 1 560 33 view .LVU767
 2975 0d4c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2976              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2977              		.loc 1 560 45 view .LVU768
 2978 0d50 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2979              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2980              		.loc 1 560 33 view .LVU769
 2981 0d54 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2982              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2983              		.loc 1 560 45 view .LVU770
 2984 0d58 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2985              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2986              		.loc 1 560 33 view .LVU771
 2987 0d5c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2988              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2989              		.loc 1 558 34 view .LVU772
 2990 0d60 7000FFE6 		uxth	r0, r0	@ tmp214,
 2991              	.LVL184:
 2992              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2993              		.loc 1 558 44 view .LVU773
 2994 0d64 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2995 0d68 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2996              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2997              		.loc 1 558 24 view .LVU774
 2998 0d6c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2999              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3000              		.loc 1 560 77 view .LVU775
 3001 0d70 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3002              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3003              		.loc 1 560 22 view .LVU776
 3004 0d74 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3005 0d78 FEFFFFEB 		bl	sin		@
 3006              	.LVL185:
 3007              		.loc 1 563 17 is_stmt 1 view .LVU777
 3008              	@ armwave.c:557:                 noise += 1.0f;
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3009              		.loc 1 557 23 is_stmt 0 view .LVU778
 3010 0d7c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3011              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3012              		.loc 1 563 104 view .LVU779
 3013 0d80 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3014              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3015              		.loc 1 560 98 view .LVU780
 3016 0d84 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3017              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3018              		.loc 1 560 87 view .LVU781
 3019 0d88 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3020              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3021              		.loc 1 560 98 view .LVU782
 3022 0d8c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3023              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3024              		.loc 1 560 19 view .LVU783
 3025 0d90 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3026              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3027              		.loc 1 563 113 view .LVU784
 3028 0d94 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3029 0d98 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3030 0d9c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3031 0da0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3032 0da4 050000DA 		ble	.L162		@,
 3033              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3034              		.loc 1 563 104 discriminator 1 view .LVU785
 3035 0da8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3036 0dac FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3037 0db0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3038 0db4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3039 0db8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3040 0dbc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3041              	.L162:
 3042              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3043              		.loc 1 563 57 discriminator 12 view .LVU786
 3044 0dc0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3045              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3046              		.loc 1 563 102 discriminator 12 view .LVU787
 3047 0dc4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3048 0dc8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3049 0dcc 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3050              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3051              		.loc 1 548 58 discriminator 12 view .LVU788
 3052 0dd0 014084E2 		add	r4, r4, #1	@ x, x,
 3053              	.LVL186:
 3054              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3055              		.loc 1 563 102 discriminator 12 view .LVU789
 3056 0dd4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3057              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3058              		.loc 1 548 43 discriminator 12 view .LVU790
 3059 0dd8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3060              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3061              		.loc 1 548 13 discriminator 12 view .LVU791
 3062 0ddc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3063 0de0 CCFFFFCA 		bgt	.L165		@,
 3064 0de4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3065              	.LVL187:
 3066              	.L160:
 3067              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3068              		.loc 1 544 48 discriminator 2 view .LVU792
 3069 0de8 016086E2 		add	r6, r6, #1	@ w, w,
 3070              	.LVL188:
 3071              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3072              		.loc 1 544 9 discriminator 2 view .LVU793
 3073 0dec 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3074 0df0 BEFFFFBA 		blt	.L166		@,
 3075              	.LVL189:
 3076              	.L159:
 564:armwave.c     ****             }
 565:armwave.c     ****         }
 566:armwave.c     **** 
 567:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3077              		.loc 1 567 9 is_stmt 1 discriminator 2 view .LVU794
 3078              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3079              		.loc 1 567 46 is_stmt 0 discriminator 2 view .LVU795
 3080 0df4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3081              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3082              		.loc 1 541 27 discriminator 2 view .LVU796
 3083 0df8 018088E2 		add	r8, r8, #1	@ s, s,
 3084              	.LVL190:
 3085              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3086              		.loc 1 541 5 discriminator 2 view .LVU797
 3087 0dfc 080059E1 		cmp	r9, r8	@ sets, s
 3088              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3089              		.loc 1 567 20 discriminator 2 view .LVU798
 3090 0e00 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3091              	.LVL191:
 3092              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3093              		.loc 1 541 5 discriminator 2 view .LVU799
 3094 0e04 AEFFFF1A 		bne	.L158		@,
 3095              	.LVL192:
 3096              	.L155:
 3097              	@ armwave.c:569: }
 568:armwave.c     ****     }
 569:armwave.c     **** }
 3098              		.loc 1 569 1 view .LVU800
 3099 0e08 08D08DE2 		add	sp, sp, #8	@,,
 3100              		.cfi_remember_state
 3101              		.cfi_def_cfa_offset 80
 3102              		@ sp needed	@
 3103 0e0c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3104              		.cfi_restore 90
 3105              		.cfi_restore 91
 3106              		.cfi_restore 88
 3107              		.cfi_restore 89
 3108              		.cfi_restore 86
 3109              		.cfi_restore 87
 3110              		.cfi_restore 84
 3111              		.cfi_restore 85
 3112              		.cfi_restore 82
 3113              		.cfi_restore 83
 3114              		.cfi_restore 80
 3115              		.cfi_restore 81
 3116              		.cfi_def_cfa_offset 32
 3117              	.LVL193:
 3118              		.loc 1 569 1 view .LVU801
 3119 0e10 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3120              	.LVL194:
 3121              	.L185:
 3122              		.cfi_restore_state
 3123              	.LBB48:
 3124              	.LBB45:
 489:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3125              		.loc 1 489 9 is_stmt 1 view .LVU802
 3126 0e14 940901E0 		mul	r1, r4, r9	@, _85, sets
 3127 0e18 0920A0E1 		mov	r2, r9	@, sets
 3128 0e1c 28009FE5 		ldr	r0, .L186+36	@,
 3129 0e20 FEFFFFEB 		bl	printf		@
 3130              	.LVL195:
 491:armwave.c     ****     }
 3131              		.loc 1 491 9 view .LVU803
 3132 0e24 9FFFFFEA 		b	.L157		@
 3133              	.L187:
 3134              		.align	2
 3135              	.L186:
 3136 0e28 0000803F 		.word	1065353216
 3137 0e2c 00007F43 		.word	1132396544
 3138 0e30 0000003F 		.word	1056964608
 3139 0e34 C3F5C840 		.word	1086911939
 3140 0e38 38FFC74A 		.word	1254620984
 3141 0e3c 0000FE42 		.word	1123942400
 3142 0e40 00000043 		.word	1124073472
 3143 0e44 00000000 		.word	g_armwave_state
 3144 0e48 90020000 		.word	.LC20
 3145 0e4c E8010000 		.word	.LC18
 3146              	.LBE45:
 3147              	.LBE48:
 3148              		.cfi_endproc
 3149              	.LFE75:
 3151              		.align	2
 3152              		.global	armwave_cleanup
 3153              		.syntax unified
 3154              		.arm
 3155              		.fpu vfp
 3157              	armwave_cleanup:
 3158              	.LFB76:
 570:armwave.c     **** 
 571:armwave.c     **** /*
 572:armwave.c     ****  * Make a test square waveform.
 573:armwave.c     ****  *
 574:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 575:armwave.c     ****  */
 576:armwave.c     **** #if 0
 577:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 578:armwave.c     **** {
 579:armwave.c     ****     uint8_t v;
 580:armwave.c     ****     float noise, xnoise;
 581:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 582:armwave.c     ****     int w, x;
 583:armwave.c     **** 
 584:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 585:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 586:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 587:armwave.c     ****             noise *= noise;
 588:armwave.c     ****             noise *= noise;
 589:armwave.c     ****             noise *= noise;
 590:armwave.c     **** 
 591:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 592:armwave.c     ****                 noise = -noise;
 593:armwave.c     **** 
 594:armwave.c     ****             //noise += 1.0f;
 595:armwave.c     **** 
 596:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 597:armwave.c     ****                 new_level = 0.2f;
 598:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 599:armwave.c     ****                 new_level = 0.8f;
 600:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 601:armwave.c     ****                 new_level = 0.2f;
 602:armwave.c     ****             } else {
 603:armwave.c     ****                 new_level = 0.8f;
 604:armwave.c     ****             }
 605:armwave.c     **** 
 606:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 607:armwave.c     **** 
 608:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 609:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 610:armwave.c     ****         }
 611:armwave.c     ****     }
 612:armwave.c     **** }
 613:armwave.c     **** #endif
 614:armwave.c     **** 
 615:armwave.c     **** /*
 616:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 617:armwave.c     ****  */
 618:armwave.c     **** void armwave_cleanup()
 619:armwave.c     **** {
 3159              		.loc 1 619 1 view -0
 3160              		.cfi_startproc
 3161              		@ args = 0, pretend = 0, frame = 0
 3162              		@ frame_needed = 0, uses_anonymous_args = 0
 620:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3163              		.loc 1 620 5 view .LVU805
 3164              	@ armwave.c:619: {
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3165              		.loc 1 619 1 is_stmt 0 view .LVU806
 3166 0e50 10402DE9 		push	{r4, lr}	@
 3167              		.cfi_def_cfa_offset 8
 3168              		.cfi_offset 4, -8
 3169              		.cfi_offset 14, -4
 3170              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3171              		.loc 1 620 25 view .LVU807
 3172 0e54 34409FE5 		ldr	r4, .L190	@ tmp114,
 3173              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3174              		.loc 1 620 5 view .LVU808
 3175 0e58 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3176 0e5c FEFFFFEB 		bl	free		@
 3177              	.LVL196:
 621:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3178              		.loc 1 621 5 is_stmt 1 view .LVU809
 3179 0e60 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3180 0e64 FEFFFFEB 		bl	free		@
 3181              	.LVL197:
 622:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3182              		.loc 1 622 5 view .LVU810
 3183 0e68 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3184 0e6c FEFFFFEB 		bl	free		@
 3185              	.LVL198:
 623:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3186              		.loc 1 623 5 view .LVU811
 3187 0e70 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3188 0e74 FEFFFFEB 		bl	free		@
 3189              	.LVL199:
 624:armwave.c     **** 
 625:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3190              		.loc 1 625 5 view .LVU812
 3191              	@ armwave.c:625:     g_armwave_state.out_pixbuf = NULL;
 3192              		.loc 1 625 32 is_stmt 0 view .LVU813
 3193 0e78 0030A0E3 		mov	r3, #0	@ tmp123,
 3194 0e7c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 626:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3195              		.loc 1 626 5 is_stmt 1 view .LVU814
 3196              	@ armwave.c:626:     g_armwave_state.ch1_buffer = NULL;
 3197              		.loc 1 626 32 is_stmt 0 view .LVU815
 3198 0e80 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 627:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3199              		.loc 1 627 5 is_stmt 1 view .LVU816
 3200              	@ armwave.c:627:     g_armwave_state.xcoord_to_xpixel = NULL;
 3201              		.loc 1 627 38 is_stmt 0 view .LVU817
 3202 0e84 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 628:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3203              		.loc 1 628 5 is_stmt 1 view .LVU818
 3204              	@ armwave.c:628:     g_armwave_state.test_wave_buffer = NULL;
 3205              		.loc 1 628 38 is_stmt 0 view .LVU819
 3206 0e88 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3207              	@ armwave.c:629: }
 629:armwave.c     **** }
 3208              		.loc 1 629 1 view .LVU820
 3209 0e8c 1080BDE8 		pop	{r4, pc}	@
 3210              	.L191:
 3211              		.align	2
 3212              	.L190:
 3213 0e90 00000000 		.word	g_armwave_state
 3214              		.cfi_endproc
 3215              	.LFE76:
 3217              		.comm	gamma_table,256,4
 3218              		.comm	g_armwave_state,136,4
 3219              		.section	.rodata
 3220              		.align	2
 3221              		.set	.LANCHOR0,. + 0
 3224              	__PRETTY_FUNCTION__.17095:
 3225 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3225      6176655F 
 3225      66696C6C 
 3225      5F706978 
 3225      6275665F 
 3226 001b 00       		.space	1
 3229              	__PRETTY_FUNCTION__.17125:
 3230 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3230      6176655F 
 3230      73657475 
 3230      705F7265 
 3230      6E646572 
 3231 0031 000000   		.space	3
 3234              	__PRETTY_FUNCTION__.17132:
 3235 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3235      6176655F 
 3235      7365745F 
 3235      77617665 
 3235      5F706F69 
 3236 004d 000000   		.space	3
 3239              	__PRETTY_FUNCTION__.17139:
 3240 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3240      6176655F 
 3240      7365745F 
 3240      77617665 
 3240      5F706F69 
 3241              		.section	.rodata.str1.4,"aMS",%progbits,1
 3242              		.align	2
 3243              	.LC0:
 3244 0000 76302E30 		.ascii	"v0.0.1\000"
 3244      2E3100
 3245 0007 00       		.space	1
 3246              	.LC1:
 3247 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3247      61766520 
 3247      76657273 
 3247      696F6E3A 
 3247      2025730A 
 3248 001d 000000   		.space	3
 3249              	.LC2:
 3250 0020 61726D77 		.ascii	"armwave.c\000"
 3250      6176652E 
 3250      6300
 3251 002a 0000     		.space	2
 3252              	.LC3:
 3253 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3253      62756666 
 3253      65722021 
 3253      3D204E55 
 3253      4C4C00
 3254 003f 00       		.space	1
 3255              	.LC4:
 3256 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3256      20653D25 
 3256      6420773D 
 3256      25642077 
 3256      733D2564 
 3257              	.LC5:
 3258 006c 73746172 		.ascii	"start_point < end_point\000"
 3258      745F706F 
 3258      696E7420 
 3258      3C20656E 
 3258      645F706F 
 3259              	.LC6:
 3260 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3260      7566665F 
 3260      73697A65 
 3260      3D25642C 
 3260      20636D70 
 3261 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3261      5F776964 
 3261      74683D25 
 3261      642C2077 
 3261      6176655F 
 3262 00e1 000000   		.space	3
 3263              	.LC7:
 3264 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3264      6D776176 
 3264      655F7374 
 3264      6174652E 
 3264      6368315F 
 3265 0107 00       		.space	1
 3266              	.LC8:
 3267 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3267      6D776176 
 3267      655F7374 
 3267      6174652E 
 3267      78636F6F 
 3268 0131 000000   		.space	3
 3269              	.LC9:
 3270 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3270      3A203078 
 3270      25303878 
 3270      20307825 
 3270      30387820 
 3271              	.LC10:
 3272 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3272      5F627566 
 3272      66657220 
 3272      213D204E 
 3272      554C4C00 
 3273              	.LC11:
 3274 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3274      6176655F 
 3274      7365745F 
 3274      77617665 
 3274      5F706F69 
 3275 019f 78636565 		.ascii	"xceeded\000"
 3275      64656400 
 3276 01a7 00       		.space	1
 3277              	.LC12:
 3278 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3278      5F627566 
 3278      6665725F 
 3278      70747220 
 3278      213D2030 
 3279 01bd 000000   		.space	3
 3280              	.LC13:
 3281 01c0 776200   		.ascii	"wb\000"
 3282 01c3 00       		.space	1
 3283              	.LC14:
 3284 01c4 50330A00 		.ascii	"P3\012\000"
 3285              	.LC15:
 3286 01c8 25642025 		.ascii	"%d %d\012\000"
 3286      640A00
 3287 01cf 00       		.space	1
 3288              	.LC16:
 3289 01d0 3235350A 		.ascii	"255\012\000"
 3289      00
 3290 01d5 000000   		.space	3
 3291              	.LC17:
 3292 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3292      25336420 
 3292      2533640A 
 3292      00
 3293 01e5 000000   		.space	3
 3294              	.LC18:
 3295 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3295      6176655F 
 3295      74657374 
 3295      5F627566 
 3295      6665725F 
 3296 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3296      20627566 
 3296      66657220 
 3296      28256420 
 3296      62797465 
 3297              	.LC19:
 3298 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3298      6176655F 
 3298      66696C6C 
 3298      5F706978 
 3298      6275665F 
 3299 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3299      20666169 
 3299      6C65642C 
 3299      20726574 
 3299      75726E69 
 3300 028e 0000     		.space	2
 3301              	.LC20:
 3302 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3302      756C6174 
 3302      696E6720 
 3302      74657374 
 3302      20736574 
 3303              		.text
 3304              	.Letext0:
 3305              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3306              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3307              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3308              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3309              		.file 7 "/usr/include/stdio.h"
 3310              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3311              		.file 9 "/usr/include/errno.h"
 3312              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3313              		.file 11 "/usr/include/unistd.h"
 3314              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3315              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3316              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3317              		.file 15 "/usr/include/math.h"
 3318              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3319              		.file 17 "/usr/include/time.h"
 3320              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3321              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3322              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3323              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3324              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3325              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3326              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3327              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3328              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3329              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3330              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3331              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3332              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3333              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3334              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3335              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3336              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3337              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3338              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3339              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3340              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3341              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3342              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3343              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3344              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3345              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3346              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3347              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3348              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3349              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3350              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3351              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3352              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3353              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3354              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3355              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3356              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3357              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3358              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3359              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3360              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3361              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3362              		.file 60 "/usr/local/include/python3.8/context.h"
 3363              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3364              		.file 62 "/usr/local/include/python3.8/code.h"
 3365              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3366              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3367              		.file 65 "/usr/local/include/python3.8/import.h"
 3368              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3369              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3370              		.file 68 "/usr/include/malloc.h"
 3371              		.file 69 "armwave.h"
 3372              		.file 70 "/usr/include/stdlib.h"
 3373              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3374              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3375              		.file 73 "<built-in>"
 3376              		.file 74 "/usr/include/assert.h"
