   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C0C19FE5 		ldr	ip, .L27	@ tmp318,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 130 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp216, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp218, tmp216,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 130 view .LVU41
 279 00c8 950305E0 		mul	r5, r5, r3	@ _7, g_armwave_state.bitdepth_height, tmp218
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 610000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 5F00000A 		beq	.L11		@,
 289 00dc 043040E2 		sub	r3, r0, #4	@ tmp317, slice_y,
 290 00e0 0C308DE5 		str	r3, [sp, #12]	@ tmp317, %sfp
 291              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 292              		.loc 1 79 11 view .LVU45
 293 00e4 0030A0E3 		mov	r3, #0	@ w,
 294 00e8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 295              	.LVL8:
 296              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 297              		.loc 1 80 9 is_stmt 1 view .LVU46
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 298              		.loc 1 84 9 view .LVU47
 299              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 64 is_stmt 0 view .LVU48
 301 00ec 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 302 00f0 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 303 00f4 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp317, %sfp
 304 00f8 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 305 00fc 93E223E0 		mla	r3, r3, r2, lr	@ tmp228, g_armwave_state.wave_stride, w, tmp317
 306              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 84 16 view .LVU49
 308 0100 0000A0E3 		mov	r0, #0	@ yy,
 309 0104 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 310 0108 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 311              	.LVL9:
 312              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 313              		.loc 1 87 13 is_stmt 1 view .LVU50
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 314              		.loc 1 101 17 view .LVU51
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 315              		.loc 1 106 17 view .LVU52
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 316              		.loc 1 101 17 view .LVU53
 317              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 318              		.loc 1 101 17 view .LVU55
 319              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 320              		.loc 1 101 17 view .LVU57
 321              		.loc 1 106 17 view .LVU58
 322              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 323              		.loc 1 87 18 is_stmt 0 view .LVU59
 324 010c 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 325              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 326              		.loc 1 102 34 view .LVU60
 327 0110 019080E2 		add	r9, r0, #1	@ tmp259, yy,
 328 0114 028080E2 		add	r8, r0, #2	@ tmp281, yy,
 329              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 330              		.loc 1 87 18 view .LVU61
 331 0118 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _185, offset: 0B]
 332              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 102 34 view .LVU62
 334 011c 037080E2 		add	r7, r0, #3	@ tmp301, yy,
 335              	.LVL10:
 336              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 337              		.loc 1 94 20 view .LVU63
 338 0120 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 339              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 340              		.loc 1 87 18 view .LVU64
 341 0124 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 342              	.LVL11:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 343              		.loc 1 89 13 is_stmt 1 view .LVU65
  91:armwave.c     ****                 
 344              		.loc 1 91 17 view .LVU66
  94:armwave.c     ****                     continue;
 345              		.loc 1 94 17 view .LVU67
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 is_stmt 0 view .LVU68
 348 0128 0120A003 		moveq	r2, #1	@ tmp231,
 349 012c 0020A013 		movne	r2, #0	@ tmp231,
 350              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 351              		.loc 1 94 19 view .LVU69
 352 0130 FF005AE3 		cmp	r10, #255	@ scale_value,
 353 0134 01208203 		orreq	r2, r2, #1	@,, tmp236, tmp231
 354 0138 000052E3 		cmp	r2, #0	@ tmp236,
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU70
 357 013c 05B08AE0 		add	fp, r10, r5	@ tmp244, scale_value, _7
 358              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 359              		.loc 1 107 22 view .LVU71
 360 0140 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 361 0144 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 362              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 363              		.loc 1 94 19 view .LVU72
 364 0148 3900001A 		bne	.L20		@,
 365              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 366              		.loc 1 102 34 view .LVU73
 367 014c 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 369              		.loc 1 106 47 view .LVU74
 370 0150 40609CE5 		ldr	r6, [ip, #64]	@ tmp330, g_armwave_state.bitdepth_height
 371              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 372              		.loc 1 94 20 view .LVU75
 373 0154 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 374              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 375              		.loc 1 102 34 view .LVU76
 376 0158 920002E0 		mul	r2, r2, r0	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 377              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 378              		.loc 1 106 47 view .LVU77
 379 015c 05A084E0 		add	r10, r4, r5	@ tmp266, scale_value, _7
 380              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 381              		.loc 1 102 74 view .LVU78
 382 0160 2228A0E1 		lsr	r2, r2, #16	@ tmp240, tmp238,
 383              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 384              		.loc 1 106 47 view .LVU79
 385 0164 96B222E0 		mla	r2, r6, r2, fp	@ tmp245, tmp330, tmp240, tmp244
 386              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 387              		.loc 1 94 20 view .LVU80
 388 0168 01B0A003 		moveq	fp, #1	@ tmp252,
 389 016c 00B0A013 		movne	fp, #0	@ tmp252,
 390              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 391              		.loc 1 94 19 view .LVU81
 392 0170 FF0054E3 		cmp	r4, #255	@ scale_value,
 393 0174 0B40A011 		movne	r4, fp	@, tmp257, tmp252
 394 0178 01408B03 		orreq	r4, fp, #1	@,, tmp257, tmp252
 395              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 396              		.loc 1 106 47 view .LVU82
 397 017c 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_79, *_79
 398              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 399              		.loc 1 94 19 view .LVU83
 400 0180 000054E3 		cmp	r4, #0	@ tmp257,
 401              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 402              		.loc 1 106 47 view .LVU84
 403 0184 01B08BE2 		add	fp, fp, #1	@ tmp248, *_79,
 404 0188 02B0C1E7 		strb	fp, [r1, r2]	@ tmp248, *_79
 405              	.LVL12:
 406              		.loc 1 107 17 is_stmt 1 view .LVU85
  91:armwave.c     ****                 
 407              		.loc 1 91 17 view .LVU86
  94:armwave.c     ****                     continue;
 408              		.loc 1 94 17 view .LVU87
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 is_stmt 0 view .LVU88
 411 018c 2800001A 		bne	.L20		@,
 412              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 413              		.loc 1 102 34 view .LVU89
 414 0190 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 99 view .LVU90
 417 0194 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 418              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 419              		.loc 1 94 20 view .LVU91
 420 0198 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 421              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 422              		.loc 1 102 34 view .LVU92
 423 019c 920909E0 		mul	r9, r2, r9	@ tmp260, g_armwave_state.cmp_x_bitdepth_scale, tmp259
 424              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 425              		.loc 1 94 20 view .LVU93
 426 01a0 0120A003 		moveq	r2, #1	@ tmp274,
 427 01a4 0020A013 		movne	r2, #0	@ tmp274,
 428              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 429              		.loc 1 102 74 view .LVU94
 430 01a8 2998A0E1 		lsr	r9, r9, #16	@ tmp262, tmp260,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU95
 433 01ac 05408EE0 		add	r4, lr, r5	@ tmp288, scale_value, _7
 434 01b0 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp267, g_armwave_state.bitdepth_height, tmp262, tmp266
 435              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 19 view .LVU96
 437 01b4 FF005EE3 		cmp	lr, #255	@ scale_value,
 438 01b8 02E0A011 		movne	lr, r2	@, tmp279, tmp274
 439 01bc 01E08203 		orreq	lr, r2, #1	@,, tmp279, tmp274
 440 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 441              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 442              		.loc 1 106 47 view .LVU97
 443 01c4 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_110, *_110
 444 01c8 012082E2 		add	r2, r2, #1	@ tmp270, *_110,
 445 01cc 0A20C1E7 		strb	r2, [r1, r10]	@ tmp270, *_110
 446              		.loc 1 107 17 is_stmt 1 view .LVU98
 447              	.LVL13:
  91:armwave.c     ****                 
 448              		.loc 1 91 17 view .LVU99
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 17 view .LVU100
 450              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 451              		.loc 1 94 19 is_stmt 0 view .LVU101
 452 01d0 1700001A 		bne	.L20		@,
 453              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 454              		.loc 1 102 34 view .LVU102
 455 01d4 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 456              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 20 view .LVU103
 458 01d8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 459              	.LVL14:
 460              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 461              		.loc 1 106 47 view .LVU104
 462 01dc 032085E0 		add	r2, r5, r3	@ tmp309, _7, word
 463              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 464              		.loc 1 102 34 view .LVU105
 465 01e0 9E0808E0 		mul	r8, lr, r8	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 99 view .LVU106
 468 01e4 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 74 view .LVU107
 471 01e8 2888A0E1 		lsr	r8, r8, #16	@ tmp284, tmp282,
 472              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 473              		.loc 1 106 47 view .LVU108
 474 01ec 9E4828E0 		mla	r8, lr, r8, r4	@ tmp289, g_armwave_state.bitdepth_height, tmp284, tmp288
 475              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 476              		.loc 1 94 20 view .LVU109
 477 01f0 01E0A003 		moveq	lr, #1	@ tmp295,
 478 01f4 00E0A013 		movne	lr, #0	@ tmp295,
 479              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 480              		.loc 1 94 19 view .LVU110
 481 01f8 FF0053E3 		cmp	r3, #255	@ word,
 482 01fc 01E08E03 		orreq	lr, lr, #1	@,, tmp300, tmp295
 483              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 484              		.loc 1 106 47 view .LVU111
 485 0200 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_141, *_141
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 19 view .LVU112
 488 0204 00005EE3 		cmp	lr, #0	@ tmp300,
 489              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 490              		.loc 1 106 47 view .LVU113
 491 0208 013083E2 		add	r3, r3, #1	@ tmp292, *_141,
 492 020c 0830C1E7 		strb	r3, [r1, r8]	@ tmp292, *_141
 493              		.loc 1 107 17 is_stmt 1 view .LVU114
 494              	.LVL15:
  91:armwave.c     ****                 
 495              		.loc 1 91 17 view .LVU115
  94:armwave.c     ****                     continue;
 496              		.loc 1 94 17 view .LVU116
 497              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 498              		.loc 1 94 19 is_stmt 0 view .LVU117
 499 0210 0700001A 		bne	.L20		@,
 500              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 501              		.loc 1 102 34 view .LVU118
 502 0214 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 99 view .LVU119
 505 0218 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 34 view .LVU120
 508 021c 930707E0 		mul	r7, r3, r7	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 74 view .LVU121
 511 0220 2778A0E1 		lsr	r7, r7, #16	@ tmp305, tmp303,
 512              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 513              		.loc 1 106 47 view .LVU122
 514 0224 9E2727E0 		mla	r7, lr, r7, r2	@ tmp310, g_armwave_state.bitdepth_height, tmp305, tmp309
 515 0228 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_172, *_172
 516 022c 013083E2 		add	r3, r3, #1	@ tmp313, *_172,
 517 0230 0730C1E7 		strb	r3, [r1, r7]	@ tmp313, *_172
 518              		.loc 1 107 17 is_stmt 1 view .LVU123
 519              	.LVL16:
 520              	.L20:
 521              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 522              		.loc 1 84 9 is_stmt 0 view .LVU124
 523 0234 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 37 view .LVU125
 526 0238 040080E2 		add	r0, r0, #4	@ yy, yy,
 527              	.LVL17:
 528              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 529              		.loc 1 84 9 view .LVU126
 530 023c 000053E1 		cmp	r3, r0	@ height, yy
 531 0240 B1FFFF8A 		bhi	.L17		@,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 44 view .LVU127
 534 0244 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 5 view .LVU128
 537 0248 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU129
 540 024c 012082E2 		add	r2, r2, #1	@ w, w,
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 5 view .LVU130
 543 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 44 view .LVU131
 546 0254 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 547              	.LVL18:
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 view .LVU132
 550 0258 A3FFFFBA 		blt	.L18		@,
 551              	.LVL19:
 552              	.L11:
 553              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 554              		.loc 1 111 1 view .LVU133
 555 025c 14D08DE2 		add	sp, sp, #20	@,,
 556              		.cfi_def_cfa_offset 36
 557              		@ sp needed	@
 558 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 559              	.LVL20:
 560              	.L28:
 561              		.loc 1 111 1 view .LVU134
 562              		.align	2
 563              	.L27:
 564 0264 00000000 		.word	g_armwave_state
 565              		.cfi_endproc
 566              	.LFE59:
 568              		.align	2
 569              		.global	armwave_fill_pixbuf_scaled
 570              		.syntax unified
 571              		.arm
 572              		.fpu vfp
 574              	armwave_fill_pixbuf_scaled:
 575              	.LVL21:
 576              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 577              		.loc 1 173 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 581              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 582              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b;
 583              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     uint16_t value; 
 584              		.loc 1 178 5 view .LVU139
 179:armwave.c     ****     // uint8_t row;
 180:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 180 5 view .LVU140
 586              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 587              		.loc 1 173 1 is_stmt 0 view .LVU141
 588 0268 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 589              		.cfi_def_cfa_offset 36
 590              		.cfi_offset 4, -36
 591              		.cfi_offset 5, -32
 592              		.cfi_offset 6, -28
 593              		.cfi_offset 7, -24
 594              		.cfi_offset 8, -20
 595              		.cfi_offset 9, -16
 596              		.cfi_offset 10, -12
 597              		.cfi_offset 11, -8
 598              		.cfi_offset 14, -4
 599              	@ armwave.c:184:     assert(out_buffer != NULL);
 181:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 182:armwave.c     ****     uint32_t offset;
 183:armwave.c     **** 
 184:armwave.c     ****     assert(out_buffer != NULL);
 600              		.loc 1 184 5 view .LVU142
 601 026c 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 602              	@ armwave.c:180:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 603              		.loc 1 180 15 view .LVU143
 604 0270 6C519FE5 		ldr	r5, .L49	@ tmp220,
 605              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 606              		.loc 1 173 1 view .LVU144
 607 0274 0CD04DE2 		sub	sp, sp, #12	@,,
 608              		.cfi_def_cfa_offset 48
 609              	@ armwave.c:180:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 610              		.loc 1 180 15 view .LVU145
 611 0278 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 612              	.LVL22:
 181:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 613              		.loc 1 181 5 is_stmt 1 view .LVU146
 182:armwave.c     **** 
 614              		.loc 1 182 5 view .LVU147
 615              		.loc 1 184 5 view .LVU148
 616 027c 5300000A 		beq	.L47		@,
 185:armwave.c     **** 
 186:armwave.c     ****     // we don't really want to be doing this if possible
 187:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 617              		.loc 1 187 5 view .LVU149
 618              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 619              		.loc 1 187 59 is_stmt 0 view .LVU150
 620 0280 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 621 0284 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 622              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 623              		.loc 1 187 5 view .LVU151
 624 0288 0010A0E3 		mov	r1, #0	@,
 625              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 626              		.loc 1 187 59 view .LVU152
 627 028c 920302E0 		mul	r2, r2, r3	@ tmp180, g_armwave_state.target_height, g_armwave_state.target_width
 628              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 629              		.loc 1 187 5 view .LVU153
 630 0290 0221A0E1 		lsl	r2, r2, #2	@, tmp180,
 631 0294 FEFFFFEB 		bl	memset		@
 632              	.LVL23:
 188:armwave.c     **** 
 189:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 633              		.loc 1 189 5 is_stmt 1 view .LVU154
 634              	@ armwave.c:189:     npix = g_armwave_state.target_width * 256; 
 635              		.loc 1 189 10 is_stmt 0 view .LVU155
 636 0298 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 637 029c 0004A0E1 		lsl	r0, r0, #8	@ npix, g_armwave_state.target_width,
 638              	.LVL24:
 190:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 191:armwave.c     **** 
 192:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 639              		.loc 1 192 5 is_stmt 1 view .LVU156
 640              		.loc 1 192 5 is_stmt 0 view .LVU157
 641 02a0 000050E3 		cmp	r0, #0	@ npix,
 642 02a4 0D0000DA 		ble	.L29		@,
 643              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each 16-bit word within.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 2; w++) {
 199:armwave.c     ****                 value = wave_word & 0xffff;
 200:armwave.c     ****                 wave_word >>= 16;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 644              		.loc 1 204 52 view .LVU158
 645 02a8 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 646              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 647              		.loc 1 203 52 view .LVU159
 648 02ac FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 649              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // TODO: Replace this FP math with integer math: big performance hit converting
 215:armwave.c     ****                     nsub = (n + w);
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 650              		.loc 1 216 57 view .LVU160
 651 02b0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 652              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 653              		.loc 1 204 52 view .LVU161
 654 02b4 00308DE5 		str	r3, [sp]	@ _15, %sfp
 655              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 656              		.loc 1 205 52 view .LVU162
 657 02b8 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 658              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 659              		.loc 1 192 11 view .LVU163
 660 02bc 0020A0E3 		mov	r2, #0	@ n,
 661              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 662              		.loc 1 205 52 view .LVU164
 663 02c0 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 664              	.LVL25:
 665              	.L36:
 195:armwave.c     **** 
 666              		.loc 1 195 9 is_stmt 1 view .LVU165
 667              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 668              		.loc 1 195 19 is_stmt 0 view .LVU166
 669 02c4 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 670              	.LVL26:
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 671              		.loc 1 197 9 is_stmt 1 view .LVU167
 672              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 673              		.loc 1 197 11 is_stmt 0 view .LVU168
 674 02c8 000053E3 		cmp	r3, #0	@ wave_word,
 675              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 676              		.loc 1 198 19 view .LVU169
 677 02cc 00E0A013 		movne	lr, #0	@ w,
 678              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 679              		.loc 1 197 11 view .LVU170
 680 02d0 0400001A 		bne	.L35		@,
 681              	.L32:
 682              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 683              		.loc 1 192 28 view .LVU171
 684 02d4 022082E2 		add	r2, r2, #2	@ n, n,
 685              	.LVL27:
 686              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 687              		.loc 1 192 5 view .LVU172
 688 02d8 020050E1 		cmp	r0, r2	@ npix, n
 689 02dc F8FFFFCA 		bgt	.L36		@,
 690              	.LVL28:
 691              	.L29:
 692              	@ armwave.c:228: }
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                 }
 225:armwave.c     ****             }
 226:armwave.c     ****         }
 227:armwave.c     ****     }
 228:armwave.c     **** }
 693              		.loc 1 228 1 view .LVU173
 694 02e0 0CD08DE2 		add	sp, sp, #12	@,,
 695              		.cfi_remember_state
 696              		.cfi_def_cfa_offset 36
 697              		@ sp needed	@
 698 02e4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 699              	.LVL29:
 700              	.L35:
 701              		.cfi_restore_state
 199:armwave.c     ****                 wave_word >>= 16;
 702              		.loc 1 199 17 is_stmt 1 view .LVU174
 200:armwave.c     **** 
 703              		.loc 1 200 17 view .LVU175
 704              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 705              		.loc 1 202 19 is_stmt 0 view .LVU176
 706 02e8 7310FFE6 		uxth	r1, r3	@ wave_word, wave_word
 707 02ec 000051E3 		cmp	r1, #0	@ wave_word,
 708              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 709              		.loc 1 200 27 view .LVU177
 710 02f0 23C8A0E1 		lsr	ip, r3, #16	@ wave_word, wave_word,
 711              	.LVL30:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 712              		.loc 1 202 17 is_stmt 1 view .LVU178
 713              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 714              		.loc 1 202 19 is_stmt 0 view .LVU179
 715 02f4 0700001A 		bne	.L48		@,
 716              	.LVL31:
 717              	.L33:
 718              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 719              		.loc 1 198 13 view .LVU180
 720 02f8 01005EE3 		cmp	lr, #1	@ w,
 721              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 722              		.loc 1 200 27 view .LVU181
 723 02fc 0C30A0E1 		mov	r3, ip	@ wave_word, wave_word
 724              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 725              		.loc 1 198 13 view .LVU182
 726 0300 F3FFFF0A 		beq	.L32		@,
 727              	.LVL32:
 728              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 729              		.loc 1 202 19 view .LVU183
 730 0304 7310FFE6 		uxth	r1, r3	@ wave_word, wave_word
 731 0308 000051E3 		cmp	r1, #0	@ wave_word,
 732 030c 01E0A0E3 		mov	lr, #1	@ w,
 733              	.LVL33:
 199:armwave.c     ****                 wave_word >>= 16;
 734              		.loc 1 199 17 is_stmt 1 view .LVU184
 200:armwave.c     **** 
 735              		.loc 1 200 17 view .LVU185
 736              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 737              		.loc 1 200 27 is_stmt 0 view .LVU186
 738 0310 23C8A0E1 		lsr	ip, r3, #16	@ wave_word, wave_word,
 739              	.LVL34:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 740              		.loc 1 202 17 is_stmt 1 view .LVU187
 741              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 202 19 is_stmt 0 view .LVU188
 743 0314 F7FFFF0A 		beq	.L33		@,
 744              	.L48:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 745              		.loc 1 203 21 is_stmt 1 view .LVU189
 746 0318 0E9082E0 		add	r9, r2, lr	@ _126, n, w
 747              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 748              		.loc 1 203 55 is_stmt 0 view .LVU190
 749 031c 0130A0E1 		mov	r3, r1	@ _12, wave_word
 750              	.LVL35:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 751              		.loc 1 204 21 is_stmt 1 view .LVU191
 205:armwave.c     **** 
 752              		.loc 1 205 21 view .LVU192
 207:armwave.c     ****                     g = MIN(gg, 255);
 753              		.loc 1 207 21 view .LVU193
 208:armwave.c     ****                     b = MIN(bb, 255);
 754              		.loc 1 208 21 view .LVU194
 209:armwave.c     **** 
 755              		.loc 1 209 21 view .LVU195
 212:armwave.c     **** 
 756              		.loc 1 212 21 view .LVU196
 757              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 216 32 is_stmt 0 view .LVU197
 759 0320 7910EFE6 		uxtb	r1, r9	@ _30, _126
 760              	.LVL36:
 761              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 762              		.loc 1 217 41 view .LVU198
 763 0324 017081E2 		add	r7, r1, #1	@ tmp213, _30,
 764              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 765              		.loc 1 216 40 view .LVU199
 766 0328 901A07EE 		vmov	s15, r1	@ int	@ _30, _30
 767              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 768              		.loc 1 217 41 view .LVU200
 769 032c 107A07EE 		vmov	s14, r7	@ int	@ tmp213, tmp213
 770              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 771              		.loc 1 205 55 view .LVU201
 772 0330 04109DE5 		ldr	r1, [sp, #4]	@ _18, %sfp
 773              	@ armwave.c:218:                     xx = (nsub >> 8);
 218:armwave.c     **** 
 774              		.loc 1 218 32 view .LVU202
 775 0334 4994A0E1 		asr	r9, r9, #8	@ xx, _126,
 776              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 777              		.loc 1 216 40 view .LVU203
 778 0338 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp211, _30
 779              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 780              		.loc 1 217 46 view .LVU204
 781 033c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp214, tmp213
 782              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 783              		.loc 1 205 55 view .LVU205
 784 0340 910307E0 		mul	r7, r1, r3	@ tmp198, _18, _12
 785              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 786              		.loc 1 204 55 view .LVU206
 787 0344 00109DE5 		ldr	r1, [sp]	@ _15, %sfp
 788              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 789              		.loc 1 205 24 view .LVU207
 790 0348 4774A0E1 		asr	r7, r7, #8	@ bb, tmp198,
 791              	.LVL37:
 792              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 793              		.loc 1 204 55 view .LVU208
 794 034c 91030AE0 		mul	r10, r1, r3	@ tmp202, _15, _12
 795              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 796              		.loc 1 216 40 view .LVU209
 797 0350 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp212, tmp211, _32
 798              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 799              		.loc 1 217 46 view .LVU210
 800 0354 267A27EE 		vmul.f32	s14, s14, s13	@ tmp215, tmp214, _32
 801              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 802              		.loc 1 203 55 view .LVU211
 803 0358 930B03E0 		mul	r3, r3, fp	@ tmp208, _12, _11
 804              	.LVL38:
 805              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 806              		.loc 1 209 25 view .LVU212
 807 035c FF0057E3 		cmp	r7, #255	@ bb,
 808              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 809              		.loc 1 204 24 view .LVU213
 810 0360 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp202,
 811              	.LVL39:
 812              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 813              		.loc 1 203 24 view .LVU214
 814 0364 4314A0E1 		asr	r1, r3, #8	@ rr, tmp208,
 815              	.LVL40:
 816              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 817              		.loc 1 209 25 view .LVU215
 818 0368 FF70A0A3 		movge	r7, #255	@ bb,
 819              	.LVL41:
 820              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 821              		.loc 1 216 24 view .LVU216
 822 036c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp212
 823              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 824              		.loc 1 208 25 view .LVU217
 825 0370 FF005AE3 		cmp	r10, #255	@ gg,
 826 0374 FFA0A0A3 		movge	r10, #255	@ gg,
 827              	.LVL42:
 828              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 829              		.loc 1 207 25 view .LVU218
 830 0378 FF0051E3 		cmp	r1, #255	@ rr,
 831              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 832              		.loc 1 212 56 view .LVU219
 833 037c 0AA4A0E1 		lsl	r10, r10, #8	@ tmp203, gg,
 834              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 835              		.loc 1 207 25 view .LVU220
 836 0380 FF10A0A3 		movge	r1, #255	@ rr,
 837              	.LVL43:
 838              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 839              		.loc 1 212 44 view .LVU221
 840 0384 0778A0E1 		lsl	r7, r7, #16	@ tmp199, bb,
 841 0388 FF7807E2 		and	r7, r7, #16711680	@ tmp200, tmp199,
 842              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 843              		.loc 1 216 24 view .LVU222
 844 038c 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 845              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 846              		.loc 1 217 24 view .LVU223
 847 0390 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp215
 848              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 849              		.loc 1 212 56 view .LVU224
 850 0394 7AA0FFE6 		uxth	r10, r10	@ tmp204, tmp203
 851              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 852              		.loc 1 212 51 view .LVU225
 853 0398 0A7087E1 		orr	r7, r7, r10	@ tmp206, tmp200, tmp204
 854              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 855              		.loc 1 212 62 view .LVU226
 856 039c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 857 03a0 011087E1 		orr	r1, r7, r1	@ tmp210, tmp206, rr
 858              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 859              		.loc 1 212 26 view .LVU227
 860 03a4 FF7481E3 		orr	r7, r1, #-16777216	@ word, tmp210,
 861              	.LVL44:
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 862              		.loc 1 215 21 is_stmt 1 view .LVU228
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 863              		.loc 1 216 21 view .LVU229
 217:armwave.c     ****                     xx = (nsub >> 8);
 864              		.loc 1 217 21 view .LVU230
 865              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 866              		.loc 1 217 24 is_stmt 0 view .LVU231
 867 03a8 908A17EE 		vmov	r8, s15	@ int	@ ye, ye
 868              	.LVL45:
 218:armwave.c     **** 
 869              		.loc 1 218 21 is_stmt 1 view .LVU232
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 870              		.loc 1 220 21 view .LVU233
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 220 21 is_stmt 0 view .LVU234
 872 03ac 080053E1 		cmp	r3, r8	@ yy, ye
 873 03b0 D0FFFF2A 		bcs	.L33		@,
 874              	.LVL46:
 875              	.L34:
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 876              		.loc 1 221 25 is_stmt 1 discriminator 3 view .LVU235
 222:armwave.c     ****                     }
 877              		.loc 1 222 25 discriminator 3 view .LVU236
 878              	@ armwave.c:221:                         offset = (xx + (y * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 879              		.loc 1 221 43 is_stmt 0 discriminator 3 view .LVU237
 880 03b4 581095E5 		ldr	r1, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 881              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 882              		.loc 1 222 43 discriminator 3 view .LVU238
 883 03b8 919321E0 		mla	r1, r1, r3, r9	@ tmp219, g_armwave_state.target_width, yy, xx
 884              	.LVL47:
 885              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 886              		.loc 1 220 42 discriminator 3 view .LVU239
 887 03bc 013083E2 		add	r3, r3, #1	@ yy, yy,
 888              	.LVL48:
 889              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 890              		.loc 1 220 21 discriminator 3 view .LVU240
 891 03c0 030058E1 		cmp	r8, r3	@ ye, yy
 892              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 893              		.loc 1 222 53 discriminator 3 view .LVU241
 894 03c4 017186E7 		str	r7, [r6, r1, lsl #2]	@ word, *_42
 895              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 896              		.loc 1 220 21 discriminator 3 view .LVU242
 897 03c8 F9FFFF1A 		bne	.L34		@,
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 898              		.loc 1 220 21 discriminator 3 view .LVU243
 899 03cc C9FFFFEA 		b	.L33		@
 900              	.LVL49:
 901              	.L47:
 184:armwave.c     **** 
 902              		.loc 1 184 5 is_stmt 1 discriminator 1 view .LVU244
 903 03d0 10309FE5 		ldr	r3, .L49+4	@,
 904 03d4 B820A0E3 		mov	r2, #184	@,
 905 03d8 0C109FE5 		ldr	r1, .L49+8	@,
 906 03dc 0C009FE5 		ldr	r0, .L49+12	@,
 907              	.LVL50:
 184:armwave.c     **** 
 908              		.loc 1 184 5 is_stmt 0 discriminator 1 view .LVU245
 909 03e0 FEFFFFEB 		bl	__assert_fail		@
 910              	.LVL51:
 911              	.L50:
 912              		.align	2
 913              	.L49:
 914 03e4 00000000 		.word	g_armwave_state
 915 03e8 00000000 		.word	.LANCHOR0
 916 03ec 20000000 		.word	.LC2
 917 03f0 2C000000 		.word	.LC3
 918              		.cfi_endproc
 919              	.LFE60:
 921              		.global	__aeabi_idiv
 922              		.align	2
 923              		.global	armwave_generate
 924              		.syntax unified
 925              		.arm
 926              		.fpu vfp
 928              	armwave_generate:
 929              	.LFB61:
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 232:armwave.c     ****  */
 233:armwave.c     **** void armwave_generate()
 234:armwave.c     **** {
 930              		.loc 1 234 1 is_stmt 1 view -0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 16
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 235:armwave.c     ****     uint32_t yy;
 934              		.loc 1 235 5 view .LVU247
 236:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 935              		.loc 1 236 5 view .LVU248
 936              	.LVL52:
 237:armwave.c     **** 
 238:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 937              		.loc 1 238 5 view .LVU249
 938              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 939              		.loc 1 234 1 is_stmt 0 view .LVU250
 940 03f4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 941              		.cfi_def_cfa_offset 36
 942              		.cfi_offset 4, -36
 943              		.cfi_offset 5, -32
 944              		.cfi_offset 6, -28
 945              		.cfi_offset 7, -24
 946              		.cfi_offset 8, -20
 947              		.cfi_offset 9, -16
 948              		.cfi_offset 10, -12
 949              		.cfi_offset 11, -8
 950              		.cfi_offset 14, -4
 951              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 952              		.loc 1 238 5 view .LVU251
 953 03f8 0010A0E3 		mov	r1, #0	@,
 954              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 955              		.loc 1 238 58 view .LVU252
 956 03fc 10829FE5 		ldr	r8, .L70	@ tmp340,
 957              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 958              		.loc 1 234 1 view .LVU253
 959 0400 14D04DE2 		sub	sp, sp, #20	@,,
 960              		.cfi_def_cfa_offset 56
 961              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 962              		.loc 1 238 5 view .LVU254
 963 0404 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 964 0408 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 965 040c FEFFFFEB 		bl	memset		@
 966              	.LVL53:
 239:armwave.c     **** 
 240:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 967              		.loc 1 240 5 is_stmt 1 view .LVU255
 968              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 969              		.loc 1 240 68 is_stmt 0 view .LVU256
 970 0410 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 971              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 972              		.loc 1 240 38 view .LVU257
 973 0414 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 974              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 975              		.loc 1 240 51 view .LVU258
 976 0418 0310A0E1 		mov	r1, r3	@, _34
 977 041c 0500A0E1 		mov	r0, r5	@, prephitmp_217
 978              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 979              		.loc 1 240 68 view .LVU259
 980 0420 00308DE5 		str	r3, [sp]	@ _34, %sfp
 981              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 982              		.loc 1 240 51 view .LVU260
 983 0424 FEFFFFEB 		bl	__aeabi_idiv		@
 984              	.LVL54:
 985              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 986              		.loc 1 240 5 view .LVU261
 987 0428 000050E3 		cmp	r0, #0	@,
 988 042c 7600000A 		beq	.L51		@,
 989 0430 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 990              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 991              		.loc 1 240 12 view .LVU262
 992 0434 0030A0E3 		mov	r3, #0	@ yy,
 993 0438 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 994              	.LVL55:
 995              	.L60:
 241:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 242:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 243:armwave.c     **** 
 244:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 996              		.loc 1 244 9 is_stmt 1 discriminator 3 view .LVU263
 997 043c D020CDE1 		ldrd	r2, [sp]	@, %sfp
 998              	.LBB10:
 999              	.LBB11:
 1000              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1001              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU264
 1002 0440 40C098E5 		ldr	ip, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1003              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1004              		.loc 1 79 5 discriminator 3 view .LVU265
 1005 0444 000054E3 		cmp	r4, #0	@ prephitmp_227,
 1006              	.LBE11:
 1007              	.LBE10:
 1008              	@ armwave.c:244:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1009              		.loc 1 244 9 discriminator 3 view .LVU266
 1010 0448 930202E0 		mul	r2, r3, r2	@ _5, yy, _34
 1011              	.LVL56:
 1012              	.LBB13:
 1013              	.LBI10:
  62:armwave.c     **** {
 1014              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU267
 1015              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1016              		.loc 1 64 5 discriminator 3 view .LVU268
  65:armwave.c     ****     uint8_t *wave_base;
 1017              		.loc 1 65 5 discriminator 3 view .LVU269
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1018              		.loc 1 66 5 discriminator 3 view .LVU270
  67:armwave.c     ****     uint8_t *write_buffer;
 1019              		.loc 1 67 5 discriminator 3 view .LVU271
  68:armwave.c     **** 
 1020              		.loc 1 68 5 discriminator 3 view .LVU272
  71:armwave.c     **** 
 1021              		.loc 1 71 5 discriminator 3 view .LVU273
 1022              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1023              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU274
 1024 044c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1025              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1026              		.loc 1 71 40 discriminator 3 view .LVU275
 1027 0450 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1028              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1029              		.loc 1 71 65 discriminator 3 view .LVU276
 1030 0454 930203E0 		mul	r3, r3, r2	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, _5
 1031              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1032              		.loc 1 71 105 discriminator 3 view .LVU277
 1033 0458 2338A0E1 		lsr	r3, r3, #16	@ tmp240, tmp238,
 1034              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1035              		.loc 1 71 130 discriminator 3 view .LVU278
 1036 045c 9C030CE0 		mul	ip, ip, r3	@ _22, g_armwave_state.bitdepth_height, tmp240
 1037              	.LVL57:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1038              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU279
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1039              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU280
 1040 0460 610000DA 		ble	.L53		@,
 1041              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1042              		.loc 1 79 11 view .LVU281
 1043 0464 0070A0E3 		mov	r7, #0	@ w,
 1044 0468 043042E2 		sub	r3, r2, #4	@ _31, _5,
 1045 046c 08308DE5 		str	r3, [sp, #8]	@ _31, %sfp
 1046              	.LVL58:
 1047              	.L59:
  80:armwave.c     **** 
 1048              		.loc 1 80 9 is_stmt 1 view .LVU282
 1049              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1050              		.loc 1 84 9 is_stmt 0 view .LVU283
 1051 0470 00209DE5 		ldr	r2, [sp]	@ _34, %sfp
 1052              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1053              		.loc 1 80 64 view .LVU284
 1054 0474 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1055              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1056              		.loc 1 84 9 view .LVU285
 1057 0478 000052E3 		cmp	r2, #0	@ _34,
 1058              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1059              		.loc 1 80 36 view .LVU286
 1060 047c 142098E5 		ldr	r2, [r8, #20]	@ _23, g_armwave_state.wave_buffer
 1061              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1062              		.loc 1 80 64 view .LVU287
 1063 0480 930703E0 		mul	r3, r3, r7	@ _27, g_armwave_state.wave_stride, w
 1064              	.LVL59:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1065              		.loc 1 84 9 is_stmt 1 view .LVU288
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1066              		.loc 1 84 9 is_stmt 0 view .LVU289
 1067 0484 5200000A 		beq	.L54		@,
 1068 0488 08009DE5 		ldr	r0, [sp, #8]	@ _31, %sfp
 1069 048c 003083E0 		add	r3, r3, r0	@ tmp246, _27, _31
 1070              	.LVL60:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1071              		.loc 1 84 9 view .LVU290
 1072 0490 036082E0 		add	r6, r2, r3	@ ivtmp.67, _23, tmp246
 1073              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1074              		.loc 1 84 16 view .LVU291
 1075 0494 0000A0E3 		mov	r0, #0	@ yy,
 1076              	.LVL61:
 1077              	.L58:
  87:armwave.c     **** 
 1078              		.loc 1 87 13 is_stmt 1 view .LVU292
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1079              		.loc 1 101 17 view .LVU293
 106:armwave.c     ****                 word >>= 8;
 1080              		.loc 1 106 17 view .LVU294
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1081              		.loc 1 101 17 view .LVU295
 106:armwave.c     ****                 word >>= 8;
 1082              		.loc 1 106 17 view .LVU296
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1083              		.loc 1 101 17 view .LVU297
 106:armwave.c     ****                 word >>= 8;
 1084              		.loc 1 106 17 view .LVU298
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1085              		.loc 1 101 17 view .LVU299
 106:armwave.c     ****                 word >>= 8;
 1086              		.loc 1 106 17 view .LVU300
 1087              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1088              		.loc 1 87 18 is_stmt 0 view .LVU301
 1089 0498 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _260, offset: 0B]
 1090              	.LVL62:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1091              		.loc 1 89 13 is_stmt 1 view .LVU302
  91:armwave.c     ****                 
 1092              		.loc 1 91 17 view .LVU303
  94:armwave.c     ****                     continue;
 1093              		.loc 1 94 17 view .LVU304
 1094              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1095              		.loc 1 102 34 is_stmt 0 view .LVU305
 1096 049c 01A080E2 		add	r10, r0, #1	@ tmp276, yy,
 1097              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1098              		.loc 1 94 20 view .LVU306
 1099 04a0 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1100 04a4 0120A003 		moveq	r2, #1	@ tmp248,
 1101 04a8 0020A013 		movne	r2, #0	@ tmp248,
 1102              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1103              		.loc 1 94 19 view .LVU307
 1104 04ac FF0059E3 		cmp	r9, #255	@ scale_value,
 1105 04b0 01208203 		orreq	r2, r2, #1	@,, tmp253, tmp248
 1106              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1107              		.loc 1 107 22 view .LVU308
 1108 04b4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1109              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1110              		.loc 1 94 19 view .LVU309
 1111 04b8 000052E3 		cmp	r2, #0	@ tmp253,
 1112              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1113              		.loc 1 102 34 view .LVU310
 1114 04bc 025080E2 		add	r5, r0, #2	@ tmp298, yy,
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU311
 1117 04c0 0CB089E0 		add	fp, r9, ip	@ tmp261, scale_value, _22
 1118              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1119              		.loc 1 107 22 view .LVU312
 1120 04c4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1121 04c8 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1122              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1123              		.loc 1 94 19 view .LVU313
 1124 04cc 3B00001A 		bne	.L62		@,
 1125              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1126              		.loc 1 102 34 view .LVU314
 1127 04d0 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1128              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1129              		.loc 1 106 47 view .LVU315
 1130 04d4 40E098E5 		ldr	lr, [r8, #64]	@ tmp360, g_armwave_state.bitdepth_height
 1131              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 20 view .LVU316
 1133 04d8 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1134              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1135              		.loc 1 102 34 view .LVU317
 1136 04dc 920002E0 		mul	r2, r2, r0	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, yy
 1137              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1138              		.loc 1 106 47 view .LVU318
 1139 04e0 0C9084E0 		add	r9, r4, ip	@ tmp283, scale_value, _22
 1140              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1141              		.loc 1 102 74 view .LVU319
 1142 04e4 2228A0E1 		lsr	r2, r2, #16	@ tmp257, tmp255,
 1143              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1144              		.loc 1 106 47 view .LVU320
 1145 04e8 9EB222E0 		mla	r2, lr, r2, fp	@ tmp262, tmp360, tmp257, tmp261
 1146              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1147              		.loc 1 94 20 view .LVU321
 1148 04ec 01B0A003 		moveq	fp, #1	@ tmp269,
 1149 04f0 00B0A013 		movne	fp, #0	@ tmp269,
 1150              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1151              		.loc 1 94 19 view .LVU322
 1152 04f4 FF0054E3 		cmp	r4, #255	@ scale_value,
 1153 04f8 0B40A011 		movne	r4, fp	@, tmp274, tmp269
 1154 04fc 01408B03 		orreq	r4, fp, #1	@,, tmp274, tmp269
 1155              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1156              		.loc 1 106 47 view .LVU323
 1157 0500 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_90, *_90
 1158              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1159              		.loc 1 94 19 view .LVU324
 1160 0504 000054E3 		cmp	r4, #0	@ tmp274,
 1161              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1162              		.loc 1 106 47 view .LVU325
 1163 0508 01B08BE2 		add	fp, fp, #1	@ tmp265, *_90,
 1164 050c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp265, *_90
 1165              	.LVL63:
 107:armwave.c     ****             }
 1166              		.loc 1 107 17 is_stmt 1 view .LVU326
  91:armwave.c     ****                 
 1167              		.loc 1 91 17 view .LVU327
  94:armwave.c     ****                     continue;
 1168              		.loc 1 94 17 view .LVU328
 1169              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1170              		.loc 1 94 19 is_stmt 0 view .LVU329
 1171 0510 2A00001A 		bne	.L62		@,
 1172              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1173              		.loc 1 102 34 view .LVU330
 1174 0514 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1175              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1176              		.loc 1 102 99 view .LVU331
 1177 0518 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1178              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1179              		.loc 1 94 20 view .LVU332
 1180 051c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1181              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1182              		.loc 1 102 34 view .LVU333
 1183 0520 920A0AE0 		mul	r10, r2, r10	@ tmp277, g_armwave_state.cmp_x_bitdepth_scale, tmp276
 1184              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1185              		.loc 1 94 20 view .LVU334
 1186 0524 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1187 0528 0120A003 		moveq	r2, #1	@ tmp291,
 1188              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1189              		.loc 1 102 74 view .LVU335
 1190 052c 2AA8A0E1 		lsr	r10, r10, #16	@ tmp279, tmp277,
 1191              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1192              		.loc 1 94 20 view .LVU336
 1193 0530 0020A013 		movne	r2, #0	@ tmp291,
 1194              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1195              		.loc 1 106 47 view .LVU337
 1196 0534 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp284, g_armwave_state.bitdepth_height, tmp279, tmp283
 1197 0538 0C408EE0 		add	r4, lr, ip	@ tmp305, scale_value, _22
 1198              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1199              		.loc 1 94 19 view .LVU338
 1200 053c FF005EE3 		cmp	lr, #255	@ scale_value,
 1201 0540 02E0A011 		movne	lr, r2	@, tmp296, tmp291
 1202 0544 01E08203 		orreq	lr, r2, #1	@,, tmp296, tmp291
 1203              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1204              		.loc 1 106 47 view .LVU339
 1205 0548 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_121, *_121
 1206              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1207              		.loc 1 94 19 view .LVU340
 1208 054c 00005EE3 		cmp	lr, #0	@ tmp296,
 1209              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1210              		.loc 1 106 47 view .LVU341
 1211 0550 012082E2 		add	r2, r2, #1	@ tmp287, *_121,
 1212 0554 0920C1E7 		strb	r2, [r1, r9]	@ tmp287, *_121
 107:armwave.c     ****             }
 1213              		.loc 1 107 17 is_stmt 1 view .LVU342
 1214              	.LVL64:
  91:armwave.c     ****                 
 1215              		.loc 1 91 17 view .LVU343
  94:armwave.c     ****                     continue;
 1216              		.loc 1 94 17 view .LVU344
 1217              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1218              		.loc 1 94 19 is_stmt 0 view .LVU345
 1219 0558 1800001A 		bne	.L62		@,
 1220              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1221              		.loc 1 102 34 view .LVU346
 1222 055c 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1223              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1224              		.loc 1 94 20 view .LVU347
 1225 0560 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1226              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1227              		.loc 1 106 47 view .LVU348
 1228 0564 03208CE0 		add	r2, ip, r3	@ tmp326, _22, word
 1229              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1230              		.loc 1 102 34 view .LVU349
 1231 0568 9E0505E0 		mul	r5, lr, r5	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 1232              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1233              		.loc 1 102 99 view .LVU350
 1234 056c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1235              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1236              		.loc 1 102 74 view .LVU351
 1237 0570 2558A0E1 		lsr	r5, r5, #16	@ tmp301, tmp299,
 1238              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1239              		.loc 1 106 47 view .LVU352
 1240 0574 9E4525E0 		mla	r5, lr, r5, r4	@ tmp306, g_armwave_state.bitdepth_height, tmp301, tmp305
 1241              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1242              		.loc 1 94 20 view .LVU353
 1243 0578 01E0A003 		moveq	lr, #1	@ tmp312,
 1244 057c 00E0A013 		movne	lr, #0	@ tmp312,
 1245              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1246              		.loc 1 94 19 view .LVU354
 1247 0580 FF0053E3 		cmp	r3, #255	@ word,
 1248 0584 01E08E03 		orreq	lr, lr, #1	@,, tmp317, tmp312
 1249              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1250              		.loc 1 106 47 view .LVU355
 1251 0588 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_152, *_152
 1252              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1253              		.loc 1 94 19 view .LVU356
 1254 058c 00005EE3 		cmp	lr, #0	@ tmp317,
 1255              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1256              		.loc 1 106 47 view .LVU357
 1257 0590 013083E2 		add	r3, r3, #1	@ tmp309, *_152,
 1258 0594 0530C1E7 		strb	r3, [r1, r5]	@ tmp309, *_152
 107:armwave.c     ****             }
 1259              		.loc 1 107 17 is_stmt 1 view .LVU358
 1260              	.LVL65:
  91:armwave.c     ****                 
 1261              		.loc 1 91 17 view .LVU359
  94:armwave.c     ****                     continue;
 1262              		.loc 1 94 17 view .LVU360
 1263              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1264              		.loc 1 94 19 is_stmt 0 view .LVU361
 1265 0598 0800001A 		bne	.L62		@,
 1266              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1267              		.loc 1 102 34 view .LVU362
 1268 059c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1269 05a0 034080E2 		add	r4, r0, #3	@ tmp319, yy,
 1270              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1271              		.loc 1 102 99 view .LVU363
 1272 05a4 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1273              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1274              		.loc 1 102 34 view .LVU364
 1275 05a8 930403E0 		mul	r3, r3, r4	@ tmp320, g_armwave_state.cmp_x_bitdepth_scale, tmp319
 1276              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1277              		.loc 1 102 74 view .LVU365
 1278 05ac 2338A0E1 		lsr	r3, r3, #16	@ tmp322, tmp320,
 1279              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1280              		.loc 1 106 47 view .LVU366
 1281 05b0 9E2323E0 		mla	r3, lr, r3, r2	@ tmp327, g_armwave_state.bitdepth_height, tmp322, tmp326
 1282 05b4 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_183, *_183
 1283 05b8 012082E2 		add	r2, r2, #1	@ tmp330, *_183,
 1284 05bc 0320C1E7 		strb	r2, [r1, r3]	@ tmp330, *_183
 107:armwave.c     ****             }
 1285              		.loc 1 107 17 is_stmt 1 view .LVU367
 1286              	.LVL66:
 1287              	.L62:
 1288              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1289              		.loc 1 84 9 is_stmt 0 view .LVU368
 1290 05c0 00309DE5 		ldr	r3, [sp]	@ _34, %sfp
 1291              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1292              		.loc 1 84 37 view .LVU369
 1293 05c4 040080E2 		add	r0, r0, #4	@ yy, yy,
 1294              	.LVL67:
 1295              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1296              		.loc 1 84 9 view .LVU370
 1297 05c8 000053E1 		cmp	r3, r0	@ _34, yy
 1298 05cc B1FFFF8A 		bhi	.L58		@,
 1299 05d0 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 1300              	.LVL68:
 1301              	.L54:
 1302              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1303              		.loc 1 79 44 view .LVU371
 1304 05d4 017087E2 		add	r7, r7, #1	@ w, w,
 1305              	.LVL69:
 1306              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1307              		.loc 1 79 5 view .LVU372
 1308 05d8 040057E1 		cmp	r7, r4	@ w, prephitmp_227
 1309 05dc A3FFFFBA 		blt	.L59		@,
 1310 05e0 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 1311 05e4 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 1312 05e8 00308DE5 		str	r3, [sp]	@ _34, %sfp
 1313              	.LVL70:
 1314              	.L53:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1315              		.loc 1 79 5 view .LVU373
 1316              	.LBE12:
 1317              	.LBE13:
 245:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1318              		.loc 1 245 9 is_stmt 1 discriminator 3 view .LVU374
 246:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1319              		.loc 1 246 9 discriminator 3 view .LVU375
 1320              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1321              		.loc 1 240 51 is_stmt 0 discriminator 3 view .LVU376
 1322 05ec 00109DE5 		ldr	r1, [sp]	@, %sfp
 1323              	.LVL71:
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1324              		.loc 1 240 51 discriminator 3 view .LVU377
 1325 05f0 0500A0E1 		mov	r0, r5	@, prephitmp_217
 1326 05f4 FEFFFFEB 		bl	__aeabi_idiv		@
 1327              	.LVL72:
 1328              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1329              		.loc 1 240 86 discriminator 3 view .LVU378
 1330 05f8 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1331 05fc 013083E2 		add	r3, r3, #1	@ yy, yy,
 1332 0600 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1333              	.LVL73:
 1334              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1335              		.loc 1 240 5 discriminator 3 view .LVU379
 1336 0604 030050E1 		cmp	r0, r3	@, yy
 1337 0608 8BFFFF8A 		bhi	.L60		@,
 1338              	.LVL74:
 1339              	.L51:
 1340              	@ armwave.c:250: }
 247:armwave.c     ****     }
 248:armwave.c     **** 
 249:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 250:armwave.c     **** }
 1341              		.loc 1 250 1 view .LVU380
 1342 060c 14D08DE2 		add	sp, sp, #20	@,,
 1343              		.cfi_def_cfa_offset 36
 1344              		@ sp needed	@
 1345 0610 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1346              	.L71:
 1347              		.align	2
 1348              	.L70:
 1349 0614 00000000 		.word	g_armwave_state
 1350              		.cfi_endproc
 1351              	.LFE61:
 1353              		.align	2
 1354              		.global	armwave_setup_render
 1355              		.syntax unified
 1356              		.arm
 1357              		.fpu vfp
 1359              	armwave_setup_render:
 1360              	.LVL75:
 1361              	.LFB62:
 251:armwave.c     **** 
 252:armwave.c     **** /*
 253:armwave.c     ****  * Setup the renderer with passed parameters.
 254:armwave.c     ****  */
 255:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 256:armwave.c     **** {
 1362              		.loc 1 256 1 is_stmt 1 view -0
 1363              		.cfi_startproc
 1364              		@ args = 12, pretend = 0, frame = 0
 1365              		@ frame_needed = 0, uses_anonymous_args = 0
 257:armwave.c     ****     uint32_t length, xx;
 1366              		.loc 1 257 5 view .LVU382
 258:armwave.c     ****     float points_per_pixel;
 1367              		.loc 1 258 5 view .LVU383
 259:armwave.c     **** 
 260:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1368              		.loc 1 260 5 view .LVU384
 1369              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1370              		.loc 1 256 1 is_stmt 0 view .LVU385
 1371 0618 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1372              		.cfi_def_cfa_offset 28
 1373              		.cfi_offset 4, -28
 1374              		.cfi_offset 5, -24
 1375              		.cfi_offset 6, -20
 1376              		.cfi_offset 7, -16
 1377              		.cfi_offset 8, -12
 1378              		.cfi_offset 9, -8
 1379              		.cfi_offset 14, -4
 1380 061c 028B2DED 		vpush.64	{d8}	@
 1381              		.cfi_def_cfa_offset 36
 1382              		.cfi_offset 80, -36
 1383              		.cfi_offset 81, -32
 1384 0620 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1385 0624 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1386 0628 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1387 062c 14D04DE2 		sub	sp, sp, #20	@,,
 1388              		.cfi_def_cfa_offset 56
 1389              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1390              		.loc 1 256 1 view .LVU386
 1391 0630 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1392 0634 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1393 0638 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1394              	@ armwave.c:260:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1395              		.loc 1 260 5 view .LVU387
 1396 063c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1397 0640 F460CDE1 		strd	r6, [sp, #4]	@,,
 1398 0644 0230A0E1 		mov	r3, r2	@, waves_max
 1399              	.LVL76:
 1400              		.loc 1 260 5 view .LVU388
 1401 0648 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1402 064c 0120A0E1 		mov	r2, r1	@, end_point
 1403              	.LVL77:
 1404              		.loc 1 260 5 view .LVU389
 1405 0650 0010A0E1 		mov	r1, r0	@, start_point
 1406              	.LVL78:
 1407              		.loc 1 260 5 view .LVU390
 1408 0654 E0019FE5 		ldr	r0, .L86+12	@,
 1409              	.LVL79:
 1410              		.loc 1 260 5 view .LVU391
 1411 0658 FEFFFFEB 		bl	printf		@
 1412              	.LVL80:
 261:armwave.c     **** 
 262:armwave.c     ****     // TODO these asserts should instead raise PyExc
 263:armwave.c     ****     assert(start_point < end_point);
 1413              		.loc 1 263 5 is_stmt 1 view .LVU392
 1414 065c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1415 0660 6300002A 		bcs	.L83		@,
 264:armwave.c     **** 
 265:armwave.c     ****     /*
 266:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 267:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 268:armwave.c     **** 
 269:armwave.c     ****     if(target_height == 256) {
 270:armwave.c     ****         g_armwave_state.row_shift = 8;
 271:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 272:armwave.c     ****     } else if(target_height == 512) {
 273:armwave.c     ****         g_armwave_state.row_shift = 9;
 274:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 275:armwave.c     ****     } else if(target_height == 1024) {
 276:armwave.c     ****         g_armwave_state.row_shift = 10;
 277:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 278:armwave.c     ****     } else if(target_height == 2048) {
 279:armwave.c     ****         g_armwave_state.row_shift = 11;
 280:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 281:armwave.c     ****     }
 282:armwave.c     ****     */
 283:armwave.c     **** 
 284:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 285:armwave.c     ****     g_armwave_state.xstride = target_height;
 1416              		.loc 1 285 5 view .LVU393
 1417              	@ armwave.c:296:     g_armwave_state.wave_length = end_point - start_point;
 286:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 287:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 288:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 289:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 290:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 291:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 292:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 293:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 294:armwave.c     ****     g_armwave_state.target_width = target_width;
 295:armwave.c     ****     g_armwave_state.target_height = target_height;
 296:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1418              		.loc 1 296 45 is_stmt 0 view .LVU394
 1419 0664 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1420              	.LVL81:
 1421              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1422              		.loc 1 286 49 view .LVU395
 1423 0668 706A9FED 		vldr.32	s12, .L86	@ tmp175,
 1424              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 297:armwave.c     **** 
 298:armwave.c     ****     // Calculate compound scaler
 299:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 300:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1425              		.loc 1 300 48 view .LVU396
 1426 066c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1427              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1428              		.loc 1 300 79 view .LVU397
 1429 0670 6F6ADFED 		vldr.32	s13, .L86+4	@ tmp199,
 1430              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1431              		.loc 1 293 90 view .LVU398
 1432 0674 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1433              	@ armwave.c:285:     g_armwave_state.xstride = target_height;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1434              		.loc 1 285 29 view .LVU399
 1435 0678 C0419FE5 		ldr	r4, .L86+16	@ tmp243,
 1436              	.LVL82:
 1437              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1438              		.loc 1 300 48 view .LVU400
 1439 067c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1440              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1441              		.loc 1 286 49 view .LVU401
 1442 0680 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1443              	@ armwave.c:291:     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1444              		.loc 1 291 42 view .LVU402
 1445 0684 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1446              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1447              		.loc 1 293 95 view .LVU403
 1448 0688 033483E0 		add	r3, r3, r3, lsl #8	@ tmp189, tmp186, tmp186,
 1449              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1450              		.loc 1 286 49 view .LVU404
 1451 068c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1452              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1453              		.loc 1 300 48 view .LVU405
 1454 0690 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1455              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 301:armwave.c     **** 
 302:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1456              		.loc 1 302 5 view .LVU406
 1457 0694 0128A0E3 		mov	r2, #65536	@ tmp202,
 1458 0698 04508DE5 		str	r5, [sp, #4]	@ _13,
 1459 069c 00608DE5 		str	r6, [sp]	@ target_width,
 1460              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1461              		.loc 1 300 48 view .LVU407
 1462 06a0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1463              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1464              		.loc 1 293 95 view .LVU408
 1465 06a4 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1466              	@ armwave.c:285:     g_armwave_state.xstride = target_height;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1467              		.loc 1 285 29 view .LVU409
 1468 06a8 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1469              		.loc 1 286 5 is_stmt 1 view .LVU410
 1470              	@ armwave.c:288:     g_armwave_state.wave_stride = wave_stride;
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1471              		.loc 1 288 33 is_stmt 0 view .LVU411
 1472 06ac 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1473              	@ armwave.c:289:     g_armwave_state.waves_max = waves_max;
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1474              		.loc 1 289 31 view .LVU412
 1475 06b0 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1476              	@ armwave.c:290:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1477              		.loc 1 290 27 view .LVU413
 1478 06b4 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1479              	@ armwave.c:295:     g_armwave_state.target_height = target_height;
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1480              		.loc 1 295 35 view .LVU414
 1481 06b8 F865C4E1 		strd	r6, [r4, #88]	@, tmp243,
 1482              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1483              		.loc 1 302 5 view .LVU415
 1484 06bc 08208DE5 		str	r2, [sp, #8]	@ tmp202,
 1485              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1486              		.loc 1 300 48 view .LVU416
 1487 06c0 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1488              	@ armwave.c:292:     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, 
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1489              		.loc 1 292 37 view .LVU417
 1490 06c4 012BA0E3 		mov	r2, #1024	@ tmp185,
 1491              	@ armwave.c:291:     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1492              		.loc 1 291 26 view .LVU418
 1493 06c8 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1494              	@ armwave.c:292:     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, 
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1495              		.loc 1 292 37 view .LVU419
 1496 06cc 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1497              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1498              		.loc 1 302 5 view .LVU420
 1499 06d0 0310A0E1 		mov	r1, r3	@, tmp190
 1500              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1501              		.loc 1 293 34 view .LVU421
 1502 06d4 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1503              	@ armwave.c:296:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     **** 
 1504              		.loc 1 296 33 view .LVU422
 1505 06d8 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1506              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1507              		.loc 1 302 5 view .LVU423
 1508 06dc 60019FE5 		ldr	r0, .L86+20	@,
 1509              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1510              		.loc 1 286 49 view .LVU424
 1511 06e0 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1512              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1513              		.loc 1 300 79 view .LVU425
 1514 06e4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1515              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1516              		.loc 1 299 42 view .LVU426
 1517 06e8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1518              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1519              		.loc 1 286 33 view .LVU427
 1520 06ec 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1521              		.loc 1 287 5 is_stmt 1 view .LVU428
 1522              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1523              		.loc 1 299 42 is_stmt 0 view .LVU429
 1524 06f0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1525              	@ armwave.c:287:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1526              		.loc 1 287 30 view .LVU430
 1527 06f4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1528              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1529              		.loc 1 302 5 view .LVU431
 1530 06f8 0C30A0E1 		mov	r3, ip	@, _19
 1531 06fc 0C20A0E1 		mov	r2, ip	@, tmp3
 1532              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1533              		.loc 1 299 42 view .LVU432
 1534 0700 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1535              	@ armwave.c:287:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1536              		.loc 1 287 30 view .LVU433
 1537 0704 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1538              		.loc 1 288 5 is_stmt 1 view .LVU434
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1539              		.loc 1 289 5 view .LVU435
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1540              		.loc 1 290 5 view .LVU436
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1541              		.loc 1 291 5 view .LVU437
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1542              		.loc 1 292 5 view .LVU438
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1543              		.loc 1 293 5 view .LVU439
 294:armwave.c     ****     g_armwave_state.target_height = target_height;
 1544              		.loc 1 294 5 view .LVU440
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1545              		.loc 1 295 5 view .LVU441
 296:armwave.c     **** 
 1546              		.loc 1 296 5 view .LVU442
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1547              		.loc 1 299 5 view .LVU443
 1548              		.loc 1 302 5 view .LVU444
 1549 0708 FEFFFFEB 		bl	printf		@
 1550              	.LVL83:
 303:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 304:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 305:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 306:armwave.c     **** 
 307:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 308:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 309:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 310:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1551              		.loc 1 310 5 view .LVU445
 1552              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 311:armwave.c     **** 
 312:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1553              		.loc 1 312 23 is_stmt 0 view .LVU446
 1554 070c 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1555              	@ armwave.c:310:     g_armwave_state.slice_height = 256; // 64;  
 310:armwave.c     **** 
 1556              		.loc 1 310 34 view .LVU447
 1557 0710 013CA0E3 		mov	r3, #256	@ tmp204,
 1558              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 1559              		.loc 1 312 7 view .LVU448
 1560 0714 000050E3 		cmp	r0, #0	@ _20,
 1561              	@ armwave.c:310:     g_armwave_state.slice_height = 256; // 64;  
 310:armwave.c     **** 
 1562              		.loc 1 310 34 view .LVU449
 1563 0718 443084E5 		str	r3, [r4, #68]	@ tmp204, g_armwave_state.slice_height
 1564              		.loc 1 312 5 is_stmt 1 view .LVU450
 1565              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 1566              		.loc 1 312 7 is_stmt 0 view .LVU451
 1567 071c 0000000A 		beq	.L74		@,
 313:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1568              		.loc 1 313 9 is_stmt 1 view .LVU452
 1569 0720 FEFFFFEB 		bl	free		@
 1570              	.LVL84:
 1571              	.L74:
 314:armwave.c     **** 
 315:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1572              		.loc 1 315 5 view .LVU453
 1573              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1574              		.loc 1 315 34 is_stmt 0 view .LVU454
 1575 0724 0110A0E3 		mov	r1, #1	@,
 1576 0728 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1577 072c FEFFFFEB 		bl	calloc		@
 1578              	.LVL85:
 1579              	@ armwave.c:317:     assert(g_armwave_state.ch1_buffer != NULL);
 316:armwave.c     **** 
 317:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1580              		.loc 1 317 5 view .LVU455
 1581 0730 000050E3 		cmp	r0, #0	@ _23,
 1582              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 315:armwave.c     **** 
 1583              		.loc 1 315 34 view .LVU456
 1584 0734 0070A0E1 		mov	r7, r0	@ _23,
 1585              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 315:armwave.c     **** 
 1586              		.loc 1 315 32 view .LVU457
 1587 0738 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1588              		.loc 1 317 5 is_stmt 1 view .LVU458
 1589 073c 3600000A 		beq	.L84		@,
 318:armwave.c     **** 
 319:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 320:armwave.c     ****     length = end_point - start_point;
 1590              		.loc 1 320 5 view .LVU459
 1591              	.LVL86:
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1592              		.loc 1 321 5 view .LVU460
 1593              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 1594              		.loc 1 321 34 is_stmt 0 view .LVU461
 1595 0740 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1596              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 1597              		.loc 1 321 22 view .LVU462
 1598 0744 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1599              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1600              		.loc 1 322 60 view .LVU463
 1601 0748 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp254, g_armwave_state.slice_height
 1602              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1603              		.loc 1 323 40 view .LVU464
 1604 074c 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1605              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1606              		.loc 1 321 34 view .LVU465
 1607 0750 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 1608              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1609              		.loc 1 321 22 view .LVU466
 1610 0754 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp215, _13
 1611              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1612              		.loc 1 322 60 view .LVU467
 1613 0758 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp219, tmp254
 1614              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1615              		.loc 1 321 22 view .LVU468
 1616 075c A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp215, tmp216
 1617              	.LVL87:
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1618              		.loc 1 322 5 is_stmt 1 view .LVU469
 1619              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1620              		.loc 1 322 60 is_stmt 0 view .LVU470
 1621 0760 087A67EE 		vmul.f32	s15, s14, s16	@ tmp221, tmp219, points_per_pixel
 1622              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1623              		.loc 1 322 41 view .LVU471
 1624 0764 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp222, tmp221
 1625 0768 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp222, g_armwave_state.slice_record_height
 1626              		.loc 1 323 5 is_stmt 1 view .LVU472
 1627              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1628              		.loc 1 323 40 is_stmt 0 view .LVU473
 1629 076c FEFFFFEB 		bl	malloc		@
 1630              	.LVL88:
 1631              	@ armwave.c:325:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 324:armwave.c     **** 
 325:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1632              		.loc 1 325 5 view .LVU474
 1633 0770 000050E3 		cmp	r0, #0	@ _31,
 1634              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1635              		.loc 1 323 40 view .LVU475
 1636 0774 0060A0E1 		mov	r6, r0	@ _31,
 1637              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1638              		.loc 1 323 38 view .LVU476
 1639 0778 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1640              		.loc 1 325 5 is_stmt 1 view .LVU477
 1641 077c 2100000A 		beq	.L85		@,
 1642              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 326:armwave.c     **** 
 327:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 328:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1643              		.loc 1 328 54 is_stmt 0 view .LVU478
 1644 0780 2C7ADFED 		vldr.32	s15, .L86+8	@ tmp231,
 1645 0784 020040E2 		sub	r0, r0, #2	@ ivtmp.79, _31,
 1646              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1647              		.loc 1 327 12 view .LVU479
 1648 0788 0030A0E3 		mov	r3, #0	@ xx,
 1649              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1650              		.loc 1 328 54 view .LVU480
 1651 078c 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp231, points_per_pixel
 1652              	.L77:
 1653              	.LVL89:
 1654              		.loc 1 328 9 is_stmt 1 discriminator 3 view .LVU481
 1655              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1656              		.loc 1 328 74 is_stmt 0 discriminator 3 view .LVU482
 1657 0790 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1658              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1659              		.loc 1 327 32 discriminator 3 view .LVU483
 1660 0794 013083E2 		add	r3, r3, #1	@ xx, xx,
 1661              	.LVL90:
 1662              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1663              		.loc 1 327 5 discriminator 3 view .LVU484
 1664 0798 030055E1 		cmp	r5, r3	@ _13, xx
 1665              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1666              		.loc 1 328 74 discriminator 3 view .LVU485
 1667 079c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp232, xx
 1668 07a0 877A67EE 		vmul.f32	s15, s15, s14	@ tmp233, tmp232, _32
 1669              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1670              		.loc 1 328 46 discriminator 3 view .LVU486
 1671 07a4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp234, tmp233
 1672 07a8 902A17EE 		vmov	r2, s15	@ int	@ tmp234, tmp234
 1673 07ac B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp234, MEM[base: _101, offset: 0B]
 1674              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1675              		.loc 1 327 5 discriminator 3 view .LVU487
 1676 07b0 F6FFFF1A 		bne	.L77		@,
 329:armwave.c     **** 
 330:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 331:armwave.c     ****     }
 332:armwave.c     **** 
 333:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1677              		.loc 1 333 5 is_stmt 1 view .LVU488
 1678              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1679              		.loc 1 333 34 is_stmt 0 view .LVU489
 1680 07b4 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1681 07b8 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1682 07bc FEFFFFEB 		bl	malloc		@
 1683              	.LVL91:
 1684              	@ armwave.c:335:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 334:armwave.c     **** 
 335:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1685              		.loc 1 335 5 view .LVU490
 1686 07c0 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1687 07c4 0620A0E1 		mov	r2, r6	@, _31
 1688 07c8 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1689 07cc 0710A0E1 		mov	r1, r7	@, _23
 1690              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333:armwave.c     **** 
 1691              		.loc 1 333 34 view .LVU491
 1692 07d0 00C0A0E1 		mov	ip, r0	@ tmp238,
 1693              	@ armwave.c:335:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1694              		.loc 1 335 5 view .LVU492
 1695 07d4 0030A0E1 		mov	r3, r0	@, tmp238
 1696              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333:armwave.c     **** 
 1697              		.loc 1 333 32 view .LVU493
 1698 07d8 68C084E5 		str	ip, [r4, #104]	@ tmp238, g_armwave_state.out_pixbuf
 1699              		.loc 1 335 5 is_stmt 1 view .LVU494
 1700 07dc 64009FE5 		ldr	r0, .L86+24	@,
 1701 07e0 FEFFFFEB 		bl	printf		@
 1702              	.LVL92:
 336:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 337:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 338:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 339:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 340:armwave.c     **** 
 341:armwave.c     ****     malloc_stats();
 1703              		.loc 1 341 5 view .LVU495
 1704              	@ armwave.c:342: }
 342:armwave.c     **** }
 1705              		.loc 1 342 1 is_stmt 0 view .LVU496
 1706 07e4 14D08DE2 		add	sp, sp, #20	@,,
 1707              		.cfi_remember_state
 1708              		.cfi_def_cfa_offset 36
 1709              		@ sp needed	@
 1710 07e8 028BBDEC 		vldm	sp!, {d8}	@
 1711              		.cfi_restore 80
 1712              		.cfi_restore 81
 1713              		.cfi_def_cfa_offset 28
 1714              	.LVL93:
 1715              		.loc 1 342 1 view .LVU497
 1716 07ec F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1717              		.cfi_restore 14
 1718              		.cfi_restore 9
 1719              		.cfi_restore 8
 1720              		.cfi_restore 7
 1721              		.cfi_restore 6
 1722              		.cfi_restore 5
 1723              		.cfi_restore 4
 1724              		.cfi_def_cfa_offset 0
 1725              	.LVL94:
 1726              	@ armwave.c:341:     malloc_stats();
 341:armwave.c     **** }
 1727              		.loc 1 341 5 view .LVU498
 1728 07f0 FEFFFFEA 		b	malloc_stats		@
 1729              	.LVL95:
 1730              	.L83:
 1731              		.cfi_restore_state
 263:armwave.c     **** 
 1732              		.loc 1 263 5 is_stmt 1 discriminator 1 view .LVU499
 1733 07f4 50309FE5 		ldr	r3, .L86+28	@,
 1734 07f8 50209FE5 		ldr	r2, .L86+32	@,
 1735 07fc 50109FE5 		ldr	r1, .L86+36	@,
 1736 0800 50009FE5 		ldr	r0, .L86+40	@,
 1737 0804 FEFFFFEB 		bl	__assert_fail		@
 1738              	.LVL96:
 1739              	.L85:
 325:armwave.c     **** 
 1740              		.loc 1 325 5 discriminator 1 view .LVU500
 1741 0808 3C309FE5 		ldr	r3, .L86+28	@,
 1742 080c 48209FE5 		ldr	r2, .L86+44	@,
 1743 0810 3C109FE5 		ldr	r1, .L86+36	@,
 1744 0814 44009FE5 		ldr	r0, .L86+48	@,
 1745 0818 FEFFFFEB 		bl	__assert_fail		@
 1746              	.LVL97:
 1747              	.L84:
 317:armwave.c     **** 
 1748              		.loc 1 317 5 discriminator 1 view .LVU501
 1749 081c 28309FE5 		ldr	r3, .L86+28	@,
 1750 0820 3C209FE5 		ldr	r2, .L86+52	@,
 1751 0824 28109FE5 		ldr	r1, .L86+36	@,
 1752 0828 38009FE5 		ldr	r0, .L86+56	@,
 1753 082c FEFFFFEB 		bl	__assert_fail		@
 1754              	.LVL98:
 1755              	.L87:
 1756              		.align	2
 1757              	.L86:
 1758 0830 00007F43 		.word	1132396544
 1759 0834 00008047 		.word	1199570944
 1760 0838 0000803F 		.word	1065353216
 1761 083c 40000000 		.word	.LC4
 1762 0840 00000000 		.word	g_armwave_state
 1763 0844 84000000 		.word	.LC6
 1764 0848 34010000 		.word	.LC9
 1765 084c 1C000000 		.word	.LANCHOR0+28
 1766 0850 07010000 		.word	263
 1767 0854 20000000 		.word	.LC2
 1768 0858 6C000000 		.word	.LC5
 1769 085c 45010000 		.word	325
 1770 0860 08010000 		.word	.LC8
 1771 0864 3D010000 		.word	317
 1772 0868 E4000000 		.word	.LC7
 1773              		.cfi_endproc
 1774              	.LFE62:
 1776              		.align	2
 1777              		.global	armwave_set_wave_pointer
 1778              		.syntax unified
 1779              		.arm
 1780              		.fpu vfp
 1782              	armwave_set_wave_pointer:
 1783              	.LVL99:
 1784              	.LFB63:
 343:armwave.c     **** 
 344:armwave.c     **** /*
 345:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 346:armwave.c     ****  * in the future.
 347:armwave.c     ****  */
 348:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 349:armwave.c     **** {
 1785              		.loc 1 349 1 view -0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1789              		.loc 1 350 5 view .LVU503
 1790 086c 000050E3 		cmp	r0, #0	@ wave_buffer
 1791              		.loc 1 350 5 is_stmt 0 view .LVU504
 1792 0870 0200000A 		beq	.L93		@,
 351:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1793              		.loc 1 351 5 is_stmt 1 view .LVU505
 1794              	@ armwave.c:351:     g_armwave_state.wave_buffer = wave_buffer;
 1795              		.loc 1 351 33 is_stmt 0 view .LVU506
 1796 0874 1C309FE5 		ldr	r3, .L94	@ tmp116,
 1797 0878 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1798 087c 1EFF2FE1 		bx	lr	@
 1799              	.L93:
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1800              		.loc 1 350 5 is_stmt 1 discriminator 1 view .LVU507
 1801              	@ armwave.c:349: {
 349:armwave.c     ****     assert(wave_buffer != NULL);
 1802              		.loc 1 349 1 is_stmt 0 discriminator 1 view .LVU508
 1803 0880 10402DE9 		push	{r4, lr}	@
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 4, -8
 1806              		.cfi_offset 14, -4
 1807              	@ armwave.c:350:     assert(wave_buffer != NULL);
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1808              		.loc 1 350 5 discriminator 1 view .LVU509
 1809 0884 10309FE5 		ldr	r3, .L94+4	@,
 1810 0888 10209FE5 		ldr	r2, .L94+8	@,
 1811 088c 10109FE5 		ldr	r1, .L94+12	@,
 1812 0890 10009FE5 		ldr	r0, .L94+16	@,
 1813              	.LVL100:
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1814              		.loc 1 350 5 discriminator 1 view .LVU510
 1815 0894 FEFFFFEB 		bl	__assert_fail		@
 1816              	.LVL101:
 1817              	.L95:
 1818              		.align	2
 1819              	.L94:
 1820 0898 00000000 		.word	g_armwave_state
 1821 089c 34000000 		.word	.LANCHOR0+52
 1822 08a0 5E010000 		.word	350
 1823 08a4 20000000 		.word	.LC2
 1824 08a8 58010000 		.word	.LC10
 1825              		.cfi_endproc
 1826              	.LFE63:
 1828              		.align	2
 1829              		.global	armwave_set_wave_pointer_as_testbuf
 1830              		.syntax unified
 1831              		.arm
 1832              		.fpu vfp
 1834              	armwave_set_wave_pointer_as_testbuf:
 1835              	.LVL102:
 1836              	.LFB64:
 352:armwave.c     **** }
 353:armwave.c     **** 
 354:armwave.c     **** /*
 355:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 356:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 359:armwave.c     **** {
 1837              		.loc 1 359 1 is_stmt 1 view -0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 0
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
 1841              		@ link register save eliminated.
 360:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1842              		.loc 1 360 5 view .LVU512
 1843              	@ armwave.c:360:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1844              		.loc 1 360 29 is_stmt 0 view .LVU513
 1845 08ac 24309FE5 		ldr	r3, .L99	@ tmp117,
 1846              	@ armwave.c:360:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1847              		.loc 1 360 7 view .LVU514
 1848 08b0 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1849 08b4 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1850 08b8 0400003A 		bcc	.L98		@,
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 362:armwave.c     ****         return;
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1851              		.loc 1 365 5 is_stmt 1 view .LVU515
 1852              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1853              		.loc 1 365 111 is_stmt 0 view .LVU516
 1854 08bc 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1855              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1856              		.loc 1 365 68 view .LVU517
 1857 08c0 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1858 08c4 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1859              	.LVL103:
 1860              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1861              		.loc 1 365 33 view .LVU518
 1862 08c8 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1863              	@ armwave.c:366: }
 366:armwave.c     **** }
 1864              		.loc 1 366 1 view .LVU519
 1865 08cc 1EFF2FE1 		bx	lr	@
 1866              	.LVL104:
 1867              	.L98:
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1868              		.loc 1 361 9 is_stmt 1 view .LVU520
 1869 08d0 04009FE5 		ldr	r0, .L99+4	@,
 1870              	.LVL105:
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1871              		.loc 1 361 9 is_stmt 0 view .LVU521
 1872 08d4 FEFFFFEA 		b	puts		@
 1873              	.LVL106:
 1874              	.L100:
 1875              		.align	2
 1876              	.L99:
 1877 08d8 00000000 		.word	g_armwave_state
 1878 08dc 6C010000 		.word	.LC11
 1879              		.cfi_endproc
 1880              	.LFE64:
 1882              		.align	2
 1883              		.global	armwave_set_wave_pointer_u32
 1884              		.syntax unified
 1885              		.arm
 1886              		.fpu vfp
 1888              	armwave_set_wave_pointer_u32:
 1889              	.LVL107:
 1890              	.LFB65:
 367:armwave.c     **** 
 368:armwave.c     **** /*
 369:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 370:armwave.c     ****  * disjointed buffers in the future.
 371:armwave.c     ****  */
 372:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 373:armwave.c     **** {
 1891              		.loc 1 373 1 is_stmt 1 view -0
 1892              		.cfi_startproc
 1893              		@ args = 0, pretend = 0, frame = 0
 1894              		@ frame_needed = 0, uses_anonymous_args = 0
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1895              		.loc 1 374 5 view .LVU523
 1896 08e0 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1897              		.loc 1 374 5 is_stmt 0 view .LVU524
 1898 08e4 0200000A 		beq	.L106		@,
 375:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1899              		.loc 1 375 5 is_stmt 1 view .LVU525
 1900              	@ armwave.c:375:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1901              		.loc 1 375 33 is_stmt 0 view .LVU526
 1902 08e8 1C309FE5 		ldr	r3, .L107	@ tmp117,
 1903 08ec 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1904 08f0 1EFF2FE1 		bx	lr	@
 1905              	.L106:
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1906              		.loc 1 374 5 is_stmt 1 discriminator 1 view .LVU527
 1907              	@ armwave.c:373: {
 373:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1908              		.loc 1 373 1 is_stmt 0 discriminator 1 view .LVU528
 1909 08f4 10402DE9 		push	{r4, lr}	@
 1910              		.cfi_def_cfa_offset 8
 1911              		.cfi_offset 4, -8
 1912              		.cfi_offset 14, -4
 1913              	@ armwave.c:374:     assert(wave_buffer_ptr != 0);
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1914              		.loc 1 374 5 discriminator 1 view .LVU529
 1915 08f8 10309FE5 		ldr	r3, .L107+4	@,
 1916 08fc 10209FE5 		ldr	r2, .L107+8	@,
 1917 0900 10109FE5 		ldr	r1, .L107+12	@,
 1918 0904 10009FE5 		ldr	r0, .L107+16	@,
 1919              	.LVL108:
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1920              		.loc 1 374 5 discriminator 1 view .LVU530
 1921 0908 FEFFFFEB 		bl	__assert_fail		@
 1922              	.LVL109:
 1923              	.L108:
 1924              		.align	2
 1925              	.L107:
 1926 090c 00000000 		.word	g_armwave_state
 1927 0910 50000000 		.word	.LANCHOR0+80
 1928 0914 76010000 		.word	374
 1929 0918 20000000 		.word	.LC2
 1930 091c A8010000 		.word	.LC12
 1931              		.cfi_endproc
 1932              	.LFE65:
 1934              		.align	2
 1935              		.global	armwave_clear_buffer
 1936              		.syntax unified
 1937              		.arm
 1938              		.fpu vfp
 1940              	armwave_clear_buffer:
 1941              	.LVL110:
 1942              	.LFB66:
 376:armwave.c     **** }
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 382:armwave.c     **** {
 1943              		.loc 1 382 1 is_stmt 1 view -0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              		@ link register save eliminated.
 383:armwave.c     ****     // Flags ignored, only one buffer cleared
 384:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1948              		.loc 1 384 5 view .LVU532
 1949              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1950              		.loc 1 384 58 is_stmt 0 view .LVU533
 1951 0920 0C309FE5 		ldr	r3, .L110	@ tmp114,
 1952              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1953              		.loc 1 384 5 view .LVU534
 1954 0924 0010A0E3 		mov	r1, #0	@,
 1955 0928 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1956 092c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1957              	.LVL111:
 1958              		.loc 1 384 5 view .LVU535
 1959 0930 FEFFFFEA 		b	memset		@
 1960              	.LVL112:
 1961              	.L111:
 1962              		.align	2
 1963              	.L110:
 1964 0934 00000000 		.word	g_armwave_state
 1965              		.cfi_endproc
 1966              	.LFE66:
 1968              		.align	2
 1969              		.global	armwave_set_channel_colour
 1970              		.syntax unified
 1971              		.arm
 1972              		.fpu vfp
 1974              	armwave_set_channel_colour:
 1975              	.LVL113:
 1976              	.LFB67:
 385:armwave.c     **** }
 386:armwave.c     **** 
 387:armwave.c     **** /*
 388:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 391:armwave.c     **** {
 1977              		.loc 1 391 1 is_stmt 1 view -0
 1978              		.cfi_startproc
 1979              		@ args = 0, pretend = 0, frame = 0
 1980              		@ frame_needed = 0, uses_anonymous_args = 0
 1981              		@ link register save eliminated.
 392:armwave.c     ****     // Only 1ch supported for now
 393:armwave.c     ****     switch(ch) {
 1982              		.loc 1 393 5 view .LVU537
 1983 0938 010050E3 		cmp	r0, #1	@ ch,
 394:armwave.c     ****         case 1:
 395:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1984              		.loc 1 395 13 view .LVU538
 1985              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 1986              		.loc 1 395 41 is_stmt 0 view .LVU539
 1987 093c 0C009F05 		ldreq	r0, .L114	@ tmp117,
 1988              	.LVL114:
 1989              		.loc 1 395 41 view .LVU540
 1990 0940 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 396:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1991              		.loc 1 396 13 is_stmt 1 view .LVU541
 1992              	@ armwave.c:396:             g_armwave_state.ch1_color.g = g;
 1993              		.loc 1 396 41 is_stmt 0 view .LVU542
 1994 0944 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 397:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1995              		.loc 1 397 13 is_stmt 1 view .LVU543
 1996              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 1997              		.loc 1 397 41 is_stmt 0 view .LVU544
 1998 0948 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 398:armwave.c     ****             break;
 1999              		.loc 1 398 13 is_stmt 1 view .LVU545
 2000              	@ armwave.c:400: }
 399:armwave.c     ****     }
 400:armwave.c     **** }
 2001              		.loc 1 400 1 is_stmt 0 view .LVU546
 2002 094c 1EFF2FE1 		bx	lr	@
 2003              	.L115:
 2004              		.align	2
 2005              	.L114:
 2006 0950 00000000 		.word	g_armwave_state
 2007              		.cfi_endproc
 2008              	.LFE67:
 2010              		.align	2
 2011              		.global	armwave_dump_ppm_debug
 2012              		.syntax unified
 2013              		.arm
 2014              		.fpu vfp
 2016              	armwave_dump_ppm_debug:
 2017              	.LVL115:
 2018              	.LFB68:
 401:armwave.c     **** 
 402:armwave.c     **** /*
 403:armwave.c     ****  * Dump a ppm of a buffer to a file.
 404:armwave.c     ****  */
 405:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 406:armwave.c     **** {
 2019              		.loc 1 406 1 is_stmt 1 view -0
 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 0
 2022              		@ frame_needed = 0, uses_anonymous_args = 0
 407:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2023              		.loc 1 407 5 view .LVU548
 2024              	@ armwave.c:406: {
 406:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2025              		.loc 1 406 1 is_stmt 0 view .LVU549
 2026 0954 0130A0E1 		mov	r3, r1	@ fn, fn
 2027 0958 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2028              		.cfi_def_cfa_offset 28
 2029              		.cfi_offset 4, -28
 2030              		.cfi_offset 5, -24
 2031              		.cfi_offset 6, -20
 2032              		.cfi_offset 7, -16
 2033              		.cfi_offset 8, -12
 2034              		.cfi_offset 9, -8
 2035              		.cfi_offset 14, -4
 2036 095c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2037 0960 0CD04DE2 		sub	sp, sp, #12	@,,
 2038              		.cfi_def_cfa_offset 40
 2039              	@ armwave.c:407:     FILE *fp = fopen(fn, "wb");
 2040              		.loc 1 407 16 view .LVU550
 2041 0964 C4109FE5 		ldr	r1, .L124	@,
 2042              	.LVL116:
 2043              		.loc 1 407 16 view .LVU551
 2044 0968 0300A0E1 		mov	r0, r3	@, fn
 2045              	.LVL117:
 2046              		.loc 1 407 16 view .LVU552
 2047 096c FEFFFFEB 		bl	fopen64		@
 2048              	.LVL118:
 2049              	@ armwave.c:414:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 408:armwave.c     ****     uint32_t data;
 409:armwave.c     ****     int xx, yy;
 410:armwave.c     **** 
 411:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 412:armwave.c     **** 
 413:armwave.c     ****     fputs("P3\n", fp);
 414:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2050              		.loc 1 414 5 view .LVU553
 2051 0970 BC609FE5 		ldr	r6, .L124+4	@ tmp150,
 2052              	@ armwave.c:413:     fputs("P3\n", fp);
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2053              		.loc 1 413 5 view .LVU554
 2054 0974 0320A0E3 		mov	r2, #3	@,
 2055 0978 0110A0E3 		mov	r1, #1	@,
 2056              	@ armwave.c:407:     FILE *fp = fopen(fn, "wb");
 407:armwave.c     ****     uint32_t data;
 2057              		.loc 1 407 16 view .LVU555
 2058 097c 0070A0E1 		mov	r7, r0	@ fp,
 2059              	.LVL119:
 408:armwave.c     ****     uint32_t data;
 2060              		.loc 1 408 5 is_stmt 1 view .LVU556
 409:armwave.c     **** 
 2061              		.loc 1 409 5 view .LVU557
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2062              		.loc 1 413 5 view .LVU558
 2063 0980 0030A0E1 		mov	r3, r0	@, fp
 2064 0984 AC009FE5 		ldr	r0, .L124+8	@,
 2065              	.LVL120:
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2066              		.loc 1 413 5 is_stmt 0 view .LVU559
 2067 0988 FEFFFFEB 		bl	fwrite		@
 2068              	.LVL121:
 2069              		.loc 1 414 5 is_stmt 1 view .LVU560
 2070 098c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2071 0990 A4109FE5 		ldr	r1, .L124+12	@,
 2072 0994 0700A0E1 		mov	r0, r7	@, fp
 2073 0998 FEFFFFEB 		bl	fprintf		@
 2074              	.LVL122:
 415:armwave.c     ****     fputs("255\n", fp);
 2075              		.loc 1 415 5 view .LVU561
 2076 099c 0420A0E3 		mov	r2, #4	@,
 2077 09a0 0730A0E1 		mov	r3, r7	@, fp
 2078 09a4 0110A0E3 		mov	r1, #1	@,
 2079 09a8 90009FE5 		ldr	r0, .L124+16	@,
 2080 09ac FEFFFFEB 		bl	fwrite		@
 2081              	.LVL123:
 416:armwave.c     **** 
 417:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2082              		.loc 1 417 5 view .LVU562
 2083              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2084              		.loc 1 417 37 is_stmt 0 view .LVU563
 2085 09b0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2086              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2087              		.loc 1 417 5 view .LVU564
 2088 09b4 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2089 09b8 180000DA 		ble	.L117		@,
 2090 09bc 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2091              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 419:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 420:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 421:armwave.c     **** 
 422:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2092              		.loc 1 422 13 view .LVU565
 2093 09c0 7C909FE5 		ldr	r9, .L124+20	@ tmp152,
 2094              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2095              		.loc 1 417 12 view .LVU566
 2096 09c4 0050A0E3 		mov	r5, #0	@ yy,
 2097              	.LVL124:
 2098              	.L118:
 2099              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2100              		.loc 1 418 9 view .LVU567
 2101 09c8 000053E3 		cmp	r3, #0	@ _13,
 2102              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2103              		.loc 1 418 16 view .LVU568
 2104 09cc 0040A0C3 		movgt	r4, #0	@ xx,
 2105              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2106              		.loc 1 418 9 view .LVU569
 2107 09d0 0F0000DA 		ble	.L120		@,
 2108              	.LVL125:
 2109              	.L119:
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2110              		.loc 1 419 13 is_stmt 1 discriminator 3 view .LVU570
 2111              	@ armwave.c:419:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2112              		.loc 1 419 29 is_stmt 0 discriminator 3 view .LVU571
 2113 09d4 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2114              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2115              		.loc 1 422 13 discriminator 3 view .LVU572
 2116 09d8 0910A0E1 		mov	r1, r9	@, tmp152
 2117 09dc 0700A0E1 		mov	r0, r7	@, fp
 2118              	@ armwave.c:419:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2119              		.loc 1 419 18 discriminator 3 view .LVU573
 2120 09e0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2121              	.LVL126:
 2122              		.loc 1 422 13 is_stmt 1 discriminator 3 view .LVU574
 2123              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2124              		.loc 1 418 58 is_stmt 0 discriminator 3 view .LVU575
 2125 09e4 014084E2 		add	r4, r4, #1	@ xx, xx,
 2126              	.LVL127:
 2127              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2128              		.loc 1 422 81 discriminator 3 view .LVU576
 2129 09e8 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2130              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2131              		.loc 1 422 61 discriminator 3 view .LVU577
 2132 09ec 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2133              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2134              		.loc 1 422 13 discriminator 3 view .LVU578
 2135 09f0 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2136 09f4 7330EFE6 		uxtb	r3, r3	@, tmp142
 2137 09f8 00C08DE5 		str	ip, [sp]	@ tmp147,
 2138 09fc 7220EFE6 		uxtb	r2, r2	@, data
 2139              	.LVL128:
 2140              		.loc 1 422 13 discriminator 3 view .LVU579
 2141 0a00 FEFFFFEB 		bl	fprintf		@
 2142              	.LVL129:
 2143              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2144              		.loc 1 418 41 discriminator 3 view .LVU580
 2145 0a04 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2146              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2147              		.loc 1 418 9 discriminator 3 view .LVU581
 2148 0a08 040053E1 		cmp	r3, r4	@ _13, xx
 2149 0a0c F0FFFFCA 		bgt	.L119		@,
 2150 0a10 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2151              	.LVL130:
 2152              	.L120:
 2153              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2154              		.loc 1 417 55 discriminator 2 view .LVU582
 2155 0a14 015085E2 		add	r5, r5, #1	@ yy, yy,
 2156              	.LVL131:
 2157              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2158              		.loc 1 417 5 discriminator 2 view .LVU583
 2159 0a18 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2160 0a1c E9FFFFBA 		blt	.L118		@,
 2161              	.LVL132:
 2162              	.L117:
 423:armwave.c     ****         }
 424:armwave.c     ****     }
 425:armwave.c     **** 
 426:armwave.c     ****     fclose(fp);
 2163              		.loc 1 426 5 is_stmt 1 view .LVU584
 2164 0a20 0700A0E1 		mov	r0, r7	@, fp
 2165              	@ armwave.c:427: }
 427:armwave.c     **** }
 2166              		.loc 1 427 1 is_stmt 0 view .LVU585
 2167 0a24 0CD08DE2 		add	sp, sp, #12	@,,
 2168              		.cfi_def_cfa_offset 28
 2169              		@ sp needed	@
 2170 0a28 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2171              		.cfi_restore 14
 2172              		.cfi_restore 9
 2173              		.cfi_restore 8
 2174              		.cfi_restore 7
 2175              		.cfi_restore 6
 2176              		.cfi_restore 5
 2177              		.cfi_restore 4
 2178              		.cfi_def_cfa_offset 0
 2179              	.LVL133:
 2180              	@ armwave.c:426:     fclose(fp);
 426:armwave.c     **** }
 2181              		.loc 1 426 5 view .LVU586
 2182 0a2c FEFFFFEA 		b	fclose		@
 2183              	.LVL134:
 2184              	.L125:
 426:armwave.c     **** }
 2185              		.loc 1 426 5 view .LVU587
 2186              		.align	2
 2187              	.L124:
 2188 0a30 C0010000 		.word	.LC13
 2189 0a34 00000000 		.word	g_armwave_state
 2190 0a38 C4010000 		.word	.LC14
 2191 0a3c C8010000 		.word	.LC15
 2192 0a40 D0010000 		.word	.LC16
 2193 0a44 D8010000 		.word	.LC17
 2194              		.cfi_endproc
 2195              	.LFE68:
 2197              		.align	2
 2198              		.global	armwave_test_init
 2199              		.syntax unified
 2200              		.arm
 2201              		.fpu vfp
 2203              	armwave_test_init:
 2204              	.LVL135:
 2205              	.LFB69:
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Initialise some test functionry.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 433:armwave.c     **** {
 2206              		.loc 1 433 1 is_stmt 1 view -0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 0, uses_anonymous_args = 0
 434:armwave.c     ****     test_create_gamma();
 2210              		.loc 1 434 5 view .LVU589
 2211              	.LBB18:
 2212              	.LBI18:
  34:armwave.c     **** {
 2213              		.loc 1 34 6 view .LVU590
  34:armwave.c     **** {
 2214              		.loc 1 34 6 is_stmt 0 view .LVU591
 2215              	.LBE18:
 2216              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2217              		.loc 1 433 1 view .LVU592
 2218 0a48 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2219              		.cfi_def_cfa_offset 32
 2220              		.cfi_offset 4, -32
 2221              		.cfi_offset 5, -28
 2222              		.cfi_offset 6, -24
 2223              		.cfi_offset 7, -20
 2224              		.cfi_offset 8, -16
 2225              		.cfi_offset 9, -12
 2226              		.cfi_offset 10, -8
 2227              		.cfi_offset 14, -4
 2228 0a4c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2229              		.cfi_def_cfa_offset 56
 2230              		.cfi_offset 80, -56
 2231              		.cfi_offset 81, -52
 2232              		.cfi_offset 82, -48
 2233              		.cfi_offset 83, -44
 2234              		.cfi_offset 84, -40
 2235              		.cfi_offset 85, -36
 2236 0a50 BC409FE5 		ldr	r4, .L130+20	@ ivtmp.93,
 2237              	.LBB21:
 2238              	.LBB19:
 2239              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2240              		.loc 1 40 32 view .LVU593
 2241 0a54 2DAA9FED 		vldr.32	s20, .L130+16	@ tmp136,
 2242              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2243              		.loc 1 40 26 view .LVU594
 2244 0a58 289B9FED 		vldr.64	d9, .L130	@ tmp151,
 2245              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2246              		.loc 1 40 49 view .LVU595
 2247 0a5c 298B9FED 		vldr.64	d8, .L130+8	@ tmp139,
 2248 0a60 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.93,
 2249              	.LBE19:
 2250              	.LBE21:
 2251              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2252              		.loc 1 433 1 view .LVU596
 2253 0a64 10D04DE2 		sub	sp, sp, #16	@,,
 2254              		.cfi_def_cfa_offset 72
 2255              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2256              		.loc 1 433 1 view .LVU597
 2257 0a68 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2258 0a6c 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2259 0a70 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2260 0a74 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2261 0a78 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.93,
 2262 0a7c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2263              	.LVL136:
 2264              	.L127:
 2265              	.LBB22:
 2266              	.LBB20:
  40:armwave.c     ****     }
 2267              		.loc 1 40 9 is_stmt 1 view .LVU598
 2268              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2269              		.loc 1 40 32 is_stmt 0 view .LVU599
 2270 0a80 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.93
 2271              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2272              		.loc 1 40 26 view .LVU600
 2273 0a84 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2274              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2275              		.loc 1 40 32 view .LVU601
 2276 0a88 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2277 0a8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2278 0a90 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2279              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2280              		.loc 1 40 26 view .LVU602
 2281 0a94 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2282 0a98 FEFFFFEB 		bl	pow		@
 2283              	.LVL137:
 2284              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2285              		.loc 1 40 49 view .LVU603
 2286 0a9c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2287              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2288              		.loc 1 40 24 view .LVU604
 2289 0aa0 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2290 0aa4 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2291 0aa8 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2292              	.LVL138:
 2293              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2294              		.loc 1 39 5 view .LVU605
 2295 0aac 0A0054E1 		cmp	r4, r10	@ ivtmp.93, _39
 2296 0ab0 F2FFFF1A 		bne	.L127		@,
 2297              	.LVL139:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2298              		.loc 1 39 5 view .LVU606
 2299              	.LBE20:
 2300              	.LBE22:
 435:armwave.c     **** 
 436:armwave.c     ****     // make ch1 yellowish by default
 437:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2301              		.loc 1 437 5 is_stmt 1 view .LVU607
 2302              	.LBB23:
 2303              	.LBI23:
 390:armwave.c     **** {
 2304              		.loc 1 390 6 view .LVU608
 2305              	.LBB24:
 393:armwave.c     ****         case 1:
 2306              		.loc 1 393 5 view .LVU609
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2307              		.loc 1 395 13 view .LVU610
 396:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2308              		.loc 1 396 13 view .LVU611
 2309              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2310              		.loc 1 395 41 is_stmt 0 view .LVU612
 2311 0ab4 5CC09FE5 		ldr	ip, .L130+24	@ tmp142,
 2312 0ab8 5C409FE5 		ldr	r4, .L130+28	@ tmp143,
 2313              	.LBE24:
 2314              	.LBE23:
 2315              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 438:armwave.c     **** 
 439:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2316              		.loc 1 439 5 view .LVU613
 2317 0abc 0000A0E3 		mov	r0, #0	@ tmp147,
 2318              	.LBB28:
 2319              	.LBB25:
 2320              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 397:armwave.c     ****             break;
 2321              		.loc 1 397 41 view .LVU614
 2322 0ac0 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2323              	.LBE25:
 2324              	.LBE28:
 2325              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2326              		.loc 1 439 5 view .LVU615
 2327 0ac4 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2328 0ac8 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2329 0acc 00808DE5 		str	r8, [sp]	@ render_width,
 2330 0ad0 0610A0E1 		mov	r1, r6	@, tmp3
 2331 0ad4 0720A0E1 		mov	r2, r7	@, nwaves
 2332              	.LBB29:
 2333              	.LBB26:
 2334              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2335              		.loc 1 395 41 view .LVU616
 2336 0ad8 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 397:armwave.c     ****             break;
 2337              		.loc 1 397 13 is_stmt 1 view .LVU617
 2338              	.LBE26:
 2339              	.LBE29:
 2340              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2341              		.loc 1 439 5 is_stmt 0 view .LVU618
 2342 0adc 0630A0E1 		mov	r3, r6	@, wave_size
 2343              	.LBB30:
 2344              	.LBB27:
 2345              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 397:armwave.c     ****             break;
 2346              		.loc 1 397 41 view .LVU619
 2347 0ae0 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 398:armwave.c     ****     }
 2348              		.loc 1 398 13 is_stmt 1 view .LVU620
 2349              	.LVL140:
 398:armwave.c     ****     }
 2350              		.loc 1 398 13 is_stmt 0 view .LVU621
 2351              	.LBE27:
 2352              	.LBE30:
 2353              		.loc 1 439 5 is_stmt 1 view .LVU622
 2354 0ae4 FEFFFFEB 		bl	armwave_setup_render		@
 2355              	.LVL141:
 440:armwave.c     **** 
 441:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2356              		.loc 1 441 5 view .LVU623
 2357 0ae8 30109FE5 		ldr	r1, .L130+32	@,
 2358 0aec 30009FE5 		ldr	r0, .L130+36	@,
 2359              	@ armwave.c:442: }
 442:armwave.c     **** }
 2360              		.loc 1 442 1 is_stmt 0 view .LVU624
 2361 0af0 10D08DE2 		add	sp, sp, #16	@,,
 2362              		.cfi_def_cfa_offset 56
 2363              		@ sp needed	@
 2364 0af4 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2365              		.cfi_restore 84
 2366              		.cfi_restore 85
 2367              		.cfi_restore 82
 2368              		.cfi_restore 83
 2369              		.cfi_restore 80
 2370              		.cfi_restore 81
 2371              		.cfi_def_cfa_offset 32
 2372 0af8 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2373              		.cfi_restore 14
 2374              		.cfi_restore 10
 2375              		.cfi_restore 9
 2376              		.cfi_restore 8
 2377              		.cfi_restore 7
 2378              		.cfi_restore 6
 2379              		.cfi_restore 5
 2380              		.cfi_restore 4
 2381              		.cfi_def_cfa_offset 0
 2382              	.LVL142:
 2383              	@ armwave.c:441:     printf("armwave version: %s\n", ARMWAVE_VER);
 441:armwave.c     **** }
 2384              		.loc 1 441 5 view .LVU625
 2385 0afc FEFFFFEA 		b	printf		@
 2386              	.LVL143:
 2387              	.L131:
 2388              		.align	3
 2389              	.L130:
 2390 0b00 000000C0 		.word	-1073741824
 2391 0b04 CCCCEC3F 		.word	1072483532
 2392 0b08 00000000 		.word	0
 2393 0b0c 00E06F40 		.word	1081073664
 2394 0b10 00007F43 		.word	1132396544
 2395 0b14 FFFFFFFF 		.word	gamma_table-1
 2396 0b18 00000000 		.word	g_armwave_state
 2397 0b1c F609F406 		.word	116656630
 2398 0b20 00000000 		.word	.LC0
 2399 0b24 08000000 		.word	.LC1
 2400              		.cfi_endproc
 2401              	.LFE69:
 2403              		.align	2
 2404              		.global	armwave_test_fill_outbuf
 2405              		.syntax unified
 2406              		.arm
 2407              		.fpu vfp
 2409              	armwave_test_fill_outbuf:
 2410              	.LFB70:
 443:armwave.c     **** 
 444:armwave.c     **** /*
 445:armwave.c     ****  * Render image to the local allocated buffer.
 446:armwave.c     ****  */
 447:armwave.c     **** void armwave_test_fill_outbuf()
 448:armwave.c     **** {
 2411              		.loc 1 448 1 is_stmt 1 view -0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 0
 2414              		@ frame_needed = 0, uses_anonymous_args = 0
 2415              		@ link register save eliminated.
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2416              		.loc 1 449 5 view .LVU627
 2417 0b28 04309FE5 		ldr	r3, .L133	@ tmp111,
 2418 0b2c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2419 0b30 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2420              	.LVL144:
 2421              	.L134:
 2422              		.align	2
 2423              	.L133:
 2424 0b34 00000000 		.word	g_armwave_state
 2425              		.cfi_endproc
 2426              	.LFE70:
 2428              		.align	2
 2429              		.global	armwave_test_dump_buffer_to_ppm
 2430              		.syntax unified
 2431              		.arm
 2432              		.fpu vfp
 2434              	armwave_test_dump_buffer_to_ppm:
 2435              	.LVL145:
 2436              	.LFB71:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 456:armwave.c     **** {
 2437              		.loc 1 456 1 view -0
 2438              		.cfi_startproc
 2439              		@ args = 0, pretend = 0, frame = 0
 2440              		@ frame_needed = 0, uses_anonymous_args = 0
 2441              		@ link register save eliminated.
 457:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2442              		.loc 1 457 5 view .LVU629
 2443 0b38 08309FE5 		ldr	r3, .L136	@ tmp112,
 2444 0b3c 0010A0E1 		mov	r1, r0	@, fn
 2445 0b40 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2446              	.LVL146:
 2447              		.loc 1 457 5 is_stmt 0 view .LVU630
 2448 0b44 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2449              	.LVL147:
 2450              	.L137:
 2451              		.loc 1 457 5 view .LVU631
 2452              		.align	2
 2453              	.L136:
 2454 0b48 00000000 		.word	g_armwave_state
 2455              		.cfi_endproc
 2456              	.LFE71:
 2458              		.align	2
 2459              		.global	armwave_test_fill_gdkbuf
 2460              		.syntax unified
 2461              		.arm
 2462              		.fpu vfp
 2464              	armwave_test_fill_gdkbuf:
 2465              	.LVL148:
 2466              	.LFB72:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Render GDK buffer with test funtionry.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 464:armwave.c     **** {
 2467              		.loc 1 464 1 is_stmt 1 view -0
 2468              		.cfi_startproc
 2469              		@ args = 0, pretend = 0, frame = 0
 2470              		@ frame_needed = 0, uses_anonymous_args = 0
 2471              		@ link register save eliminated.
 465:armwave.c     ****     //PyObject *mv;
 466:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 467:armwave.c     **** 
 468:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 469:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2472              		.loc 1 469 5 view .LVU633
 470:armwave.c     ****     
 471:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 472:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2473              		.loc 1 472 5 view .LVU634
 2474              	@ armwave.c:469:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 469:armwave.c     ****     
 2475              		.loc 1 469 11 is_stmt 0 view .LVU635
 2476 0b4c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2477              	@ armwave.c:472:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2478              		.loc 1 472 5 view .LVU636
 2479 0b50 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2480              	.LVL149:
 2481              		.loc 1 472 5 view .LVU637
 2482 0b54 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2483              	.LVL150:
 2484              		.loc 1 472 5 view .LVU638
 2485              		.cfi_endproc
 2486              	.LFE72:
 2488              		.align	2
 2489              		.global	armwave_test_buffer_alloc
 2490              		.syntax unified
 2491              		.arm
 2492              		.fpu vfp
 2494              	armwave_test_buffer_alloc:
 2495              	.LVL151:
 2496              	.LFB73:
 473:armwave.c     **** }
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 477:armwave.c     ****  */
 478:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 479:armwave.c     **** {
 2497              		.loc 1 479 1 is_stmt 1 view -0
 2498              		.cfi_startproc
 2499              		@ args = 0, pretend = 0, frame = 0
 2500              		@ frame_needed = 0, uses_anonymous_args = 0
 480:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2501              		.loc 1 480 5 view .LVU640
 2502              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2503              		.loc 1 479 1 is_stmt 0 view .LVU641
 2504 0b58 70402DE9 		push	{r4, r5, r6, lr}	@
 2505              		.cfi_def_cfa_offset 16
 2506              		.cfi_offset 4, -16
 2507              		.cfi_offset 5, -12
 2508              		.cfi_offset 6, -8
 2509              		.cfi_offset 14, -4
 2510              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2511              		.loc 1 479 1 view .LVU642
 2512 0b5c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2513              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2514              		.loc 1 480 23 view .LVU643
 2515 0b60 44409FE5 		ldr	r4, .L146	@ tmp128,
 2516 0b64 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2517              	.LVL152:
 2518              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2519              		.loc 1 480 7 view .LVU644
 2520 0b68 000050E3 		cmp	r0, #0	@ _1,
 2521 0b6c 0000000A 		beq	.L140		@,
 481:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2522              		.loc 1 481 9 is_stmt 1 view .LVU645
 2523 0b70 FEFFFFEB 		bl	free		@
 2524              	.LVL153:
 2525              	.L140:
 482:armwave.c     ****     }
 483:armwave.c     **** 
 484:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 485:armwave.c     **** 
 486:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2526              		.loc 1 486 5 view .LVU646
 2527              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2528              		.loc 1 486 75 is_stmt 0 view .LVU647
 2529 0b74 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2530 0b78 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2531              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2532              		.loc 1 486 40 view .LVU648
 2533 0b7c 0610A0E1 		mov	r1, r6	@, nsets
 2534              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2535              		.loc 1 486 75 view .LVU649
 2536 0b80 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2537              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2538              		.loc 1 486 40 view .LVU650
 2539 0b84 0500A0E1 		mov	r0, r5	@, _4
 2540 0b88 FEFFFFEB 		bl	calloc		@
 2541              	.LVL154:
 2542              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     **** 
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2543              		.loc 1 488 7 view .LVU651
 2544 0b8c 000050E3 		cmp	r0, #0	@ tmp124,
 2545              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2546              		.loc 1 486 38 view .LVU652
 2547 0b90 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2548              		.loc 1 488 5 is_stmt 1 view .LVU653
 2549              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 2550              		.loc 1 488 7 is_stmt 0 view .LVU654
 2551 0b94 7080BD18 		popne	{r4, r5, r6, pc}	@
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2552              		.loc 1 489 9 is_stmt 1 view .LVU655
 2553 0b98 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2554 0b9c 0620A0E1 		mov	r2, r6	@, nsets
 2555 0ba0 08009FE5 		ldr	r0, .L146+4	@,
 2556              	@ armwave.c:493: }
 490:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 491:armwave.c     ****         return;
 492:armwave.c     ****     }
 493:armwave.c     **** }
 2557              		.loc 1 493 1 is_stmt 0 view .LVU656
 2558 0ba4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2559              		.cfi_restore 14
 2560              		.cfi_restore 6
 2561              		.cfi_restore 5
 2562              		.cfi_restore 4
 2563              		.cfi_def_cfa_offset 0
 2564              	.LVL155:
 2565              	@ armwave.c:489:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2566              		.loc 1 489 9 view .LVU657
 2567 0ba8 FEFFFFEA 		b	printf		@
 2568              	.LVL156:
 2569              	.L147:
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2570              		.loc 1 489 9 view .LVU658
 2571              		.align	2
 2572              	.L146:
 2573 0bac 00000000 		.word	g_armwave_state
 2574 0bb0 E8010000 		.word	.LC18
 2575              		.cfi_endproc
 2576              	.LFE73:
 2578              		.align	2
 2579              		.global	armwave_fill_pixbuf_into_pybuffer
 2580              		.syntax unified
 2581              		.arm
 2582              		.fpu vfp
 2584              	armwave_fill_pixbuf_into_pybuffer:
 2585              	.LVL157:
 2586              	.LFB74:
 494:armwave.c     **** 
 495:armwave.c     **** /*
 496:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 497:armwave.c     ****  */
 498:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 499:armwave.c     **** {
 2587              		.loc 1 499 1 is_stmt 1 view -0
 2588              		.cfi_startproc
 2589              		@ args = 0, pretend = 0, frame = 48
 2590              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     Py_buffer buffer;
 2591              		.loc 1 500 5 view .LVU660
 501:armwave.c     ****     int ret;
 2592              		.loc 1 501 5 view .LVU661
 502:armwave.c     **** 
 503:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 504:armwave.c     **** 
 505:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2593              		.loc 1 505 5 view .LVU662
 2594              	@ armwave.c:499: {
 499:armwave.c     ****     Py_buffer buffer;
 2595              		.loc 1 499 1 is_stmt 0 view .LVU663
 2596 0bb4 04E02DE5 		str	lr, [sp, #-4]!	@,
 2597              		.cfi_def_cfa_offset 4
 2598              		.cfi_offset 14, -4
 2599 0bb8 34D04DE2 		sub	sp, sp, #52	@,,
 2600              		.cfi_def_cfa_offset 56
 2601              	@ armwave.c:505:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2602              		.loc 1 505 11 view .LVU664
 2603 0bbc 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2604 0bc0 0120A0E3 		mov	r2, #1	@,
 2605 0bc4 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2606              	.LVL158:
 506:armwave.c     **** 
 507:armwave.c     ****     if(ret != 0) {
 2607              		.loc 1 507 5 is_stmt 1 view .LVU665
 2608              	@ armwave.c:507:     if(ret != 0) {
 2609              		.loc 1 507 7 is_stmt 0 view .LVU666
 2610 0bc8 000050E3 		cmp	r0, #0	@,
 2611 0bcc 0A00001A 		bne	.L152		@,
 508:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 509:armwave.c     ****         Py_RETURN_FALSE;
 510:armwave.c     ****     }
 511:armwave.c     **** 
 512:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 513:armwave.c     **** 
 514:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2612              		.loc 1 514 5 is_stmt 1 view .LVU667
 2613 0bd0 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2614              	.LVL159:
 2615              		.loc 1 514 5 is_stmt 0 view .LVU668
 2616 0bd4 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2617              	.LVL160:
 515:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 516:armwave.c     **** 
 517:armwave.c     ****     PyBuffer_Release(&buffer);
 2618              		.loc 1 517 5 is_stmt 1 view .LVU669
 2619 0bd8 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2620 0bdc FEFFFFEB 		bl	PyBuffer_Release		@
 2621              	.LVL161:
 518:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 519:armwave.c     **** 
 520:armwave.c     ****     Py_RETURN_TRUE;
 2622              		.loc 1 520 5 view .LVU670
 2623              	.LBB31:
 2624              	.LBI31:
 2625              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2626              		.loc 2 456 20 view .LVU671
 2627              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2628              		.loc 2 458 21 view .LVU672
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2629              		.loc 2 459 5 view .LVU673
 2630              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2631              		.loc 2 459 18 is_stmt 0 view .LVU674
 2632 0be0 38309FE5 		ldr	r3, .L153	@ tmp126,
 2633              	.LBE32:
 2634              	.LBE31:
 2635              	@ armwave.c:520:     Py_RETURN_TRUE;
 2636              		.loc 1 520 5 view .LVU675
 2637 0be4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2638              	.LBB34:
 2639              	.LBB33:
 2640              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2641              		.loc 2 459 18 view .LVU676
 2642 0be8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2643 0bec 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2644 0bf0 002083E5 		str	r2, [r3]	@ tmp128,
 2645              	.LBE33:
 2646              	.LBE34:
 2647              	@ armwave.c:521: }
 521:armwave.c     **** }
 2648              		.loc 1 521 1 view .LVU677
 2649 0bf4 34D08DE2 		add	sp, sp, #52	@,,
 2650              		.cfi_remember_state
 2651              		.cfi_def_cfa_offset 4
 2652              		@ sp needed	@
 2653 0bf8 04F09DE4 		ldr	pc, [sp], #4	@
 2654              	.LVL162:
 2655              	.L152:
 2656              		.cfi_restore_state
 508:armwave.c     ****         Py_RETURN_FALSE;
 2657              		.loc 1 508 9 is_stmt 1 view .LVU678
 2658 0bfc 20009FE5 		ldr	r0, .L153+4	@,
 2659              	.LVL163:
 508:armwave.c     ****         Py_RETURN_FALSE;
 2660              		.loc 1 508 9 is_stmt 0 view .LVU679
 2661 0c00 FEFFFFEB 		bl	puts		@
 2662              	.LVL164:
 509:armwave.c     ****     }
 2663              		.loc 1 509 9 is_stmt 1 view .LVU680
 2664              	.LBB35:
 2665              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2666              		.loc 2 456 20 view .LVU681
 2667              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2668              		.loc 2 458 21 view .LVU682
 2669              		.loc 2 459 5 view .LVU683
 2670              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2671              		.loc 2 459 18 is_stmt 0 view .LVU684
 2672 0c04 1C309FE5 		ldr	r3, .L153+8	@ tmp120,
 2673              	.LBE36:
 2674              	.LBE35:
 2675              	@ armwave.c:509:         Py_RETURN_FALSE;
 509:armwave.c     ****     }
 2676              		.loc 1 509 9 view .LVU685
 2677 0c08 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2678              	.LBB38:
 2679              	.LBB37:
 2680              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2681              		.loc 2 459 18 view .LVU686
 2682 0c0c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2683 0c10 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2684 0c14 002083E5 		str	r2, [r3]	@ tmp122,
 2685              	.LBE37:
 2686              	.LBE38:
 2687              	@ armwave.c:521: }
 2688              		.loc 1 521 1 view .LVU687
 2689 0c18 34D08DE2 		add	sp, sp, #52	@,,
 2690              		.cfi_def_cfa_offset 4
 2691              		@ sp needed	@
 2692 0c1c 04F09DE4 		ldr	pc, [sp], #4	@
 2693              	.L154:
 2694              		.align	2
 2695              	.L153:
 2696 0c20 00000000 		.word	_Py_TrueStruct
 2697 0c24 3C020000 		.word	.LC19
 2698 0c28 00000000 		.word	_Py_FalseStruct
 2699              		.cfi_endproc
 2700              	.LFE74:
 2702              		.align	2
 2703              		.global	armwave_test_create_am_sine
 2704              		.syntax unified
 2705              		.arm
 2706              		.fpu vfp
 2708              	armwave_test_create_am_sine:
 2709              	.LVL165:
 2710              	.LFB75:
 522:armwave.c     **** 
 523:armwave.c     **** /*
 524:armwave.c     ****  * Make a test AM waveform for render tests.
 525:armwave.c     ****  *
 526:armwave.c     ****  * @param   mod                     modulation depth
 527:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 528:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 529:armwave.c     ****  */
 530:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 531:armwave.c     **** {
 2711              		.loc 1 531 1 is_stmt 1 view -0
 2712              		.cfi_startproc
 2713              		@ args = 0, pretend = 0, frame = 8
 2714              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     float v, noise, xnoise, mod_val;
 2715              		.loc 1 532 5 view .LVU689
 533:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2716              		.loc 1 533 5 view .LVU690
 2717              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2718              		.loc 1 531 1 is_stmt 0 view .LVU691
 2719 0c2c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2720              		.cfi_def_cfa_offset 32
 2721              		.cfi_offset 4, -32
 2722              		.cfi_offset 5, -28
 2723              		.cfi_offset 6, -24
 2724              		.cfi_offset 7, -20
 2725              		.cfi_offset 8, -16
 2726              		.cfi_offset 9, -12
 2727              		.cfi_offset 10, -8
 2728              		.cfi_offset 14, -4
 2729              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2730              		.loc 1 533 38 view .LVU692
 2731 0c30 7A7A9FED 		vldr.32	s14, .L186	@ tmp180,
 2732              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2733              		.loc 1 533 55 view .LVU693
 2734 0c34 00529FE5 		ldr	r5, .L186+28	@ tmp250,
 2735              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2736              		.loc 1 531 1 view .LVU694
 2737 0c38 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2738              		.cfi_def_cfa_offset 80
 2739              		.cfi_offset 80, -80
 2740              		.cfi_offset 81, -76
 2741              		.cfi_offset 82, -72
 2742              		.cfi_offset 83, -68
 2743              		.cfi_offset 84, -64
 2744              		.cfi_offset 85, -60
 2745              		.cfi_offset 86, -56
 2746              		.cfi_offset 87, -52
 2747              		.cfi_offset 88, -48
 2748              		.cfi_offset 89, -44
 2749              		.cfi_offset 90, -40
 2750              		.cfi_offset 91, -36
 2751 0c3c 0090A0E1 		mov	r9, r0	@ sets, sets
 2752              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2753              		.loc 1 533 38 view .LVU695
 2754 0c40 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2755              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 534:armwave.c     ****     int s, set_offset = 0;
 535:armwave.c     ****     int w, x;
 536:armwave.c     **** 
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2756              		.loc 1 537 70 view .LVU696
 2757 0c44 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2758 0c48 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2759              	.LBB41:
 2760              	.LBB42:
 2761              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2762              		.loc 1 480 23 view .LVU697
 2763 0c4c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2764              	.LVL166:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2765              		.loc 1 480 23 view .LVU698
 2766              	.LBE42:
 2767              	.LBE41:
 2768              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2769              		.loc 1 533 38 view .LVU699
 2770 0c50 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2771              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2772              		.loc 1 537 70 view .LVU700
 2773 0c54 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2774              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2775              		.loc 1 531 1 view .LVU701
 2776 0c58 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2777              	.LBB46:
 2778              	.LBB43:
 2779              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2780              		.loc 1 480 7 view .LVU702
 2781 0c5c 000050E3 		cmp	r0, #0	@ _82,
 2782              	.LBE43:
 2783              	.LBE46:
 2784              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2785              		.loc 1 531 1 view .LVU703
 2786 0c60 08D04DE2 		sub	sp, sp, #8	@,,
 2787              		.cfi_def_cfa_offset 88
 2788              	@ armwave.c:538:     g_armwave_state.test_wave_buffer_nsets = sets;
 538:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2789              		.loc 1 538 44 view .LVU704
 2790 0c64 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2791              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2792              		.loc 1 537 45 view .LVU705
 2793 0c68 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2794              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2795              		.loc 1 533 38 view .LVU706
 2796 0c6c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2797              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2798              		.loc 1 533 11 view .LVU707
 2799 0c70 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2800              	.LVL167:
 534:armwave.c     ****     int w, x;
 2801              		.loc 1 534 5 is_stmt 1 view .LVU708
 535:armwave.c     **** 
 2802              		.loc 1 535 5 view .LVU709
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2803              		.loc 1 537 5 view .LVU710
 2804              		.loc 1 538 5 view .LVU711
 539:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2805              		.loc 1 539 5 view .LVU712
 2806              	.LBB47:
 2807              	.LBI41:
 478:armwave.c     **** {
 2808              		.loc 1 478 6 view .LVU713
 2809              	.LBB44:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2810              		.loc 1 480 5 view .LVU714
 2811              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2812              		.loc 1 480 7 is_stmt 0 view .LVU715
 2813 0c74 0000000A 		beq	.L156		@,
 481:armwave.c     ****     }
 2814              		.loc 1 481 9 is_stmt 1 view .LVU716
 2815 0c78 FEFFFFEB 		bl	free		@
 2816              	.LVL168:
 2817              	.L156:
 486:armwave.c     **** 
 2818              		.loc 1 486 5 view .LVU717
 2819              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2820              		.loc 1 486 75 is_stmt 0 view .LVU718
 2821 0c7c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2822 0c80 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2823              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2824              		.loc 1 486 40 view .LVU719
 2825 0c84 0910A0E1 		mov	r1, r9	@, sets
 2826              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2827              		.loc 1 486 75 view .LVU720
 2828 0c88 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2829              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2830              		.loc 1 486 40 view .LVU721
 2831 0c8c 0400A0E1 		mov	r0, r4	@, _85
 2832 0c90 FEFFFFEB 		bl	calloc		@
 2833              	.LVL169:
 2834              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2835              		.loc 1 488 7 view .LVU722
 2836 0c94 000050E3 		cmp	r0, #0	@ tmp191,
 2837              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2838              		.loc 1 486 38 view .LVU723
 2839 0c98 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2840              		.loc 1 488 5 is_stmt 1 view .LVU724
 2841              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2842              		.loc 1 488 7 is_stmt 0 view .LVU725
 2843 0c9c 5A00000A 		beq	.L185		@,
 2844              	.L157:
 2845              	.LVL170:
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2846              		.loc 1 488 7 view .LVU726
 2847              	.LBE44:
 2848              	.LBE47:
 2849              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 540:armwave.c     **** 
 541:armwave.c     ****     for(s = 0; s < sets; s++) {
 2850              		.loc 1 541 5 discriminator 1 view .LVU727
 2851 0ca0 000059E3 		cmp	r9, #0	@ sets,
 2852 0ca4 550000DA 		ble	.L155		@,
 2853              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 543:armwave.c     ****     
 544:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 545:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 546:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 547:armwave.c     **** 
 548:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 549:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 550:armwave.c     ****                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 552:armwave.c     ****                 noise *= noise;
 553:armwave.c     **** 
 554:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 555:armwave.c     ****                     noise = -noise;
 556:armwave.c     **** 
 557:armwave.c     ****                 noise += 1.0f;
 558:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 559:armwave.c     **** 
 560:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2854              		.loc 1 560 45 view .LVU728
 2855 0ca8 5C8A9FED 		vldr.32	s16, .L186	@ tmp258,
 2856              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 561:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 562:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 563:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2857              		.loc 1 563 104 view .LVU729
 2858 0cac 5CCA9FED 		vldr.32	s24, .L186+4	@ tmp259,
 2859              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2860              		.loc 1 541 5 view .LVU730
 2861 0cb0 0070A0E3 		mov	r7, #0	@ set_offset,
 2862              	@ armwave.c:542:         printf("Calculating test set %d\n", s);
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2863              		.loc 1 542 9 view .LVU731
 2864 0cb4 84A19FE5 		ldr	r10, .L186+32	@ tmp257,
 2865              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2866              		.loc 1 541 5 view .LVU732
 2867 0cb8 0780A0E1 		mov	r8, r7	@ s, set_offset
 2868              	.LVL171:
 2869              	.L158:
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2870              		.loc 1 542 9 is_stmt 1 view .LVU733
 2871 0cbc 0810A0E1 		mov	r1, r8	@, s
 2872 0cc0 0A00A0E1 		mov	r0, r10	@, tmp257
 2873 0cc4 FEFFFFEB 		bl	printf		@
 2874              	.LVL172:
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2875              		.loc 1 544 9 view .LVU734
 2876              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2877              		.loc 1 544 39 is_stmt 0 view .LVU735
 2878 0cc8 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2879              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2880              		.loc 1 544 9 view .LVU736
 2881 0ccc 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2882 0cd0 450000DA 		ble	.L159		@,
 2883              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2884              		.loc 1 546 21 view .LVU737
 2885 0cd4 53CADFED 		vldr.32	s25, .L186+8	@ tmp200,
 2886              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2887              		.loc 1 560 33 view .LVU738
 2888 0cd8 53BA9FED 		vldr.32	s22, .L186+12	@ tmp253,
 2889              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2890              		.loc 1 558 24 view .LVU739
 2891 0cdc 53AADFED 		vldr.32	s21, .L186+16	@ tmp254,
 2892 0ce0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2893              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2894              		.loc 1 544 15 view .LVU740
 2895 0ce4 0060A0E3 		mov	r6, #0	@ w,
 2896              	.LVL173:
 2897              	.L166:
 546:armwave.c     **** 
 2898              		.loc 1 546 13 is_stmt 1 view .LVU741
 2899              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2900              		.loc 1 546 21 is_stmt 0 view .LVU742
 2901 0ce8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2902 0cec 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2903              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2904              		.loc 1 548 13 view .LVU743
 2905 0cf0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2906              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2907              		.loc 1 546 21 view .LVU744
 2908 0cf4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2909 0cf8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2910              	.LVL174:
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2911              		.loc 1 548 13 is_stmt 1 view .LVU745
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2912              		.loc 1 548 13 is_stmt 0 view .LVU746
 2913 0cfc 370000DA 		ble	.L160		@,
 2914 0d00 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2915              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2916              		.loc 1 563 113 view .LVU747
 2917 0d04 4AAA9FED 		vldr.32	s20, .L186+20	@ tmp229,
 2918 0d08 4A8ADFED 		vldr.32	s17, .L186+24	@ tmp230,
 2919              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2920              		.loc 1 548 19 view .LVU748
 2921 0d0c 0040A0E3 		mov	r4, #0	@ x,
 2922              	.LVL175:
 2923              	.L165:
 549:armwave.c     ****                 noise *= noise;
 2924              		.loc 1 549 17 is_stmt 1 view .LVU749
 2925              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2926              		.loc 1 549 28 is_stmt 0 view .LVU750
 2927 0d10 FEFFFFEB 		bl	rand		@
 2928              	.LVL176:
 2929              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2930              		.loc 1 549 35 view .LVU751
 2931 0d14 7000FFE6 		uxth	r0, r0	@ tmp201,
 2932              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2933              		.loc 1 549 45 view .LVU752
 2934 0d18 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2935 0d1c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2936              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2937              		.loc 1 549 24 view .LVU753
 2938 0d20 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2939              	.LVL177:
 550:armwave.c     ****                 noise *= noise;
 2940              		.loc 1 550 17 is_stmt 1 view .LVU754
 2941              	@ armwave.c:550:                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 2942              		.loc 1 550 23 is_stmt 0 view .LVU755
 2943 0d24 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2944              	.LVL178:
 551:armwave.c     ****                 noise *= noise;
 2945              		.loc 1 551 17 is_stmt 1 view .LVU756
 2946              	@ armwave.c:551:                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 2947              		.loc 1 551 23 is_stmt 0 view .LVU757
 2948 0d28 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2949              	.LVL179:
 552:armwave.c     **** 
 2950              		.loc 1 552 17 is_stmt 1 view .LVU758
 2951              	@ armwave.c:552:                 noise *= noise;
 552:armwave.c     **** 
 2952              		.loc 1 552 23 is_stmt 0 view .LVU759
 2953 0d2c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2954              	.LVL180:
 554:armwave.c     ****                     noise = -noise;
 2955              		.loc 1 554 17 is_stmt 1 view .LVU760
 2956              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 2957              		.loc 1 554 21 is_stmt 0 view .LVU761
 2958 0d30 FEFFFFEB 		bl	rand		@
 2959              	.LVL181:
 555:armwave.c     **** 
 2960              		.loc 1 555 21 is_stmt 1 view .LVU762
 2961              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 2962              		.loc 1 554 19 is_stmt 0 view .LVU763
 2963 0d34 020910E3 		tst	r0, #32768	@,
 2964              	@ armwave.c:555:                     noise = -noise;
 555:armwave.c     **** 
 2965              		.loc 1 555 27 view .LVU764
 2966 0d38 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2967              	.LVL182:
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2968              		.loc 1 557 17 is_stmt 1 view .LVU765
 558:armwave.c     **** 
 2969              		.loc 1 558 17 view .LVU766
 2970              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2971              		.loc 1 558 27 is_stmt 0 view .LVU767
 2972 0d3c FEFFFFEB 		bl	rand		@
 2973              	.LVL183:
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2974              		.loc 1 560 17 is_stmt 1 view .LVU768
 2975              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2976              		.loc 1 560 45 is_stmt 0 view .LVU769
 2977 0d40 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2978              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2979              		.loc 1 560 33 view .LVU770
 2980 0d44 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2981              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2982              		.loc 1 560 45 view .LVU771
 2983 0d48 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2984              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2985              		.loc 1 560 33 view .LVU772
 2986 0d4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2987              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2988              		.loc 1 560 45 view .LVU773
 2989 0d50 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2990              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2991              		.loc 1 560 33 view .LVU774
 2992 0d54 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2993              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2994              		.loc 1 558 34 view .LVU775
 2995 0d58 7000FFE6 		uxth	r0, r0	@ tmp214,
 2996              	.LVL184:
 2997              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2998              		.loc 1 558 44 view .LVU776
 2999 0d5c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3000 0d60 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3001              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3002              		.loc 1 558 24 view .LVU777
 3003 0d64 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3004              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3005              		.loc 1 560 77 view .LVU778
 3006 0d68 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3007              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3008              		.loc 1 560 22 view .LVU779
 3009 0d6c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3010 0d70 FEFFFFEB 		bl	sin		@
 3011              	.LVL185:
 3012              		.loc 1 563 17 is_stmt 1 view .LVU780
 3013              	@ armwave.c:557:                 noise += 1.0f;
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3014              		.loc 1 557 23 is_stmt 0 view .LVU781
 3015 0d74 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3016              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3017              		.loc 1 563 104 view .LVU782
 3018 0d78 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3019              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3020              		.loc 1 560 98 view .LVU783
 3021 0d7c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3022              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3023              		.loc 1 560 87 view .LVU784
 3024 0d80 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3025              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3026              		.loc 1 560 98 view .LVU785
 3027 0d84 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3028              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3029              		.loc 1 560 19 view .LVU786
 3030 0d88 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3031              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3032              		.loc 1 563 113 view .LVU787
 3033 0d8c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3034 0d90 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3035 0d94 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3036 0d98 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3037 0d9c 050000DA 		ble	.L162		@,
 3038              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3039              		.loc 1 563 104 discriminator 1 view .LVU788
 3040 0da0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3041 0da4 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3042 0da8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3043 0dac E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3044 0db0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3045 0db4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3046              	.L162:
 3047              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3048              		.loc 1 563 57 discriminator 12 view .LVU789
 3049 0db8 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3050              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3051              		.loc 1 563 102 discriminator 12 view .LVU790
 3052 0dbc 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3053 0dc0 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3054 0dc4 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3055              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3056              		.loc 1 548 58 discriminator 12 view .LVU791
 3057 0dc8 014084E2 		add	r4, r4, #1	@ x, x,
 3058              	.LVL186:
 3059              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3060              		.loc 1 563 102 discriminator 12 view .LVU792
 3061 0dcc 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3062              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3063              		.loc 1 548 43 discriminator 12 view .LVU793
 3064 0dd0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3065              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3066              		.loc 1 548 13 discriminator 12 view .LVU794
 3067 0dd4 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3068 0dd8 CCFFFFCA 		bgt	.L165		@,
 3069 0ddc 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3070              	.LVL187:
 3071              	.L160:
 3072              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3073              		.loc 1 544 48 discriminator 2 view .LVU795
 3074 0de0 016086E2 		add	r6, r6, #1	@ w, w,
 3075              	.LVL188:
 3076              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3077              		.loc 1 544 9 discriminator 2 view .LVU796
 3078 0de4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3079 0de8 BEFFFFBA 		blt	.L166		@,
 3080              	.LVL189:
 3081              	.L159:
 564:armwave.c     ****             }
 565:armwave.c     ****         }
 566:armwave.c     **** 
 567:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3082              		.loc 1 567 9 is_stmt 1 discriminator 2 view .LVU797
 3083              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3084              		.loc 1 567 46 is_stmt 0 discriminator 2 view .LVU798
 3085 0dec 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3086              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3087              		.loc 1 541 27 discriminator 2 view .LVU799
 3088 0df0 018088E2 		add	r8, r8, #1	@ s, s,
 3089              	.LVL190:
 3090              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3091              		.loc 1 541 5 discriminator 2 view .LVU800
 3092 0df4 080059E1 		cmp	r9, r8	@ sets, s
 3093              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3094              		.loc 1 567 20 discriminator 2 view .LVU801
 3095 0df8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3096              	.LVL191:
 3097              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3098              		.loc 1 541 5 discriminator 2 view .LVU802
 3099 0dfc AEFFFF1A 		bne	.L158		@,
 3100              	.LVL192:
 3101              	.L155:
 3102              	@ armwave.c:569: }
 568:armwave.c     ****     }
 569:armwave.c     **** }
 3103              		.loc 1 569 1 view .LVU803
 3104 0e00 08D08DE2 		add	sp, sp, #8	@,,
 3105              		.cfi_remember_state
 3106              		.cfi_def_cfa_offset 80
 3107              		@ sp needed	@
 3108 0e04 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3109              		.cfi_restore 90
 3110              		.cfi_restore 91
 3111              		.cfi_restore 88
 3112              		.cfi_restore 89
 3113              		.cfi_restore 86
 3114              		.cfi_restore 87
 3115              		.cfi_restore 84
 3116              		.cfi_restore 85
 3117              		.cfi_restore 82
 3118              		.cfi_restore 83
 3119              		.cfi_restore 80
 3120              		.cfi_restore 81
 3121              		.cfi_def_cfa_offset 32
 3122              	.LVL193:
 3123              		.loc 1 569 1 view .LVU804
 3124 0e08 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3125              	.LVL194:
 3126              	.L185:
 3127              		.cfi_restore_state
 3128              	.LBB48:
 3129              	.LBB45:
 489:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3130              		.loc 1 489 9 is_stmt 1 view .LVU805
 3131 0e0c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3132 0e10 0920A0E1 		mov	r2, r9	@, sets
 3133 0e14 28009FE5 		ldr	r0, .L186+36	@,
 3134 0e18 FEFFFFEB 		bl	printf		@
 3135              	.LVL195:
 491:armwave.c     ****     }
 3136              		.loc 1 491 9 view .LVU806
 3137 0e1c 9FFFFFEA 		b	.L157		@
 3138              	.L187:
 3139              		.align	2
 3140              	.L186:
 3141 0e20 0000803F 		.word	1065353216
 3142 0e24 00007F43 		.word	1132396544
 3143 0e28 0000003F 		.word	1056964608
 3144 0e2c C3F5C840 		.word	1086911939
 3145 0e30 38FFC74A 		.word	1254620984
 3146 0e34 0000FE42 		.word	1123942400
 3147 0e38 00000043 		.word	1124073472
 3148 0e3c 00000000 		.word	g_armwave_state
 3149 0e40 90020000 		.word	.LC20
 3150 0e44 E8010000 		.word	.LC18
 3151              	.LBE45:
 3152              	.LBE48:
 3153              		.cfi_endproc
 3154              	.LFE75:
 3156              		.align	2
 3157              		.global	armwave_cleanup
 3158              		.syntax unified
 3159              		.arm
 3160              		.fpu vfp
 3162              	armwave_cleanup:
 3163              	.LFB76:
 570:armwave.c     **** 
 571:armwave.c     **** /*
 572:armwave.c     ****  * Make a test square waveform.
 573:armwave.c     ****  *
 574:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 575:armwave.c     ****  */
 576:armwave.c     **** #if 0
 577:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 578:armwave.c     **** {
 579:armwave.c     ****     uint8_t v;
 580:armwave.c     ****     float noise, xnoise;
 581:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 582:armwave.c     ****     int w, x;
 583:armwave.c     **** 
 584:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 585:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 586:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 587:armwave.c     ****             noise *= noise;
 588:armwave.c     ****             noise *= noise;
 589:armwave.c     ****             noise *= noise;
 590:armwave.c     **** 
 591:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 592:armwave.c     ****                 noise = -noise;
 593:armwave.c     **** 
 594:armwave.c     ****             //noise += 1.0f;
 595:armwave.c     **** 
 596:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 597:armwave.c     ****                 new_level = 0.2f;
 598:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 599:armwave.c     ****                 new_level = 0.8f;
 600:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 601:armwave.c     ****                 new_level = 0.2f;
 602:armwave.c     ****             } else {
 603:armwave.c     ****                 new_level = 0.8f;
 604:armwave.c     ****             }
 605:armwave.c     **** 
 606:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 607:armwave.c     **** 
 608:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 609:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 610:armwave.c     ****         }
 611:armwave.c     ****     }
 612:armwave.c     **** }
 613:armwave.c     **** #endif
 614:armwave.c     **** 
 615:armwave.c     **** /*
 616:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 617:armwave.c     ****  */
 618:armwave.c     **** void armwave_cleanup()
 619:armwave.c     **** {
 3164              		.loc 1 619 1 view -0
 3165              		.cfi_startproc
 3166              		@ args = 0, pretend = 0, frame = 0
 3167              		@ frame_needed = 0, uses_anonymous_args = 0
 620:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3168              		.loc 1 620 5 view .LVU808
 3169              	@ armwave.c:619: {
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3170              		.loc 1 619 1 is_stmt 0 view .LVU809
 3171 0e48 10402DE9 		push	{r4, lr}	@
 3172              		.cfi_def_cfa_offset 8
 3173              		.cfi_offset 4, -8
 3174              		.cfi_offset 14, -4
 3175              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3176              		.loc 1 620 25 view .LVU810
 3177 0e4c 34409FE5 		ldr	r4, .L190	@ tmp114,
 3178              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3179              		.loc 1 620 5 view .LVU811
 3180 0e50 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3181 0e54 FEFFFFEB 		bl	free		@
 3182              	.LVL196:
 621:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3183              		.loc 1 621 5 is_stmt 1 view .LVU812
 3184 0e58 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3185 0e5c FEFFFFEB 		bl	free		@
 3186              	.LVL197:
 622:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3187              		.loc 1 622 5 view .LVU813
 3188 0e60 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3189 0e64 FEFFFFEB 		bl	free		@
 3190              	.LVL198:
 623:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3191              		.loc 1 623 5 view .LVU814
 3192 0e68 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3193 0e6c FEFFFFEB 		bl	free		@
 3194              	.LVL199:
 624:armwave.c     **** 
 625:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3195              		.loc 1 625 5 view .LVU815
 3196              	@ armwave.c:625:     g_armwave_state.out_pixbuf = NULL;
 3197              		.loc 1 625 32 is_stmt 0 view .LVU816
 3198 0e70 0030A0E3 		mov	r3, #0	@ tmp123,
 3199 0e74 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 626:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3200              		.loc 1 626 5 is_stmt 1 view .LVU817
 3201              	@ armwave.c:626:     g_armwave_state.ch1_buffer = NULL;
 3202              		.loc 1 626 32 is_stmt 0 view .LVU818
 3203 0e78 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 627:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3204              		.loc 1 627 5 is_stmt 1 view .LVU819
 3205              	@ armwave.c:627:     g_armwave_state.xcoord_to_xpixel = NULL;
 3206              		.loc 1 627 38 is_stmt 0 view .LVU820
 3207 0e7c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 628:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3208              		.loc 1 628 5 is_stmt 1 view .LVU821
 3209              	@ armwave.c:628:     g_armwave_state.test_wave_buffer = NULL;
 3210              		.loc 1 628 38 is_stmt 0 view .LVU822
 3211 0e80 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3212              	@ armwave.c:629: }
 629:armwave.c     **** }
 3213              		.loc 1 629 1 view .LVU823
 3214 0e84 1080BDE8 		pop	{r4, pc}	@
 3215              	.L191:
 3216              		.align	2
 3217              	.L190:
 3218 0e88 00000000 		.word	g_armwave_state
 3219              		.cfi_endproc
 3220              	.LFE76:
 3222              		.comm	gamma_table,256,4
 3223              		.comm	g_armwave_state,136,4
 3224              		.section	.rodata
 3225              		.align	2
 3226              		.set	.LANCHOR0,. + 0
 3229              	__PRETTY_FUNCTION__.17096:
 3230 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3230      6176655F 
 3230      66696C6C 
 3230      5F706978 
 3230      6275665F 
 3231 001b 00       		.space	1
 3234              	__PRETTY_FUNCTION__.17126:
 3235 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3235      6176655F 
 3235      73657475 
 3235      705F7265 
 3235      6E646572 
 3236 0031 000000   		.space	3
 3239              	__PRETTY_FUNCTION__.17133:
 3240 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3240      6176655F 
 3240      7365745F 
 3240      77617665 
 3240      5F706F69 
 3241 004d 000000   		.space	3
 3244              	__PRETTY_FUNCTION__.17140:
 3245 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3245      6176655F 
 3245      7365745F 
 3245      77617665 
 3245      5F706F69 
 3246              		.section	.rodata.str1.4,"aMS",%progbits,1
 3247              		.align	2
 3248              	.LC0:
 3249 0000 76302E30 		.ascii	"v0.0.1\000"
 3249      2E3100
 3250 0007 00       		.space	1
 3251              	.LC1:
 3252 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3252      61766520 
 3252      76657273 
 3252      696F6E3A 
 3252      2025730A 
 3253 001d 000000   		.space	3
 3254              	.LC2:
 3255 0020 61726D77 		.ascii	"armwave.c\000"
 3255      6176652E 
 3255      6300
 3256 002a 0000     		.space	2
 3257              	.LC3:
 3258 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3258      62756666 
 3258      65722021 
 3258      3D204E55 
 3258      4C4C00
 3259 003f 00       		.space	1
 3260              	.LC4:
 3261 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3261      20653D25 
 3261      6420773D 
 3261      25642077 
 3261      733D2564 
 3262              	.LC5:
 3263 006c 73746172 		.ascii	"start_point < end_point\000"
 3263      745F706F 
 3263      696E7420 
 3263      3C20656E 
 3263      645F706F 
 3264              	.LC6:
 3265 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3265      7566665F 
 3265      73697A65 
 3265      3D25642C 
 3265      20636D70 
 3266 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3266      5F776964 
 3266      74683D25 
 3266      642C2077 
 3266      6176655F 
 3267 00e1 000000   		.space	3
 3268              	.LC7:
 3269 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3269      6D776176 
 3269      655F7374 
 3269      6174652E 
 3269      6368315F 
 3270 0107 00       		.space	1
 3271              	.LC8:
 3272 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3272      6D776176 
 3272      655F7374 
 3272      6174652E 
 3272      78636F6F 
 3273 0131 000000   		.space	3
 3274              	.LC9:
 3275 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3275      3A203078 
 3275      25303878 
 3275      20307825 
 3275      30387820 
 3276              	.LC10:
 3277 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3277      5F627566 
 3277      66657220 
 3277      213D204E 
 3277      554C4C00 
 3278              	.LC11:
 3279 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3279      6176655F 
 3279      7365745F 
 3279      77617665 
 3279      5F706F69 
 3280 019f 78636565 		.ascii	"xceeded\000"
 3280      64656400 
 3281 01a7 00       		.space	1
 3282              	.LC12:
 3283 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3283      5F627566 
 3283      6665725F 
 3283      70747220 
 3283      213D2030 
 3284 01bd 000000   		.space	3
 3285              	.LC13:
 3286 01c0 776200   		.ascii	"wb\000"
 3287 01c3 00       		.space	1
 3288              	.LC14:
 3289 01c4 50330A00 		.ascii	"P3\012\000"
 3290              	.LC15:
 3291 01c8 25642025 		.ascii	"%d %d\012\000"
 3291      640A00
 3292 01cf 00       		.space	1
 3293              	.LC16:
 3294 01d0 3235350A 		.ascii	"255\012\000"
 3294      00
 3295 01d5 000000   		.space	3
 3296              	.LC17:
 3297 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3297      25336420 
 3297      2533640A 
 3297      00
 3298 01e5 000000   		.space	3
 3299              	.LC18:
 3300 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3300      6176655F 
 3300      74657374 
 3300      5F627566 
 3300      6665725F 
 3301 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3301      20627566 
 3301      66657220 
 3301      28256420 
 3301      62797465 
 3302              	.LC19:
 3303 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3303      6176655F 
 3303      66696C6C 
 3303      5F706978 
 3303      6275665F 
 3304 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3304      20666169 
 3304      6C65642C 
 3304      20726574 
 3304      75726E69 
 3305 028e 0000     		.space	2
 3306              	.LC20:
 3307 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3307      756C6174 
 3307      696E6720 
 3307      74657374 
 3307      20736574 
 3308              		.text
 3309              	.Letext0:
 3310              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3311              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3312              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3313              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3314              		.file 7 "/usr/include/stdio.h"
 3315              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3316              		.file 9 "/usr/include/errno.h"
 3317              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3318              		.file 11 "/usr/include/unistd.h"
 3319              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3320              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3321              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3322              		.file 15 "/usr/include/math.h"
 3323              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3324              		.file 17 "/usr/include/time.h"
 3325              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3326              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3327              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3328              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3329              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3330              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3331              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3332              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3333              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3334              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3335              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3336              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3337              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3338              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3339              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3340              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3341              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3342              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3343              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3344              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3345              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3346              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3347              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3348              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3349              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3350              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3351              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3352              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3353              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3354              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3355              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3356              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3357              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3358              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3359              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3360              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3361              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3362              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3363              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3364              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3365              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3366              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3367              		.file 60 "/usr/local/include/python3.8/context.h"
 3368              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3369              		.file 62 "/usr/local/include/python3.8/code.h"
 3370              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3371              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3372              		.file 65 "/usr/local/include/python3.8/import.h"
 3373              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3374              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3375              		.file 68 "/usr/include/malloc.h"
 3376              		.file 69 "armwave.h"
 3377              		.file 70 "/usr/include/stdlib.h"
 3378              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3379              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3380              		.file 73 "<built-in>"
 3381              		.file 74 "/usr/include/assert.h"
