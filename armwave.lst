   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_NWAVES                 64
  25:armwave.c     **** #define TEST_WAVE_SIZE              2048
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t gamma_table[256];
  40:armwave.c     **** 
  41:armwave.c     **** /*
  42:armwave.c     ****  * Create a gamma table.
  43:armwave.c     ****  */
  44:armwave.c     **** void test_create_gamma()
  45:armwave.c     **** {
  85              		.loc 1 45 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  46:armwave.c     ****     int i;
  89              		.loc 1 46 5 view .LVU1
  47:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 47 5 view .LVU2
  91              	.LVL0:
  48:armwave.c     **** 
  49:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 49 5 view .LVU3
  93              	@ armwave.c:45: {
  45:armwave.c     ****     int i;
  94              		.loc 1 45 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.41,
 110              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 50 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 50 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 50 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.41,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.41,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 50 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 50 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.41
 128              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 50 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 50 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 50 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 50 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 50 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:49:     for(i = 0; i < 256; i++) {
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 49 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.41, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:52: }
  51:armwave.c     ****     }
  52:armwave.c     **** }
 155              		.loc 1 52 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 52 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * Initialise things.  STUB, mostly.
  56:armwave.c     ****  */
  57:armwave.c     **** void armwave_init()
  58:armwave.c     **** {
 187              		.loc 1 58 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  59:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 59 5 view .LVU19
 193              	@ armwave.c:59:     g_armwave_state.flags = 0;
 194              		.loc 1 59 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:61:     printf("armwave version: %s\n", ARMWAVE_VER);
  60:armwave.c     **** 
  61:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 61 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:59:     g_armwave_state.flags = 0;
  59:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 59 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 61 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  62:armwave.c     **** }
  63:armwave.c     **** 
  64:armwave.c     **** /*
  65:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  66:armwave.c     ****  * pre-computed.
  67:armwave.c     ****  *
  68:armwave.c     ****  * @param    slice_y        Slice to render at
  69:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  70:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  71:armwave.c     ****  */
  72:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  73:armwave.c     **** {
 225              		.loc 1 73 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  74:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 74 5 view .LVU25
  75:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 75 5 view .LVU26
  76:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 76 5 view .LVU27
  77:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 77 5 view .LVU28
  78:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 78 5 view .LVU29
  79:armwave.c     **** 
  80:armwave.c     ****     //printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:73: {
  73:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 73 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 249              		.loc 1 81 40 view .LVU32
 250 00a0 D0409FE5 		ldr	r4, .L23	@ tmp242,
 251              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  82:armwave.c     **** 
  83:armwave.c     ****     // roll through each waveform
  84:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 252              		.loc 1 84 5 view .LVU33
 253 00a4 2C2094E5 		ldr	r2, [r4, #44]	@ g_armwave_state.waves, g_armwave_state.waves
 254              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 255              		.loc 1 81 63 view .LVU34
 256 00a8 345094E5 		ldr	r5, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 257              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 84 5 view .LVU35
 259 00ac 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 261              		.loc 1 81 40 view .LVU36
 262 00b0 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 264              		.loc 1 81 63 view .LVU37
 265 00b4 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 266              	.LVL7:
 267              		.loc 1 84 5 is_stmt 1 view .LVU38
 268              		.loc 1 84 5 is_stmt 0 view .LVU39
 269 00b8 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 270 00bc 000051E3 		cmp	r1, #0	@ height,
 271 00c0 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 272 00c4 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 273              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 84 11 view .LVU40
 275 00c8 0070A0E3 		mov	r7, #0	@ w,
 276              	.LVL8:
 277              	.L15:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  86:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 86 9 is_stmt 1 view .LVU41
  87:armwave.c     **** 
  88:armwave.c     ****         // roll through y and render the slice into the out buffer
  89:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  90:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 279              		.loc 1 90 9 view .LVU42
 280              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 281              		.loc 1 86 64 is_stmt 0 view .LVU43
 282 00cc 280094E5 		ldr	r0, [r4, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 283 00d0 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 284              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
 285              		.loc 1 90 16 view .LVU44
 286 00d4 0020A0E3 		mov	r2, #0	@ yy,
 287 00d8 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 288 00dc 006086E0 		add	r6, r6, r0	@ ivtmp.48, g_armwave_state.wave_buffer, tmp193
 289              	.LVL9:
 290              	.L14:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 291              		.loc 1 91 13 is_stmt 1 view .LVU45
 292              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
 293              		.loc 1 91 18 is_stmt 0 view .LVU46
 294 00e0 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 295              	.LVL10:
  92:armwave.c     **** 
  93:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 296              		.loc 1 93 13 is_stmt 1 view .LVU47
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  95:armwave.c     ****                 scale_value = (word & 0xff);
 297              		.loc 1 95 17 view .LVU48
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 298              		.loc 1 96 17 view .LVU49
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 299              		.loc 1 97 17 view .LVU50
 300              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 96 63 is_stmt 0 view .LVU51
 302 00e4 349094E5 		ldr	r9, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 303 00e8 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 304              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 97 47 view .LVU52
 306 00ec 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 307 00f0 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 308              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****                 word >>= 8;
 309              		.loc 1 98 22 view .LVU53
 310 00f4 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 311 00f8 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 312              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 313              		.loc 1 97 47 view .LVU54
 314 00fc 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 315 0100 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 316 0104 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 317 0108 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 318              	.LVL11:
 319              		.loc 1 98 17 is_stmt 1 view .LVU55
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 320              		.loc 1 95 17 view .LVU56
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 96 17 view .LVU57
  97:armwave.c     ****                 word >>= 8;
 322              		.loc 1 97 17 view .LVU58
 323              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 96 63 is_stmt 0 view .LVU59
 325 010c 34E094E5 		ldr	lr, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 326              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 327              		.loc 1 97 47 view .LVU60
 328 0110 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 329 0114 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 330              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 96 63 view .LVU61
 332 0118 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 333 011c 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 334              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 335              		.loc 1 97 47 view .LVU62
 336 0120 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 337 0124 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 338              	.LVL12:
 339              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 340              		.loc 1 90 37 view .LVU63
 341 0128 042082E2 		add	r2, r2, #4	@ yy, yy,
 342              	.LVL13:
 343              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 344              		.loc 1 97 47 view .LVU64
 345 012c 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 346 0130 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 347              	.LVL14:
 348              		.loc 1 98 17 is_stmt 1 view .LVU65
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 349              		.loc 1 95 17 view .LVU66
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 350              		.loc 1 96 17 view .LVU67
  97:armwave.c     ****                 word >>= 8;
 351              		.loc 1 97 17 view .LVU68
 352              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 96 63 is_stmt 0 view .LVU69
 354 0134 34E094E5 		ldr	lr, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 355              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 356              		.loc 1 90 9 view .LVU70
 357 0138 020051E1 		cmp	r1, r2	@ height, yy
 358              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 359              		.loc 1 97 47 view .LVU71
 360 013c 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 361 0140 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 362 0144 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 363 0148 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 364              		.loc 1 98 17 is_stmt 1 view .LVU72
 365              	.LVL15:
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 366              		.loc 1 95 17 view .LVU73
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 367              		.loc 1 96 17 view .LVU74
  97:armwave.c     ****                 word >>= 8;
 368              		.loc 1 97 17 view .LVU75
 369              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 96 63 is_stmt 0 view .LVU76
 371 014c 34C094E5 		ldr	ip, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 372              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 373              		.loc 1 97 47 view .LVU77
 374 0150 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 375 0154 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 376 0158 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 377 015c 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 378              		.loc 1 98 17 is_stmt 1 view .LVU78
 379              	.LVL16:
 380              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 381              		.loc 1 90 9 is_stmt 0 view .LVU79
 382 0160 DEFFFF8A 		bhi	.L14		@,
 383              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 384              		.loc 1 84 5 view .LVU80
 385 0164 2C2094E5 		ldr	r2, [r4, #44]	@ g_armwave_state.waves, g_armwave_state.waves
 386              	.LVL17:
 387              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 388              		.loc 1 84 44 view .LVU81
 389 0168 017087E2 		add	r7, r7, #1	@ w, w,
 390              	.LVL18:
 391              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 392              		.loc 1 84 5 view .LVU82
 393 016c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 394 0170 D5FFFF3A 		bcc	.L15		@,
 395 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 396              	.L24:
 397              		.align	2
 398              	.L23:
 399 0178 00000000 		.word	g_armwave_state
 400              		.cfi_endproc
 401              	.LFE59:
 403              		.align	2
 404              		.global	armwave_fill_pixbuf_256
 405              		.syntax unified
 406              		.arm
 407              		.fpu vfp
 409              	armwave_fill_pixbuf_256:
 410              	.LVL19:
 411              	.LFB60:
  99:armwave.c     ****             }
 100:armwave.c     ****         }
 101:armwave.c     ****     }
 102:armwave.c     **** }
 103:armwave.c     **** 
 104:armwave.c     **** /*
 105:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 106:armwave.c     ****  */
 107:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 108:armwave.c     **** {
 412              		.loc 1 108 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 416              		.loc 1 109 5 view .LVU84
 110:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 417              		.loc 1 110 5 view .LVU85
 111:armwave.c     ****     uint8_t r, g, b, value;
 418              		.loc 1 111 5 view .LVU86
 112:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 419              		.loc 1 112 5 view .LVU87
 420              	@ armwave.c:108: {
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 421              		.loc 1 108 1 is_stmt 0 view .LVU88
 422 017c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 423              		.cfi_def_cfa_offset 36
 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 8, -20
 429              		.cfi_offset 9, -16
 430              		.cfi_offset 10, -12
 431              		.cfi_offset 11, -8
 432              		.cfi_offset 14, -4
 433              	@ armwave.c:116:     assert(out_buffer != NULL);
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 114:armwave.c     ****     uint32_t offset;
 115:armwave.c     **** 
 116:armwave.c     ****     assert(out_buffer != NULL);
 434              		.loc 1 116 5 view .LVU89
 435 0180 000050E3 		cmp	r0, #0	@ out_buffer
 436              	@ armwave.c:112:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 437              		.loc 1 112 15 view .LVU90
 438 0184 44529FE5 		ldr	r5, .L52	@ tmp360,
 439              	@ armwave.c:108: {
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 440              		.loc 1 108 1 view .LVU91
 441 0188 0CD04DE2 		sub	sp, sp, #12	@,,
 442              		.cfi_def_cfa_offset 48
 443              	@ armwave.c:112:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 444              		.loc 1 112 15 view .LVU92
 445 018c 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 446              	.LVL20:
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 447              		.loc 1 113 5 is_stmt 1 view .LVU93
 114:armwave.c     **** 
 448              		.loc 1 114 5 view .LVU94
 449              		.loc 1 116 5 view .LVU95
 450 0190 8900000A 		beq	.L50		@,
 117:armwave.c     **** 
 118:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 119:armwave.c     **** 
 120:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 451              		.loc 1 120 5 view .LVU96
 452              	@ armwave.c:120:     npix = g_armwave_state.target_width * 256;
 453              		.loc 1 120 41 is_stmt 0 view .LVU97
 454 0194 4CC095E5 		ldr	ip, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 455 0198 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 456              	.LVL21:
 121:armwave.c     **** 
 122:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 457              		.loc 1 122 5 is_stmt 1 view .LVU98
 458              		.loc 1 122 5 is_stmt 0 view .LVU99
 459 019c 00005CE3 		cmp	ip, #0	@ npix,
 460 01a0 0A0000DA 		ble	.L25		@,
 461              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 124:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 125:armwave.c     ****         // most normal waveforms.
 126:armwave.c     ****         wave_word = *base_32ptr++;
 127:armwave.c     **** 
 128:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 130:armwave.c     ****                 value = wave_word & 0xff;
 131:armwave.c     ****                 wave_word >>= 8;
 132:armwave.c     **** 
 133:armwave.c     ****                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 462              		.loc 1 134 52 view .LVU100
 463 01a4 F0A6D5E1 		ldrsh	r10, [r5, #96]	@ _70, g_armwave_state.ch1_color.r
 464              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 465              		.loc 1 135 52 view .LVU101
 466 01a8 F296D5E1 		ldrsh	r9, [r5, #98]	@ _76, g_armwave_state.ch1_color.g
 467              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 468              		.loc 1 136 52 view .LVU102
 469 01ac F4B6D5E1 		ldrsh	fp, [r5, #100]	@ _80, g_armwave_state.ch1_color.b
 470              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 471              		.loc 1 122 11 view .LVU103
 472 01b0 0030A0E3 		mov	r3, #0	@ n,
 473 01b4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 474              	.LVL22:
 475              	.L34:
 126:armwave.c     **** 
 476              		.loc 1 126 9 is_stmt 1 view .LVU104
 477              	@ armwave.c:126:         wave_word = *base_32ptr++;
 126:armwave.c     **** 
 478              		.loc 1 126 19 is_stmt 0 view .LVU105
 479 01b8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 480              	.LVL23:
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 481              		.loc 1 128 9 is_stmt 1 view .LVU106
 482              	@ armwave.c:128:         if(COND_UNLIKELY(wave_word != 0)) {
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 483              		.loc 1 128 11 is_stmt 0 view .LVU107
 484 01bc 000052E3 		cmp	r2, #0	@ wave_word,
 485 01c0 0400001A 		bne	.L51		@,
 486              	.LVL24:
 487              	.L29:
 488              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 489              		.loc 1 122 28 discriminator 2 view .LVU108
 490 01c4 043083E2 		add	r3, r3, #4	@ n, n,
 491              	.LVL25:
 492              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 493              		.loc 1 122 5 discriminator 2 view .LVU109
 494 01c8 03005CE1 		cmp	ip, r3	@ npix, n
 495 01cc F9FFFFCA 		bgt	.L34		@,
 496              	.LVL26:
 497              	.L25:
 498              	@ armwave.c:155: }
 137:armwave.c     **** 
 138:armwave.c     ****                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 141:armwave.c     **** 
 142:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 143:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 145:armwave.c     ****                     // Is there a better way?
 146:armwave.c     ****                     nsub = n + i;
 147:armwave.c     ****                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 152:armwave.c     ****             }
 153:armwave.c     ****         } 
 154:armwave.c     ****     }
 155:armwave.c     **** }
 499              		.loc 1 155 1 view .LVU110
 500 01d0 0CD08DE2 		add	sp, sp, #12	@,,
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed	@
 504 01d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 505              	.LVL27:
 506              	.L51:
 507              		.cfi_restore_state
 130:armwave.c     ****                 wave_word >>= 8;
 508              		.loc 1 130 17 is_stmt 1 view .LVU111
 131:armwave.c     **** 
 509              		.loc 1 131 17 view .LVU112
 510              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 511              		.loc 1 133 19 is_stmt 0 view .LVU113
 512 01d8 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 513              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 514              		.loc 1 131 27 view .LVU114
 515 01dc 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 516              	.LVL28:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 517              		.loc 1 133 17 is_stmt 1 view .LVU115
 518              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 519              		.loc 1 133 19 is_stmt 0 view .LVU116
 520 01e0 1900000A 		beq	.L30		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 521              		.loc 1 134 21 is_stmt 1 view .LVU117
 522              	.LVL29:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 523              		.loc 1 135 21 view .LVU118
 136:armwave.c     **** 
 524              		.loc 1 136 21 view .LVU119
 138:armwave.c     ****                     g = MIN(gg, 255);
 525              		.loc 1 138 21 view .LVU120
 139:armwave.c     ****                     b = MIN(bb, 255);
 526              		.loc 1 139 21 view .LVU121
 140:armwave.c     **** 
 527              		.loc 1 140 21 view .LVU122
 143:armwave.c     **** 
 528              		.loc 1 143 21 view .LVU123
 146:armwave.c     ****                     xx = nsub & 0xff;
 529              		.loc 1 146 21 view .LVU124
 147:armwave.c     ****                     yy = nsub >> 8;
 530              		.loc 1 147 21 view .LVU125
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 531              		.loc 1 148 21 view .LVU126
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 532              		.loc 1 149 21 view .LVU127
 150:armwave.c     ****                 }
 533              		.loc 1 150 21 view .LVU128
 534              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 535              		.loc 1 136 55 is_stmt 0 view .LVU129
 536 01e4 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 537              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 538              		.loc 1 135 55 view .LVU130
 539 01e8 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 540              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 541              		.loc 1 136 24 view .LVU131
 542 01ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 543              	.LVL30:
 544              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 545              		.loc 1 140 25 view .LVU132
 546 01f0 FF0054E3 		cmp	r4, #255	@ bb,
 547              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 548              		.loc 1 135 24 view .LVU133
 549 01f4 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 550              	.LVL31:
 551              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 552              		.loc 1 140 25 view .LVU134
 553 01f8 FF40A0A3 		movge	r4, #255	@ bb,
 554              	.LVL32:
 555              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 556              		.loc 1 134 55 view .LVU135
 557 01fc 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 558              	.LVL33:
 559              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 560              		.loc 1 139 25 view .LVU136
 561 0200 FF0058E3 		cmp	r8, #255	@ gg,
 562 0204 FF80A0A3 		movge	r8, #255	@ gg,
 563              	.LVL34:
 564              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 565              		.loc 1 134 24 view .LVU137
 566 0208 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 567              	.LVL35:
 568              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 569              		.loc 1 143 56 view .LVU138
 570 020c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 571              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 572              		.loc 1 150 39 view .LVU139
 573 0210 4C0095E5 		ldr	r0, [r5, #76]	@ tmp372, g_armwave_state.target_width
 574              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 575              		.loc 1 143 44 view .LVU140
 576 0214 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 577              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 578              		.loc 1 138 25 view .LVU141
 579 0218 FF0056E3 		cmp	r6, #255	@ rr,
 580              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 581              		.loc 1 143 56 view .LVU142
 582 021c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 583              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 584              		.loc 1 147 24 view .LVU143
 585 0220 7370EFE6 		uxtb	r7, r3	@ xx, n
 586              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 587              		.loc 1 143 44 view .LVU144
 588 0224 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 589              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 590              		.loc 1 143 51 view .LVU145
 591 0228 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 592              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 593              		.loc 1 138 25 view .LVU146
 594 022c FF60A0A3 		movge	r6, #255	@ rr,
 595              	.LVL36:
 596              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 597              		.loc 1 148 31 view .LVU147
 598 0230 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 599              	.LVL37:
 600              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 601              		.loc 1 150 39 view .LVU148
 602 0234 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 603              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 604              		.loc 1 143 62 view .LVU149
 605 0238 7660EFE6 		uxtb	r6, r6	@ rr, rr
 606              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 607              		.loc 1 150 49 view .LVU150
 608 023c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 609              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 610              		.loc 1 143 62 view .LVU151
 611 0240 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 612              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 613              		.loc 1 143 26 view .LVU152
 614 0244 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 615              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 616              		.loc 1 150 49 view .LVU153
 617 0248 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 618              	.LVL38:
 619              	.L30:
 130:armwave.c     ****                 wave_word >>= 8;
 620              		.loc 1 130 17 is_stmt 1 view .LVU154
 131:armwave.c     **** 
 621              		.loc 1 131 17 view .LVU155
 622              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 133 19 is_stmt 0 view .LVU156
 624 024c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 625              	.LVL39:
 626              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 627              		.loc 1 131 27 view .LVU157
 628 0250 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 629              	.LVL40:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 630              		.loc 1 133 17 is_stmt 1 view .LVU158
 631              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 133 19 is_stmt 0 view .LVU159
 633 0254 1C00000A 		beq	.L31		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 134 21 is_stmt 1 view .LVU160
 635              	.LVL41:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 135 21 view .LVU161
 136:armwave.c     **** 
 637              		.loc 1 136 21 view .LVU162
 138:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 138 21 view .LVU163
 139:armwave.c     ****                     b = MIN(bb, 255);
 639              		.loc 1 139 21 view .LVU164
 140:armwave.c     **** 
 640              		.loc 1 140 21 view .LVU165
 143:armwave.c     **** 
 641              		.loc 1 143 21 view .LVU166
 146:armwave.c     ****                     xx = nsub & 0xff;
 642              		.loc 1 146 21 view .LVU167
 643              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 644              		.loc 1 136 55 is_stmt 0 view .LVU168
 645 0258 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 646              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 135 55 view .LVU169
 648 025c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 649              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 650              		.loc 1 136 24 view .LVU170
 651 0260 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 652              	.LVL42:
 653              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 654              		.loc 1 140 25 view .LVU171
 655 0264 FF0054E3 		cmp	r4, #255	@ bb,
 656 0268 FF40A0A3 		movge	r4, #255	@ bb,
 657              	.LVL43:
 658              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 659              		.loc 1 134 55 view .LVU172
 660 026c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 661              	.LVL44:
 662              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 135 24 view .LVU173
 664 0270 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 665              	.LVL45:
 666              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 667              		.loc 1 143 44 view .LVU174
 668 0274 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 669              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 670              		.loc 1 139 25 view .LVU175
 671 0278 FF0057E3 		cmp	r7, #255	@ gg,
 672 027c 016083E2 		add	r6, r3, #1	@ _158, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 673              		.loc 1 147 21 is_stmt 1 view .LVU176
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 674              		.loc 1 148 21 view .LVU177
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 675              		.loc 1 149 21 view .LVU178
 150:armwave.c     ****                 }
 676              		.loc 1 150 21 view .LVU179
 677              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 678              		.loc 1 143 44 is_stmt 0 view .LVU180
 679 0280 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 680              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 681              		.loc 1 139 25 view .LVU181
 682 0284 FF70A0A3 		movge	r7, #255	@ gg,
 683              	.LVL46:
 684              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 685              		.loc 1 143 44 view .LVU182
 686 0288 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 687              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 688              		.loc 1 150 39 view .LVU183
 689 028c 4C4095E5 		ldr	r4, [r5, #76]	@ tmp375, g_armwave_state.target_width
 690              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 691              		.loc 1 134 24 view .LVU184
 692 0290 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 693              	.LVL47:
 694              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 695              		.loc 1 147 24 view .LVU185
 696 0294 7600EFE6 		uxtb	r0, r6	@ xx, _158
 697              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 698              		.loc 1 138 25 view .LVU186
 699 0298 FF005EE3 		cmp	lr, #255	@ rr,
 700              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 701              		.loc 1 143 56 view .LVU187
 702 029c 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 703              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 704              		.loc 1 148 31 view .LVU188
 705 02a0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 706              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 707              		.loc 1 150 39 view .LVU189
 708 02a4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 709              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 138 25 view .LVU190
 711 02a8 FFE0A0A3 		movge	lr, #255	@ rr,
 712              	.LVL48:
 713              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 714              		.loc 1 143 51 view .LVU191
 715 02ac 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 716              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 717              		.loc 1 143 56 view .LVU192
 718 02b0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 719              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 720              		.loc 1 143 51 view .LVU193
 721 02b4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 722              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 723              		.loc 1 143 62 view .LVU194
 724 02b8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 725              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 726              		.loc 1 150 49 view .LVU195
 727 02bc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 728              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 729              		.loc 1 143 62 view .LVU196
 730 02c0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 731              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 732              		.loc 1 143 26 view .LVU197
 733 02c4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 734              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 735              		.loc 1 150 49 view .LVU198
 736 02c8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 737              	.LVL49:
 738              	.L31:
 130:armwave.c     ****                 wave_word >>= 8;
 739              		.loc 1 130 17 is_stmt 1 view .LVU199
 131:armwave.c     **** 
 740              		.loc 1 131 17 view .LVU200
 741              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 133 19 is_stmt 0 view .LVU201
 743 02cc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 744              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 745              		.loc 1 131 27 view .LVU202
 746 02d0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 747              	.LVL50:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 133 17 is_stmt 1 view .LVU203
 749              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 133 19 is_stmt 0 view .LVU204
 751 02d4 1A00000A 		beq	.L32		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 134 21 is_stmt 1 view .LVU205
 753              	.LVL51:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 135 21 view .LVU206
 136:armwave.c     **** 
 755              		.loc 1 136 21 view .LVU207
 138:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 138 21 view .LVU208
 139:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 139 21 view .LVU209
 140:armwave.c     **** 
 758              		.loc 1 140 21 view .LVU210
 143:armwave.c     **** 
 759              		.loc 1 143 21 view .LVU211
 146:armwave.c     ****                     xx = nsub & 0xff;
 760              		.loc 1 146 21 view .LVU212
 761              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 762              		.loc 1 136 55 is_stmt 0 view .LVU213
 763 02d8 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 764              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 765              		.loc 1 135 55 view .LVU214
 766 02dc 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 767              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 768              		.loc 1 136 24 view .LVU215
 769 02e0 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 770              	.LVL52:
 771              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 772              		.loc 1 134 55 view .LVU216
 773 02e4 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 774              	.LVL53:
 775              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 776              		.loc 1 140 25 view .LVU217
 777 02e8 FF0054E3 		cmp	r4, #255	@ bb,
 778              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 779              		.loc 1 135 24 view .LVU218
 780 02ec 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 781              	.LVL54:
 782              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 783              		.loc 1 140 25 view .LVU219
 784 02f0 FF40A0A3 		movge	r4, #255	@ bb,
 785              	.LVL55:
 786              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 787              		.loc 1 139 25 view .LVU220
 788 02f4 FF0056E3 		cmp	r6, #255	@ gg,
 789 02f8 FF60A0A3 		movge	r6, #255	@ gg,
 790              	.LVL56:
 139:armwave.c     ****                     b = MIN(bb, 255);
 791              		.loc 1 139 25 view .LVU221
 792 02fc 027083E2 		add	r7, r3, #2	@ _66, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 793              		.loc 1 147 21 is_stmt 1 view .LVU222
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 794              		.loc 1 148 21 view .LVU223
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 795              		.loc 1 149 21 view .LVU224
 150:armwave.c     ****                 }
 796              		.loc 1 150 21 view .LVU225
 797              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 798              		.loc 1 134 24 is_stmt 0 view .LVU226
 799 0300 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 800              	.LVL57:
 801              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 802              		.loc 1 150 39 view .LVU227
 803 0304 4C0095E5 		ldr	r0, [r5, #76]	@ tmp376, g_armwave_state.target_width
 804              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 805              		.loc 1 138 25 view .LVU228
 806 0308 FF005EE3 		cmp	lr, #255	@ rr,
 807              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 808              		.loc 1 147 24 view .LVU229
 809 030c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 810              	.LVL58:
 811              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 812              		.loc 1 143 56 view .LVU230
 813 0310 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 814              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 815              		.loc 1 143 44 view .LVU231
 816 0314 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 817              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 138 25 view .LVU232
 819 0318 FFE0A0A3 		movge	lr, #255	@ rr,
 820              	.LVL59:
 821              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 822              		.loc 1 148 31 view .LVU233
 823 031c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 824              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 825              		.loc 1 150 39 view .LVU234
 826 0320 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 827              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 828              		.loc 1 143 44 view .LVU235
 829 0324 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 830              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 831              		.loc 1 143 56 view .LVU236
 832 0328 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 833              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 834              		.loc 1 143 51 view .LVU237
 835 032c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 836              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 837              		.loc 1 143 62 view .LVU238
 838 0330 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 839              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 840              		.loc 1 150 49 view .LVU239
 841 0334 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 842              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 843              		.loc 1 143 62 view .LVU240
 844 0338 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 845              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 846              		.loc 1 143 26 view .LVU241
 847 033c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 848              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 849              		.loc 1 150 49 view .LVU242
 850 0340 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 851              	.L32:
 852              	.LVL60:
 130:armwave.c     ****                 wave_word >>= 8;
 853              		.loc 1 130 17 is_stmt 1 view .LVU243
 131:armwave.c     **** 
 854              		.loc 1 131 17 view .LVU244
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 855              		.loc 1 133 17 view .LVU245
 856              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 857              		.loc 1 133 19 is_stmt 0 view .LVU246
 858 0344 000052E3 		cmp	r2, #0	@ wave_word,
 859 0348 9DFFFF0A 		beq	.L29		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 860              		.loc 1 134 21 is_stmt 1 view .LVU247
 861              	.LVL61:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 862              		.loc 1 135 21 view .LVU248
 136:armwave.c     **** 
 863              		.loc 1 136 21 view .LVU249
 138:armwave.c     ****                     g = MIN(gg, 255);
 864              		.loc 1 138 21 view .LVU250
 139:armwave.c     ****                     b = MIN(bb, 255);
 865              		.loc 1 139 21 view .LVU251
 140:armwave.c     **** 
 866              		.loc 1 140 21 view .LVU252
 143:armwave.c     **** 
 867              		.loc 1 143 21 view .LVU253
 146:armwave.c     ****                     xx = nsub & 0xff;
 868              		.loc 1 146 21 view .LVU254
 869              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 870              		.loc 1 136 55 is_stmt 0 view .LVU255
 871 034c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 872              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 873              		.loc 1 135 55 view .LVU256
 874 0350 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 875              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 876              		.loc 1 136 24 view .LVU257
 877 0354 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 878              	.LVL62:
 879              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 880              		.loc 1 134 55 view .LVU258
 881 0358 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 882              	.LVL63:
 883              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 884              		.loc 1 140 25 view .LVU259
 885 035c FF005EE3 		cmp	lr, #255	@ bb,
 886              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 887              		.loc 1 135 24 view .LVU260
 888 0360 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 889              	.LVL64:
 890              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 891              		.loc 1 140 25 view .LVU261
 892 0364 FFE0A0A3 		movge	lr, #255	@ bb,
 893              	.LVL65:
 894              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 139 25 view .LVU262
 896 0368 FF0054E3 		cmp	r4, #255	@ gg,
 897 036c FF40A0A3 		movge	r4, #255	@ gg,
 898              	.LVL66:
 139:armwave.c     ****                     b = MIN(bb, 255);
 899              		.loc 1 139 25 view .LVU263
 900 0370 036083E2 		add	r6, r3, #3	@ _59, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 901              		.loc 1 147 21 is_stmt 1 view .LVU264
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 902              		.loc 1 148 21 view .LVU265
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 903              		.loc 1 149 21 view .LVU266
 150:armwave.c     ****                 }
 904              		.loc 1 150 21 view .LVU267
 905              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 906              		.loc 1 134 24 is_stmt 0 view .LVU268
 907 0374 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 908              	.LVL67:
 909              	@ armwave.c:149:                     offset = yy + (xx * g_armwave_state.target_width);
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 910              		.loc 1 149 39 view .LVU269
 911 0378 4C7095E5 		ldr	r7, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 912              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 913              		.loc 1 138 25 view .LVU270
 914 037c FF0052E3 		cmp	r2, #255	@ rr,
 915              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 916              		.loc 1 147 24 view .LVU271
 917 0380 7680EFE6 		uxtb	r8, r6	@ xx, _59
 918              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 919              		.loc 1 143 56 view .LVU272
 920 0384 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 921              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 922              		.loc 1 143 44 view .LVU273
 923 0388 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 924              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 925              		.loc 1 138 25 view .LVU274
 926 038c FF20A0A3 		movge	r2, #255	@ rr,
 927              	.LVL68:
 928              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 929              		.loc 1 148 31 view .LVU275
 930 0390 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 931              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 932              		.loc 1 143 44 view .LVU276
 933 0394 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 934              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 935              		.loc 1 143 56 view .LVU277
 936 0398 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 937              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 938              		.loc 1 150 39 view .LVU278
 939 039c 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 940              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 941              		.loc 1 143 51 view .LVU279
 942 03a0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 943              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 944              		.loc 1 143 62 view .LVU280
 945 03a4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 946              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 947              		.loc 1 150 49 view .LVU281
 948 03a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 949              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 950              		.loc 1 143 62 view .LVU282
 951 03ac 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 952              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 953              		.loc 1 143 26 view .LVU283
 954 03b0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 955              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 956              		.loc 1 150 49 view .LVU284
 957 03b4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 958 03b8 81FFFFEA 		b	.L29		@
 959              	.LVL69:
 960              	.L50:
 116:armwave.c     **** 
 961              		.loc 1 116 5 is_stmt 1 discriminator 1 view .LVU285
 962 03bc 10309FE5 		ldr	r3, .L52+4	@,
 963 03c0 7420A0E3 		mov	r2, #116	@,
 964 03c4 0C109FE5 		ldr	r1, .L52+8	@,
 965              	.LVL70:
 116:armwave.c     **** 
 966              		.loc 1 116 5 is_stmt 0 discriminator 1 view .LVU286
 967 03c8 0C009FE5 		ldr	r0, .L52+12	@,
 968              	.LVL71:
 116:armwave.c     **** 
 969              		.loc 1 116 5 discriminator 1 view .LVU287
 970 03cc FEFFFFEB 		bl	__assert_fail		@
 971              	.LVL72:
 972              	.L53:
 116:armwave.c     **** 
 973              		.loc 1 116 5 discriminator 1 view .LVU288
 974              		.align	2
 975              	.L52:
 976 03d0 00000000 		.word	g_armwave_state
 977 03d4 00000000 		.word	.LANCHOR0
 978 03d8 20000000 		.word	.LC2
 979 03dc 2C000000 		.word	.LC3
 980              		.cfi_endproc
 981              	.LFE60:
 983              		.align	2
 984              		.global	armwave_fill_pixbuf_scaled
 985              		.syntax unified
 986              		.arm
 987              		.fpu vfp
 989              	armwave_fill_pixbuf_scaled:
 990              	.LVL73:
 991              	.LFB61:
 156:armwave.c     **** 
 157:armwave.c     **** /*
 158:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 159:armwave.c     ****  * Rows are repeated as necessary.
 160:armwave.c     ****  */
 161:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 162:armwave.c     **** {
 992              		.loc 1 162 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 163:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 996              		.loc 1 163 5 view .LVU290
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 997              		.loc 1 164 5 view .LVU291
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 998              		.loc 1 165 5 view .LVU292
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 999              		.loc 1 166 5 view .LVU293
 1000              	@ armwave.c:162: {
 162:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 1001              		.loc 1 162 1 is_stmt 0 view .LVU294
 1002 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1003              		.cfi_def_cfa_offset 36
 1004              		.cfi_offset 4, -36
 1005              		.cfi_offset 5, -32
 1006              		.cfi_offset 6, -28
 1007              		.cfi_offset 7, -24
 1008              		.cfi_offset 8, -20
 1009              		.cfi_offset 9, -16
 1010              		.cfi_offset 10, -12
 1011              		.cfi_offset 11, -8
 1012              		.cfi_offset 14, -4
 1013              	@ armwave.c:170:     assert(out_buffer != NULL);
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 168:armwave.c     ****     uint32_t offset;
 169:armwave.c     **** 
 170:armwave.c     ****     assert(out_buffer != NULL);
 1014              		.loc 1 170 5 view .LVU295
 1015 03e4 000050E3 		cmp	r0, #0	@ out_buffer
 1016              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1017              		.loc 1 166 15 view .LVU296
 1018 03e8 44619FE5 		ldr	r6, .L76	@ tmp204,
 1019              	@ armwave.c:162: {
 162:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 1020              		.loc 1 162 1 view .LVU297
 1021 03ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1022              		.cfi_def_cfa_offset 48
 1023              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1024              		.loc 1 166 15 view .LVU298
 1025 03f0 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1026              	.LVL74:
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1027              		.loc 1 167 5 is_stmt 1 view .LVU299
 168:armwave.c     **** 
 1028              		.loc 1 168 5 view .LVU300
 1029              		.loc 1 170 5 view .LVU301
 1030 03f4 4900000A 		beq	.L73		@,
 171:armwave.c     **** 
 172:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1031              		.loc 1 172 5 view .LVU302
 1032              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 1033              		.loc 1 172 41 is_stmt 0 view .LVU303
 1034 03f8 4C8096E5 		ldr	r8, [r6, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1035 03fc 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1036              	.LVL75:
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1037              		.loc 1 173 5 is_stmt 1 view .LVU304
 174:armwave.c     **** 
 175:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1038              		.loc 1 175 5 view .LVU305
 1039              		.loc 1 175 5 is_stmt 0 view .LVU306
 1040 0400 000058E3 		cmp	r8, #0	@ npix,
 1041 0404 0C0000DA 		ble	.L54		@,
 1042              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 177:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 178:armwave.c     ****         // most normal waveforms.
 179:armwave.c     ****         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 181:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 184:armwave.c     ****                 wave_word >>= 8;
 185:armwave.c     **** 
 186:armwave.c     ****                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1043              		.loc 1 188 52 view .LVU307
 1044 0408 F236D6E1 		ldrsh	r3, [r6, #98]	@ _11, g_armwave_state.ch1_color.g
 1045              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1046              		.loc 1 187 52 view .LVU308
 1047 040c F0B6D6E1 		ldrsh	fp, [r6, #96]	@ _7, g_armwave_state.ch1_color.r
 1048              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 194:armwave.c     **** 
 195:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 196:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 198:armwave.c     ****                     // Do line scaling as necessary.
 199:armwave.c     ****                     nsub = n + w;
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 1049              		.loc 1 200 57 view .LVU309
 1050 0410 076AD6ED 		vldr.32	s13, [r6, #28]	@ _28, g_armwave_state.vscale_frac
 1051              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1052              		.loc 1 188 52 view .LVU310
 1053 0414 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1054              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1055              		.loc 1 189 52 view .LVU311
 1056 0418 F436D6E1 		ldrsh	r3, [r6, #100]	@ _14, g_armwave_state.ch1_color.b
 1057              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1058              		.loc 1 175 11 view .LVU312
 1059 041c 0010A0E3 		mov	r1, #0	@ n,
 1060              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1061              		.loc 1 189 52 view .LVU313
 1062 0420 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1063              	.LVL76:
 1064              	.L61:
 179:armwave.c     **** 
 1065              		.loc 1 179 9 is_stmt 1 view .LVU314
 1066              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 1067              		.loc 1 179 19 is_stmt 0 view .LVU315
 1068 0424 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 1069              	.LVL77:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 1070              		.loc 1 181 9 is_stmt 1 view .LVU316
 1071              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 1072              		.loc 1 181 11 is_stmt 0 view .LVU317
 1073 0428 000053E3 		cmp	r3, #0	@ wave_word,
 1074 042c 0400001A 		bne	.L74		@,
 1075              	.L57:
 1076              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1077              		.loc 1 175 28 view .LVU318
 1078 0430 041081E2 		add	r1, r1, #4	@ n, n,
 1079              	.LVL78:
 1080              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1081              		.loc 1 175 5 view .LVU319
 1082 0434 010058E1 		cmp	r8, r1	@ npix, n
 1083 0438 F9FFFFCA 		bgt	.L61		@,
 1084              	.LVL79:
 1085              	.L54:
 1086              	@ armwave.c:219: }
 201:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 202:armwave.c     ****                     xx = (nsub >> 8);
 203:armwave.c     **** 
 204:armwave.c     ****                     /*
 205:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 206:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 207:armwave.c     ****                         *(out_buffer_base + offset) = word;
 208:armwave.c     ****                     }
 209:armwave.c     ****                     */
 210:armwave.c     **** 
 211:armwave.c     ****                     for(y = yy; y < ye; y++) {
 212:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 213:armwave.c     ****                         *(out_buffer_base + offset) = word;
 214:armwave.c     ****                     }
 215:armwave.c     ****                 }
 216:armwave.c     ****             }
 217:armwave.c     ****         }
 218:armwave.c     ****     }
 219:armwave.c     **** }
 1087              		.loc 1 219 1 view .LVU320
 1088 043c 0CD08DE2 		add	sp, sp, #12	@,,
 1089              		.cfi_remember_state
 1090              		.cfi_def_cfa_offset 36
 1091              		@ sp needed	@
 1092 0440 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1093              	.LVL80:
 1094              	.L74:
 1095              		.cfi_restore_state
 1096              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1097              		.loc 1 186 19 view .LVU321
 1098 0444 FF2013E2 		ands	r2, r3, #255	@ _8, wave_word,
 1099              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1100              		.loc 1 182 19 view .LVU322
 1101 0448 0070A0E3 		mov	r7, #0	@ w,
 1102              	.LVL81:
 183:armwave.c     ****                 wave_word >>= 8;
 1103              		.loc 1 183 17 is_stmt 1 view .LVU323
 184:armwave.c     **** 
 1104              		.loc 1 184 17 view .LVU324
 1105              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 1106              		.loc 1 184 27 is_stmt 0 view .LVU325
 1107 044c 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 1108              	.LVL82:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1109              		.loc 1 186 17 is_stmt 1 view .LVU326
 1110              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1111              		.loc 1 186 19 is_stmt 0 view .LVU327
 1112 0450 0500001A 		bne	.L75		@,
 1113              	.L58:
 1114              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1115              		.loc 1 182 32 view .LVU328
 1116 0454 017087E2 		add	r7, r7, #1	@ w, w,
 1117              	.LVL83:
 1118              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1119              		.loc 1 182 13 view .LVU329
 1120 0458 040057E3 		cmp	r7, #4	@ w,
 1121 045c F3FFFF0A 		beq	.L57		@,
 183:armwave.c     ****                 wave_word >>= 8;
 1122              		.loc 1 183 17 is_stmt 1 view .LVU330
 1123              	.LVL84:
 184:armwave.c     **** 
 1124              		.loc 1 184 17 view .LVU331
 1125              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1126              		.loc 1 186 19 is_stmt 0 view .LVU332
 1127 0460 FF2013E2 		ands	r2, r3, #255	@ _8, wave_word,
 1128              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 1129              		.loc 1 184 27 view .LVU333
 1130 0464 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 1131              	.LVL85:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1132              		.loc 1 186 17 is_stmt 1 view .LVU334
 1133              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1134              		.loc 1 186 19 is_stmt 0 view .LVU335
 1135 0468 F9FFFF0A 		beq	.L58		@,
 1136              	.L75:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1137              		.loc 1 187 21 is_stmt 1 view .LVU336
 1138              	.LVL86:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1139              		.loc 1 188 21 view .LVU337
 189:armwave.c     **** 
 1140              		.loc 1 189 21 view .LVU338
 191:armwave.c     ****                     g = MIN(gg, 255);
 1141              		.loc 1 191 21 view .LVU339
 192:armwave.c     ****                     b = MIN(bb, 255);
 1142              		.loc 1 192 21 view .LVU340
 193:armwave.c     **** 
 1143              		.loc 1 193 21 view .LVU341
 196:armwave.c     **** 
 1144              		.loc 1 196 21 view .LVU342
 1145              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1146              		.loc 1 189 55 is_stmt 0 view .LVU343
 1147 046c 04C09DE5 		ldr	ip, [sp, #4]	@ _14, %sfp
 1148 0470 075081E0 		add	r5, r1, r7	@ _117, n, w
 1149 0474 9C020AE0 		mul	r10, ip, r2	@ tmp182, _14, _8
 1150              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1151              		.loc 1 200 32 view .LVU344
 1152 0478 75C0EFE6 		uxtb	ip, r5	@ _26, _117
 1153              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1154              		.loc 1 201 41 view .LVU345
 1155 047c 01408CE2 		add	r4, ip, #1	@ tmp197, _26,
 1156              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1157              		.loc 1 200 40 view .LVU346
 1158 0480 90CA07EE 		vmov	s15, ip	@ int	@ _26, _26
 1159              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1160              		.loc 1 201 41 view .LVU347
 1161 0484 104A07EE 		vmov	s14, r4	@ int	@ tmp197, tmp197
 1162              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1163              		.loc 1 188 55 view .LVU348
 1164 0488 00C09DE5 		ldr	ip, [sp]	@ _11, %sfp
 1165              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1166              		.loc 1 189 24 view .LVU349
 1167 048c 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp182,
 1168              	.LVL87:
 1169              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1170              		.loc 1 200 40 view .LVU350
 1171 0490 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, _26
 1172              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1173              		.loc 1 201 46 view .LVU351
 1174 0494 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, tmp197
 1175              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1176              		.loc 1 188 55 view .LVU352
 1177 0498 9C0204E0 		mul	r4, ip, r2	@ tmp186, _11, _8
 1178              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1179              		.loc 1 187 55 view .LVU353
 1180 049c 920B02E0 		mul	r2, r2, fp	@ tmp192, _8, _7
 1181              	.LVL88:
 1182              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 1183              		.loc 1 193 25 view .LVU354
 1184 04a0 FF005AE3 		cmp	r10, #255	@ bb,
 1185              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1186              		.loc 1 188 24 view .LVU355
 1187 04a4 4444A0E1 		asr	r4, r4, #8	@ gg, tmp186,
 1188              	.LVL89:
 1189              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1190              		.loc 1 200 40 view .LVU356
 1191 04a8 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp196, tmp195, _28
 1192              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1193              		.loc 1 201 46 view .LVU357
 1194 04ac 267A27EE 		vmul.f32	s14, s14, s13	@ tmp199, tmp198, _28
 1195              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1196              		.loc 1 187 24 view .LVU358
 1197 04b0 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp192,
 1198              	.LVL90:
 1199              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 1200              		.loc 1 193 25 view .LVU359
 1201 04b4 FFA0A0A3 		movge	r10, #255	@ bb,
 1202              	.LVL91:
 1203              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 1204              		.loc 1 192 25 view .LVU360
 1205 04b8 FF0054E3 		cmp	r4, #255	@ gg,
 1206 04bc FF40A0A3 		movge	r4, #255	@ gg,
 1207              	.LVL92:
 1208              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 1209              		.loc 1 191 25 view .LVU361
 1210 04c0 FF005CE3 		cmp	ip, #255	@ rr,
 1211              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1212              		.loc 1 196 56 view .LVU362
 1213 04c4 0444A0E1 		lsl	r4, r4, #8	@ tmp187, gg,
 1214              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1215              		.loc 1 200 24 view .LVU363
 1216 04c8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 1217              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 1218              		.loc 1 191 25 view .LVU364
 1219 04cc FFC0A0A3 		movge	ip, #255	@ rr,
 1220              	.LVL93:
 1221              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1222              		.loc 1 196 44 view .LVU365
 1223 04d0 0AA8A0E1 		lsl	r10, r10, #16	@ tmp183, bb,
 1224 04d4 FFA80AE2 		and	r10, r10, #16711680	@ tmp184, tmp183,
 1225              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1226              		.loc 1 196 56 view .LVU366
 1227 04d8 7440FFE6 		uxth	r4, r4	@ tmp188, tmp187
 1228              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1229              		.loc 1 196 51 view .LVU367
 1230 04dc 04408AE1 		orr	r4, r10, r4	@ tmp190, tmp184, tmp188
 1231              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1232              		.loc 1 196 62 view .LVU368
 1233 04e0 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 1234 04e4 0CC084E1 		orr	ip, r4, ip	@ tmp194, tmp190, rr
 1235              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1236              		.loc 1 200 24 view .LVU369
 1237 04e8 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 1238              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1239              		.loc 1 201 24 view .LVU370
 1240 04ec C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp199
 1241              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1242              		.loc 1 196 26 view .LVU371
 1243 04f0 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp194,
 1244              	.LVL94:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 1245              		.loc 1 199 21 is_stmt 1 view .LVU372
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1246              		.loc 1 200 21 view .LVU373
 201:armwave.c     ****                     xx = (nsub >> 8);
 1247              		.loc 1 201 21 view .LVU374
 1248              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 1249              		.loc 1 202 32 is_stmt 0 view .LVU375
 1250 04f4 4554A0E1 		asr	r5, r5, #8	@ xx, _117,
 1251              	.LVL95:
 1252              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1253              		.loc 1 201 24 view .LVU376
 1254 04f8 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 1255              	.LVL96:
 202:armwave.c     **** 
 1256              		.loc 1 202 21 is_stmt 1 view .LVU377
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1257              		.loc 1 211 21 view .LVU378
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1258              		.loc 1 211 21 is_stmt 0 view .LVU379
 1259 04fc 090052E1 		cmp	r2, r9	@ yy, ye
 1260 0500 D3FFFF2A 		bcs	.L58		@,
 1261              	.LVL97:
 1262              	.L59:
 212:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1263              		.loc 1 212 25 is_stmt 1 discriminator 3 view .LVU380
 213:armwave.c     ****                     }
 1264              		.loc 1 213 25 discriminator 3 view .LVU381
 1265              	@ armwave.c:212:                         offset = (xx + (y * g_armwave_state.target_width)); 
 212:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1266              		.loc 1 212 43 is_stmt 0 discriminator 3 view .LVU382
 1267 0504 4CC096E5 		ldr	ip, [r6, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1268              	@ armwave.c:213:                         *(out_buffer_base + offset) = word;
 213:armwave.c     ****                     }
 1269              		.loc 1 213 43 discriminator 3 view .LVU383
 1270 0508 9C522CE0 		mla	ip, ip, r2, r5	@ tmp203, g_armwave_state.target_width, yy, xx
 1271              	.LVL98:
 1272              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1273              		.loc 1 211 42 discriminator 3 view .LVU384
 1274 050c 012082E2 		add	r2, r2, #1	@ yy, yy,
 1275              	.LVL99:
 1276              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1277              		.loc 1 211 21 discriminator 3 view .LVU385
 1278 0510 020059E1 		cmp	r9, r2	@ ye, yy
 1279              	@ armwave.c:213:                         *(out_buffer_base + offset) = word;
 213:armwave.c     ****                     }
 1280              		.loc 1 213 53 discriminator 3 view .LVU386
 1281 0514 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 1282              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1283              		.loc 1 211 21 discriminator 3 view .LVU387
 1284 0518 F9FFFF1A 		bne	.L59		@,
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1285              		.loc 1 211 21 discriminator 3 view .LVU388
 1286 051c CCFFFFEA 		b	.L58		@
 1287              	.LVL100:
 1288              	.L73:
 170:armwave.c     **** 
 1289              		.loc 1 170 5 is_stmt 1 discriminator 1 view .LVU389
 1290 0520 10309FE5 		ldr	r3, .L76+4	@,
 1291 0524 AA20A0E3 		mov	r2, #170	@,
 1292 0528 0C109FE5 		ldr	r1, .L76+8	@,
 1293 052c 0C009FE5 		ldr	r0, .L76+12	@,
 1294              	.LVL101:
 170:armwave.c     **** 
 1295              		.loc 1 170 5 is_stmt 0 discriminator 1 view .LVU390
 1296 0530 FEFFFFEB 		bl	__assert_fail		@
 1297              	.LVL102:
 1298              	.L77:
 170:armwave.c     **** 
 1299              		.loc 1 170 5 discriminator 1 view .LVU391
 1300              		.align	2
 1301              	.L76:
 1302 0534 00000000 		.word	g_armwave_state
 1303 0538 18000000 		.word	.LANCHOR0+24
 1304 053c 20000000 		.word	.LC2
 1305 0540 2C000000 		.word	.LC3
 1306              		.cfi_endproc
 1307              	.LFE61:
 1309              		.align	2
 1310              		.global	armwave_setup_render
 1311              		.syntax unified
 1312              		.arm
 1313              		.fpu vfp
 1315              	armwave_setup_render:
 1316              	.LVL103:
 1317              	.LFB62:
 220:armwave.c     **** 
 221:armwave.c     **** /*
 222:armwave.c     ****  * Setup the renderer with passed parameters.
 223:armwave.c     ****  */
 224:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 225:armwave.c     **** {
 1318              		.loc 1 225 1 is_stmt 1 view -0
 1319              		.cfi_startproc
 1320              		@ args = 12, pretend = 0, frame = 0
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 226:armwave.c     ****     uint32_t length, xx;
 1322              		.loc 1 226 5 view .LVU393
 227:armwave.c     ****     float points_per_pixel;
 1323              		.loc 1 227 5 view .LVU394
 228:armwave.c     **** 
 229:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1324              		.loc 1 229 5 view .LVU395
 1325              	@ armwave.c:225: {
 225:armwave.c     ****     uint32_t length, xx;
 1326              		.loc 1 225 1 is_stmt 0 view .LVU396
 1327 0544 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1328              		.cfi_def_cfa_offset 32
 1329              		.cfi_offset 4, -32
 1330              		.cfi_offset 5, -28
 1331              		.cfi_offset 6, -24
 1332              		.cfi_offset 7, -20
 1333              		.cfi_offset 8, -16
 1334              		.cfi_offset 9, -12
 1335              		.cfi_offset 10, -8
 1336              		.cfi_offset 14, -4
 1337 0548 028B2DED 		vpush.64	{d8}	@
 1338              		.cfi_def_cfa_offset 40
 1339              		.cfi_offset 80, -40
 1340              		.cfi_offset 81, -36
 1341 054c 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1342 0550 0190A0E1 		mov	r9, r1	@ end_point, end_point
 1343 0554 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1344 0558 10D04DE2 		sub	sp, sp, #16	@,,
 1345              		.cfi_def_cfa_offset 56
 1346              	@ armwave.c:225: {
 225:armwave.c     ****     uint32_t length, xx;
 1347              		.loc 1 225 1 view .LVU397
 1348 055c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1349 0560 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1350 0564 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1351              	@ armwave.c:229:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1352              		.loc 1 229 5 view .LVU398
 1353 0568 00308DE5 		str	r3, [sp]	@ wave_stride,
 1354 056c F460CDE1 		strd	r6, [sp, #4]	@,,
 1355 0570 0230A0E1 		mov	r3, r2	@, waves_max
 1356              	.LVL104:
 1357              		.loc 1 229 5 view .LVU399
 1358 0574 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1359 0578 0120A0E1 		mov	r2, r1	@, end_point
 1360              	.LVL105:
 1361              		.loc 1 229 5 view .LVU400
 1362 057c 0010A0E1 		mov	r1, r0	@, start_point
 1363              	.LVL106:
 1364              		.loc 1 229 5 view .LVU401
 1365 0580 68019FE5 		ldr	r0, .L92+8	@,
 1366              	.LVL107:
 1367              		.loc 1 229 5 view .LVU402
 1368 0584 FEFFFFEB 		bl	printf		@
 1369              	.LVL108:
 230:armwave.c     **** 
 231:armwave.c     ****     // TODO these asserts should instead raise PyExc
 232:armwave.c     ****     assert(start_point < end_point);
 1370              		.loc 1 232 5 is_stmt 1 view .LVU403
 1371 0588 090055E1 		cmp	r5, r9	@ start_point, end_point
 1372 058c 4600002A 		bcs	.L89		@,
 233:armwave.c     **** 
 234:armwave.c     ****     /*
 235:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 236:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 237:armwave.c     **** 
 238:armwave.c     ****     if(target_height == 256) {
 239:armwave.c     ****         g_armwave_state.row_shift = 8;
 240:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 241:armwave.c     ****     } else if(target_height == 512) {
 242:armwave.c     ****         g_armwave_state.row_shift = 9;
 243:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 244:armwave.c     ****     } else if(target_height == 1024) {
 245:armwave.c     ****         g_armwave_state.row_shift = 10;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 247:armwave.c     ****     } else if(target_height == 2048) {
 248:armwave.c     ****         g_armwave_state.row_shift = 11;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 250:armwave.c     ****     }
 251:armwave.c     ****     */
 252:armwave.c     **** 
 253:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 254:armwave.c     ****     g_armwave_state.xstride = target_height;
 1373              		.loc 1 254 5 view .LVU404
 1374              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 256.0f;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 256.0f;
 1375              		.loc 1 255 49 is_stmt 0 view .LVU405
 1376 0590 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1377 0594 537A9FED 		vldr.32	s14, .L92	@ tmp155,
 1378              	@ armwave.c:254:     g_armwave_state.xstride = target_height;
 254:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 256.0f;
 1379              		.loc 1 254 29 view .LVU406
 1380 0598 54419FE5 		ldr	r4, .L92+12	@ tmp208,
 1381              	@ armwave.c:260:     g_armwave_state.size = target_height * target_width;
 256:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 257:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 258:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 259:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 260:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1382              		.loc 1 260 42 view .LVU407
 1383 059c 970600E0 		mul	r0, r7, r6	@ tmp163, target_height, target_width
 1384              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 256.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1385              		.loc 1 255 49 view .LVU408
 1386 05a0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp154, target_height
 1387              	@ armwave.c:262:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 261:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 262:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1388              		.loc 1 262 68 view .LVU409
 1389 05a4 0634A0E1 		lsl	r3, r6, #8	@ _6, target_width,
 1390              	@ armwave.c:261:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 261:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1391              		.loc 1 261 37 view .LVU410
 1392 05a8 01CCA0E3 		mov	ip, #256	@ tmp165,
 1393              	@ armwave.c:267:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 263:armwave.c     ****     g_armwave_state.target_width = target_width;
 264:armwave.c     ****     g_armwave_state.target_height = target_height;
 265:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 266:armwave.c     **** 
 267:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1394              		.loc 1 267 5 view .LVU411
 1395 05ac 0310A0E1 		mov	r1, r3	@, _6
 1396              	@ armwave.c:260:     g_armwave_state.size = target_height * target_width;
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1397              		.loc 1 260 26 view .LVU412
 1398 05b0 480084E5 		str	r0, [r4, #72]	@ tmp163, g_armwave_state.size
 1399              	@ armwave.c:265:     g_armwave_state.wave_length = end_point - start_point;
 265:armwave.c     **** 
 1400              		.loc 1 265 45 view .LVU413
 1401 05b4 055049E0 		sub	r5, r9, r5	@ _7, end_point, start_point
 1402              	.LVL109:
 1403              	@ armwave.c:267:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1404              		.loc 1 267 5 view .LVU414
 1405 05b8 38019FE5 		ldr	r0, .L92+16	@,
 1406              	@ armwave.c:262:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1407              		.loc 1 262 34 view .LVU415
 1408 05bc 443084E5 		str	r3, [r4, #68]	@ _6, g_armwave_state.ch_buff_size
 1409              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 256.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1410              		.loc 1 255 49 view .LVU416
 1411 05c0 877A67EE 		vmul.f32	s15, s15, s14	@ _2, tmp154, tmp155
 1412              	@ armwave.c:254:     g_armwave_state.xstride = target_height;
 254:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 256.0f;
 1413              		.loc 1 254 29 view .LVU417
 1414 05c4 207084E5 		str	r7, [r4, #32]	@ target_height, g_armwave_state.xstride
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1415              		.loc 1 255 5 is_stmt 1 view .LVU418
 1416              	@ armwave.c:257:     g_armwave_state.wave_stride = wave_stride;
 257:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1417              		.loc 1 257 33 is_stmt 0 view .LVU419
 1418 05c8 28A084E5 		str	r10, [r4, #40]	@ wave_stride, g_armwave_state.wave_stride
 1419              	@ armwave.c:258:     g_armwave_state.waves_max = waves_max;
 258:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1420              		.loc 1 258 31 view .LVU420
 1421 05cc 308084E5 		str	r8, [r4, #48]	@ waves_max, g_armwave_state.waves_max
 1422              	@ armwave.c:259:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 259:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1423              		.loc 1 259 27 view .LVU421
 1424 05d0 2C8084E5 		str	r8, [r4, #44]	@ waves_max, g_armwave_state.waves
 1425              	@ armwave.c:264:     g_armwave_state.target_height = target_height;
 264:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1426              		.loc 1 264 35 view .LVU422
 1427 05d4 FC64C4E1 		strd	r6, [r4, #76]	@, tmp208,
 1428              	@ armwave.c:265:     g_armwave_state.wave_length = end_point - start_point;
 265:armwave.c     **** 
 1429              		.loc 1 265 33 view .LVU423
 1430 05d8 405084E5 		str	r5, [r4, #64]	@ _7, g_armwave_state.wave_length
 1431              	@ armwave.c:261:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 261:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1432              		.loc 1 261 37 view .LVU424
 1433 05dc 34C084E5 		str	ip, [r4, #52]	@ tmp165, g_armwave_state.bitdepth_height
 1434              	@ armwave.c:256:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1435              		.loc 1 256 30 view .LVU425
 1436 05e0 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp158, _2
 1437              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 256.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1438              		.loc 1 255 33 view .LVU426
 1439 05e4 077AC4ED 		vstr.32	s15, [r4, #28]	@ _2, g_armwave_state.vscale_frac
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1440              		.loc 1 256 5 is_stmt 1 view .LVU427
 1441              	@ armwave.c:256:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1442              		.loc 1 256 30 is_stmt 0 view .LVU428
 1443 05e8 097A84ED 		vstr.32	s14, [r4, #36]	@ int	@ tmp158, g_armwave_state.vscale
 257:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1444              		.loc 1 257 5 is_stmt 1 view .LVU429
 258:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1445              		.loc 1 258 5 view .LVU430
 259:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1446              		.loc 1 259 5 view .LVU431
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1447              		.loc 1 260 5 view .LVU432
 261:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1448              		.loc 1 261 5 view .LVU433
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1449              		.loc 1 262 5 view .LVU434
 263:armwave.c     ****     g_armwave_state.target_height = target_height;
 1450              		.loc 1 263 5 view .LVU435
 264:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1451              		.loc 1 264 5 view .LVU436
 265:armwave.c     **** 
 1452              		.loc 1 265 5 view .LVU437
 1453              		.loc 1 267 5 view .LVU438
 1454 05ec FEFFFFEB 		bl	printf		@
 1455              	.LVL110:
 268:armwave.c     **** 
 269:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 270:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 271:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 272:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1456              		.loc 1 272 5 view .LVU439
 1457              	@ armwave.c:274:     if(g_armwave_state.ch1_buffer != NULL)
 273:armwave.c     **** 
 274:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1458              		.loc 1 274 23 is_stmt 0 view .LVU440
 1459 05f0 040094E5 		ldr	r0, [r4, #4]	@ _8, g_armwave_state.ch1_buffer
 1460              	@ armwave.c:272:     g_armwave_state.slice_height = 64;  
 272:armwave.c     **** 
 1461              		.loc 1 272 34 view .LVU441
 1462 05f4 4030A0E3 		mov	r3, #64	@ tmp172,
 1463              	@ armwave.c:274:     if(g_armwave_state.ch1_buffer != NULL)
 1464              		.loc 1 274 7 view .LVU442
 1465 05f8 000050E3 		cmp	r0, #0	@ _8,
 1466              	@ armwave.c:272:     g_armwave_state.slice_height = 64;  
 272:armwave.c     **** 
 1467              		.loc 1 272 34 view .LVU443
 1468 05fc 383084E5 		str	r3, [r4, #56]	@ tmp172, g_armwave_state.slice_height
 1469              		.loc 1 274 5 is_stmt 1 view .LVU444
 1470              	@ armwave.c:274:     if(g_armwave_state.ch1_buffer != NULL)
 1471              		.loc 1 274 7 is_stmt 0 view .LVU445
 1472 0600 0000000A 		beq	.L80		@,
 275:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1473              		.loc 1 275 9 is_stmt 1 view .LVU446
 1474 0604 FEFFFFEB 		bl	free		@
 1475              	.LVL111:
 1476              	.L80:
 276:armwave.c     **** 
 277:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1477              		.loc 1 277 5 view .LVU447
 1478              	@ armwave.c:277:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1479              		.loc 1 277 34 is_stmt 0 view .LVU448
 1480 0608 0110A0E3 		mov	r1, #1	@,
 1481 060c 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.ch_buff_size
 1482 0610 FEFFFFEB 		bl	calloc		@
 1483              	.LVL112:
 1484              	@ armwave.c:279:     assert(g_armwave_state.ch1_buffer != NULL);
 278:armwave.c     **** 
 279:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1485              		.loc 1 279 5 view .LVU449
 1486 0614 000050E3 		cmp	r0, #0	@ tmp176,
 1487              	@ armwave.c:277:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 277:armwave.c     **** 
 1488              		.loc 1 277 32 view .LVU450
 1489 0618 040084E5 		str	r0, [r4, #4]	@ tmp176, g_armwave_state.ch1_buffer
 1490              		.loc 1 279 5 is_stmt 1 view .LVU451
 1491 061c 2C00000A 		beq	.L90		@,
 280:armwave.c     **** 
 281:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 282:armwave.c     ****     length = end_point - start_point;
 1492              		.loc 1 282 5 view .LVU452
 1493              	.LVL113:
 283:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1494              		.loc 1 283 5 view .LVU453
 1495              	@ armwave.c:283:     points_per_pixel = length / ((float)(target_width));
 1496              		.loc 1 283 34 is_stmt 0 view .LVU454
 1497 0620 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1498              	@ armwave.c:283:     points_per_pixel = length / ((float)(target_width));
 1499              		.loc 1 283 22 view .LVU455
 1500 0624 905A06EE 		vmov	s13, r5	@ int	@ _7, _7
 1501              	@ armwave.c:285:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 284:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 285:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1502              		.loc 1 285 40 view .LVU456
 1503 0628 8500A0E1 		lsl	r0, r5, #1	@, _7,
 1504              	@ armwave.c:283:     points_per_pixel = length / ((float)(target_width));
 283:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1505              		.loc 1 283 34 view .LVU457
 1506 062c 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp184, target_width
 1507              	@ armwave.c:283:     points_per_pixel = length / ((float)(target_width));
 283:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1508              		.loc 1 283 22 view .LVU458
 1509 0630 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp183, _7
 1510              	@ armwave.c:284:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 284:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1511              		.loc 1 284 60 view .LVU459
 1512 0634 0E7AD4ED 		vldr.32	s15, [r4, #56]	@ int	@ tmp214, g_armwave_state.slice_height
 1513 0638 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp187, tmp214
 1514              	@ armwave.c:283:     points_per_pixel = length / ((float)(target_width));
 283:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1515              		.loc 1 283 22 view .LVU460
 1516 063c 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp183, tmp184
 1517              	.LVL114:
 284:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1518              		.loc 1 284 5 is_stmt 1 view .LVU461
 1519              	@ armwave.c:284:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 284:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1520              		.loc 1 284 60 is_stmt 0 view .LVU462
 1521 0640 887A67EE 		vmul.f32	s15, s15, s16	@ tmp189, tmp187, points_per_pixel
 1522              	@ armwave.c:284:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 284:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1523              		.loc 1 284 41 view .LVU463
 1524 0644 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp190, tmp189
 1525 0648 0F7AC4ED 		vstr.32	s15, [r4, #60]	@ int	@ tmp190, g_armwave_state.slice_record_height
 1526              		.loc 1 285 5 is_stmt 1 view .LVU464
 1527              	@ armwave.c:285:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1528              		.loc 1 285 40 is_stmt 0 view .LVU465
 1529 064c FEFFFFEB 		bl	malloc		@
 1530              	.LVL115:
 1531              	@ armwave.c:287:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 286:armwave.c     **** 
 287:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1532              		.loc 1 287 5 view .LVU466
 1533 0650 000050E3 		cmp	r0, #0	@ tmp192,
 1534              	@ armwave.c:285:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 285:armwave.c     **** 
 1535              		.loc 1 285 38 view .LVU467
 1536 0654 780084E5 		str	r0, [r4, #120]	@ tmp192, g_armwave_state.xcoord_to_xpixel
 1537              		.loc 1 287 5 is_stmt 1 view .LVU468
 1538 0658 1800000A 		beq	.L91		@,
 1539              	@ armwave.c:290:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 288:armwave.c     **** 
 289:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 290:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1540              		.loc 1 290 54 is_stmt 0 view .LVU469
 1541 065c 227ADFED 		vldr.32	s15, .L92+4	@ tmp199,
 1542 0660 020040E2 		sub	r0, r0, #2	@ ivtmp.84, tmp192,
 1543              	@ armwave.c:289:     for(xx = 0; xx < length; xx++) {
 289:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1544              		.loc 1 289 12 view .LVU470
 1545 0664 0030A0E3 		mov	r3, #0	@ xx,
 1546              	@ armwave.c:290:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1547              		.loc 1 290 54 view .LVU471
 1548 0668 887A87EE 		vdiv.f32	s14, s15, s16	@ _19, tmp199, points_per_pixel
 1549              	.L83:
 1550              	.LVL116:
 1551              		.loc 1 290 9 is_stmt 1 discriminator 3 view .LVU472
 1552              	@ armwave.c:290:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1553              		.loc 1 290 74 is_stmt 0 discriminator 3 view .LVU473
 1554 066c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1555              	@ armwave.c:289:     for(xx = 0; xx < length; xx++) {
 289:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1556              		.loc 1 289 32 discriminator 3 view .LVU474
 1557 0670 013083E2 		add	r3, r3, #1	@ xx, xx,
 1558              	.LVL117:
 1559              	@ armwave.c:289:     for(xx = 0; xx < length; xx++) {
 289:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1560              		.loc 1 289 5 discriminator 3 view .LVU475
 1561 0674 030055E1 		cmp	r5, r3	@ _7, xx
 1562              	@ armwave.c:290:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1563              		.loc 1 290 74 discriminator 3 view .LVU476
 1564 0678 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp200, xx
 1565 067c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp201, tmp200, _19
 1566              	@ armwave.c:290:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1567              		.loc 1 290 46 discriminator 3 view .LVU477
 1568 0680 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp202, tmp201
 1569 0684 902A17EE 		vmov	r2, s15	@ int	@ tmp202, tmp202
 1570 0688 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp202, MEM[base: _70, offset: 0B]
 1571              	@ armwave.c:289:     for(xx = 0; xx < length; xx++) {
 289:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1572              		.loc 1 289 5 discriminator 3 view .LVU478
 1573 068c F6FFFF1A 		bne	.L83		@,
 291:armwave.c     **** 
 292:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 293:armwave.c     ****     }
 294:armwave.c     **** 
 295:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1574              		.loc 1 295 5 is_stmt 1 view .LVU479
 1575              	@ armwave.c:295:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1576              		.loc 1 295 34 is_stmt 0 view .LVU480
 1577 0690 480094E5 		ldr	r0, [r4, #72]	@ g_armwave_state.size, g_armwave_state.size
 1578 0694 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1579 0698 FEFFFFEB 		bl	malloc		@
 1580              	.LVL118:
 1581              	@ armwave.c:295:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1582              		.loc 1 295 32 view .LVU481
 1583 069c 5C0084E5 		str	r0, [r4, #92]	@, g_armwave_state.out_pixbuf
 1584              	@ armwave.c:296: }
 296:armwave.c     **** }
 1585              		.loc 1 296 1 view .LVU482
 1586 06a0 10D08DE2 		add	sp, sp, #16	@,,
 1587              		.cfi_remember_state
 1588              		.cfi_def_cfa_offset 40
 1589              		@ sp needed	@
 1590 06a4 028BBDEC 		vldm	sp!, {d8}	@
 1591              		.cfi_restore 80
 1592              		.cfi_restore 81
 1593              		.cfi_def_cfa_offset 32
 1594              	.LVL119:
 1595              		.loc 1 296 1 view .LVU483
 1596 06a8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1597              	.LVL120:
 1598              	.L89:
 1599              		.cfi_restore_state
 232:armwave.c     **** 
 1600              		.loc 1 232 5 is_stmt 1 discriminator 1 view .LVU484
 1601 06ac 48309FE5 		ldr	r3, .L92+20	@,
 1602 06b0 E820A0E3 		mov	r2, #232	@,
 1603 06b4 44109FE5 		ldr	r1, .L92+24	@,
 1604 06b8 44009FE5 		ldr	r0, .L92+28	@,
 1605 06bc FEFFFFEB 		bl	__assert_fail		@
 1606              	.LVL121:
 1607              	.L91:
 287:armwave.c     **** 
 1608              		.loc 1 287 5 discriminator 1 view .LVU485
 1609 06c0 34309FE5 		ldr	r3, .L92+20	@,
 1610 06c4 3C209FE5 		ldr	r2, .L92+32	@,
 1611 06c8 30109FE5 		ldr	r1, .L92+24	@,
 1612 06cc 38009FE5 		ldr	r0, .L92+36	@,
 1613 06d0 FEFFFFEB 		bl	__assert_fail		@
 1614              	.LVL122:
 1615              	.L90:
 279:armwave.c     **** 
 1616              		.loc 1 279 5 discriminator 1 view .LVU486
 1617 06d4 20309FE5 		ldr	r3, .L92+20	@,
 1618 06d8 30209FE5 		ldr	r2, .L92+40	@,
 1619 06dc 1C109FE5 		ldr	r1, .L92+24	@,
 1620 06e0 2C009FE5 		ldr	r0, .L92+44	@,
 1621 06e4 FEFFFFEB 		bl	__assert_fail		@
 1622              	.LVL123:
 1623              	.L93:
 1624              		.align	2
 1625              	.L92:
 1626 06e8 0000803B 		.word	998244352
 1627 06ec 0000803F 		.word	1065353216
 1628 06f0 40000000 		.word	.LC4
 1629 06f4 00000000 		.word	g_armwave_state
 1630 06f8 84000000 		.word	.LC6
 1631 06fc 34000000 		.word	.LANCHOR0+52
 1632 0700 20000000 		.word	.LC2
 1633 0704 6C000000 		.word	.LC5
 1634 0708 1F010000 		.word	287
 1635 070c BC000000 		.word	.LC8
 1636 0710 17010000 		.word	279
 1637 0714 98000000 		.word	.LC7
 1638              		.cfi_endproc
 1639              	.LFE62:
 1641              		.align	2
 1642              		.global	armwave_set_wave_pointer
 1643              		.syntax unified
 1644              		.arm
 1645              		.fpu vfp
 1647              	armwave_set_wave_pointer:
 1648              	.LVL124:
 1649              	.LFB63:
 297:armwave.c     **** 
 298:armwave.c     **** /*
 299:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 300:armwave.c     ****  * in the future.
 301:armwave.c     ****  */
 302:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 303:armwave.c     **** {
 1650              		.loc 1 303 1 view -0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 304:armwave.c     ****     assert(wave_buffer != NULL);
 1654              		.loc 1 304 5 view .LVU488
 1655 0718 000050E3 		cmp	r0, #0	@ wave_buffer
 1656              		.loc 1 304 5 is_stmt 0 view .LVU489
 1657 071c 0200000A 		beq	.L99		@,
 305:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1658              		.loc 1 305 5 is_stmt 1 view .LVU490
 1659              	@ armwave.c:305:     g_armwave_state.wave_buffer = wave_buffer;
 1660              		.loc 1 305 33 is_stmt 0 view .LVU491
 1661 0720 1C309FE5 		ldr	r3, .L100	@ tmp115,
 1662 0724 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1663 0728 1EFF2FE1 		bx	lr	@
 1664              	.L99:
 304:armwave.c     ****     assert(wave_buffer != NULL);
 1665              		.loc 1 304 5 is_stmt 1 discriminator 1 view .LVU492
 1666              	@ armwave.c:303: {
 303:armwave.c     ****     assert(wave_buffer != NULL);
 1667              		.loc 1 303 1 is_stmt 0 discriminator 1 view .LVU493
 1668 072c 10402DE9 		push	{r4, lr}	@
 1669              		.cfi_def_cfa_offset 8
 1670              		.cfi_offset 4, -8
 1671              		.cfi_offset 14, -4
 1672              	@ armwave.c:304:     assert(wave_buffer != NULL);
 304:armwave.c     ****     assert(wave_buffer != NULL);
 1673              		.loc 1 304 5 discriminator 1 view .LVU494
 1674 0730 132EA0E3 		mov	r2, #304	@,
 1675 0734 0C309FE5 		ldr	r3, .L100+4	@,
 1676 0738 0C109FE5 		ldr	r1, .L100+8	@,
 1677 073c 0C009FE5 		ldr	r0, .L100+12	@,
 1678              	.LVL125:
 304:armwave.c     ****     assert(wave_buffer != NULL);
 1679              		.loc 1 304 5 discriminator 1 view .LVU495
 1680 0740 FEFFFFEB 		bl	__assert_fail		@
 1681              	.LVL126:
 1682              	.L101:
 1683              		.align	2
 1684              	.L100:
 1685 0744 00000000 		.word	g_armwave_state
 1686 0748 4C000000 		.word	.LANCHOR0+76
 1687 074c 20000000 		.word	.LC2
 1688 0750 E8000000 		.word	.LC9
 1689              		.cfi_endproc
 1690              	.LFE63:
 1692              		.align	2
 1693              		.global	armwave_set_wave_pointer_as_testbuf
 1694              		.syntax unified
 1695              		.arm
 1696              		.fpu vfp
 1698              	armwave_set_wave_pointer_as_testbuf:
 1699              	.LFB64:
 306:armwave.c     **** }
 307:armwave.c     **** 
 308:armwave.c     **** /*
 309:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 310:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 311:armwave.c     ****  */
 312:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 313:armwave.c     **** {
 1700              		.loc 1 313 1 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
 314:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1705              		.loc 1 314 5 view .LVU497
 1706              	@ armwave.c:314:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1707              		.loc 1 314 33 is_stmt 0 view .LVU498
 1708 0754 08309FE5 		ldr	r3, .L103	@ tmp111,
 1709 0758 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1710 075c 142083E5 		str	r2, [r3, #20]	@ g_armwave_state.test_wave_buffer, g_armwave_state.wave_buffer
 1711              	@ armwave.c:315: }
 315:armwave.c     **** }
 1712              		.loc 1 315 1 view .LVU499
 1713 0760 1EFF2FE1 		bx	lr	@
 1714              	.L104:
 1715              		.align	2
 1716              	.L103:
 1717 0764 00000000 		.word	g_armwave_state
 1718              		.cfi_endproc
 1719              	.LFE64:
 1721              		.align	2
 1722              		.global	armwave_set_wave_pointer_u32
 1723              		.syntax unified
 1724              		.arm
 1725              		.fpu vfp
 1727              	armwave_set_wave_pointer_u32:
 1728              	.LVL127:
 1729              	.LFB65:
 316:armwave.c     **** 
 317:armwave.c     **** /*
 318:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 319:armwave.c     ****  * disjointed buffers in the future.
 320:armwave.c     ****  */
 321:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 322:armwave.c     **** {
 1730              		.loc 1 322 1 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 323:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1734              		.loc 1 323 5 view .LVU501
 1735 0768 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1736              		.loc 1 323 5 is_stmt 0 view .LVU502
 1737 076c 0200000A 		beq	.L110		@,
 324:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1738              		.loc 1 324 5 is_stmt 1 view .LVU503
 1739              	@ armwave.c:324:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1740              		.loc 1 324 33 is_stmt 0 view .LVU504
 1741 0770 1C309FE5 		ldr	r3, .L111	@ tmp117,
 1742 0774 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1743 0778 1EFF2FE1 		bx	lr	@
 1744              	.L110:
 323:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1745              		.loc 1 323 5 is_stmt 1 discriminator 1 view .LVU505
 1746              	@ armwave.c:322: {
 322:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1747              		.loc 1 322 1 is_stmt 0 discriminator 1 view .LVU506
 1748 077c 10402DE9 		push	{r4, lr}	@
 1749              		.cfi_def_cfa_offset 8
 1750              		.cfi_offset 4, -8
 1751              		.cfi_offset 14, -4
 1752              	@ armwave.c:323:     assert(wave_buffer_ptr != 0);
 323:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1753              		.loc 1 323 5 discriminator 1 view .LVU507
 1754 0780 10309FE5 		ldr	r3, .L111+4	@,
 1755 0784 10209FE5 		ldr	r2, .L111+8	@,
 1756 0788 10109FE5 		ldr	r1, .L111+12	@,
 1757 078c 10009FE5 		ldr	r0, .L111+16	@,
 1758              	.LVL128:
 323:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1759              		.loc 1 323 5 discriminator 1 view .LVU508
 1760 0790 FEFFFFEB 		bl	__assert_fail		@
 1761              	.LVL129:
 1762              	.L112:
 1763              		.align	2
 1764              	.L111:
 1765 0794 00000000 		.word	g_armwave_state
 1766 0798 68000000 		.word	.LANCHOR0+104
 1767 079c 43010000 		.word	323
 1768 07a0 20000000 		.word	.LC2
 1769 07a4 FC000000 		.word	.LC10
 1770              		.cfi_endproc
 1771              	.LFE65:
 1773              		.align	2
 1774              		.global	armwave_clear_buffer
 1775              		.syntax unified
 1776              		.arm
 1777              		.fpu vfp
 1779              	armwave_clear_buffer:
 1780              	.LVL130:
 1781              	.LFB66:
 325:armwave.c     **** }
 326:armwave.c     **** 
 327:armwave.c     **** /*
 328:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 329:armwave.c     ****  */
 330:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 331:armwave.c     **** {
 1782              		.loc 1 331 1 is_stmt 1 view -0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 0
 1785              		@ frame_needed = 0, uses_anonymous_args = 0
 1786              		@ link register save eliminated.
 332:armwave.c     ****     // Flags ignored, only one buffer cleared
 333:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1787              		.loc 1 333 5 view .LVU510
 1788 07a8 0C309FE5 		ldr	r3, .L114	@ tmp113,
 1789 07ac 0010A0E3 		mov	r1, #0	@,
 1790 07b0 442093E5 		ldr	r2, [r3, #68]	@, g_armwave_state.ch_buff_size
 1791 07b4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1792              	.LVL131:
 1793              		.loc 1 333 5 is_stmt 0 view .LVU511
 1794 07b8 FEFFFFEA 		b	memset		@
 1795              	.LVL132:
 1796              	.L115:
 1797              		.align	2
 1798              	.L114:
 1799 07bc 00000000 		.word	g_armwave_state
 1800              		.cfi_endproc
 1801              	.LFE66:
 1803              		.align	2
 1804              		.global	armwave_set_channel_colour
 1805              		.syntax unified
 1806              		.arm
 1807              		.fpu vfp
 1809              	armwave_set_channel_colour:
 1810              	.LVL133:
 1811              	.LFB67:
 334:armwave.c     **** }
 335:armwave.c     **** 
 336:armwave.c     **** /*
 337:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 338:armwave.c     ****  */
 339:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 340:armwave.c     **** {
 1812              		.loc 1 340 1 is_stmt 1 view -0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 0
 1815              		@ frame_needed = 0, uses_anonymous_args = 0
 1816              		@ link register save eliminated.
 341:armwave.c     ****     // Only 1ch supported for now
 342:armwave.c     ****     switch(ch) {
 1817              		.loc 1 342 5 view .LVU513
 1818 07c0 010050E3 		cmp	r0, #1	@ ch,
 343:armwave.c     ****         case 1:
 344:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1819              		.loc 1 344 13 view .LVU514
 1820              	@ armwave.c:344:             g_armwave_state.ch1_color.r = r;
 1821              		.loc 1 344 41 is_stmt 0 view .LVU515
 1822 07c4 0C009F05 		ldreq	r0, .L118	@ tmp117,
 1823              	.LVL134:
 1824              		.loc 1 344 41 view .LVU516
 1825 07c8 B016C001 		strheq	r1, [r0, #96]	@ movhi	@ r, g_armwave_state.ch1_color.r
 345:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1826              		.loc 1 345 13 is_stmt 1 view .LVU517
 1827              	@ armwave.c:345:             g_armwave_state.ch1_color.g = g;
 1828              		.loc 1 345 41 is_stmt 0 view .LVU518
 1829 07cc B226C001 		strheq	r2, [r0, #98]	@ movhi	@ g, g_armwave_state.ch1_color.g
 346:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1830              		.loc 1 346 13 is_stmt 1 view .LVU519
 1831              	@ armwave.c:346:             g_armwave_state.ch1_color.b = b;
 1832              		.loc 1 346 41 is_stmt 0 view .LVU520
 1833 07d0 B436C001 		strheq	r3, [r0, #100]	@ movhi	@ b, g_armwave_state.ch1_color.b
 347:armwave.c     ****             break;
 1834              		.loc 1 347 13 is_stmt 1 view .LVU521
 1835              	@ armwave.c:349: }
 348:armwave.c     ****     }
 349:armwave.c     **** }
 1836              		.loc 1 349 1 is_stmt 0 view .LVU522
 1837 07d4 1EFF2FE1 		bx	lr	@
 1838              	.L119:
 1839              		.align	2
 1840              	.L118:
 1841 07d8 00000000 		.word	g_armwave_state
 1842              		.cfi_endproc
 1843              	.LFE67:
 1845              		.align	2
 1846              		.global	armwave_dump_ppm_debug
 1847              		.syntax unified
 1848              		.arm
 1849              		.fpu vfp
 1851              	armwave_dump_ppm_debug:
 1852              	.LVL135:
 1853              	.LFB68:
 350:armwave.c     **** 
 351:armwave.c     **** /*
 352:armwave.c     ****  * Dump a ppm of a buffer to a file.
 353:armwave.c     ****  */
 354:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 355:armwave.c     **** {
 1854              		.loc 1 355 1 is_stmt 1 view -0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 0
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 356:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1858              		.loc 1 356 5 view .LVU524
 1859              	@ armwave.c:355: {
 355:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1860              		.loc 1 355 1 is_stmt 0 view .LVU525
 1861 07dc 0130A0E1 		mov	r3, r1	@ fn, fn
 1862 07e0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1863              		.cfi_def_cfa_offset 28
 1864              		.cfi_offset 4, -28
 1865              		.cfi_offset 5, -24
 1866              		.cfi_offset 6, -20
 1867              		.cfi_offset 7, -16
 1868              		.cfi_offset 8, -12
 1869              		.cfi_offset 9, -8
 1870              		.cfi_offset 14, -4
 1871 07e4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1872 07e8 0CD04DE2 		sub	sp, sp, #12	@,,
 1873              		.cfi_def_cfa_offset 40
 1874              	@ armwave.c:356:     FILE *fp = fopen(fn, "wb");
 1875              		.loc 1 356 16 view .LVU526
 1876 07ec D4109FE5 		ldr	r1, .L132	@,
 1877              	.LVL136:
 1878              		.loc 1 356 16 view .LVU527
 1879 07f0 0300A0E1 		mov	r0, r3	@, fn
 1880              	.LVL137:
 1881              		.loc 1 356 16 view .LVU528
 1882 07f4 FEFFFFEB 		bl	fopen64		@
 1883              	.LVL138:
 1884              	@ armwave.c:363:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 357:armwave.c     ****     uint32_t data;
 358:armwave.c     ****     int xx, yy;
 359:armwave.c     **** 
 360:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 361:armwave.c     **** 
 362:armwave.c     ****     fputs("P3\n", fp);
 363:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1885              		.loc 1 363 5 view .LVU529
 1886 07f8 CC609FE5 		ldr	r6, .L132+4	@ tmp154,
 1887              	@ armwave.c:362:     fputs("P3\n", fp);
 362:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1888              		.loc 1 362 5 view .LVU530
 1889 07fc 0320A0E3 		mov	r2, #3	@,
 1890 0800 0110A0E3 		mov	r1, #1	@,
 1891              	@ armwave.c:356:     FILE *fp = fopen(fn, "wb");
 356:armwave.c     ****     uint32_t data;
 1892              		.loc 1 356 16 view .LVU531
 1893 0804 0070A0E1 		mov	r7, r0	@ fp,
 1894              	.LVL139:
 357:armwave.c     ****     uint32_t data;
 1895              		.loc 1 357 5 is_stmt 1 view .LVU532
 358:armwave.c     **** 
 1896              		.loc 1 358 5 view .LVU533
 362:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1897              		.loc 1 362 5 view .LVU534
 1898 0808 0030A0E1 		mov	r3, r0	@, fp
 1899 080c BC009FE5 		ldr	r0, .L132+8	@,
 1900              	.LVL140:
 362:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1901              		.loc 1 362 5 is_stmt 0 view .LVU535
 1902 0810 FEFFFFEB 		bl	fwrite		@
 1903              	.LVL141:
 1904              		.loc 1 363 5 is_stmt 1 view .LVU536
 1905 0814 DC24C6E1 		ldrd	r2, [r6, #76]	@, tmp154,
 1906 0818 B4109FE5 		ldr	r1, .L132+12	@,
 1907 081c 0700A0E1 		mov	r0, r7	@, fp
 1908 0820 FEFFFFEB 		bl	fprintf		@
 1909              	.LVL142:
 364:armwave.c     ****     fputs("255\n", fp);
 1910              		.loc 1 364 5 view .LVU537
 1911 0824 0420A0E3 		mov	r2, #4	@,
 1912 0828 0730A0E1 		mov	r3, r7	@, fp
 1913 082c 0110A0E3 		mov	r1, #1	@,
 1914 0830 A0009FE5 		ldr	r0, .L132+16	@,
 1915 0834 FEFFFFEB 		bl	fwrite		@
 1916              	.LVL143:
 365:armwave.c     **** 
 366:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1917              		.loc 1 366 5 view .LVU538
 1918              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1919              		.loc 1 366 37 is_stmt 0 view .LVU539
 1920 0838 502096E5 		ldr	r2, [r6, #80]	@ prephitmp_57, g_armwave_state.target_height
 1921              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1922              		.loc 1 366 5 view .LVU540
 1923 083c 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1924 0840 1800000A 		beq	.L121		@,
 1925 0844 4C3096E5 		ldr	r3, [r6, #76]	@ _12, g_armwave_state.target_width
 1926              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 368:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 369:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 370:armwave.c     **** 
 371:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1927              		.loc 1 371 13 view .LVU541
 1928 0848 8C909FE5 		ldr	r9, .L132+20	@ tmp156,
 1929              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 366:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1930              		.loc 1 366 12 view .LVU542
 1931 084c 0050A0E3 		mov	r5, #0	@ yy,
 1932              	.LVL144:
 1933              	.L122:
 1934              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1935              		.loc 1 367 9 view .LVU543
 1936 0850 000053E3 		cmp	r3, #0	@ _12,
 1937              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1938              		.loc 1 367 16 view .LVU544
 1939 0854 0040A013 		movne	r4, #0	@ xx,
 1940              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1941              		.loc 1 367 9 view .LVU545
 1942 0858 1600000A 		beq	.L131		@,
 1943              	.LVL145:
 1944              	.L123:
 368:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1945              		.loc 1 368 13 is_stmt 1 discriminator 3 view .LVU546
 1946              	@ armwave.c:368:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 368:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1947              		.loc 1 368 29 is_stmt 0 discriminator 3 view .LVU547
 1948 085c 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1949              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1950              		.loc 1 371 13 discriminator 3 view .LVU548
 1951 0860 0910A0E1 		mov	r1, r9	@, tmp156
 1952 0864 0700A0E1 		mov	r0, r7	@, fp
 1953              	@ armwave.c:368:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 368:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1954              		.loc 1 368 18 discriminator 3 view .LVU549
 1955 0868 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1956              	.LVL146:
 1957              		.loc 1 371 13 is_stmt 1 discriminator 3 view .LVU550
 1958              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1959              		.loc 1 367 58 is_stmt 0 discriminator 3 view .LVU551
 1960 086c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1961              	.LVL147:
 1962              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1963              		.loc 1 371 81 discriminator 3 view .LVU552
 1964 0870 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1965              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1966              		.loc 1 371 61 discriminator 3 view .LVU553
 1967 0874 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1968              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1969              		.loc 1 371 13 discriminator 3 view .LVU554
 1970 0878 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1971 087c 7330EFE6 		uxtb	r3, r3	@, tmp146
 1972 0880 00C08DE5 		str	ip, [sp]	@ tmp151,
 1973 0884 7220EFE6 		uxtb	r2, r2	@, data
 1974              	.LVL148:
 1975              		.loc 1 371 13 discriminator 3 view .LVU555
 1976 0888 FEFFFFEB 		bl	fprintf		@
 1977              	.LVL149:
 1978              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1979              		.loc 1 367 41 discriminator 3 view .LVU556
 1980 088c 4C3096E5 		ldr	r3, [r6, #76]	@ _12, g_armwave_state.target_width
 1981              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1982              		.loc 1 367 9 discriminator 3 view .LVU557
 1983 0890 040053E1 		cmp	r3, r4	@ _12, xx
 1984 0894 F0FFFF8A 		bhi	.L123		@,
 1985 0898 502096E5 		ldr	r2, [r6, #80]	@ prephitmp_57, g_armwave_state.target_height
 1986              	.LVL150:
 1987              	.L124:
 1988              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 366:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1989              		.loc 1 366 55 discriminator 2 view .LVU558
 1990 089c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1991              	.LVL151:
 1992              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 366:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1993              		.loc 1 366 5 discriminator 2 view .LVU559
 1994 08a0 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1995 08a4 E9FFFF3A 		bcc	.L122		@,
 1996              	.LVL152:
 1997              	.L121:
 372:armwave.c     ****         }
 373:armwave.c     ****     }
 374:armwave.c     **** 
 375:armwave.c     ****     fclose(fp);
 1998              		.loc 1 375 5 is_stmt 1 view .LVU560
 1999 08a8 0700A0E1 		mov	r0, r7	@, fp
 2000              	@ armwave.c:376: }
 376:armwave.c     **** }
 2001              		.loc 1 376 1 is_stmt 0 view .LVU561
 2002 08ac 0CD08DE2 		add	sp, sp, #12	@,,
 2003              		.cfi_remember_state
 2004              		.cfi_def_cfa_offset 28
 2005              		@ sp needed	@
 2006 08b0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2007              		.cfi_restore 14
 2008              		.cfi_restore 9
 2009              		.cfi_restore 8
 2010              		.cfi_restore 7
 2011              		.cfi_restore 6
 2012              		.cfi_restore 5
 2013              		.cfi_restore 4
 2014              		.cfi_def_cfa_offset 0
 2015              	.LVL153:
 2016              	@ armwave.c:375:     fclose(fp);
 375:armwave.c     **** }
 2017              		.loc 1 375 5 view .LVU562
 2018 08b4 FEFFFFEA 		b	fclose		@
 2019              	.LVL154:
 2020              	.L131:
 2021              		.cfi_restore_state
 2022              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 366:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2023              		.loc 1 366 55 view .LVU563
 2024 08b8 015085E2 		add	r5, r5, #1	@ yy, yy,
 2025              	.LVL155:
 2026              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 366:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2027              		.loc 1 366 5 view .LVU564
 2028 08bc 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2029 08c0 F5FFFF8A 		bhi	.L124		@,
 2030 08c4 F7FFFFEA 		b	.L121		@
 2031              	.L133:
 2032              		.align	2
 2033              	.L132:
 2034 08c8 14010000 		.word	.LC11
 2035 08cc 00000000 		.word	g_armwave_state
 2036 08d0 18010000 		.word	.LC12
 2037 08d4 1C010000 		.word	.LC13
 2038 08d8 24010000 		.word	.LC14
 2039 08dc 2C010000 		.word	.LC15
 2040              		.cfi_endproc
 2041              	.LFE68:
 2043              		.align	2
 2044              		.global	armwave_test_init
 2045              		.syntax unified
 2046              		.arm
 2047              		.fpu vfp
 2049              	armwave_test_init:
 2050              	.LVL156:
 2051              	.LFB69:
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Initialise some test functionry.
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 382:armwave.c     **** {
 2052              		.loc 1 382 1 is_stmt 1 view -0
 2053              		.cfi_startproc
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 383:armwave.c     ****     test_create_gamma();
 2056              		.loc 1 383 5 view .LVU566
 2057              	.LBB12:
 2058              	.LBI12:
  44:armwave.c     **** {
 2059              		.loc 1 44 6 view .LVU567
  44:armwave.c     **** {
 2060              		.loc 1 44 6 is_stmt 0 view .LVU568
 2061              	.LBE12:
 2062              	@ armwave.c:382: {
 382:armwave.c     ****     test_create_gamma();
 2063              		.loc 1 382 1 view .LVU569
 2064 08e0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2065              		.cfi_def_cfa_offset 32
 2066              		.cfi_offset 4, -32
 2067              		.cfi_offset 5, -28
 2068              		.cfi_offset 6, -24
 2069              		.cfi_offset 7, -20
 2070              		.cfi_offset 8, -16
 2071              		.cfi_offset 9, -12
 2072              		.cfi_offset 10, -8
 2073              		.cfi_offset 14, -4
 2074 08e4 068B2DED 		vpush.64	{d8, d9, d10}	@
 2075              		.cfi_def_cfa_offset 56
 2076              		.cfi_offset 80, -56
 2077              		.cfi_offset 81, -52
 2078              		.cfi_offset 82, -48
 2079              		.cfi_offset 83, -44
 2080              		.cfi_offset 84, -40
 2081              		.cfi_offset 85, -36
 2082 08e8 BC409FE5 		ldr	r4, .L138+20	@ ivtmp.98,
 2083              	.LBB15:
 2084              	.LBB13:
 2085              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2086              		.loc 1 50 32 view .LVU570
 2087 08ec 2DAA9FED 		vldr.32	s20, .L138+16	@ tmp136,
 2088              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2089              		.loc 1 50 26 view .LVU571
 2090 08f0 289B9FED 		vldr.64	d9, .L138	@ tmp151,
 2091              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2092              		.loc 1 50 49 view .LVU572
 2093 08f4 298B9FED 		vldr.64	d8, .L138+8	@ tmp139,
 2094 08f8 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.98,
 2095              	.LBE13:
 2096              	.LBE15:
 2097              	@ armwave.c:382: {
 382:armwave.c     ****     test_create_gamma();
 2098              		.loc 1 382 1 view .LVU573
 2099 08fc 10D04DE2 		sub	sp, sp, #16	@,,
 2100              		.cfi_def_cfa_offset 72
 2101              	@ armwave.c:382: {
 382:armwave.c     ****     test_create_gamma();
 2102              		.loc 1 382 1 view .LVU574
 2103 0900 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2104 0904 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2105 0908 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2106 090c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2107 0910 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.98,
 2108 0914 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2109              	.LVL157:
 2110              	.L135:
 2111              	.LBB16:
 2112              	.LBB14:
  50:armwave.c     ****     }
 2113              		.loc 1 50 9 is_stmt 1 view .LVU575
 2114              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2115              		.loc 1 50 32 is_stmt 0 view .LVU576
 2116 0918 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.98
 2117              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2118              		.loc 1 50 26 view .LVU577
 2119 091c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2120              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2121              		.loc 1 50 32 view .LVU578
 2122 0920 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2123 0924 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2124 0928 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2125              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2126              		.loc 1 50 26 view .LVU579
 2127 092c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2128 0930 FEFFFFEB 		bl	pow		@
 2129              	.LVL158:
 2130              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2131              		.loc 1 50 49 view .LVU580
 2132 0934 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2133              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2134              		.loc 1 50 24 view .LVU581
 2135 0938 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2136 093c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2137 0940 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2138              	.LVL159:
 2139              	@ armwave.c:49:     for(i = 0; i < 256; i++) {
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2140              		.loc 1 49 5 view .LVU582
 2141 0944 0A0054E1 		cmp	r4, r10	@ ivtmp.98, _39
 2142 0948 F2FFFF1A 		bne	.L135		@,
 2143              	.LVL160:
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2144              		.loc 1 49 5 view .LVU583
 2145              	.LBE14:
 2146              	.LBE16:
 384:armwave.c     **** 
 385:armwave.c     ****     // make ch1 yellowish by default
 386:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2147              		.loc 1 386 5 is_stmt 1 view .LVU584
 2148              	.LBB17:
 2149              	.LBI17:
 339:armwave.c     **** {
 2150              		.loc 1 339 6 view .LVU585
 2151              	.LBB18:
 342:armwave.c     ****         case 1:
 2152              		.loc 1 342 5 view .LVU586
 344:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2153              		.loc 1 344 13 view .LVU587
 345:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2154              		.loc 1 345 13 view .LVU588
 2155              	@ armwave.c:344:             g_armwave_state.ch1_color.r = r;
 344:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2156              		.loc 1 344 41 is_stmt 0 view .LVU589
 2157 094c 5CC09FE5 		ldr	ip, .L138+24	@ tmp142,
 2158 0950 5C409FE5 		ldr	r4, .L138+28	@ tmp143,
 2159              	.LBE18:
 2160              	.LBE17:
 2161              	@ armwave.c:388:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 387:armwave.c     **** 
 388:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2162              		.loc 1 388 5 view .LVU590
 2163 0954 0000A0E3 		mov	r0, #0	@ tmp147,
 2164              	.LBB22:
 2165              	.LBB19:
 2166              	@ armwave.c:346:             g_armwave_state.ch1_color.b = b;
 346:armwave.c     ****             break;
 2167              		.loc 1 346 41 view .LVU591
 2168 0958 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2169              	.LBE19:
 2170              	.LBE22:
 2171              	@ armwave.c:388:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2172              		.loc 1 388 5 view .LVU592
 2173 095c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2174 0960 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2175 0964 00808DE5 		str	r8, [sp]	@ render_width,
 2176 0968 0610A0E1 		mov	r1, r6	@, tmp3
 2177 096c 0720A0E1 		mov	r2, r7	@, nwaves
 2178              	.LBB23:
 2179              	.LBB20:
 2180              	@ armwave.c:344:             g_armwave_state.ch1_color.r = r;
 344:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2181              		.loc 1 344 41 view .LVU593
 2182 0970 60408CE5 		str	r4, [ip, #96]	@ tmp143, MEM[(short int *)&g_armwave_state + 96B]
 346:armwave.c     ****             break;
 2183              		.loc 1 346 13 is_stmt 1 view .LVU594
 2184              	.LBE20:
 2185              	.LBE23:
 2186              	@ armwave.c:388:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2187              		.loc 1 388 5 is_stmt 0 view .LVU595
 2188 0974 0630A0E1 		mov	r3, r6	@, wave_size
 2189              	.LBB24:
 2190              	.LBB21:
 2191              	@ armwave.c:346:             g_armwave_state.ch1_color.b = b;
 346:armwave.c     ****             break;
 2192              		.loc 1 346 41 view .LVU596
 2193 0978 B4E6CCE1 		strh	lr, [ip, #100]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 347:armwave.c     ****     }
 2194              		.loc 1 347 13 is_stmt 1 view .LVU597
 2195              	.LVL161:
 347:armwave.c     ****     }
 2196              		.loc 1 347 13 is_stmt 0 view .LVU598
 2197              	.LBE21:
 2198              	.LBE24:
 2199              		.loc 1 388 5 is_stmt 1 view .LVU599
 2200 097c FEFFFFEB 		bl	armwave_setup_render		@
 2201              	.LVL162:
 389:armwave.c     **** 
 390:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2202              		.loc 1 390 5 view .LVU600
 2203 0980 30109FE5 		ldr	r1, .L138+32	@,
 2204 0984 30009FE5 		ldr	r0, .L138+36	@,
 2205              	@ armwave.c:391: }
 391:armwave.c     **** }
 2206              		.loc 1 391 1 is_stmt 0 view .LVU601
 2207 0988 10D08DE2 		add	sp, sp, #16	@,,
 2208              		.cfi_def_cfa_offset 56
 2209              		@ sp needed	@
 2210 098c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2211              		.cfi_restore 84
 2212              		.cfi_restore 85
 2213              		.cfi_restore 82
 2214              		.cfi_restore 83
 2215              		.cfi_restore 80
 2216              		.cfi_restore 81
 2217              		.cfi_def_cfa_offset 32
 2218 0990 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2219              		.cfi_restore 14
 2220              		.cfi_restore 10
 2221              		.cfi_restore 9
 2222              		.cfi_restore 8
 2223              		.cfi_restore 7
 2224              		.cfi_restore 6
 2225              		.cfi_restore 5
 2226              		.cfi_restore 4
 2227              		.cfi_def_cfa_offset 0
 2228              	.LVL163:
 2229              	@ armwave.c:390:     printf("armwave version: %s\n", ARMWAVE_VER);
 390:armwave.c     **** }
 2230              		.loc 1 390 5 view .LVU602
 2231 0994 FEFFFFEA 		b	printf		@
 2232              	.LVL164:
 2233              	.L139:
 2234              		.align	3
 2235              	.L138:
 2236 0998 000000C0 		.word	-1073741824
 2237 099c CCCCEC3F 		.word	1072483532
 2238 09a0 00000000 		.word	0
 2239 09a4 00E06F40 		.word	1081073664
 2240 09a8 00007F43 		.word	1132396544
 2241 09ac FFFFFFFF 		.word	gamma_table-1
 2242 09b0 00000000 		.word	g_armwave_state
 2243 09b4 F609F406 		.word	116656630
 2244 09b8 00000000 		.word	.LC0
 2245 09bc 08000000 		.word	.LC1
 2246              		.cfi_endproc
 2247              	.LFE69:
 2249              		.global	__aeabi_uidiv
 2250              		.align	2
 2251              		.global	armwave_test_generate
 2252              		.syntax unified
 2253              		.arm
 2254              		.fpu vfp
 2256              	armwave_test_generate:
 2257              	.LFB70:
 392:armwave.c     **** 
 393:armwave.c     **** /*
 394:armwave.c     ****  * Fill buffers with test funtionry.
 395:armwave.c     ****  */
 396:armwave.c     **** void armwave_test_generate()
 397:armwave.c     **** {
 2258              		.loc 1 397 1 is_stmt 1 view -0
 2259              		.cfi_startproc
 2260              		@ args = 0, pretend = 0, frame = 8
 2261              		@ frame_needed = 0, uses_anonymous_args = 0
 398:armwave.c     ****     uint32_t yy;
 2262              		.loc 1 398 5 view .LVU604
 399:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2263              		.loc 1 399 5 view .LVU605
 2264              	@ armwave.c:397: {
 397:armwave.c     ****     uint32_t yy;
 2265              		.loc 1 397 1 is_stmt 0 view .LVU606
 2266 09c0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2267              		.cfi_def_cfa_offset 36
 2268              		.cfi_offset 4, -36
 2269              		.cfi_offset 5, -32
 2270              		.cfi_offset 6, -28
 2271              		.cfi_offset 7, -24
 2272              		.cfi_offset 8, -20
 2273              		.cfi_offset 9, -16
 2274              		.cfi_offset 10, -12
 2275              		.cfi_offset 11, -8
 2276              		.cfi_offset 14, -4
 2277 09c4 0CD04DE2 		sub	sp, sp, #12	@,,
 2278              		.cfi_def_cfa_offset 48
 2279              	@ armwave.c:399:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2280              		.loc 1 399 14 view .LVU607
 2281 09c8 44429FE5 		ldr	r4, .L169	@ tmp400,
 2282              	@ armwave.c:401:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 400:armwave.c     **** 
 401:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2283              		.loc 1 401 5 view .LVU608
 2284 09cc 0010A0E3 		mov	r1, #0	@,
 2285              	@ armwave.c:399:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 399:armwave.c     **** 
 2286              		.loc 1 399 14 view .LVU609
 2287 09d0 4C3094E5 		ldr	r3, [r4, #76]	@ xx_rem, g_armwave_state.target_width
 2288              	@ armwave.c:401:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2289              		.loc 1 401 5 view .LVU610
 2290 09d4 442094E5 		ldr	r2, [r4, #68]	@, g_armwave_state.ch_buff_size
 2291 09d8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2292              	@ armwave.c:399:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 399:armwave.c     **** 
 2293              		.loc 1 399 14 view .LVU611
 2294 09dc 04308DE5 		str	r3, [sp, #4]	@ xx_rem, %sfp
 2295              	.LVL165:
 2296              		.loc 1 401 5 is_stmt 1 view .LVU612
 2297 09e0 FEFFFFEB 		bl	memset		@
 2298              	.LVL166:
 402:armwave.c     **** 
 403:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 2299              		.loc 1 403 5 view .LVU613
 2300              	@ armwave.c:403:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2301              		.loc 1 403 69 is_stmt 0 view .LVU614
 2302 09e4 386094E5 		ldr	r6, [r4, #56]	@ _124, g_armwave_state.slice_height
 2303              	@ armwave.c:403:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2304              		.loc 1 403 5 view .LVU615
 2305 09e8 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2306 09ec 060053E1 		cmp	r3, r6	@ g_armwave_state.target_width, _124
 2307 09f0 8300003A 		bcc	.L141		@,
 2308              	@ armwave.c:399:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 399:armwave.c     **** 
 2309              		.loc 1 399 53 view .LVU616
 2310 09f4 0030A0E3 		mov	r3, #0	@ ypos,
 2311              	@ armwave.c:403:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2312              		.loc 1 403 12 view .LVU617
 2313 09f8 0350A0E1 		mov	r5, r3	@ yy, ypos
 2314              	@ armwave.c:399:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 399:armwave.c     **** 
 2315              		.loc 1 399 53 view .LVU618
 2316 09fc 00308DE5 		str	r3, [sp]	@ ypos, %sfp
 2317              	.LVL167:
 2318              	.L146:
 404:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2319              		.loc 1 404 9 is_stmt 1 discriminator 3 view .LVU619
 2320 0a00 960502E0 		mul	r2, r6, r5	@, _124, yy
 2321 0a04 3C3094E5 		ldr	r3, [r4, #60]	@, g_armwave_state.slice_record_height
 2322 0a08 0510A0E1 		mov	r1, r5	@, yy
 2323 0a0c 04029FE5 		ldr	r0, .L169+4	@,
 2324 0a10 FEFFFFEB 		bl	printf		@
 2325              	.LVL168:
 405:armwave.c     **** 
 406:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2326              		.loc 1 406 9 discriminator 3 view .LVU620
 2327              	@ armwave.c:406:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2328              		.loc 1 406 62 is_stmt 0 discriminator 3 view .LVU621
 2329 0a14 386094E5 		ldr	r6, [r4, #56]	@ _124, g_armwave_state.slice_height
 2330              	.LBB29:
 2331              	.LBB30:
 2332              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2333              		.loc 1 81 63 discriminator 3 view .LVU622
 2334 0a18 34E094E5 		ldr	lr, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2335              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2336              		.loc 1 84 35 discriminator 3 view .LVU623
 2337 0a1c 2CA094E5 		ldr	r10, [r4, #44]	@ prephitmp_329, g_armwave_state.waves
 2338              	.LBE30:
 2339              	.LBE29:
 2340              	@ armwave.c:406:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2341              		.loc 1 406 9 discriminator 3 view .LVU624
 2342 0a20 950608E0 		mul	r8, r5, r6	@ _7, yy, _124
 2343              	.LBB33:
 2344              	.LBB31:
 2345              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2346              		.loc 1 84 5 discriminator 3 view .LVU625
 2347 0a24 00005AE3 		cmp	r10, #0	@ prephitmp_329,
 2348              	.LBE31:
 2349              	.LBE33:
 2350              	@ armwave.c:406:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2351              		.loc 1 406 9 discriminator 3 view .LVU626
 2352 0a28 3C9094E5 		ldr	r9, [r4, #60]	@ _8, g_armwave_state.slice_record_height
 2353              	.LVL169:
 2354              	.LBB34:
 2355              	.LBI29:
  72:armwave.c     **** {
 2356              		.loc 1 72 6 is_stmt 1 discriminator 3 view .LVU627
 2357              	.LBB32:
  74:armwave.c     ****     uint32_t value, word;
 2358              		.loc 1 74 5 discriminator 3 view .LVU628
  75:armwave.c     ****     uint8_t *wave_base;
 2359              		.loc 1 75 5 discriminator 3 view .LVU629
  76:armwave.c     ****     uint8_t *write_buffer_base;
 2360              		.loc 1 76 5 discriminator 3 view .LVU630
  77:armwave.c     ****     uint8_t *write_buffer;
 2361              		.loc 1 77 5 discriminator 3 view .LVU631
  78:armwave.c     **** 
 2362              		.loc 1 78 5 discriminator 3 view .LVU632
  81:armwave.c     **** 
 2363              		.loc 1 81 5 discriminator 3 view .LVU633
 2364              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2365              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU634
 2366 0a2c 9E080EE0 		mul	lr, lr, r8	@ _29, g_armwave_state.bitdepth_height, _7
 2367              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2368              		.loc 1 81 40 discriminator 3 view .LVU635
 2369 0a30 043094E5 		ldr	r3, [r4, #4]	@ _27, g_armwave_state.ch1_buffer
 2370              	.LVL170:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2371              		.loc 1 84 5 is_stmt 1 discriminator 3 view .LVU636
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2372              		.loc 1 84 5 is_stmt 0 discriminator 3 view .LVU637
 2373 0a34 2F00000A 		beq	.L142		@,
 2374 0a38 048048E2 		sub	r8, r8, #4	@ _168, _7,
 2375              	.LVL171:
 2376              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2377              		.loc 1 84 11 view .LVU638
 2378 0a3c 0070A0E3 		mov	r7, #0	@ w,
 2379              	.LVL172:
 2380              	.L145:
  86:armwave.c     **** 
 2381              		.loc 1 86 9 is_stmt 1 view .LVU639
 2382              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2383              		.loc 1 86 64 is_stmt 0 view .LVU640
 2384 0a40 282094E5 		ldr	r2, [r4, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2385              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2386              		.loc 1 90 9 view .LVU641
 2387 0a44 000059E3 		cmp	r9, #0	@ _8,
 2388              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2389              		.loc 1 86 36 view .LVU642
 2390 0a48 140094E5 		ldr	r0, [r4, #20]	@ _30, g_armwave_state.wave_buffer
 2391              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2392              		.loc 1 86 64 view .LVU643
 2393 0a4c 920702E0 		mul	r2, r2, r7	@ _33, g_armwave_state.wave_stride, w
 2394              	.LVL173:
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2395              		.loc 1 90 9 is_stmt 1 view .LVU644
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2396              		.loc 1 90 9 is_stmt 0 view .LVU645
 2397 0a50 2400000A 		beq	.L143		@,
 2398 0a54 082082E0 		add	r2, r2, r8	@ tmp287, _33, _168
 2399              	.LVL174:
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2400              		.loc 1 90 9 view .LVU646
 2401 0a58 020080E0 		add	r0, r0, r2	@ ivtmp.115, _30, tmp287
 2402              	.LVL175:
 2403              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2404              		.loc 1 90 16 view .LVU647
 2405 0a5c 0020A0E3 		mov	r2, #0	@ yy,
 2406              	.LVL176:
 2407              	.L144:
  91:armwave.c     **** 
 2408              		.loc 1 91 13 is_stmt 1 view .LVU648
 2409              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
  91:armwave.c     **** 
 2410              		.loc 1 91 18 is_stmt 0 view .LVU649
 2411 0a60 0410B0E5 		ldr	r1, [r0, #4]!	@ word, MEM[base: _355, offset: 0B]
 2412              	.LVL177:
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2413              		.loc 1 93 13 is_stmt 1 view .LVU650
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2414              		.loc 1 95 17 view .LVU651
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2415              		.loc 1 96 17 view .LVU652
  97:armwave.c     ****                 word >>= 8;
 2416              		.loc 1 97 17 view .LVU653
 2417              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2418              		.loc 1 96 63 is_stmt 0 view .LVU654
 2419 0a64 346094E5 		ldr	r6, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2420 0a68 01B082E2 		add	fp, r2, #1	@ tmp302, yy,
 2421              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2422              		.loc 1 97 47 view .LVU655
 2423 0a6c 71C0EEE6 		uxtab	ip, lr, r1	@ tmp289, _29, word
 2424 0a70 96C226E0 		mla	r6, r6, r2, ip	@ tmp293, g_armwave_state.bitdepth_height, yy, tmp289
 2425              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****             }
 2426              		.loc 1 98 22 view .LVU656
 2427 0a74 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2428              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2429              		.loc 1 97 47 view .LVU657
 2430 0a78 06C0D3E7 		ldrb	ip, [r3, r6]	@ zero_extendqisi2	@ *_195, *_195
 2431 0a7c 7AA0EEE6 		uxtab	r10, lr, r10	@ tmp300, _29, word
 2432 0a80 01C08CE2 		add	ip, ip, #1	@ tmp296, *_195,
 2433 0a84 06C0C3E7 		strb	ip, [r3, r6]	@ tmp296, *_195
 2434              	.LVL178:
  98:armwave.c     ****             }
 2435              		.loc 1 98 17 is_stmt 1 view .LVU658
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2436              		.loc 1 95 17 view .LVU659
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2437              		.loc 1 96 17 view .LVU660
  97:armwave.c     ****                 word >>= 8;
 2438              		.loc 1 97 17 view .LVU661
 2439              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2440              		.loc 1 96 63 is_stmt 0 view .LVU662
 2441 0a88 34C094E5 		ldr	ip, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2442              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****             }
 2443              		.loc 1 98 22 view .LVU663
 2444 0a8c 2168A0E1 		lsr	r6, r1, #16	@ word, word,
 2445              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2446              		.loc 1 97 47 view .LVU664
 2447 0a90 211C8EE0 		add	r1, lr, r1, lsr #24	@ tmp327, _29, word,
 2448              	.LVL179:
  97:armwave.c     ****                 word >>= 8;
 2449              		.loc 1 97 47 view .LVU665
 2450 0a94 9CAB2CE0 		mla	ip, ip, fp, r10	@ tmp305, g_armwave_state.bitdepth_height, tmp302, tmp300
 2451 0a98 76A0EEE6 		uxtab	r10, lr, r6	@ tmp312, _29, word
 2452 0a9c 0CB0D3E7 		ldrb	fp, [r3, ip]	@ zero_extendqisi2	@ *_215, *_215
 2453              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2454              		.loc 1 96 63 view .LVU666
 2455 0aa0 026082E2 		add	r6, r2, #2	@ tmp314, yy,
 2456              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2457              		.loc 1 97 47 view .LVU667
 2458 0aa4 01B08BE2 		add	fp, fp, #1	@ tmp308, *_215,
 2459 0aa8 0CB0C3E7 		strb	fp, [r3, ip]	@ tmp308, *_215
 2460              	.LVL180:
  98:armwave.c     ****             }
 2461              		.loc 1 98 17 is_stmt 1 view .LVU668
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2462              		.loc 1 95 17 view .LVU669
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2463              		.loc 1 96 17 view .LVU670
  97:armwave.c     ****                 word >>= 8;
 2464              		.loc 1 97 17 view .LVU671
 2465              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2466              		.loc 1 96 63 is_stmt 0 view .LVU672
 2467 0aac 34B094E5 		ldr	fp, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2468 0ab0 03C082E2 		add	ip, r2, #3	@ tmp323, yy,
 2469              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2470              		.loc 1 90 37 view .LVU673
 2471 0ab4 042082E2 		add	r2, r2, #4	@ yy, yy,
 2472              	.LVL181:
 2473              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2474              		.loc 1 97 47 view .LVU674
 2475 0ab8 9BA626E0 		mla	r6, fp, r6, r10	@ tmp317, g_armwave_state.bitdepth_height, tmp314, tmp312
 2476              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2477              		.loc 1 90 9 view .LVU675
 2478 0abc 020059E1 		cmp	r9, r2	@ _8, yy
 2479              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2480              		.loc 1 97 47 view .LVU676
 2481 0ac0 06A0D3E7 		ldrb	r10, [r3, r6]	@ zero_extendqisi2	@ *_235, *_235
 2482 0ac4 01A08AE2 		add	r10, r10, #1	@ tmp320, *_235,
 2483 0ac8 06A0C3E7 		strb	r10, [r3, r6]	@ tmp320, *_235
 2484              	.LVL182:
  98:armwave.c     ****             }
 2485              		.loc 1 98 17 is_stmt 1 view .LVU677
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2486              		.loc 1 95 17 view .LVU678
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2487              		.loc 1 96 17 view .LVU679
  97:armwave.c     ****                 word >>= 8;
 2488              		.loc 1 97 17 view .LVU680
 2489              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2490              		.loc 1 96 63 is_stmt 0 view .LVU681
 2491 0acc 346094E5 		ldr	r6, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2492              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2493              		.loc 1 97 47 view .LVU682
 2494 0ad0 961C21E0 		mla	r1, r6, ip, r1	@ tmp328, g_armwave_state.bitdepth_height, tmp323, tmp327
 2495 0ad4 01C0D3E7 		ldrb	ip, [r3, r1]	@ zero_extendqisi2	@ *_255, *_255
 2496 0ad8 01C08CE2 		add	ip, ip, #1	@ tmp331, *_255,
 2497 0adc 01C0C3E7 		strb	ip, [r3, r1]	@ tmp331, *_255
  98:armwave.c     ****             }
 2498              		.loc 1 98 17 is_stmt 1 view .LVU683
 2499              	.LVL183:
 2500              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2501              		.loc 1 90 9 is_stmt 0 view .LVU684
 2502 0ae0 DEFFFF8A 		bhi	.L144		@,
 2503 0ae4 2CA094E5 		ldr	r10, [r4, #44]	@ prephitmp_329, g_armwave_state.waves
 2504              	.LVL184:
 2505              	.L143:
 2506              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2507              		.loc 1 84 44 view .LVU685
 2508 0ae8 017087E2 		add	r7, r7, #1	@ w, w,
 2509              	.LVL185:
 2510              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2511              		.loc 1 84 5 view .LVU686
 2512 0aec 0A0057E1 		cmp	r7, r10	@ w, prephitmp_329
 2513 0af0 D2FFFF3A 		bcc	.L145		@,
 2514 0af4 386094E5 		ldr	r6, [r4, #56]	@ _124, g_armwave_state.slice_height
 2515              	.LVL186:
 2516              	.L142:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2517              		.loc 1 84 5 view .LVU687
 2518              	.LBE32:
 2519              	.LBE34:
 407:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2520              		.loc 1 407 9 is_stmt 1 discriminator 3 view .LVU688
 2521              	@ armwave.c:403:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 403:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2522              		.loc 1 403 52 is_stmt 0 discriminator 3 view .LVU689
 2523 0af8 0610A0E1 		mov	r1, r6	@, _124
 2524 0afc 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.target_width
 2525 0b00 FEFFFFEB 		bl	__aeabi_uidiv		@
 2526              	.LVL187:
 2527              	@ armwave.c:407:         xx_rem -= g_armwave_state.slice_height;
 2528              		.loc 1 407 16 discriminator 3 view .LVU690
 2529 0b04 04309DE5 		ldr	r3, [sp, #4]	@ xx_rem, %sfp
 2530              	@ armwave.c:403:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 403:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2531              		.loc 1 403 87 discriminator 3 view .LVU691
 2532 0b08 015085E2 		add	r5, r5, #1	@ yy, yy,
 2533              	.LVL188:
 2534              	@ armwave.c:407:         xx_rem -= g_armwave_state.slice_height;
 2535              		.loc 1 407 16 discriminator 3 view .LVU692
 2536 0b0c 063043E0 		sub	r3, r3, r6	@ xx_rem, xx_rem, _124
 2537 0b10 04308DE5 		str	r3, [sp, #4]	@ xx_rem, %sfp
 2538              	.LVL189:
 408:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2539              		.loc 1 408 9 is_stmt 1 discriminator 3 view .LVU693
 2540              	@ armwave.c:408:         ypos += g_armwave_state.slice_height;
 2541              		.loc 1 408 14 is_stmt 0 discriminator 3 view .LVU694
 2542 0b14 00309DE5 		ldr	r3, [sp]	@ ypos, %sfp
 2543              	.LVL190:
 2544              		.loc 1 408 14 discriminator 3 view .LVU695
 2545 0b18 063083E0 		add	r3, r3, r6	@ ypos, ypos, _124
 2546              	.LVL191:
 2547              		.loc 1 408 14 discriminator 3 view .LVU696
 2548 0b1c 00308DE5 		str	r3, [sp]	@ ypos, %sfp
 2549              	.LVL192:
 2550              	@ armwave.c:403:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 403:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2551              		.loc 1 403 5 discriminator 3 view .LVU697
 2552 0b20 050050E1 		cmp	r0, r5	@, yy
 2553 0b24 B5FFFF8A 		bhi	.L146		@,
 2554              	.LVL193:
 2555              	.L168:
 2556              	.LBB35:
 2557              	.LBB36:
 2558              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2559              		.loc 1 81 63 view .LVU698
 2560 0b28 345094E5 		ldr	r5, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2561 0b2c 0320A0E1 		mov	r2, r3	@ ypos, ypos
 2562              	.LBE36:
 2563              	.LBE35:
 409:armwave.c     ****     }
 410:armwave.c     **** 
 411:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2564              		.loc 1 411 5 is_stmt 1 view .LVU699
 2565              	.LVL194:
 2566              	.LBB38:
 2567              	.LBI35:
  72:armwave.c     **** {
 2568              		.loc 1 72 6 view .LVU700
 2569              	.LBB37:
  74:armwave.c     ****     uint32_t value, word;
 2570              		.loc 1 74 5 view .LVU701
  75:armwave.c     ****     uint8_t *wave_base;
 2571              		.loc 1 75 5 view .LVU702
  76:armwave.c     ****     uint8_t *write_buffer_base;
 2572              		.loc 1 76 5 view .LVU703
  77:armwave.c     ****     uint8_t *write_buffer;
 2573              		.loc 1 77 5 view .LVU704
  78:armwave.c     **** 
 2574              		.loc 1 78 5 view .LVU705
  81:armwave.c     **** 
 2575              		.loc 1 81 5 view .LVU706
 2576              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2577              		.loc 1 84 5 is_stmt 0 view .LVU707
 2578 0b30 00005AE3 		cmp	r10, #0	@ prephitmp_329,
 2579              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2580              		.loc 1 81 40 view .LVU708
 2581 0b34 043094E5 		ldr	r3, [r4, #4]	@ _62, g_armwave_state.ch1_buffer
 2582              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2583              		.loc 1 81 63 view .LVU709
 2584 0b38 950205E0 		mul	r5, r5, r2	@ _64, g_armwave_state.bitdepth_height, ypos
 2585              	.LVL195:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2586              		.loc 1 84 5 is_stmt 1 view .LVU710
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2587              		.loc 1 84 5 is_stmt 0 view .LVU711
 2588 0b3c 2E00000A 		beq	.L140		@,
 2589 0b40 04809DE5 		ldr	r8, [sp, #4]	@ xx_rem, %sfp
 2590 0b44 000058E3 		cmp	r8, #0	@ xx_rem,
 2591 0b48 2B00000A 		beq	.L140		@,
 2592 0b4c 047042E2 		sub	r7, r2, #4	@ tmp399, ypos,
 2593              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2594              		.loc 1 84 11 view .LVU712
 2595 0b50 0060A0E3 		mov	r6, #0	@ w,
 2596              	.LVL196:
 2597              	.L151:
  86:armwave.c     **** 
 2598              		.loc 1 86 9 is_stmt 1 view .LVU713
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2599              		.loc 1 90 9 view .LVU714
 2600              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     **** 
 2601              		.loc 1 86 64 is_stmt 0 view .LVU715
 2602 0b54 281094E5 		ldr	r1, [r4, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2603 0b58 14E094E5 		ldr	lr, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2604              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2605              		.loc 1 90 16 view .LVU716
 2606 0b5c 0020A0E3 		mov	r2, #0	@ yy,
 2607 0b60 917621E0 		mla	r1, r1, r6, r7	@ tmp349, g_armwave_state.wave_stride, w, tmp399
 2608 0b64 01E08EE0 		add	lr, lr, r1	@ ivtmp.104, g_armwave_state.wave_buffer, tmp349
 2609              	.LVL197:
 2610              	.L150:
  91:armwave.c     **** 
 2611              		.loc 1 91 13 is_stmt 1 view .LVU717
 2612              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
  91:armwave.c     **** 
 2613              		.loc 1 91 18 is_stmt 0 view .LVU718
 2614 0b68 0410BEE5 		ldr	r1, [lr, #4]!	@ word, MEM[base: _381, offset: 0B]
 2615              	.LVL198:
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2616              		.loc 1 93 13 is_stmt 1 view .LVU719
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2617              		.loc 1 95 17 view .LVU720
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2618              		.loc 1 96 17 view .LVU721
  97:armwave.c     ****                 word >>= 8;
 2619              		.loc 1 97 17 view .LVU722
 2620              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2621              		.loc 1 96 63 is_stmt 0 view .LVU723
 2622 0b6c 349094E5 		ldr	r9, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2623 0b70 010082E2 		add	r0, r2, #1	@ tmp362, yy,
 2624              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2625              		.loc 1 97 47 view .LVU724
 2626 0b74 71C0E5E6 		uxtab	ip, r5, r1	@ tmp355, _64, word
 2627 0b78 99C229E0 		mla	r9, r9, r2, ip	@ tmp356, g_armwave_state.bitdepth_height, yy, tmp355
 2628              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****             }
 2629              		.loc 1 98 22 view .LVU725
 2630 0b7c 21B4A0E1 		lsr	fp, r1, #8	@ word, word,
 2631 0b80 21A8A0E1 		lsr	r10, r1, #16	@ word, word,
 2632              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2633              		.loc 1 97 47 view .LVU726
 2634 0b84 09C0D3E7 		ldrb	ip, [r3, r9]	@ zero_extendqisi2	@ *_115, *_115
 2635 0b88 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp367, _64, word
 2636 0b8c 01C08CE2 		add	ip, ip, #1	@ tmp359, *_115,
 2637 0b90 09C0C3E7 		strb	ip, [r3, r9]	@ tmp359, *_115
 2638              	.LVL199:
  98:armwave.c     ****             }
 2639              		.loc 1 98 17 is_stmt 1 view .LVU727
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2640              		.loc 1 95 17 view .LVU728
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2641              		.loc 1 96 17 view .LVU729
  97:armwave.c     ****                 word >>= 8;
 2642              		.loc 1 97 17 view .LVU730
 2643              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2644              		.loc 1 96 63 is_stmt 0 view .LVU731
 2645 0b94 34C094E5 		ldr	ip, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2646              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2647              		.loc 1 97 47 view .LVU732
 2648 0b98 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp375, _64, word
 2649 0b9c 9CB02CE0 		mla	ip, ip, r0, fp	@ tmp368, g_armwave_state.bitdepth_height, tmp362, tmp367
 2650              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2651              		.loc 1 96 63 view .LVU733
 2652 0ba0 020082E2 		add	r0, r2, #2	@ tmp377, yy,
 2653 0ba4 039082E2 		add	r9, r2, #3	@ tmp386, yy,
 2654              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2655              		.loc 1 97 47 view .LVU734
 2656 0ba8 0CB0D3E7 		ldrb	fp, [r3, ip]	@ zero_extendqisi2	@ *_135, *_135
 2657 0bac 211C85E0 		add	r1, r5, r1, lsr #24	@ tmp390, _64, word,
 2658              	.LVL200:
 2659              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2660              		.loc 1 90 37 view .LVU735
 2661 0bb0 042082E2 		add	r2, r2, #4	@ yy, yy,
 2662              	.LVL201:
 2663              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2664              		.loc 1 97 47 view .LVU736
 2665 0bb4 01B08BE2 		add	fp, fp, #1	@ tmp371, *_135,
 2666 0bb8 0CB0C3E7 		strb	fp, [r3, ip]	@ tmp371, *_135
 2667              	.LVL202:
  98:armwave.c     ****             }
 2668              		.loc 1 98 17 is_stmt 1 view .LVU737
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2669              		.loc 1 95 17 view .LVU738
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2670              		.loc 1 96 17 view .LVU739
  97:armwave.c     ****                 word >>= 8;
 2671              		.loc 1 97 17 view .LVU740
 2672              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2673              		.loc 1 96 63 is_stmt 0 view .LVU741
 2674 0bbc 34C094E5 		ldr	ip, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2675              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2676              		.loc 1 90 9 view .LVU742
 2677 0bc0 020058E1 		cmp	r8, r2	@ xx_rem, yy
 2678              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2679              		.loc 1 97 47 view .LVU743
 2680 0bc4 9CA020E0 		mla	r0, ip, r0, r10	@ tmp380, g_armwave_state.bitdepth_height, tmp377, tmp375
 2681 0bc8 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_155, *_155
 2682 0bcc 01C08CE2 		add	ip, ip, #1	@ tmp383, *_155,
 2683 0bd0 00C0C3E7 		strb	ip, [r3, r0]	@ tmp383, *_155
  98:armwave.c     ****             }
 2684              		.loc 1 98 17 is_stmt 1 view .LVU744
 2685              	.LVL203:
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2686              		.loc 1 95 17 view .LVU745
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2687              		.loc 1 96 17 view .LVU746
  97:armwave.c     ****                 word >>= 8;
 2688              		.loc 1 97 17 view .LVU747
 2689              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2690              		.loc 1 96 63 is_stmt 0 view .LVU748
 2691 0bd4 340094E5 		ldr	r0, [r4, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2692              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 2693              		.loc 1 97 47 view .LVU749
 2694 0bd8 901921E0 		mla	r1, r0, r9, r1	@ tmp391, g_armwave_state.bitdepth_height, tmp386, tmp390
 2695 0bdc 0100D3E7 		ldrb	r0, [r3, r1]	@ zero_extendqisi2	@ *_175, *_175
 2696 0be0 010080E2 		add	r0, r0, #1	@ tmp394, *_175,
 2697 0be4 0100C3E7 		strb	r0, [r3, r1]	@ tmp394, *_175
  98:armwave.c     ****             }
 2698              		.loc 1 98 17 is_stmt 1 view .LVU750
 2699              	.LVL204:
 2700              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2701              		.loc 1 90 9 is_stmt 0 view .LVU751
 2702 0be8 DEFFFF8A 		bhi	.L150		@,
 2703              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2704              		.loc 1 84 5 view .LVU752
 2705 0bec 2C2094E5 		ldr	r2, [r4, #44]	@ g_armwave_state.waves, g_armwave_state.waves
 2706              	.LVL205:
 2707              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2708              		.loc 1 84 44 view .LVU753
 2709 0bf0 016086E2 		add	r6, r6, #1	@ w, w,
 2710              	.LVL206:
 2711              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2712              		.loc 1 84 5 view .LVU754
 2713 0bf4 020056E1 		cmp	r6, r2	@ w, g_armwave_state.waves
 2714 0bf8 D5FFFF3A 		bcc	.L151		@,
 2715              	.LVL207:
 2716              	.L140:
  84:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2717              		.loc 1 84 5 view .LVU755
 2718              	.LBE37:
 2719              	.LBE38:
 2720              	@ armwave.c:412: }
 412:armwave.c     **** }
 2721              		.loc 1 412 1 view .LVU756
 2722 0bfc 0CD08DE2 		add	sp, sp, #12	@,,
 2723              		.cfi_remember_state
 2724              		.cfi_def_cfa_offset 36
 2725              		@ sp needed	@
 2726 0c00 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2727              	.LVL208:
 2728              	.L141:
 2729              		.cfi_restore_state
 2730              	@ armwave.c:399:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 399:armwave.c     **** 
 2731              		.loc 1 399 53 view .LVU757
 2732 0c04 0030A0E3 		mov	r3, #0	@ ypos,
 2733 0c08 2CA094E5 		ldr	r10, [r4, #44]	@ prephitmp_329, g_armwave_state.waves
 2734 0c0c 00308DE5 		str	r3, [sp]	@ ypos, %sfp
 2735 0c10 C4FFFFEA 		b	.L168		@
 2736              	.L170:
 2737              		.align	2
 2738              	.L169:
 2739 0c14 00000000 		.word	g_armwave_state
 2740 0c18 3C010000 		.word	.LC16
 2741              		.cfi_endproc
 2742              	.LFE70:
 2744              		.align	2
 2745              		.global	armwave_test_fill_outbuf
 2746              		.syntax unified
 2747              		.arm
 2748              		.fpu vfp
 2750              	armwave_test_fill_outbuf:
 2751              	.LFB71:
 413:armwave.c     **** 
 414:armwave.c     **** /*
 415:armwave.c     ****  * Render image to the local allocated buffer.
 416:armwave.c     ****  */
 417:armwave.c     **** void armwave_test_fill_outbuf()
 418:armwave.c     **** {
 2752              		.loc 1 418 1 is_stmt 1 view -0
 2753              		.cfi_startproc
 2754              		@ args = 0, pretend = 0, frame = 8
 2755              		@ frame_needed = 0, uses_anonymous_args = 0
 419:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2756              		.loc 1 419 5 view .LVU759
 2757 0c1c 50C19FE5 		ldr	ip, .L192	@ tmp205,
 2758              	@ armwave.c:418: {
 418:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2759              		.loc 1 418 1 is_stmt 0 view .LVU760
 2760 0c20 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2761              		.cfi_def_cfa_offset 36
 2762              		.cfi_offset 4, -36
 2763              		.cfi_offset 5, -32
 2764              		.cfi_offset 6, -28
 2765              		.cfi_offset 7, -24
 2766              		.cfi_offset 8, -20
 2767              		.cfi_offset 9, -16
 2768              		.cfi_offset 10, -12
 2769              		.cfi_offset 11, -8
 2770              		.cfi_offset 14, -4
 2771 0c24 0CD04DE2 		sub	sp, sp, #12	@,,
 2772              		.cfi_def_cfa_offset 48
 2773              	@ armwave.c:419:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2774              		.loc 1 419 5 view .LVU761
 2775 0c28 5C809CE5 		ldr	r8, [ip, #92]	@ _1, g_armwave_state.out_pixbuf
 2776              	.LVL209:
 2777              	.LBB41:
 2778              	.LBI41:
 161:armwave.c     **** {
 2779              		.loc 1 161 6 is_stmt 1 view .LVU762
 2780              	.LBB42:
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2781              		.loc 1 163 5 view .LVU763
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 2782              		.loc 1 164 5 view .LVU764
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2783              		.loc 1 165 5 view .LVU765
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2784              		.loc 1 166 5 view .LVU766
 2785              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2786              		.loc 1 166 15 is_stmt 0 view .LVU767
 2787 0c2c 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2788              	.LVL210:
 167:armwave.c     ****     uint32_t offset;
 2789              		.loc 1 167 5 is_stmt 1 view .LVU768
 168:armwave.c     **** 
 2790              		.loc 1 168 5 view .LVU769
 170:armwave.c     **** 
 2791              		.loc 1 170 5 view .LVU770
 2792 0c30 000058E3 		cmp	r8, #0	@ _1,
 2793 0c34 4900000A 		beq	.L190		@,
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2794              		.loc 1 172 5 view .LVU771
 2795              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2796              		.loc 1 172 41 is_stmt 0 view .LVU772
 2797 0c38 4C709CE5 		ldr	r7, [ip, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2798 0c3c 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2799              	.LVL211:
 173:armwave.c     **** 
 2800              		.loc 1 173 5 is_stmt 1 view .LVU773
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2801              		.loc 1 175 5 view .LVU774
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2802              		.loc 1 175 5 is_stmt 0 view .LVU775
 2803 0c40 000057E3 		cmp	r7, #0	@ npix,
 2804 0c44 0A0000DA 		ble	.L171		@,
 2805              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2806              		.loc 1 187 52 view .LVU776
 2807 0c48 F0B6DCE1 		ldrsh	fp, [ip, #96]	@ _18, g_armwave_state.ch1_color.r
 2808              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2809              		.loc 1 188 52 view .LVU777
 2810 0c4c F2A6DCE1 		ldrsh	r10, [ip, #98]	@ _24, g_armwave_state.ch1_color.g
 2811              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2812              		.loc 1 189 52 view .LVU778
 2813 0c50 F456DCE1 		ldrsh	r5, [ip, #100]	@ _28, g_armwave_state.ch1_color.b
 2814              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2815              		.loc 1 200 57 view .LVU779
 2816 0c54 076ADCED 		vldr.32	s13, [ip, #28]	@ _50, g_armwave_state.vscale_frac
 2817              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2818              		.loc 1 175 11 view .LVU780
 2819 0c58 00E0A0E3 		mov	lr, #0	@ n,
 2820              	.LVL212:
 2821              	.L178:
 179:armwave.c     **** 
 2822              		.loc 1 179 9 is_stmt 1 view .LVU781
 2823              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 2824              		.loc 1 179 19 is_stmt 0 view .LVU782
 2825 0c5c 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2826              	.LVL213:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2827              		.loc 1 181 9 is_stmt 1 view .LVU783
 2828              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2829              		.loc 1 181 11 is_stmt 0 view .LVU784
 2830 0c60 000050E3 		cmp	r0, #0	@ wave_word,
 2831 0c64 0400001A 		bne	.L187		@,
 2832 0c68 04E08EE2 		add	lr, lr, #4	@ n, n,
 2833              	.L174:
 2834              	.LVL214:
 2835              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2836              		.loc 1 175 5 view .LVU785
 2837 0c6c 0E0057E1 		cmp	r7, lr	@ npix, n
 2838 0c70 F9FFFFCA 		bgt	.L178		@,
 2839              	.LVL215:
 2840              	.L171:
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2841              		.loc 1 175 5 view .LVU786
 2842              	.LBE42:
 2843              	.LBE41:
 2844              	@ armwave.c:420: }
 420:armwave.c     **** }
 2845              		.loc 1 420 1 view .LVU787
 2846 0c74 0CD08DE2 		add	sp, sp, #12	@,,
 2847              		.cfi_remember_state
 2848              		.cfi_def_cfa_offset 36
 2849              		@ sp needed	@
 2850 0c78 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2851              	.LVL216:
 2852              	.L187:
 2853              		.cfi_restore_state
 2854              	.LBB44:
 2855              	.LBB43:
 2856              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2857              		.loc 1 186 19 view .LVU788
 2858 0c7c FF1010E2 		ands	r1, r0, #255	@ _20, wave_word,
 2859              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2860              		.loc 1 181 11 view .LVU789
 2861 0c80 0E60A0E1 		mov	r6, lr	@ ivtmp.132, n
 2862              	.LVL217:
 183:armwave.c     ****                 wave_word >>= 8;
 2863              		.loc 1 183 17 is_stmt 1 view .LVU790
 184:armwave.c     **** 
 2864              		.loc 1 184 17 view .LVU791
 2865              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2866              		.loc 1 184 27 is_stmt 0 view .LVU792
 2867 0c84 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2868              	.LVL218:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2869              		.loc 1 186 17 is_stmt 1 view .LVU793
 2870 0c88 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.132,
 2871              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2872              		.loc 1 186 19 is_stmt 0 view .LVU794
 2873 0c8c 0500001A 		bne	.L191		@,
 2874              	.LVL219:
 2875              	.L175:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2876              		.loc 1 186 19 view .LVU795
 2877 0c90 016086E2 		add	r6, r6, #1	@ ivtmp.132, ivtmp.132,
 2878              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 2879              		.loc 1 182 13 view .LVU796
 2880 0c94 06005EE1 		cmp	lr, r6	@ n, ivtmp.132
 2881 0c98 F3FFFF0A 		beq	.L174		@,
 183:armwave.c     ****                 wave_word >>= 8;
 2882              		.loc 1 183 17 is_stmt 1 view .LVU797
 2883              	.LVL220:
 184:armwave.c     **** 
 2884              		.loc 1 184 17 view .LVU798
 2885              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2886              		.loc 1 186 19 is_stmt 0 view .LVU799
 2887 0c9c FF1010E2 		ands	r1, r0, #255	@ _20, wave_word,
 2888              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2889              		.loc 1 184 27 view .LVU800
 2890 0ca0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2891              	.LVL221:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2892              		.loc 1 186 17 is_stmt 1 view .LVU801
 2893              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2894              		.loc 1 186 19 is_stmt 0 view .LVU802
 2895 0ca4 F9FFFF0A 		beq	.L175		@,
 2896              	.L191:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2897              		.loc 1 187 21 is_stmt 1 view .LVU803
 2898              	.LVL222:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2899              		.loc 1 188 21 view .LVU804
 189:armwave.c     **** 
 2900              		.loc 1 189 21 view .LVU805
 191:armwave.c     ****                     g = MIN(gg, 255);
 2901              		.loc 1 191 21 view .LVU806
 192:armwave.c     ****                     b = MIN(bb, 255);
 2902              		.loc 1 192 21 view .LVU807
 193:armwave.c     **** 
 2903              		.loc 1 193 21 view .LVU808
 196:armwave.c     **** 
 2904              		.loc 1 196 21 view .LVU809
 2905              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2906              		.loc 1 200 32 is_stmt 0 view .LVU810
 2907 0ca8 7630EFE6 		uxtb	r3, r6	@ _48, ivtmp.132
 2908              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2909              		.loc 1 201 41 view .LVU811
 2910 0cac 012083E2 		add	r2, r3, #1	@ tmp197, _48,
 2911              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2912              		.loc 1 200 40 view .LVU812
 2913 0cb0 903A07EE 		vmov	s15, r3	@ int	@ _48, _48
 2914              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2915              		.loc 1 201 41 view .LVU813
 2916 0cb4 102A07EE 		vmov	s14, r2	@ int	@ tmp197, tmp197
 2917              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2918              		.loc 1 189 55 view .LVU814
 2919 0cb8 950103E0 		mul	r3, r5, r1	@ tmp182, _28, _20
 2920              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2921              		.loc 1 200 40 view .LVU815
 2922 0cbc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, _48
 2923              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2924              		.loc 1 201 46 view .LVU816
 2925 0cc0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, tmp197
 2926              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2927              		.loc 1 188 55 view .LVU817
 2928 0cc4 9A0102E0 		mul	r2, r10, r1	@ tmp186, _24, _20
 2929              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2930              		.loc 1 189 24 view .LVU818
 2931 0cc8 4334A0E1 		asr	r3, r3, #8	@ bb, tmp182,
 2932              	.LVL223:
 2933              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 2934              		.loc 1 193 25 view .LVU819
 2935 0ccc FF0053E3 		cmp	r3, #255	@ bb,
 2936              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2937              		.loc 1 188 24 view .LVU820
 2938 0cd0 4224A0E1 		asr	r2, r2, #8	@ gg, tmp186,
 2939              	.LVL224:
 2940              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 2941              		.loc 1 193 25 view .LVU821
 2942 0cd4 FF30A0A3 		movge	r3, #255	@ bb,
 2943              	.LVL225:
 2944              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2945              		.loc 1 200 40 view .LVU822
 2946 0cd8 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp196, tmp195, _50
 2947              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2948              		.loc 1 201 46 view .LVU823
 2949 0cdc 267A27EE 		vmul.f32	s14, s14, s13	@ tmp199, tmp198, _50
 2950              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 2951              		.loc 1 192 25 view .LVU824
 2952 0ce0 FF0052E3 		cmp	r2, #255	@ gg,
 2953 0ce4 FF20A0A3 		movge	r2, #255	@ gg,
 2954              	.LVL226:
 2955              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2956              		.loc 1 187 55 view .LVU825
 2957 0ce8 910B01E0 		mul	r1, r1, fp	@ tmp192, _20, _18
 2958              	.LVL227:
 2959              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2960              		.loc 1 196 56 view .LVU826
 2961 0cec 0224A0E1 		lsl	r2, r2, #8	@ tmp187, gg,
 2962              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2963              		.loc 1 196 44 view .LVU827
 2964 0cf0 0338A0E1 		lsl	r3, r3, #16	@ tmp183, bb,
 2965              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2966              		.loc 1 200 24 view .LVU828
 2967 0cf4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 2968              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2969              		.loc 1 187 24 view .LVU829
 2970 0cf8 4114A0E1 		asr	r1, r1, #8	@ rr, tmp192,
 2971              	.LVL228:
 2972              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2973              		.loc 1 196 56 view .LVU830
 2974 0cfc 7220FFE6 		uxth	r2, r2	@ tmp188, tmp187
 2975              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2976              		.loc 1 196 44 view .LVU831
 2977 0d00 FF3803E2 		and	r3, r3, #16711680	@ tmp184, tmp183,
 2978              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 2979              		.loc 1 191 25 view .LVU832
 2980 0d04 FF0051E3 		cmp	r1, #255	@ rr,
 2981              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2982              		.loc 1 196 51 view .LVU833
 2983 0d08 023083E1 		orr	r3, r3, r2	@ tmp190, tmp184, tmp188
 2984              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 2985              		.loc 1 191 25 view .LVU834
 2986 0d0c FF10A0A3 		movge	r1, #255	@ rr,
 2987              	.LVL229:
 2988              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2989              		.loc 1 200 24 view .LVU835
 2990 0d10 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2991              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2992              		.loc 1 201 24 view .LVU836
 2993 0d14 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp199
 2994              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2995              		.loc 1 196 62 view .LVU837
 2996 0d18 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2997 0d1c 013083E1 		orr	r3, r3, r1	@ tmp194, tmp190, rr
 2998              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2999              		.loc 1 196 26 view .LVU838
 3000 0d20 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp194,
 3001              	.LVL230:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3002              		.loc 1 199 21 is_stmt 1 view .LVU839
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3003              		.loc 1 200 21 view .LVU840
 201:armwave.c     ****                     xx = (nsub >> 8);
 3004              		.loc 1 201 21 view .LVU841
 202:armwave.c     **** 
 3005              		.loc 1 202 21 view .LVU842
 3006              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 3007              		.loc 1 202 32 is_stmt 0 view .LVU843
 3008 0d24 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.132,
 3009              	.LVL231:
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3010              		.loc 1 211 21 is_stmt 1 view .LVU844
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3011              		.loc 1 211 21 is_stmt 0 view .LVU845
 3012 0d28 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3013              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3014              		.loc 1 201 24 view .LVU846
 3015 0d2c 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3016              	.LVL232:
 3017              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3018              		.loc 1 211 21 view .LVU847
 3019 0d30 020054E1 		cmp	r4, r2	@ yy, ye
 3020 0d34 D5FFFF2A 		bcs	.L175		@,
 3021 0d38 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3022              	.LVL233:
 3023              	.L176:
 212:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3024              		.loc 1 212 25 is_stmt 1 view .LVU848
 213:armwave.c     ****                     }
 3025              		.loc 1 213 25 view .LVU849
 3026              	@ armwave.c:212:                         offset = (xx + (y * g_armwave_state.target_width)); 
 212:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3027              		.loc 1 212 43 is_stmt 0 view .LVU850
 3028 0d3c 4C209CE5 		ldr	r2, [ip, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3029              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3030              		.loc 1 211 21 view .LVU851
 3031 0d40 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3032              	@ armwave.c:213:                         *(out_buffer_base + offset) = word;
 213:armwave.c     ****                     }
 3033              		.loc 1 213 43 view .LVU852
 3034 0d44 921422E0 		mla	r2, r2, r4, r1	@ tmp203, g_armwave_state.target_width, yy, xx
 3035              	.LVL234:
 3036              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3037              		.loc 1 211 42 view .LVU853
 3038 0d48 014084E2 		add	r4, r4, #1	@ yy, yy,
 3039              	.LVL235:
 3040              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3041              		.loc 1 211 21 view .LVU854
 3042 0d4c 040050E1 		cmp	r0, r4	@ ye, yy
 3043              	@ armwave.c:213:                         *(out_buffer_base + offset) = word;
 213:armwave.c     ****                     }
 3044              		.loc 1 213 53 view .LVU855
 3045 0d50 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 3046              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3047              		.loc 1 211 21 view .LVU856
 3048 0d54 F8FFFF1A 		bne	.L176		@,
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3049              		.loc 1 211 21 view .LVU857
 3050 0d58 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3051 0d5c CBFFFFEA 		b	.L175		@
 3052              	.LVL236:
 3053              	.L190:
 170:armwave.c     **** 
 3054              		.loc 1 170 5 is_stmt 1 view .LVU858
 3055 0d60 10309FE5 		ldr	r3, .L192+4	@,
 3056 0d64 AA20A0E3 		mov	r2, #170	@,
 3057 0d68 0C109FE5 		ldr	r1, .L192+8	@,
 3058 0d6c 0C009FE5 		ldr	r0, .L192+12	@,
 3059 0d70 FEFFFFEB 		bl	__assert_fail		@
 3060              	.LVL237:
 3061              	.L193:
 3062              		.align	2
 3063              	.L192:
 3064 0d74 00000000 		.word	g_armwave_state
 3065 0d78 18000000 		.word	.LANCHOR0+24
 3066 0d7c 20000000 		.word	.LC2
 3067 0d80 2C000000 		.word	.LC3
 3068              	.LBE43:
 3069              	.LBE44:
 3070              		.cfi_endproc
 3071              	.LFE71:
 3073              		.align	2
 3074              		.global	armwave_test_dump_buffer_to_ppm
 3075              		.syntax unified
 3076              		.arm
 3077              		.fpu vfp
 3079              	armwave_test_dump_buffer_to_ppm:
 3080              	.LVL238:
 3081              	.LFB72:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 426:armwave.c     **** {
 3082              		.loc 1 426 1 view -0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 0
 3085              		@ frame_needed = 0, uses_anonymous_args = 0
 3086              		@ link register save eliminated.
 427:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3087              		.loc 1 427 5 view .LVU860
 3088 0d84 08309FE5 		ldr	r3, .L195	@ tmp112,
 3089 0d88 0010A0E1 		mov	r1, r0	@, fn
 3090 0d8c 5C0093E5 		ldr	r0, [r3, #92]	@, g_armwave_state.out_pixbuf
 3091              	.LVL239:
 3092              		.loc 1 427 5 is_stmt 0 view .LVU861
 3093 0d90 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3094              	.LVL240:
 3095              	.L196:
 3096              		.loc 1 427 5 view .LVU862
 3097              		.align	2
 3098              	.L195:
 3099 0d94 00000000 		.word	g_armwave_state
 3100              		.cfi_endproc
 3101              	.LFE72:
 3103              		.align	2
 3104              		.global	armwave_test_fill_gdkbuf
 3105              		.syntax unified
 3106              		.arm
 3107              		.fpu vfp
 3109              	armwave_test_fill_gdkbuf:
 3110              	.LVL241:
 3111              	.LFB73:
 428:armwave.c     **** }
 429:armwave.c     **** 
 430:armwave.c     **** /*
 431:armwave.c     ****  * Render GDK buffer with test funtionry.
 432:armwave.c     ****  */
 433:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 434:armwave.c     **** {
 3112              		.loc 1 434 1 is_stmt 1 view -0
 3113              		.cfi_startproc
 3114              		@ args = 0, pretend = 0, frame = 8
 3115              		@ frame_needed = 0, uses_anonymous_args = 0
 435:armwave.c     ****     //PyObject *mv;
 436:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 437:armwave.c     **** 
 438:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 439:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3116              		.loc 1 439 5 view .LVU864
 3117              	@ armwave.c:439:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3118              		.loc 1 439 11 is_stmt 0 view .LVU865
 3119 0d98 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 3120              	@ armwave.c:434: {
 434:armwave.c     ****     //PyObject *mv;
 3121              		.loc 1 434 1 view .LVU866
 3122 0d9c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3123              		.cfi_def_cfa_offset 36
 3124              		.cfi_offset 4, -36
 3125              		.cfi_offset 5, -32
 3126              		.cfi_offset 6, -28
 3127              		.cfi_offset 7, -24
 3128              		.cfi_offset 8, -20
 3129              		.cfi_offset 9, -16
 3130              		.cfi_offset 10, -12
 3131              		.cfi_offset 11, -8
 3132              		.cfi_offset 14, -4
 3133 0da0 0CD04DE2 		sub	sp, sp, #12	@,,
 3134              		.cfi_def_cfa_offset 48
 3135              	.LBB47:
 3136              	.LBB48:
 3137              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3138              		.loc 1 166 15 view .LVU867
 3139 0da4 48519FE5 		ldr	r5, .L218	@ tmp208,
 3140              	.LBE48:
 3141              	.LBE47:
 3142              	@ armwave.c:439:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3143              		.loc 1 439 11 view .LVU868
 3144 0da8 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 3145              	.LVL242:
 440:armwave.c     ****     
 441:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 442:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 3146              		.loc 1 442 5 is_stmt 1 view .LVU869
 3147              	.LBB51:
 3148              	.LBI47:
 161:armwave.c     **** {
 3149              		.loc 1 161 6 view .LVU870
 3150              	.LBB49:
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 3151              		.loc 1 163 5 view .LVU871
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 3152              		.loc 1 164 5 view .LVU872
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 3153              		.loc 1 165 5 view .LVU873
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3154              		.loc 1 166 5 view .LVU874
 3155              	@ armwave.c:170:     assert(out_buffer != NULL);
 170:armwave.c     **** 
 3156              		.loc 1 170 5 is_stmt 0 view .LVU875
 3157 0dac 000058E3 		cmp	r8, #0	@ out_pixbuf,
 3158              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3159              		.loc 1 166 15 view .LVU876
 3160 0db0 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3161              	.LVL243:
 167:armwave.c     ****     uint32_t offset;
 3162              		.loc 1 167 5 is_stmt 1 view .LVU877
 168:armwave.c     **** 
 3163              		.loc 1 168 5 view .LVU878
 170:armwave.c     **** 
 3164              		.loc 1 170 5 view .LVU879
 3165 0db4 4900000A 		beq	.L216		@,
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3166              		.loc 1 172 5 view .LVU880
 3167              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3168              		.loc 1 172 41 is_stmt 0 view .LVU881
 3169 0db8 4C7095E5 		ldr	r7, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3170 0dbc 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 3171              	.LVL244:
 173:armwave.c     **** 
 3172              		.loc 1 173 5 is_stmt 1 view .LVU882
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3173              		.loc 1 175 5 view .LVU883
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3174              		.loc 1 175 5 is_stmt 0 view .LVU884
 3175 0dc0 000057E3 		cmp	r7, #0	@ npix,
 3176 0dc4 0A0000DA 		ble	.L197		@,
 3177              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3178              		.loc 1 187 52 view .LVU885
 3179 0dc8 F0B6D5E1 		ldrsh	fp, [r5, #96]	@ _20, g_armwave_state.ch1_color.r
 3180              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3181              		.loc 1 188 52 view .LVU886
 3182 0dcc F2A6D5E1 		ldrsh	r10, [r5, #98]	@ _26, g_armwave_state.ch1_color.g
 3183              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3184              		.loc 1 189 52 view .LVU887
 3185 0dd0 F446D5E1 		ldrsh	r4, [r5, #100]	@ _30, g_armwave_state.ch1_color.b
 3186              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3187              		.loc 1 200 57 view .LVU888
 3188 0dd4 076AD5ED 		vldr.32	s13, [r5, #28]	@ _52, g_armwave_state.vscale_frac
 3189              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3190              		.loc 1 175 11 view .LVU889
 3191 0dd8 00C0A0E3 		mov	ip, #0	@ n,
 3192              	.LVL245:
 3193              	.L204:
 179:armwave.c     **** 
 3194              		.loc 1 179 9 is_stmt 1 view .LVU890
 3195              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 3196              		.loc 1 179 19 is_stmt 0 view .LVU891
 3197 0ddc 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 3198              	.LVL246:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3199              		.loc 1 181 9 is_stmt 1 view .LVU892
 3200              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3201              		.loc 1 181 11 is_stmt 0 view .LVU893
 3202 0de0 000050E3 		cmp	r0, #0	@ wave_word,
 3203 0de4 0400001A 		bne	.L213		@,
 3204 0de8 04C08CE2 		add	ip, ip, #4	@ n, n,
 3205              	.L200:
 3206              	.LVL247:
 3207              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3208              		.loc 1 175 5 view .LVU894
 3209 0dec 0C0057E1 		cmp	r7, ip	@ npix, n
 3210 0df0 F9FFFFCA 		bgt	.L204		@,
 3211              	.LVL248:
 3212              	.L197:
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3213              		.loc 1 175 5 view .LVU895
 3214              	.LBE49:
 3215              	.LBE51:
 3216              	@ armwave.c:443: }
 443:armwave.c     **** }
 3217              		.loc 1 443 1 view .LVU896
 3218 0df4 0CD08DE2 		add	sp, sp, #12	@,,
 3219              		.cfi_remember_state
 3220              		.cfi_def_cfa_offset 36
 3221              		@ sp needed	@
 3222 0df8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3223              	.LVL249:
 3224              	.L213:
 3225              		.cfi_restore_state
 3226              	.LBB52:
 3227              	.LBB50:
 3228              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3229              		.loc 1 186 19 view .LVU897
 3230 0dfc FF1010E2 		ands	r1, r0, #255	@ _22, wave_word,
 3231              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 3232              		.loc 1 181 11 view .LVU898
 3233 0e00 0C60A0E1 		mov	r6, ip	@ ivtmp.148, n
 3234              	.LVL250:
 183:armwave.c     ****                 wave_word >>= 8;
 3235              		.loc 1 183 17 is_stmt 1 view .LVU899
 184:armwave.c     **** 
 3236              		.loc 1 184 17 view .LVU900
 3237              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 3238              		.loc 1 184 27 is_stmt 0 view .LVU901
 3239 0e04 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3240              	.LVL251:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3241              		.loc 1 186 17 is_stmt 1 view .LVU902
 3242 0e08 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.148,
 3243              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3244              		.loc 1 186 19 is_stmt 0 view .LVU903
 3245 0e0c 0500001A 		bne	.L217		@,
 3246              	.LVL252:
 3247              	.L201:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3248              		.loc 1 186 19 view .LVU904
 3249 0e10 016086E2 		add	r6, r6, #1	@ ivtmp.148, ivtmp.148,
 3250              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 3251              		.loc 1 182 13 view .LVU905
 3252 0e14 06005CE1 		cmp	ip, r6	@ n, ivtmp.148
 3253 0e18 F3FFFF0A 		beq	.L200		@,
 183:armwave.c     ****                 wave_word >>= 8;
 3254              		.loc 1 183 17 is_stmt 1 view .LVU906
 3255              	.LVL253:
 184:armwave.c     **** 
 3256              		.loc 1 184 17 view .LVU907
 3257              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3258              		.loc 1 186 19 is_stmt 0 view .LVU908
 3259 0e1c FF1010E2 		ands	r1, r0, #255	@ _22, wave_word,
 3260              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 3261              		.loc 1 184 27 view .LVU909
 3262 0e20 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3263              	.LVL254:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3264              		.loc 1 186 17 is_stmt 1 view .LVU910
 3265              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3266              		.loc 1 186 19 is_stmt 0 view .LVU911
 3267 0e24 F9FFFF0A 		beq	.L201		@,
 3268              	.L217:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3269              		.loc 1 187 21 is_stmt 1 view .LVU912
 3270              	.LVL255:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3271              		.loc 1 188 21 view .LVU913
 189:armwave.c     **** 
 3272              		.loc 1 189 21 view .LVU914
 191:armwave.c     ****                     g = MIN(gg, 255);
 3273              		.loc 1 191 21 view .LVU915
 192:armwave.c     ****                     b = MIN(bb, 255);
 3274              		.loc 1 192 21 view .LVU916
 193:armwave.c     **** 
 3275              		.loc 1 193 21 view .LVU917
 196:armwave.c     **** 
 3276              		.loc 1 196 21 view .LVU918
 3277              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3278              		.loc 1 200 32 is_stmt 0 view .LVU919
 3279 0e28 7630EFE6 		uxtb	r3, r6	@ _50, ivtmp.148
 3280              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3281              		.loc 1 201 41 view .LVU920
 3282 0e2c 012083E2 		add	r2, r3, #1	@ tmp199, _50,
 3283              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3284              		.loc 1 200 40 view .LVU921
 3285 0e30 903A07EE 		vmov	s15, r3	@ int	@ _50, _50
 3286              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3287              		.loc 1 201 41 view .LVU922
 3288 0e34 102A07EE 		vmov	s14, r2	@ int	@ tmp199, tmp199
 3289              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3290              		.loc 1 189 55 view .LVU923
 3291 0e38 940103E0 		mul	r3, r4, r1	@ tmp184, _30, _22
 3292              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3293              		.loc 1 200 40 view .LVU924
 3294 0e3c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp197, _50
 3295              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3296              		.loc 1 201 46 view .LVU925
 3297 0e40 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp200, tmp199
 3298              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3299              		.loc 1 188 55 view .LVU926
 3300 0e44 9A0102E0 		mul	r2, r10, r1	@ tmp188, _26, _22
 3301              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 3302              		.loc 1 189 24 view .LVU927
 3303 0e48 4334A0E1 		asr	r3, r3, #8	@ bb, tmp184,
 3304              	.LVL256:
 3305              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 3306              		.loc 1 193 25 view .LVU928
 3307 0e4c FF0053E3 		cmp	r3, #255	@ bb,
 3308              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3309              		.loc 1 188 24 view .LVU929
 3310 0e50 4224A0E1 		asr	r2, r2, #8	@ gg, tmp188,
 3311              	.LVL257:
 3312              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 3313              		.loc 1 193 25 view .LVU930
 3314 0e54 FF30A0A3 		movge	r3, #255	@ bb,
 3315              	.LVL258:
 3316              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3317              		.loc 1 200 40 view .LVU931
 3318 0e58 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, _52
 3319              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3320              		.loc 1 201 46 view .LVU932
 3321 0e5c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp201, tmp200, _52
 3322              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 3323              		.loc 1 192 25 view .LVU933
 3324 0e60 FF0052E3 		cmp	r2, #255	@ gg,
 3325 0e64 FF20A0A3 		movge	r2, #255	@ gg,
 3326              	.LVL259:
 3327              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3328              		.loc 1 187 55 view .LVU934
 3329 0e68 910B01E0 		mul	r1, r1, fp	@ tmp194, _22, _20
 3330              	.LVL260:
 3331              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3332              		.loc 1 196 56 view .LVU935
 3333 0e6c 0224A0E1 		lsl	r2, r2, #8	@ tmp189, gg,
 3334              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3335              		.loc 1 196 44 view .LVU936
 3336 0e70 0338A0E1 		lsl	r3, r3, #16	@ tmp185, bb,
 3337              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3338              		.loc 1 200 24 view .LVU937
 3339 0e74 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp198
 3340              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3341              		.loc 1 187 24 view .LVU938
 3342 0e78 4114A0E1 		asr	r1, r1, #8	@ rr, tmp194,
 3343              	.LVL261:
 3344              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3345              		.loc 1 196 56 view .LVU939
 3346 0e7c 7220FFE6 		uxth	r2, r2	@ tmp190, tmp189
 3347              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3348              		.loc 1 196 44 view .LVU940
 3349 0e80 FF3803E2 		and	r3, r3, #16711680	@ tmp186, tmp185,
 3350              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3351              		.loc 1 191 25 view .LVU941
 3352 0e84 FF0051E3 		cmp	r1, #255	@ rr,
 3353              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3354              		.loc 1 196 51 view .LVU942
 3355 0e88 023083E1 		orr	r3, r3, r2	@ tmp192, tmp186, tmp190
 3356              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3357              		.loc 1 191 25 view .LVU943
 3358 0e8c FF10A0A3 		movge	r1, #255	@ rr,
 3359              	.LVL262:
 3360              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3361              		.loc 1 200 24 view .LVU944
 3362 0e90 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 3363              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3364              		.loc 1 201 24 view .LVU945
 3365 0e94 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp201
 3366              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3367              		.loc 1 196 62 view .LVU946
 3368 0e98 7110EFE6 		uxtb	r1, r1	@ rr, rr
 3369 0e9c 013083E1 		orr	r3, r3, r1	@ tmp196, tmp192, rr
 3370              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3371              		.loc 1 196 26 view .LVU947
 3372 0ea0 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp196,
 3373              	.LVL263:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3374              		.loc 1 199 21 is_stmt 1 view .LVU948
 200:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3375              		.loc 1 200 21 view .LVU949
 201:armwave.c     ****                     xx = (nsub >> 8);
 3376              		.loc 1 201 21 view .LVU950
 202:armwave.c     **** 
 3377              		.loc 1 202 21 view .LVU951
 3378              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 3379              		.loc 1 202 32 is_stmt 0 view .LVU952
 3380 0ea4 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.148,
 3381              	.LVL264:
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3382              		.loc 1 211 21 is_stmt 1 view .LVU953
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3383              		.loc 1 211 21 is_stmt 0 view .LVU954
 3384 0ea8 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3385              	@ armwave.c:201:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3386              		.loc 1 201 24 view .LVU955
 3387 0eac 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3388              	.LVL265:
 3389              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3390              		.loc 1 211 21 view .LVU956
 3391 0eb0 02005EE1 		cmp	lr, r2	@ yy, ye
 3392 0eb4 D5FFFF2A 		bcs	.L201		@,
 3393 0eb8 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3394              	.LVL266:
 3395              	.L202:
 212:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3396              		.loc 1 212 25 is_stmt 1 view .LVU957
 213:armwave.c     ****                     }
 3397              		.loc 1 213 25 view .LVU958
 3398              	@ armwave.c:212:                         offset = (xx + (y * g_armwave_state.target_width)); 
 212:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3399              		.loc 1 212 43 is_stmt 0 view .LVU959
 3400 0ebc 4C2095E5 		ldr	r2, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3401              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3402              		.loc 1 211 21 view .LVU960
 3403 0ec0 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3404              	@ armwave.c:213:                         *(out_buffer_base + offset) = word;
 213:armwave.c     ****                     }
 3405              		.loc 1 213 43 view .LVU961
 3406 0ec4 921E22E0 		mla	r2, r2, lr, r1	@ tmp205, g_armwave_state.target_width, yy, xx
 3407              	.LVL267:
 3408              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3409              		.loc 1 211 42 view .LVU962
 3410 0ec8 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 3411              	.LVL268:
 3412              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3413              		.loc 1 211 21 view .LVU963
 3414 0ecc 0E0050E1 		cmp	r0, lr	@ ye, yy
 3415              	@ armwave.c:213:                         *(out_buffer_base + offset) = word;
 213:armwave.c     ****                     }
 3416              		.loc 1 213 53 view .LVU964
 3417 0ed0 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3418              	@ armwave.c:211:                     for(y = yy; y < ye; y++) {
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3419              		.loc 1 211 21 view .LVU965
 3420 0ed4 F8FFFF1A 		bne	.L202		@,
 211:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3421              		.loc 1 211 21 view .LVU966
 3422 0ed8 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3423 0edc CBFFFFEA 		b	.L201		@
 3424              	.LVL269:
 3425              	.L216:
 170:armwave.c     **** 
 3426              		.loc 1 170 5 is_stmt 1 view .LVU967
 3427 0ee0 10309FE5 		ldr	r3, .L218+4	@,
 3428 0ee4 AA20A0E3 		mov	r2, #170	@,
 3429 0ee8 0C109FE5 		ldr	r1, .L218+8	@,
 3430 0eec 0C009FE5 		ldr	r0, .L218+12	@,
 3431              	.LVL270:
 170:armwave.c     **** 
 3432              		.loc 1 170 5 is_stmt 0 view .LVU968
 3433 0ef0 FEFFFFEB 		bl	__assert_fail		@
 3434              	.LVL271:
 3435              	.L219:
 3436              		.align	2
 3437              	.L218:
 3438 0ef4 00000000 		.word	g_armwave_state
 3439 0ef8 18000000 		.word	.LANCHOR0+24
 3440 0efc 20000000 		.word	.LC2
 3441 0f00 2C000000 		.word	.LC3
 3442              	.LBE50:
 3443              	.LBE52:
 3444              		.cfi_endproc
 3445              	.LFE73:
 3447              		.align	2
 3448              		.global	armwave_test_buffer_alloc
 3449              		.syntax unified
 3450              		.arm
 3451              		.fpu vfp
 3453              	armwave_test_buffer_alloc:
 3454              	.LFB74:
 444:armwave.c     **** 
 445:armwave.c     **** /*
 446:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 447:armwave.c     ****  */
 448:armwave.c     **** void armwave_test_buffer_alloc()
 449:armwave.c     **** {
 3455              		.loc 1 449 1 is_stmt 1 view -0
 3456              		.cfi_startproc
 3457              		@ args = 0, pretend = 0, frame = 0
 3458              		@ frame_needed = 0, uses_anonymous_args = 0
 450:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3459              		.loc 1 450 5 view .LVU970
 3460              	@ armwave.c:449: {
 449:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3461              		.loc 1 449 1 is_stmt 0 view .LVU971
 3462 0f04 70402DE9 		push	{r4, r5, r6, lr}	@
 3463              		.cfi_def_cfa_offset 16
 3464              		.cfi_offset 4, -16
 3465              		.cfi_offset 5, -12
 3466              		.cfi_offset 6, -8
 3467              		.cfi_offset 14, -4
 3468              	@ armwave.c:450:     if(g_armwave_state.test_wave_buffer != NULL) {
 3469              		.loc 1 450 23 view .LVU972
 3470 0f08 50409FE5 		ldr	r4, .L227	@ tmp130,
 3471 0f0c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3472              	@ armwave.c:450:     if(g_armwave_state.test_wave_buffer != NULL) {
 3473              		.loc 1 450 7 view .LVU973
 3474 0f10 000050E3 		cmp	r0, #0	@ _1,
 3475 0f14 0000000A 		beq	.L221		@,
 451:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3476              		.loc 1 451 9 is_stmt 1 view .LVU974
 3477 0f18 FEFFFFEB 		bl	free		@
 3478              	.LVL272:
 3479              	.L221:
 452:armwave.c     ****     }
 453:armwave.c     **** 
 454:armwave.c     ****     printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwave_
 3480              		.loc 1 454 5 view .LVU975
 3481 0f1c 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.waves_max
 3482 0f20 401094E5 		ldr	r1, [r4, #64]	@, g_armwave_state.wave_length
 3483 0f24 38009FE5 		ldr	r0, .L227+4	@,
 3484 0f28 FEFFFFEB 		bl	printf		@
 3485              	.LVL273:
 455:armwave.c     **** 
 456:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3486              		.loc 1 456 5 view .LVU976
 3487              	@ armwave.c:456:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3488              		.loc 1 456 40 is_stmt 0 view .LVU977
 3489 0f2c 403094E5 		ldr	r3, [r4, #64]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3490 0f30 305094E5 		ldr	r5, [r4, #48]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3491 0f34 0110A0E3 		mov	r1, #1	@,
 3492 0f38 950305E0 		mul	r5, r5, r3	@ _6, g_armwave_state.waves_max, g_armwave_state.wave_length
 3493 0f3c 0500A0E1 		mov	r0, r5	@, _6
 3494 0f40 FEFFFFEB 		bl	calloc		@
 3495              	.LVL274:
 3496              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer == NULL) {
 457:armwave.c     **** 
 458:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3497              		.loc 1 458 7 view .LVU978
 3498 0f44 000050E3 		cmp	r0, #0	@ tmp127,
 3499              	@ armwave.c:456:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 456:armwave.c     **** 
 3500              		.loc 1 456 38 view .LVU979
 3501 0f48 180084E5 		str	r0, [r4, #24]	@ tmp127, g_armwave_state.test_wave_buffer
 3502              		.loc 1 458 5 is_stmt 1 view .LVU980
 3503              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer == NULL) {
 3504              		.loc 1 458 7 is_stmt 0 view .LVU981
 3505 0f4c 7080BD18 		popne	{r4, r5, r6, pc}	@
 459:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3506              		.loc 1 459 9 is_stmt 1 view .LVU982
 3507 0f50 0510A0E1 		mov	r1, r5	@, _6
 3508 0f54 0C009FE5 		ldr	r0, .L227+8	@,
 3509              	@ armwave.c:462: }
 460:armwave.c     ****         return;
 461:armwave.c     ****     }
 462:armwave.c     **** }
 3510              		.loc 1 462 1 is_stmt 0 view .LVU983
 3511 0f58 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3512              		.cfi_restore 14
 3513              		.cfi_restore 6
 3514              		.cfi_restore 5
 3515              		.cfi_restore 4
 3516              		.cfi_def_cfa_offset 0
 3517              	@ armwave.c:459:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 459:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3518              		.loc 1 459 9 view .LVU984
 3519 0f5c FEFFFFEA 		b	printf		@
 3520              	.LVL275:
 3521              	.L228:
 3522              		.align	2
 3523              	.L227:
 3524 0f60 00000000 		.word	g_armwave_state
 3525 0f64 6C010000 		.word	.LC17
 3526 0f68 9C010000 		.word	.LC18
 3527              		.cfi_endproc
 3528              	.LFE74:
 3530              		.align	2
 3531              		.global	armwave_fill_pixbuf_into_pybuffer
 3532              		.syntax unified
 3533              		.arm
 3534              		.fpu vfp
 3536              	armwave_fill_pixbuf_into_pybuffer:
 3537              	.LVL276:
 3538              	.LFB75:
 463:armwave.c     **** 
 464:armwave.c     **** /*
 465:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 466:armwave.c     ****  */
 467:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 468:armwave.c     **** {
 3539              		.loc 1 468 1 is_stmt 1 view -0
 3540              		.cfi_startproc
 3541              		@ args = 0, pretend = 0, frame = 48
 3542              		@ frame_needed = 0, uses_anonymous_args = 0
 469:armwave.c     ****     Py_buffer buffer;
 3543              		.loc 1 469 5 view .LVU986
 470:armwave.c     ****     int ret;
 3544              		.loc 1 470 5 view .LVU987
 471:armwave.c     **** 
 472:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3545              		.loc 1 472 5 view .LVU988
 3546              	@ armwave.c:468: {
 468:armwave.c     ****     Py_buffer buffer;
 3547              		.loc 1 468 1 is_stmt 0 view .LVU989
 3548 0f6c 10402DE9 		push	{r4, lr}	@
 3549              		.cfi_def_cfa_offset 8
 3550              		.cfi_offset 4, -8
 3551              		.cfi_offset 14, -4
 3552 0f70 0040A0E1 		mov	r4, r0	@ buf_obj, buf_obj
 3553 0f74 30D04DE2 		sub	sp, sp, #48	@,,
 3554              		.cfi_def_cfa_offset 56
 3555              	@ armwave.c:472:     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3556              		.loc 1 472 5 view .LVU990
 3557 0f78 78009FE5 		ldr	r0, .L234	@,
 3558              	.LVL277:
 3559              		.loc 1 472 5 view .LVU991
 3560 0f7c FEFFFFEB 		bl	puts		@
 3561              	.LVL278:
 473:armwave.c     **** 
 474:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3562              		.loc 1 474 5 is_stmt 1 view .LVU992
 3563              	@ armwave.c:474:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3564              		.loc 1 474 11 is_stmt 0 view .LVU993
 3565 0f80 0400A0E1 		mov	r0, r4	@, buf_obj
 3566 0f84 04108DE2 		add	r1, sp, #4	@ tmp134,,
 3567 0f88 0120A0E3 		mov	r2, #1	@,
 3568 0f8c FEFFFFEB 		bl	PyObject_GetBuffer		@
 3569              	.LVL279:
 475:armwave.c     **** 
 476:armwave.c     ****     if(ret != 0) {
 3570              		.loc 1 476 5 is_stmt 1 view .LVU994
 3571              	@ armwave.c:476:     if(ret != 0) {
 3572              		.loc 1 476 7 is_stmt 0 view .LVU995
 3573 0f90 000050E3 		cmp	r0, #0	@,
 3574 0f94 0E00001A 		bne	.L233		@,
 477:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 478:armwave.c     ****         Py_RETURN_FALSE;
 479:armwave.c     ****     }
 480:armwave.c     **** 
 481:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 482:armwave.c     **** 
 483:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3575              		.loc 1 483 5 is_stmt 1 view .LVU996
 3576 0f98 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3577              	.LVL280:
 3578              		.loc 1 483 5 is_stmt 0 view .LVU997
 3579 0f9c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3580              	.LVL281:
 484:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 3581              		.loc 1 484 5 is_stmt 1 view .LVU998
 3582 0fa0 54009FE5 		ldr	r0, .L234+4	@,
 3583 0fa4 FEFFFFEB 		bl	puts		@
 3584              	.LVL282:
 485:armwave.c     **** 
 486:armwave.c     ****     PyBuffer_Release(&buffer);
 3585              		.loc 1 486 5 view .LVU999
 3586 0fa8 04008DE2 		add	r0, sp, #4	@ tmp135,,
 3587 0fac FEFFFFEB 		bl	PyBuffer_Release		@
 3588              	.LVL283:
 487:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 3589              		.loc 1 487 5 view .LVU1000
 3590 0fb0 48009FE5 		ldr	r0, .L234+8	@,
 3591 0fb4 FEFFFFEB 		bl	puts		@
 3592              	.LVL284:
 488:armwave.c     **** 
 489:armwave.c     ****     Py_RETURN_TRUE;
 3593              		.loc 1 489 5 view .LVU1001
 3594              	.LBB53:
 3595              	.LBI53:
 3596              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3597              		.loc 2 456 20 view .LVU1002
 3598              	.LBB54:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3599              		.loc 2 458 21 view .LVU1003
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3600              		.loc 2 459 5 view .LVU1004
 3601              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3602              		.loc 2 459 18 is_stmt 0 view .LVU1005
 3603 0fb8 44309FE5 		ldr	r3, .L234+12	@ tmp129,
 3604              	.LBE54:
 3605              	.LBE53:
 3606              	@ armwave.c:489:     Py_RETURN_TRUE;
 3607              		.loc 1 489 5 view .LVU1006
 3608 0fbc 0300A0E1 		mov	r0, r3	@ <retval>, tmp129
 3609              	.LBB56:
 3610              	.LBB55:
 3611              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3612              		.loc 2 459 18 view .LVU1007
 3613 0fc0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3614 0fc4 012082E2 		add	r2, r2, #1	@ tmp131, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3615 0fc8 002083E5 		str	r2, [r3]	@ tmp131,
 3616              	.LBE55:
 3617              	.LBE56:
 3618              	@ armwave.c:490: }
 490:armwave.c     **** }
 3619              		.loc 1 490 1 view .LVU1008
 3620 0fcc 30D08DE2 		add	sp, sp, #48	@,,
 3621              		.cfi_remember_state
 3622              		.cfi_def_cfa_offset 8
 3623              		@ sp needed	@
 3624 0fd0 1080BDE8 		pop	{r4, pc}	@
 3625              	.LVL285:
 3626              	.L233:
 3627              		.cfi_restore_state
 477:armwave.c     ****         Py_RETURN_FALSE;
 3628              		.loc 1 477 9 is_stmt 1 view .LVU1009
 3629 0fd4 2C009FE5 		ldr	r0, .L234+16	@,
 3630              	.LVL286:
 477:armwave.c     ****         Py_RETURN_FALSE;
 3631              		.loc 1 477 9 is_stmt 0 view .LVU1010
 3632 0fd8 FEFFFFEB 		bl	puts		@
 3633              	.LVL287:
 478:armwave.c     ****     }
 3634              		.loc 1 478 9 is_stmt 1 view .LVU1011
 3635              	.LBB57:
 3636              	.LBI57:
 456:/usr/local/include/python3.8/object.h **** {
 3637              		.loc 2 456 20 view .LVU1012
 3638              	.LBB58:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3639              		.loc 2 458 21 view .LVU1013
 3640              		.loc 2 459 5 view .LVU1014
 3641              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3642              		.loc 2 459 18 is_stmt 0 view .LVU1015
 3643 0fdc 28309FE5 		ldr	r3, .L234+20	@ tmp121,
 3644              	.LBE58:
 3645              	.LBE57:
 3646              	@ armwave.c:478:         Py_RETURN_FALSE;
 478:armwave.c     ****     }
 3647              		.loc 1 478 9 view .LVU1016
 3648 0fe0 0300A0E1 		mov	r0, r3	@ <retval>, tmp121
 3649              	.LBB60:
 3650              	.LBB59:
 3651              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3652              		.loc 2 459 18 view .LVU1017
 3653 0fe4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3654 0fe8 012082E2 		add	r2, r2, #1	@ tmp123, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3655 0fec 002083E5 		str	r2, [r3]	@ tmp123,
 3656              	.LBE59:
 3657              	.LBE60:
 3658              	@ armwave.c:490: }
 3659              		.loc 1 490 1 view .LVU1018
 3660 0ff0 30D08DE2 		add	sp, sp, #48	@,,
 3661              		.cfi_def_cfa_offset 8
 3662              		@ sp needed	@
 3663 0ff4 1080BDE8 		pop	{r4, pc}	@
 3664              	.LVL288:
 3665              	.L235:
 3666              		.loc 1 490 1 view .LVU1019
 3667              		.align	2
 3668              	.L234:
 3669 0ff8 E8010000 		.word	.LC19
 3670 0ffc 68020000 		.word	.LC21
 3671 1000 9C020000 		.word	.LC22
 3672 1004 00000000 		.word	_Py_TrueStruct
 3673 1008 14020000 		.word	.LC20
 3674 100c 00000000 		.word	_Py_FalseStruct
 3675              		.cfi_endproc
 3676              	.LFE75:
 3678              		.align	2
 3679              		.global	armwave_test_create_am_sine
 3680              		.syntax unified
 3681              		.arm
 3682              		.fpu vfp
 3684              	armwave_test_create_am_sine:
 3685              	.LVL289:
 3686              	.LFB76:
 491:armwave.c     **** 
 492:armwave.c     **** /*
 493:armwave.c     ****  * Make a test AM waveform for render tests.
 494:armwave.c     ****  *
 495:armwave.c     ****  * @param   mod                 modulation depth
 496:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 497:armwave.c     ****  */
 498:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 499:armwave.c     **** {
 3687              		.loc 1 499 1 is_stmt 1 view -0
 3688              		.cfi_startproc
 3689              		@ args = 0, pretend = 0, frame = 8
 3690              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     float v, noise, xnoise, mod_val;
 3691              		.loc 1 500 5 view .LVU1021
 501:armwave.c     ****     int w, x;
 3692              		.loc 1 501 5 view .LVU1022
 502:armwave.c     **** 
 503:armwave.c     ****     armwave_test_buffer_alloc();
 3693              		.loc 1 503 5 view .LVU1023
 3694              	.LBB63:
 3695              	.LBI63:
 448:armwave.c     **** {
 3696              		.loc 1 448 6 view .LVU1024
 3697              	.LBB64:
 450:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3698              		.loc 1 450 5 view .LVU1025
 3699              	.LBE64:
 3700              	.LBE63:
 3701              	@ armwave.c:499: {
 499:armwave.c     ****     float v, noise, xnoise, mod_val;
 3702              		.loc 1 499 1 is_stmt 0 view .LVU1026
 3703 1010 70402DE9 		push	{r4, r5, r6, lr}	@
 3704              		.cfi_def_cfa_offset 16
 3705              		.cfi_offset 4, -16
 3706              		.cfi_offset 5, -12
 3707              		.cfi_offset 6, -8
 3708              		.cfi_offset 14, -4
 3709 1014 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3710              		.cfi_def_cfa_offset 72
 3711              		.cfi_offset 80, -72
 3712              		.cfi_offset 81, -68
 3713              		.cfi_offset 82, -64
 3714              		.cfi_offset 83, -60
 3715              		.cfi_offset 84, -56
 3716              		.cfi_offset 85, -52
 3717              		.cfi_offset 86, -48
 3718              		.cfi_offset 87, -44
 3719              		.cfi_offset 88, -40
 3720              		.cfi_offset 89, -36
 3721              		.cfi_offset 90, -32
 3722              		.cfi_offset 91, -28
 3723              		.cfi_offset 92, -24
 3724              		.cfi_offset 93, -20
 3725              	.LBB69:
 3726              	.LBB65:
 3727              	@ armwave.c:450:     if(g_armwave_state.test_wave_buffer != NULL) {
 450:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3728              		.loc 1 450 23 view .LVU1027
 3729 1018 B8519FE5 		ldr	r5, .L267+32	@ tmp232,
 3730              	.LBE65:
 3731              	.LBE69:
 3732              	@ armwave.c:499: {
 499:armwave.c     ****     float v, noise, xnoise, mod_val;
 3733              		.loc 1 499 1 view .LVU1028
 3734 101c 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3735 1020 60BAB0EE 		vmov.f32	s22, s1	@ noise_fraction, noise_fraction
 3736              	.LBB70:
 3737              	.LBB66:
 3738              	@ armwave.c:450:     if(g_armwave_state.test_wave_buffer != NULL) {
 450:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3739              		.loc 1 450 23 view .LVU1029
 3740 1024 180095E5 		ldr	r0, [r5, #24]	@ _63, g_armwave_state.test_wave_buffer
 3741              	.LBE66:
 3742              	.LBE70:
 3743              	@ armwave.c:499: {
 499:armwave.c     ****     float v, noise, xnoise, mod_val;
 3744              		.loc 1 499 1 view .LVU1030
 3745 1028 08D04DE2 		sub	sp, sp, #8	@,,
 3746              		.cfi_def_cfa_offset 80
 3747              	.LBB71:
 3748              	.LBB67:
 3749              	@ armwave.c:450:     if(g_armwave_state.test_wave_buffer != NULL) {
 450:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3750              		.loc 1 450 7 view .LVU1031
 3751 102c 000050E3 		cmp	r0, #0	@ _63,
 3752 1030 0000000A 		beq	.L237		@,
 451:armwave.c     ****     }
 3753              		.loc 1 451 9 is_stmt 1 view .LVU1032
 3754 1034 FEFFFFEB 		bl	free		@
 3755              	.LVL290:
 3756              	.L237:
 454:armwave.c     **** 
 3757              		.loc 1 454 5 view .LVU1033
 3758 1038 302095E5 		ldr	r2, [r5, #48]	@, g_armwave_state.waves_max
 3759 103c 401095E5 		ldr	r1, [r5, #64]	@, g_armwave_state.wave_length
 3760 1040 94019FE5 		ldr	r0, .L267+36	@,
 3761 1044 FEFFFFEB 		bl	printf		@
 3762              	.LVL291:
 456:armwave.c     **** 
 3763              		.loc 1 456 5 view .LVU1034
 3764              	@ armwave.c:456:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 456:armwave.c     **** 
 3765              		.loc 1 456 40 is_stmt 0 view .LVU1035
 3766 1048 403095E5 		ldr	r3, [r5, #64]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3767 104c 304095E5 		ldr	r4, [r5, #48]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3768 1050 0110A0E3 		mov	r1, #1	@,
 3769 1054 940304E0 		mul	r4, r4, r3	@ _68, g_armwave_state.waves_max, g_armwave_state.wave_length
 3770 1058 0400A0E1 		mov	r0, r4	@, _68
 3771 105c FEFFFFEB 		bl	calloc		@
 3772              	.LVL292:
 3773              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer == NULL) {
 458:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3774              		.loc 1 458 7 view .LVU1036
 3775 1060 000050E3 		cmp	r0, #0	@ tmp177,
 3776              	@ armwave.c:456:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 456:armwave.c     **** 
 3777              		.loc 1 456 38 view .LVU1037
 3778 1064 180085E5 		str	r0, [r5, #24]	@ tmp177, g_armwave_state.test_wave_buffer
 458:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3779              		.loc 1 458 5 is_stmt 1 view .LVU1038
 3780              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer == NULL) {
 458:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3781              		.loc 1 458 7 is_stmt 0 view .LVU1039
 3782 1068 4E00000A 		beq	.L266		@,
 3783              	.L238:
 3784              	.LVL293:
 458:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3785              		.loc 1 458 7 view .LVU1040
 3786              	.LBE67:
 3787              	.LBE71:
 3788              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 504:armwave.c     **** 
 505:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3789              		.loc 1 505 35 discriminator 1 view .LVU1041
 3790 106c 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_80, g_armwave_state.waves
 3791              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 3792              		.loc 1 505 5 discriminator 1 view .LVU1042
 3793 1070 000052E3 		cmp	r2, #0	@ prephitmp_80,
 3794 1074 4800000A 		beq	.L236		@,
 3795              	@ armwave.c:506:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 506:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3796              		.loc 1 506 37 view .LVU1043
 3797 1078 4EDADFED 		vldr.32	s27, .L267	@ tmp184,
 3798              	@ armwave.c:506:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3799              		.loc 1 506 17 view .LVU1044
 3800 107c 4EDA9FED 		vldr.32	s26, .L267+4	@ tmp186,
 3801              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 507:armwave.c     ****         //mod = 1.0f;
 508:armwave.c     **** 
 509:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 510:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 511:armwave.c     ****             noise *= noise;
 512:armwave.c     ****             noise *= noise;
 513:armwave.c     ****             noise *= noise;
 514:armwave.c     **** 
 515:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 516:armwave.c     ****                 noise = -noise;
 517:armwave.c     **** 
 518:armwave.c     ****             noise += 1.0f;
 519:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 520:armwave.c     **** 
 521:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3802              		.loc 1 521 41 view .LVU1045
 3803 1080 4E8A9FED 		vldr.32	s16, .L267+8	@ tmp234,
 3804              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 3805              		.loc 1 521 29 view .LVU1046
 3806 1084 4EBADFED 		vldr.32	s23, .L267+12	@ tmp235,
 3807              	@ armwave.c:524:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 522:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 523:armwave.c     ****             //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127), 0
 524:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = (uint8_t)MIN(
 3808              		.loc 1 524 87 view .LVU1047
 3809 1088 4ECA9FED 		vldr.32	s24, .L267+16	@ tmp236,
 3810 108c 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_96, g_armwave_state.wave_length
 3811              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 505:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3812              		.loc 1 505 5 view .LVU1048
 3813 1090 0060A0E3 		mov	r6, #0	@ w,
 3814              	.LVL294:
 3815              	.L246:
 506:armwave.c     ****         //mod = 1.0f;
 3816              		.loc 1 506 9 is_stmt 1 view .LVU1049
 3817              	@ armwave.c:506:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 506:armwave.c     ****         //mod = 1.0f;
 3818              		.loc 1 506 28 is_stmt 0 view .LVU1050
 3819 1094 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3820              	@ armwave.c:506:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 506:armwave.c     ****         //mod = 1.0f;
 3821              		.loc 1 506 17 view .LVU1051
 3822 1098 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp186
 3823              	@ armwave.c:509:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 509:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3824              		.loc 1 509 9 view .LVU1052
 3825 109c 000053E3 		cmp	r3, #0	@ prephitmp_96,
 3826              	@ armwave.c:506:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 506:armwave.c     ****         //mod = 1.0f;
 3827              		.loc 1 506 28 view .LVU1053
 3828 10a0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp182, w
 3829              	@ armwave.c:506:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 506:armwave.c     ****         //mod = 1.0f;
 3830              		.loc 1 506 37 view .LVU1054
 3831 10a4 AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp183, tmp182, tmp184
 3832              	@ armwave.c:506:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 506:armwave.c     ****         //mod = 1.0f;
 3833              		.loc 1 506 17 view .LVU1055
 3834 10a8 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp183, mod
 3835              	.LVL295:
 509:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3836              		.loc 1 509 9 is_stmt 1 view .LVU1056
 509:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3837              		.loc 1 509 9 is_stmt 0 view .LVU1057
 3838 10ac 3700000A 		beq	.L240		@,
 3839 10b0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp231, mod_val
 3840              	@ armwave.c:519:             xnoise = (rand() & 0xffff) / 6553500.0f;
 519:armwave.c     **** 
 3841              		.loc 1 519 20 view .LVU1058
 3842 10b4 44AADFED 		vldr.32	s21, .L267+20	@ tmp204,
 3843              	@ armwave.c:524:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3844              		.loc 1 524 96 view .LVU1059
 3845 10b8 44AA9FED 		vldr.32	s20, .L267+24	@ tmp215,
 3846 10bc 448ADFED 		vldr.32	s17, .L267+28	@ tmp216,
 3847              	@ armwave.c:509:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 509:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3848              		.loc 1 509 15 view .LVU1060
 3849 10c0 0040A0E3 		mov	r4, #0	@ x,
 3850              	.LVL296:
 3851              	.L245:
 510:armwave.c     ****             noise *= noise;
 3852              		.loc 1 510 13 is_stmt 1 view .LVU1061
 3853              	@ armwave.c:510:             noise  = ((rand() & 0xffff) * noise_fraction);
 510:armwave.c     ****             noise *= noise;
 3854              		.loc 1 510 24 is_stmt 0 view .LVU1062
 3855 10c4 FEFFFFEB 		bl	rand		@
 3856              	.LVL297:
 3857              	@ armwave.c:510:             noise  = ((rand() & 0xffff) * noise_fraction);
 510:armwave.c     ****             noise *= noise;
 3858              		.loc 1 510 31 view .LVU1063
 3859 10c8 7000FFE6 		uxth	r0, r0	@ tmp187,
 3860              	@ armwave.c:510:             noise  = ((rand() & 0xffff) * noise_fraction);
 510:armwave.c     ****             noise *= noise;
 3861              		.loc 1 510 41 view .LVU1064
 3862 10cc 900A07EE 		vmov	s15, r0	@ int	@ tmp187, tmp187
 3863 10d0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp189, tmp187
 3864              	@ armwave.c:510:             noise  = ((rand() & 0xffff) * noise_fraction);
 510:armwave.c     ****             noise *= noise;
 3865              		.loc 1 510 20 view .LVU1065
 3866 10d4 8B7A67EE 		vmul.f32	s15, s15, s22	@ noise, tmp189, noise_fraction
 3867              	.LVL298:
 511:armwave.c     ****             noise *= noise;
 3868              		.loc 1 511 13 is_stmt 1 view .LVU1066
 3869              	@ armwave.c:511:             noise *= noise;
 511:armwave.c     ****             noise *= noise;
 3870              		.loc 1 511 19 is_stmt 0 view .LVU1067
 3871 10d8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3872              	.LVL299:
 512:armwave.c     ****             noise *= noise;
 3873              		.loc 1 512 13 is_stmt 1 view .LVU1068
 3874              	@ armwave.c:512:             noise *= noise;
 512:armwave.c     ****             noise *= noise;
 3875              		.loc 1 512 19 is_stmt 0 view .LVU1069
 3876 10dc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3877              	.LVL300:
 513:armwave.c     **** 
 3878              		.loc 1 513 13 is_stmt 1 view .LVU1070
 3879              	@ armwave.c:513:             noise *= noise;
 513:armwave.c     **** 
 3880              		.loc 1 513 19 is_stmt 0 view .LVU1071
 3881 10e0 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3882              	.LVL301:
 515:armwave.c     ****                 noise = -noise;
 3883              		.loc 1 515 13 is_stmt 1 view .LVU1072
 3884              	@ armwave.c:515:             if((rand() & 0xffff) > 0x7fff)
 515:armwave.c     ****                 noise = -noise;
 3885              		.loc 1 515 17 is_stmt 0 view .LVU1073
 3886 10e4 FEFFFFEB 		bl	rand		@
 3887              	.LVL302:
 516:armwave.c     **** 
 3888              		.loc 1 516 17 is_stmt 1 view .LVU1074
 3889              	@ armwave.c:515:             if((rand() & 0xffff) > 0x7fff)
 515:armwave.c     ****                 noise = -noise;
 3890              		.loc 1 515 15 is_stmt 0 view .LVU1075
 3891 10e8 020910E3 		tst	r0, #32768	@,
 3892              	@ armwave.c:516:                 noise = -noise;
 516:armwave.c     **** 
 3893              		.loc 1 516 23 view .LVU1076
 3894 10ec 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3895              	.LVL303:
 518:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3896              		.loc 1 518 13 is_stmt 1 view .LVU1077
 519:armwave.c     **** 
 3897              		.loc 1 519 13 view .LVU1078
 3898              	@ armwave.c:519:             xnoise = (rand() & 0xffff) / 6553500.0f;
 519:armwave.c     **** 
 3899              		.loc 1 519 23 is_stmt 0 view .LVU1079
 3900 10f0 FEFFFFEB 		bl	rand		@
 3901              	.LVL304:
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3902              		.loc 1 521 13 is_stmt 1 view .LVU1080
 3903              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3904              		.loc 1 521 41 is_stmt 0 view .LVU1081
 3905 10f4 107A95ED 		vldr.32	s14, [r5, #64]	@ int	@ tmp242, g_armwave_state.wave_length
 3906              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3907              		.loc 1 521 29 view .LVU1082
 3908 10f8 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3909              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3910              		.loc 1 521 41 view .LVU1083
 3911 10fc 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp192, tmp242
 3912              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3913              		.loc 1 521 29 view .LVU1084
 3914 1100 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, x
 3915              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3916              		.loc 1 521 41 view .LVU1085
 3917 1104 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp194, tmp234, tmp192
 3918              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3919              		.loc 1 521 29 view .LVU1086
 3920 1108 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp197, tmp196, tmp235
 3921              	@ armwave.c:519:             xnoise = (rand() & 0xffff) / 6553500.0f;
 519:armwave.c     **** 
 3922              		.loc 1 519 30 view .LVU1087
 3923 110c 7000FFE6 		uxth	r0, r0	@ tmp200,
 3924              	.LVL305:
 3925              	@ armwave.c:519:             xnoise = (rand() & 0xffff) / 6553500.0f;
 519:armwave.c     **** 
 3926              		.loc 1 519 40 view .LVU1088
 3927 1110 100A07EE 		vmov	s14, r0	@ int	@ tmp200, tmp200
 3928 1114 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp202, tmp200
 3929              	@ armwave.c:519:             xnoise = (rand() & 0xffff) / 6553500.0f;
 519:armwave.c     **** 
 3930              		.loc 1 519 20 view .LVU1089
 3931 1118 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp202, tmp204
 3932              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3933              		.loc 1 521 73 view .LVU1090
 3934 111c A70A06EE 		vmla.f32	s0, s13, s15	@ tmp205, tmp194, tmp197
 3935              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3936              		.loc 1 521 18 view .LVU1091
 3937 1120 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp205
 3938 1124 FEFFFFEB 		bl	sin		@
 3939              	.LVL306:
 3940              		.loc 1 524 13 is_stmt 1 view .LVU1092
 3941              	@ armwave.c:518:             noise += 1.0f;
 518:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3942              		.loc 1 518 19 is_stmt 0 view .LVU1093
 3943 1128 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp234
 3944              	@ armwave.c:524:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3945              		.loc 1 524 87 view .LVU1094
 3946 112c 0020A0E3 		mov	r2, #0	@ iftmp.20_39,
 3947              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3948              		.loc 1 521 94 view .LVU1095
 3949 1130 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp211, noise
 3950              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3951              		.loc 1 521 83 view .LVU1096
 3952 1134 000B29EE 		vmul.f64	d0, d9, d0	@ tmp208, tmp231,
 3953              	.LVL307:
 3954              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3955              		.loc 1 521 94 view .LVU1097
 3956 1138 077B20EE 		vmul.f64	d7, d0, d7	@ tmp212, tmp208, tmp211
 3957              	@ armwave.c:521:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 521:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3958              		.loc 1 521 15 view .LVU1098
 3959 113c C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp212
 3960              	@ armwave.c:524:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3961              		.loc 1 524 96 view .LVU1099
 3962 1140 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp216
 3963 1144 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp215
 3964 1148 C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3965 114c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3966 1150 050000DA 		ble	.L242		@,
 3967              	@ armwave.c:524:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3968              		.loc 1 524 87 discriminator 1 view .LVU1100
 3969 1154 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp236
 3970 1158 FF20A0E3 		mov	r2, #255	@ iftmp.20_39,
 3971 115c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3972 1160 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp220, _26
 3973 1164 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp220, %sfp
 3974 1168 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.20_39, %sfp
 3975              	.L242:
 3976              	@ armwave.c:524:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3977              		.loc 1 524 53 discriminator 12 view .LVU1101
 3978 116c 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3979              	@ armwave.c:524:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3980              		.loc 1 524 85 discriminator 12 view .LVU1102
 3981 1170 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3982 1174 931623E0 		mla	r3, r3, r6, r1	@ tmp226, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 3983 1178 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.20_39, *_31
 3984              	@ armwave.c:509:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 509:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3985              		.loc 1 509 39 discriminator 12 view .LVU1103
 3986 117c 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_96, g_armwave_state.wave_length
 3987              	@ armwave.c:509:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 509:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3988              		.loc 1 509 54 discriminator 12 view .LVU1104
 3989 1180 014084E2 		add	r4, r4, #1	@ x, x,
 3990              	.LVL308:
 3991              	@ armwave.c:509:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 509:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3992              		.loc 1 509 9 discriminator 12 view .LVU1105
 3993 1184 040053E1 		cmp	r3, r4	@ prephitmp_96, x
 3994 1188 CDFFFF8A 		bhi	.L245		@,
 3995 118c 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_80, g_armwave_state.waves
 3996              	.LVL309:
 3997              	.L240:
 3998              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 505:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3999              		.loc 1 505 44 discriminator 2 view .LVU1106
 4000 1190 016086E2 		add	r6, r6, #1	@ w, w,
 4001              	.LVL310:
 4002              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 505:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 4003              		.loc 1 505 5 discriminator 2 view .LVU1107
 4004 1194 020056E1 		cmp	r6, r2	@ w, prephitmp_80
 4005 1198 BDFFFF3A 		bcc	.L246		@,
 4006              	.LVL311:
 4007              	.L236:
 4008              	@ armwave.c:527: }
 525:armwave.c     ****         }
 526:armwave.c     ****     }
 527:armwave.c     **** }
 4009              		.loc 1 527 1 view .LVU1108
 4010 119c 08D08DE2 		add	sp, sp, #8	@,,
 4011              		.cfi_remember_state
 4012              		.cfi_def_cfa_offset 72
 4013              		@ sp needed	@
 4014 11a0 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 4015              		.cfi_restore 92
 4016              		.cfi_restore 93
 4017              		.cfi_restore 90
 4018              		.cfi_restore 91
 4019              		.cfi_restore 88
 4020              		.cfi_restore 89
 4021              		.cfi_restore 86
 4022              		.cfi_restore 87
 4023              		.cfi_restore 84
 4024              		.cfi_restore 85
 4025              		.cfi_restore 82
 4026              		.cfi_restore 83
 4027              		.cfi_restore 80
 4028              		.cfi_restore 81
 4029              		.cfi_def_cfa_offset 16
 4030              	.LVL312:
 4031              		.loc 1 527 1 view .LVU1109
 4032 11a4 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4033              	.LVL313:
 4034              	.L266:
 4035              		.cfi_restore_state
 4036              	.LBB72:
 4037              	.LBB68:
 459:armwave.c     ****         return;
 4038              		.loc 1 459 9 is_stmt 1 view .LVU1110
 4039 11a8 0410A0E1 		mov	r1, r4	@, _68
 4040 11ac 2C009FE5 		ldr	r0, .L267+40	@,
 4041 11b0 FEFFFFEB 		bl	printf		@
 4042              	.LVL314:
 460:armwave.c     ****     }
 4043              		.loc 1 460 9 view .LVU1111
 4044 11b4 ACFFFFEA 		b	.L238		@
 4045              	.L268:
 4046              		.align	2
 4047              	.L267:
 4048 11b8 0000803C 		.word	1015021568
 4049 11bc 0000003F 		.word	1056964608
 4050 11c0 0000803F 		.word	1065353216
 4051 11c4 C3F5C840 		.word	1086911939
 4052 11c8 00007F43 		.word	1132396544
 4053 11cc 38FFC74A 		.word	1254620984
 4054 11d0 0000FE42 		.word	1123942400
 4055 11d4 00000043 		.word	1124073472
 4056 11d8 00000000 		.word	g_armwave_state
 4057 11dc 6C010000 		.word	.LC17
 4058 11e0 9C010000 		.word	.LC18
 4059              	.LBE68:
 4060              	.LBE72:
 4061              		.cfi_endproc
 4062              	.LFE76:
 4064              		.align	2
 4065              		.global	armwave_test_create_square
 4066              		.syntax unified
 4067              		.arm
 4068              		.fpu vfp
 4070              	armwave_test_create_square:
 4071              	.LVL315:
 4072              	.LFB77:
 528:armwave.c     **** 
 529:armwave.c     **** /*
 530:armwave.c     ****  * Make a test square waveform.
 531:armwave.c     ****  *
 532:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 533:armwave.c     ****  */
 534:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 535:armwave.c     **** {
 4073              		.loc 1 535 1 view -0
 4074              		.cfi_startproc
 4075              		@ args = 0, pretend = 0, frame = 8
 4076              		@ frame_needed = 0, uses_anonymous_args = 0
 536:armwave.c     ****     uint8_t v;
 4077              		.loc 1 536 5 view .LVU1113
 537:armwave.c     ****     float noise, xnoise;
 4078              		.loc 1 537 5 view .LVU1114
 538:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 4079              		.loc 1 538 5 view .LVU1115
 539:armwave.c     ****     int w, x;
 4080              		.loc 1 539 5 view .LVU1116
 540:armwave.c     **** 
 541:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 4081              		.loc 1 541 5 view .LVU1117
 4082              	@ armwave.c:535: {
 535:armwave.c     ****     uint8_t v;
 4083              		.loc 1 535 1 is_stmt 0 view .LVU1118
 4084 11e4 70402DE9 		push	{r4, r5, r6, lr}	@
 4085              		.cfi_def_cfa_offset 16
 4086              		.cfi_offset 4, -16
 4087              		.cfi_offset 5, -12
 4088              		.cfi_offset 6, -8
 4089              		.cfi_offset 14, -4
 4090 11e8 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 4091              		.cfi_def_cfa_offset 56
 4092              		.cfi_offset 80, -56
 4093              		.cfi_offset 81, -52
 4094              		.cfi_offset 82, -48
 4095              		.cfi_offset 83, -44
 4096              		.cfi_offset 84, -40
 4097              		.cfi_offset 85, -36
 4098              		.cfi_offset 86, -32
 4099              		.cfi_offset 87, -28
 4100              		.cfi_offset 88, -24
 4101              		.cfi_offset 89, -20
 4102              	@ armwave.c:541:     for(w = 0; w < g_armwave_state.waves; w++) {
 4103              		.loc 1 541 35 view .LVU1119
 4104 11ec 54519FE5 		ldr	r5, .L297+32	@ tmp179,
 4105 11f0 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_33, g_armwave_state.waves
 4106              	@ armwave.c:535: {
 535:armwave.c     ****     uint8_t v;
 4107              		.loc 1 535 1 view .LVU1120
 4108 11f4 08D04DE2 		sub	sp, sp, #8	@,,
 4109              		.cfi_def_cfa_offset 64
 4110              	@ armwave.c:541:     for(w = 0; w < g_armwave_state.waves; w++) {
 4111              		.loc 1 541 5 view .LVU1121
 4112 11f8 000052E3 		cmp	r2, #0	@ prephitmp_33,
 4113 11fc 4600000A 		beq	.L269		@,
 4114 1200 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 4115              	@ armwave.c:538:     float level = 0.8f, new_level = 0.8f;
 538:armwave.c     ****     int w, x;
 4116              		.loc 1 538 11 view .LVU1122
 4117 1204 47CA9FED 		vldr.32	s24, .L297	@ level,
 4118              	@ armwave.c:553:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 542:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 543:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 544:armwave.c     ****             noise *= noise;
 545:armwave.c     ****             noise *= noise;
 546:armwave.c     ****             noise *= noise;
 547:armwave.c     **** 
 548:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 549:armwave.c     ****                 noise = -noise;
 550:armwave.c     **** 
 551:armwave.c     ****             //noise += 1.0f;
 552:armwave.c     **** 
 553:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 4119              		.loc 1 553 49 view .LVU1123
 4120 1208 47AA9FED 		vldr.32	s20, .L297+4	@ tmp186,
 4121              	@ armwave.c:558:                 new_level = 0.2f;
 554:armwave.c     ****                 new_level = 0.2f;
 555:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 556:armwave.c     ****                 new_level = 0.8f;
 557:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 558:armwave.c     ****                 new_level = 0.2f;
 4122              		.loc 1 558 27 view .LVU1124
 4123 120c 47AADFED 		vldr.32	s21, .L297+8	@ new_level,
 4124              	@ armwave.c:555:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 555:armwave.c     ****                 new_level = 0.8f;
 4125              		.loc 1 555 56 view .LVU1125
 4126 1210 47BADFED 		vldr.32	s23, .L297+12	@ tmp188,
 4127              	@ armwave.c:557:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 557:armwave.c     ****                 new_level = 0.2f;
 4128              		.loc 1 557 56 view .LVU1126
 4129 1214 478ADFED 		vldr.32	s17, .L297+16	@ tmp189,
 4130 1218 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_70, g_armwave_state.wave_length
 4131              	@ armwave.c:541:     for(w = 0; w < g_armwave_state.waves; w++) {
 541:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4132              		.loc 1 541 11 view .LVU1127
 4133 121c 0060A0E3 		mov	r6, #0	@ w,
 4134              	.LVL316:
 4135              	.L271:
 4136              	@ armwave.c:542:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4137              		.loc 1 542 9 view .LVU1128
 4138 1220 000053E3 		cmp	r3, #0	@ prephitmp_70,
 4139 1224 3900000A 		beq	.L278		@,
 4140              	@ armwave.c:556:                 new_level = 0.8f;
 556:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4141              		.loc 1 556 27 view .LVU1129
 4142 1228 3EBA9FED 		vldr.32	s22, .L297	@ new_level,
 4143              	@ armwave.c:563:             level = ((level * 3) + new_level) * 0.25f;
 559:armwave.c     ****             } else {
 560:armwave.c     ****                 new_level = 0.8f;
 561:armwave.c     ****             }
 562:armwave.c     **** 
 563:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 4144              		.loc 1 563 29 view .LVU1130
 4145 122c 429A9FED 		vldr.32	s18, .L297+20	@ tmp161,
 4146              	@ armwave.c:542:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4147              		.loc 1 542 15 view .LVU1131
 4148 1230 0040A0E3 		mov	r4, #0	@ x,
 4149              	.LVL317:
 4150              	.L277:
 543:armwave.c     ****             noise *= noise;
 4151              		.loc 1 543 13 is_stmt 1 view .LVU1132
 4152              	@ armwave.c:543:             noise  = ((rand() & 0xffff) * noise_fraction);
 543:armwave.c     ****             noise *= noise;
 4153              		.loc 1 543 24 is_stmt 0 view .LVU1133
 4154 1234 FEFFFFEB 		bl	rand		@
 4155              	.LVL318:
 4156              	@ armwave.c:543:             noise  = ((rand() & 0xffff) * noise_fraction);
 543:armwave.c     ****             noise *= noise;
 4157              		.loc 1 543 31 view .LVU1134
 4158 1238 7000FFE6 		uxth	r0, r0	@ tmp148,
 4159              	@ armwave.c:543:             noise  = ((rand() & 0xffff) * noise_fraction);
 543:armwave.c     ****             noise *= noise;
 4160              		.loc 1 543 41 view .LVU1135
 4161 123c 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 4162 1240 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 4163              	@ armwave.c:543:             noise  = ((rand() & 0xffff) * noise_fraction);
 543:armwave.c     ****             noise *= noise;
 4164              		.loc 1 543 20 view .LVU1136
 4165 1244 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 4166              	.LVL319:
 544:armwave.c     ****             noise *= noise;
 4167              		.loc 1 544 13 is_stmt 1 view .LVU1137
 4168              	@ armwave.c:544:             noise *= noise;
 544:armwave.c     ****             noise *= noise;
 4169              		.loc 1 544 19 is_stmt 0 view .LVU1138
 4170 1248 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4171              	.LVL320:
 545:armwave.c     ****             noise *= noise;
 4172              		.loc 1 545 13 is_stmt 1 view .LVU1139
 4173              	@ armwave.c:545:             noise *= noise;
 545:armwave.c     ****             noise *= noise;
 4174              		.loc 1 545 19 is_stmt 0 view .LVU1140
 4175 124c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4176              	.LVL321:
 546:armwave.c     **** 
 4177              		.loc 1 546 13 is_stmt 1 view .LVU1141
 4178              	@ armwave.c:546:             noise *= noise;
 546:armwave.c     **** 
 4179              		.loc 1 546 19 is_stmt 0 view .LVU1142
 4180 1250 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 4181              	.LVL322:
 548:armwave.c     ****                 noise = -noise;
 4182              		.loc 1 548 13 is_stmt 1 view .LVU1143
 4183              	@ armwave.c:548:             if((rand() & 0xff) > 0x7f)
 548:armwave.c     ****                 noise = -noise;
 4184              		.loc 1 548 17 is_stmt 0 view .LVU1144
 4185 1254 FEFFFFEB 		bl	rand		@
 4186              	.LVL323:
 4187              	@ armwave.c:553:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 553:armwave.c     ****                 new_level = 0.2f;
 4188              		.loc 1 553 18 view .LVU1145
 4189 1258 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4190 125c E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 4191              	@ armwave.c:553:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 553:armwave.c     ****                 new_level = 0.2f;
 4192              		.loc 1 553 49 view .LVU1146
 4193 1260 107AD5ED 		vldr.32	s15, [r5, #64]	@ int	@ tmp195, g_armwave_state.wave_length
 4194 1264 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp195
 4195 1268 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp186
 4196              	@ armwave.c:553:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 553:armwave.c     ****                 new_level = 0.2f;
 4197              		.loc 1 553 15 view .LVU1147
 4198 126c E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 4199              	@ armwave.c:548:             if((rand() & 0xff) > 0x7f)
 548:armwave.c     ****                 noise = -noise;
 4200              		.loc 1 548 15 view .LVU1148
 4201 1270 800010E3 		tst	r0, #128	@,
 549:armwave.c     **** 
 4202              		.loc 1 549 17 is_stmt 1 view .LVU1149
 4203              	@ armwave.c:549:                 noise = -noise;
 549:armwave.c     **** 
 4204              		.loc 1 549 23 is_stmt 0 view .LVU1150
 4205 1274 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 4206              	.LVL324:
 553:armwave.c     ****                 new_level = 0.2f;
 4207              		.loc 1 553 13 is_stmt 1 view .LVU1151
 4208              	@ armwave.c:553:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 553:armwave.c     ****                 new_level = 0.2f;
 4209              		.loc 1 553 15 is_stmt 0 view .LVU1152
 4210 1278 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4211              	@ armwave.c:558:                 new_level = 0.2f;
 558:armwave.c     ****             } else {
 4212              		.loc 1 558 27 view .LVU1153
 4213 127c 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 4214              	@ armwave.c:553:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 553:armwave.c     ****                 new_level = 0.2f;
 4215              		.loc 1 553 15 view .LVU1154
 4216 1280 090000CA 		bgt	.L273		@,
 555:armwave.c     ****                 new_level = 0.8f;
 4217              		.loc 1 555 20 is_stmt 1 view .LVU1155
 4218              	@ armwave.c:555:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 555:armwave.c     ****                 new_level = 0.8f;
 4219              		.loc 1 555 56 is_stmt 0 view .LVU1156
 4220 1284 AB6A67EE 		vmul.f32	s13, s15, s23	@ tmp156, _8, tmp188
 4221              	@ armwave.c:555:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 555:armwave.c     ****                 new_level = 0.8f;
 4222              		.loc 1 555 22 view .LVU1157
 4223 1288 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 4224 128c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4225              	@ armwave.c:556:                 new_level = 0.8f;
 556:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4226              		.loc 1 556 27 view .LVU1158
 4227 1290 4B7AF0CE 		vmovgt.f32	s15, s22	@ new_level, new_level
 4228              	@ armwave.c:555:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 555:armwave.c     ****                 new_level = 0.8f;
 4229              		.loc 1 555 22 view .LVU1159
 4230 1294 040000CA 		bgt	.L273		@,
 557:armwave.c     ****                 new_level = 0.2f;
 4231              		.loc 1 557 20 is_stmt 1 view .LVU1160
 4232              	@ armwave.c:557:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 557:armwave.c     ****                 new_level = 0.2f;
 4233              		.loc 1 557 56 is_stmt 0 view .LVU1161
 4234 1298 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp189
 4235              	@ armwave.c:556:                 new_level = 0.8f;
 556:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4236              		.loc 1 556 27 view .LVU1162
 4237 129c E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 4238 12a0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4239 12a4 4B7AF0DE 		vmovle.f32	s15, s22	@, new_level, new_level
 4240 12a8 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 4241              	.L273:
 4242              	.LVL325:
 4243              		.loc 1 563 13 is_stmt 1 view .LVU1163
 4244              	@ armwave.c:563:             level = ((level * 3) + new_level) * 0.25f;
 4245              		.loc 1 563 34 is_stmt 0 view .LVU1164
 4246 12ac 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 4247              	.LVL326:
 4248              	@ armwave.c:563:             level = ((level * 3) + new_level) * 0.25f;
 4249              		.loc 1 563 19 view .LVU1165
 4250 12b0 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp189
 4251              	.LVL327:
 564:armwave.c     **** 
 565:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4252              		.loc 1 565 13 is_stmt 1 view .LVU1166
 4253              	@ armwave.c:565:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4254              		.loc 1 565 27 is_stmt 0 view .LVU1167
 4255 12b4 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 4256 12b8 C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 4257 12bc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4258              	@ armwave.c:565:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4259              		.loc 1 565 17 view .LVU1168
 4260 12c0 0020A0D3 		movle	r2, #0	@ iftmp.27_32,
 4261              	@ armwave.c:565:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4262              		.loc 1 565 27 view .LVU1169
 4263 12c4 080000DA 		ble	.L274		@,
 4264              	@ armwave.c:565:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4265              		.loc 1 565 17 discriminator 1 view .LVU1170
 4266 12c8 1C7A9FED 		vldr.32	s14, .L297+24	@ tmp164,
 4267 12cc C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 4268 12d0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4269              	@ armwave.c:565:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4270              		.loc 1 565 60 discriminator 1 view .LVU1171
 4271 12d4 1A7A9F4D 		vldrmi.32	s14, .L297+28	@ tmp166,
 4272              	@ armwave.c:565:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4273              		.loc 1 565 17 discriminator 1 view .LVU1172
 4274 12d8 FF20A053 		movpl	r2, #255	@ iftmp.27_32,
 4275              	@ armwave.c:565:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4276              		.loc 1 565 60 discriminator 1 view .LVU1173
 4277 12dc 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 4278              	@ armwave.c:565:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4279              		.loc 1 565 17 discriminator 1 view .LVU1174
 4280 12e0 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 4281 12e4 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 4282 12e8 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_32, %sfp
 4283              	.L274:
 4284              	.LVL328:
 566:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 4285              		.loc 1 566 13 is_stmt 1 discriminator 12 view .LVU1175
 4286              	@ armwave.c:566:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4287              		.loc 1 566 53 is_stmt 0 discriminator 12 view .LVU1176
 4288 12ec 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4289              	@ armwave.c:566:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4290              		.loc 1 566 85 discriminator 12 view .LVU1177
 4291 12f0 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4292 12f4 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 4293 12f8 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.27_32, *_21
 4294              	@ armwave.c:542:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4295              		.loc 1 542 39 discriminator 12 view .LVU1178
 4296 12fc 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_70, g_armwave_state.wave_length
 4297              	@ armwave.c:542:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4298              		.loc 1 542 54 discriminator 12 view .LVU1179
 4299 1300 014084E2 		add	r4, r4, #1	@ x, x,
 4300              	.LVL329:
 4301              	@ armwave.c:542:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4302              		.loc 1 542 9 discriminator 12 view .LVU1180
 4303 1304 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 4304 1308 C9FFFF8A 		bhi	.L277		@,
 4305 130c 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_33, g_armwave_state.waves
 4306              	.LVL330:
 4307              	.L278:
 4308              	@ armwave.c:541:     for(w = 0; w < g_armwave_state.waves; w++) {
 541:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4309              		.loc 1 541 44 discriminator 2 view .LVU1181
 4310 1310 016086E2 		add	r6, r6, #1	@ w, w,
 4311              	.LVL331:
 4312              	@ armwave.c:541:     for(w = 0; w < g_armwave_state.waves; w++) {
 541:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4313              		.loc 1 541 5 discriminator 2 view .LVU1182
 4314 1314 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 4315 1318 C0FFFF3A 		bcc	.L271		@,
 4316              	.LVL332:
 4317              	.L269:
 4318              	@ armwave.c:569: }
 567:armwave.c     ****         }
 568:armwave.c     ****     }
 569:armwave.c     **** }
 4319              		.loc 1 569 1 view .LVU1183
 4320 131c 08D08DE2 		add	sp, sp, #8	@,,
 4321              		.cfi_def_cfa_offset 56
 4322              		@ sp needed	@
 4323 1320 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 4324              		.cfi_restore 88
 4325              		.cfi_restore 89
 4326              		.cfi_restore 86
 4327              		.cfi_restore 87
 4328              		.cfi_restore 84
 4329              		.cfi_restore 85
 4330              		.cfi_restore 82
 4331              		.cfi_restore 83
 4332              		.cfi_restore 80
 4333              		.cfi_restore 81
 4334              		.cfi_def_cfa_offset 16
 4335 1324 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4336              	.L298:
 4337              		.align	2
 4338              	.L297:
 4339 1328 CDCC4C3F 		.word	1061997773
 4340 132c 0000403F 		.word	1061158912
 4341 1330 CDCC4C3E 		.word	1045220557
 4342 1334 0000003F 		.word	1056964608
 4343 1338 0000803E 		.word	1048576000
 4344 133c 00004040 		.word	1077936128
 4345 1340 0000803F 		.word	1065353216
 4346 1344 00007F43 		.word	1132396544
 4347 1348 00000000 		.word	g_armwave_state
 4348              		.cfi_endproc
 4349              	.LFE77:
 4351              		.align	2
 4352              		.global	armwave_cleanup
 4353              		.syntax unified
 4354              		.arm
 4355              		.fpu vfp
 4357              	armwave_cleanup:
 4358              	.LFB78:
 570:armwave.c     **** 
 571:armwave.c     **** /*
 572:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 573:armwave.c     ****  */
 574:armwave.c     **** void armwave_cleanup()
 575:armwave.c     **** {
 4359              		.loc 1 575 1 is_stmt 1 view -0
 4360              		.cfi_startproc
 4361              		@ args = 0, pretend = 0, frame = 0
 4362              		@ frame_needed = 0, uses_anonymous_args = 0
 576:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4363              		.loc 1 576 5 view .LVU1185
 4364              	@ armwave.c:575: {
 575:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4365              		.loc 1 575 1 is_stmt 0 view .LVU1186
 4366 134c 10402DE9 		push	{r4, lr}	@
 4367              		.cfi_def_cfa_offset 8
 4368              		.cfi_offset 4, -8
 4369              		.cfi_offset 14, -4
 4370              	@ armwave.c:576:     free(g_armwave_state.out_pixbuf);
 4371              		.loc 1 576 25 view .LVU1187
 4372 1350 34409FE5 		ldr	r4, .L301	@ tmp114,
 4373              	@ armwave.c:576:     free(g_armwave_state.out_pixbuf);
 4374              		.loc 1 576 5 view .LVU1188
 4375 1354 5C0094E5 		ldr	r0, [r4, #92]	@, g_armwave_state.out_pixbuf
 4376 1358 FEFFFFEB 		bl	free		@
 4377              	.LVL333:
 577:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4378              		.loc 1 577 5 is_stmt 1 view .LVU1189
 4379 135c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4380 1360 FEFFFFEB 		bl	free		@
 4381              	.LVL334:
 578:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4382              		.loc 1 578 5 view .LVU1190
 4383 1364 780094E5 		ldr	r0, [r4, #120]	@, g_armwave_state.xcoord_to_xpixel
 4384 1368 FEFFFFEB 		bl	free		@
 4385              	.LVL335:
 579:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4386              		.loc 1 579 5 view .LVU1191
 4387 136c 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4388 1370 FEFFFFEB 		bl	free		@
 4389              	.LVL336:
 580:armwave.c     **** 
 581:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4390              		.loc 1 581 5 view .LVU1192
 4391              	@ armwave.c:581:     g_armwave_state.out_pixbuf = NULL;
 4392              		.loc 1 581 32 is_stmt 0 view .LVU1193
 4393 1374 0030A0E3 		mov	r3, #0	@ tmp123,
 4394 1378 5C3084E5 		str	r3, [r4, #92]	@ tmp123, g_armwave_state.out_pixbuf
 582:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4395              		.loc 1 582 5 is_stmt 1 view .LVU1194
 4396              	@ armwave.c:582:     g_armwave_state.ch1_buffer = NULL;
 4397              		.loc 1 582 32 is_stmt 0 view .LVU1195
 4398 137c 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 583:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4399              		.loc 1 583 5 is_stmt 1 view .LVU1196
 4400              	@ armwave.c:583:     g_armwave_state.xcoord_to_xpixel = NULL;
 4401              		.loc 1 583 38 is_stmt 0 view .LVU1197
 4402 1380 783084E5 		str	r3, [r4, #120]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 584:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4403              		.loc 1 584 5 is_stmt 1 view .LVU1198
 4404              	@ armwave.c:584:     g_armwave_state.test_wave_buffer = NULL;
 4405              		.loc 1 584 38 is_stmt 0 view .LVU1199
 4406 1384 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4407              	@ armwave.c:585: }
 585:armwave.c     **** }
 4408              		.loc 1 585 1 view .LVU1200
 4409 1388 1080BDE8 		pop	{r4, pc}	@
 4410              	.L302:
 4411              		.align	2
 4412              	.L301:
 4413 138c 00000000 		.word	g_armwave_state
 4414              		.cfi_endproc
 4415              	.LFE78:
 4417              		.comm	gamma_table,256,4
 4418              		.comm	g_armwave_state,124,4
 4419              		.section	.rodata
 4420              		.align	2
 4421              		.set	.LANCHOR0,. + 0
 4424              	__PRETTY_FUNCTION__.17018:
 4425 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4425      6176655F 
 4425      66696C6C 
 4425      5F706978 
 4425      6275665F 
 4428              	__PRETTY_FUNCTION__.17051:
 4429 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4429      6176655F 
 4429      66696C6C 
 4429      5F706978 
 4429      6275665F 
 4430 0033 00       		.space	1
 4433              	__PRETTY_FUNCTION__.17073:
 4434 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4434      6176655F 
 4434      73657475 
 4434      705F7265 
 4434      6E646572 
 4435 0049 000000   		.space	3
 4438              	__PRETTY_FUNCTION__.17080:
 4439 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4439      6176655F 
 4439      7365745F 
 4439      77617665 
 4439      5F706F69 
 4440 0065 000000   		.space	3
 4443              	__PRETTY_FUNCTION__.17086:
 4444 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4444      6176655F 
 4444      7365745F 
 4444      77617665 
 4444      5F706F69 
 4445              		.section	.rodata.str1.4,"aMS",%progbits,1
 4446              		.align	2
 4447              	.LC0:
 4448 0000 76302E30 		.ascii	"v0.0.1\000"
 4448      2E3100
 4449 0007 00       		.space	1
 4450              	.LC1:
 4451 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4451      61766520 
 4451      76657273 
 4451      696F6E3A 
 4451      2025730A 
 4452 001d 000000   		.space	3
 4453              	.LC2:
 4454 0020 61726D77 		.ascii	"armwave.c\000"
 4454      6176652E 
 4454      6300
 4455 002a 0000     		.space	2
 4456              	.LC3:
 4457 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4457      62756666 
 4457      65722021 
 4457      3D204E55 
 4457      4C4C00
 4458 003f 00       		.space	1
 4459              	.LC4:
 4460 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4460      20653D25 
 4460      6420773D 
 4460      25642077 
 4460      733D2564 
 4461              	.LC5:
 4462 006c 73746172 		.ascii	"start_point < end_point\000"
 4462      745F706F 
 4462      696E7420 
 4462      3C20656E 
 4462      645F706F 
 4463              	.LC6:
 4464 0084 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4464      7566665F 
 4464      73697A65 
 4464      3D25640A 
 4464      00
 4465 0095 000000   		.space	3
 4466              	.LC7:
 4467 0098 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4467      6D776176 
 4467      655F7374 
 4467      6174652E 
 4467      6368315F 
 4468 00bb 00       		.space	1
 4469              	.LC8:
 4470 00bc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4470      6D776176 
 4470      655F7374 
 4470      6174652E 
 4470      78636F6F 
 4471 00e5 000000   		.space	3
 4472              	.LC9:
 4473 00e8 77617665 		.ascii	"wave_buffer != NULL\000"
 4473      5F627566 
 4473      66657220 
 4473      213D204E 
 4473      554C4C00 
 4474              	.LC10:
 4475 00fc 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4475      5F627566 
 4475      6665725F 
 4475      70747220 
 4475      213D2030 
 4476 0111 000000   		.space	3
 4477              	.LC11:
 4478 0114 776200   		.ascii	"wb\000"
 4479 0117 00       		.space	1
 4480              	.LC12:
 4481 0118 50330A00 		.ascii	"P3\012\000"
 4482              	.LC13:
 4483 011c 25642025 		.ascii	"%d %d\012\000"
 4483      640A00
 4484 0123 00       		.space	1
 4485              	.LC14:
 4486 0124 3235350A 		.ascii	"255\012\000"
 4486      00
 4487 0129 000000   		.space	3
 4488              	.LC15:
 4489 012c 25336420 		.ascii	"%3d %3d %3d\012\000"
 4489      25336420 
 4489      2533640A 
 4489      00
 4490 0139 000000   		.space	3
 4491              	.LC16:
 4492 013c 61726D77 		.ascii	"armwave_test_generate: slice %d (y=%d, h=%d)\012\000"
 4492      6176655F 
 4492      74657374 
 4492      5F67656E 
 4492      65726174 
 4493 016a 0000     		.space	2
 4494              	.LC17:
 4495 016c 61726D77 		.ascii	"armwave_test_buffer_alloc: length=%d max=%d\012\000"
 4495      6176655F 
 4495      74657374 
 4495      5F627566 
 4495      6665725F 
 4496 0199 000000   		.space	3
 4497              	.LC18:
 4498 019c 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 4498      6176655F 
 4498      74657374 
 4498      5F627566 
 4498      6665725F 
 4499 01cf 77617665 		.ascii	"wave buffer (%d bytes)\012\000"
 4499      20627566 
 4499      66657220 
 4499      28256420 
 4499      62797465 
 4500 01e7 00       		.space	1
 4501              	.LC19:
 4502 01e8 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: start\000"
 4502      6176655F 
 4502      66696C6C 
 4502      5F706978 
 4502      6275665F 
 4503 0211 000000   		.space	3
 4504              	.LC20:
 4505 0214 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4505      6176655F 
 4505      66696C6C 
 4505      5F706978 
 4505      6275665F 
 4506 0247 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4506      20666169 
 4506      6C65642C 
 4506      20726574 
 4506      75726E69 
 4507 0266 0000     		.space	2
 4508              	.LC21:
 4509 0268 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: buffer fill done"
 4509      6176655F 
 4509      66696C6C 
 4509      5F706978 
 4509      6275665F 
 4510 029b 00       		.ascii	"\000"
 4511              	.LC22:
 4512 029c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: done\000"
 4512      6176655F 
 4512      66696C6C 
 4512      5F706978 
 4512      6275665F 
 4513              		.text
 4514              	.Letext0:
 4515              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4516              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4517              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4518              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4519              		.file 7 "/usr/include/stdio.h"
 4520              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4521              		.file 9 "/usr/include/errno.h"
 4522              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4523              		.file 11 "/usr/include/unistd.h"
 4524              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4525              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4526              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4527              		.file 15 "/usr/include/math.h"
 4528              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4529              		.file 17 "/usr/include/time.h"
 4530              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4531              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4532              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4533              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4534              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4535              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4536              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4537              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4538              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4539              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4540              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4541              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4542              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4543              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4544              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4545              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4546              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4547              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4548              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4549              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4550              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4551              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4552              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4553              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4554              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4555              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4556              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4557              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4558              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4559              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4560              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4561              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4562              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4563              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4564              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4565              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4566              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4567              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4568              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4569              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4570              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4571              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4572              		.file 60 "/usr/local/include/python3.8/context.h"
 4573              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4574              		.file 62 "/usr/local/include/python3.8/code.h"
 4575              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4576              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4577              		.file 65 "/usr/local/include/python3.8/import.h"
 4578              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4579              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4580              		.file 68 "armwave.h"
 4581              		.file 69 "/usr/include/stdlib.h"
 4582              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4583              		.file 71 "/usr/include/assert.h"
 4584              		.file 72 "<built-in>"
 4585              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
