   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_NWAVES                 64
  25:armwave.c     **** #define TEST_WAVE_SIZE              2048
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t *test_wave_buffer; //[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.46,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.46,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.46,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.46
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.46, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     ****     
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 249              		.loc 1 81 40 view .LVU32
 250 00a0 D0409FE5 		ldr	r4, .L23	@ tmp242,
 251              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  82:armwave.c     **** 
  83:armwave.c     ****     // roll through each waveform
  84:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 252              		.loc 1 84 5 view .LVU33
 253 00a4 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 254              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 255              		.loc 1 81 63 view .LVU34
 256 00a8 2C5094E5 		ldr	r5, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 257              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 84 5 view .LVU35
 259 00ac 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 261              		.loc 1 81 40 view .LVU36
 262 00b0 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 264              		.loc 1 81 63 view .LVU37
 265 00b4 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 266              	.LVL7:
 267              		.loc 1 84 5 is_stmt 1 view .LVU38
 268              		.loc 1 84 5 is_stmt 0 view .LVU39
 269 00b8 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 270 00bc 000051E3 		cmp	r1, #0	@ height,
 271 00c0 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 272 00c4 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 273              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 84 11 view .LVU40
 275 00c8 0070A0E3 		mov	r7, #0	@ w,
 276              	.LVL8:
 277              	.L15:
  85:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 85 9 is_stmt 1 view .LVU41
  86:armwave.c     **** 
  87:armwave.c     ****         // roll through y and render the slice into the out buffer
  88:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  89:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 279              		.loc 1 89 9 view .LVU42
 280              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 281              		.loc 1 85 64 is_stmt 0 view .LVU43
 282 00cc 200094E5 		ldr	r0, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 283 00d0 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 284              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
 285              		.loc 1 89 16 view .LVU44
 286 00d4 0020A0E3 		mov	r2, #0	@ yy,
 287 00d8 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 288 00dc 006086E0 		add	r6, r6, r0	@ ivtmp.53, g_armwave_state.wave_buffer, tmp193
 289              	.LVL9:
 290              	.L14:
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 291              		.loc 1 90 13 is_stmt 1 view .LVU45
 292              	@ armwave.c:90:             word = *(uint32_t*)(wave_base + yy);
 293              		.loc 1 90 18 is_stmt 0 view .LVU46
 294 00e0 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 295              	.LVL10:
  91:armwave.c     **** 
  92:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 296              		.loc 1 92 13 is_stmt 1 view .LVU47
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  94:armwave.c     ****                 scale_value = (word & 0xff);
 297              		.loc 1 94 17 view .LVU48
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 298              		.loc 1 95 17 view .LVU49
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 299              		.loc 1 96 17 view .LVU50
 300              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 95 63 is_stmt 0 view .LVU51
 302 00e4 2C9094E5 		ldr	r9, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 303 00e8 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 304              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 96 47 view .LVU52
 306 00ec 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 307 00f0 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 308              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****                 word >>= 8;
 309              		.loc 1 97 22 view .LVU53
 310 00f4 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 311 00f8 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 312              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 313              		.loc 1 96 47 view .LVU54
 314 00fc 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 315 0100 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 316 0104 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 317 0108 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 318              	.LVL11:
 319              		.loc 1 97 17 is_stmt 1 view .LVU55
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 320              		.loc 1 94 17 view .LVU56
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 95 17 view .LVU57
  96:armwave.c     ****                 word >>= 8;
 322              		.loc 1 96 17 view .LVU58
 323              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 95 63 is_stmt 0 view .LVU59
 325 010c 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 326              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 327              		.loc 1 96 47 view .LVU60
 328 0110 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 329 0114 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 330              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 95 63 view .LVU61
 332 0118 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 333 011c 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 334              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 335              		.loc 1 96 47 view .LVU62
 336 0120 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 337 0124 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 338              	.LVL12:
 339              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 340              		.loc 1 89 37 view .LVU63
 341 0128 042082E2 		add	r2, r2, #4	@ yy, yy,
 342              	.LVL13:
 343              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 344              		.loc 1 96 47 view .LVU64
 345 012c 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 346 0130 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 347              	.LVL14:
 348              		.loc 1 97 17 is_stmt 1 view .LVU65
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 349              		.loc 1 94 17 view .LVU66
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 350              		.loc 1 95 17 view .LVU67
  96:armwave.c     ****                 word >>= 8;
 351              		.loc 1 96 17 view .LVU68
 352              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 95 63 is_stmt 0 view .LVU69
 354 0134 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 355              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 356              		.loc 1 89 9 view .LVU70
 357 0138 020051E1 		cmp	r1, r2	@ height, yy
 358              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 359              		.loc 1 96 47 view .LVU71
 360 013c 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 361 0140 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 362 0144 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 363 0148 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 364              		.loc 1 97 17 is_stmt 1 view .LVU72
 365              	.LVL15:
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 366              		.loc 1 94 17 view .LVU73
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 367              		.loc 1 95 17 view .LVU74
  96:armwave.c     ****                 word >>= 8;
 368              		.loc 1 96 17 view .LVU75
 369              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 95 63 is_stmt 0 view .LVU76
 371 014c 2CC094E5 		ldr	ip, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 372              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 373              		.loc 1 96 47 view .LVU77
 374 0150 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 375 0154 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 376 0158 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 377 015c 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 378              		.loc 1 97 17 is_stmt 1 view .LVU78
 379              	.LVL16:
 380              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 381              		.loc 1 89 9 is_stmt 0 view .LVU79
 382 0160 DEFFFF8A 		bhi	.L14		@,
 383              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 384              		.loc 1 84 5 view .LVU80
 385 0164 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 386              	.LVL17:
 387              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 388              		.loc 1 84 44 view .LVU81
 389 0168 017087E2 		add	r7, r7, #1	@ w, w,
 390              	.LVL18:
 391              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 392              		.loc 1 84 5 view .LVU82
 393 016c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 394 0170 D5FFFF3A 		bcc	.L15		@,
 395 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 396              	.L24:
 397              		.align	2
 398              	.L23:
 399 0178 00000000 		.word	g_armwave_state
 400              		.cfi_endproc
 401              	.LFE59:
 403              		.align	2
 404              		.global	armwave_fill_pixbuf_256
 405              		.syntax unified
 406              		.arm
 407              		.fpu vfp
 409              	armwave_fill_pixbuf_256:
 410              	.LVL19:
 411              	.LFB60:
  98:armwave.c     ****             }
  99:armwave.c     ****         }
 100:armwave.c     ****     }
 101:armwave.c     **** }
 102:armwave.c     **** 
 103:armwave.c     **** /*
 104:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 105:armwave.c     ****  */
 106:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 107:armwave.c     **** {
 412              		.loc 1 107 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 416              		.loc 1 108 5 view .LVU84
 109:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 417              		.loc 1 109 5 view .LVU85
 110:armwave.c     ****     uint8_t r, g, b, value;
 418              		.loc 1 110 5 view .LVU86
 111:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 419              		.loc 1 111 5 view .LVU87
 420              	@ armwave.c:107: {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 421              		.loc 1 107 1 is_stmt 0 view .LVU88
 422 017c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 423              		.cfi_def_cfa_offset 36
 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 8, -20
 429              		.cfi_offset 9, -16
 430              		.cfi_offset 10, -12
 431              		.cfi_offset 11, -8
 432              		.cfi_offset 14, -4
 433              	@ armwave.c:115:     assert(out_buffer != NULL);
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 113:armwave.c     ****     uint32_t offset;
 114:armwave.c     **** 
 115:armwave.c     ****     assert(out_buffer != NULL);
 434              		.loc 1 115 5 view .LVU89
 435 0180 000050E3 		cmp	r0, #0	@ out_buffer
 436              	@ armwave.c:111:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 437              		.loc 1 111 15 view .LVU90
 438 0184 44529FE5 		ldr	r5, .L52	@ tmp360,
 439              	@ armwave.c:107: {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 440              		.loc 1 107 1 view .LVU91
 441 0188 0CD04DE2 		sub	sp, sp, #12	@,,
 442              		.cfi_def_cfa_offset 48
 443              	@ armwave.c:111:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 444              		.loc 1 111 15 view .LVU92
 445 018c 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 446              	.LVL20:
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 447              		.loc 1 112 5 is_stmt 1 view .LVU93
 113:armwave.c     **** 
 448              		.loc 1 113 5 view .LVU94
 449              		.loc 1 115 5 view .LVU95
 450 0190 8900000A 		beq	.L50		@,
 116:armwave.c     **** 
 117:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 118:armwave.c     **** 
 119:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 451              		.loc 1 119 5 view .LVU96
 452              	@ armwave.c:119:     npix = g_armwave_state.target_width * 256;
 453              		.loc 1 119 41 is_stmt 0 view .LVU97
 454 0194 44C095E5 		ldr	ip, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 455 0198 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 456              	.LVL21:
 120:armwave.c     **** 
 121:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 457              		.loc 1 121 5 is_stmt 1 view .LVU98
 458              		.loc 1 121 5 is_stmt 0 view .LVU99
 459 019c 00005CE3 		cmp	ip, #0	@ npix,
 460 01a0 0A0000DA 		ble	.L25		@,
 461              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 123:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 124:armwave.c     ****         // most normal waveforms.
 125:armwave.c     ****         wave_word = *base_32ptr++;
 126:armwave.c     **** 
 127:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 129:armwave.c     ****                 value = wave_word & 0xff;
 130:armwave.c     ****                 wave_word >>= 8;
 131:armwave.c     **** 
 132:armwave.c     ****                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 462              		.loc 1 133 52 view .LVU100
 463 01a4 F8A5D5E1 		ldrsh	r10, [r5, #88]	@ _70, g_armwave_state.ch1_color.r
 464              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 465              		.loc 1 134 52 view .LVU101
 466 01a8 FA95D5E1 		ldrsh	r9, [r5, #90]	@ _76, g_armwave_state.ch1_color.g
 467              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 468              		.loc 1 135 52 view .LVU102
 469 01ac FCB5D5E1 		ldrsh	fp, [r5, #92]	@ _80, g_armwave_state.ch1_color.b
 470              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 471              		.loc 1 121 11 view .LVU103
 472 01b0 0030A0E3 		mov	r3, #0	@ n,
 473 01b4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 474              	.LVL22:
 475              	.L34:
 125:armwave.c     **** 
 476              		.loc 1 125 9 is_stmt 1 view .LVU104
 477              	@ armwave.c:125:         wave_word = *base_32ptr++;
 125:armwave.c     **** 
 478              		.loc 1 125 19 is_stmt 0 view .LVU105
 479 01b8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 480              	.LVL23:
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 481              		.loc 1 127 9 is_stmt 1 view .LVU106
 482              	@ armwave.c:127:         if(COND_UNLIKELY(wave_word != 0)) {
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 483              		.loc 1 127 11 is_stmt 0 view .LVU107
 484 01bc 000052E3 		cmp	r2, #0	@ wave_word,
 485 01c0 0400001A 		bne	.L51		@,
 486              	.LVL24:
 487              	.L29:
 488              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 489              		.loc 1 121 28 discriminator 2 view .LVU108
 490 01c4 043083E2 		add	r3, r3, #4	@ n, n,
 491              	.LVL25:
 492              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 493              		.loc 1 121 5 discriminator 2 view .LVU109
 494 01c8 03005CE1 		cmp	ip, r3	@ npix, n
 495 01cc F9FFFFCA 		bgt	.L34		@,
 496              	.LVL26:
 497              	.L25:
 498              	@ armwave.c:154: }
 136:armwave.c     **** 
 137:armwave.c     ****                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 140:armwave.c     **** 
 141:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 142:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 144:armwave.c     ****                     // Is there a better way?
 145:armwave.c     ****                     nsub = n + i;
 146:armwave.c     ****                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 151:armwave.c     ****             }
 152:armwave.c     ****         } 
 153:armwave.c     ****     }
 154:armwave.c     **** }
 499              		.loc 1 154 1 view .LVU110
 500 01d0 0CD08DE2 		add	sp, sp, #12	@,,
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed	@
 504 01d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 505              	.LVL27:
 506              	.L51:
 507              		.cfi_restore_state
 129:armwave.c     ****                 wave_word >>= 8;
 508              		.loc 1 129 17 is_stmt 1 view .LVU111
 130:armwave.c     **** 
 509              		.loc 1 130 17 view .LVU112
 510              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 511              		.loc 1 132 19 is_stmt 0 view .LVU113
 512 01d8 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 513              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 514              		.loc 1 130 27 view .LVU114
 515 01dc 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 516              	.LVL28:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 517              		.loc 1 132 17 is_stmt 1 view .LVU115
 518              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 519              		.loc 1 132 19 is_stmt 0 view .LVU116
 520 01e0 1900000A 		beq	.L30		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 521              		.loc 1 133 21 is_stmt 1 view .LVU117
 522              	.LVL29:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 523              		.loc 1 134 21 view .LVU118
 135:armwave.c     **** 
 524              		.loc 1 135 21 view .LVU119
 137:armwave.c     ****                     g = MIN(gg, 255);
 525              		.loc 1 137 21 view .LVU120
 138:armwave.c     ****                     b = MIN(bb, 255);
 526              		.loc 1 138 21 view .LVU121
 139:armwave.c     **** 
 527              		.loc 1 139 21 view .LVU122
 142:armwave.c     **** 
 528              		.loc 1 142 21 view .LVU123
 145:armwave.c     ****                     xx = nsub & 0xff;
 529              		.loc 1 145 21 view .LVU124
 146:armwave.c     ****                     yy = nsub >> 8;
 530              		.loc 1 146 21 view .LVU125
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 531              		.loc 1 147 21 view .LVU126
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 532              		.loc 1 148 21 view .LVU127
 149:armwave.c     ****                 }
 533              		.loc 1 149 21 view .LVU128
 534              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 535              		.loc 1 135 55 is_stmt 0 view .LVU129
 536 01e4 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 537              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 538              		.loc 1 134 55 view .LVU130
 539 01e8 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 540              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 541              		.loc 1 135 24 view .LVU131
 542 01ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 543              	.LVL30:
 544              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 545              		.loc 1 139 25 view .LVU132
 546 01f0 FF0054E3 		cmp	r4, #255	@ bb,
 547              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 548              		.loc 1 134 24 view .LVU133
 549 01f4 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 550              	.LVL31:
 551              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 552              		.loc 1 139 25 view .LVU134
 553 01f8 FF40A0A3 		movge	r4, #255	@ bb,
 554              	.LVL32:
 555              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 556              		.loc 1 133 55 view .LVU135
 557 01fc 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 558              	.LVL33:
 559              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 560              		.loc 1 138 25 view .LVU136
 561 0200 FF0058E3 		cmp	r8, #255	@ gg,
 562 0204 FF80A0A3 		movge	r8, #255	@ gg,
 563              	.LVL34:
 564              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 565              		.loc 1 133 24 view .LVU137
 566 0208 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 567              	.LVL35:
 568              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 569              		.loc 1 142 56 view .LVU138
 570 020c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 571              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 572              		.loc 1 149 39 view .LVU139
 573 0210 440095E5 		ldr	r0, [r5, #68]	@ tmp372, g_armwave_state.target_width
 574              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 575              		.loc 1 142 44 view .LVU140
 576 0214 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 577              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 578              		.loc 1 137 25 view .LVU141
 579 0218 FF0056E3 		cmp	r6, #255	@ rr,
 580              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 581              		.loc 1 142 56 view .LVU142
 582 021c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 583              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 584              		.loc 1 146 24 view .LVU143
 585 0220 7370EFE6 		uxtb	r7, r3	@ xx, n
 586              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 587              		.loc 1 142 44 view .LVU144
 588 0224 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 589              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 590              		.loc 1 142 51 view .LVU145
 591 0228 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 592              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 593              		.loc 1 137 25 view .LVU146
 594 022c FF60A0A3 		movge	r6, #255	@ rr,
 595              	.LVL36:
 596              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 597              		.loc 1 147 31 view .LVU147
 598 0230 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 599              	.LVL37:
 600              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 601              		.loc 1 149 39 view .LVU148
 602 0234 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 603              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 604              		.loc 1 142 62 view .LVU149
 605 0238 7660EFE6 		uxtb	r6, r6	@ rr, rr
 606              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 607              		.loc 1 149 49 view .LVU150
 608 023c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 609              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 610              		.loc 1 142 62 view .LVU151
 611 0240 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 612              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 613              		.loc 1 142 26 view .LVU152
 614 0244 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 615              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 616              		.loc 1 149 49 view .LVU153
 617 0248 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 618              	.LVL38:
 619              	.L30:
 129:armwave.c     ****                 wave_word >>= 8;
 620              		.loc 1 129 17 is_stmt 1 view .LVU154
 130:armwave.c     **** 
 621              		.loc 1 130 17 view .LVU155
 622              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 132 19 is_stmt 0 view .LVU156
 624 024c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 625              	.LVL39:
 626              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 627              		.loc 1 130 27 view .LVU157
 628 0250 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 629              	.LVL40:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 630              		.loc 1 132 17 is_stmt 1 view .LVU158
 631              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 132 19 is_stmt 0 view .LVU159
 633 0254 1C00000A 		beq	.L31		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 133 21 is_stmt 1 view .LVU160
 635              	.LVL41:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 134 21 view .LVU161
 135:armwave.c     **** 
 637              		.loc 1 135 21 view .LVU162
 137:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 137 21 view .LVU163
 138:armwave.c     ****                     b = MIN(bb, 255);
 639              		.loc 1 138 21 view .LVU164
 139:armwave.c     **** 
 640              		.loc 1 139 21 view .LVU165
 142:armwave.c     **** 
 641              		.loc 1 142 21 view .LVU166
 145:armwave.c     ****                     xx = nsub & 0xff;
 642              		.loc 1 145 21 view .LVU167
 643              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 644              		.loc 1 135 55 is_stmt 0 view .LVU168
 645 0258 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 646              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 134 55 view .LVU169
 648 025c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 649              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 650              		.loc 1 135 24 view .LVU170
 651 0260 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 652              	.LVL42:
 653              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 654              		.loc 1 139 25 view .LVU171
 655 0264 FF0054E3 		cmp	r4, #255	@ bb,
 656 0268 FF40A0A3 		movge	r4, #255	@ bb,
 657              	.LVL43:
 658              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 659              		.loc 1 133 55 view .LVU172
 660 026c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 661              	.LVL44:
 662              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 134 24 view .LVU173
 664 0270 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 665              	.LVL45:
 666              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 667              		.loc 1 142 44 view .LVU174
 668 0274 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 669              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 670              		.loc 1 138 25 view .LVU175
 671 0278 FF0057E3 		cmp	r7, #255	@ gg,
 672 027c 016083E2 		add	r6, r3, #1	@ _158, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 673              		.loc 1 146 21 is_stmt 1 view .LVU176
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 674              		.loc 1 147 21 view .LVU177
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 675              		.loc 1 148 21 view .LVU178
 149:armwave.c     ****                 }
 676              		.loc 1 149 21 view .LVU179
 677              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 678              		.loc 1 142 44 is_stmt 0 view .LVU180
 679 0280 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 680              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 681              		.loc 1 138 25 view .LVU181
 682 0284 FF70A0A3 		movge	r7, #255	@ gg,
 683              	.LVL46:
 684              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 685              		.loc 1 142 44 view .LVU182
 686 0288 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 687              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 688              		.loc 1 149 39 view .LVU183
 689 028c 444095E5 		ldr	r4, [r5, #68]	@ tmp375, g_armwave_state.target_width
 690              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 691              		.loc 1 133 24 view .LVU184
 692 0290 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 693              	.LVL47:
 694              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 695              		.loc 1 146 24 view .LVU185
 696 0294 7600EFE6 		uxtb	r0, r6	@ xx, _158
 697              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 698              		.loc 1 137 25 view .LVU186
 699 0298 FF005EE3 		cmp	lr, #255	@ rr,
 700              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 701              		.loc 1 142 56 view .LVU187
 702 029c 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 703              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 704              		.loc 1 147 31 view .LVU188
 705 02a0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 706              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 707              		.loc 1 149 39 view .LVU189
 708 02a4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 709              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 137 25 view .LVU190
 711 02a8 FFE0A0A3 		movge	lr, #255	@ rr,
 712              	.LVL48:
 713              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 714              		.loc 1 142 51 view .LVU191
 715 02ac 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 716              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 717              		.loc 1 142 56 view .LVU192
 718 02b0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 719              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 720              		.loc 1 142 51 view .LVU193
 721 02b4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 722              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 723              		.loc 1 142 62 view .LVU194
 724 02b8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 725              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 726              		.loc 1 149 49 view .LVU195
 727 02bc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 728              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 729              		.loc 1 142 62 view .LVU196
 730 02c0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 731              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 732              		.loc 1 142 26 view .LVU197
 733 02c4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 734              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 735              		.loc 1 149 49 view .LVU198
 736 02c8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 737              	.LVL49:
 738              	.L31:
 129:armwave.c     ****                 wave_word >>= 8;
 739              		.loc 1 129 17 is_stmt 1 view .LVU199
 130:armwave.c     **** 
 740              		.loc 1 130 17 view .LVU200
 741              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 132 19 is_stmt 0 view .LVU201
 743 02cc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 744              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 745              		.loc 1 130 27 view .LVU202
 746 02d0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 747              	.LVL50:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 132 17 is_stmt 1 view .LVU203
 749              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 132 19 is_stmt 0 view .LVU204
 751 02d4 1A00000A 		beq	.L32		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 133 21 is_stmt 1 view .LVU205
 753              	.LVL51:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 134 21 view .LVU206
 135:armwave.c     **** 
 755              		.loc 1 135 21 view .LVU207
 137:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 137 21 view .LVU208
 138:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 138 21 view .LVU209
 139:armwave.c     **** 
 758              		.loc 1 139 21 view .LVU210
 142:armwave.c     **** 
 759              		.loc 1 142 21 view .LVU211
 145:armwave.c     ****                     xx = nsub & 0xff;
 760              		.loc 1 145 21 view .LVU212
 761              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 762              		.loc 1 135 55 is_stmt 0 view .LVU213
 763 02d8 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 764              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 765              		.loc 1 134 55 view .LVU214
 766 02dc 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 767              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 768              		.loc 1 135 24 view .LVU215
 769 02e0 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 770              	.LVL52:
 771              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 772              		.loc 1 133 55 view .LVU216
 773 02e4 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 774              	.LVL53:
 775              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 776              		.loc 1 139 25 view .LVU217
 777 02e8 FF0054E3 		cmp	r4, #255	@ bb,
 778              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 779              		.loc 1 134 24 view .LVU218
 780 02ec 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 781              	.LVL54:
 782              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 783              		.loc 1 139 25 view .LVU219
 784 02f0 FF40A0A3 		movge	r4, #255	@ bb,
 785              	.LVL55:
 786              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 787              		.loc 1 138 25 view .LVU220
 788 02f4 FF0056E3 		cmp	r6, #255	@ gg,
 789 02f8 FF60A0A3 		movge	r6, #255	@ gg,
 790              	.LVL56:
 138:armwave.c     ****                     b = MIN(bb, 255);
 791              		.loc 1 138 25 view .LVU221
 792 02fc 027083E2 		add	r7, r3, #2	@ _66, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 793              		.loc 1 146 21 is_stmt 1 view .LVU222
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 794              		.loc 1 147 21 view .LVU223
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 795              		.loc 1 148 21 view .LVU224
 149:armwave.c     ****                 }
 796              		.loc 1 149 21 view .LVU225
 797              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 798              		.loc 1 133 24 is_stmt 0 view .LVU226
 799 0300 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 800              	.LVL57:
 801              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 802              		.loc 1 149 39 view .LVU227
 803 0304 440095E5 		ldr	r0, [r5, #68]	@ tmp376, g_armwave_state.target_width
 804              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 805              		.loc 1 137 25 view .LVU228
 806 0308 FF005EE3 		cmp	lr, #255	@ rr,
 807              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 808              		.loc 1 146 24 view .LVU229
 809 030c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 810              	.LVL58:
 811              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 812              		.loc 1 142 56 view .LVU230
 813 0310 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 814              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 815              		.loc 1 142 44 view .LVU231
 816 0314 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 817              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 137 25 view .LVU232
 819 0318 FFE0A0A3 		movge	lr, #255	@ rr,
 820              	.LVL59:
 821              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 822              		.loc 1 147 31 view .LVU233
 823 031c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 824              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 825              		.loc 1 149 39 view .LVU234
 826 0320 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 827              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 828              		.loc 1 142 44 view .LVU235
 829 0324 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 830              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 831              		.loc 1 142 56 view .LVU236
 832 0328 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 833              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 834              		.loc 1 142 51 view .LVU237
 835 032c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 836              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 837              		.loc 1 142 62 view .LVU238
 838 0330 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 839              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 840              		.loc 1 149 49 view .LVU239
 841 0334 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 842              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 843              		.loc 1 142 62 view .LVU240
 844 0338 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 845              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 846              		.loc 1 142 26 view .LVU241
 847 033c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 848              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 849              		.loc 1 149 49 view .LVU242
 850 0340 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 851              	.L32:
 852              	.LVL60:
 129:armwave.c     ****                 wave_word >>= 8;
 853              		.loc 1 129 17 is_stmt 1 view .LVU243
 130:armwave.c     **** 
 854              		.loc 1 130 17 view .LVU244
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 855              		.loc 1 132 17 view .LVU245
 856              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 857              		.loc 1 132 19 is_stmt 0 view .LVU246
 858 0344 000052E3 		cmp	r2, #0	@ wave_word,
 859 0348 9DFFFF0A 		beq	.L29		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 860              		.loc 1 133 21 is_stmt 1 view .LVU247
 861              	.LVL61:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 862              		.loc 1 134 21 view .LVU248
 135:armwave.c     **** 
 863              		.loc 1 135 21 view .LVU249
 137:armwave.c     ****                     g = MIN(gg, 255);
 864              		.loc 1 137 21 view .LVU250
 138:armwave.c     ****                     b = MIN(bb, 255);
 865              		.loc 1 138 21 view .LVU251
 139:armwave.c     **** 
 866              		.loc 1 139 21 view .LVU252
 142:armwave.c     **** 
 867              		.loc 1 142 21 view .LVU253
 145:armwave.c     ****                     xx = nsub & 0xff;
 868              		.loc 1 145 21 view .LVU254
 869              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 870              		.loc 1 135 55 is_stmt 0 view .LVU255
 871 034c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 872              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 873              		.loc 1 134 55 view .LVU256
 874 0350 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 875              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 876              		.loc 1 135 24 view .LVU257
 877 0354 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 878              	.LVL62:
 879              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 880              		.loc 1 133 55 view .LVU258
 881 0358 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 882              	.LVL63:
 883              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 884              		.loc 1 139 25 view .LVU259
 885 035c FF005EE3 		cmp	lr, #255	@ bb,
 886              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 887              		.loc 1 134 24 view .LVU260
 888 0360 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 889              	.LVL64:
 890              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 891              		.loc 1 139 25 view .LVU261
 892 0364 FFE0A0A3 		movge	lr, #255	@ bb,
 893              	.LVL65:
 894              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 138 25 view .LVU262
 896 0368 FF0054E3 		cmp	r4, #255	@ gg,
 897 036c FF40A0A3 		movge	r4, #255	@ gg,
 898              	.LVL66:
 138:armwave.c     ****                     b = MIN(bb, 255);
 899              		.loc 1 138 25 view .LVU263
 900 0370 036083E2 		add	r6, r3, #3	@ _59, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 901              		.loc 1 146 21 is_stmt 1 view .LVU264
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 902              		.loc 1 147 21 view .LVU265
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 903              		.loc 1 148 21 view .LVU266
 149:armwave.c     ****                 }
 904              		.loc 1 149 21 view .LVU267
 905              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 906              		.loc 1 133 24 is_stmt 0 view .LVU268
 907 0374 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 908              	.LVL67:
 909              	@ armwave.c:148:                     offset = yy + (xx * g_armwave_state.target_width);
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 910              		.loc 1 148 39 view .LVU269
 911 0378 447095E5 		ldr	r7, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 912              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 913              		.loc 1 137 25 view .LVU270
 914 037c FF0052E3 		cmp	r2, #255	@ rr,
 915              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 916              		.loc 1 146 24 view .LVU271
 917 0380 7680EFE6 		uxtb	r8, r6	@ xx, _59
 918              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 919              		.loc 1 142 56 view .LVU272
 920 0384 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 921              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 922              		.loc 1 142 44 view .LVU273
 923 0388 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 924              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 925              		.loc 1 137 25 view .LVU274
 926 038c FF20A0A3 		movge	r2, #255	@ rr,
 927              	.LVL68:
 928              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 929              		.loc 1 147 31 view .LVU275
 930 0390 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 931              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 932              		.loc 1 142 44 view .LVU276
 933 0394 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 934              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 935              		.loc 1 142 56 view .LVU277
 936 0398 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 937              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 938              		.loc 1 149 39 view .LVU278
 939 039c 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 940              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 941              		.loc 1 142 51 view .LVU279
 942 03a0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 943              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 944              		.loc 1 142 62 view .LVU280
 945 03a4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 946              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 947              		.loc 1 149 49 view .LVU281
 948 03a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 949              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 950              		.loc 1 142 62 view .LVU282
 951 03ac 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 952              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 953              		.loc 1 142 26 view .LVU283
 954 03b0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 955              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 956              		.loc 1 149 49 view .LVU284
 957 03b4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 958 03b8 81FFFFEA 		b	.L29		@
 959              	.LVL69:
 960              	.L50:
 115:armwave.c     **** 
 961              		.loc 1 115 5 is_stmt 1 discriminator 1 view .LVU285
 962 03bc 10309FE5 		ldr	r3, .L52+4	@,
 963 03c0 7320A0E3 		mov	r2, #115	@,
 964 03c4 0C109FE5 		ldr	r1, .L52+8	@,
 965              	.LVL70:
 115:armwave.c     **** 
 966              		.loc 1 115 5 is_stmt 0 discriminator 1 view .LVU286
 967 03c8 0C009FE5 		ldr	r0, .L52+12	@,
 968              	.LVL71:
 115:armwave.c     **** 
 969              		.loc 1 115 5 discriminator 1 view .LVU287
 970 03cc FEFFFFEB 		bl	__assert_fail		@
 971              	.LVL72:
 972              	.L53:
 115:armwave.c     **** 
 973              		.loc 1 115 5 discriminator 1 view .LVU288
 974              		.align	2
 975              	.L52:
 976 03d0 00000000 		.word	g_armwave_state
 977 03d4 00000000 		.word	.LANCHOR0
 978 03d8 20000000 		.word	.LC2
 979 03dc 2C000000 		.word	.LC3
 980              		.cfi_endproc
 981              	.LFE60:
 983              		.align	2
 984              		.global	armwave_fill_pixbuf_scaled
 985              		.syntax unified
 986              		.arm
 987              		.fpu vfp
 989              	armwave_fill_pixbuf_scaled:
 990              	.LVL73:
 991              	.LFB61:
 155:armwave.c     **** 
 156:armwave.c     **** /*
 157:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 158:armwave.c     ****  * Rows are repeated as necessary.
 159:armwave.c     ****  */
 160:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 161:armwave.c     **** {
 992              		.loc 1 161 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 996              		.loc 1 162 5 view .LVU290
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 997              		.loc 1 163 5 view .LVU291
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 998              		.loc 1 164 5 view .LVU292
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 999              		.loc 1 165 5 view .LVU293
 1000              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1001              		.loc 1 161 1 is_stmt 0 view .LVU294
 1002 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1003              		.cfi_def_cfa_offset 36
 1004              		.cfi_offset 4, -36
 1005              		.cfi_offset 5, -32
 1006              		.cfi_offset 6, -28
 1007              		.cfi_offset 7, -24
 1008              		.cfi_offset 8, -20
 1009              		.cfi_offset 9, -16
 1010              		.cfi_offset 10, -12
 1011              		.cfi_offset 11, -8
 1012              		.cfi_offset 14, -4
 1013              	@ armwave.c:169:     assert(out_buffer != NULL);
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 167:armwave.c     ****     uint32_t offset;
 168:armwave.c     **** 
 169:armwave.c     ****     assert(out_buffer != NULL);
 1014              		.loc 1 169 5 view .LVU295
 1015 03e4 000050E3 		cmp	r0, #0	@ out_buffer
 1016              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1017              		.loc 1 165 15 view .LVU296
 1018 03e8 34519FE5 		ldr	r5, .L79	@ tmp202,
 1019              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1020              		.loc 1 161 1 view .LVU297
 1021 03ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1022              		.cfi_def_cfa_offset 48
 1023              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1024              		.loc 1 165 15 view .LVU298
 1025 03f0 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1026              	.LVL74:
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1027              		.loc 1 166 5 is_stmt 1 view .LVU299
 167:armwave.c     **** 
 1028              		.loc 1 167 5 view .LVU300
 1029              		.loc 1 169 5 view .LVU301
 1030 03f4 4500000A 		beq	.L76		@,
 170:armwave.c     **** 
 171:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1031              		.loc 1 171 5 view .LVU302
 1032              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 1033              		.loc 1 171 41 is_stmt 0 view .LVU303
 1034 03f8 448095E5 		ldr	r8, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1035 03fc 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1036              	.LVL75:
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1037              		.loc 1 172 5 is_stmt 1 view .LVU304
 173:armwave.c     **** 
 174:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1038              		.loc 1 174 5 view .LVU305
 1039              		.loc 1 174 5 is_stmt 0 view .LVU306
 1040 0400 000058E3 		cmp	r8, #0	@ npix,
 1041 0404 0B0000DA 		ble	.L54		@,
 1042              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 176:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 177:armwave.c     ****         // most normal waveforms.
 178:armwave.c     ****         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 180:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 183:armwave.c     ****                 wave_word >>= 8;
 184:armwave.c     **** 
 185:armwave.c     ****                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1043              		.loc 1 187 52 view .LVU307
 1044 0408 FA35D5E1 		ldrsh	r3, [r5, #90]	@ _11, g_armwave_state.ch1_color.g
 1045              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1046              		.loc 1 186 52 view .LVU308
 1047 040c F8B5D5E1 		ldrsh	fp, [r5, #88]	@ _7, g_armwave_state.ch1_color.r
 1048              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1049              		.loc 1 174 11 view .LVU309
 1050 0410 00E0A0E3 		mov	lr, #0	@ n,
 1051              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1052              		.loc 1 187 52 view .LVU310
 1053 0414 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1054              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1055              		.loc 1 188 52 view .LVU311
 1056 0418 FC35D5E1 		ldrsh	r3, [r5, #92]	@ _14, g_armwave_state.ch1_color.b
 1057 041c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1058              	.LVL76:
 1059              	.L61:
 178:armwave.c     **** 
 1060              		.loc 1 178 9 is_stmt 1 view .LVU312
 1061              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 1062              		.loc 1 178 19 is_stmt 0 view .LVU313
 1063 0420 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1064              	.LVL77:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 1065              		.loc 1 180 9 is_stmt 1 view .LVU314
 1066              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 1067              		.loc 1 180 11 is_stmt 0 view .LVU315
 1068 0424 00005CE3 		cmp	ip, #0	@ wave_word,
 1069 0428 0400001A 		bne	.L77		@,
 1070              	.L57:
 1071              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1072              		.loc 1 174 28 view .LVU316
 1073 042c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1074              	.LVL78:
 1075              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1076              		.loc 1 174 5 view .LVU317
 1077 0430 0E0058E1 		cmp	r8, lr	@ npix, n
 1078 0434 F9FFFFCA 		bgt	.L61		@,
 1079              	.LVL79:
 1080              	.L54:
 1081              	@ armwave.c:210: }
 189:armwave.c     **** 
 190:armwave.c     ****                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 193:armwave.c     **** 
 194:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 195:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 197:armwave.c     ****                     // Do line scaling as necessary.
 198:armwave.c     ****                     nsub = n + w;
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 201:armwave.c     **** 
 202:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 206:armwave.c     ****                 }
 207:armwave.c     ****             }
 208:armwave.c     ****         }
 209:armwave.c     ****     }
 210:armwave.c     **** }
 1082              		.loc 1 210 1 view .LVU318
 1083 0438 0CD08DE2 		add	sp, sp, #12	@,,
 1084              		.cfi_remember_state
 1085              		.cfi_def_cfa_offset 36
 1086              		@ sp needed	@
 1087 043c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1088              	.LVL80:
 1089              	.L77:
 1090              		.cfi_restore_state
 1091              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1092              		.loc 1 185 19 view .LVU319
 1093 0440 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1094              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1095              		.loc 1 181 19 view .LVU320
 1096 0444 0090A0E3 		mov	r9, #0	@ w,
 1097              	.LVL81:
 182:armwave.c     ****                 wave_word >>= 8;
 1098              		.loc 1 182 17 is_stmt 1 view .LVU321
 183:armwave.c     **** 
 1099              		.loc 1 183 17 view .LVU322
 1100              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 1101              		.loc 1 183 27 is_stmt 0 view .LVU323
 1102 0448 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1103              	.LVL82:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1104              		.loc 1 185 17 is_stmt 1 view .LVU324
 1105              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1106              		.loc 1 185 19 is_stmt 0 view .LVU325
 1107 044c 0500001A 		bne	.L78		@,
 1108              	.L58:
 1109              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1110              		.loc 1 181 32 view .LVU326
 1111 0450 019089E2 		add	r9, r9, #1	@ w, w,
 1112              	.LVL83:
 1113              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1114              		.loc 1 181 13 view .LVU327
 1115 0454 040059E3 		cmp	r9, #4	@ w,
 1116 0458 F3FFFF0A 		beq	.L57		@,
 182:armwave.c     ****                 wave_word >>= 8;
 1117              		.loc 1 182 17 is_stmt 1 view .LVU328
 1118              	.LVL84:
 183:armwave.c     **** 
 1119              		.loc 1 183 17 view .LVU329
 1120              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1121              		.loc 1 185 19 is_stmt 0 view .LVU330
 1122 045c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1123              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 1124              		.loc 1 183 27 view .LVU331
 1125 0460 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1126              	.LVL85:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1127              		.loc 1 185 17 is_stmt 1 view .LVU332
 1128              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1129              		.loc 1 185 19 is_stmt 0 view .LVU333
 1130 0464 F9FFFF0A 		beq	.L58		@,
 1131              	.L78:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1132              		.loc 1 186 21 is_stmt 1 view .LVU334
 1133              	.LVL86:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1134              		.loc 1 187 21 view .LVU335
 188:armwave.c     **** 
 1135              		.loc 1 188 21 view .LVU336
 190:armwave.c     ****                     g = MIN(gg, 255);
 1136              		.loc 1 190 21 view .LVU337
 191:armwave.c     ****                     b = MIN(bb, 255);
 1137              		.loc 1 191 21 view .LVU338
 192:armwave.c     **** 
 1138              		.loc 1 192 21 view .LVU339
 195:armwave.c     **** 
 1139              		.loc 1 195 21 view .LVU340
 1140              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1141              		.loc 1 188 55 is_stmt 0 view .LVU341
 1142 0468 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1143              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1144              		.loc 1 187 55 view .LVU342
 1145 046c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1146 0470 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1147              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1148              		.loc 1 188 55 view .LVU343
 1149 0474 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1150              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1151              		.loc 1 187 55 view .LVU344
 1152 0478 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1153              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1154              		.loc 1 188 24 view .LVU345
 1155 047c 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1156              	.LVL87:
 1157              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1158              		.loc 1 186 55 view .LVU346
 1159 0480 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1160              	.LVL88:
 1161              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1162              		.loc 1 187 24 view .LVU347
 1163 0484 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1164              	.LVL89:
 1165              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 1166              		.loc 1 192 25 view .LVU348
 1167 0488 FF0052E3 		cmp	r2, #255	@ bb,
 1168 048c FF20A0A3 		movge	r2, #255	@ bb,
 1169              	.LVL90:
 1170              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 1171              		.loc 1 191 25 view .LVU349
 1172 0490 FF0051E3 		cmp	r1, #255	@ gg,
 1173 0494 FF10A0A3 		movge	r1, #255	@ gg,
 1174              	.LVL91:
 1175              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1176              		.loc 1 186 24 view .LVU350
 1177 0498 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1178              	.LVL92:
 1179              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 1180              		.loc 1 190 25 view .LVU351
 1181 049c FF0053E3 		cmp	r3, #255	@ rr,
 1182              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1183              		.loc 1 195 56 view .LVU352
 1184 04a0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1185              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 1186              		.loc 1 190 25 view .LVU353
 1187 04a4 FF30A0A3 		movge	r3, #255	@ rr,
 1188              	.LVL93:
 1189              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1190              		.loc 1 195 44 view .LVU354
 1191 04a8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1192              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1193              		.loc 1 195 56 view .LVU355
 1194 04ac 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1195              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1196              		.loc 1 199 57 view .LVU356
 1197 04b0 1CA095E5 		ldr	r10, [r5, #28]	@ _28, g_armwave_state.vscale
 1198              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1199              		.loc 1 195 44 view .LVU357
 1200 04b4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1201              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1202              		.loc 1 195 51 view .LVU358
 1203 04b8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1204              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1205              		.loc 1 195 62 view .LVU359
 1206 04bc 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1207              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1208              		.loc 1 199 32 view .LVU360
 1209 04c0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1210              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1211              		.loc 1 195 62 view .LVU361
 1212 04c4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1213              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1214              		.loc 1 202 21 view .LVU362
 1215 04c8 00005AE3 		cmp	r10, #0	@ _28,
 1216              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1217              		.loc 1 195 26 view .LVU363
 1218 04cc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1219              	.LVL94:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1220              		.loc 1 198 21 is_stmt 1 view .LVU364
 199:armwave.c     ****                     xx = (nsub >> 8);
 1221              		.loc 1 199 21 view .LVU365
 1222              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 1223              		.loc 1 200 32 is_stmt 0 view .LVU366
 1224 04d0 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1225              	.LVL95:
 1226              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1227              		.loc 1 199 24 view .LVU367
 1228 04d4 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1229              	.LVL96:
 200:armwave.c     **** 
 1230              		.loc 1 200 21 is_stmt 1 view .LVU368
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1231              		.loc 1 202 21 view .LVU369
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1232              		.loc 1 202 21 is_stmt 0 view .LVU370
 1233 04d8 DCFFFF0A 		beq	.L58		@,
 1234              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1235              		.loc 1 202 29 view .LVU371
 1236 04dc 0030A0E3 		mov	r3, #0	@ row,
 1237              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1238              		.loc 1 202 38 view .LVU372
 1239 04e0 0320A0E1 		mov	r2, r3	@ _35, row
 1240              	.LVL97:
 1241              	.L59:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1242              		.loc 1 203 25 is_stmt 1 discriminator 3 view .LVU373
 204:armwave.c     ****                     }
 1243              		.loc 1 204 25 discriminator 3 view .LVU374
 1244              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1245              		.loc 1 203 52 is_stmt 0 discriminator 3 view .LVU375
 1246 04e4 441095E5 		ldr	r1, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1247              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1248              		.loc 1 203 45 discriminator 3 view .LVU376
 1249 04e8 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1250              	.LVL98:
 1251              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1252              		.loc 1 202 67 discriminator 3 view .LVU377
 1253 04ec 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1254              	.LVL99:
 1255              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 1256              		.loc 1 204 43 discriminator 3 view .LVU378
 1257 04f0 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1258              	.LVL100:
 1259              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1260              		.loc 1 202 67 discriminator 3 view .LVU379
 1261 04f4 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1262              	.LVL101:
 1263              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1264              		.loc 1 202 38 discriminator 3 view .LVU380
 1265 04f8 0320A0E1 		mov	r2, r3	@ _35, row
 1266              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 1267              		.loc 1 204 53 discriminator 3 view .LVU381
 1268 04fc 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1269              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1270              		.loc 1 202 21 discriminator 3 view .LVU382
 1271 0500 1C1095E5 		ldr	r1, [r5, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1272              	.LVL102:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1273              		.loc 1 202 21 discriminator 3 view .LVU383
 1274 0504 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1275 0508 F5FFFF3A 		bcc	.L59		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 202 21 discriminator 3 view .LVU384
 1277 050c CFFFFFEA 		b	.L58		@
 1278              	.LVL103:
 1279              	.L76:
 169:armwave.c     **** 
 1280              		.loc 1 169 5 is_stmt 1 discriminator 1 view .LVU385
 1281 0510 10309FE5 		ldr	r3, .L79+4	@,
 1282 0514 A920A0E3 		mov	r2, #169	@,
 1283 0518 0C109FE5 		ldr	r1, .L79+8	@,
 1284 051c 0C009FE5 		ldr	r0, .L79+12	@,
 1285              	.LVL104:
 169:armwave.c     **** 
 1286              		.loc 1 169 5 is_stmt 0 discriminator 1 view .LVU386
 1287 0520 FEFFFFEB 		bl	__assert_fail		@
 1288              	.LVL105:
 1289              	.L80:
 1290              		.align	2
 1291              	.L79:
 1292 0524 00000000 		.word	g_armwave_state
 1293 0528 18000000 		.word	.LANCHOR0+24
 1294 052c 20000000 		.word	.LC2
 1295 0530 2C000000 		.word	.LC3
 1296              		.cfi_endproc
 1297              	.LFE61:
 1299              		.align	2
 1300              		.global	armwave_setup_render
 1301              		.syntax unified
 1302              		.arm
 1303              		.fpu vfp
 1305              	armwave_setup_render:
 1306              	.LVL106:
 1307              	.LFB62:
 211:armwave.c     **** 
 212:armwave.c     **** /*
 213:armwave.c     ****  * Setup the renderer with passed parameters.
 214:armwave.c     ****  */
 215:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 216:armwave.c     **** {
 1308              		.loc 1 216 1 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 12, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 217:armwave.c     ****     uint32_t length, xx;
 1312              		.loc 1 217 5 view .LVU388
 218:armwave.c     ****     float points_per_pixel;
 1313              		.loc 1 218 5 view .LVU389
 219:armwave.c     **** 
 220:armwave.c     ****     // TODO these asserts should instead raise PyExc
 221:armwave.c     ****     assert(start_point < end_point);
 1314              		.loc 1 221 5 view .LVU390
 1315              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1316              		.loc 1 216 1 is_stmt 0 view .LVU391
 1317 0534 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1318              		.cfi_def_cfa_offset 24
 1319              		.cfi_offset 4, -24
 1320              		.cfi_offset 5, -20
 1321              		.cfi_offset 6, -16
 1322              		.cfi_offset 7, -12
 1323              		.cfi_offset 8, -8
 1324              		.cfi_offset 14, -4
 1325              	@ armwave.c:221:     assert(start_point < end_point);
 1326              		.loc 1 221 5 view .LVU392
 1327 0538 010050E1 		cmp	r0, r1	@ start_point, end_point
 1328              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1329              		.loc 1 216 1 view .LVU393
 1330 053c 028B2DED 		vpush.64	{d8}	@
 1331              		.cfi_def_cfa_offset 32
 1332              		.cfi_offset 80, -32
 1333              		.cfi_offset 81, -28
 1334              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1335              		.loc 1 216 1 view .LVU394
 1336 0540 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1337 0544 20609DE5 		ldr	r6, [sp, #32]	@ target_width, target_width
 1338 0548 24109DE5 		ldr	r1, [sp, #36]	@ target_height, target_height
 1339              	.LVL107:
 1340              	@ armwave.c:221:     assert(start_point < end_point);
 1341              		.loc 1 221 5 view .LVU395
 1342 054c 6D00002A 		bcs	.L99		@,
 222:armwave.c     **** 
 223:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 224:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1343              		.loc 1 224 5 is_stmt 1 view .LVU396
 1344 0550 0070A0E1 		mov	r7, r0	@ start_point, start_point
 1345 0554 010C41E2 		sub	r0, r1, #256	@ tmp154, target_height,
 1346              	.LVL108:
 1347              		.loc 1 224 5 is_stmt 0 view .LVU397
 1348 0558 010CD0E3 		bics	r0, r0, #256	@ tmp233, tmp154,
 1349 055c 4C00000A 		beq	.L83		@,
 1350              	@ armwave.c:224:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1351              		.loc 1 224 5 discriminator 1 view .LVU398
 1352 0560 010B41E2 		sub	r0, r1, #1024	@ tmp156, target_height,
 1353 0564 010BD0E3 		bics	r0, r0, #1024	@ tmp234, tmp156,
 1354 0568 5700001A 		bne	.L100		@,
 225:armwave.c     **** 
 226:armwave.c     ****     if(target_height == 256) {
 227:armwave.c     ****         g_armwave_state.row_shift = 8;
 228:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 229:armwave.c     ****     } else if(target_height == 512) {
 1355              		.loc 1 229 12 is_stmt 1 view .LVU399
 230:armwave.c     ****         g_armwave_state.row_shift = 9;
 231:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 232:armwave.c     ****     } else if(target_height == 1024) {
 1356              		.loc 1 232 12 view .LVU400
 1357              	@ armwave.c:232:     } else if(target_height == 1024) {
 1358              		.loc 1 232 14 is_stmt 0 view .LVU401
 1359 056c 010B51E3 		cmp	r1, #1024	@ target_height,
 1360              	@ armwave.c:233:         g_armwave_state.row_shift = 10;
 233:armwave.c     ****         g_armwave_state.row_shift = 10;
 1361              		.loc 1 233 35 view .LVU402
 1362 0570 A8419FE5 		ldr	r4, .L104+4	@ tmp231,
 1363              	@ armwave.c:232:     } else if(target_height == 1024) {
 232:armwave.c     ****         g_armwave_state.row_shift = 10;
 1364              		.loc 1 232 14 view .LVU403
 1365 0574 4F00000A 		beq	.L101		@,
 234:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 235:armwave.c     ****     } else if(target_height == 2048) {
 1366              		.loc 1 235 12 is_stmt 1 view .LVU404
 1367              	@ armwave.c:235:     } else if(target_height == 2048) {
 1368              		.loc 1 235 14 is_stmt 0 view .LVU405
 1369 0578 020B51E3 		cmp	r1, #2048	@ target_height,
 236:armwave.c     ****         g_armwave_state.row_shift = 11;
 1370              		.loc 1 236 9 is_stmt 1 view .LVU406
 1371              	@ armwave.c:236:         g_armwave_state.row_shift = 11;
 1372              		.loc 1 236 35 is_stmt 0 view .LVU407
 1373 057c 0BC0A003 		moveq	ip, #11	@ tmp175,
 1374              	@ armwave.c:237:         g_armwave_state.row_mask = 0x7ff;
 237:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1375              		.loc 1 237 34 view .LVU408
 1376 0580 9C019F05 		ldreq	r0, .L104+8	@ tmp177,
 1377              	@ armwave.c:236:         g_armwave_state.row_shift = 11;
 236:armwave.c     ****         g_armwave_state.row_shift = 11;
 1378              		.loc 1 236 35 view .LVU409
 1379 0584 4CC08405 		streq	ip, [r4, #76]	@ tmp175, g_armwave_state.row_shift
 1380              		.loc 1 237 9 is_stmt 1 view .LVU410
 1381              	@ armwave.c:237:         g_armwave_state.row_mask = 0x7ff;
 1382              		.loc 1 237 34 is_stmt 0 view .LVU411
 1383 0588 50008405 		streq	r0, [r4, #80]	@ tmp177, g_armwave_state.row_mask
 1384              	.L86:
 238:armwave.c     ****     } 
 239:armwave.c     **** 
 240:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 241:armwave.c     ****     g_armwave_state.xstride = target_height;
 1385              		.loc 1 241 5 is_stmt 1 view .LVU412
 1386              	@ armwave.c:246:     g_armwave_state.size = target_height * target_width;
 242:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 243:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 244:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 245:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 246:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1387              		.loc 1 246 42 is_stmt 0 view .LVU413
 1388 058c 960100E0 		mul	r0, r6, r1	@ tmp185, target_width, target_height
 1389              	@ armwave.c:243:     g_armwave_state.wave_stride = wave_stride;
 243:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1390              		.loc 1 243 33 view .LVU414
 1391 0590 203084E5 		str	r3, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1392              	@ armwave.c:244:     g_armwave_state.waves_max = waves_max;
 244:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1393              		.loc 1 244 31 view .LVU415
 1394 0594 282084E5 		str	r2, [r4, #40]	@ waves_max, g_armwave_state.waves_max
 1395              	@ armwave.c:248:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 247:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 248:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1396              		.loc 1 248 68 view .LVU416
 1397 0598 0634A0E1 		lsl	r3, r6, #8	@ _9, target_width,
 1398              	.LVL109:
 1399              	@ armwave.c:245:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 245:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1400              		.loc 1 245 27 view .LVU417
 1401 059c 242084E5 		str	r2, [r4, #36]	@ waves_max, g_armwave_state.waves
 1402              	@ armwave.c:242:     g_armwave_state.vscale = target_height / 256;
 242:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1403              		.loc 1 242 44 view .LVU418
 1404 05a0 2124A0E1 		lsr	r2, r1, #8	@ tmp180, target_height,
 1405              	.LVL110:
 1406              	@ armwave.c:241:     g_armwave_state.xstride = target_height;
 241:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1407              		.loc 1 241 29 view .LVU419
 1408 05a4 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 242:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1409              		.loc 1 242 5 is_stmt 1 view .LVU420
 1410              	@ armwave.c:250:     g_armwave_state.target_height = target_height;
 249:armwave.c     ****     g_armwave_state.target_width = target_width;
 250:armwave.c     ****     g_armwave_state.target_height = target_height;
 1411              		.loc 1 250 35 is_stmt 0 view .LVU421
 1412 05a8 481084E5 		str	r1, [r4, #72]	@ target_height, g_armwave_state.target_height
 1413              	@ armwave.c:246:     g_armwave_state.size = target_height * target_width;
 246:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1414              		.loc 1 246 26 view .LVU422
 1415 05ac 400084E5 		str	r0, [r4, #64]	@ tmp185, g_armwave_state.size
 1416              	@ armwave.c:253:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 251:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 252:armwave.c     **** 
 253:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1417              		.loc 1 253 5 view .LVU423
 1418 05b0 0310A0E1 		mov	r1, r3	@, _9
 1419              	@ armwave.c:247:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 247:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1420              		.loc 1 247 37 view .LVU424
 1421 05b4 01CCA0E3 		mov	ip, #256	@ tmp187,
 1422              	@ armwave.c:242:     g_armwave_state.vscale = target_height / 256;
 242:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1423              		.loc 1 242 28 view .LVU425
 1424 05b8 1C2084E5 		str	r2, [r4, #28]	@ tmp180, g_armwave_state.vscale
 243:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1425              		.loc 1 243 5 is_stmt 1 view .LVU426
 244:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1426              		.loc 1 244 5 view .LVU427
 245:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1427              		.loc 1 245 5 view .LVU428
 246:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1428              		.loc 1 246 5 view .LVU429
 247:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1429              		.loc 1 247 5 view .LVU430
 1430              	@ armwave.c:253:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1431              		.loc 1 253 5 is_stmt 0 view .LVU431
 1432 05bc 64019FE5 		ldr	r0, .L104+12	@,
 1433              	@ armwave.c:251:     g_armwave_state.wave_length = start_point - end_point;
 251:armwave.c     **** 
 1434              		.loc 1 251 47 view .LVU432
 1435 05c0 052047E0 		sub	r2, r7, r5	@ tmp192, start_point, end_point
 1436              	@ armwave.c:248:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 248:armwave.c     ****     g_armwave_state.target_width = target_width;
 1437              		.loc 1 248 34 view .LVU433
 1438 05c4 3C3084E5 		str	r3, [r4, #60]	@ _9, g_armwave_state.ch_buff_size
 1439              	@ armwave.c:249:     g_armwave_state.target_width = target_width;
 249:armwave.c     ****     g_armwave_state.target_height = target_height;
 1440              		.loc 1 249 34 view .LVU434
 1441 05c8 446084E5 		str	r6, [r4, #68]	@ target_width, g_armwave_state.target_width
 1442              	@ armwave.c:247:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 247:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1443              		.loc 1 247 37 view .LVU435
 1444 05cc 2CC084E5 		str	ip, [r4, #44]	@ tmp187, g_armwave_state.bitdepth_height
 248:armwave.c     ****     g_armwave_state.target_width = target_width;
 1445              		.loc 1 248 5 is_stmt 1 view .LVU436
 249:armwave.c     ****     g_armwave_state.target_height = target_height;
 1446              		.loc 1 249 5 view .LVU437
 250:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 1447              		.loc 1 250 5 view .LVU438
 251:armwave.c     **** 
 1448              		.loc 1 251 5 view .LVU439
 1449              	@ armwave.c:251:     g_armwave_state.wave_length = start_point - end_point;
 251:armwave.c     **** 
 1450              		.loc 1 251 33 is_stmt 0 view .LVU440
 1451 05d0 382084E5 		str	r2, [r4, #56]	@ tmp192, g_armwave_state.wave_length
 1452              		.loc 1 253 5 is_stmt 1 view .LVU441
 1453 05d4 FEFFFFEB 		bl	printf		@
 1454              	.LVL111:
 254:armwave.c     **** 
 255:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 256:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 257:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 258:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1455              		.loc 1 258 5 view .LVU442
 1456              	@ armwave.c:260:     if(g_armwave_state.ch1_buffer != NULL)
 259:armwave.c     **** 
 260:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1457              		.loc 1 260 23 is_stmt 0 view .LVU443
 1458 05d8 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 1459              	@ armwave.c:258:     g_armwave_state.slice_height = 64;  
 258:armwave.c     **** 
 1460              		.loc 1 258 34 view .LVU444
 1461 05dc 4030A0E3 		mov	r3, #64	@ tmp195,
 1462              	@ armwave.c:260:     if(g_armwave_state.ch1_buffer != NULL)
 1463              		.loc 1 260 7 view .LVU445
 1464 05e0 000050E3 		cmp	r0, #0	@ _11,
 1465              	@ armwave.c:258:     g_armwave_state.slice_height = 64;  
 258:armwave.c     **** 
 1466              		.loc 1 258 34 view .LVU446
 1467 05e4 303084E5 		str	r3, [r4, #48]	@ tmp195, g_armwave_state.slice_height
 1468              		.loc 1 260 5 is_stmt 1 view .LVU447
 1469              	@ armwave.c:260:     if(g_armwave_state.ch1_buffer != NULL)
 1470              		.loc 1 260 7 is_stmt 0 view .LVU448
 1471 05e8 0000000A 		beq	.L88		@,
 261:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1472              		.loc 1 261 9 is_stmt 1 view .LVU449
 1473 05ec FEFFFFEB 		bl	free		@
 1474              	.LVL112:
 1475              	.L88:
 262:armwave.c     **** 
 263:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1476              		.loc 1 263 5 view .LVU450
 1477              	@ armwave.c:263:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1478              		.loc 1 263 34 is_stmt 0 view .LVU451
 1479 05f0 0110A0E3 		mov	r1, #1	@,
 1480 05f4 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.ch_buff_size
 1481 05f8 FEFFFFEB 		bl	calloc		@
 1482              	.LVL113:
 1483              	@ armwave.c:265:     assert(g_armwave_state.ch1_buffer != NULL);
 264:armwave.c     **** 
 265:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1484              		.loc 1 265 5 view .LVU452
 1485 05fc 000050E3 		cmp	r0, #0	@ tmp199,
 1486              	@ armwave.c:263:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 263:armwave.c     **** 
 1487              		.loc 1 263 32 view .LVU453
 1488 0600 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1489              		.loc 1 265 5 is_stmt 1 view .LVU454
 1490 0604 3500000A 		beq	.L102		@,
 266:armwave.c     **** 
 267:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 268:armwave.c     ****     length = end_point - start_point;
 1491              		.loc 1 268 5 view .LVU455
 1492              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1493              		.loc 1 269 34 is_stmt 0 view .LVU456
 1494 0608 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1495              	@ armwave.c:268:     length = end_point - start_point;
 268:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1496              		.loc 1 268 12 view .LVU457
 1497 060c 075045E0 		sub	r5, r5, r7	@ length, end_point, start_point
 1498              	.LVL114:
 1499              		.loc 1 269 5 is_stmt 1 view .LVU458
 1500              	@ armwave.c:271:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 270:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 271:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1501              		.loc 1 271 40 is_stmt 0 view .LVU459
 1502 0610 8500A0E1 		lsl	r0, r5, #1	@, length,
 1503              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1504              		.loc 1 269 34 view .LVU460
 1505 0614 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp207, target_width
 1506              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1507              		.loc 1 269 31 view .LVU461
 1508 0618 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1509 061c 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp206, length
 1510              	@ armwave.c:270:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 270:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1511              		.loc 1 270 60 view .LVU462
 1512 0620 0C7AD4ED 		vldr.32	s15, [r4, #48]	@ int	@ tmp237, g_armwave_state.slice_height
 1513 0624 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp210, tmp237
 1514              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1515              		.loc 1 269 22 view .LVU463
 1516 0628 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp206, tmp207
 1517              	.LVL115:
 270:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1518              		.loc 1 270 5 is_stmt 1 view .LVU464
 1519              	@ armwave.c:270:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 270:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1520              		.loc 1 270 60 is_stmt 0 view .LVU465
 1521 062c 887A67EE 		vmul.f32	s15, s15, s16	@ tmp212, tmp210, points_per_pixel
 1522              	@ armwave.c:270:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 270:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1523              		.loc 1 270 41 view .LVU466
 1524 0630 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp213, tmp212
 1525 0634 0D7AC4ED 		vstr.32	s15, [r4, #52]	@ int	@ tmp213, g_armwave_state.slice_record_height
 1526              		.loc 1 271 5 is_stmt 1 view .LVU467
 1527              	@ armwave.c:271:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1528              		.loc 1 271 40 is_stmt 0 view .LVU468
 1529 0638 FEFFFFEB 		bl	malloc		@
 1530              	.LVL116:
 1531              	@ armwave.c:273:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 272:armwave.c     **** 
 273:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1532              		.loc 1 273 5 view .LVU469
 1533 063c 000050E3 		cmp	r0, #0	@ tmp215,
 1534              	@ armwave.c:271:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 271:armwave.c     **** 
 1535              		.loc 1 271 38 view .LVU470
 1536 0640 700084E5 		str	r0, [r4, #112]	@ tmp215, g_armwave_state.xcoord_to_xpixel
 1537              		.loc 1 273 5 is_stmt 1 view .LVU471
 1538 0644 2A00000A 		beq	.L103		@,
 1539              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 275:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 276:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1540              		.loc 1 276 54 is_stmt 0 view .LVU472
 1541 0648 337ADFED 		vldr.32	s15, .L104	@ tmp222,
 1542 064c 020040E2 		sub	r0, r0, #2	@ ivtmp.89, tmp215,
 1543              	@ armwave.c:275:     for(xx = 0; xx < length; xx++) {
 275:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1544              		.loc 1 275 12 view .LVU473
 1545 0650 0030A0E3 		mov	r3, #0	@ xx,
 1546              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1547              		.loc 1 276 54 view .LVU474
 1548 0654 887A87EE 		vdiv.f32	s14, s15, s16	@ _22, tmp222, points_per_pixel
 1549              	.L91:
 1550              	.LVL117:
 1551              		.loc 1 276 9 is_stmt 1 discriminator 3 view .LVU475
 1552              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1553              		.loc 1 276 74 is_stmt 0 discriminator 3 view .LVU476
 1554 0658 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1555              	@ armwave.c:275:     for(xx = 0; xx < length; xx++) {
 275:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1556              		.loc 1 275 32 discriminator 3 view .LVU477
 1557 065c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1558              	.LVL118:
 1559              	@ armwave.c:275:     for(xx = 0; xx < length; xx++) {
 275:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1560              		.loc 1 275 5 discriminator 3 view .LVU478
 1561 0660 030055E1 		cmp	r5, r3	@ length, xx
 1562              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1563              		.loc 1 276 74 discriminator 3 view .LVU479
 1564 0664 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp223, xx
 1565 0668 877A67EE 		vmul.f32	s15, s15, s14	@ tmp224, tmp223, _22
 1566              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1567              		.loc 1 276 46 discriminator 3 view .LVU480
 1568 066c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp225, tmp224
 1569 0670 902A17EE 		vmov	r2, s15	@ int	@ tmp225, tmp225
 1570 0674 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp225, MEM[base: _79, offset: 0B]
 1571              	@ armwave.c:275:     for(xx = 0; xx < length; xx++) {
 275:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1572              		.loc 1 275 5 discriminator 3 view .LVU481
 1573 0678 F6FFFF1A 		bne	.L91		@,
 277:armwave.c     **** 
 278:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 279:armwave.c     ****     }
 280:armwave.c     **** 
 281:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1574              		.loc 1 281 5 is_stmt 1 view .LVU482
 1575              	@ armwave.c:281:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1576              		.loc 1 281 34 is_stmt 0 view .LVU483
 1577 067c 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.size, g_armwave_state.size
 1578 0680 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1579 0684 FEFFFFEB 		bl	malloc		@
 1580              	.LVL119:
 1581              	@ armwave.c:282: }
 282:armwave.c     **** }
 1582              		.loc 1 282 1 view .LVU484
 1583 0688 028BBDEC 		vldm	sp!, {d8}	@
 1584              		.cfi_remember_state
 1585              		.cfi_restore 80
 1586              		.cfi_restore 81
 1587              		.cfi_def_cfa_offset 24
 1588              	.LVL120:
 1589              	@ armwave.c:281:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 281:armwave.c     **** }
 1590              		.loc 1 281 32 view .LVU485
 1591 068c 540084E5 		str	r0, [r4, #84]	@, g_armwave_state.out_pixbuf
 1592              	@ armwave.c:282: }
 1593              		.loc 1 282 1 view .LVU486
 1594 0690 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1595              	.LVL121:
 1596              	.L83:
 1597              		.cfi_restore_state
 226:armwave.c     ****         g_armwave_state.row_shift = 8;
 1598              		.loc 1 226 5 is_stmt 1 view .LVU487
 1599              	@ armwave.c:226:     if(target_height == 256) {
 226:armwave.c     ****         g_armwave_state.row_shift = 8;
 1600              		.loc 1 226 7 is_stmt 0 view .LVU488
 1601 0694 010C51E3 		cmp	r1, #256	@ target_height,
 227:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1602              		.loc 1 227 9 is_stmt 1 view .LVU489
 1603              	@ armwave.c:227:         g_armwave_state.row_shift = 8;
 227:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1604              		.loc 1 227 35 is_stmt 0 view .LVU490
 1605 0698 80409FE5 		ldr	r4, .L104+4	@ tmp231,
 1606              	@ armwave.c:231:         g_armwave_state.row_mask = 0x1ff;
 231:armwave.c     ****     } else if(target_height == 1024) {
 1607              		.loc 1 231 34 view .LVU491
 1608 069c 88009F15 		ldrne	r0, .L104+16	@ tmp169,
 1609              	@ armwave.c:227:         g_armwave_state.row_shift = 8;
 227:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1610              		.loc 1 227 35 view .LVU492
 1611 06a0 08C0A003 		moveq	ip, #8	@ tmp163,
 1612              	@ armwave.c:228:         g_armwave_state.row_mask = 0x0ff;
 228:armwave.c     ****     } else if(target_height == 512) {
 1613              		.loc 1 228 34 view .LVU493
 1614 06a4 FF00A003 		moveq	r0, #255	@ tmp165,
 229:armwave.c     ****         g_armwave_state.row_shift = 9;
 1615              		.loc 1 229 12 is_stmt 1 view .LVU494
 230:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1616              		.loc 1 230 9 view .LVU495
 1617              	@ armwave.c:230:         g_armwave_state.row_shift = 9;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1618              		.loc 1 230 35 is_stmt 0 view .LVU496
 1619 06a8 09C0A013 		movne	ip, #9	@ tmp167,
 1620 06ac 4CC084E5 		str	ip, [r4, #76]	@ tmp167, g_armwave_state.row_shift
 231:armwave.c     ****     } else if(target_height == 1024) {
 1621              		.loc 1 231 9 is_stmt 1 view .LVU497
 1622              	@ armwave.c:231:         g_armwave_state.row_mask = 0x1ff;
 231:armwave.c     ****     } else if(target_height == 1024) {
 1623              		.loc 1 231 34 is_stmt 0 view .LVU498
 1624 06b0 500084E5 		str	r0, [r4, #80]	@ tmp169, g_armwave_state.row_mask
 1625 06b4 B4FFFFEA 		b	.L86		@
 1626              	.L101:
 233:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1627              		.loc 1 233 9 is_stmt 1 view .LVU499
 1628              	@ armwave.c:234:         g_armwave_state.row_mask = 0x3ff;
 234:armwave.c     ****     } else if(target_height == 2048) {
 1629              		.loc 1 234 34 is_stmt 0 view .LVU500
 1630 06b8 70009FE5 		ldr	r0, .L104+20	@ tmp173,
 1631              	@ armwave.c:233:         g_armwave_state.row_shift = 10;
 233:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1632              		.loc 1 233 35 view .LVU501
 1633 06bc 0AC0A0E3 		mov	ip, #10	@ tmp171,
 1634 06c0 4CC084E5 		str	ip, [r4, #76]	@ tmp171, g_armwave_state.row_shift
 234:armwave.c     ****     } else if(target_height == 2048) {
 1635              		.loc 1 234 9 is_stmt 1 view .LVU502
 1636              	@ armwave.c:234:         g_armwave_state.row_mask = 0x3ff;
 234:armwave.c     ****     } else if(target_height == 2048) {
 1637              		.loc 1 234 34 is_stmt 0 view .LVU503
 1638 06c4 500084E5 		str	r0, [r4, #80]	@ tmp173, g_armwave_state.row_mask
 1639 06c8 AFFFFFEA 		b	.L86		@
 1640              	.L100:
 224:armwave.c     **** 
 1641              		.loc 1 224 5 is_stmt 1 discriminator 2 view .LVU504
 1642 06cc 60309FE5 		ldr	r3, .L104+24	@,
 1643              	.LVL122:
 224:armwave.c     **** 
 1644              		.loc 1 224 5 is_stmt 0 discriminator 2 view .LVU505
 1645 06d0 E020A0E3 		mov	r2, #224	@,
 1646              	.LVL123:
 224:armwave.c     **** 
 1647              		.loc 1 224 5 discriminator 2 view .LVU506
 1648 06d4 5C109FE5 		ldr	r1, .L104+28	@,
 1649 06d8 5C009FE5 		ldr	r0, .L104+32	@,
 1650 06dc FEFFFFEB 		bl	__assert_fail		@
 1651              	.LVL124:
 1652              	.L102:
 265:armwave.c     **** 
 1653              		.loc 1 265 5 is_stmt 1 discriminator 1 view .LVU507
 1654 06e0 4C309FE5 		ldr	r3, .L104+24	@,
 1655 06e4 54209FE5 		ldr	r2, .L104+36	@,
 1656 06e8 48109FE5 		ldr	r1, .L104+28	@,
 1657 06ec 50009FE5 		ldr	r0, .L104+40	@,
 1658 06f0 FEFFFFEB 		bl	__assert_fail		@
 1659              	.LVL125:
 1660              	.L103:
 273:armwave.c     **** 
 1661              		.loc 1 273 5 discriminator 1 view .LVU508
 1662 06f4 38309FE5 		ldr	r3, .L104+24	@,
 1663 06f8 48209FE5 		ldr	r2, .L104+44	@,
 1664 06fc 34109FE5 		ldr	r1, .L104+28	@,
 1665 0700 44009FE5 		ldr	r0, .L104+48	@,
 1666 0704 FEFFFFEB 		bl	__assert_fail		@
 1667              	.LVL126:
 1668              	.L99:
 221:armwave.c     **** 
 1669              		.loc 1 221 5 discriminator 1 view .LVU509
 1670 0708 24309FE5 		ldr	r3, .L104+24	@,
 1671              	.LVL127:
 221:armwave.c     **** 
 1672              		.loc 1 221 5 is_stmt 0 discriminator 1 view .LVU510
 1673 070c DD20A0E3 		mov	r2, #221	@,
 1674              	.LVL128:
 221:armwave.c     **** 
 1675              		.loc 1 221 5 discriminator 1 view .LVU511
 1676 0710 20109FE5 		ldr	r1, .L104+28	@,
 1677 0714 34009FE5 		ldr	r0, .L104+52	@,
 1678              	.LVL129:
 221:armwave.c     **** 
 1679              		.loc 1 221 5 discriminator 1 view .LVU512
 1680 0718 FEFFFFEB 		bl	__assert_fail		@
 1681              	.LVL130:
 1682              	.L105:
 1683              		.align	2
 1684              	.L104:
 1685 071c 0000803F 		.word	1065353216
 1686 0720 00000000 		.word	g_armwave_state
 1687 0724 FF070000 		.word	2047
 1688 0728 B8000000 		.word	.LC6
 1689 072c FF010000 		.word	511
 1690 0730 FF030000 		.word	1023
 1691 0734 34000000 		.word	.LANCHOR0+52
 1692 0738 20000000 		.word	.LC2
 1693 073c 58000000 		.word	.LC5
 1694 0740 09010000 		.word	265
 1695 0744 CC000000 		.word	.LC7
 1696 0748 11010000 		.word	273
 1697 074c F0000000 		.word	.LC8
 1698 0750 40000000 		.word	.LC4
 1699              		.cfi_endproc
 1700              	.LFE62:
 1702              		.align	2
 1703              		.global	armwave_set_wave_pointer
 1704              		.syntax unified
 1705              		.arm
 1706              		.fpu vfp
 1708              	armwave_set_wave_pointer:
 1709              	.LVL131:
 1710              	.LFB63:
 283:armwave.c     **** 
 284:armwave.c     **** /*
 285:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 286:armwave.c     ****  * in the future.
 287:armwave.c     ****  */
 288:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 289:armwave.c     **** {
 1711              		.loc 1 289 1 is_stmt 1 view -0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 0
 1714              		@ frame_needed = 0, uses_anonymous_args = 0
 290:armwave.c     ****     assert(wave_buffer != NULL);
 1715              		.loc 1 290 5 view .LVU514
 1716 0754 000050E3 		cmp	r0, #0	@ wave_buffer
 1717              		.loc 1 290 5 is_stmt 0 view .LVU515
 1718 0758 0200000A 		beq	.L111		@,
 291:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1719              		.loc 1 291 5 is_stmt 1 view .LVU516
 1720              	@ armwave.c:291:     g_armwave_state.wave_buffer = wave_buffer;
 1721              		.loc 1 291 33 is_stmt 0 view .LVU517
 1722 075c 1C309FE5 		ldr	r3, .L112	@ tmp116,
 1723 0760 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1724 0764 1EFF2FE1 		bx	lr	@
 1725              	.L111:
 290:armwave.c     ****     assert(wave_buffer != NULL);
 1726              		.loc 1 290 5 is_stmt 1 discriminator 1 view .LVU518
 1727              	@ armwave.c:289: {
 289:armwave.c     ****     assert(wave_buffer != NULL);
 1728              		.loc 1 289 1 is_stmt 0 discriminator 1 view .LVU519
 1729 0768 10402DE9 		push	{r4, lr}	@
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 4, -8
 1732              		.cfi_offset 14, -4
 1733              	@ armwave.c:290:     assert(wave_buffer != NULL);
 290:armwave.c     ****     assert(wave_buffer != NULL);
 1734              		.loc 1 290 5 discriminator 1 view .LVU520
 1735 076c 10309FE5 		ldr	r3, .L112+4	@,
 1736 0770 10209FE5 		ldr	r2, .L112+8	@,
 1737 0774 10109FE5 		ldr	r1, .L112+12	@,
 1738 0778 10009FE5 		ldr	r0, .L112+16	@,
 1739              	.LVL132:
 290:armwave.c     ****     assert(wave_buffer != NULL);
 1740              		.loc 1 290 5 discriminator 1 view .LVU521
 1741 077c FEFFFFEB 		bl	__assert_fail		@
 1742              	.LVL133:
 1743              	.L113:
 1744              		.align	2
 1745              	.L112:
 1746 0780 00000000 		.word	g_armwave_state
 1747 0784 4C000000 		.word	.LANCHOR0+76
 1748 0788 22010000 		.word	290
 1749 078c 20000000 		.word	.LC2
 1750 0790 1C010000 		.word	.LC9
 1751              		.cfi_endproc
 1752              	.LFE63:
 1754              		.align	2
 1755              		.global	armwave_set_wave_pointer_as_testbuf
 1756              		.syntax unified
 1757              		.arm
 1758              		.fpu vfp
 1760              	armwave_set_wave_pointer_as_testbuf:
 1761              	.LFB64:
 292:armwave.c     **** }
 293:armwave.c     **** 
 294:armwave.c     **** /*
 295:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 296:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 297:armwave.c     ****  */
 298:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 299:armwave.c     **** {
 1762              		.loc 1 299 1 is_stmt 1 view -0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 300:armwave.c     ****     g_armwave_state.wave_buffer = &test_wave_buffer;
 1767              		.loc 1 300 5 view .LVU523
 1768              	@ armwave.c:300:     g_armwave_state.wave_buffer = &test_wave_buffer;
 1769              		.loc 1 300 33 is_stmt 0 view .LVU524
 1770 0794 08309FE5 		ldr	r3, .L115	@ tmp110,
 1771 0798 08209FE5 		ldr	r2, .L115+4	@ tmp111,
 1772 079c 142083E5 		str	r2, [r3, #20]	@ tmp111, g_armwave_state.wave_buffer
 1773              	@ armwave.c:301: }
 301:armwave.c     **** }
 1774              		.loc 1 301 1 view .LVU525
 1775 07a0 1EFF2FE1 		bx	lr	@
 1776              	.L116:
 1777              		.align	2
 1778              	.L115:
 1779 07a4 00000000 		.word	g_armwave_state
 1780 07a8 00000000 		.word	test_wave_buffer
 1781              		.cfi_endproc
 1782              	.LFE64:
 1784              		.align	2
 1785              		.global	armwave_set_wave_pointer_u32
 1786              		.syntax unified
 1787              		.arm
 1788              		.fpu vfp
 1790              	armwave_set_wave_pointer_u32:
 1791              	.LVL134:
 1792              	.LFB65:
 302:armwave.c     **** 
 303:armwave.c     **** /*
 304:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 305:armwave.c     ****  * disjointed buffers in the future.
 306:armwave.c     ****  */
 307:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 308:armwave.c     **** {
 1793              		.loc 1 308 1 is_stmt 1 view -0
 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 0
 1796              		@ frame_needed = 0, uses_anonymous_args = 0
 309:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1797              		.loc 1 309 5 view .LVU527
 1798 07ac 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1799              		.loc 1 309 5 is_stmt 0 view .LVU528
 1800 07b0 0200000A 		beq	.L122		@,
 310:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1801              		.loc 1 310 5 is_stmt 1 view .LVU529
 1802              	@ armwave.c:310:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1803              		.loc 1 310 33 is_stmt 0 view .LVU530
 1804 07b4 1C309FE5 		ldr	r3, .L123	@ tmp117,
 1805 07b8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1806 07bc 1EFF2FE1 		bx	lr	@
 1807              	.L122:
 309:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1808              		.loc 1 309 5 is_stmt 1 discriminator 1 view .LVU531
 1809              	@ armwave.c:308: {
 308:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1810              		.loc 1 308 1 is_stmt 0 discriminator 1 view .LVU532
 1811 07c0 10402DE9 		push	{r4, lr}	@
 1812              		.cfi_def_cfa_offset 8
 1813              		.cfi_offset 4, -8
 1814              		.cfi_offset 14, -4
 1815              	@ armwave.c:309:     assert(wave_buffer_ptr != 0);
 309:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1816              		.loc 1 309 5 discriminator 1 view .LVU533
 1817 07c4 10309FE5 		ldr	r3, .L123+4	@,
 1818 07c8 10209FE5 		ldr	r2, .L123+8	@,
 1819 07cc 10109FE5 		ldr	r1, .L123+12	@,
 1820 07d0 10009FE5 		ldr	r0, .L123+16	@,
 1821              	.LVL135:
 309:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1822              		.loc 1 309 5 discriminator 1 view .LVU534
 1823 07d4 FEFFFFEB 		bl	__assert_fail		@
 1824              	.LVL136:
 1825              	.L124:
 1826              		.align	2
 1827              	.L123:
 1828 07d8 00000000 		.word	g_armwave_state
 1829 07dc 68000000 		.word	.LANCHOR0+104
 1830 07e0 35010000 		.word	309
 1831 07e4 20000000 		.word	.LC2
 1832 07e8 30010000 		.word	.LC10
 1833              		.cfi_endproc
 1834              	.LFE65:
 1836              		.align	2
 1837              		.global	armwave_clear_buffer
 1838              		.syntax unified
 1839              		.arm
 1840              		.fpu vfp
 1842              	armwave_clear_buffer:
 1843              	.LVL137:
 1844              	.LFB66:
 311:armwave.c     **** }
 312:armwave.c     **** 
 313:armwave.c     **** /*
 314:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 315:armwave.c     ****  */
 316:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 317:armwave.c     **** {
 1845              		.loc 1 317 1 is_stmt 1 view -0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 0
 1848              		@ frame_needed = 0, uses_anonymous_args = 0
 1849              		@ link register save eliminated.
 318:armwave.c     ****     // Flags ignored, only one buffer cleared
 319:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1850              		.loc 1 319 5 view .LVU536
 1851 07ec 0C309FE5 		ldr	r3, .L126	@ tmp113,
 1852 07f0 0010A0E3 		mov	r1, #0	@,
 1853 07f4 3C2093E5 		ldr	r2, [r3, #60]	@, g_armwave_state.ch_buff_size
 1854 07f8 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1855              	.LVL138:
 1856              		.loc 1 319 5 is_stmt 0 view .LVU537
 1857 07fc FEFFFFEA 		b	memset		@
 1858              	.LVL139:
 1859              	.L127:
 1860              		.align	2
 1861              	.L126:
 1862 0800 00000000 		.word	g_armwave_state
 1863              		.cfi_endproc
 1864              	.LFE66:
 1866              		.align	2
 1867              		.global	armwave_set_channel_colour
 1868              		.syntax unified
 1869              		.arm
 1870              		.fpu vfp
 1872              	armwave_set_channel_colour:
 1873              	.LVL140:
 1874              	.LFB67:
 320:armwave.c     **** }
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 326:armwave.c     **** {
 1875              		.loc 1 326 1 is_stmt 1 view -0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 0
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
 1879              		@ link register save eliminated.
 327:armwave.c     ****     // Only 1ch supported for now
 328:armwave.c     ****     switch(ch) {
 1880              		.loc 1 328 5 view .LVU539
 1881 0804 010050E3 		cmp	r0, #1	@ ch,
 329:armwave.c     ****         case 1:
 330:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1882              		.loc 1 330 13 view .LVU540
 1883              	@ armwave.c:330:             g_armwave_state.ch1_color.r = r;
 1884              		.loc 1 330 41 is_stmt 0 view .LVU541
 1885 0808 0C009F05 		ldreq	r0, .L130	@ tmp117,
 1886              	.LVL141:
 1887              		.loc 1 330 41 view .LVU542
 1888 080c B815C001 		strheq	r1, [r0, #88]	@ movhi	@ r, g_armwave_state.ch1_color.r
 331:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1889              		.loc 1 331 13 is_stmt 1 view .LVU543
 1890              	@ armwave.c:331:             g_armwave_state.ch1_color.g = g;
 1891              		.loc 1 331 41 is_stmt 0 view .LVU544
 1892 0810 BA25C001 		strheq	r2, [r0, #90]	@ movhi	@ g, g_armwave_state.ch1_color.g
 332:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1893              		.loc 1 332 13 is_stmt 1 view .LVU545
 1894              	@ armwave.c:332:             g_armwave_state.ch1_color.b = b;
 1895              		.loc 1 332 41 is_stmt 0 view .LVU546
 1896 0814 BC35C001 		strheq	r3, [r0, #92]	@ movhi	@ b, g_armwave_state.ch1_color.b
 333:armwave.c     ****             break;
 1897              		.loc 1 333 13 is_stmt 1 view .LVU547
 1898              	@ armwave.c:335: }
 334:armwave.c     ****     }
 335:armwave.c     **** }
 1899              		.loc 1 335 1 is_stmt 0 view .LVU548
 1900 0818 1EFF2FE1 		bx	lr	@
 1901              	.L131:
 1902              		.align	2
 1903              	.L130:
 1904 081c 00000000 		.word	g_armwave_state
 1905              		.cfi_endproc
 1906              	.LFE67:
 1908              		.align	2
 1909              		.global	armwave_dump_ppm_debug
 1910              		.syntax unified
 1911              		.arm
 1912              		.fpu vfp
 1914              	armwave_dump_ppm_debug:
 1915              	.LVL142:
 1916              	.LFB68:
 336:armwave.c     **** 
 337:armwave.c     **** /*
 338:armwave.c     ****  * Dump a ppm of a buffer to a file.
 339:armwave.c     ****  */
 340:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 341:armwave.c     **** {
 1917              		.loc 1 341 1 is_stmt 1 view -0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 0
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 342:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1921              		.loc 1 342 5 view .LVU550
 1922              	@ armwave.c:341: {
 341:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1923              		.loc 1 341 1 is_stmt 0 view .LVU551
 1924 0820 0130A0E1 		mov	r3, r1	@ fn, fn
 1925 0824 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1926              		.cfi_def_cfa_offset 28
 1927              		.cfi_offset 4, -28
 1928              		.cfi_offset 5, -24
 1929              		.cfi_offset 6, -20
 1930              		.cfi_offset 7, -16
 1931              		.cfi_offset 8, -12
 1932              		.cfi_offset 9, -8
 1933              		.cfi_offset 14, -4
 1934 0828 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1935 082c 0CD04DE2 		sub	sp, sp, #12	@,,
 1936              		.cfi_def_cfa_offset 40
 1937              	@ armwave.c:342:     FILE *fp = fopen(fn, "wb");
 1938              		.loc 1 342 16 view .LVU552
 1939 0830 D4109FE5 		ldr	r1, .L144	@,
 1940              	.LVL143:
 1941              		.loc 1 342 16 view .LVU553
 1942 0834 0300A0E1 		mov	r0, r3	@, fn
 1943              	.LVL144:
 1944              		.loc 1 342 16 view .LVU554
 1945 0838 FEFFFFEB 		bl	fopen64		@
 1946              	.LVL145:
 1947              	@ armwave.c:349:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 343:armwave.c     ****     uint32_t data;
 344:armwave.c     ****     int xx, yy;
 345:armwave.c     **** 
 346:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 347:armwave.c     **** 
 348:armwave.c     ****     fputs("P3\n", fp);
 349:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1948              		.loc 1 349 5 view .LVU555
 1949 083c CC609FE5 		ldr	r6, .L144+4	@ tmp154,
 1950              	@ armwave.c:348:     fputs("P3\n", fp);
 348:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1951              		.loc 1 348 5 view .LVU556
 1952 0840 0320A0E3 		mov	r2, #3	@,
 1953 0844 0110A0E3 		mov	r1, #1	@,
 1954              	@ armwave.c:342:     FILE *fp = fopen(fn, "wb");
 342:armwave.c     ****     uint32_t data;
 1955              		.loc 1 342 16 view .LVU557
 1956 0848 0070A0E1 		mov	r7, r0	@ fp,
 1957              	.LVL146:
 343:armwave.c     ****     uint32_t data;
 1958              		.loc 1 343 5 is_stmt 1 view .LVU558
 344:armwave.c     **** 
 1959              		.loc 1 344 5 view .LVU559
 348:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1960              		.loc 1 348 5 view .LVU560
 1961 084c 0030A0E1 		mov	r3, r0	@, fp
 1962 0850 BC009FE5 		ldr	r0, .L144+8	@,
 1963              	.LVL147:
 348:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1964              		.loc 1 348 5 is_stmt 0 view .LVU561
 1965 0854 FEFFFFEB 		bl	fwrite		@
 1966              	.LVL148:
 1967              		.loc 1 349 5 is_stmt 1 view .LVU562
 1968 0858 D424C6E1 		ldrd	r2, [r6, #68]	@, tmp154,
 1969 085c B4109FE5 		ldr	r1, .L144+12	@,
 1970 0860 0700A0E1 		mov	r0, r7	@, fp
 1971 0864 FEFFFFEB 		bl	fprintf		@
 1972              	.LVL149:
 350:armwave.c     ****     fputs("255\n", fp);
 1973              		.loc 1 350 5 view .LVU563
 1974 0868 0420A0E3 		mov	r2, #4	@,
 1975 086c 0730A0E1 		mov	r3, r7	@, fp
 1976 0870 0110A0E3 		mov	r1, #1	@,
 1977 0874 A0009FE5 		ldr	r0, .L144+16	@,
 1978 0878 FEFFFFEB 		bl	fwrite		@
 1979              	.LVL150:
 351:armwave.c     **** 
 352:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1980              		.loc 1 352 5 view .LVU564
 1981              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1982              		.loc 1 352 37 is_stmt 0 view .LVU565
 1983 087c 482096E5 		ldr	r2, [r6, #72]	@ prephitmp_57, g_armwave_state.target_height
 1984              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1985              		.loc 1 352 5 view .LVU566
 1986 0880 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1987 0884 1800000A 		beq	.L133		@,
 1988 0888 443096E5 		ldr	r3, [r6, #68]	@ _12, g_armwave_state.target_width
 1989              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 354:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 355:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 356:armwave.c     **** 
 357:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1990              		.loc 1 357 13 view .LVU567
 1991 088c 8C909FE5 		ldr	r9, .L144+20	@ tmp156,
 1992              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1993              		.loc 1 352 12 view .LVU568
 1994 0890 0050A0E3 		mov	r5, #0	@ yy,
 1995              	.LVL151:
 1996              	.L134:
 1997              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1998              		.loc 1 353 9 view .LVU569
 1999 0894 000053E3 		cmp	r3, #0	@ _12,
 2000              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2001              		.loc 1 353 16 view .LVU570
 2002 0898 0040A013 		movne	r4, #0	@ xx,
 2003              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2004              		.loc 1 353 9 view .LVU571
 2005 089c 1600000A 		beq	.L143		@,
 2006              	.LVL152:
 2007              	.L135:
 354:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2008              		.loc 1 354 13 is_stmt 1 discriminator 3 view .LVU572
 2009              	@ armwave.c:354:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 354:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2010              		.loc 1 354 29 is_stmt 0 discriminator 3 view .LVU573
 2011 08a0 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2012              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2013              		.loc 1 357 13 discriminator 3 view .LVU574
 2014 08a4 0910A0E1 		mov	r1, r9	@, tmp156
 2015 08a8 0700A0E1 		mov	r0, r7	@, fp
 2016              	@ armwave.c:354:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 354:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2017              		.loc 1 354 18 discriminator 3 view .LVU575
 2018 08ac 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2019              	.LVL153:
 2020              		.loc 1 357 13 is_stmt 1 discriminator 3 view .LVU576
 2021              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2022              		.loc 1 353 58 is_stmt 0 discriminator 3 view .LVU577
 2023 08b0 014084E2 		add	r4, r4, #1	@ xx, xx,
 2024              	.LVL154:
 2025              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2026              		.loc 1 357 81 discriminator 3 view .LVU578
 2027 08b4 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2028              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2029              		.loc 1 357 61 discriminator 3 view .LVU579
 2030 08b8 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2031              	@ armwave.c:357:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2032              		.loc 1 357 13 discriminator 3 view .LVU580
 2033 08bc 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2034 08c0 7330EFE6 		uxtb	r3, r3	@, tmp146
 2035 08c4 00C08DE5 		str	ip, [sp]	@ tmp151,
 2036 08c8 7220EFE6 		uxtb	r2, r2	@, data
 2037              	.LVL155:
 2038              		.loc 1 357 13 discriminator 3 view .LVU581
 2039 08cc FEFFFFEB 		bl	fprintf		@
 2040              	.LVL156:
 2041              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2042              		.loc 1 353 41 discriminator 3 view .LVU582
 2043 08d0 443096E5 		ldr	r3, [r6, #68]	@ _12, g_armwave_state.target_width
 2044              	@ armwave.c:353:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2045              		.loc 1 353 9 discriminator 3 view .LVU583
 2046 08d4 040053E1 		cmp	r3, r4	@ _12, xx
 2047 08d8 F0FFFF8A 		bhi	.L135		@,
 2048 08dc 482096E5 		ldr	r2, [r6, #72]	@ prephitmp_57, g_armwave_state.target_height
 2049              	.LVL157:
 2050              	.L136:
 2051              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2052              		.loc 1 352 55 discriminator 2 view .LVU584
 2053 08e0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2054              	.LVL158:
 2055              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2056              		.loc 1 352 5 discriminator 2 view .LVU585
 2057 08e4 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2058 08e8 E9FFFF3A 		bcc	.L134		@,
 2059              	.LVL159:
 2060              	.L133:
 358:armwave.c     ****         }
 359:armwave.c     ****     }
 360:armwave.c     **** 
 361:armwave.c     ****     fclose(fp);
 2061              		.loc 1 361 5 is_stmt 1 view .LVU586
 2062 08ec 0700A0E1 		mov	r0, r7	@, fp
 2063              	@ armwave.c:362: }
 362:armwave.c     **** }
 2064              		.loc 1 362 1 is_stmt 0 view .LVU587
 2065 08f0 0CD08DE2 		add	sp, sp, #12	@,,
 2066              		.cfi_remember_state
 2067              		.cfi_def_cfa_offset 28
 2068              		@ sp needed	@
 2069 08f4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2070              		.cfi_restore 14
 2071              		.cfi_restore 9
 2072              		.cfi_restore 8
 2073              		.cfi_restore 7
 2074              		.cfi_restore 6
 2075              		.cfi_restore 5
 2076              		.cfi_restore 4
 2077              		.cfi_def_cfa_offset 0
 2078              	.LVL160:
 2079              	@ armwave.c:361:     fclose(fp);
 361:armwave.c     **** }
 2080              		.loc 1 361 5 view .LVU588
 2081 08f8 FEFFFFEA 		b	fclose		@
 2082              	.LVL161:
 2083              	.L143:
 2084              		.cfi_restore_state
 2085              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2086              		.loc 1 352 55 view .LVU589
 2087 08fc 015085E2 		add	r5, r5, #1	@ yy, yy,
 2088              	.LVL162:
 2089              	@ armwave.c:352:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 352:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2090              		.loc 1 352 5 view .LVU590
 2091 0900 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2092 0904 F5FFFF8A 		bhi	.L136		@,
 2093 0908 F7FFFFEA 		b	.L133		@
 2094              	.L145:
 2095              		.align	2
 2096              	.L144:
 2097 090c 48010000 		.word	.LC11
 2098 0910 00000000 		.word	g_armwave_state
 2099 0914 4C010000 		.word	.LC12
 2100 0918 50010000 		.word	.LC13
 2101 091c 58010000 		.word	.LC14
 2102 0920 60010000 		.word	.LC15
 2103              		.cfi_endproc
 2104              	.LFE68:
 2106              		.align	2
 2107              		.global	armwave_test_init
 2108              		.syntax unified
 2109              		.arm
 2110              		.fpu vfp
 2112              	armwave_test_init:
 2113              	.LVL163:
 2114              	.LFB69:
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Initialise some test functionry.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 368:armwave.c     **** {
 2115              		.loc 1 368 1 is_stmt 1 view -0
 2116              		.cfi_startproc
 2117              		@ args = 0, pretend = 0, frame = 0
 2118              		@ frame_needed = 0, uses_anonymous_args = 0
 369:armwave.c     ****     test_create_gamma();
 2119              		.loc 1 369 5 view .LVU592
 2120              	.LBB12:
 2121              	.LBI12:
  45:armwave.c     **** {
 2122              		.loc 1 45 6 view .LVU593
  45:armwave.c     **** {
 2123              		.loc 1 45 6 is_stmt 0 view .LVU594
 2124              	.LBE12:
 2125              	@ armwave.c:368: {
 368:armwave.c     ****     test_create_gamma();
 2126              		.loc 1 368 1 view .LVU595
 2127 0924 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2128              		.cfi_def_cfa_offset 32
 2129              		.cfi_offset 4, -32
 2130              		.cfi_offset 5, -28
 2131              		.cfi_offset 6, -24
 2132              		.cfi_offset 7, -20
 2133              		.cfi_offset 8, -16
 2134              		.cfi_offset 9, -12
 2135              		.cfi_offset 10, -8
 2136              		.cfi_offset 14, -4
 2137 0928 068B2DED 		vpush.64	{d8, d9, d10}	@
 2138              		.cfi_def_cfa_offset 56
 2139              		.cfi_offset 80, -56
 2140              		.cfi_offset 81, -52
 2141              		.cfi_offset 82, -48
 2142              		.cfi_offset 83, -44
 2143              		.cfi_offset 84, -40
 2144              		.cfi_offset 85, -36
 2145 092c 7C429FE5 		ldr	r4, .L171+24	@ ivtmp.108,
 2146              	.LBB15:
 2147              	.LBB13:
 2148              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2149              		.loc 1 51 32 view .LVU596
 2150 0930 9CAA9FED 		vldr.32	s20, .L171+16	@ tmp171,
 2151              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2152              		.loc 1 51 26 view .LVU597
 2153 0934 979B9FED 		vldr.64	d9, .L171	@ tmp270,
 2154              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2155              		.loc 1 51 49 view .LVU598
 2156 0938 988B9FED 		vldr.64	d8, .L171+8	@ tmp174,
 2157 093c 01C084E2 		add	ip, r4, #1	@ _107, ivtmp.108,
 2158              	.LBE13:
 2159              	.LBE15:
 2160              	@ armwave.c:368: {
 368:armwave.c     ****     test_create_gamma();
 2161              		.loc 1 368 1 view .LVU599
 2162 0940 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2163 0944 0190A0E1 		mov	r9, r1	@ nwaves, nwaves
 2164 0948 0270A0E1 		mov	r7, r2	@ render_width, render_width
 2165 094c 0350A0E1 		mov	r5, r3	@ render_height, render_height
 2166 0950 01AC84E2 		add	r10, r4, #256	@ _106, ivtmp.108,
 2167 0954 01806CE2 		rsb	r8, ip, #1	@ tmp268, _107,
 2168              	.LVL164:
 2169              	.L147:
 2170              	.LBB16:
 2171              	.LBB14:
  51:armwave.c     ****     }
 2172              		.loc 1 51 9 is_stmt 1 view .LVU600
 2173              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2174              		.loc 1 51 32 is_stmt 0 view .LVU601
 2175 0958 043088E0 		add	r3, r8, r4	@ tmp168, tmp268, ivtmp.108
 2176              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2177              		.loc 1 51 26 view .LVU602
 2178 095c 491BB0EE 		vmov.f64	d1, d9	@, tmp270
 2179              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2180              		.loc 1 51 32 view .LVU603
 2181 0960 903A07EE 		vmov	s15, r3	@ int	@ tmp168, tmp168
 2182 0964 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp169, tmp168
 2183 0968 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp170, tmp169, tmp171
 2184              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2185              		.loc 1 51 26 view .LVU604
 2186 096c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp170
 2187 0970 FEFFFFEB 		bl	pow		@
 2188              	.LVL165:
 2189              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2190              		.loc 1 51 49 view .LVU605
 2191 0974 080B20EE 		vmul.f64	d0, d0, d8	@ tmp173,, tmp174
 2192              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2193              		.loc 1 51 24 view .LVU606
 2194 0978 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp175, tmp173
 2195 097c 903A17EE 		vmov	r3, s15	@ int	@ tmp175, tmp175
 2196 0980 0130E4E5 		strb	r3, [r4, #1]!	@ tmp175, MEM[base: _108, offset: 0B]
 2197              	.LVL166:
 2198              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2199              		.loc 1 50 5 view .LVU607
 2200 0984 0A0054E1 		cmp	r4, r10	@ ivtmp.108, _106
 2201 0988 F2FFFF1A 		bne	.L147		@,
 2202              	.LVL167:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2203              		.loc 1 50 5 view .LVU608
 2204              	.LBE14:
 2205              	.LBE16:
 370:armwave.c     **** 
 371:armwave.c     ****     // make ch1 yellowish by default
 372:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2206              		.loc 1 372 5 is_stmt 1 view .LVU609
 2207              	.LBB17:
 2208              	.LBI17:
 325:armwave.c     **** {
 2209              		.loc 1 325 6 view .LVU610
 2210              	.LBB18:
 328:armwave.c     ****         case 1:
 2211              		.loc 1 328 5 view .LVU611
 330:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2212              		.loc 1 330 13 view .LVU612
 331:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2213              		.loc 1 331 13 view .LVU613
 2214              	@ armwave.c:330:             g_armwave_state.ch1_color.r = r;
 330:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2215              		.loc 1 330 41 is_stmt 0 view .LVU614
 2216 098c 20429FE5 		ldr	r4, .L171+28	@ tmp269,
 2217              	.LBE18:
 2218              	.LBE17:
 2219              	@ armwave.c:374:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 373:armwave.c     **** 
 374:armwave.c     ****     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2220              		.loc 1 374 41 view .LVU615
 2221 0990 990608E0 		mul	r8, r9, r6	@ _1, nwaves, wave_size
 2222              	.LBB22:
 2223              	.LBB19:
 2224              	@ armwave.c:330:             g_armwave_state.ch1_color.r = r;
 330:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2225              		.loc 1 330 41 view .LVU616
 2226 0994 1C229FE5 		ldr	r2, .L171+32	@ tmp178,
 2227              	@ armwave.c:332:             g_armwave_state.ch1_color.b = b;
 332:armwave.c     ****             break;
 2228              		.loc 1 332 41 view .LVU617
 2229 0998 FA30A0E3 		mov	r3, #250	@ tmp181,
 2230              	.LBE19:
 2231              	.LBE22:
 2232              	@ armwave.c:374:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2233              		.loc 1 374 24 view .LVU618
 2234 099c 0800A0E1 		mov	r0, r8	@, _1
 2235              	.LBB23:
 2236              	.LBB20:
 2237              	@ armwave.c:330:             g_armwave_state.ch1_color.r = r;
 330:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2238              		.loc 1 330 41 view .LVU619
 2239 09a0 582084E5 		str	r2, [r4, #88]	@ tmp178, MEM[(short int *)&g_armwave_state + 88B]
 332:armwave.c     ****             break;
 2240              		.loc 1 332 13 is_stmt 1 view .LVU620
 2241              	.LBE20:
 2242              	.LBE23:
 2243              	@ armwave.c:374:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2244              		.loc 1 374 24 is_stmt 0 view .LVU621
 2245 09a4 0110A0E3 		mov	r1, #1	@,
 2246              	.LBB24:
 2247              	.LBB21:
 2248              	@ armwave.c:332:             g_armwave_state.ch1_color.b = b;
 332:armwave.c     ****             break;
 2249              		.loc 1 332 41 view .LVU622
 2250 09a8 BC35C4E1 		strh	r3, [r4, #92]	@ movhi	@ tmp181, g_armwave_state.ch1_color.b
 333:armwave.c     ****     }
 2251              		.loc 1 333 13 is_stmt 1 view .LVU623
 2252              	.LVL168:
 333:armwave.c     ****     }
 2253              		.loc 1 333 13 is_stmt 0 view .LVU624
 2254              	.LBE21:
 2255              	.LBE24:
 2256              		.loc 1 374 5 is_stmt 1 view .LVU625
 2257              	@ armwave.c:374:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2258              		.loc 1 374 24 is_stmt 0 view .LVU626
 2259 09ac FEFFFFEB 		bl	calloc		@
 2260              	.LVL169:
 2261              	@ armwave.c:374:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2262              		.loc 1 374 22 view .LVU627
 2263 09b0 04329FE5 		ldr	r3, .L171+36	@ tmp183,
 2264              	@ armwave.c:376:     if(test_wave_buffer == NULL) {
 375:armwave.c     **** 
 376:armwave.c     ****     if(test_wave_buffer == NULL) {
 2265              		.loc 1 376 7 view .LVU628
 2266 09b4 000050E3 		cmp	r0, #0	@ tmp182,
 2267              	@ armwave.c:374:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 374:armwave.c     **** 
 2268              		.loc 1 374 22 view .LVU629
 2269 09b8 000083E5 		str	r0, [r3]	@ tmp182, test_wave_buffer
 2270              		.loc 1 376 5 is_stmt 1 view .LVU630
 2271              	@ armwave.c:376:     if(test_wave_buffer == NULL) {
 2272              		.loc 1 376 7 is_stmt 0 view .LVU631
 2273 09bc 5800000A 		beq	.L165		@,
 377:armwave.c     ****         printf("armwave_test_init: failed to allocate test wave buffer (%d bytes)\n", wave_size * n
 378:armwave.c     ****         return;
 379:armwave.c     ****     }
 380:armwave.c     **** 
 381:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2274              		.loc 1 381 5 is_stmt 1 view .LVU632
 2275              	.LVL170:
 2276              	.LBB25:
 2277              	.LBI25:
 215:armwave.c     **** {
 2278              		.loc 1 215 6 view .LVU633
 2279              	.LBB26:
 217:armwave.c     ****     float points_per_pixel;
 2280              		.loc 1 217 5 view .LVU634
 218:armwave.c     **** 
 2281              		.loc 1 218 5 view .LVU635
 221:armwave.c     **** 
 2282              		.loc 1 221 5 view .LVU636
 2283 09c0 000056E3 		cmp	r6, #0	@ wave_size,
 2284 09c4 6400000A 		beq	.L166		@,
 224:armwave.c     **** 
 2285              		.loc 1 224 5 view .LVU637
 2286 09c8 013C45E2 		sub	r3, r5, #256	@ tmp189, render_height,
 2287 09cc 013CD3E3 		bics	r3, r3, #256	@ tmp273, tmp189,
 2288 09d0 4C00000A 		beq	.L150		@,
 2289 09d4 013B45E2 		sub	r3, r5, #1024	@ tmp191, render_height,
 2290 09d8 013BD3E3 		bics	r3, r3, #1024	@ tmp274, tmp191,
 2291 09dc 6800001A 		bne	.L167		@,
 226:armwave.c     ****         g_armwave_state.row_shift = 8;
 2292              		.loc 1 226 5 view .LVU638
 232:armwave.c     ****         g_armwave_state.row_shift = 10;
 2293              		.loc 1 232 12 view .LVU639
 2294              	@ armwave.c:232:     } else if(target_height == 1024) {
 232:armwave.c     ****         g_armwave_state.row_shift = 10;
 2295              		.loc 1 232 14 is_stmt 0 view .LVU640
 2296 09e0 010B55E3 		cmp	r5, #1024	@ render_height,
 2297 09e4 5300000A 		beq	.L168		@,
 235:armwave.c     ****         g_armwave_state.row_shift = 11;
 2298              		.loc 1 235 12 is_stmt 1 view .LVU641
 2299              	@ armwave.c:235:     } else if(target_height == 2048) {
 235:armwave.c     ****         g_armwave_state.row_shift = 11;
 2300              		.loc 1 235 14 is_stmt 0 view .LVU642
 2301 09e8 020B55E3 		cmp	r5, #2048	@ render_height,
 236:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 2302              		.loc 1 236 9 is_stmt 1 view .LVU643
 2303              	@ armwave.c:236:         g_armwave_state.row_shift = 11;
 236:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 2304              		.loc 1 236 35 is_stmt 0 view .LVU644
 2305 09ec 0B20A003 		moveq	r2, #11	@ tmp212,
 2306 09f0 C8319F05 		ldreq	r3, .L171+40	@ tmp210,
 2307 09f4 FC24C401 		strdeq	r2, [r4, #76]	@, tmp269,
 237:armwave.c     ****     } 
 2308              		.loc 1 237 9 is_stmt 1 view .LVU645
 2309              	.L153:
 241:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 2310              		.loc 1 241 5 view .LVU646
 2311              	@ armwave.c:246:     g_armwave_state.size = target_height * target_width;
 246:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2312              		.loc 1 246 42 is_stmt 0 view .LVU647
 2313 09f8 950702E0 		mul	r2, r5, r7	@ tmp220, render_height, render_width
 2314              	@ armwave.c:248:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 248:armwave.c     ****     g_armwave_state.target_width = target_width;
 2315              		.loc 1 248 68 view .LVU648
 2316 09fc 0734A0E1 		lsl	r3, r7, #8	@ _39, render_width,
 2317              	@ armwave.c:241:     g_armwave_state.xstride = target_height;
 241:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 2318              		.loc 1 241 29 view .LVU649
 2319 0a00 185084E5 		str	r5, [r4, #24]	@ render_height, g_armwave_state.xstride
 242:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2320              		.loc 1 242 5 is_stmt 1 view .LVU650
 2321              	@ armwave.c:250:     g_armwave_state.target_height = target_height;
 250:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 2322              		.loc 1 250 35 is_stmt 0 view .LVU651
 2323 0a04 485084E5 		str	r5, [r4, #72]	@ render_height, g_armwave_state.target_height
 2324              	@ armwave.c:246:     g_armwave_state.size = target_height * target_width;
 246:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2325              		.loc 1 246 26 view .LVU652
 2326 0a08 402084E5 		str	r2, [r4, #64]	@ tmp220, g_armwave_state.size
 2327              	@ armwave.c:253:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 253:armwave.c     **** 
 2328              		.loc 1 253 5 view .LVU653
 2329 0a0c 0310A0E1 		mov	r1, r3	@, _39
 2330              	@ armwave.c:247:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 247:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2331              		.loc 1 247 37 view .LVU654
 2332 0a10 012CA0E3 		mov	r2, #256	@ tmp222,
 2333              	@ armwave.c:248:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 248:armwave.c     ****     g_armwave_state.target_width = target_width;
 2334              		.loc 1 248 34 view .LVU655
 2335 0a14 3C3084E5 		str	r3, [r4, #60]	@ _39, g_armwave_state.ch_buff_size
 2336              	@ armwave.c:242:     g_armwave_state.vscale = target_height / 256;
 242:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2337              		.loc 1 242 44 view .LVU656
 2338 0a18 2554A0E1 		lsr	r5, r5, #8	@ tmp215, render_height,
 2339              	.LVL171:
 2340              	@ armwave.c:251:     g_armwave_state.wave_length = start_point - end_point;
 251:armwave.c     **** 
 2341              		.loc 1 251 47 view .LVU657
 2342 0a1c 003066E2 		rsb	r3, r6, #0	@ tmp227, wave_size
 2343              	@ armwave.c:253:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 253:armwave.c     **** 
 2344              		.loc 1 253 5 view .LVU658
 2345 0a20 9C019FE5 		ldr	r0, .L171+44	@,
 2346              	@ armwave.c:251:     g_armwave_state.wave_length = start_point - end_point;
 251:armwave.c     **** 
 2347              		.loc 1 251 33 view .LVU659
 2348 0a24 383084E5 		str	r3, [r4, #56]	@ tmp227, g_armwave_state.wave_length
 2349              	@ armwave.c:243:     g_armwave_state.wave_stride = wave_stride;
 243:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2350              		.loc 1 243 33 view .LVU660
 2351 0a28 206084E5 		str	r6, [r4, #32]	@ wave_size, g_armwave_state.wave_stride
 2352              	@ armwave.c:244:     g_armwave_state.waves_max = waves_max;
 244:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2353              		.loc 1 244 31 view .LVU661
 2354 0a2c 289084E5 		str	r9, [r4, #40]	@ nwaves, g_armwave_state.waves_max
 2355              	@ armwave.c:245:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 245:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2356              		.loc 1 245 27 view .LVU662
 2357 0a30 249084E5 		str	r9, [r4, #36]	@ nwaves, g_armwave_state.waves
 2358              	@ armwave.c:249:     g_armwave_state.target_width = target_width;
 249:armwave.c     ****     g_armwave_state.target_height = target_height;
 2359              		.loc 1 249 34 view .LVU663
 2360 0a34 447084E5 		str	r7, [r4, #68]	@ render_width, g_armwave_state.target_width
 2361              	@ armwave.c:242:     g_armwave_state.vscale = target_height / 256;
 242:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2362              		.loc 1 242 28 view .LVU664
 2363 0a38 1C5084E5 		str	r5, [r4, #28]	@ tmp215, g_armwave_state.vscale
 243:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2364              		.loc 1 243 5 is_stmt 1 view .LVU665
 244:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2365              		.loc 1 244 5 view .LVU666
 245:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2366              		.loc 1 245 5 view .LVU667
 246:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2367              		.loc 1 246 5 view .LVU668
 247:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2368              		.loc 1 247 5 view .LVU669
 2369              	@ armwave.c:247:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 247:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2370              		.loc 1 247 37 is_stmt 0 view .LVU670
 2371 0a3c 2C2084E5 		str	r2, [r4, #44]	@ tmp222, g_armwave_state.bitdepth_height
 248:armwave.c     ****     g_armwave_state.target_width = target_width;
 2372              		.loc 1 248 5 is_stmt 1 view .LVU671
 249:armwave.c     ****     g_armwave_state.target_height = target_height;
 2373              		.loc 1 249 5 view .LVU672
 250:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 2374              		.loc 1 250 5 view .LVU673
 251:armwave.c     **** 
 2375              		.loc 1 251 5 view .LVU674
 253:armwave.c     **** 
 2376              		.loc 1 253 5 view .LVU675
 2377 0a40 FEFFFFEB 		bl	printf		@
 2378              	.LVL172:
 258:armwave.c     **** 
 2379              		.loc 1 258 5 view .LVU676
 2380              	@ armwave.c:260:     if(g_armwave_state.ch1_buffer != NULL)
 260:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2381              		.loc 1 260 23 is_stmt 0 view .LVU677
 2382 0a44 040094E5 		ldr	r0, [r4, #4]	@ _41, g_armwave_state.ch1_buffer
 2383              	@ armwave.c:258:     g_armwave_state.slice_height = 64;  
 258:armwave.c     **** 
 2384              		.loc 1 258 34 view .LVU678
 2385 0a48 4030A0E3 		mov	r3, #64	@ tmp230,
 2386              	@ armwave.c:260:     if(g_armwave_state.ch1_buffer != NULL)
 260:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2387              		.loc 1 260 7 view .LVU679
 2388 0a4c 000050E3 		cmp	r0, #0	@ _41,
 2389              	@ armwave.c:258:     g_armwave_state.slice_height = 64;  
 258:armwave.c     **** 
 2390              		.loc 1 258 34 view .LVU680
 2391 0a50 303084E5 		str	r3, [r4, #48]	@ tmp230, g_armwave_state.slice_height
 260:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2392              		.loc 1 260 5 is_stmt 1 view .LVU681
 2393              	@ armwave.c:260:     if(g_armwave_state.ch1_buffer != NULL)
 260:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2394              		.loc 1 260 7 is_stmt 0 view .LVU682
 2395 0a54 0000000A 		beq	.L155		@,
 261:armwave.c     **** 
 2396              		.loc 1 261 9 is_stmt 1 view .LVU683
 2397 0a58 FEFFFFEB 		bl	free		@
 2398              	.LVL173:
 2399              	.L155:
 263:armwave.c     **** 
 2400              		.loc 1 263 5 view .LVU684
 2401              	@ armwave.c:263:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 263:armwave.c     **** 
 2402              		.loc 1 263 34 is_stmt 0 view .LVU685
 2403 0a5c 0110A0E3 		mov	r1, #1	@,
 2404 0a60 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.ch_buff_size
 2405 0a64 FEFFFFEB 		bl	calloc		@
 2406              	.LVL174:
 2407              	@ armwave.c:265:     assert(g_armwave_state.ch1_buffer != NULL);
 265:armwave.c     **** 
 2408              		.loc 1 265 5 view .LVU686
 2409 0a68 000050E3 		cmp	r0, #0	@ tmp234,
 2410              	@ armwave.c:263:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 263:armwave.c     **** 
 2411              		.loc 1 263 32 view .LVU687
 2412 0a6c 040084E5 		str	r0, [r4, #4]	@ tmp234, g_armwave_state.ch1_buffer
 265:armwave.c     **** 
 2413              		.loc 1 265 5 is_stmt 1 view .LVU688
 2414 0a70 3E00000A 		beq	.L169		@,
 268:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 2415              		.loc 1 268 5 view .LVU689
 2416              	.LVL175:
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2417              		.loc 1 269 5 view .LVU690
 2418              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2419              		.loc 1 269 34 is_stmt 0 view .LVU691
 2420 0a74 907A07EE 		vmov	s15, r7	@ int	@ render_width, render_width
 2421              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2422              		.loc 1 269 22 view .LVU692
 2423 0a78 906A06EE 		vmov	s13, r6	@ int	@ wave_size, wave_size
 2424              	@ armwave.c:271:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 271:armwave.c     **** 
 2425              		.loc 1 271 40 view .LVU693
 2426 0a7c 8600A0E1 		lsl	r0, r6, #1	@, wave_size,
 2427              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2428              		.loc 1 269 34 view .LVU694
 2429 0a80 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp242, render_width
 2430              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2431              		.loc 1 269 22 view .LVU695
 2432 0a84 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp241, wave_size
 2433              	@ armwave.c:270:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 270:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2434              		.loc 1 270 60 view .LVU696
 2435 0a88 0C7AD4ED 		vldr.32	s15, [r4, #48]	@ int	@ tmp278, g_armwave_state.slice_height
 2436 0a8c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp245, tmp278
 2437              	@ armwave.c:269:     points_per_pixel = length / ((float)(target_width));
 269:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2438              		.loc 1 269 22 view .LVU697
 2439 0a90 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp241, tmp242
 2440              	.LVL176:
 270:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2441              		.loc 1 270 5 is_stmt 1 view .LVU698
 2442              	@ armwave.c:270:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 270:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2443              		.loc 1 270 60 is_stmt 0 view .LVU699
 2444 0a94 887A67EE 		vmul.f32	s15, s15, s16	@ tmp247, tmp245, points_per_pixel
 2445              	@ armwave.c:270:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 270:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2446              		.loc 1 270 41 view .LVU700
 2447 0a98 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp248, tmp247
 2448 0a9c 0D7AC4ED 		vstr.32	s15, [r4, #52]	@ int	@ tmp248, g_armwave_state.slice_record_height
 271:armwave.c     **** 
 2449              		.loc 1 271 5 is_stmt 1 view .LVU701
 2450              	@ armwave.c:271:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 271:armwave.c     **** 
 2451              		.loc 1 271 40 is_stmt 0 view .LVU702
 2452 0aa0 FEFFFFEB 		bl	malloc		@
 2453              	.LVL177:
 2454              	@ armwave.c:273:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 273:armwave.c     **** 
 2455              		.loc 1 273 5 view .LVU703
 2456 0aa4 000050E3 		cmp	r0, #0	@ tmp250,
 2457              	@ armwave.c:271:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 271:armwave.c     **** 
 2458              		.loc 1 271 38 view .LVU704
 2459 0aa8 700084E5 		str	r0, [r4, #112]	@ tmp250, g_armwave_state.xcoord_to_xpixel
 273:armwave.c     **** 
 2460              		.loc 1 273 5 is_stmt 1 view .LVU705
 2461 0aac 2500000A 		beq	.L170		@,
 2462              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 276:armwave.c     **** 
 2463              		.loc 1 276 54 is_stmt 0 view .LVU706
 2464 0ab0 3D7ADFED 		vldr.32	s15, .L171+20	@ tmp257,
 2465 0ab4 020040E2 		sub	r0, r0, #2	@ ivtmp.100, tmp250,
 2466              	@ armwave.c:275:     for(xx = 0; xx < length; xx++) {
 275:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2467              		.loc 1 275 12 view .LVU707
 2468 0ab8 0030A0E3 		mov	r3, #0	@ xx,
 2469              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 276:armwave.c     **** 
 2470              		.loc 1 276 54 view .LVU708
 2471 0abc 887A87EE 		vdiv.f32	s14, s15, s16	@ _54, tmp257, points_per_pixel
 2472              	.L158:
 2473              	.LVL178:
 276:armwave.c     **** 
 2474              		.loc 1 276 9 is_stmt 1 view .LVU709
 2475              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 276:armwave.c     **** 
 2476              		.loc 1 276 74 is_stmt 0 view .LVU710
 2477 0ac0 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 2478              	@ armwave.c:275:     for(xx = 0; xx < length; xx++) {
 275:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2479              		.loc 1 275 32 view .LVU711
 2480 0ac4 013083E2 		add	r3, r3, #1	@ xx, xx,
 2481              	.LVL179:
 2482              	@ armwave.c:275:     for(xx = 0; xx < length; xx++) {
 275:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2483              		.loc 1 275 5 view .LVU712
 2484 0ac8 030056E1 		cmp	r6, r3	@ wave_size, xx
 2485              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 276:armwave.c     **** 
 2486              		.loc 1 276 74 view .LVU713
 2487 0acc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp258, xx
 2488 0ad0 877A67EE 		vmul.f32	s15, s15, s14	@ tmp259, tmp258, _54
 2489              	@ armwave.c:276:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 276:armwave.c     **** 
 2490              		.loc 1 276 46 view .LVU714
 2491 0ad4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp260, tmp259
 2492 0ad8 902A17EE 		vmov	r2, s15	@ int	@ tmp260, tmp260
 2493 0adc B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp260, MEM[base: _36, offset: 0B]
 2494              	@ armwave.c:275:     for(xx = 0; xx < length; xx++) {
 275:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2495              		.loc 1 275 5 view .LVU715
 2496 0ae0 F6FFFF1A 		bne	.L158		@,
 281:armwave.c     **** }
 2497              		.loc 1 281 5 is_stmt 1 view .LVU716
 2498              	@ armwave.c:281:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 281:armwave.c     **** }
 2499              		.loc 1 281 34 is_stmt 0 view .LVU717
 2500 0ae4 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.size, g_armwave_state.size
 2501 0ae8 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 2502 0aec FEFFFFEB 		bl	malloc		@
 2503              	.LVL180:
 281:armwave.c     **** }
 2504              		.loc 1 281 34 view .LVU718
 2505              	.LBE26:
 2506              	.LBE25:
 2507              	@ armwave.c:384: }
 382:armwave.c     **** 
 383:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 384:armwave.c     **** }
 2508              		.loc 1 384 1 view .LVU719
 2509 0af0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2510              		.cfi_remember_state
 2511              		.cfi_restore 84
 2512              		.cfi_restore 85
 2513              		.cfi_restore 82
 2514              		.cfi_restore 83
 2515              		.cfi_restore 80
 2516              		.cfi_restore 81
 2517              		.cfi_def_cfa_offset 32
 2518              	.LVL181:
 2519              	@ armwave.c:383:     printf("armwave version: %s\n", ARMWAVE_VER);
 383:armwave.c     **** }
 2520              		.loc 1 383 5 view .LVU720
 2521 0af4 CC109FE5 		ldr	r1, .L171+48	@,
 2522              	.LBB30:
 2523              	.LBB27:
 2524              	@ armwave.c:281:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 281:armwave.c     **** }
 2525              		.loc 1 281 32 view .LVU721
 2526 0af8 540084E5 		str	r0, [r4, #84]	@, g_armwave_state.out_pixbuf
 2527              	.LVL182:
 281:armwave.c     **** }
 2528              		.loc 1 281 32 view .LVU722
 2529              	.LBE27:
 2530              	.LBE30:
 383:armwave.c     **** }
 2531              		.loc 1 383 5 is_stmt 1 view .LVU723
 2532 0afc C8009FE5 		ldr	r0, .L171+52	@,
 2533              	@ armwave.c:384: }
 2534              		.loc 1 384 1 is_stmt 0 view .LVU724
 2535 0b00 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2536              		.cfi_restore 14
 2537              		.cfi_restore 10
 2538              		.cfi_restore 9
 2539              		.cfi_restore 8
 2540              		.cfi_restore 7
 2541              		.cfi_restore 6
 2542              		.cfi_restore 5
 2543              		.cfi_restore 4
 2544              		.cfi_def_cfa_offset 0
 2545              	.LVL183:
 2546              	@ armwave.c:383:     printf("armwave version: %s\n", ARMWAVE_VER);
 383:armwave.c     **** }
 2547              		.loc 1 383 5 view .LVU725
 2548 0b04 FEFFFFEA 		b	printf		@
 2549              	.LVL184:
 2550              	.L150:
 2551              		.cfi_restore_state
 2552              	.LBB31:
 2553              	.LBB28:
 226:armwave.c     ****         g_armwave_state.row_shift = 8;
 2554              		.loc 1 226 5 is_stmt 1 view .LVU726
 2555              	@ armwave.c:226:     if(target_height == 256) {
 226:armwave.c     ****         g_armwave_state.row_shift = 8;
 2556              		.loc 1 226 7 is_stmt 0 view .LVU727
 2557 0b08 010C55E3 		cmp	r5, #256	@ render_height,
 227:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 2558              		.loc 1 227 9 is_stmt 1 view .LVU728
 2559              	@ armwave.c:228:         g_armwave_state.row_mask = 0x0ff;
 228:armwave.c     ****     } else if(target_height == 512) {
 2560              		.loc 1 228 34 is_stmt 0 view .LVU729
 2561 0b0c 0820A003 		moveq	r2, #8	@ tmp198,
 2562              	@ armwave.c:230:         g_armwave_state.row_shift = 9;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2563              		.loc 1 230 35 view .LVU730
 2564 0b10 B8309F15 		ldrne	r3, .L171+56	@ tmp202,
 2565              	@ armwave.c:228:         g_armwave_state.row_mask = 0x0ff;
 228:armwave.c     ****     } else if(target_height == 512) {
 2566              		.loc 1 228 34 view .LVU731
 2567 0b14 FF30A003 		moveq	r3, #255	@ tmp200,
 229:armwave.c     ****         g_armwave_state.row_shift = 9;
 2568              		.loc 1 229 12 is_stmt 1 view .LVU732
 230:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2569              		.loc 1 230 9 view .LVU733
 2570              	@ armwave.c:230:         g_armwave_state.row_shift = 9;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2571              		.loc 1 230 35 is_stmt 0 view .LVU734
 2572 0b18 0920A013 		movne	r2, #9	@ tmp204,
 2573 0b1c FC24C4E1 		strd	r2, [r4, #76]	@, tmp269,
 231:armwave.c     ****     } else if(target_height == 1024) {
 2574              		.loc 1 231 9 is_stmt 1 view .LVU735
 2575 0b20 B4FFFFEA 		b	.L153		@
 2576              	.LVL185:
 2577              	.L165:
 231:armwave.c     ****     } else if(target_height == 1024) {
 2578              		.loc 1 231 9 is_stmt 0 view .LVU736
 2579              	.LBE28:
 2580              	.LBE31:
 377:armwave.c     ****         return;
 2581              		.loc 1 377 9 is_stmt 1 view .LVU737
 2582              	@ armwave.c:384: }
 2583              		.loc 1 384 1 is_stmt 0 view .LVU738
 2584 0b24 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2585              		.cfi_remember_state
 2586              		.cfi_restore 84
 2587              		.cfi_restore 85
 2588              		.cfi_restore 82
 2589              		.cfi_restore 83
 2590              		.cfi_restore 80
 2591              		.cfi_restore 81
 2592              		.cfi_def_cfa_offset 32
 2593              	@ armwave.c:377:         printf("armwave_test_init: failed to allocate test wave buffer (%d bytes)\
 377:armwave.c     ****         return;
 2594              		.loc 1 377 9 view .LVU739
 2595 0b28 0810A0E1 		mov	r1, r8	@, _1
 2596 0b2c A0009FE5 		ldr	r0, .L171+60	@,
 2597              	@ armwave.c:384: }
 2598              		.loc 1 384 1 view .LVU740
 2599 0b30 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2600              		.cfi_restore 14
 2601              		.cfi_restore 10
 2602              		.cfi_restore 9
 2603              		.cfi_restore 8
 2604              		.cfi_restore 7
 2605              		.cfi_restore 6
 2606              		.cfi_restore 5
 2607              		.cfi_restore 4
 2608              		.cfi_def_cfa_offset 0
 2609              	.LVL186:
 2610              	@ armwave.c:377:         printf("armwave_test_init: failed to allocate test wave buffer (%d bytes)\
 377:armwave.c     ****         return;
 2611              		.loc 1 377 9 view .LVU741
 2612 0b34 FEFFFFEA 		b	printf		@
 2613              	.LVL187:
 2614              	.L168:
 2615              		.cfi_restore_state
 2616              	.LBB32:
 2617              	.LBB29:
 233:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 2618              		.loc 1 233 9 is_stmt 1 view .LVU742
 2619              	@ armwave.c:233:         g_armwave_state.row_shift = 10;
 233:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 2620              		.loc 1 233 35 is_stmt 0 view .LVU743
 2621 0b38 98309FE5 		ldr	r3, .L171+64	@ tmp206,
 2622 0b3c 0A20A0E3 		mov	r2, #10	@ tmp208,
 2623 0b40 FC24C4E1 		strd	r2, [r4, #76]	@, tmp269,
 234:armwave.c     ****     } else if(target_height == 2048) {
 2624              		.loc 1 234 9 is_stmt 1 view .LVU744
 2625 0b44 ABFFFFEA 		b	.L153		@
 2626              	.LVL188:
 2627              	.L170:
 273:armwave.c     **** 
 2628              		.loc 1 273 5 view .LVU745
 2629 0b48 8C309FE5 		ldr	r3, .L171+68	@,
 2630 0b4c 8C209FE5 		ldr	r2, .L171+72	@,
 2631 0b50 8C109FE5 		ldr	r1, .L171+76	@,
 2632 0b54 8C009FE5 		ldr	r0, .L171+80	@,
 2633 0b58 FEFFFFEB 		bl	__assert_fail		@
 2634              	.LVL189:
 2635              	.L166:
 221:armwave.c     **** 
 2636              		.loc 1 221 5 view .LVU746
 2637 0b5c 78309FE5 		ldr	r3, .L171+68	@,
 2638 0b60 DD20A0E3 		mov	r2, #221	@,
 2639 0b64 78109FE5 		ldr	r1, .L171+76	@,
 2640 0b68 7C009FE5 		ldr	r0, .L171+84	@,
 2641 0b6c FEFFFFEB 		bl	__assert_fail		@
 2642              	.LVL190:
 2643              	.L169:
 265:armwave.c     **** 
 2644              		.loc 1 265 5 view .LVU747
 2645 0b70 64309FE5 		ldr	r3, .L171+68	@,
 2646 0b74 74209FE5 		ldr	r2, .L171+88	@,
 2647 0b78 64109FE5 		ldr	r1, .L171+76	@,
 2648 0b7c 70009FE5 		ldr	r0, .L171+92	@,
 2649 0b80 FEFFFFEB 		bl	__assert_fail		@
 2650              	.LVL191:
 2651              	.L167:
 224:armwave.c     **** 
 2652              		.loc 1 224 5 view .LVU748
 2653 0b84 50309FE5 		ldr	r3, .L171+68	@,
 2654 0b88 E020A0E3 		mov	r2, #224	@,
 2655 0b8c 50109FE5 		ldr	r1, .L171+76	@,
 2656 0b90 60009FE5 		ldr	r0, .L171+96	@,
 2657 0b94 FEFFFFEB 		bl	__assert_fail		@
 2658              	.LVL192:
 2659              	.L172:
 2660              		.align	3
 2661              	.L171:
 2662 0b98 000000C0 		.word	-1073741824
 2663 0b9c CCCCEC3F 		.word	1072483532
 2664 0ba0 00000000 		.word	0
 2665 0ba4 00E06F40 		.word	1081073664
 2666 0ba8 00007F43 		.word	1132396544
 2667 0bac 0000803F 		.word	1065353216
 2668 0bb0 FFFFFFFF 		.word	gamma_table-1
 2669 0bb4 00000000 		.word	g_armwave_state
 2670 0bb8 F609F406 		.word	116656630
 2671 0bbc 00000000 		.word	test_wave_buffer
 2672 0bc0 FF070000 		.word	2047
 2673 0bc4 B8000000 		.word	.LC6
 2674 0bc8 00000000 		.word	.LC0
 2675 0bcc 08000000 		.word	.LC1
 2676 0bd0 FF010000 		.word	511
 2677 0bd4 70010000 		.word	.LC16
 2678 0bd8 FF030000 		.word	1023
 2679 0bdc 34000000 		.word	.LANCHOR0+52
 2680 0be0 11010000 		.word	273
 2681 0be4 20000000 		.word	.LC2
 2682 0be8 F0000000 		.word	.LC8
 2683 0bec 40000000 		.word	.LC4
 2684 0bf0 09010000 		.word	265
 2685 0bf4 CC000000 		.word	.LC7
 2686 0bf8 58000000 		.word	.LC5
 2687              	.LBE29:
 2688              	.LBE32:
 2689              		.cfi_endproc
 2690              	.LFE69:
 2692              		.global	__aeabi_uidiv
 2693              		.align	2
 2694              		.global	armwave_test_generate
 2695              		.syntax unified
 2696              		.arm
 2697              		.fpu vfp
 2699              	armwave_test_generate:
 2700              	.LFB70:
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Fill buffers with test funtionry.
 388:armwave.c     ****  */
 389:armwave.c     **** void armwave_test_generate()
 390:armwave.c     **** {
 2701              		.loc 1 390 1 view -0
 2702              		.cfi_startproc
 2703              		@ args = 0, pretend = 0, frame = 0
 2704              		@ frame_needed = 0, uses_anonymous_args = 0
 391:armwave.c     ****     uint32_t yy;
 2705              		.loc 1 391 5 view .LVU750
 392:armwave.c     **** 
 393:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2706              		.loc 1 393 5 view .LVU751
 2707              	@ armwave.c:390: {
 390:armwave.c     ****     uint32_t yy;
 2708              		.loc 1 390 1 is_stmt 0 view .LVU752
 2709 0bfc F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2710              		.cfi_def_cfa_offset 40
 2711              		.cfi_offset 3, -40
 2712              		.cfi_offset 4, -36
 2713              		.cfi_offset 5, -32
 2714              		.cfi_offset 6, -28
 2715              		.cfi_offset 7, -24
 2716              		.cfi_offset 8, -20
 2717              		.cfi_offset 9, -16
 2718              		.cfi_offset 10, -12
 2719              		.cfi_offset 11, -8
 2720              		.cfi_offset 14, -4
 2721              	@ armwave.c:393:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2722              		.loc 1 393 5 view .LVU753
 2723 0c00 0010A0E3 		mov	r1, #0	@,
 2724 0c04 28419FE5 		ldr	r4, .L191	@ tmp269,
 2725 0c08 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.ch_buff_size
 2726 0c0c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2727 0c10 FEFFFFEB 		bl	memset		@
 2728              	.LVL193:
 394:armwave.c     **** 
 395:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2729              		.loc 1 395 5 is_stmt 1 view .LVU754
 2730              	@ armwave.c:395:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2731              		.loc 1 395 45 is_stmt 0 view .LVU755
 2732 0c14 306094E5 		ldr	r6, [r4, #48]	@ _96, g_armwave_state.slice_height
 2733              	@ armwave.c:395:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2734              		.loc 1 395 5 view .LVU756
 2735 0c18 020B56E3 		cmp	r6, #2048	@ _96,
 2736 0c1c F88FBD88 		pophi	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2737              	@ armwave.c:395:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2738              		.loc 1 395 12 view .LVU757
 2739 0c20 0050A0E3 		mov	r5, #0	@ yy,
 2740              	.LVL194:
 2741              	.L174:
 396:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2742              		.loc 1 396 9 is_stmt 1 discriminator 3 view .LVU758
 2743 0c24 960502E0 		mul	r2, r6, r5	@, _96, yy
 2744 0c28 343094E5 		ldr	r3, [r4, #52]	@, g_armwave_state.slice_record_height
 2745 0c2c 0510A0E1 		mov	r1, r5	@, yy
 2746 0c30 00019FE5 		ldr	r0, .L191+4	@,
 2747 0c34 FEFFFFEB 		bl	printf		@
 2748              	.LVL195:
 397:armwave.c     **** 
 398:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2749              		.loc 1 398 9 discriminator 3 view .LVU759
 2750              	@ armwave.c:398:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2751              		.loc 1 398 62 is_stmt 0 discriminator 3 view .LVU760
 2752 0c38 306094E5 		ldr	r6, [r4, #48]	@ _96, g_armwave_state.slice_height
 2753              	.LBB35:
 2754              	.LBB36:
 2755              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2756              		.loc 1 84 5 discriminator 3 view .LVU761
 2757 0c3c 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 2758              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2759              		.loc 1 81 63 discriminator 3 view .LVU762
 2760 0c40 2C0094E5 		ldr	r0, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2761              	.LBE36:
 2762              	.LBE35:
 2763              	@ armwave.c:398:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2764              		.loc 1 398 9 discriminator 3 view .LVU763
 2765 0c44 950608E0 		mul	r8, r5, r6	@ _6, yy, _96
 2766              	.LBB39:
 2767              	.LBB37:
 2768              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2769              		.loc 1 84 5 discriminator 3 view .LVU764
 2770 0c48 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 2771              	.LBE37:
 2772              	.LBE39:
 2773              	@ armwave.c:398:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2774              		.loc 1 398 9 discriminator 3 view .LVU765
 2775 0c4c 349094E5 		ldr	r9, [r4, #52]	@ _7, g_armwave_state.slice_record_height
 2776              	.LVL196:
 2777              	.LBB40:
 2778              	.LBI35:
  73:armwave.c     **** {
 2779              		.loc 1 73 6 is_stmt 1 discriminator 3 view .LVU766
 2780              	.LBB38:
  75:armwave.c     ****     uint32_t value, word;
 2781              		.loc 1 75 5 discriminator 3 view .LVU767
  76:armwave.c     ****     uint8_t *wave_base;
 2782              		.loc 1 76 5 discriminator 3 view .LVU768
  77:armwave.c     ****     uint8_t *write_buffer_base;
 2783              		.loc 1 77 5 discriminator 3 view .LVU769
  78:armwave.c     ****     uint8_t *write_buffer;
 2784              		.loc 1 78 5 discriminator 3 view .LVU770
  79:armwave.c     ****     
 2785              		.loc 1 79 5 discriminator 3 view .LVU771
  81:armwave.c     **** 
 2786              		.loc 1 81 5 discriminator 3 view .LVU772
 2787              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2788              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU773
 2789 0c50 900800E0 		mul	r0, r0, r8	@ _19, g_armwave_state.bitdepth_height, _6
 2790              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2791              		.loc 1 81 40 discriminator 3 view .LVU774
 2792 0c54 043094E5 		ldr	r3, [r4, #4]	@ _17, g_armwave_state.ch1_buffer
 2793              	.LVL197:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2794              		.loc 1 84 5 is_stmt 1 discriminator 3 view .LVU775
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2795              		.loc 1 84 5 is_stmt 0 discriminator 3 view .LVU776
 2796 0c58 2E00000A 		beq	.L175		@,
 2797 0c5c 000059E3 		cmp	r9, #0	@ _7,
 2798 0c60 2B00000A 		beq	.L176		@,
 2799 0c64 048048E2 		sub	r8, r8, #4	@ tmp268, _6,
 2800              	.LVL198:
 2801              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2802              		.loc 1 84 11 view .LVU777
 2803 0c68 0070A0E3 		mov	r7, #0	@ w,
 2804              	.LVL199:
 2805              	.L178:
  85:armwave.c     **** 
 2806              		.loc 1 85 9 is_stmt 1 view .LVU778
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2807              		.loc 1 89 9 view .LVU779
 2808              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     **** 
 2809              		.loc 1 85 64 is_stmt 0 view .LVU780
 2810 0c6c 201094E5 		ldr	r1, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2811 0c70 14C094E5 		ldr	ip, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2812              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2813              		.loc 1 89 16 view .LVU781
 2814 0c74 0020A0E3 		mov	r2, #0	@ yy,
 2815 0c78 918721E0 		mla	r1, r1, r7, r8	@ tmp214, g_armwave_state.wave_stride, w, tmp268
 2816 0c7c 01C08CE0 		add	ip, ip, r1	@ ivtmp.114, g_armwave_state.wave_buffer, tmp214
 2817              	.LVL200:
 2818              	.L177:
  90:armwave.c     **** 
 2819              		.loc 1 90 13 is_stmt 1 view .LVU782
 2820              	@ armwave.c:90:             word = *(uint32_t*)(wave_base + yy);
  90:armwave.c     **** 
 2821              		.loc 1 90 18 is_stmt 0 view .LVU783
 2822 0c80 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _190, offset: 0B]
 2823              	.LVL201:
  92:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2824              		.loc 1 92 13 is_stmt 1 view .LVU784
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2825              		.loc 1 94 17 view .LVU785
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2826              		.loc 1 95 17 view .LVU786
  96:armwave.c     ****                 word >>= 8;
 2827              		.loc 1 96 17 view .LVU787
 2828              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2829              		.loc 1 95 63 is_stmt 0 view .LVU788
 2830 0c84 2C6094E5 		ldr	r6, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2831 0c88 01B082E2 		add	fp, r2, #1	@ tmp227, yy,
 2832              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2833              		.loc 1 96 47 view .LVU789
 2834 0c8c 71E0E0E6 		uxtab	lr, r0, r1	@ tmp220, _19, word
 2835 0c90 96E226E0 		mla	r6, r6, r2, lr	@ tmp221, g_armwave_state.bitdepth_height, yy, tmp220
 2836              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2837              		.loc 1 97 22 view .LVU790
 2838 0c94 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2839              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2840              		.loc 1 96 47 view .LVU791
 2841 0c98 06E0D3E7 		ldrb	lr, [r3, r6]	@ zero_extendqisi2	@ *_67, *_67
 2842 0c9c 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp232, _19, word
 2843 0ca0 01E08EE2 		add	lr, lr, #1	@ tmp224, *_67,
 2844 0ca4 06E0C3E7 		strb	lr, [r3, r6]	@ tmp224, *_67
 2845              	.LVL202:
  97:armwave.c     ****             }
 2846              		.loc 1 97 17 is_stmt 1 view .LVU792
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2847              		.loc 1 94 17 view .LVU793
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2848              		.loc 1 95 17 view .LVU794
  96:armwave.c     ****                 word >>= 8;
 2849              		.loc 1 96 17 view .LVU795
 2850              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2851              		.loc 1 95 63 is_stmt 0 view .LVU796
 2852 0ca8 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2853              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2854              		.loc 1 97 22 view .LVU797
 2855 0cac 2168A0E1 		lsr	r6, r1, #16	@ word, word,
 2856              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2857              		.loc 1 96 47 view .LVU798
 2858 0cb0 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp255, _19, word,
 2859              	.LVL203:
  96:armwave.c     ****                 word >>= 8;
 2860              		.loc 1 96 47 view .LVU799
 2861 0cb4 9EAB2EE0 		mla	lr, lr, fp, r10	@ tmp233, g_armwave_state.bitdepth_height, tmp227, tmp232
 2862 0cb8 76A0E0E6 		uxtab	r10, r0, r6	@ tmp240, _19, word
 2863 0cbc 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_87, *_87
 2864              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2865              		.loc 1 95 63 view .LVU800
 2866 0cc0 026082E2 		add	r6, r2, #2	@ tmp242, yy,
 2867              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2868              		.loc 1 96 47 view .LVU801
 2869 0cc4 01B08BE2 		add	fp, fp, #1	@ tmp236, *_87,
 2870 0cc8 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp236, *_87
 2871              	.LVL204:
  97:armwave.c     ****             }
 2872              		.loc 1 97 17 is_stmt 1 view .LVU802
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2873              		.loc 1 94 17 view .LVU803
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2874              		.loc 1 95 17 view .LVU804
  96:armwave.c     ****                 word >>= 8;
 2875              		.loc 1 96 17 view .LVU805
 2876              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2877              		.loc 1 95 63 is_stmt 0 view .LVU806
 2878 0ccc 2CB094E5 		ldr	fp, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2879 0cd0 03E082E2 		add	lr, r2, #3	@ tmp251, yy,
 2880              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2881              		.loc 1 89 37 view .LVU807
 2882 0cd4 042082E2 		add	r2, r2, #4	@ yy, yy,
 2883              	.LVL205:
 2884              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2885              		.loc 1 96 47 view .LVU808
 2886 0cd8 9BA626E0 		mla	r6, fp, r6, r10	@ tmp245, g_armwave_state.bitdepth_height, tmp242, tmp240
 2887              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2888              		.loc 1 89 9 view .LVU809
 2889 0cdc 020059E1 		cmp	r9, r2	@ _7, yy
 2890              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2891              		.loc 1 96 47 view .LVU810
 2892 0ce0 06A0D3E7 		ldrb	r10, [r3, r6]	@ zero_extendqisi2	@ *_107, *_107
 2893 0ce4 01A08AE2 		add	r10, r10, #1	@ tmp248, *_107,
 2894 0ce8 06A0C3E7 		strb	r10, [r3, r6]	@ tmp248, *_107
 2895              	.LVL206:
  97:armwave.c     ****             }
 2896              		.loc 1 97 17 is_stmt 1 view .LVU811
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2897              		.loc 1 94 17 view .LVU812
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2898              		.loc 1 95 17 view .LVU813
  96:armwave.c     ****                 word >>= 8;
 2899              		.loc 1 96 17 view .LVU814
 2900              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2901              		.loc 1 95 63 is_stmt 0 view .LVU815
 2902 0cec 2C6094E5 		ldr	r6, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2903              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2904              		.loc 1 96 47 view .LVU816
 2905 0cf0 961E21E0 		mla	r1, r6, lr, r1	@ tmp256, g_armwave_state.bitdepth_height, tmp251, tmp255
 2906 0cf4 01E0D3E7 		ldrb	lr, [r3, r1]	@ zero_extendqisi2	@ *_127, *_127
 2907 0cf8 01E08EE2 		add	lr, lr, #1	@ tmp259, *_127,
 2908 0cfc 01E0C3E7 		strb	lr, [r3, r1]	@ tmp259, *_127
  97:armwave.c     ****             }
 2909              		.loc 1 97 17 is_stmt 1 view .LVU817
 2910              	.LVL207:
 2911              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2912              		.loc 1 89 9 is_stmt 0 view .LVU818
 2913 0d00 DEFFFF8A 		bhi	.L177		@,
 2914              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2915              		.loc 1 84 5 view .LVU819
 2916 0d04 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 2917              	.LVL208:
 2918              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2919              		.loc 1 84 44 view .LVU820
 2920 0d08 017087E2 		add	r7, r7, #1	@ w, w,
 2921              	.LVL209:
 2922              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2923              		.loc 1 84 5 view .LVU821
 2924 0d0c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 2925 0d10 D5FFFF3A 		bcc	.L178		@,
 2926              	.LVL210:
 2927              	.L176:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2928              		.loc 1 84 5 view .LVU822
 2929 0d14 306094E5 		ldr	r6, [r4, #48]	@ _96, g_armwave_state.slice_height
 2930              	.L175:
 2931              	.LVL211:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2932              		.loc 1 84 5 view .LVU823
 2933              	.LBE38:
 2934              	.LBE40:
 2935              	@ armwave.c:395:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 395:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2936              		.loc 1 395 28 discriminator 3 view .LVU824
 2937 0d18 0610A0E1 		mov	r1, r6	@, _96
 2938 0d1c 020BA0E3 		mov	r0, #2048	@,
 2939              	.LVL212:
 395:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2940              		.loc 1 395 28 discriminator 3 view .LVU825
 2941 0d20 FEFFFFEB 		bl	__aeabi_uidiv		@
 2942              	.LVL213:
 2943              	@ armwave.c:395:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 395:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2944              		.loc 1 395 63 discriminator 3 view .LVU826
 2945 0d24 015085E2 		add	r5, r5, #1	@ yy, yy,
 2946              	.LVL214:
 2947              	@ armwave.c:395:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 395:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2948              		.loc 1 395 5 discriminator 3 view .LVU827
 2949 0d28 050050E1 		cmp	r0, r5	@, yy
 2950 0d2c BCFFFF8A 		bhi	.L174		@,
 2951 0d30 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2952              	.L192:
 2953              		.align	2
 2954              	.L191:
 2955 0d34 00000000 		.word	g_armwave_state
 2956 0d38 B4010000 		.word	.LC17
 2957              		.cfi_endproc
 2958              	.LFE70:
 2960              		.align	2
 2961              		.global	armwave_test_fill_outbuf
 2962              		.syntax unified
 2963              		.arm
 2964              		.fpu vfp
 2966              	armwave_test_fill_outbuf:
 2967              	.LFB71:
 399:armwave.c     ****     }
 400:armwave.c     **** }
 401:armwave.c     **** 
 402:armwave.c     **** /*
 403:armwave.c     ****  * Render image to the local allocated buffer.
 404:armwave.c     ****  */
 405:armwave.c     **** void armwave_test_fill_outbuf()
 406:armwave.c     **** {
 2968              		.loc 1 406 1 is_stmt 1 view -0
 2969              		.cfi_startproc
 2970              		@ args = 0, pretend = 0, frame = 8
 2971              		@ frame_needed = 0, uses_anonymous_args = 0
 407:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2972              		.loc 1 407 5 view .LVU829
 2973 0d3c 40219FE5 		ldr	r2, .L217	@ tmp203,
 2974              	@ armwave.c:406: {
 406:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2975              		.loc 1 406 1 is_stmt 0 view .LVU830
 2976 0d40 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2977              		.cfi_def_cfa_offset 36
 2978              		.cfi_offset 4, -36
 2979              		.cfi_offset 5, -32
 2980              		.cfi_offset 6, -28
 2981              		.cfi_offset 7, -24
 2982              		.cfi_offset 8, -20
 2983              		.cfi_offset 9, -16
 2984              		.cfi_offset 10, -12
 2985              		.cfi_offset 11, -8
 2986              		.cfi_offset 14, -4
 2987 0d44 0CD04DE2 		sub	sp, sp, #12	@,,
 2988              		.cfi_def_cfa_offset 48
 2989              	@ armwave.c:407:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2990              		.loc 1 407 5 view .LVU831
 2991 0d48 548092E5 		ldr	r8, [r2, #84]	@ _1, g_armwave_state.out_pixbuf
 2992              	.LVL215:
 2993              	.LBB43:
 2994              	.LBI43:
 160:armwave.c     **** {
 2995              		.loc 1 160 6 is_stmt 1 view .LVU832
 2996              	.LBB44:
 162:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2997              		.loc 1 162 5 view .LVU833
 163:armwave.c     ****     uint8_t r, g, b, value, row;
 2998              		.loc 1 163 5 view .LVU834
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2999              		.loc 1 164 5 view .LVU835
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3000              		.loc 1 165 5 view .LVU836
 3001              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3002              		.loc 1 165 15 is_stmt 0 view .LVU837
 3003 0d4c 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3004              	.LVL216:
 166:armwave.c     ****     uint32_t offset;
 3005              		.loc 1 166 5 is_stmt 1 view .LVU838
 167:armwave.c     **** 
 3006              		.loc 1 167 5 view .LVU839
 169:armwave.c     **** 
 3007              		.loc 1 169 5 view .LVU840
 3008 0d50 000058E3 		cmp	r8, #0	@ _1,
 3009 0d54 4500000A 		beq	.L215		@,
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3010              		.loc 1 171 5 view .LVU841
 3011              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3012              		.loc 1 171 41 is_stmt 0 view .LVU842
 3013 0d58 445092E5 		ldr	r5, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3014 0d5c 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 3015              	.LVL217:
 172:armwave.c     **** 
 3016              		.loc 1 172 5 is_stmt 1 view .LVU843
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3017              		.loc 1 174 5 view .LVU844
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3018              		.loc 1 174 5 is_stmt 0 view .LVU845
 3019 0d60 000055E3 		cmp	r5, #0	@ npix,
 3020 0d64 0B0000DA 		ble	.L193		@,
 3021              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3022              		.loc 1 187 52 view .LVU846
 3023 0d68 FA35D2E1 		ldrsh	r3, [r2, #90]	@ _24, g_armwave_state.ch1_color.g
 3024              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3025              		.loc 1 186 52 view .LVU847
 3026 0d6c F8B5D2E1 		ldrsh	fp, [r2, #88]	@ _18, g_armwave_state.ch1_color.r
 3027              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3028              		.loc 1 174 11 view .LVU848
 3029 0d70 0010A0E3 		mov	r1, #0	@ n,
 3030              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3031              		.loc 1 187 52 view .LVU849
 3032 0d74 00308DE5 		str	r3, [sp]	@ _24, %sfp
 3033              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3034              		.loc 1 188 52 view .LVU850
 3035 0d78 FC35D2E1 		ldrsh	r3, [r2, #92]	@ _28, g_armwave_state.ch1_color.b
 3036 0d7c 04308DE5 		str	r3, [sp, #4]	@ _28, %sfp
 3037              	.LVL218:
 3038              	.L200:
 178:armwave.c     **** 
 3039              		.loc 1 178 9 is_stmt 1 view .LVU851
 3040              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 3041              		.loc 1 178 19 is_stmt 0 view .LVU852
 3042 0d80 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 3043              	.LVL219:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3044              		.loc 1 180 9 is_stmt 1 view .LVU853
 3045              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3046              		.loc 1 180 11 is_stmt 0 view .LVU854
 3047 0d84 000050E3 		cmp	r0, #0	@ wave_word,
 3048 0d88 0400001A 		bne	.L212		@,
 3049 0d8c 041081E2 		add	r1, r1, #4	@ n, n,
 3050              	.L196:
 3051              	.LVL220:
 3052              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3053              		.loc 1 174 5 view .LVU855
 3054 0d90 010055E1 		cmp	r5, r1	@ npix, n
 3055 0d94 F9FFFFCA 		bgt	.L200		@,
 3056              	.LVL221:
 3057              	.L193:
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3058              		.loc 1 174 5 view .LVU856
 3059              	.LBE44:
 3060              	.LBE43:
 3061              	@ armwave.c:408: }
 408:armwave.c     **** }
 3062              		.loc 1 408 1 view .LVU857
 3063 0d98 0CD08DE2 		add	sp, sp, #12	@,,
 3064              		.cfi_remember_state
 3065              		.cfi_def_cfa_offset 36
 3066              		@ sp needed	@
 3067 0d9c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3068              	.LVL222:
 3069              	.L212:
 3070              		.cfi_restore_state
 3071              	.LBB46:
 3072              	.LBB45:
 3073              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3074              		.loc 1 185 19 view .LVU858
 3075 0da0 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 3076              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3077              		.loc 1 180 11 view .LVU859
 3078 0da4 0160A0E1 		mov	r6, r1	@ ivtmp.131, n
 3079              	.LVL223:
 182:armwave.c     ****                 wave_word >>= 8;
 3080              		.loc 1 182 17 is_stmt 1 view .LVU860
 183:armwave.c     **** 
 3081              		.loc 1 183 17 view .LVU861
 3082              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 3083              		.loc 1 183 27 is_stmt 0 view .LVU862
 3084 0da8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3085              	.LVL224:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3086              		.loc 1 185 17 is_stmt 1 view .LVU863
 3087 0dac 041081E2 		add	r1, r1, #4	@ n, ivtmp.131,
 3088              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3089              		.loc 1 185 19 is_stmt 0 view .LVU864
 3090 0db0 0500001A 		bne	.L216		@,
 3091              	.L197:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3092              		.loc 1 185 19 view .LVU865
 3093 0db4 016086E2 		add	r6, r6, #1	@ ivtmp.131, ivtmp.131,
 3094              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 3095              		.loc 1 181 13 view .LVU866
 3096 0db8 060051E1 		cmp	r1, r6	@ n, ivtmp.131
 3097 0dbc F3FFFF0A 		beq	.L196		@,
 182:armwave.c     ****                 wave_word >>= 8;
 3098              		.loc 1 182 17 is_stmt 1 view .LVU867
 3099              	.LVL225:
 183:armwave.c     **** 
 3100              		.loc 1 183 17 view .LVU868
 3101              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3102              		.loc 1 185 19 is_stmt 0 view .LVU869
 3103 0dc0 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 3104              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 3105              		.loc 1 183 27 view .LVU870
 3106 0dc4 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3107              	.LVL226:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3108              		.loc 1 185 17 is_stmt 1 view .LVU871
 3109              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3110              		.loc 1 185 19 is_stmt 0 view .LVU872
 3111 0dc8 F9FFFF0A 		beq	.L197		@,
 3112              	.L216:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3113              		.loc 1 186 21 is_stmt 1 view .LVU873
 3114              	.LVL227:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3115              		.loc 1 187 21 view .LVU874
 188:armwave.c     **** 
 3116              		.loc 1 188 21 view .LVU875
 190:armwave.c     ****                     g = MIN(gg, 255);
 3117              		.loc 1 190 21 view .LVU876
 191:armwave.c     ****                     b = MIN(bb, 255);
 3118              		.loc 1 191 21 view .LVU877
 192:armwave.c     **** 
 3119              		.loc 1 192 21 view .LVU878
 195:armwave.c     **** 
 3120              		.loc 1 195 21 view .LVU879
 3121              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3122              		.loc 1 188 55 is_stmt 0 view .LVU880
 3123 0dcc 04309DE5 		ldr	r3, [sp, #4]	@ _28, %sfp
 3124              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3125              		.loc 1 199 57 view .LVU881
 3126 0dd0 1CA092E5 		ldr	r10, [r2, #28]	@ _50, g_armwave_state.vscale
 3127              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3128              		.loc 1 199 32 view .LVU882
 3129 0dd4 7670EFE6 		uxtb	r7, r6	@ ivtmp.131, ivtmp.131
 3130              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3131              		.loc 1 188 55 view .LVU883
 3132 0dd8 930E0CE0 		mul	ip, r3, lr	@ tmp179, _28, _20
 3133              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3134              		.loc 1 187 55 view .LVU884
 3135 0ddc 00309DE5 		ldr	r3, [sp]	@ _24, %sfp
 3136              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3137              		.loc 1 199 24 view .LVU885
 3138 0de0 9A0707E0 		mul	r7, r10, r7	@ yy, _50, ivtmp.131
 3139              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3140              		.loc 1 187 55 view .LVU886
 3141 0de4 930E04E0 		mul	r4, r3, lr	@ tmp183, _24, _20
 3142              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3143              		.loc 1 188 24 view .LVU887
 3144 0de8 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp179,
 3145              	.LVL228:
 3146              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3147              		.loc 1 186 55 view .LVU888
 3148 0dec 9E0B0EE0 		mul	lr, lr, fp	@ tmp189, _20, _18
 3149              	.LVL229:
 3150              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3151              		.loc 1 187 24 view .LVU889
 3152 0df0 4444A0E1 		asr	r4, r4, #8	@ gg, tmp183,
 3153              	.LVL230:
 3154              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 3155              		.loc 1 192 25 view .LVU890
 3156 0df4 FF005CE3 		cmp	ip, #255	@ bb,
 3157 0df8 FFC0A0A3 		movge	ip, #255	@ bb,
 3158              	.LVL231:
 3159              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 3160              		.loc 1 191 25 view .LVU891
 3161 0dfc FF0054E3 		cmp	r4, #255	@ gg,
 3162 0e00 FF40A0A3 		movge	r4, #255	@ gg,
 3163              	.LVL232:
 3164              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3165              		.loc 1 186 24 view .LVU892
 3166 0e04 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp189,
 3167              	.LVL233:
 3168              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3169              		.loc 1 190 25 view .LVU893
 3170 0e08 FF005EE3 		cmp	lr, #255	@ rr,
 3171              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3172              		.loc 1 195 56 view .LVU894
 3173 0e0c 0444A0E1 		lsl	r4, r4, #8	@ tmp184, gg,
 3174              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3175              		.loc 1 190 25 view .LVU895
 3176 0e10 FFE0A0A3 		movge	lr, #255	@ rr,
 3177              	.LVL234:
 3178              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3179              		.loc 1 195 44 view .LVU896
 3180 0e14 0C38A0E1 		lsl	r3, ip, #16	@ tmp180, bb,
 3181 0e18 FF3803E2 		and	r3, r3, #16711680	@ tmp181, tmp180,
 3182              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3183              		.loc 1 195 56 view .LVU897
 3184 0e1c 7440FFE6 		uxth	r4, r4	@ tmp185, tmp184
 3185              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3186              		.loc 1 195 51 view .LVU898
 3187 0e20 043083E1 		orr	r3, r3, r4	@ tmp187, tmp181, tmp185
 3188              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3189              		.loc 1 195 62 view .LVU899
 3190 0e24 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3191 0e28 0E3083E1 		orr	r3, r3, lr	@ tmp191, tmp187, rr
 3192              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3193              		.loc 1 202 21 view .LVU900
 3194 0e2c 00005AE3 		cmp	r10, #0	@ _50,
 3195              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3196              		.loc 1 195 26 view .LVU901
 3197 0e30 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp191,
 3198              	.LVL235:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3199              		.loc 1 198 21 is_stmt 1 view .LVU902
 199:armwave.c     ****                     xx = (nsub >> 8);
 3200              		.loc 1 199 21 view .LVU903
 200:armwave.c     **** 
 3201              		.loc 1 200 21 view .LVU904
 3202              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 3203              		.loc 1 200 32 is_stmt 0 view .LVU905
 3204 0e34 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.131,
 3205              	.LVL236:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3206              		.loc 1 202 21 is_stmt 1 view .LVU906
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3207              		.loc 1 202 21 is_stmt 0 view .LVU907
 3208 0e38 DDFFFF0A 		beq	.L197		@,
 3209              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3210              		.loc 1 202 29 view .LVU908
 3211 0e3c 00C0A0E3 		mov	ip, #0	@ row,
 3212              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3213              		.loc 1 202 38 view .LVU909
 3214 0e40 0CE0A0E1 		mov	lr, ip	@ _54, row
 3215              	.LVL237:
 3216              	.L198:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3217              		.loc 1 203 25 is_stmt 1 view .LVU910
 204:armwave.c     ****                     }
 3218              		.loc 1 204 25 view .LVU911
 3219              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3220              		.loc 1 203 52 is_stmt 0 view .LVU912
 3221 0e44 444092E5 		ldr	r4, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3222              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3223              		.loc 1 203 45 view .LVU913
 3224 0e48 0EE087E0 		add	lr, r7, lr	@ tmp194, yy, _54
 3225              	.LVL238:
 3226              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3227              		.loc 1 202 67 view .LVU914
 3228 0e4c 01C08CE2 		add	ip, ip, #1	@ tmp199, row,
 3229              	.LVL239:
 3230              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3231              		.loc 1 204 43 view .LVU915
 3232 0e50 94AE24E0 		mla	r4, r4, lr, r10	@ tmp198, g_armwave_state.target_width, tmp194, xx
 3233              	.LVL240:
 3234              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3235              		.loc 1 202 67 view .LVU916
 3236 0e54 7CC0EFE6 		uxtb	ip, ip	@ row, tmp199
 3237              	.LVL241:
 3238              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3239              		.loc 1 202 38 view .LVU917
 3240 0e58 0CE0A0E1 		mov	lr, ip	@ _54, row
 3241              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3242              		.loc 1 204 53 view .LVU918
 3243 0e5c 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_60
 3244              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3245              		.loc 1 202 21 view .LVU919
 3246 0e60 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3247              	.LVL242:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3248              		.loc 1 202 21 view .LVU920
 3249 0e64 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3250 0e68 F5FFFF3A 		bcc	.L198		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3251              		.loc 1 202 21 view .LVU921
 3252 0e6c D0FFFFEA 		b	.L197		@
 3253              	.LVL243:
 3254              	.L215:
 169:armwave.c     **** 
 3255              		.loc 1 169 5 is_stmt 1 view .LVU922
 3256 0e70 10309FE5 		ldr	r3, .L217+4	@,
 3257 0e74 A920A0E3 		mov	r2, #169	@,
 3258 0e78 0C109FE5 		ldr	r1, .L217+8	@,
 3259 0e7c 0C009FE5 		ldr	r0, .L217+12	@,
 3260 0e80 FEFFFFEB 		bl	__assert_fail		@
 3261              	.LVL244:
 3262              	.L218:
 3263              		.align	2
 3264              	.L217:
 3265 0e84 00000000 		.word	g_armwave_state
 3266 0e88 18000000 		.word	.LANCHOR0+24
 3267 0e8c 20000000 		.word	.LC2
 3268 0e90 2C000000 		.word	.LC3
 3269              	.LBE45:
 3270              	.LBE46:
 3271              		.cfi_endproc
 3272              	.LFE71:
 3274              		.align	2
 3275              		.global	armwave_test_dump_buffer_to_ppm
 3276              		.syntax unified
 3277              		.arm
 3278              		.fpu vfp
 3280              	armwave_test_dump_buffer_to_ppm:
 3281              	.LVL245:
 3282              	.LFB72:
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 414:armwave.c     **** {
 3283              		.loc 1 414 1 view -0
 3284              		.cfi_startproc
 3285              		@ args = 0, pretend = 0, frame = 0
 3286              		@ frame_needed = 0, uses_anonymous_args = 0
 3287              		@ link register save eliminated.
 415:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3288              		.loc 1 415 5 view .LVU924
 3289 0e94 08309FE5 		ldr	r3, .L220	@ tmp112,
 3290 0e98 0010A0E1 		mov	r1, r0	@, fn
 3291 0e9c 540093E5 		ldr	r0, [r3, #84]	@, g_armwave_state.out_pixbuf
 3292              	.LVL246:
 3293              		.loc 1 415 5 is_stmt 0 view .LVU925
 3294 0ea0 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3295              	.LVL247:
 3296              	.L221:
 3297              		.loc 1 415 5 view .LVU926
 3298              		.align	2
 3299              	.L220:
 3300 0ea4 00000000 		.word	g_armwave_state
 3301              		.cfi_endproc
 3302              	.LFE72:
 3304              		.align	2
 3305              		.global	armwave_test_fill_gdkbuf
 3306              		.syntax unified
 3307              		.arm
 3308              		.fpu vfp
 3310              	armwave_test_fill_gdkbuf:
 3311              	.LVL248:
 3312              	.LFB73:
 416:armwave.c     **** }
 417:armwave.c     **** 
 418:armwave.c     **** /*
 419:armwave.c     ****  * Render GDK buffer with test funtionry.
 420:armwave.c     ****  */
 421:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 422:armwave.c     **** {
 3313              		.loc 1 422 1 is_stmt 1 view -0
 3314              		.cfi_startproc
 3315              		@ args = 0, pretend = 0, frame = 8
 3316              		@ frame_needed = 0, uses_anonymous_args = 0
 423:armwave.c     ****     //PyObject *mv;
 424:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 425:armwave.c     **** 
 426:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 427:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3317              		.loc 1 427 5 view .LVU928
 3318              	@ armwave.c:427:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3319              		.loc 1 427 11 is_stmt 0 view .LVU929
 3320 0ea8 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 3321              	@ armwave.c:422: {
 422:armwave.c     ****     //PyObject *mv;
 3322              		.loc 1 422 1 view .LVU930
 3323 0eac F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3324              		.cfi_def_cfa_offset 36
 3325              		.cfi_offset 4, -36
 3326              		.cfi_offset 5, -32
 3327              		.cfi_offset 6, -28
 3328              		.cfi_offset 7, -24
 3329              		.cfi_offset 8, -20
 3330              		.cfi_offset 9, -16
 3331              		.cfi_offset 10, -12
 3332              		.cfi_offset 11, -8
 3333              		.cfi_offset 14, -4
 3334 0eb0 0CD04DE2 		sub	sp, sp, #12	@,,
 3335              		.cfi_def_cfa_offset 48
 3336              	.LBB49:
 3337              	.LBB50:
 3338              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3339              		.loc 1 165 15 view .LVU931
 3340 0eb4 38219FE5 		ldr	r2, .L246	@ tmp206,
 3341              	.LBE50:
 3342              	.LBE49:
 3343              	@ armwave.c:427:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3344              		.loc 1 427 11 view .LVU932
 3345 0eb8 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 3346              	.LVL249:
 428:armwave.c     ****     
 429:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 430:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 3347              		.loc 1 430 5 is_stmt 1 view .LVU933
 3348              	.LBB53:
 3349              	.LBI49:
 160:armwave.c     **** {
 3350              		.loc 1 160 6 view .LVU934
 3351              	.LBB51:
 162:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 3352              		.loc 1 162 5 view .LVU935
 163:armwave.c     ****     uint8_t r, g, b, value, row;
 3353              		.loc 1 163 5 view .LVU936
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 3354              		.loc 1 164 5 view .LVU937
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3355              		.loc 1 165 5 view .LVU938
 3356              	@ armwave.c:169:     assert(out_buffer != NULL);
 169:armwave.c     **** 
 3357              		.loc 1 169 5 is_stmt 0 view .LVU939
 3358 0ebc 000058E3 		cmp	r8, #0	@ out_pixbuf,
 3359              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3360              		.loc 1 165 15 view .LVU940
 3361 0ec0 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3362              	.LVL250:
 166:armwave.c     ****     uint32_t offset;
 3363              		.loc 1 166 5 is_stmt 1 view .LVU941
 167:armwave.c     **** 
 3364              		.loc 1 167 5 view .LVU942
 169:armwave.c     **** 
 3365              		.loc 1 169 5 view .LVU943
 3366 0ec4 4500000A 		beq	.L244		@,
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3367              		.loc 1 171 5 view .LVU944
 3368              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3369              		.loc 1 171 41 is_stmt 0 view .LVU945
 3370 0ec8 445092E5 		ldr	r5, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3371 0ecc 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 3372              	.LVL251:
 172:armwave.c     **** 
 3373              		.loc 1 172 5 is_stmt 1 view .LVU946
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3374              		.loc 1 174 5 view .LVU947
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3375              		.loc 1 174 5 is_stmt 0 view .LVU948
 3376 0ed0 000055E3 		cmp	r5, #0	@ npix,
 3377 0ed4 0B0000DA 		ble	.L222		@,
 3378              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3379              		.loc 1 187 52 view .LVU949
 3380 0ed8 FA35D2E1 		ldrsh	r3, [r2, #90]	@ _26, g_armwave_state.ch1_color.g
 3381              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3382              		.loc 1 186 52 view .LVU950
 3383 0edc F8B5D2E1 		ldrsh	fp, [r2, #88]	@ _20, g_armwave_state.ch1_color.r
 3384              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3385              		.loc 1 174 11 view .LVU951
 3386 0ee0 0010A0E3 		mov	r1, #0	@ n,
 3387              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3388              		.loc 1 187 52 view .LVU952
 3389 0ee4 00308DE5 		str	r3, [sp]	@ _26, %sfp
 3390              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3391              		.loc 1 188 52 view .LVU953
 3392 0ee8 FC35D2E1 		ldrsh	r3, [r2, #92]	@ _30, g_armwave_state.ch1_color.b
 3393 0eec 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 3394              	.LVL252:
 3395              	.L229:
 178:armwave.c     **** 
 3396              		.loc 1 178 9 is_stmt 1 view .LVU954
 3397              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 3398              		.loc 1 178 19 is_stmt 0 view .LVU955
 3399 0ef0 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 3400              	.LVL253:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3401              		.loc 1 180 9 is_stmt 1 view .LVU956
 3402              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3403              		.loc 1 180 11 is_stmt 0 view .LVU957
 3404 0ef4 000050E3 		cmp	r0, #0	@ wave_word,
 3405 0ef8 0400001A 		bne	.L241		@,
 3406 0efc 041081E2 		add	r1, r1, #4	@ n, n,
 3407              	.L225:
 3408              	.LVL254:
 3409              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3410              		.loc 1 174 5 view .LVU958
 3411 0f00 010055E1 		cmp	r5, r1	@ npix, n
 3412 0f04 F9FFFFCA 		bgt	.L229		@,
 3413              	.LVL255:
 3414              	.L222:
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3415              		.loc 1 174 5 view .LVU959
 3416              	.LBE51:
 3417              	.LBE53:
 3418              	@ armwave.c:431: }
 431:armwave.c     **** }
 3419              		.loc 1 431 1 view .LVU960
 3420 0f08 0CD08DE2 		add	sp, sp, #12	@,,
 3421              		.cfi_remember_state
 3422              		.cfi_def_cfa_offset 36
 3423              		@ sp needed	@
 3424 0f0c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3425              	.LVL256:
 3426              	.L241:
 3427              		.cfi_restore_state
 3428              	.LBB54:
 3429              	.LBB52:
 3430              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3431              		.loc 1 185 19 view .LVU961
 3432 0f10 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3433              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3434              		.loc 1 180 11 view .LVU962
 3435 0f14 0160A0E1 		mov	r6, r1	@ ivtmp.147, n
 3436              	.LVL257:
 182:armwave.c     ****                 wave_word >>= 8;
 3437              		.loc 1 182 17 is_stmt 1 view .LVU963
 183:armwave.c     **** 
 3438              		.loc 1 183 17 view .LVU964
 3439              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 3440              		.loc 1 183 27 is_stmt 0 view .LVU965
 3441 0f18 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3442              	.LVL258:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3443              		.loc 1 185 17 is_stmt 1 view .LVU966
 3444 0f1c 041081E2 		add	r1, r1, #4	@ n, ivtmp.147,
 3445              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3446              		.loc 1 185 19 is_stmt 0 view .LVU967
 3447 0f20 0500001A 		bne	.L245		@,
 3448              	.L226:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3449              		.loc 1 185 19 view .LVU968
 3450 0f24 016086E2 		add	r6, r6, #1	@ ivtmp.147, ivtmp.147,
 3451              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 3452              		.loc 1 181 13 view .LVU969
 3453 0f28 060051E1 		cmp	r1, r6	@ n, ivtmp.147
 3454 0f2c F3FFFF0A 		beq	.L225		@,
 182:armwave.c     ****                 wave_word >>= 8;
 3455              		.loc 1 182 17 is_stmt 1 view .LVU970
 3456              	.LVL259:
 183:armwave.c     **** 
 3457              		.loc 1 183 17 view .LVU971
 3458              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3459              		.loc 1 185 19 is_stmt 0 view .LVU972
 3460 0f30 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3461              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 3462              		.loc 1 183 27 view .LVU973
 3463 0f34 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3464              	.LVL260:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3465              		.loc 1 185 17 is_stmt 1 view .LVU974
 3466              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3467              		.loc 1 185 19 is_stmt 0 view .LVU975
 3468 0f38 F9FFFF0A 		beq	.L226		@,
 3469              	.L245:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3470              		.loc 1 186 21 is_stmt 1 view .LVU976
 3471              	.LVL261:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3472              		.loc 1 187 21 view .LVU977
 188:armwave.c     **** 
 3473              		.loc 1 188 21 view .LVU978
 190:armwave.c     ****                     g = MIN(gg, 255);
 3474              		.loc 1 190 21 view .LVU979
 191:armwave.c     ****                     b = MIN(bb, 255);
 3475              		.loc 1 191 21 view .LVU980
 192:armwave.c     **** 
 3476              		.loc 1 192 21 view .LVU981
 195:armwave.c     **** 
 3477              		.loc 1 195 21 view .LVU982
 3478              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3479              		.loc 1 188 55 is_stmt 0 view .LVU983
 3480 0f3c 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 3481              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3482              		.loc 1 199 57 view .LVU984
 3483 0f40 1CA092E5 		ldr	r10, [r2, #28]	@ _52, g_armwave_state.vscale
 3484              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3485              		.loc 1 199 32 view .LVU985
 3486 0f44 7670EFE6 		uxtb	r7, r6	@ ivtmp.147, ivtmp.147
 3487              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3488              		.loc 1 188 55 view .LVU986
 3489 0f48 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 3490              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3491              		.loc 1 187 55 view .LVU987
 3492 0f4c 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 3493              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3494              		.loc 1 199 24 view .LVU988
 3495 0f50 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.147
 3496              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3497              		.loc 1 187 55 view .LVU989
 3498 0f54 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 3499              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3500              		.loc 1 188 24 view .LVU990
 3501 0f58 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 3502              	.LVL262:
 3503              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3504              		.loc 1 186 55 view .LVU991
 3505 0f5c 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 3506              	.LVL263:
 3507              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3508              		.loc 1 187 24 view .LVU992
 3509 0f60 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 3510              	.LVL264:
 3511              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 3512              		.loc 1 192 25 view .LVU993
 3513 0f64 FF005CE3 		cmp	ip, #255	@ bb,
 3514 0f68 FFC0A0A3 		movge	ip, #255	@ bb,
 3515              	.LVL265:
 3516              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 3517              		.loc 1 191 25 view .LVU994
 3518 0f6c FF0054E3 		cmp	r4, #255	@ gg,
 3519 0f70 FF40A0A3 		movge	r4, #255	@ gg,
 3520              	.LVL266:
 3521              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3522              		.loc 1 186 24 view .LVU995
 3523 0f74 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3524              	.LVL267:
 3525              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3526              		.loc 1 190 25 view .LVU996
 3527 0f78 FF005EE3 		cmp	lr, #255	@ rr,
 3528              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3529              		.loc 1 195 56 view .LVU997
 3530 0f7c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3531              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3532              		.loc 1 190 25 view .LVU998
 3533 0f80 FFE0A0A3 		movge	lr, #255	@ rr,
 3534              	.LVL268:
 3535              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3536              		.loc 1 195 44 view .LVU999
 3537 0f84 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3538 0f88 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3539              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3540              		.loc 1 195 56 view .LVU1000
 3541 0f8c 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3542              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3543              		.loc 1 195 51 view .LVU1001
 3544 0f90 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3545              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3546              		.loc 1 195 62 view .LVU1002
 3547 0f94 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3548 0f98 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3549              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3550              		.loc 1 202 21 view .LVU1003
 3551 0f9c 00005AE3 		cmp	r10, #0	@ _52,
 3552              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3553              		.loc 1 195 26 view .LVU1004
 3554 0fa0 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3555              	.LVL269:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3556              		.loc 1 198 21 is_stmt 1 view .LVU1005
 199:armwave.c     ****                     xx = (nsub >> 8);
 3557              		.loc 1 199 21 view .LVU1006
 200:armwave.c     **** 
 3558              		.loc 1 200 21 view .LVU1007
 3559              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 3560              		.loc 1 200 32 is_stmt 0 view .LVU1008
 3561 0fa4 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.147,
 3562              	.LVL270:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3563              		.loc 1 202 21 is_stmt 1 view .LVU1009
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3564              		.loc 1 202 21 is_stmt 0 view .LVU1010
 3565 0fa8 DDFFFF0A 		beq	.L226		@,
 3566              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3567              		.loc 1 202 29 view .LVU1011
 3568 0fac 00C0A0E3 		mov	ip, #0	@ row,
 3569              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3570              		.loc 1 202 38 view .LVU1012
 3571 0fb0 0CE0A0E1 		mov	lr, ip	@ _56, row
 3572              	.LVL271:
 3573              	.L227:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3574              		.loc 1 203 25 is_stmt 1 view .LVU1013
 204:armwave.c     ****                     }
 3575              		.loc 1 204 25 view .LVU1014
 3576              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3577              		.loc 1 203 52 is_stmt 0 view .LVU1015
 3578 0fb4 444092E5 		ldr	r4, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3579              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3580              		.loc 1 203 45 view .LVU1016
 3581 0fb8 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3582              	.LVL272:
 3583              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3584              		.loc 1 202 67 view .LVU1017
 3585 0fbc 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3586              	.LVL273:
 3587              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3588              		.loc 1 204 43 view .LVU1018
 3589 0fc0 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3590              	.LVL274:
 3591              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3592              		.loc 1 202 67 view .LVU1019
 3593 0fc4 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3594              	.LVL275:
 3595              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3596              		.loc 1 202 38 view .LVU1020
 3597 0fc8 0CE0A0E1 		mov	lr, ip	@ _56, row
 3598              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3599              		.loc 1 204 53 view .LVU1021
 3600 0fcc 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3601              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3602              		.loc 1 202 21 view .LVU1022
 3603 0fd0 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3604              	.LVL276:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3605              		.loc 1 202 21 view .LVU1023
 3606 0fd4 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3607 0fd8 F5FFFF3A 		bcc	.L227		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3608              		.loc 1 202 21 view .LVU1024
 3609 0fdc D0FFFFEA 		b	.L226		@
 3610              	.LVL277:
 3611              	.L244:
 169:armwave.c     **** 
 3612              		.loc 1 169 5 is_stmt 1 view .LVU1025
 3613 0fe0 10309FE5 		ldr	r3, .L246+4	@,
 3614 0fe4 A920A0E3 		mov	r2, #169	@,
 3615 0fe8 0C109FE5 		ldr	r1, .L246+8	@,
 3616 0fec 0C009FE5 		ldr	r0, .L246+12	@,
 3617              	.LVL278:
 169:armwave.c     **** 
 3618              		.loc 1 169 5 is_stmt 0 view .LVU1026
 3619 0ff0 FEFFFFEB 		bl	__assert_fail		@
 3620              	.LVL279:
 3621              	.L247:
 3622              		.align	2
 3623              	.L246:
 3624 0ff4 00000000 		.word	g_armwave_state
 3625 0ff8 18000000 		.word	.LANCHOR0+24
 3626 0ffc 20000000 		.word	.LC2
 3627 1000 2C000000 		.word	.LC3
 3628              	.LBE52:
 3629              	.LBE54:
 3630              		.cfi_endproc
 3631              	.LFE73:
 3633              		.align	2
 3634              		.global	armwave_fill_pixbuf_into_pybuffer
 3635              		.syntax unified
 3636              		.arm
 3637              		.fpu vfp
 3639              	armwave_fill_pixbuf_into_pybuffer:
 3640              	.LVL280:
 3641              	.LFB74:
 432:armwave.c     **** 
 433:armwave.c     **** /*
 434:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 435:armwave.c     ****  */
 436:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 437:armwave.c     **** {
 3642              		.loc 1 437 1 is_stmt 1 view -0
 3643              		.cfi_startproc
 3644              		@ args = 0, pretend = 0, frame = 48
 3645              		@ frame_needed = 0, uses_anonymous_args = 0
 438:armwave.c     ****     Py_buffer buffer;
 3646              		.loc 1 438 5 view .LVU1028
 439:armwave.c     ****     int ret;
 3647              		.loc 1 439 5 view .LVU1029
 440:armwave.c     **** 
 441:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3648              		.loc 1 441 5 view .LVU1030
 3649              	@ armwave.c:437: {
 437:armwave.c     ****     Py_buffer buffer;
 3650              		.loc 1 437 1 is_stmt 0 view .LVU1031
 3651 1004 10402DE9 		push	{r4, lr}	@
 3652              		.cfi_def_cfa_offset 8
 3653              		.cfi_offset 4, -8
 3654              		.cfi_offset 14, -4
 3655 1008 0040A0E1 		mov	r4, r0	@ buf_obj, buf_obj
 3656 100c 30D04DE2 		sub	sp, sp, #48	@,,
 3657              		.cfi_def_cfa_offset 56
 3658              	@ armwave.c:441:     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3659              		.loc 1 441 5 view .LVU1032
 3660 1010 64009FE5 		ldr	r0, .L252	@,
 3661              	.LVL281:
 3662              		.loc 1 441 5 view .LVU1033
 3663 1014 FEFFFFEB 		bl	puts		@
 3664              	.LVL282:
 442:armwave.c     **** 
 443:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3665              		.loc 1 443 5 is_stmt 1 view .LVU1034
 3666              	@ armwave.c:443:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3667              		.loc 1 443 11 is_stmt 0 view .LVU1035
 3668 1018 0400A0E1 		mov	r0, r4	@, buf_obj
 3669 101c 04108DE2 		add	r1, sp, #4	@ tmp128,,
 3670 1020 0120A0E3 		mov	r2, #1	@,
 3671 1024 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3672              	.LVL283:
 444:armwave.c     **** 
 445:armwave.c     ****     if(ret != 0) {
 3673              		.loc 1 445 5 is_stmt 1 view .LVU1036
 3674              	@ armwave.c:445:     if(ret != 0) {
 3675              		.loc 1 445 7 is_stmt 0 view .LVU1037
 3676 1028 000050E3 		cmp	r0, #0	@,
 3677 102c 0900001A 		bne	.L251		@,
 446:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 447:armwave.c     ****         Py_RETURN_FALSE;
 448:armwave.c     ****     }
 449:armwave.c     **** 
 450:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 451:armwave.c     **** 
 452:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3678              		.loc 1 452 5 is_stmt 1 view .LVU1038
 3679 1030 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3680              	.LVL284:
 3681              		.loc 1 452 5 is_stmt 0 view .LVU1039
 3682 1034 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3683              	.LVL285:
 453:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 3684              		.loc 1 453 5 is_stmt 1 view .LVU1040
 3685 1038 40009FE5 		ldr	r0, .L252+4	@,
 3686 103c FEFFFFEB 		bl	puts		@
 3687              	.LVL286:
 454:armwave.c     **** 
 455:armwave.c     ****     PyBuffer_Release(&buffer);
 3688              		.loc 1 455 5 view .LVU1041
 3689 1040 04008DE2 		add	r0, sp, #4	@ tmp129,,
 3690 1044 FEFFFFEB 		bl	PyBuffer_Release		@
 3691              	.LVL287:
 456:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 3692              		.loc 1 456 5 view .LVU1042
 3693 1048 34009FE5 		ldr	r0, .L252+8	@,
 3694 104c FEFFFFEB 		bl	puts		@
 3695              	.LVL288:
 3696              	@ armwave.c:457: }
 457:armwave.c     **** }
 3697              		.loc 1 457 1 is_stmt 0 view .LVU1043
 3698 1050 30D08DE2 		add	sp, sp, #48	@,,
 3699              		.cfi_remember_state
 3700              		.cfi_def_cfa_offset 8
 3701              		@ sp needed	@
 3702 1054 1080BDE8 		pop	{r4, pc}	@
 3703              	.LVL289:
 3704              	.L251:
 3705              		.cfi_restore_state
 446:armwave.c     ****         Py_RETURN_FALSE;
 3706              		.loc 1 446 9 is_stmt 1 view .LVU1044
 3707 1058 28009FE5 		ldr	r0, .L252+12	@,
 3708              	.LVL290:
 446:armwave.c     ****         Py_RETURN_FALSE;
 3709              		.loc 1 446 9 is_stmt 0 view .LVU1045
 3710 105c FEFFFFEB 		bl	puts		@
 3711              	.LVL291:
 447:armwave.c     ****     }
 3712              		.loc 1 447 9 is_stmt 1 view .LVU1046
 3713              	.LBB55:
 3714              	.LBI55:
 3715              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3716              		.loc 2 456 20 view .LVU1047
 3717              	.LBB56:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3718              		.loc 2 458 21 view .LVU1048
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3719              		.loc 2 459 5 view .LVU1049
 3720              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3721              		.loc 2 459 18 is_stmt 0 view .LVU1050
 3722 1060 24309FE5 		ldr	r3, .L252+16	@ tmp119,
 3723              	.LBE56:
 3724              	.LBE55:
 3725              	@ armwave.c:447:         Py_RETURN_FALSE;
 447:armwave.c     ****     }
 3726              		.loc 1 447 9 view .LVU1051
 3727 1064 0300A0E1 		mov	r0, r3	@ <retval>, tmp119
 3728              	.LBB58:
 3729              	.LBB57:
 3730              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3731              		.loc 2 459 18 view .LVU1052
 3732 1068 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct], MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3733 106c 012082E2 		add	r2, r2, #1	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3734 1070 002083E5 		str	r2, [r3]	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3735              	.LBE57:
 3736              	.LBE58:
 3737              	@ armwave.c:457: }
 3738              		.loc 1 457 1 view .LVU1053
 3739 1074 30D08DE2 		add	sp, sp, #48	@,,
 3740              		.cfi_def_cfa_offset 8
 3741              		@ sp needed	@
 3742 1078 1080BDE8 		pop	{r4, pc}	@
 3743              	.LVL292:
 3744              	.L253:
 3745              		.loc 1 457 1 view .LVU1054
 3746              		.align	2
 3747              	.L252:
 3748 107c E4010000 		.word	.LC18
 3749 1080 64020000 		.word	.LC20
 3750 1084 98020000 		.word	.LC21
 3751 1088 10020000 		.word	.LC19
 3752 108c 00000000 		.word	_Py_FalseStruct
 3753              		.cfi_endproc
 3754              	.LFE74:
 3756              		.align	2
 3757              		.global	armwave_test_create_am_sine
 3758              		.syntax unified
 3759              		.arm
 3760              		.fpu vfp
 3762              	armwave_test_create_am_sine:
 3763              	.LVL293:
 3764              	.LFB75:
 458:armwave.c     **** 
 459:armwave.c     **** /*
 460:armwave.c     ****  * Make a test AM waveform for render tests.
 461:armwave.c     ****  *
 462:armwave.c     ****  * @param   mod                 modulation depth
 463:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 464:armwave.c     ****  */
 465:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 466:armwave.c     **** {
 3765              		.loc 1 466 1 is_stmt 1 view -0
 3766              		.cfi_startproc
 3767              		@ args = 0, pretend = 0, frame = 8
 3768              		@ frame_needed = 0, uses_anonymous_args = 0
 467:armwave.c     ****     float v, noise, xnoise, mod_val;
 3769              		.loc 1 467 5 view .LVU1056
 468:armwave.c     ****     int w, x;
 3770              		.loc 1 468 5 view .LVU1057
 469:armwave.c     **** 
 470:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3771              		.loc 1 470 5 view .LVU1058
 3772              	@ armwave.c:466: {
 466:armwave.c     ****     float v, noise, xnoise, mod_val;
 3773              		.loc 1 466 1 is_stmt 0 view .LVU1059
 3774 1090 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 3775              		.cfi_def_cfa_offset 20
 3776              		.cfi_offset 4, -20
 3777              		.cfi_offset 5, -16
 3778              		.cfi_offset 6, -12
 3779              		.cfi_offset 7, -8
 3780              		.cfi_offset 14, -4
 3781 1094 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3782              		.cfi_def_cfa_offset 76
 3783              		.cfi_offset 80, -76
 3784              		.cfi_offset 81, -72
 3785              		.cfi_offset 82, -68
 3786              		.cfi_offset 83, -64
 3787              		.cfi_offset 84, -60
 3788              		.cfi_offset 85, -56
 3789              		.cfi_offset 86, -52
 3790              		.cfi_offset 87, -48
 3791              		.cfi_offset 88, -44
 3792              		.cfi_offset 89, -40
 3793              		.cfi_offset 90, -36
 3794              		.cfi_offset 91, -32
 3795              		.cfi_offset 92, -28
 3796              		.cfi_offset 93, -24
 3797              	@ armwave.c:470:     for(w = 0; w < g_armwave_state.waves; w++) {
 3798              		.loc 1 470 35 view .LVU1060
 3799 1098 68519FE5 		ldr	r5, .L279+32	@ tmp211,
 3800 109c 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_77, g_armwave_state.waves
 3801              	@ armwave.c:466: {
 466:armwave.c     ****     float v, noise, xnoise, mod_val;
 3802              		.loc 1 466 1 view .LVU1061
 3803 10a0 0CD04DE2 		sub	sp, sp, #12	@,,
 3804              		.cfi_def_cfa_offset 88
 3805              	@ armwave.c:470:     for(w = 0; w < g_armwave_state.waves; w++) {
 3806              		.loc 1 470 5 view .LVU1062
 3807 10a4 000052E3 		cmp	r2, #0	@ prephitmp_77,
 3808 10a8 4B00000A 		beq	.L254		@,
 3809 10ac 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3810 10b0 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3811              	@ armwave.c:471:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 471:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3812              		.loc 1 471 37 view .LVU1063
 3813 10b4 4BDADFED 		vldr.32	s27, .L279	@ tmp164,
 3814              	@ armwave.c:471:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3815              		.loc 1 471 17 view .LVU1064
 3816 10b8 4BDA9FED 		vldr.32	s26, .L279+4	@ tmp166,
 3817              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 472:armwave.c     ****         //mod = 1.0f;
 473:armwave.c     **** 
 474:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 475:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 476:armwave.c     ****             noise *= noise;
 477:armwave.c     ****             noise *= noise;
 478:armwave.c     ****             noise *= noise;
 479:armwave.c     **** 
 480:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 481:armwave.c     ****                 noise = -noise;
 482:armwave.c     **** 
 483:armwave.c     ****             noise += 1.0f;
 484:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 485:armwave.c     **** 
 486:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3818              		.loc 1 486 41 view .LVU1065
 3819 10bc 4B8A9FED 		vldr.32	s16, .L279+8	@ tmp216,
 3820              	@ armwave.c:488:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 487:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 488:armwave.c     ****             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 + (v * 127), 0), 
 3821              		.loc 1 488 69 view .LVU1066
 3822 10c0 4BCA9FED 		vldr.32	s24, .L279+12	@ tmp217,
 3823 10c4 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_82, g_armwave_state.wave_length
 3824 10c8 3C719FE5 		ldr	r7, .L279+36	@ tmp215,
 3825              	@ armwave.c:470:     for(w = 0; w < g_armwave_state.waves; w++) {
 470:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3826              		.loc 1 470 11 view .LVU1067
 3827 10cc 0060A0E3 		mov	r6, #0	@ w,
 3828              	.LVL294:
 3829              	.L262:
 471:armwave.c     ****         //mod = 1.0f;
 3830              		.loc 1 471 9 is_stmt 1 view .LVU1068
 3831              	@ armwave.c:471:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 471:armwave.c     ****         //mod = 1.0f;
 3832              		.loc 1 471 28 is_stmt 0 view .LVU1069
 3833 10d0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3834              	@ armwave.c:471:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 471:armwave.c     ****         //mod = 1.0f;
 3835              		.loc 1 471 17 view .LVU1070
 3836 10d4 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp166
 3837              	@ armwave.c:474:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 474:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3838              		.loc 1 474 9 view .LVU1071
 3839 10d8 000053E3 		cmp	r3, #0	@ prephitmp_82,
 3840              	@ armwave.c:471:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 471:armwave.c     ****         //mod = 1.0f;
 3841              		.loc 1 471 28 view .LVU1072
 3842 10dc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp162, w
 3843              	@ armwave.c:471:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 471:armwave.c     ****         //mod = 1.0f;
 3844              		.loc 1 471 37 view .LVU1073
 3845 10e0 AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp163, tmp162, tmp164
 3846              	@ armwave.c:471:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 471:armwave.c     ****         //mod = 1.0f;
 3847              		.loc 1 471 17 view .LVU1074
 3848 10e4 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp163, mod
 3849              	.LVL295:
 474:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3850              		.loc 1 474 9 is_stmt 1 view .LVU1075
 474:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3851              		.loc 1 474 9 is_stmt 0 view .LVU1076
 3852 10e8 3800000A 		beq	.L256		@,
 3853 10ec C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp213, mod_val
 3854              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3855              		.loc 1 486 29 view .LVU1077
 3856 10f0 40BA9FED 		vldr.32	s22, .L279+16	@ tmp178,
 3857              	@ armwave.c:484:             xnoise = (rand() & 0xffff) / 6553500.0f;
 484:armwave.c     **** 
 3858              		.loc 1 484 20 view .LVU1078
 3859 10f4 40AADFED 		vldr.32	s21, .L279+20	@ tmp184,
 3860              	@ armwave.c:488:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3861              		.loc 1 488 71 view .LVU1079
 3862 10f8 40AA9FED 		vldr.32	s20, .L279+24	@ tmp195,
 3863 10fc 408ADFED 		vldr.32	s17, .L279+28	@ tmp196,
 3864              	@ armwave.c:474:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 474:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3865              		.loc 1 474 15 view .LVU1080
 3866 1100 0040A0E3 		mov	r4, #0	@ x,
 3867              	.LVL296:
 3868              	.L261:
 475:armwave.c     ****             noise *= noise;
 3869              		.loc 1 475 13 is_stmt 1 view .LVU1081
 3870              	@ armwave.c:475:             noise  = ((rand() & 0xffff) * noise_fraction);
 475:armwave.c     ****             noise *= noise;
 3871              		.loc 1 475 24 is_stmt 0 view .LVU1082
 3872 1104 FEFFFFEB 		bl	rand		@
 3873              	.LVL297:
 3874              	@ armwave.c:475:             noise  = ((rand() & 0xffff) * noise_fraction);
 475:armwave.c     ****             noise *= noise;
 3875              		.loc 1 475 31 view .LVU1083
 3876 1108 7000FFE6 		uxth	r0, r0	@ tmp167,
 3877              	@ armwave.c:475:             noise  = ((rand() & 0xffff) * noise_fraction);
 475:armwave.c     ****             noise *= noise;
 3878              		.loc 1 475 41 view .LVU1084
 3879 110c 900A07EE 		vmov	s15, r0	@ int	@ tmp167, tmp167
 3880 1110 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp169, tmp167
 3881              	@ armwave.c:475:             noise  = ((rand() & 0xffff) * noise_fraction);
 475:armwave.c     ****             noise *= noise;
 3882              		.loc 1 475 20 view .LVU1085
 3883 1114 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp169, noise_fraction
 3884              	.LVL298:
 476:armwave.c     ****             noise *= noise;
 3885              		.loc 1 476 13 is_stmt 1 view .LVU1086
 3886              	@ armwave.c:476:             noise *= noise;
 476:armwave.c     ****             noise *= noise;
 3887              		.loc 1 476 19 is_stmt 0 view .LVU1087
 3888 1118 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3889              	.LVL299:
 477:armwave.c     ****             noise *= noise;
 3890              		.loc 1 477 13 is_stmt 1 view .LVU1088
 3891              	@ armwave.c:477:             noise *= noise;
 477:armwave.c     ****             noise *= noise;
 3892              		.loc 1 477 19 is_stmt 0 view .LVU1089
 3893 111c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3894              	.LVL300:
 478:armwave.c     **** 
 3895              		.loc 1 478 13 is_stmt 1 view .LVU1090
 3896              	@ armwave.c:478:             noise *= noise;
 478:armwave.c     **** 
 3897              		.loc 1 478 19 is_stmt 0 view .LVU1091
 3898 1120 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3899              	.LVL301:
 480:armwave.c     ****                 noise = -noise;
 3900              		.loc 1 480 13 is_stmt 1 view .LVU1092
 3901              	@ armwave.c:480:             if((rand() & 0xffff) > 0x7fff)
 480:armwave.c     ****                 noise = -noise;
 3902              		.loc 1 480 17 is_stmt 0 view .LVU1093
 3903 1124 FEFFFFEB 		bl	rand		@
 3904              	.LVL302:
 481:armwave.c     **** 
 3905              		.loc 1 481 17 is_stmt 1 view .LVU1094
 3906              	@ armwave.c:480:             if((rand() & 0xffff) > 0x7fff)
 480:armwave.c     ****                 noise = -noise;
 3907              		.loc 1 480 15 is_stmt 0 view .LVU1095
 3908 1128 020910E3 		tst	r0, #32768	@,
 3909              	@ armwave.c:481:                 noise = -noise;
 481:armwave.c     **** 
 3910              		.loc 1 481 23 view .LVU1096
 3911 112c 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3912              	.LVL303:
 483:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3913              		.loc 1 483 13 is_stmt 1 view .LVU1097
 484:armwave.c     **** 
 3914              		.loc 1 484 13 view .LVU1098
 3915              	@ armwave.c:484:             xnoise = (rand() & 0xffff) / 6553500.0f;
 484:armwave.c     **** 
 3916              		.loc 1 484 23 is_stmt 0 view .LVU1099
 3917 1130 FEFFFFEB 		bl	rand		@
 3918              	.LVL304:
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3919              		.loc 1 486 13 is_stmt 1 view .LVU1100
 3920              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3921              		.loc 1 486 41 is_stmt 0 view .LVU1101
 3922 1134 0E7A95ED 		vldr.32	s14, [r5, #56]	@ int	@ tmp225, g_armwave_state.wave_length
 3923              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3924              		.loc 1 486 29 view .LVU1102
 3925 1138 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3926              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3927              		.loc 1 486 41 view .LVU1103
 3928 113c 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp172, tmp225
 3929              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3930              		.loc 1 486 29 view .LVU1104
 3931 1140 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp176, x
 3932              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3933              		.loc 1 486 41 view .LVU1105
 3934 1144 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp174, tmp216, tmp172
 3935              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3936              		.loc 1 486 29 view .LVU1106
 3937 1148 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp177, tmp176, tmp178
 3938              	@ armwave.c:484:             xnoise = (rand() & 0xffff) / 6553500.0f;
 484:armwave.c     **** 
 3939              		.loc 1 484 30 view .LVU1107
 3940 114c 7000FFE6 		uxth	r0, r0	@ tmp180,
 3941              	.LVL305:
 3942              	@ armwave.c:484:             xnoise = (rand() & 0xffff) / 6553500.0f;
 484:armwave.c     **** 
 3943              		.loc 1 484 40 view .LVU1108
 3944 1150 100A07EE 		vmov	s14, r0	@ int	@ tmp180, tmp180
 3945 1154 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp182, tmp180
 3946              	@ armwave.c:484:             xnoise = (rand() & 0xffff) / 6553500.0f;
 484:armwave.c     **** 
 3947              		.loc 1 484 20 view .LVU1109
 3948 1158 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp182, tmp184
 3949              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3950              		.loc 1 486 73 view .LVU1110
 3951 115c A70A06EE 		vmla.f32	s0, s13, s15	@ tmp185, tmp174, tmp177
 3952              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3953              		.loc 1 486 18 view .LVU1111
 3954 1160 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp185
 3955 1164 FEFFFFEB 		bl	sin		@
 3956              	.LVL306:
 3957              		.loc 1 488 13 is_stmt 1 view .LVU1112
 3958              	@ armwave.c:483:             noise += 1.0f;
 483:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3959              		.loc 1 483 19 is_stmt 0 view .LVU1113
 3960 1168 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp216
 3961              	@ armwave.c:488:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3962              		.loc 1 488 69 view .LVU1114
 3963 116c 0020A0E3 		mov	r2, #0	@ iftmp.23_39,
 3964              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3965              		.loc 1 486 94 view .LVU1115
 3966 1170 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp191, noise
 3967              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3968              		.loc 1 486 83 view .LVU1116
 3969 1174 000B29EE 		vmul.f64	d0, d9, d0	@ tmp188, tmp213,
 3970              	.LVL307:
 3971              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3972              		.loc 1 486 94 view .LVU1117
 3973 1178 077B20EE 		vmul.f64	d7, d0, d7	@ tmp192, tmp188, tmp191
 3974              	@ armwave.c:486:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 486:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3975              		.loc 1 486 15 view .LVU1118
 3976 117c C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp192
 3977              	@ armwave.c:488:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3978              		.loc 1 488 71 view .LVU1119
 3979 1180 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp196
 3980 1184 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp195
 3981 1188 C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3982 118c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3983 1190 050000DA 		ble	.L258		@,
 3984              	@ armwave.c:488:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3985              		.loc 1 488 69 discriminator 1 view .LVU1120
 3986 1194 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp217
 3987 1198 FF20A0E3 		mov	r2, #255	@ iftmp.23_39,
 3988 119c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3989 11a0 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp200, _26
 3990 11a4 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp200, %sfp
 3991 11a8 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_39, %sfp
 3992              	.L258:
 3993              	@ armwave.c:488:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3994              		.loc 1 488 37 discriminator 12 view .LVU1121
 3995 11ac 203095E5 		ldr	r3, [r5, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3996              	@ armwave.c:488:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3997              		.loc 1 488 69 discriminator 12 view .LVU1122
 3998 11b0 001097E5 		ldr	r1, [r7]	@ test_wave_buffer, test_wave_buffer
 3999 11b4 931623E0 		mla	r3, r3, r6, r1	@ tmp206, g_armwave_state.wave_stride, w, test_wave_buffer
 4000 11b8 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.23_39, *_31
 4001              	@ armwave.c:474:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 474:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4002              		.loc 1 474 39 discriminator 12 view .LVU1123
 4003 11bc 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_82, g_armwave_state.wave_length
 4004              	@ armwave.c:474:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 474:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4005              		.loc 1 474 54 discriminator 12 view .LVU1124
 4006 11c0 014084E2 		add	r4, r4, #1	@ x, x,
 4007              	.LVL308:
 4008              	@ armwave.c:474:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 474:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4009              		.loc 1 474 9 discriminator 12 view .LVU1125
 4010 11c4 040053E1 		cmp	r3, r4	@ prephitmp_82, x
 4011 11c8 CDFFFF8A 		bhi	.L261		@,
 4012 11cc 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_77, g_armwave_state.waves
 4013              	.LVL309:
 4014              	.L256:
 4015              	@ armwave.c:470:     for(w = 0; w < g_armwave_state.waves; w++) {
 470:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 4016              		.loc 1 470 44 discriminator 2 view .LVU1126
 4017 11d0 016086E2 		add	r6, r6, #1	@ w, w,
 4018              	.LVL310:
 4019              	@ armwave.c:470:     for(w = 0; w < g_armwave_state.waves; w++) {
 470:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 4020              		.loc 1 470 5 discriminator 2 view .LVU1127
 4021 11d4 020056E1 		cmp	r6, r2	@ w, prephitmp_77
 4022 11d8 BCFFFF3A 		bcc	.L262		@,
 4023              	.LVL311:
 4024              	.L254:
 4025              	@ armwave.c:491: }
 489:armwave.c     ****         }
 490:armwave.c     ****     }
 491:armwave.c     **** }
 4026              		.loc 1 491 1 view .LVU1128
 4027 11dc 0CD08DE2 		add	sp, sp, #12	@,,
 4028              		.cfi_def_cfa_offset 76
 4029              		@ sp needed	@
 4030 11e0 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 4031              		.cfi_restore 92
 4032              		.cfi_restore 93
 4033              		.cfi_restore 90
 4034              		.cfi_restore 91
 4035              		.cfi_restore 88
 4036              		.cfi_restore 89
 4037              		.cfi_restore 86
 4038              		.cfi_restore 87
 4039              		.cfi_restore 84
 4040              		.cfi_restore 85
 4041              		.cfi_restore 82
 4042              		.cfi_restore 83
 4043              		.cfi_restore 80
 4044              		.cfi_restore 81
 4045              		.cfi_def_cfa_offset 20
 4046 11e4 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 4047              	.L280:
 4048              		.align	2
 4049              	.L279:
 4050 11e8 0000803C 		.word	1015021568
 4051 11ec 0000003F 		.word	1056964608
 4052 11f0 0000803F 		.word	1065353216
 4053 11f4 00007F43 		.word	1132396544
 4054 11f8 C3F5C840 		.word	1086911939
 4055 11fc 38FFC74A 		.word	1254620984
 4056 1200 0000FE42 		.word	1123942400
 4057 1204 00000043 		.word	1124073472
 4058 1208 00000000 		.word	g_armwave_state
 4059 120c 00000000 		.word	test_wave_buffer
 4060              		.cfi_endproc
 4061              	.LFE75:
 4063              		.align	2
 4064              		.global	armwave_test_create_square
 4065              		.syntax unified
 4066              		.arm
 4067              		.fpu vfp
 4069              	armwave_test_create_square:
 4070              	.LVL312:
 4071              	.LFB76:
 492:armwave.c     **** 
 493:armwave.c     **** /*
 494:armwave.c     ****  * Make a test square waveform.
 495:armwave.c     ****  *
 496:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 497:armwave.c     ****  */
 498:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 499:armwave.c     **** {
 4072              		.loc 1 499 1 is_stmt 1 view -0
 4073              		.cfi_startproc
 4074              		@ args = 0, pretend = 0, frame = 8
 4075              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     uint8_t v;
 4076              		.loc 1 500 5 view .LVU1130
 501:armwave.c     ****     float noise, xnoise;
 4077              		.loc 1 501 5 view .LVU1131
 502:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 4078              		.loc 1 502 5 view .LVU1132
 503:armwave.c     ****     int w, x;
 4079              		.loc 1 503 5 view .LVU1133
 504:armwave.c     **** 
 505:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 4080              		.loc 1 505 5 view .LVU1134
 4081              	@ armwave.c:499: {
 499:armwave.c     ****     uint8_t v;
 4082              		.loc 1 499 1 is_stmt 0 view .LVU1135
 4083 1210 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 4084              		.cfi_def_cfa_offset 20
 4085              		.cfi_offset 4, -20
 4086              		.cfi_offset 5, -16
 4087              		.cfi_offset 6, -12
 4088              		.cfi_offset 7, -8
 4089              		.cfi_offset 14, -4
 4090 1214 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 4091              		.cfi_def_cfa_offset 60
 4092              		.cfi_offset 80, -60
 4093              		.cfi_offset 81, -56
 4094              		.cfi_offset 82, -52
 4095              		.cfi_offset 83, -48
 4096              		.cfi_offset 84, -44
 4097              		.cfi_offset 85, -40
 4098              		.cfi_offset 86, -36
 4099              		.cfi_offset 87, -32
 4100              		.cfi_offset 88, -28
 4101              		.cfi_offset 89, -24
 4102              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 4103              		.loc 1 505 35 view .LVU1136
 4104 1218 58519FE5 		ldr	r5, .L309+32	@ tmp179,
 4105 121c 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_33, g_armwave_state.waves
 4106              	@ armwave.c:499: {
 499:armwave.c     ****     uint8_t v;
 4107              		.loc 1 499 1 view .LVU1137
 4108 1220 0CD04DE2 		sub	sp, sp, #12	@,,
 4109              		.cfi_def_cfa_offset 72
 4110              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 4111              		.loc 1 505 5 view .LVU1138
 4112 1224 000052E3 		cmp	r2, #0	@ prephitmp_33,
 4113 1228 4700000A 		beq	.L281		@,
 4114 122c 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 4115              	@ armwave.c:502:     float level = 0.8f, new_level = 0.8f;
 502:armwave.c     ****     int w, x;
 4116              		.loc 1 502 11 view .LVU1139
 4117 1230 48CA9FED 		vldr.32	s24, .L309	@ level,
 4118              	@ armwave.c:517:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 506:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 507:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 508:armwave.c     ****             noise *= noise;
 509:armwave.c     ****             noise *= noise;
 510:armwave.c     ****             noise *= noise;
 511:armwave.c     **** 
 512:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 513:armwave.c     ****                 noise = -noise;
 514:armwave.c     **** 
 515:armwave.c     ****             //noise += 1.0f;
 516:armwave.c     **** 
 517:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 4119              		.loc 1 517 49 view .LVU1140
 4120 1234 48AA9FED 		vldr.32	s20, .L309+4	@ tmp188,
 4121              	@ armwave.c:522:                 new_level = 0.2f;
 518:armwave.c     ****                 new_level = 0.2f;
 519:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 520:armwave.c     ****                 new_level = 0.8f;
 521:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 522:armwave.c     ****                 new_level = 0.2f;
 4122              		.loc 1 522 27 view .LVU1141
 4123 1238 48AADFED 		vldr.32	s21, .L309+8	@ new_level,
 4124              	@ armwave.c:521:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 521:armwave.c     ****                 new_level = 0.2f;
 4125              		.loc 1 521 56 view .LVU1142
 4126 123c 488ADFED 		vldr.32	s17, .L309+12	@ tmp190,
 4127 1240 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_70, g_armwave_state.wave_length
 4128 1244 30719FE5 		ldr	r7, .L309+36	@ tmp187,
 4129              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 505:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4130              		.loc 1 505 11 view .LVU1143
 4131 1248 0060A0E3 		mov	r6, #0	@ w,
 4132              	.LVL313:
 4133              	.L283:
 4134              	@ armwave.c:506:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 506:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4135              		.loc 1 506 9 view .LVU1144
 4136 124c 000053E3 		cmp	r3, #0	@ prephitmp_70,
 4137 1250 3A00000A 		beq	.L290		@,
 4138              	@ armwave.c:519:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 519:armwave.c     ****                 new_level = 0.8f;
 4139              		.loc 1 519 56 view .LVU1145
 4140 1254 43BA9FED 		vldr.32	s22, .L309+16	@ tmp184,
 4141              	@ armwave.c:520:                 new_level = 0.8f;
 520:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4142              		.loc 1 520 27 view .LVU1146
 4143 1258 3EBADFED 		vldr.32	s23, .L309	@ new_level,
 4144              	@ armwave.c:527:             level = ((level * 3) + new_level) * 0.25f;
 523:armwave.c     ****             } else {
 524:armwave.c     ****                 new_level = 0.8f;
 525:armwave.c     ****             }
 526:armwave.c     **** 
 527:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 4145              		.loc 1 527 29 view .LVU1147
 4146 125c 429A9FED 		vldr.32	s18, .L309+20	@ tmp161,
 4147              	@ armwave.c:506:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 506:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4148              		.loc 1 506 15 view .LVU1148
 4149 1260 0040A0E3 		mov	r4, #0	@ x,
 4150              	.LVL314:
 4151              	.L289:
 507:armwave.c     ****             noise *= noise;
 4152              		.loc 1 507 13 is_stmt 1 view .LVU1149
 4153              	@ armwave.c:507:             noise  = ((rand() & 0xffff) * noise_fraction);
 507:armwave.c     ****             noise *= noise;
 4154              		.loc 1 507 24 is_stmt 0 view .LVU1150
 4155 1264 FEFFFFEB 		bl	rand		@
 4156              	.LVL315:
 4157              	@ armwave.c:507:             noise  = ((rand() & 0xffff) * noise_fraction);
 507:armwave.c     ****             noise *= noise;
 4158              		.loc 1 507 31 view .LVU1151
 4159 1268 7000FFE6 		uxth	r0, r0	@ tmp148,
 4160              	@ armwave.c:507:             noise  = ((rand() & 0xffff) * noise_fraction);
 507:armwave.c     ****             noise *= noise;
 4161              		.loc 1 507 41 view .LVU1152
 4162 126c 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 4163 1270 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 4164              	@ armwave.c:507:             noise  = ((rand() & 0xffff) * noise_fraction);
 507:armwave.c     ****             noise *= noise;
 4165              		.loc 1 507 20 view .LVU1153
 4166 1274 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 4167              	.LVL316:
 508:armwave.c     ****             noise *= noise;
 4168              		.loc 1 508 13 is_stmt 1 view .LVU1154
 4169              	@ armwave.c:508:             noise *= noise;
 508:armwave.c     ****             noise *= noise;
 4170              		.loc 1 508 19 is_stmt 0 view .LVU1155
 4171 1278 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4172              	.LVL317:
 509:armwave.c     ****             noise *= noise;
 4173              		.loc 1 509 13 is_stmt 1 view .LVU1156
 4174              	@ armwave.c:509:             noise *= noise;
 509:armwave.c     ****             noise *= noise;
 4175              		.loc 1 509 19 is_stmt 0 view .LVU1157
 4176 127c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4177              	.LVL318:
 510:armwave.c     **** 
 4178              		.loc 1 510 13 is_stmt 1 view .LVU1158
 4179              	@ armwave.c:510:             noise *= noise;
 510:armwave.c     **** 
 4180              		.loc 1 510 19 is_stmt 0 view .LVU1159
 4181 1280 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 4182              	.LVL319:
 512:armwave.c     ****                 noise = -noise;
 4183              		.loc 1 512 13 is_stmt 1 view .LVU1160
 4184              	@ armwave.c:512:             if((rand() & 0xff) > 0x7f)
 512:armwave.c     ****                 noise = -noise;
 4185              		.loc 1 512 17 is_stmt 0 view .LVU1161
 4186 1284 FEFFFFEB 		bl	rand		@
 4187              	.LVL320:
 4188              	@ armwave.c:517:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 517:armwave.c     ****                 new_level = 0.2f;
 4189              		.loc 1 517 18 view .LVU1162
 4190 1288 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4191 128c E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 4192              	@ armwave.c:517:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 517:armwave.c     ****                 new_level = 0.2f;
 4193              		.loc 1 517 49 view .LVU1163
 4194 1290 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp196, g_armwave_state.wave_length
 4195 1294 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp196
 4196 1298 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp188
 4197              	@ armwave.c:517:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 517:armwave.c     ****                 new_level = 0.2f;
 4198              		.loc 1 517 15 view .LVU1164
 4199 129c E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 4200              	@ armwave.c:512:             if((rand() & 0xff) > 0x7f)
 512:armwave.c     ****                 noise = -noise;
 4201              		.loc 1 512 15 view .LVU1165
 4202 12a0 800010E3 		tst	r0, #128	@,
 513:armwave.c     **** 
 4203              		.loc 1 513 17 is_stmt 1 view .LVU1166
 4204              	@ armwave.c:513:                 noise = -noise;
 513:armwave.c     **** 
 4205              		.loc 1 513 23 is_stmt 0 view .LVU1167
 4206 12a4 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 4207              	.LVL321:
 517:armwave.c     ****                 new_level = 0.2f;
 4208              		.loc 1 517 13 is_stmt 1 view .LVU1168
 4209              	@ armwave.c:517:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 517:armwave.c     ****                 new_level = 0.2f;
 4210              		.loc 1 517 15 is_stmt 0 view .LVU1169
 4211 12a8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4212              	@ armwave.c:522:                 new_level = 0.2f;
 522:armwave.c     ****             } else {
 4213              		.loc 1 522 27 view .LVU1170
 4214 12ac 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 4215              	@ armwave.c:517:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 517:armwave.c     ****                 new_level = 0.2f;
 4216              		.loc 1 517 15 view .LVU1171
 4217 12b0 090000CA 		bgt	.L285		@,
 519:armwave.c     ****                 new_level = 0.8f;
 4218              		.loc 1 519 20 is_stmt 1 view .LVU1172
 4219              	@ armwave.c:519:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 519:armwave.c     ****                 new_level = 0.8f;
 4220              		.loc 1 519 56 is_stmt 0 view .LVU1173
 4221 12b4 8B6A67EE 		vmul.f32	s13, s15, s22	@ tmp156, _8, tmp184
 4222              	@ armwave.c:519:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 519:armwave.c     ****                 new_level = 0.8f;
 4223              		.loc 1 519 22 view .LVU1174
 4224 12b8 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 4225 12bc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4226              	@ armwave.c:520:                 new_level = 0.8f;
 520:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4227              		.loc 1 520 27 view .LVU1175
 4228 12c0 6B7AF0CE 		vmovgt.f32	s15, s23	@ new_level, new_level
 4229              	@ armwave.c:519:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 519:armwave.c     ****                 new_level = 0.8f;
 4230              		.loc 1 519 22 view .LVU1176
 4231 12c4 040000CA 		bgt	.L285		@,
 521:armwave.c     ****                 new_level = 0.2f;
 4232              		.loc 1 521 20 is_stmt 1 view .LVU1177
 4233              	@ armwave.c:521:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 521:armwave.c     ****                 new_level = 0.2f;
 4234              		.loc 1 521 56 is_stmt 0 view .LVU1178
 4235 12c8 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp190
 4236              	@ armwave.c:520:                 new_level = 0.8f;
 520:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4237              		.loc 1 520 27 view .LVU1179
 4238 12cc E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 4239 12d0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4240 12d4 6B7AF0DE 		vmovle.f32	s15, s23	@, new_level, new_level
 4241 12d8 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 4242              	.L285:
 4243              	.LVL322:
 4244              		.loc 1 527 13 is_stmt 1 view .LVU1180
 4245              	@ armwave.c:527:             level = ((level * 3) + new_level) * 0.25f;
 4246              		.loc 1 527 34 is_stmt 0 view .LVU1181
 4247 12dc 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 4248              	.LVL323:
 4249              	@ armwave.c:527:             level = ((level * 3) + new_level) * 0.25f;
 4250              		.loc 1 527 19 view .LVU1182
 4251 12e0 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp190
 4252              	.LVL324:
 528:armwave.c     **** 
 529:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4253              		.loc 1 529 13 is_stmt 1 view .LVU1183
 4254              	@ armwave.c:529:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4255              		.loc 1 529 27 is_stmt 0 view .LVU1184
 4256 12e4 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 4257 12e8 C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 4258 12ec 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4259              	@ armwave.c:529:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4260              		.loc 1 529 17 view .LVU1185
 4261 12f0 0020A0D3 		movle	r2, #0	@ iftmp.31_32,
 4262              	@ armwave.c:529:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4263              		.loc 1 529 27 view .LVU1186
 4264 12f4 080000DA 		ble	.L286		@,
 4265              	@ armwave.c:529:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4266              		.loc 1 529 17 discriminator 1 view .LVU1187
 4267 12f8 1C7A9FED 		vldr.32	s14, .L309+24	@ tmp164,
 4268 12fc C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 4269 1300 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4270              	@ armwave.c:529:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4271              		.loc 1 529 60 discriminator 1 view .LVU1188
 4272 1304 1A7A9F4D 		vldrmi.32	s14, .L309+28	@ tmp166,
 4273              	@ armwave.c:529:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4274              		.loc 1 529 17 discriminator 1 view .LVU1189
 4275 1308 FF20A053 		movpl	r2, #255	@ iftmp.31_32,
 4276              	@ armwave.c:529:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4277              		.loc 1 529 60 discriminator 1 view .LVU1190
 4278 130c 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 4279              	@ armwave.c:529:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4280              		.loc 1 529 17 discriminator 1 view .LVU1191
 4281 1310 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 4282 1314 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 4283 1318 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.31_32, %sfp
 4284              	.L286:
 4285              	.LVL325:
 530:armwave.c     ****             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 4286              		.loc 1 530 13 is_stmt 1 discriminator 12 view .LVU1192
 4287              	@ armwave.c:530:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 4288              		.loc 1 530 37 is_stmt 0 discriminator 12 view .LVU1193
 4289 131c 203095E5 		ldr	r3, [r5, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4290              	@ armwave.c:530:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 4291              		.loc 1 530 69 discriminator 12 view .LVU1194
 4292 1320 001097E5 		ldr	r1, [r7]	@ test_wave_buffer, test_wave_buffer
 4293 1324 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, test_wave_buffer
 4294 1328 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.31_32, *_21
 4295              	@ armwave.c:506:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 506:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4296              		.loc 1 506 39 discriminator 12 view .LVU1195
 4297 132c 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_70, g_armwave_state.wave_length
 4298              	@ armwave.c:506:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 506:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4299              		.loc 1 506 54 discriminator 12 view .LVU1196
 4300 1330 014084E2 		add	r4, r4, #1	@ x, x,
 4301              	.LVL326:
 4302              	@ armwave.c:506:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 506:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4303              		.loc 1 506 9 discriminator 12 view .LVU1197
 4304 1334 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 4305 1338 C9FFFF8A 		bhi	.L289		@,
 4306 133c 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_33, g_armwave_state.waves
 4307              	.LVL327:
 4308              	.L290:
 4309              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 505:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4310              		.loc 1 505 44 discriminator 2 view .LVU1198
 4311 1340 016086E2 		add	r6, r6, #1	@ w, w,
 4312              	.LVL328:
 4313              	@ armwave.c:505:     for(w = 0; w < g_armwave_state.waves; w++) {
 505:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4314              		.loc 1 505 5 discriminator 2 view .LVU1199
 4315 1344 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 4316 1348 BFFFFF3A 		bcc	.L283		@,
 4317              	.LVL329:
 4318              	.L281:
 4319              	@ armwave.c:533: }
 531:armwave.c     ****         }
 532:armwave.c     ****     }
 533:armwave.c     **** }
 4320              		.loc 1 533 1 view .LVU1200
 4321 134c 0CD08DE2 		add	sp, sp, #12	@,,
 4322              		.cfi_def_cfa_offset 60
 4323              		@ sp needed	@
 4324 1350 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 4325              		.cfi_restore 88
 4326              		.cfi_restore 89
 4327              		.cfi_restore 86
 4328              		.cfi_restore 87
 4329              		.cfi_restore 84
 4330              		.cfi_restore 85
 4331              		.cfi_restore 82
 4332              		.cfi_restore 83
 4333              		.cfi_restore 80
 4334              		.cfi_restore 81
 4335              		.cfi_def_cfa_offset 20
 4336 1354 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 4337              	.L310:
 4338              		.align	2
 4339              	.L309:
 4340 1358 CDCC4C3F 		.word	1061997773
 4341 135c 0000403F 		.word	1061158912
 4342 1360 CDCC4C3E 		.word	1045220557
 4343 1364 0000803E 		.word	1048576000
 4344 1368 0000003F 		.word	1056964608
 4345 136c 00004040 		.word	1077936128
 4346 1370 0000803F 		.word	1065353216
 4347 1374 00007F43 		.word	1132396544
 4348 1378 00000000 		.word	g_armwave_state
 4349 137c 00000000 		.word	test_wave_buffer
 4350              		.cfi_endproc
 4351              	.LFE76:
 4353              		.align	2
 4354              		.global	armwave_cleanup
 4355              		.syntax unified
 4356              		.arm
 4357              		.fpu vfp
 4359              	armwave_cleanup:
 4360              	.LFB77:
 534:armwave.c     **** 
 535:armwave.c     **** /*
 536:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 537:armwave.c     ****  */
 538:armwave.c     **** void armwave_cleanup()
 539:armwave.c     **** {
 4361              		.loc 1 539 1 is_stmt 1 view -0
 4362              		.cfi_startproc
 4363              		@ args = 0, pretend = 0, frame = 0
 4364              		@ frame_needed = 0, uses_anonymous_args = 0
 540:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4365              		.loc 1 540 5 view .LVU1202
 4366              	@ armwave.c:539: {
 539:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4367              		.loc 1 539 1 is_stmt 0 view .LVU1203
 4368 1380 10402DE9 		push	{r4, lr}	@
 4369              		.cfi_def_cfa_offset 8
 4370              		.cfi_offset 4, -8
 4371              		.cfi_offset 14, -4
 4372              	@ armwave.c:540:     free(g_armwave_state.out_pixbuf);
 4373              		.loc 1 540 25 view .LVU1204
 4374 1384 28409FE5 		ldr	r4, .L313	@ tmp113,
 4375              	@ armwave.c:540:     free(g_armwave_state.out_pixbuf);
 4376              		.loc 1 540 5 view .LVU1205
 4377 1388 540094E5 		ldr	r0, [r4, #84]	@, g_armwave_state.out_pixbuf
 4378 138c FEFFFFEB 		bl	free		@
 4379              	.LVL330:
 541:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4380              		.loc 1 541 5 is_stmt 1 view .LVU1206
 4381 1390 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4382 1394 FEFFFFEB 		bl	free		@
 4383              	.LVL331:
 542:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4384              		.loc 1 542 5 view .LVU1207
 4385 1398 700094E5 		ldr	r0, [r4, #112]	@, g_armwave_state.xcoord_to_xpixel
 4386 139c FEFFFFEB 		bl	free		@
 4387              	.LVL332:
 543:armwave.c     **** 
 544:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4388              		.loc 1 544 5 view .LVU1208
 4389              	@ armwave.c:544:     g_armwave_state.out_pixbuf = NULL;
 4390              		.loc 1 544 32 is_stmt 0 view .LVU1209
 4391 13a0 0030A0E3 		mov	r3, #0	@ tmp120,
 4392 13a4 543084E5 		str	r3, [r4, #84]	@ tmp120, g_armwave_state.out_pixbuf
 545:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4393              		.loc 1 545 5 is_stmt 1 view .LVU1210
 4394              	@ armwave.c:545:     g_armwave_state.ch1_buffer = NULL;
 4395              		.loc 1 545 32 is_stmt 0 view .LVU1211
 4396 13a8 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 546:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4397              		.loc 1 546 5 is_stmt 1 view .LVU1212
 4398              	@ armwave.c:546:     g_armwave_state.xcoord_to_xpixel = NULL;
 4399              		.loc 1 546 38 is_stmt 0 view .LVU1213
 4400 13ac 703084E5 		str	r3, [r4, #112]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 4401              	@ armwave.c:547: }
 547:armwave.c     **** }
 4402              		.loc 1 547 1 view .LVU1214
 4403 13b0 1080BDE8 		pop	{r4, pc}	@
 4404              	.L314:
 4405              		.align	2
 4406              	.L313:
 4407 13b4 00000000 		.word	g_armwave_state
 4408              		.cfi_endproc
 4409              	.LFE77:
 4411              		.comm	gamma_table,256,4
 4412              		.comm	test_wave_buffer,4,4
 4413              		.comm	g_armwave_state,116,4
 4414              		.section	.rodata
 4415              		.align	2
 4416              		.set	.LANCHOR0,. + 0
 4419              	__PRETTY_FUNCTION__.17016:
 4420 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4420      6176655F 
 4420      66696C6C 
 4420      5F706978 
 4420      6275665F 
 4423              	__PRETTY_FUNCTION__.17047:
 4424 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4424      6176655F 
 4424      66696C6C 
 4424      5F706978 
 4424      6275665F 
 4425 0033 00       		.space	1
 4428              	__PRETTY_FUNCTION__.17069:
 4429 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4429      6176655F 
 4429      73657475 
 4429      705F7265 
 4429      6E646572 
 4430 0049 000000   		.space	3
 4433              	__PRETTY_FUNCTION__.17076:
 4434 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4434      6176655F 
 4434      7365745F 
 4434      77617665 
 4434      5F706F69 
 4435 0065 000000   		.space	3
 4438              	__PRETTY_FUNCTION__.17082:
 4439 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4439      6176655F 
 4439      7365745F 
 4439      77617665 
 4439      5F706F69 
 4440              		.section	.rodata.str1.4,"aMS",%progbits,1
 4441              		.align	2
 4442              	.LC0:
 4443 0000 76302E30 		.ascii	"v0.0.1\000"
 4443      2E3100
 4444 0007 00       		.space	1
 4445              	.LC1:
 4446 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4446      61766520 
 4446      76657273 
 4446      696F6E3A 
 4446      2025730A 
 4447 001d 000000   		.space	3
 4448              	.LC2:
 4449 0020 61726D77 		.ascii	"armwave.c\000"
 4449      6176652E 
 4449      6300
 4450 002a 0000     		.space	2
 4451              	.LC3:
 4452 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4452      62756666 
 4452      65722021 
 4452      3D204E55 
 4452      4C4C00
 4453 003f 00       		.space	1
 4454              	.LC4:
 4455 0040 73746172 		.ascii	"start_point < end_point\000"
 4455      745F706F 
 4455      696E7420 
 4455      3C20656E 
 4455      645F706F 
 4456              	.LC5:
 4457 0058 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 4457      65745F68 
 4457      65696768 
 4457      74203D3D 
 4457      20323536 
 4458 008b 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4458      68656967 
 4458      6874203D 
 4458      3D203130 
 4458      3234207C 
 4459 00b7 00       		.space	1
 4460              	.LC6:
 4461 00b8 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4461      7566665F 
 4461      73697A65 
 4461      3D25640A 
 4461      00
 4462 00c9 000000   		.space	3
 4463              	.LC7:
 4464 00cc 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4464      6D776176 
 4464      655F7374 
 4464      6174652E 
 4464      6368315F 
 4465 00ef 00       		.space	1
 4466              	.LC8:
 4467 00f0 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4467      6D776176 
 4467      655F7374 
 4467      6174652E 
 4467      78636F6F 
 4468 0119 000000   		.space	3
 4469              	.LC9:
 4470 011c 77617665 		.ascii	"wave_buffer != NULL\000"
 4470      5F627566 
 4470      66657220 
 4470      213D204E 
 4470      554C4C00 
 4471              	.LC10:
 4472 0130 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4472      5F627566 
 4472      6665725F 
 4472      70747220 
 4472      213D2030 
 4473 0145 000000   		.space	3
 4474              	.LC11:
 4475 0148 776200   		.ascii	"wb\000"
 4476 014b 00       		.space	1
 4477              	.LC12:
 4478 014c 50330A00 		.ascii	"P3\012\000"
 4479              	.LC13:
 4480 0150 25642025 		.ascii	"%d %d\012\000"
 4480      640A00
 4481 0157 00       		.space	1
 4482              	.LC14:
 4483 0158 3235350A 		.ascii	"255\012\000"
 4483      00
 4484 015d 000000   		.space	3
 4485              	.LC15:
 4486 0160 25336420 		.ascii	"%3d %3d %3d\012\000"
 4486      25336420 
 4486      2533640A 
 4486      00
 4487 016d 000000   		.space	3
 4488              	.LC16:
 4489 0170 61726D77 		.ascii	"armwave_test_init: failed to allocate test wave buf"
 4489      6176655F 
 4489      74657374 
 4489      5F696E69 
 4489      743A2066 
 4490 01a3 66657220 		.ascii	"fer (%d bytes)\012\000"
 4490      28256420 
 4490      62797465 
 4490      73290A00 
 4491 01b3 00       		.space	1
 4492              	.LC17:
 4493 01b4 61726D77 		.ascii	"armwave_test_generate: slice %d (y=%d, h=%d)\012\000"
 4493      6176655F 
 4493      74657374 
 4493      5F67656E 
 4493      65726174 
 4494 01e2 0000     		.space	2
 4495              	.LC18:
 4496 01e4 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: start\000"
 4496      6176655F 
 4496      66696C6C 
 4496      5F706978 
 4496      6275665F 
 4497 020d 000000   		.space	3
 4498              	.LC19:
 4499 0210 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4499      6176655F 
 4499      66696C6C 
 4499      5F706978 
 4499      6275665F 
 4500 0243 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4500      20666169 
 4500      6C65642C 
 4500      20726574 
 4500      75726E69 
 4501 0262 0000     		.space	2
 4502              	.LC20:
 4503 0264 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: buffer fill done"
 4503      6176655F 
 4503      66696C6C 
 4503      5F706978 
 4503      6275665F 
 4504 0297 00       		.ascii	"\000"
 4505              	.LC21:
 4506 0298 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: done\000"
 4506      6176655F 
 4506      66696C6C 
 4506      5F706978 
 4506      6275665F 
 4507              		.text
 4508              	.Letext0:
 4509              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4510              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4511              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4512              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4513              		.file 7 "/usr/include/stdio.h"
 4514              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4515              		.file 9 "/usr/include/errno.h"
 4516              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4517              		.file 11 "/usr/include/unistd.h"
 4518              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4519              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4520              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4521              		.file 15 "/usr/include/math.h"
 4522              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4523              		.file 17 "/usr/include/time.h"
 4524              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4525              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4526              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4527              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4528              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4529              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4530              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4531              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4532              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4533              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4534              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4535              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4536              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4537              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4538              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4539              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4540              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4541              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4542              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4543              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4544              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4545              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4546              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4547              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4548              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4549              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4550              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4551              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4552              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4553              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4554              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4555              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4556              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4557              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4558              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4559              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4560              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4561              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4562              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4563              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4564              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4565              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4566              		.file 60 "/usr/local/include/python3.8/context.h"
 4567              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4568              		.file 62 "/usr/local/include/python3.8/code.h"
 4569              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4570              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4571              		.file 65 "/usr/local/include/python3.8/import.h"
 4572              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4573              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4574              		.file 68 "armwave.h"
 4575              		.file 69 "/usr/include/stdlib.h"
 4576              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4577              		.file 71 "/usr/include/assert.h"
 4578              		.file 72 "<built-in>"
 4579              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
